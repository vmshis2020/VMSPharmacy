<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Codecs</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Codecs.CodecsXpsLoadOptions">
      <summary>Provides the options for loading Open XML Paper Specification (XPS) documents as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <remarks>
        <para>Open XML Paper Specification (XPS) files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>For more information, refer to  <see cref="T:L.Topics.FileFormatsXPSFormat">File Formats - XPS Format</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsXpsSaveOptions">
      <summary>Provides the options for saving a raster image as an Open XML Paper Specification (XPS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <remarks>
        <para>The Open XML Paper Specification Format supports saving images with either PNG or JPEG Compression.</para>
        <para>The following table shows the quality factor used when an image is saved with a particular
            format:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Format</term>
              <description>Property</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Xps</see>
              </term>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor">CodecsXpsSaveOptions.PngQualityFactor</see>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg</see>
              </term>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor">CodecsXpsSaveOptions.JpegQualityFactor</see>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg422</see>
              </term>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor">CodecsXpsSaveOptions.JpegQualityFactor</see>
              </description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg411</see>
              </term>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor">CodecsXpsSaveOptions.JpegQualityFactor</see>
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor">
      <summary>Gets or sets the PNG quality factor used saving a raster image as an Open XML Paper Specification (XPS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <value>
            Any value betwee 0 and 9. 0 = (default compression), 1 (fastest compression) ...
            9 (highest compression ratio). Default value is 3.
            </value>
      <remarks>
            The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will use the <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.PngQualityFactor" /> value when images are
            saved with the <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Xps</see> format.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXpsSaveOptions.JpegQualityFactor">
      <summary>Gets or sets the JPEG quality factor used saving a raster image as an Open XML Paper Specification (XPS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <value>
            A value from 2 to 255, where 2 is the highest quality and 255 is the most compression. You can also use
            a factor of 0 to produce lossless JPEG compressed images. Default value is 2 (Highest quality).
            </value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will use the <see cref="P:Leadtools.Codecs.CodecsXpsSaveOptions.JpegQualityFactor" /> value when images are
            saved with the following formats:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg422</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.XpsJpeg411</see>
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsXpsOptions">
      <summary>Provides the options for loading or saving an Open XML Paper Specification (XPS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <remarks>
        <para>Open XML Paper Specification (XPS) files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>For more information, refer to  <see cref="T:L.Topics.FileFormatsXPSFormat">File Formats - XPS Format</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsXpsOptionsExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.xps")
         Dim pngDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PngCompressed.xps")
         Dim jpegDestFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "JpegCompressed.xps")

         ' Set the resolution for loading XPS files to 300 by 300 DPI (Dots per inch)
         codecs.Options.RasterizeDocument.Load.XResolution = 300
         codecs.Options.RasterizeDocument.Load.YResolution = 300

         ' Load the source file
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Save this file as XPS with PNG compression and quality factor of 9 (highest compression)
         codecs.Options.Xps.Save.PngQualityFactor = 9
         codecs.Save(image, pngDestFileName, RasterImageFormat.Xps, 24)

         ' Save this file as XPS with JPEG 422 compression and quality factor of 255 (highest compression)
         codecs.Options.Xps.Save.JpegQualityFactor = 255
         codecs.Save(image, jpegDestFileName, RasterImageFormat.Xps, 24)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsXpsOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.xps");
         string pngDestFileName = Path.Combine(LEAD_VARS.ImagesDir, "PngCompressed.xps");
         string jpegDestFileName = Path.Combine(LEAD_VARS.ImagesDir, "JpegCompressed.xps");

         // Set the resolution for loading XPS files to 300 by 300 DPI (Dots per inch)
         codecs.Options.RasterizeDocument.Load.XResolution = 300;
         codecs.Options.RasterizeDocument.Load.YResolution = 300;

         // Load the source file
         RasterImage image = codecs.Load(srcFileName);

         // Save this file as XPS with PNG compression and quality factor of 9 (highest compression)
         codecs.Options.Xps.Save.PngQualityFactor = 9;
         codecs.Save(image, pngDestFileName, RasterImageFormat.Xps, 24);

         // Save this file as XPS with JPEG 422 compression and quality factor of 255 (highest compression)
         codecs.Options.Xps.Save.JpegQualityFactor = 255;
         codecs.Save(image, jpegDestFileName, RasterImageFormat.Xps, 24);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXpsOptions.Load">
      <summary>Get the object to set the options for loading Open XML Paper Specification (XPS) documents as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <value>The XPS options used to load Open XML Paper Specification (XPS) documents as a raster image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXpsOptions.Save">
      <summary>Get the object to set the options for saving a raster image as an Open XML Paper Specification (XPS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XML Paper Specification|XPS</keywords>
      <value>The XPS options used to save Open XML Paper Specification (XPS) documents as a raster image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsExtension">
      <summary>Exif extension information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information on this class members and their use, refer to the Exif documentation for the "FlashPix" extensions,
            inside the APP2 markers.
            </remarks>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtension.Name">
      <summary>Gets the name of the extension. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that represents the name of the extension.</value>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtension.Data">
      <summary>Gets an unmanaged pointer to the extension data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.IntPtr" /> that points to the unmanaged extension data. If the extension data is a stream, this
            property will be IntPtr.Zero.</value>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtension.DataLength">
      <summary>Gets the size in bytes of the extension data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The size in bytes of the extension data. If the extension data is a stream, this value should be 0xFFFFFFFF</value>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtension.Clsid">
      <summary>Gets the CLSID that describes the extension data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Guid" /> that describes the extension data.  This is valid only if <see cref="P:Leadtools.Codecs.CodecsExtension.DataLength" /> is 0xFFFFFFFF.</value>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtension.UCDefault">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            Reserved for internal use.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Codecs.CodecsExtensionListFlags">
      <summary>Flags that indicate the type of data contained in the  Exif extensions. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsExtensionListFlags.None">
      <summary>
            No flags being used.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsExtensionListFlags.Stamp">
      <summary>
        <para>A stamp is present. Most likely suitable for LCD displays (and bigger than the stamp stored in the Exif data).</para>
        <para>The stamp can be loaded with <see cref="M:Leadtools.Codecs.CodecsExtensionList.CreateStamp">CodecsExtensionList.CreateStamp</see>.</para>
        <para>Note that this stamp is independent of the regular stamp present in Exif files. Some Exif files have two stamps. The
            regular stamp is loaded with <see cref="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.String,System.Int32)">RasterCodecs.ReadStamp</see>, while the extension stamp is
            loaded with <see cref="M:Leadtools.Codecs.CodecsExtensionList.CreateStamp">CodecsExtensionList.CreateStamp</see>.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsExtensionListFlags.Audio">
      <summary>
            Embedded audio data is present. The <see cref="M:Leadtools.Codecs.CodecsExtensionList.GetAudioData(System.Int32)">CodecsExtensionList.GetAudioData</see>
            method can be called to get to the audio data.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsExtensionList">
      <summary>Exif extension information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.Codecs.CodecsExtensionList" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.Codecs.CodecsExtensionList" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.GetExtensions">
      <summary>Gets an array of objects containing the extension data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>The array of <see cref="T:Leadtools.Codecs.CodecsExtension" /> objects containing the extension data.</returns>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.CreateStamp">
      <summary>Creates a stamp image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>The stamp image created by this method.</returns>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsExtensionList.GetAudioData(System.Int32)">
      <summary>Gets the embedded audio data from the specified extension list. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="stream">Index of the audio stream to retrieve. The extensions may have more than one audio stream. This index
            is 0-based. Therefore, the first stream is stream 0, the second stream is stream 1, etc. To retrieve all the audio streams,
            retrieve the streams one by one until an empty <see cref="T:Leadtools.RasterNativeBuffer" /> is returned (empty
            <see cref="T:Leadtools.RasterNativeBuffer" /> will have a <see cref="P:Leadtools.RasterNativeBuffer.Data">RasterNativeBuffer.Data</see> set to
            IntPtr.Zero and <see cref="P:Leadtools.RasterNativeBuffer.Length">RasterNativeBuffer.Length</see> set to 0.</param>
      <returns>A <see cref="T:Leadtools.RasterNativeBuffer" /> object containing the audio data.</returns>
      <remarks>
        <para>The audio data is stored inside extensions in the WAVE format.</para>
        <para>The audio data can be played directly from memory, or the data can be written to a disk file and played from the
            disk. When writing the audio data to a disk file, give the file a .WAV extension.</para>
        <para>The audio data pointer returned is freed automatically when this <see cref="T:Leadtools.Codecs.CodecsExtensionList" /> object is disposed.
            so do not try to free this memory.</para>
      </remarks>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsExtensionList.Flags">
      <summary>Flags that indicate the type of data contained in the extensions. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The extension list flags.</value>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">RasterCodecs.ReadExtensions</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadByteOrder">
      <summary>Indicates the desired byte order when loading image files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.Rgb">
      <summary>
            Red-green-blue order.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.Bgr">
      <summary>
            Blue-green-red order.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.Gray">
      <summary>
            12 or 16-bit grayscale image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.RgbOrGray">
      <summary>
            Load the image as red, green, blue OR as a 12 or 16-bit grayscale image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.BgrOrGray">
      <summary>
            Load the image as blue, green, red OR as a 12 or 16-bit grayscale image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.Romm">
      <summary>
            ROMM order. ROMM only supports 24 and 48-bit images.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadByteOrder.BgrOrGrayOrRomm">
      <summary>
            Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. ROMM only supports 24 and 48-bit color
            images.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPlanarConfiguration">
      <summary>Indicates the planar configuration of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsPlanarConfiguration.Chunky">
      <summary>
            Chunky
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPlanarConfiguration.PlanarFormat">
      <summary>
            Planar format
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPsdChannelType">
      <summary>Indicates the PSD channel type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Alpha">
      <summary>
            Alpha channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Red">
      <summary>
            Red channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Green">
      <summary>
            Green channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Blue">
      <summary>
            Blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Cyan">
      <summary>
            Cyan channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Magenta">
      <summary>
            Magenta channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Yellow">
      <summary>
            Yellow channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Key">
      <summary>
            Key channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Gray">
      <summary>
            Gray channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Bitmap">
      <summary>
            Bitmap channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.Lightness">
      <summary>
            Lightness channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.A">
      <summary>
            A channel.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPsdChannelType.B">
      <summary>
            B channel.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTiffPhotometricInterpretation">
      <summary>Indicates the photometric interpretation value for TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.MinimumIsWhite">
      <summary>
            Grayscale image, minimum value is white.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.MinimumIsBlack">
      <summary>
            Grayscale image, minimum value is black.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.Rgb">
      <summary>
            RGB color model.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.Palette">
      <summary>
            color map indexed (palletized).
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.Mask">
      <summary>
            1-bit transparency mask.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.Separated">
      <summary>
            color separations (usually CMYK).
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.YcbCr">
      <summary>
            CCIR 601 YcbCr image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTiffPhotometricInterpretation.CieLab">
      <summary>
            1976 CIE L*a*b* image.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsSavePageMode">
      <summary>Indicates the operation to perform when saving multipage files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsSavePageMode.Append">
      <summary>
            Append the page to the end of the file.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsSavePageMode.Insert">
      <summary>
            Insert the page at the specified index.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsSavePageMode.Replace">
      <summary>
            Replace the page at the specified index.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsSavePageMode.Overwrite">
      <summary>
            Overwrite the entire file.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsOverlayCallbackMode">
      <summary>Indicates the overlay callback mode. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsOverlayCallbackMode.LoadCall">
      <summary>
            First, try loading the overlay image from disk. If the load fails, the <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" /> method will be
            asked to provide the overlay image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsOverlayCallbackMode.CallLoad">
      <summary>
            First, call the <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" /> method. If the handler did not supply an overlay image, try loading the
            overlay image from disk.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsOverlayCallbackMode.CallOnly">
      <summary>
            Call the <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" /> method. If there is no <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" /> method passed, there
            is no overlay image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsOverlayCallbackMode.LoadOnly">
      <summary>
            Try to load the overlay image from disk. If the load fails, there is no overlay.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">
      <summary>Specifies the unit of a document page width, height or margins. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit" /> is used to specify the unit of a document page width, height or margins. By using
            this enumeration, you can define document (logical) sizes in pixels, inches or millimeters.</para>
        <para>The CodecsRasterizeDocumentUnit enumeration is used as the value for the following class members:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Class Member</term>
              <description>Units</description>
            </listheader>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit">CodecsDocumentImageInfo.Unit</see>
              </term>
              <description>
                <para>As the units for <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth">CodecsDocumentImageInfo.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight">CodecsDocumentImageInfo.PageHeight</see></para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit">CodecsRasterizeDocumentLoadOptions.Unit</see>
              </term>
              <description>
                <para>As the units for <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see>,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see>,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin">CodecsRasterizeDocumentLoadOptions.LeftMargin</see>,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin">CodecsRasterizeDocumentLoadOptions.TopMargin</see>,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin">CodecsRasterizeDocumentLoadOptions.RightMargin</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin">CodecsRasterizeDocumentLoadOptions.BottomMargin</see></para>
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentUnit.Pixel">
      <summary>
        <para>The page width, height or margins are in pixels.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentUnit.Inch">
      <summary>
        <para>The page width, height or margins are in inches.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentUnit.Millimeter">
      <summary>
        <para>The page width, height or margins are in millimeters.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">
      <summary>Specifies the transformation to use when converting the logical size specified in the current document rasterization options
            to the final physical raster image size. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode" /> enumeration type is used as the value for
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode">CodecsRasterizeDocumentLoadOptions.SizeMode</see> property.</para>
        <para>LEADTOOLS provides support for loading a document as a raster image. Document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>You can use the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode">CodecsRasterizeDocumentLoadOptions.SizeMode</see> property
            to control how to use <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> to control the final
            raster image size. LEADTOOLS will determine the original document size (a value that can be obtained in
            <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth">CodecsDocumentImageInfo.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight">CodecsDocumentImageInfo.PageHeight</see> and then apply the transformation
            from this value to determine the final <see cref="T:Leadtools.RasterImage" /> width and height.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode.None">
      <summary>
        <para>Use the original document width and height. No transformation will be performed and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> are not used.</para>
        <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height value equals to the original document size.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode.Fit">
      <summary>
        <para>Fit the result raster image into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> while
            maintaining the aspect ratio. If the original document size is smaller than the requested page size, no transformation is performed.</para>
        <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height equal to or less than the requested
            page width or height but not greater.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode.FitAlways">
      <summary>
        <para>Always fit the result raster image into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> while
            maintaining the aspect ratio. If the original document size is smaller than the requested page size, then the result
            image is scaled up.</para>
        <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height equal to the requested
            page width or height. Not less and not greater.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode.FitWidth">
      <summary>
        <para>Fit the result raster image width into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> while
            maintaining the aspect ratio. The image height will be calculated based on the transformation and 
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> is not used.</para>
        <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width equal to the requested
            page width. The height depends on the original document height.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode.Stretch">
      <summary>
        <para>The resulting raster image width and height will be exactly equal to
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see>. Aspect ratio
            might be different than the original document.</para>
        <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width and height equal to the requested
            page width and height.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsWmfLoadOptions">
      <summary>Provides options specifically for loading WMF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsWmfLoadOptions.XResolution">
      <summary>Gets or sets the horizontal resolution (DPI) to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The horizontal resolution (DPI) to load.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsWmfLoadOptions.YResolution">
      <summary>Gets or sets the vertical (DPI) to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The vertical resolution (DPI) to load.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsWmfOptions">
      <summary>Provides extra options for loading and saving WMF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsWmfOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         'Setting new options.
         codecs.Options.Wmf.Load.XResolution = 500
         codecs.Options.Wmf.Load.YResolution = 500

         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "WmfImage.wmf"), RasterImageFormat.Wmf, image.BitsPerPixel)

         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "WmfImage.wmf"))

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "wmf.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsWmfOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         //Setting new options.
         codecs.Options.Wmf.Load.XResolution = 500;
         codecs.Options.Wmf.Load.YResolution = 500;

         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "WmfImage.wmf"), RasterImageFormat.Wmf, image.BitsPerPixel);

         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "WmfImage.wmf"));

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "wmf.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsWmfOptions.Load">
      <summary>Gets the options for loading WMF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The WMF load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsDocumentImageInfo">
      <summary>Provides information specific to document images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> class contains properties that specify the original document logical size on disk.
            This can be useful when calculating the rasterization parameters based on your application viewing needs. The
            <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> class contains the following members:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Member</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" />
              </term>
              <description>
                <para>
                  <strong>true</strong> if the image file or stream passed to
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> was a document file such as PDF or XPS and the other
            members of <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> are valid. <strong>false</strong>, otherwise.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" />
              </term>
              <description>
                <para>The original width of the document page in <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" /></para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" />
              </term>
              <description>
                <para>The original height of the document page in <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" /></para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" />
              </term>
              <description>
                <para>The unit for <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" /></para>
              </description>
            </item>
          </list>
        </para>
        <para>These values specify the original size of the document on disk regardless of the settings of current document rasterization. The
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.Width">CodecsImageInfo.Width</see>, <see cref="P:Leadtools.Codecs.CodecsImageInfo.Height">CodecsImageInfo.Height</see>,
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.XResolution">CodecsImageInfo.XResolution</see> and
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.YResolution">CodecsImageInfo.YResolution</see> contains the size of the final rasterized document in
            physical units.</para>
        <para>The original document format is returned as usual in <see cref="P:Leadtools.Codecs.CodecsImageInfo.Format">CodecsImageInfo.Format</see>.</para>
        <para>The <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> instance is returned in the
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.Document">CodecsImageInfo.Document</see> property of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object returned by all the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> or
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> methods.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile">
      <summary>Gets a value indicating whether the image file or stream is a document format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the image file or stream is a document format, <strong>false</strong>; otherwise.</value>
      <remarks>
        <para>When the value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" /> is <strong>true</strong>, then the image file or stream passed to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> is a document file such as PDF or XPS. The rest of
            the members of this class are valid and contain the original document logical size. The physical load (rasterization size) is
            calculated based on the current rasterization values and is stored in <see cref="P:Leadtools.Codecs.CodecsImageInfo.Width">CodecsImageInfo.Width</see>,
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.Height">CodecsImageInfo.Height</see>,
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.XResolution">CodecsImageInfo.XResolution</see> and
            <see cref="P:Leadtools.Codecs.CodecsImageInfo.YResolution">CodecsImageInfo.YResolution</see>.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>If the value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" /> is <strong>false</strong>, then the image file or stream is a raster image
            such as JPEG or TIFF. These files have physical size and the rest of the values of this class should not be used.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth">
      <summary>Gets the logical width of the document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that contains the logical width of the document. This value is in <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" />.</value>
      <remarks>
        <para>The logical width and height of the document is the original size before rasterization. LEADTOOLS usually returns the logical
            size in inches.</para>
        <para>The <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" /> and <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" /> properties are only valid if the
            value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" /> is <strong>true</strong>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight">
      <summary>Gets the logical height of the document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that contains the logical height of the document. This value is in <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" />.</value>
      <remarks>
        <para>The logical width and height of the document is the original size before rasterization. LEADTOOLS usually returns the logical
            size in inches.</para>
        <para>The <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" /> and <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" /> properties are only valid if the
            value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" /> is <strong>true</strong>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit">
      <summary>Gets the unit of the logical width and height of this document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit" /> enumeration member that specifies the unit for
            <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" />.</value>
      <remarks>
        <para>The logical width and height of the document is the original size before rasterization. LEADTOOLS usually returns the logical
            size in inches.</para>
        <para>The <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight" /> and <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.Unit" /> properties are only valid if the
            value of <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile" /> is <strong>true</strong>.</para>
        <para>Possible values are:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Pixel</see>
            </term>
            <description>
              <para>The page width and height are in pixels</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Inch</see>
            </term>
            <description>
              <para>The page width and height are in inches</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Millimeter</see>
            </term>
            <description>
              <para>The page width and height are in millimeters</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPdfTextEncoding">
      <summary>Indicates the type of text encoding to perform when saving PDF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.CodecsPdfTextEncoding" /> enumeration is used as the type for the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.TextEncoding">CodecsPdfSaveOptions.TextEncoding</see>
            property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPdfTextEncoding.None">
      <summary>
            No text encoding at all.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPdfTextEncoding.Base85">
      <summary>
            Use ASCII 85 text encoding algorithm.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPdfTextEncoding.Hex">
      <summary>
            Use ASCII HEX text encoding technique.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPdfLoadOptions">
      <summary>Provides options specifically for loading PDF, PS and EPS file options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>LEADTOOLS uses the same <strong>Leadtools.Pdf.dll</strong> assembly to load Adobe Portable Document Format (PDF), PostScript (PS)
            and Encapsulated PostScript (EPS) files.</para>
        <para>PDF, PS and EPS files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>To obtain extra information of a raster PDF file saved with <see cref="T:Leadtools.Codecs.RasterCodecs" />, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A|PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.UseLibFonts">
      <summary>Gets a value that indicate whether to use the library installed fonts. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to use the library installed fonts, <strong>false</strong> to use the system fonts. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.DisplayDepth">
      <summary>Gets or sets the resulting raster image pixel depth. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The resulting raster image pixel depth, valid values are 0, 1, 4, 8, or 24. The default value is 0 for auto-detect.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>Possible values are:
              <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>0</term><description>Auto-detect. The result image will have the same bits per pixel as the requested page in the source PDF file. Internally, the
            toolkit will use the bits per pixel value of the first image item found on the page. If the page does not have any image items, the result will be
            24 bits per pixel. Use this value only when the source file is a raster PDF.</description></item><item><term>1</term><description>1 bit per pixel in the resultant image.</description></item><item><term>4</term><description>4 bit per pixel in the resultant image.</description></item><item><term>8</term><description>8 bit per pixel in the resultant image.</description></item><item><term>24</term><description>24 bit per pixel in the resultant image.</description></item></list></para>
        <para>Refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> for information on how to use
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">RasterCodecs.GetRasterPdfInfo</see> to obtain this value from a PDF file saved with <see cref="T:Leadtools.Codecs.RasterCodecs" />.</para>
        <para>This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.TextAlpha">
      <summary>Gets or sets a value that indicate the type of font anti-aliasing to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <para>The type of anti-aliasing to use. Default value is 1.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>1</term>
              <description>Do not use font anti-aliasing.</description>
            </item>
            <item>
              <term>2</term>
              <description>Use 2-bit font anti-aliasing.</description>
            </item>
            <item>
              <term>4</term>
              <description>Use 4-bit font anti-aliasing.</description>
            </item>
          </list>
        </para>
      </value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>Aliasing is the effect on all pixel devices where diagonal and curved lines have a zigzag appearance. As pixels get larger, this effect becomes more noticeable.
            Anti-aliasing refers to methods designed to decrease or eliminate this effect. This is done by shading the pixels along the borders of the affected lines.</para>
        <para>This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.GraphicsAlpha">
      <summary>Gets or sets a value that indicate the type of graphics anti-aliasing to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <para>The type of anti-aliasing to use. Default value is 1.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>1</term>
              <description>Do not use graphics anti-aliasing.</description>
            </item>
            <item>
              <term>2</term>
              <description>Use 2-bit graphics anti-aliasing.</description>
            </item>
            <item>
              <term>4</term>
              <description>Use 4-bit graphics anti-aliasing.</description>
            </item>
          </list>
        </para>
      </value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>Aliasing is the effect on all pixel devices where diagonal and curved lines have a zigzag appearance. As pixels get larger, this effect becomes more noticeable.
            Anti-aliasing refers to methods designed to decrease or eliminate this effect. This is done by shading the pixels along the borders of the affected lines.</para>
        <para>This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.Password">
      <summary>Gets or sets the password to use when loading encrypted files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The password to use when loading encrypted files. Default value is an empty string.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>Use an empty string a null reference (Nothing in Visual Basic) to disable the use of a password.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.DisableCropping">
      <summary>Gets a value that indicate whether to crop of PostScript (PS) and Encapsulated PostScript (EPS) files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to disable cropping of PostScript (PS) and Encapsulated PostScript (EPS) files, <strong>false</strong> otherwise.
            Default value is <strong>false</strong>.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>The PDF codecs is also used to load PostScript (PS) and Encapsulated PostScript (EPS) files. Use this option to enable/disable cropping the result raster
            image size to the dimensions of the actual drawing inside the PostScript file. This option is not used when loading PDF files.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.DisableCieColors">
      <summary>Gets or sets a value that indicate whether CIE colors are disabled when loading PDF<a href="#PDF">*</a>, PS or EPS files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to disable the use of CIE colors, <strong>false</strong> otherwise.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>Disabling the use of CIE colors will result in faster loading. This options is used when loading both PDF, PostScript (PS)
            and Encapsulated PostScript (EPS) files.</para>
        <a id="PDF">
        </a>
        <para>
        </para>
        <para>* This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.EnableInterpolate">
      <summary>Gets or sets a value that indicate whether to use interpolation when loading PDF<a href="#PDF">*</a>, PS or EPS files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to use interpolation when loading PDF, PS or EPS files, <strong>false</strong> otherwise.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>Enablabling the use of interpolation will result in slower loading but produces higher quality images. This options is used when loading both PDF, PostScript (PS)
            and Encapsulated PostScript (EPS) files.</para>
        <a id="PDF">
        </a>
        <para>
        </para>
        <para>* This option affect pdf format when <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">UsePdfEngine</see> is set to true to use Leadtools.PdfEngine.dll, it still affects Postscript format.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">
      <summary>Gets or sets a value to force using the LEADTOOLS PDF Engine (<strong>Leadtools.PdfEngine.dll</strong>) when loading PDF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to force using the LEADTOOLS PDF Engine (<strong>Leadtools.PdfEngine.dll</strong>) when loading PDF files,
            otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>To load or save PDF documents to/from a raster image in LEADTOOLS, you use the <strong>Leadtools.Pdf.dll</strong> assembly. This is the file
            filter for the PDF format (as well as Postscript and Enhanced Postscript). Use this assembly as any other file filter in LEADTOOLS, such as
            Leadtools.Codecs.Bmp.dll for BMP support and Leadtools.Codecs.Tif.dll for TIF support.</para>
        <para>In addition to <strong>Leadtools.Pdf.dll</strong>, the <strong>Leadtools.PdfEngine.dll</strong> assembly is required in the following
            situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>When loading Postscript (PS) or Enhanced Postscript (EPS) files. This is always needed regardless of the value of the
            <strong>UsePdfEngine</strong> option described below.</para>
            </description>
          </item>
          <item>
            <description>
              <para>When using the <strong>LEADTOOLS DocumentReaders</strong> to read the objects of a PDF file (using the
            <strong>Leadtools.DocumentReaders.dll</strong> and <strong>Leadtools.DocumentReaders.Pdf.dll</strong> assemblies). Again,
            <strong>Leadtools.PdfEngine.dll</strong> is required regardless of the value of the <strong>UsePdfEngine</strong> option described below.</para>
            </description>
          </item>
          <item>
            <description>
              <para>When the value of <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">CodecsPdfLoadOptions.UsePdfEngine</see> is set to <strong>true</strong> (the
            default value is <strong>false</strong>). When this option is used, then LEADTOOLS will use both <strong>Leadtools.Pdf.dll</strong> and
            <strong>Leadtools.PdfEngine.dll</strong> when loading PDF files. This is provided for legacy support.</para>
            </description>
          </item>
        </list>
        <para>
          <strong>Leadtools.PdfEngine.dll</strong> contains many resources such as tables and fonts required to render a PDF image (if one of the
            options above is satisfied and also always for PS and EPS files). This DLL is not referenced in a direct way by the file filter; instead it is
            loaded dynamically and out of a process if needed. You must ensure that this DLL is present on the machine. By default, it is required to have
            this DLL in the same directory where the file filter is located. However, to share many instances of the
            <strong>Leadtools.PdfEngine.dll</strong> assembly between many applications, use the <see cref="P:Leadtools.Codecs.CodecsPdfOptions.InitialPath">CodecsPdfOptions.InitialPath</see>
            property.</para>
        <para>Note that if the application does not required PDF Engine, for example, the application is only loading and saving PDF files as raster images.
            Then, <strong>Leadtools.PdfEngine.dll</strong> is not required to be present on the machine. <strong>Leadtools.Pdf.dll</strong> is always
            required regardless. <strong>Leadtools.PdfEngine.dll</strong> is used out of process and may slow down loading PDF documents. It is
            recommended that you load PDF files with the <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine" /> set to <strong>false</strong> (the default value) for maximum
            performance.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Codecs.CodecsPdfSaveOptions">
      <summary>Provides options specifically for saving PDF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>To obtain extra information of a raster PDF file saved with <see cref="T:Leadtools.Codecs.RasterCodecs" />, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.UserPassword">
      <summary>Gets or sets the user password to use when saving encrypted files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The user password to use when saving encrypted files.</value>
      <remarks>
            This should be provided to protect the document from being opened/read.
            </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.OwnerPassword">
      <summary>Gets or sets the owner password to use when saving encrypted files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The owner password to use when saving encrypted files.</value>
      <remarks>
            This should be provided to prevent users from changing access/protection settings.
            </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.Use128BitEncryption">
      <summary>Gets or sets a value which control the type of encryption to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use an RC4 128-bit encryption key, false to use an RC4 40-bit encryption key.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.PrintDocument">
      <summary>Enables or disables printing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to print the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.PrintFaithful">
      <summary>Enables or disables high-quality printing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to print the document in high quality.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.ModifyDocument">
      <summary>Enables or disables editing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to edit the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.ExtractText">
      <summary>Enables or disables text copying. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to extract text from the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.ExtractTextGraphics">
      <summary>Enables or disables graphics copying. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to extract graphics from the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.ModifyAnnotation">
      <summary>Enables or disables annotation editing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to edit annotations in the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.FillForm">
      <summary>Enables or disables form filling. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to fill in forms in the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.AssembleDocument">
      <summary>Enables or disables document assembly. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to give the user of the PDF document permission to add pages to or delete pages from the document.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.TextEncoding">
      <summary>Gets or sets the text encoding to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text encoding to use.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.LowMemoryUsage">
      <summary>Gets or sets a value indicating whether to use less memory when creating a PDF file with JPEG or Fax compression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use less memory when creating a PDF file with JPEG or Fax compression; otherwise, false.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.UseImageResolution">
      <summary>Gets or sets a value indicating whether to use the image resolution (DPI) in calculating page dimensions when saving a PDF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use the image resolution (DPI) in calculating page dimensions when saving a PDF file; otherwise, false.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> for information on how to use
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">RasterCodecs.GetRasterPdfInfo</see> to obtain the resolution of a PDF file saved with <see cref="T:Leadtools.Codecs.RasterCodecs" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version">
      <summary>Gets or sets a value indicating the version of the PDF file saved by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>A <see cref="T:Leadtools.Codecs.CodecsRasterPdfVersion" /> enumeration member indicating the version of the PDF file saved by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA">
      <summary>Gets or sets a value indicating whether the PDF file should be saved as
            PDF/A-1b. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFA|PDF A</keywords>
      <value>true to save the file as PDF/A; otherwise it will be saved as PDF.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14">
      <summary>Gets or sets a value indicating whether the PDF file should be saved as PDF v1.4. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>true to save the file as PDF v1.4; otherwise it will be saved as PDF v1.2.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15">
      <summary>Gets or sets a value indicating whether the PDF file should be saved as PDF v1.5. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>true to save the file as PDF v1.5; otherwise it will be saved as PDF v1.2.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16">
      <summary>Gets or sets a value indicating whether the PDF file should be saved as PDF v1.6. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>true to save the file as PDF v1.6; otherwise it will be saved as PDF v1.2.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13">
      <summary>Gets or sets a value indicating whether the PDF file should be saved as PDF v1.3. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>true to save the file as PDF v1.3; otherwise it will be saved as PDF v1.2.</value>
      <remarks>
        <para>Note: It is recommended you use the <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> property instead of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfA" />,
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv13" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv14" />, <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv15" /> and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.SavePdfv16" />. <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> provides a clearer view of what
            the final version of the raster PDF will be when saving with LEADTOOLS. Setting <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" /> will automatically toggles the various
            SavePdfXYZ properties accordingly and setting these properties might change the value of <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version" />.</para>
        <para>PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival. Primarily this means that the
            document will be completely self-contained: it includes all content, font and color information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPdfOptions">
      <summary>Provides extra options for loading and saving PDF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <remarks>
        <para>To load or save PDF documents to/from a raster image in LEADTOOLS, you use the <strong>Leadtools.Pdf.dll</strong> assembly. This is the file
            filter for the PDF format (as well as Postscript and Enhanced Postscript). Use this assembly as any other file filter in LEADTOOLS, such as
            Leadtools.Codecs.Bmp.dll for BMP support and Leadtools.Codecs.Tif.dll for TIF support.</para>
        <para>In addition to <strong>Leadtools.Pdf.dll</strong>, the <strong>Leadtools.PdfEngine.dll</strong> assembly is required in the following
            situations:</para>
        <list type="bullet">
          <item>
            <description>
              <para>When loading Postscript (PS) or Enhanced Postscript (EPS) files. This is always needed regardless of the value of the
            <strong>UsePdfEngine</strong> option described below.</para>
            </description>
          </item>
          <item>
            <description>
              <para>When using the <strong>LEADTOOLS DocumentReaders</strong> to read the objects of a PDF file (using the
            <strong>Leadtools.DocumentReaders.dll</strong> and <strong>Leadtools.DocumentReaders.Pdf.dll</strong> assemblies). Again,
            <strong>Leadtools.PdfEngine.dll</strong> is required regardless of the value of the <strong>UsePdfEngine</strong> option described below.</para>
            </description>
          </item>
          <item>
            <description>
              <para>When the value of <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.UsePdfEngine">CodecsPdfLoadOptions.UsePdfEngine</see> is set to <strong>true</strong> (the
            default value is <strong>false</strong>). When this option is used, then LEADTOOLS will use both <strong>Leadtools.Pdf.dll</strong> and
            <strong>Leadtools.PdfEngine.dll</strong> when loading PDF files. This is provided for legacy support.</para>
            </description>
          </item>
        </list>
        <para>
          <strong>Leadtools.PdfEngine.dll</strong> contains many resources such as tables and fonts required to render a PDF image (if one of the
            options above is satisfied and also always for PS and EPS files). This DLL is not referenced in a direct way by the file filter; instead it is
            loaded dynamically and out of a process if needed. You must ensure that this DLL is present on the machine. By default, it is required to have
            this DLL in the same directory where the file filter is located. However, to share many instances of the
            <strong>Leadtools.PdfEngine.dll</strong> assembly between many applications, use the <see cref="P:Leadtools.Codecs.CodecsPdfOptions.InitialPath">CodecsPdfOptions.InitialPath</see>
            property.</para>
        <para>Note that if the application does not required PDF Engine, for example, the application is only loading and saving PDF files as raster images.
            Then, <strong>Leadtools.PdfEngine.dll</strong> is not required to be present on the machine. <strong>Leadtools.Pdf.dll</strong> is always
            required regardless.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsPdfOptionsExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PDFSegmentation.pdf")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "PdfOptions.pdf")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "PdfOptions.bmp")

         ' Check if the PDF engine is installed then get the load and save options of the PDF files.
         If codecs.Options.Pdf.IsEngineInstalled Then
            ' Resulting image pixel depth.
            codecs.Options.Pdf.Load.DisplayDepth = 24
            codecs.Options.Pdf.Load.GraphicsAlpha = 4
            codecs.Options.Pdf.Load.Password = ""

            ' Type of font anti-aliasing to use.
            codecs.Options.Pdf.Load.TextAlpha = 1
            codecs.Options.Pdf.Load.UseLibFonts = True

            ' Horizontal,vertical  display resolution in dots per inch.
            codecs.Options.RasterizeDocument.Load.XResolution = 150
            codecs.Options.RasterizeDocument.Load.YResolution = 150

            Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               ' Set access rights for the user when he\she opens the file we create
               codecs.Options.Pdf.Save.AssembleDocument = True
               codecs.Options.Pdf.Save.ExtractText = True
               codecs.Options.Pdf.Save.ExtractTextGraphics = True
               codecs.Options.Pdf.Save.PrintDocument = False
               codecs.Options.Pdf.Save.FillForm = True
               codecs.Options.Pdf.Save.ModifyAnnotation = True
               codecs.Options.Pdf.Save.ModifyDocument = True
               codecs.Options.Pdf.Save.OwnerPassword = "LEAD Technologies"
               codecs.Options.Pdf.Save.PrintFaithful = False
               codecs.Options.Pdf.Save.TextEncoding = CodecsPdfTextEncoding.Hex
               codecs.Options.Pdf.Save.Use128BitEncryption = True
               codecs.Options.Pdf.Save.UserPassword = "LEAD"
               ' Set the PDF version to be v1.4
               codecs.Options.Pdf.Save.Version = CodecsRasterPdfVersion.V14

               ' Save the image back as PDF
               codecs.Save(image, destFileName1, RasterImageFormat.RasPdf, 24)
            End Using

            ' And load it back before saving it as BMP
            Using image As RasterImage = codecs.Load(destFileName1)
               codecs.Save(image, destFileName2, RasterImageFormat.Bmp, image.BitsPerPixel)
            End Using
         Else
            Console.WriteLine("PDF Engine is not found!")
         End If

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsPdfOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "PDFSegmentation.pdf");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "PdfOptions.pdf");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "PdfOptions.bmp");

         // Check if the PDF engine is installed then get the load and save options of the PDF files.
         if(codecs.Options.Pdf.IsEngineInstalled)
         {
            // Resulting image pixel depth.
            codecs.Options.Pdf.Load.DisplayDepth = 24;
            codecs.Options.Pdf.Load.GraphicsAlpha = 4;
            codecs.Options.Pdf.Load.Password = "";

            // Type of font anti-aliasing to use.
            codecs.Options.Pdf.Load.TextAlpha = 1;
            codecs.Options.Pdf.Load.UseLibFonts = true;

            // Horizontal,vertical  display resolution in dots per inch.
            codecs.Options.RasterizeDocument.Load.XResolution = 150;
            codecs.Options.RasterizeDocument.Load.YResolution = 150;

            using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
            {
               // Set access rights for the user when he\she opens the file we create
               codecs.Options.Pdf.Save.AssembleDocument = true;
               codecs.Options.Pdf.Save.ExtractText = true;
               codecs.Options.Pdf.Save.ExtractTextGraphics = true;
               codecs.Options.Pdf.Save.PrintDocument = false;
               codecs.Options.Pdf.Save.FillForm = true;
               codecs.Options.Pdf.Save.ModifyAnnotation = true;
               codecs.Options.Pdf.Save.ModifyDocument = true;
               codecs.Options.Pdf.Save.OwnerPassword = "LEAD Technologies";
               codecs.Options.Pdf.Save.PrintFaithful = false;
               codecs.Options.Pdf.Save.TextEncoding = CodecsPdfTextEncoding.Hex;
               codecs.Options.Pdf.Save.Use128BitEncryption = true;
               codecs.Options.Pdf.Save.UserPassword = "LEAD";
               // Set the PDF version to be v1.4
               codecs.Options.Pdf.Save.Version = CodecsRasterPdfVersion.V14;

               // Save the image back as PDF
               codecs.Save(image, destFileName1, RasterImageFormat.RasPdf, 24);
            }

            // And load it back before saving it as BMP
            using(RasterImage image = codecs.Load(destFileName1))
            {
               codecs.Save(image, destFileName2, RasterImageFormat.Bmp, image.BitsPerPixel);
            }
         }
         else
         {
            Console.WriteLine("PDF Engine is not found!");
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfOptions.Load">
      <summary>Gets the options for loading PDF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>PDFv14|PDFv15|PDFA|PDF/A | OCR Plus|Plus|OCR Professional|Professional | PDF v1.4|PDF v1.5|PDF v1.6</keywords>
      <value>The PDF load options.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfOptions.Save">
      <summary>Gets the options for saving PDF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PDF save options.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfOptions.InitialPath">
      <summary>Gets and sets the path to the PDF engine runtime DLL. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
        <para>The PDF engine runtime DLL is <strong>Leadtools.PdfEngine.dll</strong>. This DLL is never referenced directly by the LEADTOOLS Raster PDF
            file filter (<strong>Leadtools.Pdf.dll</strong>) or PDF document readers (<strong>Leadtools.DocumentReaders.Pdf</strong>) instead it is loaded
            dynamically and out of process by the filter.</para>
        <para>By default, the LEADTOOLS installer will copy this DLL next to the filter (in the Bin\DotNet\Win32, Bin\DotNet\x64, Bin\DotNet4\Win32 and Bin\DotNet4\x64
            folders) and the filter will look for the engine DLL in the same folder it is located (default location).</para>
        <para>In some cases, you can share the same copy of <strong>Leadtools.PdfEngine.dll</strong> between different applications. For example, many
            ASP.NET web applications, in this case, you can copy <strong>Leadtools.PdfEngine.dll</strong> to a fixed directory on your server and pass the
            name of this directory to <see cref="P:Leadtools.Codecs.CodecsPdfOptions.InitialPath" />. From this point on, LEADTOOLS will use this value to locate and load
            <strong>Leadtools.PdfEngine.dll</strong>.</para>
        <para>
          <strong>Leadtools.PdfEngine.dll</strong> is not a standard .NET assembly. In some project types, such as web applications or services,
            the compiler will not copy this file to your binary folder even though you have a reference to it in your project. This could cause PDF files
            to fail to load since IIS will create a temporary folder and copy all other LEADTOOLS referenced assemblies to service a request, but it will
            not copy <strong>Leadtools.PdfEngine.dll</strong>. So, when using PDF in a web application, you must always use
            <see cref="P:Leadtools.Codecs.CodecsPdfOptions.InitialPath" /> to instruct LEADTOOLS on the location of the PDF engine DLL.</para>
        <para>You do not have access to this property when using the LEADTOOLS WCF services to load PDF files, instead you must add a section in the
            web configuration to instruct the LEADTOOLS WCF service on the location of the PDF engine's DLL. Refer to
            <see cref="T:Leadtools.Topics.ProgrammingWithWCF">Programming with LEADTOOLS WCF Services</see> for more information.</para>
        <para>Note that setting this value in a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will affect all the <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects that are
            currently created in the application (in all threads) or will be created in the future, for example:</para>
        <para>
          <pre>
            <code>
            RasterCodecs codecs1 = new RasterCodecs();
            codecs1.Options.Pdf.InitialPath = @"C:\MyApp\Bin";
            codecs1.Dispose();
            RasterCodecs codecs2 = new RasterCodecs();
            // This will work even though the RasterCodecs object that set this value has been disposed.
            System.Diagnostics.Debug.Assert(codecs2.Options.Pdf.InitialPath == @"C:\MyApp\Bin");
            </code>
          </pre>
        </para>
      </remarks>
      <value>The path to the PDF runtime files, or an empty string or null (Nothing in Visual Basic), if the default location is to be used.</value>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>
            For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPdfOptions.IsEngineInstalled">
      <summary>Determines whether or not the LEADTOOLS PDF Engine Runtime files are installed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the LEADTOOLS PDF Engine Runtime files are installed, <strong>false</strong> if they are missing.</value>
      <remarks>
        <para>Use this property to determine if the LEADTOOLS PDF Engine Runtime files (<strong>Leadtools.PDfEngine.dll</strong>) are installed on
            the system.</para>
        <para>The value of this property is used only when <strong>Leadtools.PdfEngine.dll</strong> is used by the application. For more information,
            refer to <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadOptions">
      <summary>Provides access to generic file load options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadOptions.Reset">
      <summary>Resets this instance of <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> to the default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Markers">
      <summary>Enables or disables loading metadata markers during image file load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to enable loading metadata markers if present in the file, false to ignore them.</value>
      <remarks>
        <para>When the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> property is set to <strong>true</strong>, any subsequent load operation
            performed by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will automatically try to load all the metadata (tags and comments)
            found in the file and store them in the <see cref="P:Leadtools.RasterImage.Markers">RasterImage.Markers</see> collection of the result image.</para>
        <para>Note that any load method that uses tiles, offset or resizing will not load any file metadata automatically regardless of
            the value of this property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Tags">
      <summary>Gets or sets a value that indicates whether any tags found in the file should be automatically loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to automatically load any tags found in the file; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" /> property is set to <strong>true</strong>, any subsequent load operation
            performed by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will automatically try to load all the tags found in the file and
            store them in the <see cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</see> collection of the result image.</para>
        <para>Internally, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will call <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> on the image and only
            tries to load the tags if the value returned was true.</para>
        <para>When loading more than one page from a multi-page file, only the tags found in the first page will be automatically
            loaded when the value of this property is set to true. To manually load all the tags in any page, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</para>
        <para>You must set the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> property to <strong>false</strong> to enable automatically loading
            the tags. If the value of both <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> and <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" /> is set to true, then the markers will take
            take precedence and no tags will be loaded.</para>
        <para>Note that any load method that uses tiles, offset or resizing will not load any file metadata automatically regardless of
            the value of this property.</para>
      </remarks>
      <example>
        <para>
          <para>This example will browse to a file and load it along with any tags, geo-keys and comments found.</para>
        </para>
        <code lang="VB">      Public Sub MetadataAutoLoadExample()
         ' Prompt the user for an image file
         Dim imageFileName As String = PromptForFileName()
         ' Initialize LEADTOOLS
         Using codecs As New RasterCodecs()
            Dim loadOptions As CodecsLoadOptions = codecs.Options.Load

            ' Make sure auto-loading of markers is turned off, otherwise,
            ' markers take precedence over loading the other metadata
            loadOptions.Markers = False

            ' Automatically load any tags, comments and geokeys found in this file
            loadOptions.Tags = True
            loadOptions.Comments = True
            loadOptions.GeoKeys = True

            ' Now load the image
            Using image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim txtFileName As String = Path.Combine( _
                  Path.GetDirectoryName(imageFileName), _
                  Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt")

               Using writer As StreamWriter = File.CreateText(txtFileName)
                  ' Show its tags
                  ShowTags(writer, "Tags", image.Tags)

                  ' Show its comments
                  ShowComments(writer, image.Comments)

                  ' Show its geo keys (tags and geokeys use the same data type)
                  ShowTags(writer, "GeoKeys", image.GeoKeys)
               End Using

               ' Show the text file we created
               System.Diagnostics.Process.Start(txtFileName)
            End Using
         End Using
      End Sub

      Private Shared Sub ShowTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata))
         writer.WriteLine("{0}:", name)

         For Each tag As RasterTagMetadata In tags
            writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length)
         Next

         writer.WriteLine()
      End Sub

      Private Shared Sub ShowComments(ByVal writer As StreamWriter, ByVal comments As RasterCollection(Of RasterCommentMetadata))
         writer.WriteLine("Comments:")

         For Each comment As RasterCommentMetadata In comments
            writer.WriteLine("Type: 0x{0}, data length: {1}", comment.Type, comment.GetData().Length)
         Next

         writer.WriteLine()
      End Sub</code>
        <code lang="CS">      public void MetadataAutoLoadExample()
      {
         // Prompt the user for an image file
         string imageFileName = PromptForFileName();
         // Initialize LEADTOOLS
         using(RasterCodecs codecs = new RasterCodecs())
         {
            CodecsLoadOptions loadOptions = codecs.Options.Load;

            // Make sure auto-loading of markers is turned off, otherwise,
            // markers take precedence over loading the other metadata
            loadOptions.Markers = false;

            // Automatically load any tags, comments and geokeys found in this file
            loadOptions.Tags = true;
            loadOptions.Comments = true;
            loadOptions.GeoKeys = true;

            // Now load the image
            using(RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
            {
               string txtFileName = Path.Combine(
                  Path.GetDirectoryName(imageFileName),
                  Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt");

               using(StreamWriter writer = File.CreateText(txtFileName))
               {
                  // Show its tags
                  ShowTags(writer, "Tags", image.Tags);

                  // Show its comments
                  ShowComments(writer, image.Comments);

                  // Show its geo keys (tags and geokeys use the same data type)
                  ShowTags(writer, "GeoKeys", image.GeoKeys);
               }

               // Show the text file we created
               System.Diagnostics.Process.Start(txtFileName);
            }
         }
      }

      private static void ShowTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags)
      {
         writer.WriteLine("{0}:", name);

         foreach(RasterTagMetadata tag in tags)
         {
            writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length);
         }

         writer.WriteLine();
      }

      private static void ShowComments(StreamWriter writer, RasterCollection&lt;RasterCommentMetadata&gt; comments)
      {
         writer.WriteLine("Comments:");

         foreach(RasterCommentMetadata comment in comments)
         {
            writer.WriteLine("Type: 0x{0}, data length: {1}", comment.Type, comment.GetData().Length);
         }

         writer.WriteLine();
      }</code>
        <code lang="SilverlightCSharp">      public void MetadataAutoLoadExample(Stream inStreamImage, StreamWriter outStreamText)
      {
         // Initialize LEADTOOLS
         RasterCodecs codecs = new RasterCodecs();
         {
            CodecsLoadOptions loadOptions = codecs.Options.Load;
            // Make sure auto-loading of markers is turned off, otherwise,
            // markers take precedence over loading the other metadata
            loadOptions.Markers = false;

            // Automatically load any tags, comments and geokeys found in this file
            loadOptions.Tags = true;
            loadOptions.Comments = true;
            loadOptions.GeoKeys = true;

            using (RasterImage image = codecs.Load(inStreamImage, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
            {
               // Show its tags
               ShowTags(outStreamText, "Tags", image.Tags);

               // Show its comments
               ShowComments(outStreamText, image.Comments);

               // Show its geo keys (tags and geokeys use the same data type)
               ShowTags(outStreamText, "GeoKeys", image.GeoKeys);
            }
         }
      }

      private static void ShowTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags)
      {
         writer.WriteLine("{0}:", name);

         foreach(RasterTagMetadata tag in tags)
         {
            writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length);
         }

         writer.WriteLine();
      }

      private static void ShowComments(StreamWriter writer, RasterCollection&lt;RasterCommentMetadata&gt; comments)
      {
         writer.WriteLine("Comments:");

         foreach(RasterCommentMetadata comment in comments)
         {
            writer.WriteLine("Type: 0x{0}, data length: {1}", comment.Type, comment.GetData().Length);
         }

         writer.WriteLine();
      }</code>
        <code lang="SilverlightVB">      Public Sub MetadataAutoLoadExample(ByVal inStreamImage As Stream, ByVal outStreamText As StreamWriter)
         ' Initialize LEADTOOLS
         Dim codecs As RasterCodecs = New RasterCodecs()
            Dim loadOptions As CodecsLoadOptions = codecs.Options.Load
            ' Make sure auto-loading of markers is turned off, otherwise,
            ' markers take precedence over loading the other metadata
            loadOptions.Markers = False

            ' Automatically load any tags, comments and geokeys found in this file
            loadOptions.Tags = True
            loadOptions.Comments = True
            loadOptions.GeoKeys = True

            Using image As RasterImage = codecs.Load(inStreamImage, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               ' Show its tags
               ShowTags(outStreamText, "Tags", image.Tags)

               ' Show its comments
               ShowComments(outStreamText, image.Comments)

               ' Show its geo keys (tags and geokeys use the same data type)
               ShowTags(outStreamText, "GeoKeys", image.GeoKeys)
            End Using
      End Sub

      Private Shared Sub ShowTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata))
         writer.WriteLine("{0}:", name)

         For Each tag As RasterTagMetadata In tags
            writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length)
         Next tag

         writer.WriteLine()
      End Sub

      Private Shared Sub ShowComments(ByVal writer As StreamWriter, ByVal comments As RasterCollection(Of RasterCommentMetadata))
         writer.WriteLine("Comments:")

         For Each comment As RasterCommentMetadata In comments
            writer.WriteLine("Type: 0x{0}, data length: {1}", comment.Type, comment.GetData().Length)
         Next comment

         writer.WriteLine()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys">
      <summary>Gets or sets a value that indicates whether any TIFF Geo key tags found in the file should be automatically loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to automatically load any TIFF Geo key tags found in the file, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>When the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys" /> property is set to <strong>true</strong>, any subsequent load operation
            performed by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will automatically try to load all the TIFF Geo key tags found in the file and
            store them in the <see cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</see> collection of the result image.</para>
        <para>Internally, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will call <see cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" /> on the image and only
            tries to load the geo keys if the value returned was true.</para>
        <para>When loading more than one page from a multi-page file, only the geo keys found in the first page will be automatically
            loaded when the value of this property is set to true. To manually load all the geo keys in any page, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" />.</para>
        <para>You must set the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> property to <strong>false</strong> to enable automatically loading
            the geo keys. If the value of both <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> and <see cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys" /> is set to true, then the markers will take
            take precedence and no geo keys will be loaded.</para>
        <para>Note that any load method that uses tiles, offset or resizing will not load any file metadata automatically regardless of
            the value of this property.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Comments">
      <summary>Gets or sets a value that indicate whether any comment fields found in the file should be automatically loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to automatically load any comment fields found in the file; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments" /> property is set to <strong>true</strong>, any subsequent load operation
            performed by this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will automatically try to load all the comment fields found in the file and
            store them in the <see cref="P:Leadtools.RasterImage.Comments">RasterImage.Comments</see> collection of the result image.</para>
        <para>Internally, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will call <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" /> on the image and only
            try to load the comments if the value returned is true.</para>
        <para>When loading more than one page from a multi-page file, only the comments found in the first page will be automatically
            loaded when the value of this property is set to true. To manually load all the comments in any page, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" />.</para>
        <para>You must set the value of the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> property to <strong>false</strong> to enable automatic loading
            the comments. If the value of both <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers" /> and <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments" /> is set to true, the markers will take
            take precedence and no comments will be loaded.</para>
        <para>Note that any load method that uses tiles, offset or resizing will not load any file metadata automatically regardless of
            the value of this property.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.AllocateImage">
      <summary>Enables or disables the allocation of memory for the storage of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to have Leadtools do the necessary allocation, false to disable it.</value>
      <remarks>
            If you do not allow Leadtools to allocate the memory for the storage of the image data, then you should process the data
            manually using the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see> event.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AllocateImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         'Setting the loading options.
         'allow LEADTOOLS to allocate the image data
         codecs.Options.Load.AllocateImage = True
         'keeping the loaded image data compressed in memory.
         codecs.Options.Load.Compressed = True
         codecs.Options.Load.DiskMemory = False
         'force a palletized image to be dithered to the LEAD fixed palette.
         codecs.Options.Load.FixedPalette = True
         'we know the format of the file
         codecs.Options.Load.Format = RasterImageFormat.Cmp
         'disable loading metadata markers if present in the file, false to ignore them.
         codecs.Options.Load.Markers = False
         codecs.Options.Load.NoDiskMemory = True
         codecs.Options.Load.NoInterlace = False
         codecs.Options.Load.NoTiledMemory = True
         codecs.Options.Load.Passes = 0
         'ignore the view perspective stored in the file.
         codecs.Options.Load.Rotated = False
         'set negative pixel values to 0.
         codecs.Options.Load.Signed = False
         codecs.Options.Load.InitAlpha = True
         codecs.Options.Load.StoreDataInImage = True
         'load super-compressed in memory
         codecs.Options.Load.SuperCompressed = True
         codecs.Options.Load.TiledMemory = False
         codecs.Options.Load.XResolution = 350
         codecs.Options.Load.YResolution = 350

         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         'Meta file's comments will be saved.
         codecs.Options.Save.Comments = True
         codecs.Options.Save.FixedPalette = True
         codecs.Options.Save.GeoKeys = False
         'Tiff file output will be gray.
         codecs.Options.Save.GrayOutput = True
         'Meta file's markers will be saved.
         codecs.Options.Save.Markers = True
         codecs.Options.Save.MotorolaOrder = False
         codecs.Options.Save.OptimizedPalette = True
         codecs.Options.Save.Password = "LEADTOOLS"

         Dim resolutions As LeadSize() = New LeadSize(0) {}
         resolutions(0).Width = 350
         resolutions(0).Height = 350

         codecs.Options.Save.SetResolutions(resolutions)
         'Meta file's tags will be saved.
         codecs.Options.Save.Tags = True
         codecs.Options.Save.UseImageDitheringMethod = True

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "allocate_image.tif"), RasterImageFormat.Tif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AllocateImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         //Setting the loading options.
         //allow LEADTOOLS to allocate the image data
         codecs.Options.Load.AllocateImage = true;
         //keeping the loaded image data compressed in memory.
         codecs.Options.Load.Compressed = true;
         codecs.Options.Load.DiskMemory = false;
         //force a palletized image to be dithered to the LEAD fixed palette.
         codecs.Options.Load.FixedPalette = true;
         //we know the format of the file
         codecs.Options.Load.Format = RasterImageFormat.Cmp;
         //disable loading metadata markers if present in the file, false to ignore them.
         codecs.Options.Load.Markers = false;
         codecs.Options.Load.NoDiskMemory = true;
         codecs.Options.Load.NoInterlace = false;
         codecs.Options.Load.NoTiledMemory = true;
         codecs.Options.Load.Passes = 0;
         //ignore the view perspective stored in the file.
         codecs.Options.Load.Rotated = false;
         //set negative pixel values to 0.
         codecs.Options.Load.Signed = false;
         codecs.Options.Load.InitAlpha = true;
         codecs.Options.Load.StoreDataInImage = true;
         //load super-compressed in memory
         codecs.Options.Load.SuperCompressed = true;
         codecs.Options.Load.TiledMemory = false;
         codecs.Options.Load.XResolution = 350;
         codecs.Options.Load.YResolution = 350;

         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp"));

         //Meta file's comments will be saved.
         codecs.Options.Save.Comments = true;
         codecs.Options.Save.FixedPalette = true;
         codecs.Options.Save.GeoKeys = false;
         //Tiff file output will be gray.
         codecs.Options.Save.GrayOutput = true;
         //Meta file's markers will be saved.
         codecs.Options.Save.Markers = true;
         codecs.Options.Save.MotorolaOrder = false;
         codecs.Options.Save.OptimizedPalette = true;
         codecs.Options.Save.Password = "LEADTOOLS";

         LeadSize[] resolutions = new LeadSize[1];
         resolutions[0].Width = 350;
         resolutions[0].Height = 350;

         codecs.Options.Save.SetResolutions(resolutions);
         //Meta file's tags will be saved.
         codecs.Options.Save.Tags = true;
         codecs.Options.Save.UseImageDitheringMethod = true;

         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "allocate_image.tif"), RasterImageFormat.Tif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void AllocateImageExample(Stream inStreamCmp, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();
         //Setting the loading options.
         //allow LEADTOOLS to allocate the image data
         codecs.Options.Load.AllocateImage = true;
         //force a palletized image to be dithered to the LEAD fixed palette.
         codecs.Options.Load.FixedPalette = true;
         //we know the format of the file
         codecs.Options.Load.Format = RasterImageFormat.Cmp;
         //disable loading metadata markers if present in the file, false to ignore them.
         codecs.Options.Load.Markers = false;
         codecs.Options.Load.NoInterlace = false;
         codecs.Options.Load.Passes = 0;
         //ignore the view perspective stored in the file.
         codecs.Options.Load.Rotated = false;
         //set negative pixel values to 0.
         codecs.Options.Load.Signed = false;
         codecs.Options.Load.InitAlpha = true;
         codecs.Options.Load.StoreDataInImage = true;
         //load super-compressed in memory
         codecs.Options.Load.XResolution = 350;
         codecs.Options.Load.YResolution = 350;

         RasterImage image = codecs.Load(inStreamCmp);

         //Meta file's comments will be saved.
         codecs.Options.Save.Comments = true;
         codecs.Options.Save.FixedPalette = true;
         codecs.Options.Save.GeoKeys = false;
         //Tiff file output will be gray.
         codecs.Options.Save.GrayOutput = true;
         //Meta file's markers will be saved.
         codecs.Options.Save.Markers = true;
         codecs.Options.Save.MotorolaOrder = false;
         codecs.Options.Save.OptimizedPalette = true;
         codecs.Options.Save.Password = "LEADTOOLS";

         LeadSize[] resolutions = new LeadSize[1];
         resolutions[0].Width = 350;
         resolutions[0].Height = 350;

         codecs.Options.Save.SetResolutions(resolutions);
         //Meta file's tags will be saved.
         codecs.Options.Save.Tags = true;
         codecs.Options.Save.UseImageDitheringMethod = true;

         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AllocateImageExample(ByVal inStreamCmp As Stream, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         'Setting the loading options.
         'allow LEADTOOLS to allocate the image data
         codecs.Options.Load.AllocateImage = True
         'force a palletized image to be dithered to the LEAD fixed palette.
         codecs.Options.Load.FixedPalette = True
         'we know the format of the file
         codecs.Options.Load.Format = RasterImageFormat.Cmp
         'disable loading metadata markers if present in the file, false to ignore them.
         codecs.Options.Load.Markers = False
         codecs.Options.Load.NoInterlace = False
         codecs.Options.Load.Passes = 0
         'ignore the view perspective stored in the file.
         codecs.Options.Load.Rotated = False
         'set negative pixel values to 0.
         codecs.Options.Load.Signed = False
         codecs.Options.Load.InitAlpha = True
         codecs.Options.Load.StoreDataInImage = True
         'load super-compressed in memory
         codecs.Options.Load.XResolution = 350
         codecs.Options.Load.YResolution = 350

         Dim image As RasterImage = codecs.Load(inStreamCmp)

         'Meta file's comments will be saved.
         codecs.Options.Save.Comments = True
         codecs.Options.Save.FixedPalette = True
         codecs.Options.Save.GeoKeys = False
         'Tiff file output will be gray.
         codecs.Options.Save.GrayOutput = True
         'Meta file's markers will be saved.
         codecs.Options.Save.Markers = True
         codecs.Options.Save.MotorolaOrder = False
         codecs.Options.Save.OptimizedPalette = True
         codecs.Options.Save.Password = "LEADTOOLS"

         Dim resolutions As LeadSize() = New LeadSize(0){}
         resolutions(0).Width = 350
         resolutions(0).Height = 350

         codecs.Options.Save.SetResolutions(resolutions)
         'Meta file's tags will be saved.
         codecs.Options.Save.Tags = True
         codecs.Options.Save.UseImageDitheringMethod = True

         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.StoreDataInImage">
      <summary>Enables or disables the automatic storage of the image data into the <see cref="T:Leadtools.RasterImage" /> during a file load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to have Leadtools store the loaded image data into the <see cref="T:Leadtools.RasterImage" />, false to disable it.</value>
      <remarks>
            If you do not allow Leadtools to allocate the memory for the storage of the image data, then you should process the data
            manually using the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see> event.
            </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.AllocateImage" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Format">
      <summary>Gets or sets the load format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImageFormat" /> enumeration value that specifies the load format.</value>
      <remarks>
            By default, the value of this property is set to false.  This means that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object should try
            and recognize the format of the image its trying to load itself.  If you know the format of the file, pass it to this member
            prior to calling <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)">RasterCodecs.Load</see> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see>, this will skip the format recognation process and
            speed up the load operation.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.XResolution">
      <summary>Gets or sets the horizontal resolution (DPI). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The horizontal resolution (DPI).</value>
      <remarks>Use this property to set the X resolution member of the RasterImage when the file format being loaded either doesn’t support resolution 
            or the file has no value stored.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.YResolution">
      <summary>Gets or sets the vertical resolution (DPI). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The vertical resolution (DPI).</value>
      <remarks>Use this property to set the Y resolution member of the RasterImage when the file format being loaded either doesn’t support resolution 
            or the file has no value stored.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Passes">
      <summary>Gets or sets the number of passes (scans through the image) when loading a progressive image (JPEG mainly). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The number of passes (scans through the image) when loading a progressive image.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>Any positive number.</term>
              <description>Load a progressive file showing at most the specified number of passes.</description>
            </item>
            <item>
              <term>0</term>
              <description>Load the file in one pass.</description>
            </item>
            <item>
              <term>-1</term>
              <description>Load a progressive file showing only significant scans.</description>
            </item>
            <item>
              <term>-2</term>
              <description>Load a progressive file showing all the scans.</description>
            </item>
          </list>
        </para>
      </value>
      <remarks>
        <para>This value is also used when loading JBIG files to determine the number of resolutions to load to create a
            progressive load effect.</para>
        <para>This property controls the number of times the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see> event
            can be called for a particular row. If you do not use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>
            event, this value is ignored.The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see> event can be used to
            implement a paint while load feature. For progressive files, the event is called several times for the same image row. The
            quality of the row is improved with every call. The improvements in some passes do not have visual improvements, so it is
            recommended you show only the significant scans (-1).</para>
      </remarks>
      <seealso cref="T:L.Topics.ControllingProgressiveLoadsAndSaves">Controlling Progressive Loads and Saves</seealso>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.Passes">CodecsJpegSaveOptions.Passes</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Rotated">
      <summary>Indicates whether or not to load files without rotating them. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to load files rotated, false to ignore the view perspective stored in the file.</value>
      <remarks>This affects files that can be saved with a rotated view perspective.</remarks>
      <seealso cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Signed">
      <summary>Indicates whether or not to load the image with negative pixel values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to load and keep negative pixel values, false to set negative pixel values to 0.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.InitAlpha">
      <summary>Indicates whether or not to initialize the alpha channel when loading images as 32 or 64-bit. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to set the alpha channel to ones (0xFF for 8-bit and OxFFFF for 16-bit), false to set the alpha channel to zeros.</value>
      <remarks>
        <para>The default value for this property has changed from <strong>false</strong> to <strong>true</strong> in LEADTOOLS v16.5.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">
      <summary>Indicates whether or not to use a Silverlight <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see> object for storing the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use a Silverlight <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see> object for storing the image data; false otherwise.</value>
      <remarks>
        <para>This property is only supported in Silverlght versions of LEADTOOLS.</para>
        <para>Setting this property to true can speed up image loading, image processing and image display by using a Silverlight <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see> object for storing the image data.</para>
        <para>Setting this property to true will force the image data to be loaded as 32-bit, and will ignore the bitsPerPixel parameter passed to <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)">RasterCodecs.Load</see>.</para>
      </remarks>
      <noexample />
      <seealso cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.WriteableBitmap</seealso>
      <seealso cref="M:Leadtools.Windows.Media.RasterImageConverter.ConvertToSource(Leadtools.RasterImage,Leadtools.Windows.Media.ConvertToSourceOptions)">RasterImageConverter.ConvertToSource</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertToSourceOptions">ConvertToSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertFromSourceOptions">ConvertFromSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.DetectAlphaCommand">DetectAlphaCommand</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.AutoDetectAlpha">CodecsLoadOptions.AutoDetectAlpha</seealso>
      <seealso cref="P:Leadtools.RasterImage.PremultiplyAlpha">RasterImage.PremultiplyAlpha</seealso>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.AutoDetectAlpha">
      <summary>Indicates whether or not to automatically detect if the image has meaningful alpha channel values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true automatically detect if the image has meaningful alpha channel values; false otherwise.</value>
      <remarks>
        <para>This property is only supported in Silverlght versions of LEADTOOLS.</para>
        <para>This property only has an effect when using a Silverlight <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see> object for image data storage.</para>
        <para>Setting this property to true can slow down image loading and image processing.  If you know that your images have 
            meaningful alpha channel values or if you know that your images have only 0xFF for alpha channel values, set this property to false.</para>
        <para>When this property is true, LEADTOOLS will detect if the loaded image data contains meaningful alpha channel values and then set 
            the <see cref="P:Leadtools.RasterImage.PremultiplyAlpha">RasterImage.PremultiplyAlpha</see> property accordingly.</para>
      </remarks>
      <noexample />
      <seealso cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.WriteableBitmap</seealso>
      <seealso cref="M:Leadtools.Windows.Media.RasterImageConverter.ConvertToSource(Leadtools.RasterImage,Leadtools.Windows.Media.ConvertToSourceOptions)">RasterImageConverter.ConvertToSource</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertToSourceOptions">ConvertToSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertFromSourceOptions">ConvertFromSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.DetectAlphaCommand">DetectAlphaCommand</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</seealso>
      <seealso cref="P:Leadtools.RasterImage.PremultiplyAlpha">RasterImage.PremultiplyAlpha</seealso>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.UseNativeLoad">
      <summary>Indicates whether or not to use the native image load capabilities of Silverlight. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the native image load capabilities of Silverlight; false otherwise.</value>
      <remarks>
        <para>
          <strong>NOTE:</strong> This property is only supported in Silverlght versions of LEADTOOLS.</para>
        <para>When using this property, if the input image is of a format that is supported natively by Silverlight, then LEADTOOLS
            will use the native image load capabilities to decode the data.</para>
        <para>Setting this property to true will speed up image load times for natively supported file formats.</para>
        <para>If the input file is not a format natively supported by Silverlight, then the LEADTOOLS codecs will decode the file.</para>
        <para>When this property is true and the file is a format natively supported by Silverlight, the resulting image data will
            be stored in a Silverlight WriteableBitmap.  For more information, see <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</see> 
            and <see cref="P:Leadtools.RasterImage.IsGlobalMemory">RasterImage.IsGlobalMemory</see>.</para>
      </remarks>
      <noexample />
      <seealso cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.WriteableBitmap</seealso>
      <seealso cref="M:Leadtools.Windows.Media.RasterImageConverter.ConvertToSource(Leadtools.RasterImage,Leadtools.Windows.Media.ConvertToSourceOptions)">RasterImageConverter.ConvertToSource</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</seealso>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.FixedPalette">
      <summary>Enables or disables loading the image to the LEAD fixed palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force a palletized image to be dithered to the LEAD fixed palette.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.NoInterlace">
      <summary>Enables or disables loading files as interlaced. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>When set to true, the Load methods pass image data in the order that is displayed, regardless of how it is
            stored in the file.</value>
      <remarks>
            Set this flag if your program does not handle interlaced file formats.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.Compressed">
      <summary>Enables or disables keeping the loaded image data compressed in memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to keep loaded data compressed in memory.</value>
      <remarks>
        <para>If possible, load the file as a 1-bit RLE-compressed image.</para>
        <strong>Note:</strong> This requires <see cref="T:Leadtools.Topics.RasterProDocMed">Document and Medical</see> Support.
            </remarks>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.SuperCompressed">
      <summary>Enables or disables keeping the loaded image data compressed in memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to keep loaded data compressed in memory.</value>
      <remarks>
        <para>If possible, load the file as a 24-bit LEAD Super-compressed image.</para>
        <strong>Note:</strong> This requires <see cref="T:Leadtools.Topics.RasterProDocMed">Document and Medical</see> Support.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.TiledMemory">
      <summary>Gets or sets a value indicating whether to use tiled memory when loading an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to load the image using tiled; false otherwise.</value>
      <remarks>
            When the value of this property is true, the image is created where the data pointers are maintained in tiles,
            useful for very large images.
            </remarks>
      <example>For an example on changing the default load memory mode, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.DiskMemory" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.NoTiledMemory">
      <summary>Gets or sets a value indicating whether to allow tiled images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to prevent tiled image; false otherwise.</value>
      <remarks>
            When using tiled memory, the image is created where the data pointers are maintained in tiles,
            useful for very large images.  Setting the value of this property to true will prevent the image
            from being created in tiles.
            </remarks>
      <example>For an example on changing the default load memory mode, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.DiskMemory" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.DiskMemory">
      <summary>Gets or sets a value indicating whether to use disk memory when loading an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to load the image using disk memory; false otherwise.</value>
      <remarks>
            When the value of this property is true, the image is stored in disk and not in conventional memory.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub DiskMemoryExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         ' first, load the image using the default
         Dim image As RasterImage = codecs.Load(fileName)

         ' make sure the image uses conventional memory
         If image.IsConventionalMemory Then
            Console.WriteLine("This image uses conventional memory")
         Else
            Console.WriteLine("This should not happen!!")
         End If

         image.Dispose()

         ' now, load the same image this time using disk memory
         codecs.Options.Load.DiskMemory = True
         image = codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)

         ' make sure the image uses unmanaged memory
         If image.IsDiskMemory Then
            Console.WriteLine("This image uses disk memory")
         Else
            Console.WriteLine("This should not happen!!")
         End If

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void DiskMemoryExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         // first, load the image using the default
         RasterImage image = codecs.Load(fileName);

         // make sure the image uses conventional memory
         if(image.IsConventionalMemory)
            Console.WriteLine("This image uses conventional memory");
         else
            Console.WriteLine("This should not happen!!");

         image.Dispose();

         // now, load the same image this time using disk memory
         codecs.Options.Load.DiskMemory = true;
         image = codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // make sure the image uses unmanaged memory
         if(image.IsDiskMemory)
            Console.WriteLine("This image uses disk memory");
         else
            Console.WriteLine("This should not happen!!");

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.NoDiskMemory">
      <summary>Gets or sets a value indicating whether to allow disk memory when loading an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to prevent loading the image using disk memory; false otherwise.</value>
      <remarks>
            When using tiled memory, the image data is stored in disk and not in conventional memory.  Setting the
            value of this property to true will prevent the image from being created in disk.
            </remarks>
      <example>For an example on changing the default load memory mode, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.DiskMemory" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadOptions.LoadCorrupted">
      <summary>Indicates whether or not to load corrupted files without throwing an exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to load corrupted files, false to throw an exception if the file cannot be completely loaded successfully.</value>
      <remarks>This mainly applies to JPEG compressed files that have corruption in the compressed data.  If this property is set to True, then LEADTOOLS will load as much of the image data as possible, and will not throw an exception.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsSaveOptions">
      <summary>Provides access to generic file save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsSaveOptions.Reset">
      <summary>Intializes this instance of <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> to the default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsSaveOptions.GetResolutions">
      <summary>Gets the resolutions to save when saving multi-resolution files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.LeadSize" /> structures indicating the resolutions to save.</returns>
      <remarks>
        <para>Currently, this only works with the JBIG format.</para>
        <para>For JBIG, the maximum number of resolutions that can be saved is 29.</para>
        <para>For a JBIG file, the values of different resolutions are implied because the dimensions of each resolution layer are
            half the dimensions of the one directly above it.</para>
        <para>
          <see cref="M:Leadtools.Codecs.CodecsSaveOptions.GetResolutions" /> and <see cref="M:Leadtools.Codecs.CodecsSaveOptions.SetResolutions(Leadtools.LeadSize[])" /> are used to determine the highest resolution layer
            which will be saved in a file. You can fill the array with an actual width and height, or you can fill either the width or
            height with a valid value, and specify 0 for the other dimension to allow Leadtools to calculate that dimension based on
            the image's aspect ratio during the next save operation.  Note that for JBIG, all the values set in the array are stored,
            but only the first item is used during an actual file save process.</para>
        <para>Ex.</para>
        <para>
          <code>
              uCount = 3
              Resolution[0].Width = 800
              Resolution[0].Height = 0
            </code>
        </para>
        <para>If you then save an image that is 1600 x 1200, the resolutions that are stored in the file would be:</para>
        <para>
          <code>
               800 x 600
               400 x 300
               200 x 150
            </code>
        </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsSaveOptions.SetResolutions(Leadtools.LeadSize[])">
      <summary>Sets the resolutions to save when saving multi-resolution files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="resolutions">An array of <see cref="T:Leadtools.LeadSize" /> structures indicating the resolutions to save.</param>
      <remarks>
        <para>Currently, this only works with the JBIG format.</para>
        <para>For JBIG, the maximum number of resolutions that can be saved is 29.</para>
        <para>For a JBIG file, the values of different resolutions are implied because the dimensions of each resolution layer are
            half the dimensions of the one directly above it.</para>
        <para>
          <see cref="M:Leadtools.Codecs.CodecsSaveOptions.GetResolutions" /> and <see cref="M:Leadtools.Codecs.CodecsSaveOptions.SetResolutions(Leadtools.LeadSize[])" /> are used to determine the highest resolution layer
            which will be saved in a file. You can fill the array with an actual width and height, or you can fill either the width or
            height with a valid value, and specify 0 for the other dimension to allow Leadtools to calculate that dimension based on
            the image's aspect ratio during the next save operation.  Note that for JBIG, all the values set in the array are stored,
            but only the first item is used during an actual file save process.</para>
        <para>Ex.</para>
        <para>
          <code>
              uCount = 3
              Resolution[0].Width = 800
              Resolution[0].Height = 0
            </code>
        </para>
        <para>If you then save an image that is 1600 x 1200, the resolutions that are stored in the file would be:</para>
        <para>
          <code>
               800 x 600
               400 x 300
               200 x 150
            </code>
        </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.Markers">
      <summary>Enables or disables saving metadata markers during file save. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save any existing metadata markers.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.Tags">
      <summary>Enables or disables saving metadata tags during file save. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save any existing metadata tags.</value>
      <remarks>When LEADTOOLS saves an image that contains tags, the tags are always written first and the image data afterwards. This order is not configurable.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.GeoKeys">
      <summary>Enables or disables saving GeoKey metadata during file save. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save any existing GeoKey metadata.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.Comments">
      <summary>Enables or disables saving metadata comments during file save. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save any existing metadata comments.</value>
      <remarks>When LEADTOOLS saves an image that contains tags, the tags are always written first and the image data 
            afterwards. This order is not configurable. LEADTOOLS treats non-image data as comments. For information about using 
            this function to support FlashPix, refer to <see cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</see> .
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.Password">
      <summary>Gets or sets the password used when saving encrypted files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The password used when saving encrypted files.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.MotorolaOrder">
      <summary>Enables or disables saving the file as Motorola byte order when possible. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the file using Motorola byte order, false to save the file using Intel byte order.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.FixedPalette">
      <summary>Enables or disables saving the file using the LEAD fixed palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the saved image to use the LEAD fixed palette.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.OptimizedPalette">
      <summary>Enables or disables saving the file using an optimized palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the image to be saved using an optimized palette.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.GrayOutput">
      <summary>Enables or disables saving a TIFF or PNG file as grayscale, without a palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the output TIFF or PNG file to be saved as grayscale, without a palette</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">
      <summary>Gets or sets a value indicating whether to use the image
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the image <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see>;
            otherwise, false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.InitAlpha">
      <summary>Indicates whether or not to initialize the alpha channel when saving images as 32 or 64-bit. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to set the alpha channel to ones (0xFF for 8-bit and OxFFFF for 16-bit), false to set the alpha channel to zeros.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage">
      <summary>Gets or sets a value that indicate whether to automatically populate the scanline buffers in <see cref="T:Leadtools.Codecs.CodecsSaveImageEventArgs" /> when using
            the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to automatically populate the scanline buffers in <see cref="T:Leadtools.Codecs.CodecsSaveImageEventArgs" /> when using
            the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see> event, or <strong>false</strong> to make the user
            responsible for populating the scanline buffers. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> property works as the input and output buffer containing the image data to save. If
            the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to <strong>false</strong> (the default), then the user
            is always responsible for providing the image data by setting in <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />. If the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to
            <strong>true</strong>, then the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will populate the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> prior to raising this event. The user
            can then inspect or modify the scanlines data or simple ignore it to save the original image data as is.</para>
        <para>Notice that on either case, the user must provide the scanline data in the source image original format (stored in the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Image" />
            property. The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will then convert this data to the appropriate output format if needed, for example, if
            the user instructed the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to save the image in a different file format than the original image.</para>
      </remarks>
      <example>
        <para>
          <para>The following example shows how to use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> to:</para>
          <para>
            <list type="number">
              <item>
                <description>Save the image without instructing <see cref="T:Leadtools.Codecs.RasterCodecs" /> to automatically populate the data.
            Resulting in an output file with a blank image.</description>
              </item>
              <item>
                <description>Save the image while <see cref="T:Leadtools.Codecs.RasterCodecs" /> to automatically populate the data.
            Resulting in a correct output image.</description>
              </item>
              <item>
                <description>Save the image with <see cref="T:Leadtools.Codecs.RasterCodecs" /> automatically generating the data then manipulating it to generate
            an output file that is an invert of the original image.</description>
              </item>
            </list>
          </para>
        </para>
        <code lang="VB">      Private myMode As Integer
      Public Sub RetrieveDataFromImageExample()

         Using codecs As New RasterCodecs()
            Dim srcFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp")
            Dim blankFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Blank.bmp")
            Dim defaultFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Default.bmp")
            Dim invertedFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Inverted.bmp")

            ' Load the source image
            Using image As RasterImage = codecs.Load(srcFile)
               ' Subscribe to the SaveImage event
               AddHandler codecs.SaveImage, AddressOf codecs_SaveImage

               ' First, set RetrieveDataFromImage to false and save
               ' This should generate a blank image
               myMode = 0
               codecs.Options.Save.RetrieveDataFromImage = False
               codecs.Save(image, blankFile, RasterImageFormat.Bmp, 24)

               ' Next, set RetrieveDataFromImage to true but do not
               ' change the data, this should generate the correct image and is the equivalant
               ' to calling Save without subscribing to SaveImage
               myMode = 1
               codecs.Options.Save.RetrieveDataFromImage = True
               codecs.Save(image, defaultFile, RasterImageFormat.Bmp, 24)

               ' Finally, leave RetrieveDataFromImage as true but change the data by inverting
               ' the scanlines, this should generate an inverted image
               myMode = 2
               codecs.Save(image, invertedFile, RasterImageFormat.Bmp, 24)

               RemoveHandler codecs.SaveImage, AddressOf codecs_SaveImage
            End Using
         End Using

      End Sub

      Private Sub codecs_SaveImage(ByVal sender As Object, ByVal e As CodecsSaveImageEventArgs)
         ' This example works with 24 bpp images only
         Debug.Assert(e.Image.BitsPerPixel = 24)

         Select Case myMode
            Case 0
               ' Do not do anything

            Case 1
               ' Do not do anything

            Case 2
               ' Invert the image data
               Dim scanlineLength As Integer = e.Image.BytesPerLine
               Dim scanline(scanlineLength - 1) As Byte

               ' Loop through all the scanlines in the data
               For y As Integer = 0 To e.Lines - 1
                  ' Get this row
                  e.Buffer.GetData(y * scanlineLength, scanline, 0, scanlineLength)

                  ' Process it by inverting every pixel data
                  For x As Integer = 0 To scanlineLength - 1
                     scanline(x) = CByte(255 - scanline(x))
                  Next

                  ' Copy it back to the event buffer
                  e.Buffer.SetData(y * scanlineLength, scanline, 0, scanlineLength)
               Next
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private int myMode;
      public void RetrieveDataFromImageExample()
      {
         using(RasterCodecs codecs = new RasterCodecs())
         {
            string srcFile = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp");
            string blankFile = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Blank.bmp");
            string defaultFile = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Default.bmp");
            string invertedFile = Path.Combine(LEAD_VARS.ImagesDir, "Sample1_Inverted.bmp");

            // Load the source image
            using(RasterImage image = codecs.Load(srcFile))
            {
               // Subscribe to the SaveImage event
               codecs.SaveImage += new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);

               // First, set RetrieveDataFromImage to false and save
               // This should generate a blank image
               myMode = 0;
               codecs.Options.Save.RetrieveDataFromImage = false;
               codecs.Save(image, blankFile, RasterImageFormat.Bmp, 24);

               // Next, set RetrieveDataFromImage to true but do not
               // change the data, this should generate the correct image and is the equivalant
               // to calling Save without subscribing to SaveImage
               myMode = 1;
               codecs.Options.Save.RetrieveDataFromImage = true;
               codecs.Save(image, defaultFile, RasterImageFormat.Bmp, 24);

               // Finally, leave RetrieveDataFromImage as true but change the data by inverting
               // the scanlines, this should generate an inverted image
               myMode = 2;
               codecs.Save(image, invertedFile, RasterImageFormat.Bmp, 24);

               codecs.SaveImage -= new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);
            }
         }
      }

      private void codecs_SaveImage(object sender, CodecsSaveImageEventArgs e)
      {
         // This example works with 24 bpp images only
         Debug.Assert(e.Image.BitsPerPixel == 24);

         switch(myMode)
         {
            case 0:
               // Do not do anything
               break;

            case 1:
               // Do not do anything
               break;

            case 2:
               // Invert the image data
               {
                  int scanlineLength = e.Image.BytesPerLine;
                  byte[] scanline = new byte[scanlineLength];

                  // Loop through all the scanlines in the data
                  for(int y = 0; y &lt; e.Lines; y++)
                  {
                     // Get this row
                     e.Buffer.GetData(y * scanlineLength, scanline, 0, scanlineLength);

                     // Process it by inverting every pixel data
                     for(int x = 0; x &lt; scanlineLength; x++)
                     {
                        scanline[x] = (byte)(255 - scanline[x]);
                     }

                     // Copy it back to the event buffer
                     e.Buffer.SetData(y * scanlineLength, scanline, 0, scanlineLength);
                  }
               }
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsOptions">
      <summary>Provides access to all the specific file format load and save options supported by Leadtools. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.AllocateImage" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsOptions" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOptions.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.Codecs.CodecsOptions" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOptions.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOptions.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.Codecs.CodecsOptions" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOptions.Clone">
      <summary>Creates an exact copy of the current page of this <see cref="T:Leadtools.Codecs.CodecsOptions" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Codecs.CodecsOptions" /> this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Load">
      <summary>Gets the generic load options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The generic load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Save">
      <summary>Gets the generic save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The generic save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Abc">
      <summary>Gets the ABC load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The ABC load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Ecw">
      <summary>Gets the ECW load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The ECW load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Eps">
      <summary>Gets the EPS load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The EPS load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Fpx">
      <summary>Gets the FPX load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The FPX load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsFpxOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Gif">
      <summary>Gets the GIF load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The GIF load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Jbig">
      <summary>Gets the JBIG load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JBIG load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbigOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Jbig2">
      <summary>Gets the JBIG2 load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JBIG2 load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Jpeg">
      <summary>Gets the JPEG and LEAD CMP load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG and LEAD CMP load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Jpeg2000">
      <summary>Gets the JPEG 2000 and LEAD CMW load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG 2000 and LEAD CMW load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Pcd">
      <summary>Gets the PCD load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PCD load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPcdOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Pdf">
      <summary>Gets the PDF load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PDF load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Png">
      <summary>Gets the PNG load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The PNG load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Ptoka">
      <summary>Gets the PTOKA load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PTOKA load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPtokaOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Raw">
      <summary>Gets the RAW load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The RAW load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRawOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Rtf">
      <summary>Gets the RTF load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The RTF load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRtfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Tiff">
      <summary>Gets the TIFF load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The TIFF load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Wmf">
      <summary>Gets the WMF load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The WMF load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Txt">
      <summary>Gets the TEXT load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The TEXT load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Xps">
      <summary>Gets the XPS load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The XML Paper Specification (XPS) load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Xls">
      <summary>Gets the XLS load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The Microsoft Excel 2003 (XLS) load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXlsLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Doc">
      <summary>Gets the DOC load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The Microsoft Word 2003 (DOC) load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Anz">
      <summary>Gets the ANZ (Analyze) load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The ANZ (Analyze) load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAnzLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.Vff">
      <summary>Gets the VFF (Sun TAAC Bitmap) load and save options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The VFF (Sun TAAC Bitmap) load and save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsVffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOptions.RasterizeDocument">
      <summary>Gets the options used when loading or saving a document file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An instance of <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> object that contains the current
            document files load and save options.</value>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsSaveImageEventArgs">
      <summary>Provides information for the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> property works as the input and output buffer containing the image data to save. If
             the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to <strong>false</strong> (the default), then the user
             is always responsible for providing the image data by setting in <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />. If the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to
             <strong>true</strong>, then the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will populate the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> prior to raising this event. The user
             can then inspect or modify the scanlines data or simple ignore it to save the original image data as is.</para>
        <para>Notice that on either case, the user must provide the scanline data in the source image original format (stored in the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Image" />
             property. The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will then convert this data to the appropriate output format if needed, for example, if
             the user instructed the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to save the image in a different file format than the original image.</para>
        <para>This event can also be used to provide feedback to the user on the save operation progression and a chance for cancellation. To understand
             the various page and percentages, consider the following example.</para>
        <para>File Ocr.tif is a multi-page TIF file containing 4 pages. We want to save pages 2 through 4 (a total of 3 pages). We make the following call:</para>
        <para>
          <code>
             private void Test(RasterCodecs rasterCodecsObject)
             {
                // Load the image
                RasterImage image = rasterCodecsObject.Load(@"C:\Users\Public\Documents\LEADTOOLS Images\Ocr.tif");
            
                // Tell the RasterCodecs object to automatically set the image data to save from the source image
                rasterCodecsObject.Options.Save.RetrieveDataFromImage = true;
            
                // Subscribe to the SaveImage event
                rasterCodecsObject.SaveImage += new EventHandler&lt;CodecsSaveImageEventArgs&gt;(rasterCodecsObject_SaveImage);
            
                // Save pages 2 through 4 (total of 3 pages)
                int firstImagePage = 2;
                int lastImagePage = 4;
                int firstFilePage = 1;
            
                // Save
                rasterCodecsObject.Save(
                   image,
                   @"C:\Users\Public\Documents\LEADTOOLS Images\Ocr_pages2through4.tif",
                   RasterImageFormat.Tif,
                   1,
                   firstImagePage,
                   lastImagePage,
                   firstFilePage,
                   CodecsSavePageMode.Overwrite);
            
                // Unsubscribe to the LoadImage event
                rasterCodecsObject.SaveImage -= new EventHandler&lt;CodecsSaveImageEventArgs&gt;(rasterCodecsObject_SaveImage);
            
                image.Dispose();
             }
            
             private void rasterCodecsObject_SaveImage(object sender, CodecsSaveImageEventArgs e)
             {
             }
             </code>
        </para>
        <para>Inside the event handler, we will have the following values:
             <list type="table"><listheader><term>Member</term><description>Values</description></listheader><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.FirstPage" /></term><description>Will always be 1 since we specified 1 as the first file page number.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Page" /></term><description>Will go from 1 through 3 since we are saving 3 pages total starting as destination (file) page number 1.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.LastPage" /></term><description>Will always be 3 since we are saving 3 pages from 1 to 3.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.ImagePage" /></term><description>Will go from 2 through 4 since we are saving existing pages 2, 3, and 4.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /></term><description>Will go from 0 to 100 three times since we are saving three pages. This value will reset back to zero whenever <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Page" /> and <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.ImagePage" /> changes.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /></term><description>Will go from 0 to 100 during the whole saving operation. When this value is 100, all the pages are saved and the method returns.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Image">
      <summary>Gets the <see cref="T:Leadtools.RasterImage" /> object being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterImage" /> object being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.FileName">
      <summary>Gets the name of the file currently being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> containing the name of the file currently being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Stream">
      <summary>Gets the stream object currently being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Stream" /> object currently being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.OffsetValid">
      <summary>Gets a value that determines whether the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Offset" /> property is valid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the value in the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Offset" /> property is valid, false if it is being ignored.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Offset">
      <summary>Gets the offset to the start of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The offset to the start of the image data.</value>
      <remarks>
        <para>This is only valid if <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.OffsetValid" /> is true.</para>
        <para>This is the same value passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> methods that accepts a
            <paramref name="offset" /> parameter.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.FirstPage">
      <summary>Gets the index of the first page being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the first page being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Page">
      <summary>Gets the page number currently being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based page number currently being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.LastPage">
      <summary>Gets the index of the last page being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the last page being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.ImagePage">
      <summary>Gets the index of the <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> currently being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> currently being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent">
      <summary>Gets the save completion percentage of the current page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A number between 0 and 100 that indicates the completion percentage of the save operation of the current page.</value>
      <remarks>
        <para>Using the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> properties, you can use the <see cref="T:Leadtools.Codecs.CodecsSaveImageEventArgs" /> to show
            a progress bar of the current save operation.</para>
        <para>When saving a multi-page file, <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> will go from 0 to 100 for each page saved while <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> will go
            from 0 to 100 only once during the whole page operation. Usually, you will use <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> to show an overall save progress if the multi-page
            image is considered to be one document. If however, individual progress is required for each page, then you can track the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> property
            as well.</para>
        <para>When saving a single page file or one page to a multi-page file, both <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> will go from
            0 to 100 simultunasouly.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent">
      <summary>Gets the overall completion percentage for the save soperation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A number between 0 and 100 that indicates the overall completion percentage of the save operation.</value>
      <remarks>
        <para>Using the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> properties, you can use the <see cref="T:Leadtools.Codecs.CodecsSaveImageEventArgs" /> to show
            a progress bar of the current save operation.</para>
        <para>When saving a multi-page file, <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> will go from 0 to 100 for each page saved while <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> will go
            from 0 to 100 only once during the whole page operation. Usually, you will use <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> to show an overall save progress if the multi-page
            image is considered to be one document. If however, individual progress is required for each page, then you can track the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> property
            as well.</para>
        <para>When saving a single page file or one page to a multi-page file, both <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.TotalPercent" /> will go from
            0 to 100 simultunasouly.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Cancel">
      <summary>Gets or sets a value which allows the user to abort the save process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the save process, false to continue normally.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Row">
      <summary>Gets the current image row number of the first line in <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The current image row number of the first line in <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Lines">
      <summary>Gets the number of lines to copy from <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of lines to copy from <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer">
      <summary>Gets the memory buffer containing one or more lines of output image data that the you must provide. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterNativeBuffer" /> object containing one or more lines of output image data that the you must provide.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> property works as the input and output buffer containing the image data to save. If
            the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to <strong>false</strong> (the default), then the user
            is always responsible for providing the image data by setting in <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" />. If the value of <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage" /> is set to
            <strong>true</strong>, then the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will populate the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Buffer" /> prior to raising this event. The user
            can then inspect or modify the scanlines data or simple ignore it to save the original image data as is.</para>
        <para>Notice that on either case, the user must provide the scanline data in the source image original format (stored in the <see cref="P:Leadtools.Codecs.CodecsSaveImageEventArgs.Image" />
            property. The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will then convert this data to the appropriate output format if needed, for example, if
            the user instructed the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to save the image in a different file format than the original image.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage">RasterCodecs.SaveImage</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTiffImageInfo">
      <summary>Provides information specific to TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffImageInfo.HasNoPalette">
      <summary>Determines if the image has no palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is saved without a palette, false if the image is saved with a palette.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffImageInfo.IsImageFileDirectoryOffsetValid">
      <summary>Determines whether or not the image has a valid image file directory (IFD). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has a valid IFD, false otherwise.</value>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>v
            <noremarks /><example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example></member>
    <member name="P:Leadtools.Codecs.CodecsTiffImageInfo.ImageFileDirectoryOffset">
      <summary>Gets the image file directory offset. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The image file directory offset.</value>
      <remarks>
            Use this to speed up the handling of TIFF files with many pages.
            </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsCmpQualityFactorPredefined">
      <summary>Indicates the pre-defined quality factor for saving LEAD CMP compressed images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.PerfectQuality1">
      <summary>
        <para>Perfect quality 1</para>
        <para>This option compresses all colors of a 24-bit file and maintains the quality of the original image at a smaller file size. As the name suggests, there is no visual loss of color at this setting.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.PerfectQuality2">
      <summary>
        <para>Perfect quality 2</para>
        <para>This will produce a smaller file size than PQ1 while maintaining similar quality.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.SuperQuality">
      <summary>
        <para>Quality far more important than size</para>
        <para>This option removes colors not noticed by the human eye. Most viewers cannot tell the difference between an image compressed at this level and the original image.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.Quality">
      <summary>
        <para>Quality more important than size</para>
        <para>While more colors are removed, most of them are colors or shades that are close to one another. The compressed image will appear very much like the original image. It will take some study to see the difference.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.QualityAndSize">
      <summary>
        <para>Quality and size equally important</para>
        <para>This option provides the highest compression while maintaining good image quality. Try this option first, then move up or down the list accordingly to obtain acceptable compression size and image quality.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.Sharp">
      <summary>
        <para>Size more important that quality (sharp)</para>
        <para>This option is recommended for images that have sharp edges. For example, an image that has a text overlay or an image with many straight lines. While it creates a larger file than the next option, it retains better edges.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.LessTiling">
      <summary>
        <para>Size more important than quality (less tiling)</para>
        <para>This option produces less tiling in the image than the previous options. However, it may distort some text or straight lines. It is a good option for image database applications.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.MaximumQuality">
      <summary>
        <para>Maximum compression keeping quality</para>
        <para>This option provides maximum compression while maintaining as high as possible image quality.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.MaximumCompression">
      <summary>
        <para>Maximum compression</para>
        <para>This option gives maximum compression. It is equivalent to a Q factor of 255.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCmpQualityFactorPredefined.Custom">
      <summary>
        <para>Custom Quality Factor.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpegLoadOptions">
      <summary>Provides options specifically for loading JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.DisableMmx">
      <summary>Enables or disables use of MMX optimized instructions when loading JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to disable MMX, false to enable it.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.DisableP3">
      <summary>Enables or disables use of PIII optimized instructions when loading JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to disable PIII, false to enable it.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.ForceCieLab">
      <summary>Forces the load process to expect CIELAB colorspace data in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the load process to expect CIELAB colorspace data in the file.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.UseBadJpegPredictor">
      <summary>Forces the loading of lossless JPEG files that contain incorrect predictors. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the loading of lossless JPEG files that contain incorrect predictors.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.ForceRgbFile">
      <summary>Forces the load process to expect RGB colorspace data in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to force the load process to expect RGB colorspace data in the file.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.UseFastConversion">
      <summary>Enables or disables use of the fast color conversions when loading CMYK or CIELab files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to enable fast color conversion, false to disable it.</value>
      <remarks>
            Setting this property to true will greatly speed up the loading of CMYK and CIELab files,
            but it will reduce the image quality.
            </remarks>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegLoadOptions.IgnoreAdobeColorTransform">
      <summary>Ignore the Adobe marker containing color transformations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to ignore the Adobe marker, false to use it.</value>
      <remarks>
            Set this property to True load corrupt files with wrong APPE marker which have incorrect colors.
            </remarks>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.LoadCorrupted" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpegSaveOptions">
      <summary>Provides options specifically for saving JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <remarks>
            For information about compression quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">
      <summary>Gets and sets the Quality Factor (QFactor) to use when saving JPEG, LEAD CMP and other compressed images that support Quality Factor. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The Quality Factor to use when saving JPEG and LEAD CMP compressed images.
            </value>
      <remarks>
        <para>You can set a value from 2 to 255, where 2 is the highest quality and 255 is the most compression.</para>
        <para>You can also use a factor of 0 to produce lossless JPEG files.</para>
        <para>For information on formats that support quality factor, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.CmpQualityFactorPredefined">
      <summary>Gets and sets the pre-defined QFactor value when saving LEAD CMP compressed images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The LEAD CMP pre-defined QFactor.</value>
      <remarks>
        <para>When saving LEAD CMP compressed images, you can specify a pre-defined QFactor.</para>
        <para>If you set this property to
            <see cref="T:Leadtools.Codecs.CodecsCmpQualityFactorPredefined">CodecsCmpQualityFactorPredefined.Custom</see>, then you can set a custom
            QFactor in <see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.YccStamp">
      <summary>Gets and sets a value indicating the color space to use when saving EXIF stamp images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the stamp as YCC colorspace, false to save with RGB.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.JpegStamp">
      <summary>Gets and sets a value indicating the compression to use when saving EXIF stamp images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the stamp as JPEG compressed, false to save uncompressed.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.SaveWithStamp">
      <summary>Enables and disables saving stamp images when saving JPEG and LEAD CMP compressed images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save stamp images, false to not save stamp images.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.FixedPaletteStamp">
      <summary>Gets and sets a value which indicates the type of palette to use when saving stamp images that are 8-bit. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the LEAD Fixed palette, false to use an optimized palette.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.SaveWithoutTimestamp">
      <summary>Enables or disables saving the image file with a time stamp. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save without time stamp, false to save with time stamp.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.StampWidth">
      <summary>Gets and sets the width for the stamp image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width for the stamp image.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.StampHeight">
      <summary>Gets and sets the height for the stamp image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height for the stamp image.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.StampBitsPerPixel">
      <summary>Gets and sets the bit depth for the stamp image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The bit depth for the stamp image.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.DisableMmx">
      <summary>Enables or disables use of MMX optimized instructions when saving JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to disable MMX, false to enable MMX.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.SaveOldJtif">
      <summary>Enables or disables saving of old style JTIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save old style JTIF, false to save the new format.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.DisableP3">
      <summary>Enables or disables use of PIII optimized instructions when saving JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to disable PIII, false to enable PIII.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegSaveOptions.Passes">
      <summary>Gets and sets the number of passes when saving progressive JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The number of passes (scans through the image) when saving a progressive JPEG or LEAD CMP file.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>Any positive number &gt; 1.</term>
              <description>Save the file as a progressive file with the specified number of passes.</description>
            </item>
            <item>
              <term>1</term>
              <description>Save a regular file with optimized Huffman tables. 
                 Use this for smaller file size (at the expense of speed).
                 </description>
            </item>
            <item>
              <term>0</term>
              <description>Save the file as an ordinary JPEG or LEAD CMP file (not a progressive file).</description>
            </item>
            <item>
              <term>Any negative number.</term>
              <description>Save the file as a progressive file with the LEADTOOLS default number of passes.</description>
            </item>
          </list>
        </para>
      </value>
      <seealso cref="T:L.Topics.ControllingProgressiveLoadsAndSaves">Controlling Progressive Loads and Saves</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Passes">CodecsLoadOptions.Passes</seealso>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpegOptions">
      <summary>Provides extra options for loading and saving JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsJpegOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Slave.jpg")

         ' Get all Information about the Jpeg file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         'Setting Jpeg Load options.
         codecs.Options.Jpeg.Load.DisableMmx = False
         codecs.Options.Jpeg.Load.DisableP3 = False
         codecs.Options.Jpeg.Load.ForceCieLab = True
         codecs.Options.Jpeg.Load.ForceRgbFile = False
         codecs.Options.Jpeg.Load.UseBadJpegPredictor = False

         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         'if the image has stamp then set the Jpeg settings related to the stamp.
         If imageInfo.Jpeg.HasStamp Then
            codecs.Options.Jpeg.Save.FixedPaletteStamp = True
            codecs.Options.Jpeg.Save.JpegStamp = True
            codecs.Options.Jpeg.Save.SaveWithoutTimestamp = False
            codecs.Options.Jpeg.Save.SaveWithStamp = True
            codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel
            codecs.Options.Jpeg.Save.StampHeight = 100
            codecs.Options.Jpeg.Save.StampWidth = 100
            codecs.Options.Jpeg.Save.YccStamp = False
         End If

         If imageInfo.Jpeg.IsLossless Then
            Console.WriteLine("This is a lossless Jpeg Image")
         Else
            Console.WriteLine("This is not a lossless Jpeg Image")
         End If

         If imageInfo.Jpeg.IsProgressive Then
            codecs.Options.Jpeg.Save.Passes = 0
         End If

         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.Custom
         codecs.Options.Jpeg.Save.DisableMmx = True
         codecs.Options.Jpeg.Save.DisableP3 = True
         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Options.Jpeg.Save.SaveOldJtif = True

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "jpeg1.jpg"), RasterImageFormat.Jpeg, srcImage.BitsPerPixel)

         codecs.Options.Jpeg.Save.FixedPaletteStamp = False
         codecs.Options.Jpeg.Save.JpegStamp = True
         codecs.Options.Jpeg.Save.SaveWithoutTimestamp = True
         codecs.Options.Jpeg.Save.SaveWithStamp = True
         codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel
         codecs.Options.Jpeg.Save.StampHeight = 75
         codecs.Options.Jpeg.Save.StampWidth = 50
         codecs.Options.Jpeg.Save.YccStamp = True
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.MaximumQuality
         codecs.Options.Jpeg.Save.DisableMmx = False
         codecs.Options.Jpeg.Save.DisableP3 = False
         codecs.Options.Jpeg.Save.SaveOldJtif = False

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "jpeg2.jpg"), RasterImageFormat.Jpeg, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsJpegOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "cannon.jpg");

         // Get all Information about the Jpeg file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(srcFileName, true);

         //Setting Jpeg Load options.
         codecs.Options.Jpeg.Load.DisableMmx = false;
         codecs.Options.Jpeg.Load.DisableP3 = false;
         codecs.Options.Jpeg.Load.ForceCieLab = true;
         codecs.Options.Jpeg.Load.ForceRgbFile = false;
         codecs.Options.Jpeg.Load.UseBadJpegPredictor = false;

         RasterImage srcImage = codecs.Load(srcFileName);

         //if the image has stamp then set the Jpeg settings related to the stamp.
         if (imageInfo.Jpeg.HasStamp)
         {
            codecs.Options.Jpeg.Save.FixedPaletteStamp = true;
            codecs.Options.Jpeg.Save.JpegStamp = true;
            codecs.Options.Jpeg.Save.SaveWithoutTimestamp = false;
            codecs.Options.Jpeg.Save.SaveWithStamp = true;
            codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel;
            codecs.Options.Jpeg.Save.StampHeight = 100;
            codecs.Options.Jpeg.Save.StampWidth = 100;
            codecs.Options.Jpeg.Save.YccStamp = false;
         }

         if (imageInfo.Jpeg.IsLossless)
            Console.WriteLine("This is a lossless Jpeg Image");
         else
            Console.WriteLine("This is not a lossless Jpeg Image");

         if (imageInfo.Jpeg.IsProgressive)
            codecs.Options.Jpeg.Save.Passes = 0;

         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.Custom;
         codecs.Options.Jpeg.Save.DisableMmx = true;
         codecs.Options.Jpeg.Save.DisableP3 = true;
         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Options.Jpeg.Save.SaveOldJtif = true;

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "jpeg1.jpg"), RasterImageFormat.Jpeg, srcImage.BitsPerPixel);

         codecs.Options.Jpeg.Save.FixedPaletteStamp = false;
         codecs.Options.Jpeg.Save.JpegStamp = true;
         codecs.Options.Jpeg.Save.SaveWithoutTimestamp = true;
         codecs.Options.Jpeg.Save.SaveWithStamp = true;
         codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel;
         codecs.Options.Jpeg.Save.StampHeight = 75;
         codecs.Options.Jpeg.Save.StampWidth = 50;
         codecs.Options.Jpeg.Save.YccStamp = true;
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.MaximumQuality;
         codecs.Options.Jpeg.Save.DisableMmx = false;
         codecs.Options.Jpeg.Save.DisableP3 = false;
         codecs.Options.Jpeg.Save.SaveOldJtif = false;

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "jpeg2.jpg"), RasterImageFormat.Jpeg, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsJpegOptionsExample(Stream inStream, Stream outStreamJpeg1, Stream outStreamJpeg2)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get all Information about the Jpeg file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(inStream, true);

         //Setting Jpeg Load options.
         codecs.Options.Jpeg.Load.DisableMmx = false;
         codecs.Options.Jpeg.Load.DisableP3 = false;
         codecs.Options.Jpeg.Load.ForceCieLab = true;
         codecs.Options.Jpeg.Load.ForceRgbFile = false;
         codecs.Options.Jpeg.Load.UseBadJpegPredictor = false;

         RasterImage srcImage = codecs.Load(inStream);

         //if the image has stamp then set the Jpeg settings related to the stamp.
         if (imageInfo.Jpeg.HasStamp)
         {
            codecs.Options.Jpeg.Save.FixedPaletteStamp = true;
            codecs.Options.Jpeg.Save.JpegStamp = true;
            codecs.Options.Jpeg.Save.SaveWithoutTimestamp = false;
            codecs.Options.Jpeg.Save.SaveWithStamp = true;
            codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel;
            codecs.Options.Jpeg.Save.StampHeight = 100;
            codecs.Options.Jpeg.Save.StampWidth = 100;
            codecs.Options.Jpeg.Save.YccStamp = false;
         }

         if (imageInfo.Jpeg.IsLossless)
            Console.WriteLine("This is a lossless Jpeg Image");
         else
            Console.WriteLine("This is not a lossless Jpeg Image");

         if (imageInfo.Jpeg.IsProgressive)
            codecs.Options.Jpeg.Save.Passes = 0;

         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.Custom;
         codecs.Options.Jpeg.Save.DisableMmx = true;
         codecs.Options.Jpeg.Save.DisableP3 = true;
         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Options.Jpeg.Save.SaveOldJtif = true;

         codecs.Save(srcImage, outStreamJpeg1, RasterImageFormat.Jpeg, srcImage.BitsPerPixel);

         codecs.Options.Jpeg.Save.FixedPaletteStamp = false;
         codecs.Options.Jpeg.Save.JpegStamp = true;
         codecs.Options.Jpeg.Save.SaveWithoutTimestamp = true;
         codecs.Options.Jpeg.Save.SaveWithStamp = true;
         codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel;
         codecs.Options.Jpeg.Save.StampHeight = 75;
         codecs.Options.Jpeg.Save.StampWidth = 50;
         codecs.Options.Jpeg.Save.YccStamp = true;
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.MaximumQuality;
         codecs.Options.Jpeg.Save.DisableMmx = false;
         codecs.Options.Jpeg.Save.DisableP3 = false;
         codecs.Options.Jpeg.Save.SaveOldJtif = false;

         codecs.Save(srcImage, outStreamJpeg2, RasterImageFormat.Jpeg, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsJpegOptionsExample(ByVal inStream As Stream, ByVal outStreamJpeg1 As Stream, ByVal outStreamJpeg2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get all Information about the Jpeg file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(inStream, True)

         'Setting Jpeg Load options.
         codecs.Options.Jpeg.Load.DisableMmx = False
         codecs.Options.Jpeg.Load.DisableP3 = False
         codecs.Options.Jpeg.Load.ForceCieLab = True
         codecs.Options.Jpeg.Load.ForceRgbFile = False
         codecs.Options.Jpeg.Load.UseBadJpegPredictor = False

         Dim srcImage As RasterImage = codecs.Load(inStream)

         'if the image has stamp then set the Jpeg settings related to the stamp.
         If imageInfo.Jpeg.HasStamp Then
            codecs.Options.Jpeg.Save.FixedPaletteStamp = True
            codecs.Options.Jpeg.Save.JpegStamp = True
            codecs.Options.Jpeg.Save.SaveWithoutTimestamp = False
            codecs.Options.Jpeg.Save.SaveWithStamp = True
            codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel
            codecs.Options.Jpeg.Save.StampHeight = 100
            codecs.Options.Jpeg.Save.StampWidth = 100
            codecs.Options.Jpeg.Save.YccStamp = False
         End If

         If imageInfo.Jpeg.IsLossless Then
            Console.WriteLine("This is a lossless Jpeg Image")
         Else
            Console.WriteLine("This is not a lossless Jpeg Image")
         End If

         If imageInfo.Jpeg.IsProgressive Then
            codecs.Options.Jpeg.Save.Passes = 0
         End If

         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.Custom
         codecs.Options.Jpeg.Save.DisableMmx = True
         codecs.Options.Jpeg.Save.DisableP3 = True
         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Options.Jpeg.Save.SaveOldJtif = True

         codecs.Save(srcImage, outStreamJpeg1, RasterImageFormat.Jpeg, srcImage.BitsPerPixel)

         codecs.Options.Jpeg.Save.FixedPaletteStamp = False
         codecs.Options.Jpeg.Save.JpegStamp = True
         codecs.Options.Jpeg.Save.SaveWithoutTimestamp = True
         codecs.Options.Jpeg.Save.SaveWithStamp = True
         codecs.Options.Jpeg.Save.StampBitsPerPixel = srcImage.BitsPerPixel
         codecs.Options.Jpeg.Save.StampHeight = 75
         codecs.Options.Jpeg.Save.StampWidth = 50
         codecs.Options.Jpeg.Save.YccStamp = True
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.MaximumQuality
         codecs.Options.Jpeg.Save.DisableMmx = False
         codecs.Options.Jpeg.Save.DisableP3 = False
         codecs.Options.Jpeg.Save.SaveOldJtif = False

         codecs.Save(srcImage, outStreamJpeg2, RasterImageFormat.Jpeg, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegOptions.Load">
      <summary>Gets the options for loading JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG and LEAD CMP load options.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegOptions.Save">
      <summary>Gets the options for saving JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG and LEAD CMP save options.</value>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000CompressionControl">
      <summary>Indicates the compression control method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000CompressionControl.Lossless">
      <summary>
            Lossless compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000CompressionControl.Ratio">
      <summary>
            Compress the file based on the value of the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionRatio" />.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000CompressionControl.TargetSize">
      <summary>
            Compress the file based on the value of the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TargetFileSize" />.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000CompressionControl.QualityFactor">
      <summary>
            Compress the file based on the value of the <see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor" />.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder">
      <summary>Indicates the order of progression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder.LayerResolutionComponentPosition">
      <summary>
            Quality–axis order. Image starts out blurry and becomes clearer and more detailed
            as additional data is decoded.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder.ResolutionLayerComponentPosition">
      <summary>
            Resolution-axis order. Image starts out small and becomes larger as additional data is decoded.
            Higher compression ratios achieved by leaving lower resolutions in the file.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder.ResolutionPositionComponentLayer">
      <summary>
            Resolution-axis order. Image starts out small and becomves larger as additional data is decoded. 
            Higher compression ratios achieved by leaving lower resolutions 
            in the file.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder.PositionComponentResolutionLayer">
      <summary>
            Position–axis order. Image starts out as a series of blocks starting from the top left corner. Additional
            portions of the image become visible as more data is decoded. Image data stored by spatial location.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder.ComponentPositionResolutionLayer">
      <summary>
            Color-axis order.  Image starts out gray. Color is added as more data is decoded. Image data stored
            by color channel, starting with channely Y, then U, then V. If the transform to YUV option
            is used, the lowest decompressed image level for RGB is grayscale. Otherwise, the output is only the red
            channel.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000RegionOfInterest">
      <summary>Indicates which region of interest to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000RegionOfInterest.UseLeadRegion">
      <summary>
            Use the region stored in the <see cref="T:Leadtools.RasterImage" />.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000RegionOfInterest.UseOptionRectangle">
      <summary>
            Use the region specified by <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterestRectangle" />.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000PrecinctSize">
      <summary>Values to specify the size of JPEG 2000 compressed packets, provides a mean of
            random access into a JPEG 2000 compressed stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
                Precincts are rectangular regions in the wavelet domain, within a given resolution
                level and image component that represent a spatial region on the image. They are
                used for limiting the size of JPEG 2000 compressed packets and to provide a means
                of random access into a JPEG 2000 compressed stream. For this reason, they should
                be used for interactive transfer of JPEG 2000 files as in JPIP applications. In
                general, dividing the image into precincts is better than tiling it. So it is
                recommended that users compress the image as one tile and use precincts to divide
                the spatial region. This will give better compression ratios and image quality. 
                <para>Using smaller precinct dimensions provides finer access to the compressed
                stream yet increases the compressed stream size. It is recommended to use
                HierarchicalOne128 and no tiling to generate JPEG 2000 files for any
                purpose.</para></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Full">
      <summary>
            No precinct is used, size is infinite.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform64">
      <summary>
            For all resolution levels, a precinct dimension of [64x64] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform128">
      <summary>
            For all resolution levels, a precinct dimension of [128x128] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform256">
      <summary>
            For all resolution levels, a precinct dimension of [256x256] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform512">
      <summary>
            For all resolution levels, a precinct dimension of [512x512] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform1024">
      <summary>
            For all resolution levels, a precinct dimension of [1024x1024] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.Uniform2048">
      <summary>
            For all resolution levels, a precinct dimension of [2048x2048] will be applied.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalOne64">
      <summary>
            A precinct size of [X by X] will be applied to the first(smallest) resolution of the image. The second 
            resolution precinct dimension would be [2X by 2X]. The third resolution precinct dimension would be [4X by 4X] and so on. 
            If the JPEG 2000 file has five levels and HierarchicalOne64 is used, the precinct dimensions will be as follows:
            <list type="bullet"><item><description>
            [64x64] level 1
            </description></item><item><description>
            [128x128] level 2 
            </description></item><item><description>
            [256x256] level 3
            </description></item><item><description>
            [512x512] level 4
            </description></item><item><description>
            [1024x1024] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalOne128">
      <summary>
            A precinct size of [X by X] will be applied to the first(smallest) resolution of the image. The second 
            resolution precinct dimension would be [2X by 2X]. The third resolution precinct dimension would be [4X by 4X] and so on. 
            If the JPEG 2000 file has five levels and HierarchicalOne128 is used, the precinct dimensions will be as follows:
            <list type="bullet"><item><description>
            [128x128] level 1
            </description></item><item><description>
            [256x256]level 2 
            </description></item><item><description>
            [512x512]level 3
            </description></item><item><description>
            [1024x1024] level 4
            </description></item><item><description>
            [2048x2048] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalOne256">
      <summary>
            A precinct size of [X by X] will be applied to the first(smallest) resolution of the image. The second 
            resolution precinct dimension would be [2X by 2X]. The third resolution precinct dimension would be [4X by 4X] and so on. 
            If the JPEG 2000 file has five levels and HierarchicalOne256 is used, the precinct dimensions will be as follows:
            <list type="bullet"><item><description>
            [256x256] level 1
            </description></item><item><description>
            [512x512] level 2 
            </description></item><item><description>
            [1024x1024] level 3
            </description></item><item><description>
            [2048x2048] level 4
            </description></item><item><description>
            [4096x4096] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalOne512">
      <summary>
            A precinct size of [X by X] will be applied to the first(smallest) resolution of the image. The second 
            resolution precinct dimension would be [2X by 2X]. The third resolution precinct dimension would be [4X by 4X] and so on. 
            If the JPEG 2000 file has five levels and HierarchicalOne512 is used, the precinct dimensions will be as follows:
            <list type="bullet"><item><description>
            [512x512] level 1
            </description></item><item><description>
            [1024x1024 level 2 
            </description></item><item><description>
            [2048x2048] level 3
            </description></item><item><description>
            [4096x4096]level 4
            </description></item><item><description>
            [8192x8192] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalTwo64">
      <summary>
            A precinct size of [X by X] will be applied to the first and second (smallest) reolutions
            of the image. The third and fourth resolution precinct dimensions would be [2X by 2X] and so on.
            So if the JPEG 2000 file has five levels and HierarchicalTwo64 is used, the precinct
            dimensions will be as follows:
            <list type="bullet"><item><description>
            [64x64] level 1
            </description></item><item><description>
            [64x64] level 2 
            </description></item><item><description>
            [128x128] level 3
            </description></item><item><description>
            [128x128] level 4
            </description></item><item><description>
            [256x256] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalTwo128">
      <summary>
            A precinct size of [X by X] will be applied to the first and second (smallest) reolutions
            of the image. The third and fourth resolution precinct dimensions would be [2X by 2X] and so on.
            So if the JPEG 2000 file has five levels and HierarchicalTwo128 is used, the precinct
            dimensions will be as follows:
            <list type="bullet"><item><description>
            [128x128] level 1
            </description></item><item><description>
            [128x128] level 2 
            </description></item><item><description>
            [256x256] level 3
            </description></item><item><description>
            [256x256] level 4
            </description></item><item><description>
            [512x512] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalTwo256">
      <summary>
            A precinct size of [X by X] will be applied to the first and second (smallest) reolutions
            of the image. The third and fourth resolution precinct dimensions would be [2X by 2X] and so on.
            So if the JPEG 2000 file has five levels and HierarchicalTwo256 is used, the precinct
            dimensions will be as follows:
            <list type="bullet"><item><description>
            [256x256] level 1
            </description></item><item><description>
            [256x256] level 2 
            </description></item><item><description>
            [512x512] level 3
            </description></item><item><description>
            [512x512] level 4
            </description></item><item><description>
            [1024x1024] level 5
            </description></item></list></summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsJpeg2000PrecinctSize.HierarchicalTwo512">
      <summary>
            A precinct size of [X by X] will be applied to the first and second (smallest) reolutions
            of the image. The third and fourth resolution precinct dimensions would be [2X by 2X] and so on.
            So if the JPEG 2000 file has five levels and HierarchicalTwo512 is used, the precinct
            dimensions will be as follows:
            <list type="bullet"><item><description>
            [512x512] level 1
            </description></item><item><description>
            [512x512] level 2 
            </description></item><item><description>
            [1024x1024] level 3
            </description></item><item><description>
            [1024x1024] level 4
            </description></item><item><description>
            [2048x2048] level 5
            </description></item></list></summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000LoadOptions">
      <summary>Provides options specifically for loading JPEG 2000 and LEAD CMW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.Jp2Resolution">
      <summary>Gets or sets the resolution to load when loading JP2 files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
            Specifies the resolution of the image to load. You can specify 0 to get the default.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>Refer to <see cref="P:Leadtools.Codecs.CodecsJpeg2000Options.Load" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.J2kResolution">
      <summary>Gets or sets the resolution to load when loading J2K streams. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
            Specifies the resolution of the image to load. You can specify 0 to get the default.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.CmwResolution">
      <summary>Gets or sets the resolution to use when loading LEAD CMW files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
            Specifies the resolution of the image to use when loading. You can specify 0 to get the default. 
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000SaveOptions">
      <summary>Provides options specifically for saving JPEG and LEAD CMW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <remarks>
            For information about compression quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsJpeg2000SaveOptions.Reset">
      <summary>Resets this <see cref="T:Leadtools.Codecs.CodecsJpeg2000SaveOptions" /> object to the default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsJpeg2000SaveOptions.GetHorizontalSubSamplingValues">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>An array of integer holding the sub-sampling values</remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Codecs.CodecsJpeg2000SaveOptions.SetHorizontalSubSamplingValues(System.Int32[])">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="values">An array of integer holding the sub-sampling values</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Codecs.CodecsJpeg2000SaveOptions.GetVerticalSubSamplingValues">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of integer holding the sub-sampling values</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Codecs.CodecsJpeg2000SaveOptions.SetVerticalSubSamplingValues(System.Int32[])">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="values">An array of integer holding the sub-sampling values</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.MaximumComponentsNumber">
      <summary>This returns the maximum number of components supported by LEAD J2K. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Maximum number of components supported by LEAD J2K.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.MaximumDecompressionLevels">
      <summary>Returns the maximum number of resolutions supported by LEAD J2K. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The maximum number of resolutions supported by LEAD J2K.</value>
      <remarks>
            The maximum number of levels depends on the size of the image. Passing values 
            that are too large will cause the save operation to fail.  Each resolution 
            level is one-half the size of the previous resolution, starting with the full 
            image resolution. The default value is 5.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.UseColorTransform">
      <summary>Enables or disables converting an RGB image to YUV space before compressing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to convert to YUV space before compressing; false to not convert to YUV space before compressing.</value>
      <remarks>
            YUV space provides greater compression with higher image quality.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.DerivedQuantization">
      <summary>Gets or sets a value that indicates whether to use derived quantization or expounded quantization. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to use derived quantization, false to use expounded quantization.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl">
      <summary>Gets or sets the compression control method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The compression control method.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionRatio">
      <summary>Gets or sets the compression ratio. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The compression ratio. This value is only used if <see cref="T:Leadtools.Codecs.CodecsJpeg2000CompressionControl">CodecsJpeg2000CompressionControl.Ratio</see> is used. </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TargetFileSize">
      <summary>Gets or sets the target file size. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The target file size (in bytes). This value is only used if <see cref="T:Leadtools.Codecs.CodecsJpeg2000CompressionControl">CodecsJpeg2000CompressionControl.TargetSize</see> is used. </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ImageAreaHorizontalOffset">
      <summary>Gets or sets the horizontal offset from the origin of the reference grid to the left side of the image area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The horizontal offset from the origin of the reference grid to the left side of the image area.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ImageAreaVerticalOffset">
      <summary>Gets or sets the vertical offset from the origin of the reference grid to the top of the image area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The vertical offset from the origin of the reference grid to the top of the image area.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ReferenceTileWidth">
      <summary>Gets or sets the width of one reference tile, with respect to the reference grid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The width of one reference tile, with respect to the reference grid.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ReferenceTileHeight">
      <summary>Gets or sets the height of one reference tile, with respect to the reference grid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The height of one reference tile, with respect to the reference grid.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TileHorizontalOffset">
      <summary>Gets or sets the horizontal offset from the origin of the reference grid to the left side of the first tile. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The horizontal offset from the origin of the reference grid to the left side of the first tile.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TileVerticalOffset">
      <summary>Gets or sets the vertical offset from the origin of the reference grid to the top of the first tile. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The vertical offset from the origin of the reference grid to the top of the first tile.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.DecompositionLevels">
      <summary>Gets or sets the number of resolution levels in the compressed file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The number of resolution levels in the compressed file.
            </value>
      <remarks>
            The maximum number of levels depends on the size of the image.
            Passing values that are too large will cause the save operation to fail.  
            Each resolution level is one-half the size of the previous resolution, 
            in both dimensions (width and height), starting 
            with the full image resolution. The resolutions are not stored independently, and do not have
            a major impact on the compression results.
            The default value is 5, which produces the best compression ratios in most cases.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ProgressingOrder">
      <summary>Gets or sets the order of progression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A <see cref="T:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder">CodecsJpeg2000ProgressionsOrder</see> value 
            that specifies the order of progression.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CodeBlockWidth">
      <summary>Gets or sets the width of the code block, following wavelet transformation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The value must be a power of 2. It must be at least 4 and less than or equal to 1024.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CodeBlockHeight">
      <summary>Gets or sets the height of the code block, following wavelet transformation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The value must be a power of 2. It must be at least 4 and less than or equal to 1024.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.SelectiveAcBypass">
      <summary>Gets or sets a value indicating if the "lazy coding mode" is adopted. In this case, trailing bit-planes bypass the arithmetic coder except in the normalization pass. Otherwise, the arithmetic coder is used on all passes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the "lazy coding mode" is adopted. In this case, trailing bit-planes bypass the arithmetic coder except in the normalization pass. Otherwise, the arithmetic coder is used on all passes.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ResetContextOnBoundaries">
      <summary>Gets or sets a value indicating if the arithmetic coder's probability models are reset between coding passes. This controls where the end of encoded data is and limits the amount of potentially lost data in the event of a transmission error. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the arithmetic coder's probability models are reset between coding passes. This controls where the end of encoded data is and limits the amount of potentially lost data in the event of a transmission error.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TerminationOnEachPass">
      <summary>Gets or sets a value indicating if the arithmetic code-word generation process stops on a byte boundary at the end of each coding pass. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the arithmetic code-word generation process stops on a byte boundary at the end of each coding pass.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.VerticallyCausalContext">
      <summary>Gets or sets a value indicating if the context models are restricted to being vertically causal within each sub-block. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the context models are restricted to being vertically causal within each sub-block.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.PredictableTermination">
      <summary>Gets or sets a value indicating if the encoder has a predictable termination policy and identifies that the policy was used in the code-stream COD/COC markers. This can be used to implement error detection and concealment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the encoder has a predictable termination policy and identifies that the policy was used in the code-stream COD/COC markers. This can be used to implement error detection and concealment.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ErrorResilienceSymbol">
      <summary>Gets or sets a value indicating if a 4 symbol marker is included for each bit-plane, following the normalization pass. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if a 4 symbol marker is included for each bit-plane, following the normalization pass.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.GuardBits">
      <summary>Gets or sets the number of extra bits to consider when encoding an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            Possible values are 0 - 7. The default is 2. A value of 2 or 1 will produce the best compression.
            </value>
      <remarks>
            This prevents coding overflow.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.DerivedBaseMantissa">
      <summary>Gets or sets the base mantissa used for derived quantization. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The base mantissa used for derived quantization.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.DerivedBaseExponent">
      <summary>Gets or sets the base exponent used for derived quantization. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The base exponent used for derived quantization.
            </value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.UseSopMarker">
      <summary>Enables or disables use of the Start of Packet(SOP) marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the SOP marker, false otherwise.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <remarks>
            The "Start of Packet" and "End of Packet Header" markers help detect file corruption during transmission. If these markers
            exist in the JPEG2000 compressed stream, it is easy for the decoder to find
            the packet boundary, or, in case of a stream error, check the size. If UseSopMarker is true, each packet
            in any given tile part will be prepended with a SOP marker segment. The SOP marker includes the size of the packet. The 
            default value is false.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.UseEphMarker">
      <summary>Enables or disables use of the End of Packet Header (EPH) marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the EPH marker, false otherwise.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <remarks>
            The "Start of Packet" and "End of Packet Header" markers help detect file corruption during 
            transmission. If these markers
            exist in the JPEG2000 compressed stream, it is easy for the decoder to find
            the packet boundary, or, in case of a stream error, check the size. 
            If UseEphMarker is true, each packet
            header in any given tile part is postpended with an EPH marker segment. The 
            default value is false.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterest">
      <summary>Gets or sets a value indicating the type of region to use when saving. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The type of region to use.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.UseRegionOfInterest">
      <summary>Indicates whether to use a region of interest. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use a region of interest, false otherwise.</value>
      <remarks>The type of region is specified by <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterest" />.
            If you do not want to use a region of interest, set this to false. Otherwise, there may be
            a significant compression and speed performance loss.
            </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterestWeight">
      <summary>Reserved for internal use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            Reserved for internal use.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterestRectangle">
      <summary>Gets or sets the rectangular region of interest to use when 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.RegionOfInterest" /> is 
            <see cref="T:Leadtools.Codecs.CodecsJpeg2000RegionOfInterest">CodecsJpeg2000RegionOfInterest.UseOptionRectangle</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A rectangle which specifies the region of interest.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.AlphaChannelActiveBits">
      <summary>Gets or sets a value indicating the active bits for the alpha channel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The active bits for the alpha channel. Possible values are 1 and 8. If the 
            value is 1 it means the 256 levels of the 8-bit alpha channels will be 
            transformed into two levels of value 255 or 0, using simple threshold. 
            The threshold value is 127, so all values gt; 127 will be set to 255 and 
            all values lt;= 127 will be set to 0. If the value is 8, all 256 
            levels of the 8-bit alpha channels will be compressed. This is the default value. This 
            option should be used on a 32-bit bitmap otherwise it has no effect.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.AlphaChannelLossless">
      <summary>Gets or sets a value indicating whether to save the alpha channel as lossless. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the alpha channel as lossless, otherwise; false.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <remarks>
            The default value is true. The resulting image is 32-bit. The value of this property controls 
            the compression type of alpha channel for J2K/JP2 lossy compression. This 
            option should be used on a 32-bit bitmap otherwise it has no effect.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.PrecinctSize">
      <summary>Specifies the precinct size. For a list of possible values refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000PrecinctSize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <value>The precinct size. For a list of possible values refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000PrecinctSize" />.</value>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpeg2000Options">
      <summary>Provides extra options for loading and saving JPEG 2000 and LEAD CMW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <p>The JPEG2000 image format offers both superior compression performance and robust file 
            handling. Some J2K options can have a direct impact on compression performance, while others 
            primarily affect resulting file size. Notes on Advanced options continue below.</p>
        <p>Main options (listed above) include:</p>
        <ul>
          <li>
            <p>Color Transforms</p>
          </li>
          <li>
            <p>Compression Settings</p>
          </li>
          <li>
            <p>Multiple resolution representation (Wavelet Decomposition Level)</p>
          </li>
          <li>
            <p>Random codestream access and processing (Progression Order)</p>
          </li>
          <li>
            <p>Progressive transmission (Advanced)</p>
          </li>
          <li>
            <p>Tile Size</p>
          </li>
          <li>
            <p>Error resilience for transmission in noisy environments, such as wireless and the 
            Internet.</p>
          </li>
          <li>
            <p>Region-of-Interest coding.</p>
          </li>
        </ul>
        <strong>
          <p>Using this structure with LEAD CMW (Cmw) or TIFF with LEAD Wavelet CMW compression (TifCmw) files</p>
        </strong>
        <p>When using this structure with Cmw or TifCmw files, only the following data 
            properties are required:</p>
        <p>
          <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" />
        </p>
        <p>
          <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionRatio" />
        </p>
        <p>
          <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TargetFileSize" />
        </p>
        <p>
          <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ProgressingOrder" />
        </p>
        <p>The resulting file size/ compression ratio can be determined in several ways. Depending on 
            the value set in the CompressionControl property, the user can set the size of the target file, the 
            actual compression ratio to use during compression or the quality factor to use during compression. 
            If the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property is set to Ratio, 
            then the compression used is based on the 
            compression ratio in the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionRatio" /> property. If the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property is set to 
            TargetSize, the compression used is based on the desired target file size in the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TargetFileSize" /> property. If the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property is set to QualityFactor, then the
            compression used is based on the QualityFactor passed to the Save functions.</p>
        <strong>
          <p>Lossless Compression</p>
        </strong>
        <p>For lossless compression, set the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property to Lossless.</p>
        <strong>
          <p>Lossy Compression Quantization</p>
        </strong>
        <p>There are two types of quantization for Lossy compression: Scalar Derived Quantization and 
            Scalar Expounded Quantization.</p>
        <p>The exponent/mantissa pairs are either signaled in the codestream for every sub-band 
            (expounded quantization) or else signaled only for the Low Pass sub-band and derived for all other 
            sub-bands (derived quantization). In the case of derived quantization, all exponent/mantissa pairs 
            are derived from the single exponent/mantissa pair corresponding to the Low pass sub-band.</p>
        <p>The quantization step size for a sub-band is calculated from the dynamic range of the 
            sub-band using the following equation, where R = bpp for the sub-band:</p>
        <p>
          <code>Quantization Step = (2 (R - Exponent) ) * [1 + (Mantissa / 2048)]</code>
        </p>
        <p>If the value of the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property is Ratio, QualityFactor or 
            TargetSize, and the value of the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.AlphaChannelLossless" /> property is true, 
            the compressed J2K/JP2 
            file will have three lossy components (red, green and blue), in addition to the lossless alpha 
            component.</p>
        <p>If the value of the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.CompressionControl" /> property is Lossless, the value of 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.AlphaChannelLossless" /> will be ignored and all the components will be lossless.</p>
        <p>The alpha channel can be dithered using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> and 
            <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" /> externally, and before saving 
            a J2K/JP2 file, in case a better alpha channel quality is desired.</p>
        <strong>
          <p>Tile and Canvas Settings</p>
        </strong>
        <p>The values of the <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ImageAreaHorizontalOffset" />, 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ImageAreaVerticalOffset" />, 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ReferenceTileHeight" />, 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ReferenceTileWidth" />, 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TileHorizontalOffset" /> and 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.TileVerticalOffset" /> properties are 
            used to create tiles within the image. Arbitrary tile sizes are allowed. All tiles are the same 
            size, except for the border tiles. Each tile can be compressed individually. This can decrease 
            memory usage while the program is running, but can also generate artifacts at the edges of the 
            tiles. Artifacts generally increase as the size of the tile decreases. By default, there is one 
            tile that contains the entire image.</p>
        <p>The reference grid is a rectangular grid of points with the indices from (0, 0) to (Xsiz-1, 
            Ysiz-1). An "image area" is defined on the reference grid by the dimensional parameters, (Xsiz, 
            Ysiz) and (XOsiz, YOsiz). The various parameters defining the reference grid appear in the 
            figures below. </p>
        <p>Specifically, the image area on the reference grid is defined by its upper left hand 
            reference grid point at location (XOsiz, YOsiz), and its lower right hand reference grid point at 
            location (Xsiz-1, Ysiz-1).</p>
        <p>
          <img src="J2KCanvas.gif" />
        </p>
        <p>
          <img src="J2KTile.gif" />
        </p>
        <list type="table">
          <listheader>
            <term>Property Name</term>
            <description>Label In Diagram</description>
          </listheader>
          <item>
            <term>ImageAreaHorizontalOffset</term>
            <description>XOsiz</description>
          </item>
          <item>
            <term>ImageAreaVerticalOffset</term>
            <description>YOsiz</description>
          </item>
          <item>
            <term>ReferenceTileHeight</term>
            <description>XTsiz</description>
          </item>
          <item>
            <term>ReferenceTileWidth</term>
            <description>YTsiz</description>
          </item>
          <item>
            <term>TileHorizontalOffset</term>
            <description>XTOsiz</description>
          </item>
          <item>
            <term>TileVerticalOffset</term>
            <description>YTOsiz</description>
          </item>
        </list>
        <strong>
          <p>Progression Order</p>
        </strong>
        <p>For a given tile-part, the packets contain all compressed image data from a specific layer, 
            a specific component, a specific resolution level, and a specific precinct. The order in which 
            these packets are found in the codestream is called the progression order. Use the 
            <see cref="P:Leadtools.Codecs.CodecsJpeg2000SaveOptions.ProgressingOrder" /> property to set the progression order. The ProgressingOrder property 
            uses the <see cref="T:Leadtools.Codecs.CodecsJpeg2000ProgressionsOrder" /> enumeration to specify the progression
            The ordering of the 
            packets can progress along four axes: layer, component, resolution and position. The following progressions
            can be specified:</p>
        <ol>
          <li>
            <p>
              <strong>LayerResolutionComponentPosition.</strong> A progression of this type might be useful 
                    when low sample accuracy is most desirable, but 
                    information is needed for all components.</p>
          </li>
          <li>
            <p>
              <strong>ResolutionLayerComponentPosition.</strong> A progression of this type might 
                    be useful in providing low-resolution level versions of all 
                    image components.</p>
          </li>
          <li>
            <p>
              <strong>ResolutionPositionComponentLayer.</strong> A 
                    progression of this type might be useful in providing low-resolution level versions of all image 
                    components at a particular spatial location.</p>
          </li>
          <li>
            <p>
              <strong>PositionComponentResolutionLayer.</strong> A progression of this type 
                    might be useful in providing high sample accuracy for a 
                    particular spatial location in all components.</p>
          </li>
          <li>
            <p>
              <strong>ComponentPositionResolutionLayer.</strong> A progression of this 
                    type might be useful in providing high accuracy for a particular 
                    spatial location in a particular image component.</p>
          </li>
        </ol>
        <p>For more information, refer to:</p>
        <p>
          <a href="http://www.jpeg.org/public/wg1n1861.pdf">ISO/IEC JTC1/SC29/WG1 N1861: Coding of 
            Still Pictures</a>
        </p>
      </remarks>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsJpeg2000OptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k")

         'Setting the Jpeg2000 load options.
         codecs.Options.Jpeg2000.Load.J2kResolution = New LeadSize(800, 800)
         codecs.Options.Jpeg2000.Load.Jp2Resolution = New LeadSize(800, 800)

         'loading a Jpeg2000 image.
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         'Setting the Jpeg2000 save options 
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 32
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 32
         codecs.Options.Jpeg2000.Save.CompressionControl = CodecsJpeg2000CompressionControl.Ratio
         codecs.Options.Jpeg2000.Save.CompressionRatio = 15.0F
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 5
         codecs.Options.Jpeg2000.Save.DerivedBaseExponent = 8
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2
         codecs.Options.Jpeg2000.Save.DerivedQuantization = True
         codecs.Options.Jpeg2000.Save.ErrorResilienceSymbol = False
         codecs.Options.Jpeg2000.Save.GuardBits = 4
         codecs.Options.Jpeg2000.Save.ImageAreaHorizontalOffset = 0
         codecs.Options.Jpeg2000.Save.ImageAreaVerticalOffset = 0
         codecs.Options.Jpeg2000.Save.PredictableTermination = False
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.PositionComponentResolutionLayer
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 240
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 480
         codecs.Options.Jpeg2000.Save.RegionOfInterest = CodecsJpeg2000RegionOfInterest.UseLeadRegion
         codecs.Options.Jpeg2000.Save.RegionOfInterestRectangle = New LeadRect(0, 0, 0, 0)
         codecs.Options.Jpeg2000.Save.ResetContextOnBoundaries = False
         codecs.Options.Jpeg2000.Save.SelectiveAcBypass = False
         codecs.Options.Jpeg2000.Save.TargetFileSize = 10240
         codecs.Options.Jpeg2000.Save.TerminationOnEachPass = False
         codecs.Options.Jpeg2000.Save.TileHorizontalOffset = 0
         codecs.Options.Jpeg2000.Save.TileVerticalOffset = 0
         codecs.Options.Jpeg2000.Save.UseColorTransform = True
         codecs.Options.Jpeg2000.Save.UseEphMarker = False
         codecs.Options.Jpeg2000.Save.UseRegionOfInterest = False
         codecs.Options.Jpeg2000.Save.UseSopMarker = False
         codecs.Options.Jpeg2000.Save.VerticallyCausalContext = False

         'Save the first sample.
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.j2k"), RasterImageFormat.J2k, srcImage.BitsPerPixel)

         'changing some of the Jpeg2000 save options
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 4
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 8
         codecs.Options.Jpeg2000.Save.CompressionRatio = 23.0F
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 6
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 320
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 320
         codecs.Options.Jpeg2000.Save.UseEphMarker = True
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.ResolutionPositionComponentLayer
         codecs.Options.Jpeg2000.Save.UseSopMarker = True
         codecs.Options.Jpeg2000.Save.TargetFileSize = 102400

         'Save the first sample.
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jp2"), RasterImageFormat.J2k, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsJpeg2000OptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k");

         //Setting the Jpeg2000 load options.
         codecs.Options.Jpeg2000.Load.J2kResolution = new LeadSize(800, 800);
         codecs.Options.Jpeg2000.Load.Jp2Resolution = new LeadSize(800, 800);

         //loading a Jpeg2000 image.
         RasterImage srcImage = codecs.Load(srcFileName);

         //Setting the Jpeg2000 save options 
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 32;
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 32;
         codecs.Options.Jpeg2000.Save.CompressionControl = CodecsJpeg2000CompressionControl.Ratio;
         codecs.Options.Jpeg2000.Save.CompressionRatio = 15.0f;
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 5;
         codecs.Options.Jpeg2000.Save.DerivedBaseExponent = 8;
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2;
         codecs.Options.Jpeg2000.Save.DerivedQuantization = true;
         codecs.Options.Jpeg2000.Save.ErrorResilienceSymbol = false;
         codecs.Options.Jpeg2000.Save.GuardBits = 4;
         codecs.Options.Jpeg2000.Save.ImageAreaHorizontalOffset = 0;
         codecs.Options.Jpeg2000.Save.ImageAreaVerticalOffset = 0;
         codecs.Options.Jpeg2000.Save.PredictableTermination = false;
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.PositionComponentResolutionLayer;
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 240;
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 480;
         codecs.Options.Jpeg2000.Save.RegionOfInterest = CodecsJpeg2000RegionOfInterest.UseLeadRegion;
         codecs.Options.Jpeg2000.Save.RegionOfInterestRectangle = new LeadRect(0, 0, 0, 0);
         codecs.Options.Jpeg2000.Save.ResetContextOnBoundaries = false;
         codecs.Options.Jpeg2000.Save.SelectiveAcBypass = false;
         codecs.Options.Jpeg2000.Save.TargetFileSize = 10240;
         codecs.Options.Jpeg2000.Save.TerminationOnEachPass = false;
         codecs.Options.Jpeg2000.Save.TileHorizontalOffset = 0;
         codecs.Options.Jpeg2000.Save.TileVerticalOffset = 0;
         codecs.Options.Jpeg2000.Save.UseColorTransform = true;
         codecs.Options.Jpeg2000.Save.UseEphMarker = false;
         codecs.Options.Jpeg2000.Save.UseRegionOfInterest = false;
         codecs.Options.Jpeg2000.Save.UseSopMarker = false;
         codecs.Options.Jpeg2000.Save.VerticallyCausalContext = false;

         //Save the first sample.
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.j2k"), RasterImageFormat.J2k, srcImage.BitsPerPixel);

         //changing some of the Jpeg2000 save options
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 4;
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 8;
         codecs.Options.Jpeg2000.Save.CompressionRatio = 23.0f;
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 6;
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2;
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 320;
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 320;
         codecs.Options.Jpeg2000.Save.UseEphMarker = true;
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.ResolutionPositionComponentLayer;
         codecs.Options.Jpeg2000.Save.UseSopMarker = true;
         codecs.Options.Jpeg2000.Save.TargetFileSize = 102400;

         //Save the first sample.
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jp2"), RasterImageFormat.J2k, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsJpeg2000OptionsExample(Stream inStream, Stream outStreamJ2k, Stream outStreamJp2)
      {
         RasterCodecs codecs = new RasterCodecs();
         //Setting the Jpeg2000 load options.
         codecs.Options.Jpeg2000.Load.J2kResolution = new LeadSize(800, 800);
         codecs.Options.Jpeg2000.Load.Jp2Resolution = new LeadSize(800, 800);

         //loading a Jpeg2000 image.
         RasterImage srcImage = codecs.Load(inStream);

         //Setting the Jpeg2000 save options 
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 32;
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 32;
         codecs.Options.Jpeg2000.Save.CompressionControl = CodecsJpeg2000CompressionControl.Ratio;
         codecs.Options.Jpeg2000.Save.CompressionRatio = 15.0f;
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 5;
         codecs.Options.Jpeg2000.Save.DerivedBaseExponent = 8;
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2;
         codecs.Options.Jpeg2000.Save.DerivedQuantization = true;
         codecs.Options.Jpeg2000.Save.ErrorResilienceSymbol = false;
         codecs.Options.Jpeg2000.Save.GuardBits = 4;
         codecs.Options.Jpeg2000.Save.ImageAreaHorizontalOffset = 0;
         codecs.Options.Jpeg2000.Save.ImageAreaVerticalOffset = 0;
         codecs.Options.Jpeg2000.Save.PredictableTermination = false;
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.PositionComponentResolutionLayer;
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 240;
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 480;
         codecs.Options.Jpeg2000.Save.RegionOfInterest = CodecsJpeg2000RegionOfInterest.UseLeadRegion;
         codecs.Options.Jpeg2000.Save.RegionOfInterestRectangle = new LeadRect(0, 0, 0, 0);
         codecs.Options.Jpeg2000.Save.ResetContextOnBoundaries = false;
         codecs.Options.Jpeg2000.Save.SelectiveAcBypass = false;
         codecs.Options.Jpeg2000.Save.TargetFileSize = 10240;
         codecs.Options.Jpeg2000.Save.TerminationOnEachPass = false;
         codecs.Options.Jpeg2000.Save.TileHorizontalOffset = 0;
         codecs.Options.Jpeg2000.Save.TileVerticalOffset = 0;
         codecs.Options.Jpeg2000.Save.UseColorTransform = true;
         codecs.Options.Jpeg2000.Save.UseEphMarker = false;
         codecs.Options.Jpeg2000.Save.UseRegionOfInterest = false;
         codecs.Options.Jpeg2000.Save.UseSopMarker = false;
         codecs.Options.Jpeg2000.Save.VerticallyCausalContext = false;

         //Save the first sample.
         codecs.Save(srcImage, outStreamJ2k, RasterImageFormat.J2k, srcImage.BitsPerPixel);

         //changing some of the Jpeg2000 save options
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 4;
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 8;
         codecs.Options.Jpeg2000.Save.CompressionRatio = 23.0f;
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 6;
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2;
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 320;
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 320;
         codecs.Options.Jpeg2000.Save.UseEphMarker = true;
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.ResolutionPositionComponentLayer;
         codecs.Options.Jpeg2000.Save.UseSopMarker = true;
         codecs.Options.Jpeg2000.Save.TargetFileSize = 102400;

         //Save the second sample.
         codecs.Save(srcImage, outStreamJp2, RasterImageFormat.J2k, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsJpeg2000OptionsExample(ByVal inStream As Stream, ByVal outStreamJ2k As Stream, ByVal outStreamJp2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         'Setting the Jpeg2000 load options.
         codecs.Options.Jpeg2000.Load.J2kResolution = New LeadSize(800, 800)
         codecs.Options.Jpeg2000.Load.Jp2Resolution = New LeadSize(800, 800)

         'loading a Jpeg2000 image.
         Dim srcImage As RasterImage = codecs.Load(inStream)

         'Setting the Jpeg2000 save options 
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 32
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 32
         codecs.Options.Jpeg2000.Save.CompressionControl = CodecsJpeg2000CompressionControl.Ratio
         codecs.Options.Jpeg2000.Save.CompressionRatio = 15.0f
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 5
         codecs.Options.Jpeg2000.Save.DerivedBaseExponent = 8
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2
         codecs.Options.Jpeg2000.Save.DerivedQuantization = True
         codecs.Options.Jpeg2000.Save.ErrorResilienceSymbol = False
         codecs.Options.Jpeg2000.Save.GuardBits = 4
         codecs.Options.Jpeg2000.Save.ImageAreaHorizontalOffset = 0
         codecs.Options.Jpeg2000.Save.ImageAreaVerticalOffset = 0
         codecs.Options.Jpeg2000.Save.PredictableTermination = False
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.PositionComponentResolutionLayer
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 240
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 480
         codecs.Options.Jpeg2000.Save.RegionOfInterest = CodecsJpeg2000RegionOfInterest.UseLeadRegion
         codecs.Options.Jpeg2000.Save.RegionOfInterestRectangle = New LeadRect(0, 0, 0, 0)
         codecs.Options.Jpeg2000.Save.ResetContextOnBoundaries = False
         codecs.Options.Jpeg2000.Save.SelectiveAcBypass = False
         codecs.Options.Jpeg2000.Save.TargetFileSize = 10240
         codecs.Options.Jpeg2000.Save.TerminationOnEachPass = False
         codecs.Options.Jpeg2000.Save.TileHorizontalOffset = 0
         codecs.Options.Jpeg2000.Save.TileVerticalOffset = 0
         codecs.Options.Jpeg2000.Save.UseColorTransform = True
         codecs.Options.Jpeg2000.Save.UseEphMarker = False
         codecs.Options.Jpeg2000.Save.UseRegionOfInterest = False
         codecs.Options.Jpeg2000.Save.UseSopMarker = False
         codecs.Options.Jpeg2000.Save.VerticallyCausalContext = False

         'Save the first sample.
         codecs.Save(srcImage, outStreamJ2k, RasterImageFormat.J2k, srcImage.BitsPerPixel)

         'changing some of the Jpeg2000 save options
         codecs.Options.Jpeg2000.Save.CodeBlockHeight = 4
         codecs.Options.Jpeg2000.Save.CodeBlockWidth = 8
         codecs.Options.Jpeg2000.Save.CompressionRatio = 23.0f
         codecs.Options.Jpeg2000.Save.DecompositionLevels = 6
         codecs.Options.Jpeg2000.Save.DerivedBaseMantissa = 2
         codecs.Options.Jpeg2000.Save.ReferenceTileHeight = 320
         codecs.Options.Jpeg2000.Save.ReferenceTileWidth = 320
         codecs.Options.Jpeg2000.Save.UseEphMarker = True
         codecs.Options.Jpeg2000.Save.ProgressingOrder = CodecsJpeg2000ProgressionsOrder.ResolutionPositionComponentLayer
         codecs.Options.Jpeg2000.Save.UseSopMarker = True
         codecs.Options.Jpeg2000.Save.TargetFileSize = 102400

         'Save the second sample.
         codecs.Save(srcImage, outStreamJp2, RasterImageFormat.J2k, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000Options.Load">
      <summary>Gets the options for loading JPEG 2000 and LEAD CMW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG 2000 load options.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpeg2000Options.Save">
      <summary>Gets the options for saving JPEG 2000 and LEAD CMW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JPEG 2000 save options.</value>
      <seealso cref="T:L.Topics.ProgrammingWithJpeg2000Features">Programming With JPEG 2000 Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsThumbnailOptions">
      <summary>Options used when loading a thumbnail from an image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            This structure is used with the <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see> method to set the
            options used when loading a thumbnail from an image file.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.Default">
      <summary>Gets the default settings for <see cref="T:Leadtools.Codecs.CodecsThumbnailOptions" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The default settings for <see cref="T:Leadtools.Codecs.CodecsThumbnailOptions" />.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.Width">
      <summary>Gets or sets the desired thumbnail width in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desired thumbnail width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.Height">
      <summary>Gets or sets the desired thumbnail height in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desired thumbnail height in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.BitsPerPixel">
      <summary>Gets or sets the desired thumbnail bits per pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The desired thumbnail bits per pixel.  The following are valid values:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Default bits per pixel stored in the file.</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.Order">
      <summary>Gets or sets the desired color order for the thumbnail image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desired color order for the thumbnail image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">
      <summary>Gets or sets the dithering method to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The dithering method to use.</value>
      <remarks>
            The <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod" /> will be passed to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> internally when
            <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> is true, <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize" /> is true, and the source image is not 24-bit. In this
            case, the thumbnail image is converted to 24-bit, then, combined with a "background" image. The resulting image is then
            returned to the thumbnail image's original bit-depth using <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod" />.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.PaletteFlags">
      <summary>Gets or sets the palette flags to use. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The palette flags to use.</value>
      <remarks>
            The <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.PaletteFlags" /> will be passed to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> internally when
            <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> is true, <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize" /> is true, and the source image is not 24-bit. In this
            case, the thumbnail image is converted to 24-bit, then, combined with a "background" image. The resulting image is then
            returned to the thumbnail image's original bit-depth using <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.PaletteFlags" />.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio">
      <summary>Gets or sets a value which indicates whether the aspect ratio of the image should be maintained when creating the thumbnail. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to indicates that the aspect ratio of the image should be maintained when creating the thumbnail, otherwise; false.</value>
      <remarks>
        <para>When set to true, the generated thumbnail's width and height will not match both <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.Width" /> and
            <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.Height" /> if the original aspect ratio was not 1:1.</para>
        <para>If you desire the thumbnail be generated with exactly the requested width and height while still maintaining the
            aspect ratio of the actual image, set both <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> and <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize" /> to true.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize">
      <summary>Gets or sets a value which indicates whether the generated thumbnail should be forced to the requested size, even if
            <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> is set to true. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to indicate that the thumbnail image will be generated by creating a "canvas" image with the requested size, and then
            centering the actual image inside that image.  Note this is a slower process.</value>
      <remarks>
            This parameter is ignored if <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> is false.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.BackColor">
      <summary>Gets or sets the background color to use if both <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize" /> and <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> are true. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> to use as the background color to use if both <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.ForceSize" /> and
            <see cref="P:Leadtools.Codecs.CodecsThumbnailOptions.MaintainAspectRatio" /> are true.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.LoadStamp">
      <summary>Gets or sets a value which indicates whether or not to attempt to load stamps from file formats that support preview images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to load the stamp from the file if present, false to ignore the stamp.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsThumbnailOptions.Resample">
      <summary>Gets or sets a value whether or not to use interpolated resize when generating thumbnails. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use interpolated resize, false to use normal resize.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">RasterCodecs.ReadThumbnail</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPhotoInterpolation">
      <summary>Indicates color information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.WhiteIsZero">
      <summary>
            White is Zero.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.BlackIsZero">
      <summary>
            Black is Zero.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.NoColorMap">
      <summary>
            There is no color map (RGB).
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.Cmyk">
      <summary>
            Separated CMYK.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.YcbCr">
      <summary>
            YC b C r color space.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPhotoInterpolation.CieLab">
      <summary>
            1976 CIE L*a*b.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadInformationEventArgs">
      <summary>Provides information for the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            You can use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see> event and the
            <see cref="T:Leadtools.Codecs.CodecsLoadInformationEventArgs" /> class when loading image data in a format that LEADTOOLS does not recognize.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadInformationEventArgs.GetPalette">
      <summary>Gets the palette for uncompressed data that is 8 bits per pixel or less. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.RasterColor" /> object that represents the palette for uncompressed data that is 8 bits per
            pixel or less.</returns>
      <remarks>
            The first 1 &gt;&gt; <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.BitsPerPixel" /> entries in this palette is used.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadInformationEventArgs.SetPalette(Leadtools.RasterColor[])">
      <summary>Sets the palette for uncompressed data that is 8 bits per pixel or less. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="palette">An array of <see cref="T:Leadtools.RasterColor" /> object that represents the palette for uncompressed data that
            is 8 bits per pixel or less.</param>
      <remarks>
            Fill in the first 1 &gt;&gt; <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.BitsPerPixel" /> entries in this palette.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadInformationEventArgs.GetColorMask">
      <summary>Gets an array of integer values that represent RGB color masks. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of 3 integers as follows: ColorMask[0] is the red mask; ColorMask[1] is the green mask;
            ColorMask[2] is the blue mask.</returns>
      <remarks>
        <para>The color mask is valid only if <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format" /> is set to <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>.</para>
        <para>As an example, with 16-bit data arranged as RRR RRGG GGGB BBBB, the masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0x7C00
            ColorMask[1] = 0x0E30
            ColorMask[2] = 0x001F
            </code>
          </pre>
        </para>
        <para>For 32-bit data, the only valid data is RRRR RRRR GGGG GGGG BBBB BBBB. The masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0xFF0000
            ColorMask[1] = 0x00FF00
            ColorMask[2] = 0x0000FF
            </code>
          </pre>
        </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadInformationEventArgs.SetColorMask(Leadtools.RasterColor[])">
      <summary>Sets the array of integer values that represent RGB color masks. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="colorMask">An array of 3 integers as follows: ColorMask[0] is the red mask; ColorMask[1] is the green mask;
            ColorMask[2] is the blue mask.</param>
      <remarks>
        <para>The color mask is valid only if <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format" /> is set to <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>.</para>
        <para>As an example, with 16-bit data arranged as RRR RRGG GGGB BBBB, the masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0x7C00
            ColorMask[1] = 0x0E30
            ColorMask[2] = 0x001F
            </code>
          </pre>
        </para>
        <para>For 32-bit data, the only valid data is RRRR RRRR GGGG GGGG BBBB BBBB. The masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0xFF0000
            ColorMask[1] = 0x00FF00
            ColorMask[2] = 0x0000FF
            </code>
          </pre>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Stream">
      <summary>Gets the stream used by the load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Stream" /> object used by the load process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format">
      <summary>Gets the image file format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The image file format. The following are valid formats:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG31Dim</see>
              </term>
              <description>Fax file with G3 one-dimensional compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG32Dim</see>
              </term>
              <description>Fax file with G3 two-dimensional compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG4</see>
              </term>
              <description>Fax file with G4 compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawRle4</see>
              </term>
              <description>RAW file with RLE compression, 4 bits per pixel</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawRle8</see>
              </term>
              <description>RAW file with RLE compression, 8 bits per pixel</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>
              </term>
              <description>RAW file with bitfield compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawPackBits</see>
              </term>
              <description>RAW file with packed bits compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawCcitt</see>
              </term>
              <description>RAW file with CCITT compression</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Width">
      <summary>Gets or sets the image width in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The image width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Height">
      <summary>Gets or sets the image height in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The image height in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.BitsPerPixel">
      <summary>Gets or sets the bits per pixel of the image data in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The bits per pixel of the image data in the file.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.XResolution">
      <summary>Gets or sets the horizontal resolution for rendering the image, specified in dots per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The horizontal resolution for rendering the image, specified in dots per inch. Setting this property is optional.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.YResolution">
      <summary>Gets or sets the vertical resolution for rendering the image, specified in dots per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The vertical resolution for rendering the image, specified in dots per inch. Setting this property is optional.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Offset">
      <summary>Gets or sets the position of the first byte of image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The position of the first byte of image data. This can be 0 if your file does not have a header.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.StripSize">
      <summary>Gets or sets the size of the data strip before it is decompressed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size of the data strip before it is decompressed.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.PhotoInterpolation">
      <summary>Gets or sets the photometric interpolation for the load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The photometric interpolation for the load process. Possible values are:</para>
        <para>When <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format" /> is one of the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawCcitt</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG31Dim</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG32Dim</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG4</see>
              </description>
            </item>
          </list>
        </para>
        <para>The value of <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.PhotoInterpolation" /> is as follows:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.WhiteIsZero</see>
              </term>
              <description>White is zero</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.BlackIsZero</see>
              </term>
              <description>Black is zero</description>
            </item>
          </list>
        </para>
        <para>When <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format" /> is <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawPackBits</see>, the value of
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.PhotoInterpolation" /> is as follows:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.NoColorMap</see>
              </term>
              <description>There is no color map (RGB)</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.Cmyk</see>
              </term>
              <description>Separated CMYK</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.YcbCr</see>
              </term>
              <description>YC b C r color space</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPhotoInterpolation">CodecsPhotoInterpolation.CieLab</see>
              </term>
              <description>1976 CIE L*a*b</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.PlanarConfiguration">
      <summary>Gets or sets the planar configuration. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The planar configuration. This value is used only if <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format" /> is
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawPackBits</see>. Otherwise, it is ignored. Possible values are</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPlanarConfiguration">CodecsPlanarConfiguration.Chunky</see>
              </term>
              <description>Chunky</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPlanarConfiguration">CodecsPlanarConfiguration.PlanarFormat</see>
              </term>
              <description>Planar format</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Order">
      <summary>Gets or sets the byte order for the load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The byte order for the load process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.ViewPerspective">
      <summary>Gets or sets the view perspective for the load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The view perspective for the load process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.WhiteOnBlack">
      <summary>Gets or sets a value that determines if the image is black-on-white or white on black. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is white-on-black, false if the image is black on white.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.LeastSignificantBitFirst">
      <summary>Gets or sets a value specifying whether the image data was saved with least significant bit first or last. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image data was saved LSB, false if the image data was saved MSB.</value>
      <remarks>
            This property is used when loading raw data and some formats that support motorola byte order.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Reverse">
      <summary>Gets or sets a value that determines whether each line is reversed (mirrored). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if each line is reversed (mirrored), otherwise false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Pad4">
      <summary>Gets or sets a value indicating whether the image data was saved padded to 4-byte boundary. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the data was padded to 4-byte boundary, false otherwise.</value>
      <remarks>
            This property is used when loading raw data.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.MotorolaOrder">
      <summary>Gets or sets a value that determines whether or not image data is in Motorola byte order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if image data is in Motorola byte order, false if in Intel byte order.</value>
      <remarks>
            Valid only for 16, 48 and 64-bit image data.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation">RasterCodecs.LoadInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Signed">
      <summary>Gets or sets a value that determines whether or not the image data is signed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if image data is signed, false if it is not.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Codecs.CodecsImageInfo">
      <summary>Provides functionality for getting information about image files supported by
            LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <strong>Note:</strong> For information about loading PDF files, refer to
                <see cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plugin Features</see>.
            </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsPdfLoadOptions">CodecsPdfLoadOptions</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsPdfOptions">CodecsPdfOptions</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsPdfSaveOptions">CodecsPdfSaveOptions</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsImageInfoExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' try a GIF
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("BitsPerPixel: {0}", info.BitsPerPixel))
         Console.WriteLine(String.Format("BytesPerLine: {0}", info.BytesPerLine))
         Console.WriteLine(String.Format("ColorSpace: {0}", info.ColorSpace.ToString()))
         Console.WriteLine(String.Format("Compresion: {0}", info.Compression))
         Console.WriteLine(String.Format("Fax: {0}", info.Fax))
         Console.WriteLine(String.Format("Format: {0}", info.Format))
         If info.Gif.HasAnimationBackground Then
            Console.WriteLine(String.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()))
         End If
         Console.WriteLine(String.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight))
         Console.WriteLine(String.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth))
         If info.Gif.HasAnimationLoop Then
            Console.WriteLine(String.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()))
         End If
         If info.Gif.HasAnimationPalette Then
            Dim pal As RasterColor() = info.Gif.GetAnimationPalette()
            Console.WriteLine("GifAnimationPalette:" &amp; Constants.vbLf)
            Dim x As Integer = 0
            Do While x &lt; pal.Length
               Console.Write("{0},", pal(x))
               x += 1
            Loop
            Console.WriteLine(Constants.vbLf)
         End If
         Console.WriteLine(String.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()))
         Console.WriteLine(String.Format("PageNumber: {0}", info.PageNumber))
         Console.WriteLine(String.Format("TotalPages: {0}", info.TotalPages))

         ' try a FAX TIFF
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("Width: {0}", info.Width))
         Console.WriteLine(String.Format("Height: {0}", info.Height))
         Console.WriteLine(String.Format("IsLink: {0}", info.IsLink.ToString()))
         Console.WriteLine(String.Format("IsRotated: {0}", info.IsRotated.ToString()))
         Console.WriteLine(String.Format("Fax.IsCompressed: {0}", info.Fax.IsCompressed.ToString()))
         If info.HasResolution Then
            Console.WriteLine(String.Format("X Resolution: {0}", info.XResolution))
            Console.WriteLine(String.Format("Y Resolution: {0}", info.YResolution))
         End If
         Console.WriteLine(String.Format("Tiff.HasNoPalette: {0}", info.Tiff.HasNoPalette.ToString()))
         Console.WriteLine(String.Format("Tiff.ImageFileDirectoryOffset: {0}", info.Tiff.ImageFileDirectoryOffset.ToString()))
         Console.WriteLine(String.Format("Tiff.IsImageFileDirectoryOffsetValid: {0}", info.Tiff.IsImageFileDirectoryOffsetValid.ToString()))

         ' try a PNG
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "compression.png")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("HasAlpha: {0}", info.HasAlpha.ToString()))

         ' try a DICOM
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.dcm")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("IsSigned: {0}", info.IsSigned.ToString()))

         ' try a JPEG
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "cannon.jpg")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("Name: {0}", info.Name))
         Console.WriteLine(String.Format("Jpeg.HasStamp: {0}", info.Jpeg.HasStamp.ToString()))
         Console.WriteLine(String.Format("Jpeg.IsLossless: {0}", info.Jpeg.IsLossless.ToString()))
         Console.WriteLine(String.Format("Jpeg.IsProgressive: {0}", info.Jpeg.IsProgressive.ToString()))
         Console.WriteLine(String.Format("Order: {0}", info.Order.ToString()))
         Console.WriteLine(String.Format("SizeDisk: {0}", info.SizeDisk))
         Console.WriteLine(String.Format("SizeMemory: {0}", info.SizeMemory))

         ' try a PSD
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.psd")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("Psd.Layers: {0}", info.Psd.Layers))

         ' try a BMP
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ulay1.bmp")
         info = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("ViewPerspective: {0}", info.ViewPerspective))

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsImageInfoExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // try a GIF
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("BitsPerPixel: {0}", info.BitsPerPixel));
         Console.WriteLine(string.Format("BytesPerLine: {0}", info.BytesPerLine));
         Console.WriteLine(string.Format("ColorSpace: {0}", info.ColorSpace.ToString()));
         Console.WriteLine(string.Format("Compresion: {0}", info.Compression));
         Console.WriteLine(string.Format("Fax: {0}", info.Fax));
         Console.WriteLine(string.Format("Format: {0}", info.Format));
         if(info.Gif.HasAnimationBackground)
            Console.WriteLine(string.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()));
         Console.WriteLine(string.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight));
         Console.WriteLine(string.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth));
         if(info.Gif.HasAnimationLoop)
            Console.WriteLine(string.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()));
         if (info.Gif.HasAnimationPalette)
         {
            RasterColor[] pal = info.Gif.GetAnimationPalette();
            Console.WriteLine("GifAnimationPalette:\n");
            for(int x=0; x&lt;pal.Length; x++)
            {
               Console.Write("{0},",pal[x]);
            }
            Console.WriteLine("\n");
         }
         Console.WriteLine(string.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()));
         Console.WriteLine(string.Format("PageNumber: {0}", info.PageNumber));
         Console.WriteLine(string.Format("TotalPages: {0}", info.TotalPages));

         // try a FAX TIFF
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"OCR1.TIF");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("Width: {0}", info.Width));
         Console.WriteLine(string.Format("Height: {0}", info.Height));
         Console.WriteLine(string.Format("IsLink: {0}", info.IsLink.ToString()));
         Console.WriteLine(string.Format("IsRotated: {0}", info.IsRotated.ToString()));
         Console.WriteLine(string.Format("Fax.IsCompressed: {0}", info.Fax.IsCompressed.ToString()));
         if(info.HasResolution)
         {
            Console.WriteLine(string.Format("X Resolution: {0}", info.XResolution));
            Console.WriteLine(string.Format("Y Resolution: {0}", info.YResolution));
         }
         Console.WriteLine(string.Format("Tiff.HasNoPalette: {0}", info.Tiff.HasNoPalette.ToString()));
         Console.WriteLine(string.Format("Tiff.ImageFileDirectoryOffset: {0}", info.Tiff.ImageFileDirectoryOffset.ToString()));
         Console.WriteLine(string.Format("Tiff.IsImageFileDirectoryOffsetValid: {0}", info.Tiff.IsImageFileDirectoryOffsetValid.ToString()));

         // try a PNG
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "compression.png");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("HasAlpha: {0}", info.HasAlpha.ToString()));

         // try a DICOM
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.dcm");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("IsSigned: {0}", info.IsSigned.ToString()));

         // try a JPEG
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "cannon.jpg");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("Name: {0}", info.Name));
         Console.WriteLine(string.Format("Jpeg.HasStamp: {0}", info.Jpeg.HasStamp.ToString()));
         Console.WriteLine(string.Format("Jpeg.IsLossless: {0}", info.Jpeg.IsLossless.ToString()));
         Console.WriteLine(string.Format("Jpeg.IsProgressive: {0}", info.Jpeg.IsProgressive.ToString()));
         Console.WriteLine(string.Format("Order: {0}", info.Order.ToString()));
         Console.WriteLine(string.Format("SizeDisk: {0}", info.SizeDisk));
         Console.WriteLine(string.Format("SizeMemory: {0}", info.SizeMemory));

         // try a PSD
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.psd");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("Psd.Layers: {0}", info.Psd.Layers));

         // try a BMP
         srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ulay1.bmp");
         info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("ViewPerspective: {0}", info.ViewPerspective));

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.Codecs.CodecsImageInfo" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.Codecs.CodecsImageInfo" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.Clone">
      <summary>Creates an exact copy of the current page of this <see cref="T:Leadtools.Codecs.CodecsImageInfo" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.GetPalette">
      <summary>Gets the images's palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An array of <see cref="T:Leadtools.RasterColor" /> structure that represents the image's palette.</value>
      <remarks>The palette is only used when loading RAW files.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
      <returns>
      </returns>
    </member>
    <member name="M:Leadtools.Codecs.CodecsImageInfo.ToString">
      <summary>Returns a string containing the image information in a human readable format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A string containing the image information.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Format">
      <summary>Gets the image file format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The image file format.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Name">
      <summary>Gets the file name. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The file name.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Width">
      <summary>Gets the width of the image in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width of the image in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Height">
      <summary>Gets the height of the image in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height of the image in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.BitsPerPixel">
      <summary>Gets the bits per pixel of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The bits per pixel of the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.BytesPerLine">
      <summary>Gets the number of bytes per scanline for the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>the number of bytes per scanline for the image data..</value>
      <remarks>
            The BytesPerLine is rounded upward to the nearest multiple of four.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.SizeDisk">
      <summary>Gets the size of the image file on disk. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size of the image file on disk.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.SizeMemory">
      <summary>Gets the size of the image when loaded uncompressed in memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size of the image when loaded uncompressed in memory.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Compression">
      <summary>Gets the compression of the image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> containing the compression of the image file.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.ViewPerspective">
      <summary>Gets the view perspective of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The view perspective of the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Order">
      <summary>Gets the byte order of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The byte order of the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.ColorSpace">
      <summary>Gets the color space of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The color space of the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.PageNumber">
      <summary>Gets the page number of the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The page number of the file.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.TotalPages">
      <summary>Gets the total number of pages in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The total number of pages in the file.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.HasResolution">
      <summary>Determines whether or not the file has resolution values (DPI) stored inside. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image file has resolution values stored inside, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.XResolution">
      <summary>Gets the horizontal resolution (DPI) of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The horizontal resolution (DPI) of the image.</value>
      <remarks>
            The <see cref="P:Leadtools.Codecs.CodecsImageInfo.XResolution" /> is valid only when the value of <see cref="P:Leadtools.Codecs.CodecsImageInfo.HasResolution" /> is true.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.YResolution">
      <summary>Gets the vertical resolution (DPI) of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The vertical resolution (DPI) of the image.</value>
      <remarks>
            The <see cref="P:Leadtools.Codecs.CodecsImageInfo.YResolution" /> is valid only when the value of <see cref="P:Leadtools.Codecs.CodecsImageInfo.HasResolution" /> is true.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.IsRotated">
      <summary>Determines whether or not the image has a rotated view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has a rotated view perspective, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.IsSigned">
      <summary>Determines whether or not the image data is signed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image data contains signed (negative) values, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.HasAlpha">
      <summary>Determines whether or not the image contains alpha channel information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image contains alpha channel information, false otherwise.</value>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.IsLink">
      <summary>Determines whether or not the file is an image file or a link to an image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the file is a link to an image file, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Gif">
      <summary>Gets extra information about the image if the file format is GIF. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsGifImageInfo" /> object that contains extra information about the image if the file format is GIF.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Fax">
      <summary>Gets extra information about the image if the file format is FAX. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsFaxImageInfo" /> object that contains extra information about the image if the file format is FAX.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Jpeg">
      <summary>Gets extra information about the image if the file format is JPEG or LEAD CMP. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsJpegImageInfo" /> object that contains extra information about the image if the file format is JPEG or LEAD CMP.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Tiff">
      <summary>Gets extra information about the image if the file format is TIFF. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsTiffImageInfo" /> object that contains extra information about the image if the file format is TIFF.</value>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Psd">
      <summary>Gets extra information about the image if the file format is PSD. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsPsdImageInfo" /> object that contains extra information about the image if the file format is PSD.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.Document">
      <summary>Gets extra information about the image if the file is a document format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> object containing the document format information such as its logical size.</value>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Documents formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" /> class contains properties that specify the original document logical size on disk.
            This can be useful when calculating the rasterization parameters based on your application viewing needs.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">
      <summary>Gets a value that determines whether this <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object is still loading. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is still loading, false otherwise.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJbig2LoadOptions">
      <summary>Provides options specifically for loading JBIG2 images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2LoadOptions.LoadOldFiles">
      <summary>Gets or sets a value that indicates whether to load old JBIG2 files <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to load old JBIG2 files, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>Older versions of LEADTOOLS had a problem when some JBIG2 files were saved incorrectly. As of version 17, LEADTOOLS saves these files correctly. If you have files
            saved with an older version of LEADTOOLS and you are encountering an error when loading these files, you can set the value of <see cref="P:Leadtools.Codecs.CodecsJbig2LoadOptions.LoadOldFiles" /> to
            <strong>true</strong> and try again.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Codecs.CodecsJbig2SaveOptions">
      <summary>Provides options specifically for saving JBIG2 images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageTypicalPredictionOn">
      <summary>Gets or sets a value that indicates whether to use typical prediction (TP) while encoding non-text area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to use typical prediction (TP) while encoding non-text area; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageTemplateType">
      <summary>{NR} Gets or sets a value that specifies which template-based arithmetic encoder to use when encoding a non-text area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that specifies which template-based arithmetic encoder to use when encoding a non-text area.
            Currently, LEADTOOLS supports the following templates:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>0</term><description><para>Three lines with a 16-pixel template.</para><para><img src="JBIG2Template0.gif" /></para></description></item><item><term>1</term><description><para>Three lines with a 13-pixel template.</para><para><img src="JBIG2Template1.gif" /></para></description></item><item><term>2</term><description><para>Three lines with a 10-pixel template.</para><para><img src="JBIG2Template2.gif" /></para></description></item><item><term>3</term><description><para>Two lines with a 10-pixel template.</para><para><img src="Jbig2Template3.gif" /></para></description></item></list></value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageQualityFactor">
      <summary>Gets or sets the degree of loss in the compression process for non-text areas. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that determines the degree of loss in the compression process for non-text areas.
            The value of 0 means lossless while any other value means lossy. The default value is 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatX1">
      <summary>Gets or sets the X location of the adaptive template pixel A1 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A1 for non-text area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY1" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY1">
      <summary>Gets or sets the Y location of the adaptive template pixel A1 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A1 for non-text area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatX2">
      <summary>Gets or sets the X location of the adaptive template pixel A2 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A2 for non-text area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY2" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY2">
      <summary>Gets or sets the Y location of the adaptive template pixel A2 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A2 for non-text area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatX3">
      <summary>Gets or sets the X location of the adaptive template pixel A3 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A3 for non-text area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY3" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY3">
      <summary>Gets or sets the Y location of the adaptive template pixel A3 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A3 for non-text area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatX4">
      <summary>Gets or sets the X location of the adaptive template pixel A4 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A4 for non-text area encoding..
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY4" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.ImageGbatY4">
      <summary>Gets or sets the Y location of the adaptive template pixel A4 for non-text area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A4 for non-text area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextTemplateType">
      <summary>Gets or sets a value that specifies which template-based arithmetic encoder to use when encoding a text area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that specifies which template-based arithmetic encoder to use when encoding a text area.
            Currently, LEADTOOLS supports the following templates:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>0</term><description><para>Three lines with a 16-pixel template.</para><para><img src="Jbig2Template0.gif" /></para></description></item><item><term>1</term><description><para>Three lines with a 13-pixel template.</para><para><img src="Jbig2Template1.gif" /></para></description></item><item><term>2</term><description><para>Three lines with a 10-pixel template.</para><para><img src="Jbig2Template2.gif" /></para></description></item><item><term>3</term><description><para>Two lines with a 10-pixel template.</para><para><img src="Jbig2Template3.gif" /></para></description></item></list></value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatX1">
      <summary>Gets or sets the X location of the adaptive template pixel A1 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A1 for text-area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY1" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY1">
      <summary>Gets or sets the Y location of the adaptive template pixel A1 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A1 for text-area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatX2">
      <summary>Gets or sets the X location of the adaptive template pixel A2 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A2 for text-area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY2" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY2">
      <summary>Gets or sets the Y location of the adaptive template pixel A2 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A2 for text-area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatX3">
      <summary>Gets or sets the X location of the adaptive template pixel A3 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A3 for text-area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY3" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY3">
      <summary>Gets or sets the Y location of the adaptive template pixel A3 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A3 for text-area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatX4">
      <summary>Gets or sets the X location of the adaptive template pixel A4 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the X location of the adaptive template pixel A4 for text-area encoding.
            Possible values range from -128 to 127 except when <see cref="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY4" /> is zero, in which case they range from –128 to -1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextGbatY4">
      <summary>Gets or sets the Y location of the adaptive template pixel A4 for text-area encoding. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer that represents the Y location of the adaptive template pixel A4 for text-area encoding.
            Possible values range from -128 to 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMinimumSymbolArea">
      <summary>Gets or sets a value indicating the minimum text symbol area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the minimum text symbol area, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMinimumSymbolWidth">
      <summary>Gets or sets a value indicating the minimum text symbol width. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the minimum text symbol width, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMinimumSymbolHeight">
      <summary>Gets or sets a value indicating the minimum text symbol height. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the minimum text symbol height, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMaximumSymbolArea">
      <summary>Gets or sets a value indicating the maximum text symbol area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the maximum text symbol area, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMaximumSymbolWidth">
      <summary>Gets or sets a value indicating the maximum text symbol width. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the maximum text symbol width, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextMaximumSymbolHeight">
      <summary>Gets or sets a value indicating the maximum text symbol height. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the maximum text symbol height, in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextDifferentialThreshold">
      <summary>Gets or sets a value indicating the maximum difference allowed to map a text symbol to a dictionary symbol. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that indicates the maximum allowable difference to map a text symbol to a dictionary symbol, in percent.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextQualityFactor">
      <summary>Gets or sets the degree of loss in the compression process for a text area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that determines the degree of the loss in the compression process for a text area.
            The value of 0 means lossless while any other value means lossy. The default value is 0.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextRemoveUnrepeatedSymbol">
      <summary>Gets or sets a value indicating whether to remove unrepeated symbols from the dictionary. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to remove unrepeated symbols from the dictionary; otherwise, false.
            </value>
      <remarks>
            Set this value to true to have those symbols in the dictionary which do not have any match in the image removed from the text dictionary to be encoded as non-text, resulting in a smaller file size.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.TextKeepAllSymbols">
      <summary>Gets or sets a value indicating whether to keep all dictionary symbols. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to keep all dictionary symbols; otherwise, false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.XResolution">
      <summary>Gets or sets the reference image X resolution which JBIG2 options were set according to it. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that represents the image X resolution to be used when setting JBIG2 options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.YResolution">
      <summary>Gets or sets the reference image Y resolution which JBIG2 options were set according to it. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value that represents the image Y resolution to be used when setting JBIG2 options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.RemoveMarker">
      <summary>Gets or sets a value that indicates whether to remove the two bytes marker from generic region segment data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to remove the two bytes marker from generic region segment data; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.RemoveHeaderSegment">
      <summary>Gets or sets a value that indicates whether to remove the JBIG2 header segment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to remove the JBIG2 header segment; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.RemoveEopSegment">
      <summary>Gets or sets a value that indicates whether to remove the End of Page segment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to remove the End of Page segment; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.RemoveEofSegment">
      <summary>Gets or sets a value that indicates whether to remove the End of File segment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to remove the End of File segment; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2SaveOptions.EnableDictionary">
      <summary>Gets or sets a value that indicates whether to enable the encoder to use the text symbol dictionary. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to to enable the encoder to use the text symbol dictionary; otherwise, false.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJbig2Options">
      <summary>Provides extra options for loading and saving JBIG2 images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsJbig2OptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.fpx")
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Save as JBIG2 with Template #3
         codecs.Options.Jbig2.Save.RemoveMarker = True
         codecs.Options.Jbig2.Save.RemoveHeaderSegment = True
         codecs.Options.Jbig2.Save.RemoveEopSegment = True
         codecs.Options.Jbig2.Save.RemoveEofSegment = True
         codecs.Options.Jbig2.Save.ImageTypicalPredictionOn = True
         codecs.Options.Jbig2.Save.ImageTemplateType = 3

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "jbig2.jb2"), RasterImageFormat.Jbig2, 1)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsJbig2OptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.fpx");
         RasterImage srcImage = codecs.Load(srcFileName);

         // Save as JBIG2 with Template #3
         codecs.Options.Jbig2.Save.RemoveMarker = true;
         codecs.Options.Jbig2.Save.RemoveHeaderSegment = true;
         codecs.Options.Jbig2.Save.RemoveEopSegment = true;
         codecs.Options.Jbig2.Save.RemoveEofSegment = true;
         codecs.Options.Jbig2.Save.ImageTypicalPredictionOn = true;
         codecs.Options.Jbig2.Save.ImageTemplateType = 3;

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "jbig2.jb2"), RasterImageFormat.Jbig2, 1);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsJbig2OptionsExample(Stream inStream, Stream outStreamJbig2)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage srcImage = codecs.Load(inStream);

         // Save as JBIG2 with Template #3
         codecs.Options.Jbig2.Save.RemoveMarker = true;
         codecs.Options.Jbig2.Save.RemoveHeaderSegment = true;
         codecs.Options.Jbig2.Save.RemoveEopSegment = true;
         codecs.Options.Jbig2.Save.RemoveEofSegment = true;
         codecs.Options.Jbig2.Save.ImageTypicalPredictionOn = true;
         codecs.Options.Jbig2.Save.ImageTemplateType = 3;

         codecs.Save(srcImage, outStreamJbig2, RasterImageFormat.Jbig2, 1);

         // Clean up
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsJbig2OptionsExample(ByVal inStream As Stream, ByVal outStreamJbig2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim srcImage As RasterImage = codecs.Load(inStream)

         ' Save as JBIG2 with Template #3
         codecs.Options.Jbig2.Save.RemoveMarker = True
         codecs.Options.Jbig2.Save.RemoveHeaderSegment = True
         codecs.Options.Jbig2.Save.RemoveEopSegment = True
         codecs.Options.Jbig2.Save.RemoveEofSegment = True
         codecs.Options.Jbig2.Save.ImageTypicalPredictionOn = True
         codecs.Options.Jbig2.Save.ImageTemplateType = 3

         codecs.Save(srcImage, outStreamJbig2, RasterImageFormat.Jbig2, 1)

         ' Clean up
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2Options.Load">
      <summary>Gets the options for loading JBIG2 images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsJbig2LoadOptions" /> class that contains the options to be used when loading JBIG2 images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbig2Options.Save">
      <summary>Gets the options for saving JBIG2 images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsJbig2SaveOptions" /> class that contains the options to be used when saving JBIG2 images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsDocLoadOptions">
      <summary>Provides the options for loading Microsoft Word 2003 (DOC) documents as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>DOC|Word</keywords>
      <remarks>
        <para>Microsoft Word 2003 (DOC) files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>For more information, refer to 
            <see cref="T:L.Topics.FileFormatsDOC">File Formats - DOC Format</see>.</para>
        <para>Important note: The DOC file format only supports the following rasterization size modes:
            <list type="bullet"><item><description><see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see></description></item><item><description><see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Fit</see></description></item></list></para>
        <para>All other size modes will be treated as <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Fit</see></para>
        <para>DOC also does not support loading a document using different horizontal or vertical resolution. So if the value of
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution">CodecsRasterizeDocumentLoadOptions.XResolution</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution">CodecsRasterizeDocumentLoadOptions.YResolution</see> are different,
            the DOC codecs will use the larger of the two values as the resolution to use when rasterizing.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load the given Word 2003 file and render it as a raster image</para>
        </para>
        <code lang="VB">      Public Sub CodecsDocLoadOptionsExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.doc")

         ' Enable using the RasterizeDocumentOptions
         Dim rasterizeDocumentLoadOptions As CodecsRasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load
         ' Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit
         rasterizeDocumentLoadOptions.PageWidth = 8.5
         rasterizeDocumentLoadOptions.PageHeight = 11
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch
         rasterizeDocumentLoadOptions.XResolution = 300
         rasterizeDocumentLoadOptions.YResolution = 300

         ' Load each page at 1-bits/pixel
         codecs.Options.Doc.Load.BitsPerPixel = 1

         ' Load the source file
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Show the image information
            Console.WriteLine("Image has {0} pages", image.PageCount)
            Console.WriteLine("Image size: {0} by {1} pixels at {2} by {3} DPI", _
               image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsDocLoadOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.doc");

         // Enable using the RasterizeDocumentOptions
         CodecsRasterizeDocumentLoadOptions rasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load;
         // Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit;
         rasterizeDocumentLoadOptions.PageWidth = 8.5;
         rasterizeDocumentLoadOptions.PageHeight = 11;
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch;
         rasterizeDocumentLoadOptions.XResolution = 300;
         rasterizeDocumentLoadOptions.YResolution = 300;

         // Load each page at 1-bits/pixel
         codecs.Options.Doc.Load.BitsPerPixel = 1;

         // Load the source file
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Show the image information
            Console.WriteLine("Image has {0} pages", image.PageCount);
            Console.WriteLine("Image size: {0} by {1} pixels at {2} by {3} DPI",
               image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocLoadOptions.BitsPerPixel">
      <summary>Gets or sets the final bits per pixel of the loaded <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>One of the supported LEADTOOLS bits per pixel values.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsDocOptions">
      <summary>Provides extra options for loading and saving Microsoft Word 2003 (DOC) files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsDocOptions.Load">
      <summary>Gets the options for loading Microsoft Word 2003 (DOC) files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The options to use when loading Microsoft Word 2003 (DOC) files.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsDocLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.RasterImageTypeConverter">
      <summary>
        <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> is a class that can be used to convert <see cref="T:Leadtools.RasterImage" /> objects from other data types. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This class derives from the standard .NET <see cref="T:System.ComponentModel.TypeConverter" /> class to provides functionality for converting
            <see cref="T:Leadtools.RasterImage" /> objects from other data types.</para>
        <para>The following data types are supported:
            <list type="bullet"><item><description><see cref="T:System.Uri" /> containing the URL to the image file with optional parameters.</description></item><item><description><see cref="T:System.String" /> containing the path to the image file with optional parameters.</description></item><item><description><see cref="T:System.IO.Stream" /> containing the data of the image file.</description></item><item><description>An array of <see cref="T:System.Byte" /> containing the data of the image file.</description></item></list></para>
        <para>The <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> method will return <strong>true</strong> if any of the supported object types is passed into
            the <i>sourceType</i> parameter. However, this does not mean that the conversion operation will succeed, this depends on whether the data contains
            a valid image that LEADTOOLS can load.</para>
        <para>The <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> method will try to convert the object passed into the <i>value</i> parameter to a valid <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>For <see cref="T:System.Uri" /> and <see cref="T:System.String" /> source objects, LEADTOOLS supports optional extra parameters passed as standard HTML query string to fine tune the loading of
            <see cref="T:Leadtools.RasterImage" /> objects. The following table lists these parameters:</para>
        <list type="table">
          <listheader>
            <term>Parameter</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>LeadBitsPerPixel</term>
            <description>
              <para>Resulting image pixel depth.  This should be a string representation of an integer. Valid values are:</para>
              <para>
                <list type="table">
                  <listheader>
                    <term>value</term>
                    <description>meaning</description>
                  </listheader>
                  <item>
                    <term>0</term>
                    <description>Keep the original file's pixel depth (Do not convert).</description>
                  </item>
                  <item>
                    <term>1 to 8</term>
                    <description>The specified bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>12</term>
                    <description>12 bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>16</term>
                    <description>16 bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>24</term>
                    <description>24 bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>32</term>
                    <description>32 bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>48</term>
                    <description>48 bits per pixel in the resulting image.</description>
                  </item>
                  <item>
                    <term>64</term>
                    <description>64 bits per pixel in the resulting image.</description>
                  </item>
                </list>
              </para>
            </description>
          </item>
          <item>
            <term>LeadOrder</term>
            <description>
              <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. This must be one of the following string values:</para>
              <para>
                <list type="table">
                  <listheader>
                    <term>Value</term>
                    <description>Meaning</description>
                  </listheader>
                  <item>
                    <term>Rgb</term>
                    <description>Red, green, and blue color order in memory</description>
                  </item>
                  <item>
                    <term>Bgr</term>
                    <description>Blue, green, and red color order in memory</description>
                  </item>
                  <item>
                    <term>Gray</term>
                    <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
                  </item>
                  <item>
                    <term>RgbOrGray</term>
                    <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
                  </item>
                  <item>
                    <term>BgrOrGray</term>
                    <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
                  </item>
                  <item>
                    <term>Romm</term>
                    <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
                  </item>
                  <item>
                    <term>BgrOrGrayOrRomm</term>
                    <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
                  </item>
                </list>
              </para>
            </description>
          </item>
          <item>
            <term>LeadFirstPage</term>
            <description>
              <para>A string that contains an integer representation of the 1-based index of the first page to load.</para>
            </description>
          </item>
          <item>
            <term>LeadLastPage</term>
            <description>
              <para>A string that contains an integer representation of the 1-based index of last page to load. Must be greater than or equal to "LeadFirstPage" if specified.</para>
            </description>
          </item>
          <item>
            <term>LeadUseWriteableBitmap</term>
            <description>
              <para>
                <strong>For Silverlight only:</strong> a string that contains a boolean representation of a value that will be used to set <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</see>. If this
            is omitted, <strong>false</strong> will be used. If you add this parameter with a <strong>true</strong> value, then the result <see cref="T:Leadtools.RasterImage" /> will be loaded with a
            "WriteableBitmap" as the backend data. Refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</see> for more information.</para>
            </description>
          </item>
          <item>
            <term>LeadUseNativeLoad</term>
            <description>
              <para>
                <strong>For Silverlight only:</strong> a string that contains a boolean representation of a value that will be used to set <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseNativeLoad">CodecsLoadOptions.UseNativeLoad</see>. If this
            is omitted, <strong>false</strong> will be used. If you add this parameter with a <strong>true</strong> value, then the result <see cref="T:Leadtools.RasterImage" /> will be loaded with the native
            filter codecs instead of LEADTOOLS. Refer to <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseNativeLoad">CodecsLoadOptions.UseNativeLoad</see> for more information.</para>
            </description>
          </item>
        </list>
        <para>All these parameters are optional and should be passed as a standard HTML query string. The order is not important. Here are a few examples of valid strings:</para>
        <para>
          <code>
            // Load all the pages in the TIF file hosted at an HTTP URL
            http://tempuri.org/MyImage.tif
            // Load the first page only of the multi-page TIF file hosted at an HTTP URL
            http://tempuri.org/MyImage.tif?LeadFirstPage=1&amp;LeadLastPage=1
            // Load the second and third page of the multi-page TIF file hosted at an HTTP URL as 24 bits/pixel with RGB color order
            http://tempuri.org/MyImage.tif?LeadBitsPerPixel=24&amp;LeadOrder=Rgb&amp;LeadFirstPage=2&amp;LeadLastPage=3
            // Load all the pages in the TIF file hosted at an FTP site
            ftp://tempuri.org/MyImage.tif
            // Load all the pages in the TIF file in a disk file
            C:\Dir\MyImage.tif
            file:://C:/Dir/MyImage.tif
            file:://myserver/MyImage.tif
            // Load the second and third page of the multi-page TIF file in a disk file as 24 bits/pixel with RGB color order
            C:\Dir\MyImage\MyImage.tif?LeadBitsPerPixel=24&amp;LeadOrder=Rgb&amp;LeadFirstPage=2&amp;LeadLastPage=3
            </code>
        </para>
            The <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> is also used when loading a resource image from XAML as a <see cref="T:Leadtools.RasterImage" />. Here are a few example:
            <para><code>
            // Load all the pages in the TIF file set as resource
            "MyImage.tif"
            // Load the first page only of the multi-page TIF file set as a resource
            "MyImage.tif?LeadFirstPage=1&amp;LeadLastPage=1"
            // Load the second and third page of the multi-page TIF file set as a resouce as 24 bits/pixel with RGB color order
            "MyImage.tif?LeadBitsPerPixel=24&amp;LeadOrder=Rgb&amp;LeadFirstPage=2&amp;LeadLastPage=3"
            // Load the second and third page of the multi-page TIF file set as a resource as 24 bits/pixel with RGB color order
            "MyImage.tif?LeadBitsPerPixel=24&amp;LeadOrder=Rgb&amp;LeadFirstPage=2&amp;LeadLastPage=3"
            // Silverlight only: Load the image and set it as a WriteableBitmap in a RasterImage
            "MyImage.tif?LeadUseWriteableBitmap=True"
            // Silverlight only: Load the PNG image using Silverlight and set it as a WriteableBitmap in a RasterImage
            "MyImage.tif?LeadUseWriteableBitmap=True&amp;LeadUseNativeLoad=True"
            </code></para><para>Query string are not supported for <see cref="T:System.String" /> and an array of <see cref="T:System.Byte" /> data types.</para><para>The LEADTOOLS WPF and Silverlight controls use the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> to load a <see cref="T:Leadtools.RasterImage" /> from a XAML file.</para><para>The image returned from the <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> method will have its <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property set to
            true since this method will load the image asynchronously. To get notified when the image has finished loading, create the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> with
            your own <see cref="T:Leadtools.Codecs.RasterCodecs" /> instance and subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event
            before calling <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> as show in the example below.</para></remarks>
      <example>
        <para>
          <para>This example will use the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> to load a image from a URL.</para>
        </para>
        <code lang="VB">      Public Sub RasterImageTypeConverterExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")

         ' Construct the source URL to use the source file and load the image
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' Create a new instance of the RasterImageTypeConverter class
         Dim rasterImageConverter As New RasterImageTypeConverter(codecs)

         ' We should be able to convert from a URL
         Debug.Assert(rasterImageConverter.CanConvertFrom(uri.GetType()))

         ' Convert the image

         ' The return value from RasterImageTypeConverter.ConvertFrom might be an image that is
         ' still loading. So, we must subscribe to the RasterCodecs.LoadAsyncCompleteted
         ' event to obtain the finished image
         AddHandler codecs.LoadAsyncCompleted, AddressOf rasterImageTypeConverterExample_LoadAsyncCompleted
         Dim rasterImageObject As Object = rasterImageConverter.ConvertFrom(uri)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub rasterImageTypeConverterExample_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         ' Check if the user canceled or if we have errors
         If e.Cancelled Then
            Console.WriteLine("Canceled by the user")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image

            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.Uri, image.Width, image.Height)

            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf rasterImageTypeConverterExample_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageTypeConverterExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");

         // Construct the source URL to use the source file and load the image
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // Create a new instance of the RasterImageTypeConverter class
         RasterImageTypeConverter rasterImageConverter = new RasterImageTypeConverter(codecs);

         // We should be able to convert from a URL
         Debug.Assert(rasterImageConverter.CanConvertFrom(uri.GetType()));

         // Convert the image

         // The return value from RasterImageTypeConverter.ConvertFrom might be an image that is
         // still loading. So, we must subscribe to the RasterCodecs.LoadAsyncCompleteted
         // event to obtain the finished image
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(rasterImageTypeConverterExample_LoadAsyncCompleted);
         object rasterImageObject = rasterImageConverter.ConvertFrom(uri);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void rasterImageTypeConverterExample_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         // Check if the user canceled or if we have errors
         if(e.Cancelled)
         {
            Console.WriteLine("Canceled by the user");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;

            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.Uri, image.Width, image.Height);

            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(rasterImageTypeConverterExample_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterImageTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This constructor should not be used by code outside of LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterImageTypeConverter.#ctor(Leadtools.Codecs.RasterCodecs)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> class with a given <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="codecs">The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. </param>
      <remarks>
        <para>The image returned from the <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> method will have its <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property set to
            true since this method will load the image asynchronously. To get notified when the image has finished loading, create the <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" /> with
            your own <see cref="T:Leadtools.Codecs.RasterCodecs" /> instance and subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event
            before calling <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> as show in the example of <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterImageTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether the converter can convert an object of the given type to an instance of <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">Type context information used to evaluate conversion.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
      <returns>
        <strong>true</strong> if the converter can convert the provided type to an instance of <see cref="T:Leadtools.RasterImage" />; otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> method will return <strong>true</strong> if any of the supported object types is passed into
            the <paramref name="sourceType" /> parameter. However, this does not mean that the conversion operation will succeed, this depends on whether the data
            contains a valid image that LEADTOOLS can load. For more information, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert a specified object to an instance of <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">Type context information used for conversion.</param>
      <param name="culture">Cultural information that is respected during conversion.</param>
      <param name="value">The object being converted.</param>
      <returns>A new instance of <see cref="T:Leadtools.RasterImage" />.</returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Codecs.RasterImageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> method will try to convert the object passed into the <paramref name="value" /> parameter to a valid
            <see cref="T:Leadtools.RasterImage" /> object. For more information, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterImageTypeConverter" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTransformFlags">
      <summary>Indicates the transform to perform. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">RasterCodecs.Transform</see>.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.Flip">
      <summary>
            Flip the image vertically.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.Reverse">
      <summary>
            Flip the image vertically.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.Rotate90">
      <summary>
            Rotate the image 90 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.Rotate180">
      <summary>
            Rotate the image 190 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformFlags.Rotate270">
      <summary>
            Rotate the image 270 degrees.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTransformMarkerAction">
      <summary>Indicates the action to take when processing a marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">RasterCodecs.Transform</see>.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformMarkerAction.Default">
      <summary>
            Default.  Pass to LEADTOOLS for normal processing.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformMarkerAction.Ignore">
      <summary>
            Ignore this marker.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsTransformMarkerAction.Abort">
      <summary>
            Abort the process.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTransformMarkerCallback">
      <summary>Handles the processing of every JPEG marker present in the file transformed by <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">RasterCodecs.Transform</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>
        <para>
                    A <see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction" /> enumeration member that
                    determines the action taken by the <see cref="T:Leadtools.Codecs.RasterCodecs" /> after the
                    callback is called. Possible values are:
                </para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Default</see>
              </term>
              <description>Successful. The default processing for this marker can be
                            performed</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Ignore</see>
              </term>
              <description>Successful. Do not process this marker and do not write it
                            to the file</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Abort</see>
              </term>
              <description>Abort the process and do not transform anymore
                            markers</description>
            </item>
          </list>
        </para>
      </returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">RasterCodecs.Transform</see>.</example>
      <param name="id">ID of the JPEG marker. The JPEG markers are uniquely identified by a byte value. Possible values are
            1 to 254. (0 and 255 are not allowed.)</param>
      <param name="buffer">A pointer to the memory buffer containing the marker data. <see cref="P:Leadtools.RasterNativeBuffer.Length">RasterNativeBuffer.Length</see>
            contains the size in bytes of the JPEG marker. The size will be less than 65535. If this value is 0, then the
            marker does not have any extra data and <paramref name="buffer" /> should be ignored.</param>
      <param name="transform">Flags that indicate the transform to be performed. These are the same flags passed to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">RasterCodecs.Transform</see> method.</param>
    </member>
    <member name="T:Leadtools.Codecs.RasterCodecs">
      <summary>Provides support for loading and saving raster image files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS provides many options for loading and saving image files.</para>
        <para>Whether an image file is on disk or in memory, you can get information about the image before loading it. You can also
            handle file-format-specific information, such as the page number or physical resolution.</para>
        <para>You can supply the input for a load operation or the output of a save operation, and you can add processing, such as a
            paint-while-load feature.</para>
        <para>You can create as many instances of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> class as desired. However, you should not pass
            a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object created in one thread to another. Instead, create another instance of <see cref="T:Leadtools.Codecs.RasterCodecs" />
            in the thread. If desired, you can copy the options from one <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to another by cloning the options from the source
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> using <see cref="M:Leadtools.Codecs.CodecsOptions.Clone">CodecsOptions.Clone</see> and setting in the destination
            object <see cref="P:Leadtools.Codecs.RasterCodecs.Options" /> property.</para>
        <para>
          <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example loads an existing image file and re-saves it in another format.</para>
        <code lang="VB">      Public Sub RasterCodecsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim dstFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jpg")

         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, dstFileName, RasterImageFormat.Jpeg, 0)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterCodecsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string dstFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jpg");

         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image, dstFileName, RasterImageFormat.Jpeg, 0);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterCodecsExample(Stream inStream, Stream outStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(inStream);
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 0);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterCodecsExample(ByVal inStream As Stream, ByVal outStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(inStream)
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 0)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterCodecs" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.Codecs.RasterCodecs" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterCodecs" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <seealso cref="T:System.IDisposable" />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterCodecs" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.Codecs.RasterCodecs" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterCodecs" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)">
      <summary>Specifies the file format codecs to be loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fixedCodecs">Number of codecs that should stay loaded in memory at all times.</param>
      <param name="cachedCodecs">Number of codecs that should be loaded, but can be unloaded later to make room for other
            codecs.</param>
      <param name="codecs">A <see cref="T:System.String" /> containing the codecs which should be loaded.</param>
      <remarks>
        <para>If <paramref name="codecs" /> is empty, all file codecs LEADTOOLS can find will be loaded and LEADTOOLS will determine the
            order in which the files will be used.</para>
        <para>
          <paramref name="codecs" /> is in the form <c>xyz, yuv ...</c> where <c>Xyz</c> are the 3 letters describing the file
            codec as in <c>Leadtools.Codecs.Xyz.dll</c>. For instance, if <paramref name="codecs" /> is <c>BMP,TIF,CMP</c> then the
            following codecs will be loaded in the following order:</para>
        <para>
          <list type="number">
            <item>
              <description>Leadtools.Codecs.Bmp.dll</description>
            </item>
            <item>
              <description>Leadtools.Codecs.Tif.dll</description>
            </item>
            <item>
              <description>Leadtools.Codecs.Cmp.dll</description>
            </item>
          </list>
        </para>
        <para>The first <paramref name="fixedCodecs" /> will stay in memory at all times, then the next <paramref name="cachedCodecs" />
            will be loaded.  However, if other codecs will be needed, the cached codecs might be unloaded to make room for the new
            DLLs.</para>
        <para>It is recommended that the most commonly used DLLs be loaded as fixed to minimize the time required to load/unload
            file codecs. Also, some DLLs may require additional DLLs (like the <c>Leadtools.Pdf.dll</c> or
            <c>Leadtools.Codecs.Tif.dll</c>) so the exact number of DLLs loaded is not necessarily equal
            <c>fixedCodecs + cachedCodecs.</c></para>
        <para>Before calling this method, you can get the default preload codecs list using <see cref="P:Leadtools.Codecs.RasterCodecs.PreloadCodecsList" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingFileFilters">Loading File Codecs</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example preloads the j2k filter and ignores the cmp filter.</para>
        <code lang="VB">      Public Sub PreloadCodecsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k")
         Dim srcFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' display the original values before changing them
         Console.WriteLine("PreloadCodecList - {0}", codecs.PreloadCodecsList)
         Console.WriteLine("FixedPreloadCodecs - {0}", codecs.FixedPreloadCodecs)
         Console.WriteLine("CachedPreloadCodecs - {0}", codecs.CachedPreloadCodecs)
         Console.WriteLine("IgnoreCodecList - {0}", codecs.IgnoreCodecsList)

         ' preload only the j2k filter and ignore the cmp filter
         codecs.PreloadCodecs(1, 1, "j2k")
         codecs.IgnoreCodecs("cmp")

         ' try to get info on a j2k image
         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName1, False)
         Console.WriteLine("j2k - Width: {0}, Height {1}", info.Width, info.Height)

         ' try to get info on a cmp image
         Try
            info = codecs.GetInformation(srcFileName2, False)
         Catch
            Console.WriteLine("GetInformation for cmp failed - sample success!")
         End Try

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PreloadCodecsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k");
         string srcFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // display the original values before changing them
         Console.WriteLine("PreloadCodecList - {0}", codecs.PreloadCodecsList);
         Console.WriteLine("FixedPreloadCodecs - {0}", codecs.FixedPreloadCodecs);
         Console.WriteLine("CachedPreloadCodecs - {0}", codecs.CachedPreloadCodecs);
         Console.WriteLine("IgnoreCodecList - {0}", codecs.IgnoreCodecsList);

         // preload only the j2k filter and ignore the cmp filter
         codecs.PreloadCodecs(1, 1, "j2k");
         codecs.IgnoreCodecs("cmp");

         // try to get info on a j2k image
         CodecsImageInfo info = codecs.GetInformation(srcFileName1, false);
         Console.WriteLine("j2k - Width: {0}, Height {1}", info.Width, info.Height);

         // try to get info on a cmp image
         try
         {
            info = codecs.GetInformation(srcFileName2, false);
         }
         catch
         {
            Console.WriteLine("GetInformation for cmp failed - sample success!");
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.IgnoreCodecs(System.String)">
      <summary>Specifies which file codecs LEADTOOLS should NEVER load, even if present. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="codecs">A <see cref="T:System.String" /> containing which codecs should be ignored and therefore not loaded.
            Has the same format as in <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</param>
      <remarks>
        <para>Use this method if you never want to load a particular file codec(s).  This is useful for instance if you never load
            AVI files and you want to ignore the AVI codec since this codec on its own loads all the DLLs required for
            Video for Windows (there are about 10 of them).</para>
        <para>The files specified in <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" /> take priority over the files specified in
            <see cref="M:Leadtools.Codecs.RasterCodecs.IgnoreCodecs(System.String)" />.  This means that if the codec is present in <paramref name="codecs" /> for both methods, then
            the codec will be loaded and will not be ignored.</para>
        <para>Before calling this method, you can get the default ignore codecs list using <see cref="P:Leadtools.Codecs.RasterCodecs.IgnoreCodecsList" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingFileFilters">Loading File Codecs</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">
      <summary>Gets information about the specified codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="codecName">The name of the codec to query. The codec name is usually a string containing 3 characters. The
            codec name is not case sensitive.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsCodecInformation" /> onject containing Information about the codec.</returns>
      <noremarks />
      <example>
        <para>This example gets and then updates information about the ptoca (ptk) filter.</para>
        <code lang="VB">      Public Sub GetCodecInformationExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim codecInfo As CodecsCodecInformation = codecs.GetCodecInformation("Tif")
         Console.WriteLine("CheckedByInformation : {0}", codecInfo.CheckedByInformation)
         Console.WriteLine("ExtensionList : {0}", codecInfo.ExtensionList)
         Console.WriteLine("IsPresent : {0}", codecInfo.IsPresent.ToString())
         Console.WriteLine("IsSlowInformation : {0}", codecInfo.IsSlowInformation.ToString())
         Console.WriteLine("LoadMode : {0}", codecInfo.LoadMode.ToString())
         Console.WriteLine("Name : {0}", codecInfo.Name)

         ' change the extensions that the ptk filter tries to handle
         codecInfo.ExtensionList = "ptk;ptoka;ptoca;ptca;ptka"
         codecs.SetCodecInformation(codecInfo)

         ' re-display the new settings
         codecInfo = codecs.GetCodecInformation("tif")
         Console.WriteLine("ExtensionList : {0}", codecInfo.ExtensionList)

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void GetCodecInformationExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         CodecsCodecInformation codecInfo = codecs.GetCodecInformation("Tif");
         Console.WriteLine("CheckedByInformation : {0}", codecInfo.CheckedByInformation);
         Console.WriteLine("ExtensionList : {0}", codecInfo.ExtensionList);
         Console.WriteLine("IsPresent : {0}", codecInfo.IsPresent.ToString());
         Console.WriteLine("IsSlowInformation : {0}", codecInfo.IsSlowInformation.ToString());
         Console.WriteLine("LoadMode : {0}", codecInfo.LoadMode.ToString());
         Console.WriteLine("Name : {0}", codecInfo.Name);

         // change the extensions that the ptk filter tries to handle
         codecInfo.ExtensionList = "ptk;ptoka;ptoca;ptca;ptka";
         codecs.SetCodecInformation(codecInfo);

         // re-display the new settings
         codecInfo = codecs.GetCodecInformation("tif");
         Console.WriteLine("ExtensionList : {0}", codecInfo.ExtensionList);

         // Clean up
         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SetCodecInformation(Leadtools.Codecs.CodecsCodecInformation)">
      <summary>Sets information for the specified codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="codecInfo">The information to be updated.</param>
      <remarks>
        <para>Use this to modify the default handling of the codecs. For example, you can use this to change the default file
            extension list for a certain codec.</para>
        <para>You can also use this to check for a certain file format only for files whose extension matches the default
            extension list.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetCodecsInformation">
      <summary>Gets the information for all the codecs. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.Codecs.CodecsCodecInformation" /> containing information for all the codecs.</returns>
      <remarks>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.SetCodecsInformation(Leadtools.Codecs.CodecsCodecInformation[])" /> to set information for all the codecs.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)" /> to get information for a particular codec.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.SetCodecInformation(Leadtools.Codecs.CodecsCodecInformation)" /> to set information for a particular codec.</para>
      </remarks>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SetCodecsInformation(Leadtools.Codecs.CodecsCodecInformation[])">
      <summary>Sets the information for all the codecs. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="information">An array of <see cref="T:Leadtools.Codecs.CodecsCodecInformation" /> containing information for all the
            codecs.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecsInformation" /> to get information for all the codecs.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)" /> to get information for a particular codec.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.SetCodecInformation(Leadtools.Codecs.CodecsCodecInformation)" /> to set information for a particular codec.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">
      <summary>Starts file I/O redirection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS I/O redirection allows you to replace the default input/output methods for opening, reading, writing,
            seeking, and closing files.</para>
        <para>For example, you can redirect all the library I/O methods to your own I/O methods to load/save images from your
            own streams.</para>
        <para>Once you call <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" />, all subsequent file I/O operation will fire the following
            events:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Event</term>
              <description>Operation</description>
            </listheader>
            <item>
              <term>
                <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectOpen" />
              </term>
              <description>When the toolkit is trying to open a file</description>
            </item>
            <item>
              <term>
                <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectRead" />
              </term>
              <description>When the toolkit is trying to reading from a file</description>
            </item>
            <item>
              <term>
                <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectWrite" />
              </term>
              <description>When the toolkit is trying to writing to a file</description>
            </item>
            <item>
              <term>
                <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectSeek" />
              </term>
              <description>When the toolkit is trying to seeking into a file</description>
            </item>
            <item>
              <term>
                <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectClose" />
              </term>
              <description>When the toolkit is trying to closing a file</description>
            </item>
          </list>
        </para>
        <para>Call <see cref="M:Leadtools.Codecs.RasterCodecs.StopRedirecting" /> to reset the I/O methods back to the defaults.</para>
      </remarks>
      <example>
        <para>This example demonstrates overriding the default IO routines.</para>
        <code lang="VB">      ' Redirect Read event example
      Private myStream As FileStream
      ' Redirect Open event example
      Private Sub Codecs_Open(ByVal sender As Object, ByVal e As CodecsRedirectOpenEventArgs)
         myStream = New FileStream(e.FileName, e.Mode)
         e.Success = True
      End Sub

      ' Redirect Seek event example
      Private Sub Codecs_Seek(ByVal sender As Object, ByVal e As CodecsRedirectSeekEventArgs)
         myStream.Seek(e.Offset, e.Origin)
      End Sub

      ' Redirect Read event example
      Private Sub Codecs_Read(ByVal sender As Object, ByVal e As CodecsRedirectReadEventArgs)
         Dim byteBuffer As Byte() = New Byte(e.Count - 1) {}
         myStream.Read(byteBuffer, 0, e.Count)
         Marshal.Copy(byteBuffer, 0, e.Buffer, e.Count)
         e.Read = e.Count
         Console.WriteLine("The number of bytes that read request should copy to the buffer is : {0}", e.Count)
         Console.WriteLine("The actual number of bytes that this read request has copied to Buffer is : {0}", e.Read)
      End Sub

      ' Redirect Write event example
      Private Sub Codecs_Write(ByVal sender As Object, ByVal e As CodecsRedirectWriteEventArgs)
         Dim byteBuffer As Byte() = New Byte(e.Count - 1) {}
         Marshal.Copy(e.Buffer, byteBuffer, 0, e.Count)
         e.Written = e.Count
         myStream.Write(byteBuffer, 0, e.Count)

         Console.WriteLine("The number of bytes that write request should copy from the buffer is : {0}", e.Count)
         Console.WriteLine("The actual number of bytes that this write request has copied from Buffer is : {0}", e.Written)
      End Sub

      ' Redirect Close event example
      Private Sub Codecs_Close(ByVal sender As Object, ByVal e As CodecsRedirectCloseEventArgs)
         myStream.Close()
      End Sub


      Public Sub StartRedirectingExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         AddHandler codecs.RedirectOpen, AddressOf Codecs_Open
         AddHandler codecs.RedirectSeek, AddressOf Codecs_Seek
         AddHandler codecs.RedirectRead, AddressOf Codecs_Read
         AddHandler codecs.RedirectWrite, AddressOf Codecs_Write
         AddHandler codecs.RedirectClose, AddressOf Codecs_Close

         Dim srcFilename As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         codecs.StartRedirecting()
         Dim image As RasterImage = codecs.Load(srcFilename)
         myStream.Close()
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_redirect.jpg"), RasterImageFormat.Jpeg, image.BitsPerPixel)
         codecs.StopRedirecting()

         ' Clean up
         myStream.Dispose()
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // Redirect Read event example
      FileStream myStream;
      // Redirect Open event example
      private void Codecs_Open(object sender, CodecsRedirectOpenEventArgs e)
      {
         myStream = new FileStream(e.FileName, e.Mode);
         e.Success = true;
      }

      // Redirect Seek event example
      private void Codecs_Seek(object sender, CodecsRedirectSeekEventArgs e)
      {
         myStream.Seek(e.Offset, e.Origin);
      }

      // Redirect Read event example
      private void Codecs_Read(object sender, CodecsRedirectReadEventArgs e)
      {
         byte[] byteBuffer = new byte[e.Count];
         myStream.Read(byteBuffer, 0, e.Count);
         Marshal.Copy(byteBuffer, 0, e.Buffer, e.Count);
         e.Read = e.Count;
         Console.WriteLine("The number of bytes that read request should copy to the buffer is : {0}", e.Count);
         Console.WriteLine("The actual number of bytes that this read request has copied to Buffer is : {0}", e.Read);
      }

      // Redirect Write event example
      private void Codecs_Write(object sender, CodecsRedirectWriteEventArgs e)
      {
         byte[] byteBuffer = new byte[e.Count];
         Marshal.Copy(e.Buffer, byteBuffer, 0, e.Count);
         e.Written = e.Count;
         myStream.Write(byteBuffer, 0, e.Count);

         Console.WriteLine("The number of bytes that write request should copy from the buffer is : {0}", e.Count);
         Console.WriteLine("The actual number of bytes that this write request has copied from Buffer is : {0}", e.Written);
      }

      // Redirect Close event example
      private void Codecs_Close(object sender, CodecsRedirectCloseEventArgs e)
      {
         myStream.Close();
      }


      public void StartRedirectingExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.RedirectOpen += new EventHandler&lt;CodecsRedirectOpenEventArgs&gt;(Codecs_Open);
         codecs.RedirectSeek += new EventHandler&lt;CodecsRedirectSeekEventArgs&gt;(Codecs_Seek);
         codecs.RedirectRead += new EventHandler&lt;CodecsRedirectReadEventArgs&gt;(Codecs_Read);
         codecs.RedirectWrite += new EventHandler&lt;CodecsRedirectWriteEventArgs&gt;(Codecs_Write);
         codecs.RedirectClose += new EventHandler&lt;CodecsRedirectCloseEventArgs&gt;(Codecs_Close);

         string srcFilename = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         codecs.StartRedirecting();
         RasterImage image = codecs.Load(srcFilename);
         myStream.Close();
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir,"Image1_redirect.jpg"), RasterImageFormat.Jpeg, image.BitsPerPixel);
         codecs.StopRedirecting();

         // Clean up
         myStream.Dispose();
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopRedirecting">
      <summary>Stops file I/O redirection and resets the I/O methods back to their defaults. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS I/O redirection allows you to replace the default input/output methods for opening, reading, writing,
            seeking, and closing files.</para>
        <para>For example, you can redirect all the library I/O methods to your own I/O methods to load/save images from your
            own streams</para>.
            <para>Call <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> to enable I/O redirection and <see cref="M:Leadtools.Codecs.RasterCodecs.StopRedirecting" /> to reset it back
            to the defaults.</para></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">
      <summary>Gets the image information from a disk file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">
        <see cref="T:System.String" /> containing the input file name to query.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationStringExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' Get Information on a GIF image file and write it out
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("BitsPerPixel: {0}", info.BitsPerPixel))
         Console.WriteLine(String.Format("BytesPerLine: {0}", info.BytesPerLine))
         Console.WriteLine(String.Format("ColorSpace: {0}", info.ColorSpace.ToString()))
         Console.WriteLine(String.Format("Compresion: {0}", info.Compression))
         Console.WriteLine(String.Format("Fax: {0}", info.Fax))
         Console.WriteLine(String.Format("Format: {0}", info.Format))
         If info.Gif.HasAnimationBackground Then
            Console.WriteLine(String.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()))
         End If
         Console.WriteLine(String.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight))
         Console.WriteLine(String.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth))
         If info.Gif.HasAnimationLoop Then
            Console.WriteLine(String.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()))
         End If
         If info.Gif.HasAnimationPalette Then
            Dim pal As RasterColor() = info.Gif.GetAnimationPalette()
            Console.WriteLine("GifAnimationPalette:" &amp; Constants.vbLf)
            Dim x As Integer = 0
            Do While x &lt; pal.Length
               Console.Write("{0},", pal(x))
               x += 1
            Loop
            Console.WriteLine(Constants.vbLf)
         End If
         Console.WriteLine(String.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()))
         Console.WriteLine(String.Format("PageNumber: {0}", info.PageNumber))
         Console.WriteLine(String.Format("TotalPages: {0}", info.TotalPages))

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetInformationStringExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // Get Information on a GIF image file and write it out
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("BitsPerPixel: {0}", info.BitsPerPixel));
         Console.WriteLine(string.Format("BytesPerLine: {0}", info.BytesPerLine));
         Console.WriteLine(string.Format("ColorSpace: {0}", info.ColorSpace.ToString()));
         Console.WriteLine(string.Format("Compresion: {0}", info.Compression));
         Console.WriteLine(string.Format("Fax: {0}", info.Fax));
         Console.WriteLine(string.Format("Format: {0}", info.Format));
         if(info.Gif.HasAnimationBackground)
            Console.WriteLine(string.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()));
         Console.WriteLine(string.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight));
         Console.WriteLine(string.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth));
         if(info.Gif.HasAnimationLoop)
            Console.WriteLine(string.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()));
         if(info.Gif.HasAnimationPalette)
         {
            RasterColor[] pal = info.Gif.GetAnimationPalette();
            Console.WriteLine("GifAnimationPalette:\n");
            for(int x = 0; x &lt; pal.Length; x++)
            {
               Console.Write("{0},", pal[x]);
            }
            Console.WriteLine("\n");
         }
         Console.WriteLine(string.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()));
         Console.WriteLine(string.Format("PageNumber: {0}", info.PageNumber));
         Console.WriteLine(string.Format("TotalPages: {0}", info.TotalPages));

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean,System.Int32)">
      <summary>Gets the specific image page information from a disk file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">
        <see cref="T:System.String" /> containing the input file name to query.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <param name="pageNumber">Page number in the file to query.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.IO.Stream,System.Boolean)">
      <summary>Gets the image information from a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationStreamExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' Get Information on a GIF image file and write it out
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim fileInMemory As FileStream = New FileStream(srcFileName, FileMode.Open)

         Dim info As CodecsImageInfo = codecs.GetInformation(fileInMemory, True)
         Console.WriteLine("Information for: {0}", srcFileName)
         Console.WriteLine(String.Format("BitsPerPixel: {0}", info.BitsPerPixel))
         Console.WriteLine(String.Format("BytesPerLine: {0}", info.BytesPerLine))
         Console.WriteLine(String.Format("ColorSpace: {0}", info.ColorSpace.ToString()))
         Console.WriteLine(String.Format("Compresion: {0}", info.Compression))
         Console.WriteLine(String.Format("Fax: {0}", info.Fax))
         Console.WriteLine(String.Format("Format: {0}", info.Format))
         If info.Gif.HasAnimationBackground Then
            Console.WriteLine(String.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()))
         End If
         Console.WriteLine(String.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight))
         Console.WriteLine(String.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth))
         If info.Gif.HasAnimationLoop Then
            Console.WriteLine(String.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()))
         End If
         If info.Gif.HasAnimationPalette Then
            Dim pal As RasterColor() = info.Gif.GetAnimationPalette()
            Console.WriteLine("GifAnimationPalette:" &amp; Constants.vbLf)
            Dim x As Integer = 0
            Do While x &lt; pal.Length
               Console.Write("{0},", pal(x))
               x += 1
            Loop
            Console.WriteLine(Constants.vbLf)
         End If
         Console.WriteLine(String.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()))
         Console.WriteLine(String.Format("PageNumber: {0}", info.PageNumber))
         Console.WriteLine(String.Format("TotalPages: {0}", info.TotalPages))

         ' Clean up
         codecs.Dispose()
         fileInMemory.Close()
         fileInMemory.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetInformationStreamExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // Get Information on a GIF image file and write it out
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         FileStream fileInMemory = new FileStream(srcFileName, FileMode.Open);

         CodecsImageInfo info = codecs.GetInformation(fileInMemory, true);
         Console.WriteLine("Information for: {0}", srcFileName);
         Console.WriteLine(string.Format("BitsPerPixel: {0}", info.BitsPerPixel));
         Console.WriteLine(string.Format("BytesPerLine: {0}", info.BytesPerLine));
         Console.WriteLine(string.Format("ColorSpace: {0}", info.ColorSpace.ToString()));
         Console.WriteLine(string.Format("Compresion: {0}", info.Compression));
         Console.WriteLine(string.Format("Fax: {0}", info.Fax));
         Console.WriteLine(string.Format("Format: {0}", info.Format));
         if(info.Gif.HasAnimationBackground)
            Console.WriteLine(string.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()));
         Console.WriteLine(string.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight));
         Console.WriteLine(string.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth));
         if(info.Gif.HasAnimationLoop)
            Console.WriteLine(string.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()));
         if(info.Gif.HasAnimationPalette)
         {
            RasterColor[] pal = info.Gif.GetAnimationPalette();
            Console.WriteLine("GifAnimationPalette:\n");
            for(int x = 0; x &lt; pal.Length; x++)
            {
               Console.Write("{0},", pal[x]);
            }
            Console.WriteLine("\n");
         }
         Console.WriteLine(string.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()));
         Console.WriteLine(string.Format("PageNumber: {0}", info.PageNumber));
         Console.WriteLine(string.Format("TotalPages: {0}", info.TotalPages));

         // Clean up
         codecs.Dispose();
         fileInMemory.Close();
         fileInMemory.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetInformationStreamExample(Stream inStreamGif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get Information on a GIF image file and write it out
         CodecsImageInfo info = codecs.GetInformation(inStreamGif, true);
         Debug.WriteLine(string.Format("BitsPerPixel: {0}", info.BitsPerPixel));
         Debug.WriteLine(string.Format("BytesPerLine: {0}", info.BytesPerLine));
         Debug.WriteLine(string.Format("ColorSpace: {0}", info.ColorSpace.ToString()));
         Debug.WriteLine(string.Format("Compresion: {0}", info.Compression));
         Debug.WriteLine(string.Format("Fax: {0}", info.Fax));
         Debug.WriteLine(string.Format("Format: {0}", info.Format));
         if(info.Gif.HasAnimationBackground)
            Debug.WriteLine(string.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()));
         Debug.WriteLine(string.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight));
         Debug.WriteLine(string.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth));
         if(info.Gif.HasAnimationLoop)
            Debug.WriteLine(string.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()));
         if(info.Gif.HasAnimationPalette)
         {
            RasterColor[] pal = info.Gif.GetAnimationPalette();
            Debug.WriteLine("GifAnimationPalette:\n");
            for(int x = 0; x &lt; pal.Length; x++)
            {
               Debug.WriteLine("{0},", pal[x]);
            }
            Debug.WriteLine("\n");
         }
         Debug.WriteLine(string.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()));
         Debug.WriteLine(string.Format("PageNumber: {0}", info.PageNumber));
         Debug.WriteLine(string.Format("TotalPages: {0}", info.TotalPages));

         // Clean up
         inStreamGif.Close();
         inStreamGif.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetInformationStreamExample(ByVal inStreamGif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get Information on a GIF image file and write it out
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamGif, True)
         Debug.WriteLine(String.Format("BitsPerPixel: {0}", info.BitsPerPixel))
         Debug.WriteLine(String.Format("BytesPerLine: {0}", info.BytesPerLine))
         Debug.WriteLine(String.Format("ColorSpace: {0}", info.ColorSpace.ToString()))
         Debug.WriteLine(String.Format("Compresion: {0}", info.Compression))
         Debug.WriteLine(String.Format("Fax: {0}", info.Fax))
         Debug.WriteLine(String.Format("Format: {0}", info.Format))
         If info.Gif.HasAnimationBackground Then
            Debug.WriteLine(String.Format("Gif.AnimationBackground: {0}", info.Gif.AnimationBackground.ToString()))
         End If
         Debug.WriteLine(String.Format("Gif.AnimationHeight: {0}", info.Gif.AnimationHeight))
         Debug.WriteLine(String.Format("Gif.AnimationWidth: {0}", info.Gif.AnimationWidth))
         If info.Gif.HasAnimationLoop Then
            Debug.WriteLine(String.Format("Gif.AnimationLoop: {0}", info.Gif.AnimationLoop.ToString()))
         End If
         If info.Gif.HasAnimationPalette Then
            Dim pal As RasterColor() = info.Gif.GetAnimationPalette()
            Debug.WriteLine("GifAnimationPalette:" &amp; Constants.vbLf)
            Dim x As Integer = 0
            Do While x &lt; pal.Length
               Debug.WriteLine("{0},", pal(x))
               x += 1
            Loop
            Debug.WriteLine(Constants.vbLf)
         End If
         Debug.WriteLine(String.Format("Gif.IsInterlaced: {0}", info.Gif.IsInterlaced.ToString()))
         Debug.WriteLine(String.Format("PageNumber: {0}", info.PageNumber))
         Debug.WriteLine(String.Format("TotalPages: {0}", info.TotalPages))

         ' Clean up
         inStreamGif.Close()
         inStreamGif.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.IO.Stream,System.Boolean,System.Int32)">
      <summary>Gets the specific image page information from a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <param name="pageNumber">Page number in the file to query.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.IO.Stream,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean)">
      <summary>Gets the specific image page information from the specified <see cref="T:System.Uri" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="totalPages">true to query the URI for total number of pages, false otherwise.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationUriExample()
         Dim codecs As New RasterCodecs()

         ' Get Information on an image in an HTTP url
         Dim uri As New Uri("http://www.leadtools.com/images/15-homepg-banner.jpg")
         Dim info As CodecsImageInfo = codecs.GetInformation(uri, True)

         Console.WriteLine("Information for: {0}", uri)
         Console.WriteLine(String.Format("BitsPerPixel: {0}", info.BitsPerPixel))
         Console.WriteLine(String.Format("BytesPerLine: {0}", info.BytesPerLine))
         Console.WriteLine(String.Format("ColorSpace: {0}", info.ColorSpace.ToString()))
         Console.WriteLine(String.Format("Compresion: {0}", info.Compression))
         Console.WriteLine(String.Format("Format: {0}", info.Format))

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void GetInformationUriExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // Get Information on an image in an HTTP url
         Uri uri = new Uri(@"http://www.leadtools.com/images/page_graphics/leadlogo.png");
         CodecsImageInfo info = codecs.GetInformation(uri, true);

         Console.WriteLine("Information for: {0}", uri);
         Console.WriteLine(string.Format("BitsPerPixel: {0}", info.BitsPerPixel));
         Console.WriteLine(string.Format("BytesPerLine: {0}", info.BytesPerLine));
         Console.WriteLine(string.Format("ColorSpace: {0}", info.ColorSpace.ToString()));
         Console.WriteLine(string.Format("Compresion: {0}", info.Compression));
         Console.WriteLine(string.Format("Format: {0}", info.Format));

         // Clean up
         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)">
      <summary>Gets the specific image page information from the specified <see cref="T:System.Uri" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="totalPages">true to query the URI for total number of pages, false otherwise.</param>
      <param name="pageNumber">Page number in the URI to query.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String)">
      <summary>Loads the specified image file using default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats|Load|Loading|Loading Images</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load all the pages from a single multipage file</para>
        <code lang="VB">      Public Sub LoadFile1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim singlePageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim multiPageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")

         ' Get the file information (we are interested in the number of pages)
         Dim info As CodecsImageInfo = codecs.GetInformation(singlePageFileName, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the image and verify that we loaded all the pages
         Dim image As RasterImage = codecs.Load(singlePageFileName)
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         ' Repeat for a multipage file

         info = codecs.GetInformation(multiPageFileName, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         image = codecs.Load(multiPageFileName)
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadFile1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string singlePageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string multiPageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");

         // Get the file information (we are interested in the number of pages)
         CodecsImageInfo info = codecs.GetInformation(singlePageFileName, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the image and verify that we loaded all the pages
         RasterImage image = codecs.Load(singlePageFileName);
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         // Repeat for a multipage file

         info = codecs.GetInformation(multiPageFileName, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         image = codecs.Load(multiPageFileName);
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream)">
      <summary>Loads the specified image stream using default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The stream can point to any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the stream.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load all the pages from a stream that contains a single multipage file</para>
        <code lang="VB">      Public Sub LoadStream1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim singlePageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim multiPageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")

         ' Load the file into a stream
         Dim fs As FileStream = File.OpenRead(singlePageFileName)

         ' Get the file information (we are interested in the number of pages)
         Dim info As CodecsImageInfo = codecs.GetInformation(fs, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the image and verify that we loaded all the pages
         Dim image As RasterImage = codecs.Load(fs)
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)

         image.Dispose()
         fs.Close()

         ' Repeat for a multipage file

         fs = File.OpenRead(multiPageFileName)

         info = codecs.GetInformation(fs, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         image = codecs.Load(fs)
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)

         image.Dispose()
         fs.Close()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadStream1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string singlePageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string multiPageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");

         // Load the file into a stream
         FileStream fs = File.OpenRead(singlePageFileName);

         // Get the file information (we are interested in the number of pages)
         CodecsImageInfo info = codecs.GetInformation(fs, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the image and verify that we loaded all the pages
         RasterImage image = codecs.Load(fs);
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);

         image.Dispose();
         fs.Close();

         // Repeat for a multipage file

         fs = File.OpenRead(multiPageFileName);

         info = codecs.GetInformation(fs, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         image = codecs.Load(fs);
         Console.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);

         image.Dispose();
         fs.Close();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void LoadStream1Example(Stream inStreamSingleCmp, Stream inStreamMultiGif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the file information (we are interested in the number of pages)
         CodecsImageInfo info = codecs.GetInformation(inStreamSingleCmp, true);
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the image and verify that we loaded all the pages
         RasterImage image = codecs.Load(inStreamSingleCmp);
         Debug.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         // Repeat for a multipage file
         info = codecs.GetInformation(inStreamMultiGif, true);
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         image = codecs.Load(inStreamMultiGif);
         Debug.WriteLine("Number of pages loaded: {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LoadStream1Example(ByVal inStreamSingleCmp As Stream, ByVal inStreamMultiGif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the file information (we are interested in the number of pages)
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamSingleCmp, True)
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the image and verify that we loaded all the pages
         Dim image As RasterImage = codecs.Load(inStreamSingleCmp)
         Debug.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         ' Repeat for a multipage file
         info = codecs.GetInformation(inStreamMultiGif, True)
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         image = codecs.Load(inStreamMultiGif)
         Debug.WriteLine("Number of pages loaded: {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads the specified image file using specific options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will show how to load an image using different bits/pixel and color order than saved on disk.
            Also, it will show how to load a single page or a group of pages from a multipage file</para>
        <code lang="VB">      Public Sub LoadFile2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' First, test loading as different color byte order and bits per pixel
         Dim singlePageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Get the file information
         Dim info As CodecsImageInfo = codecs.GetInformation(singlePageFileName, True)
         Console.WriteLine("Order according to info is: {0}, bits/pixel is: {1}", info.Order, info.BitsPerPixel)

         ' Now, load this file with different color byte order and bits per pixel
         Dim bitsPerPixel As Integer = 1
         Dim image As RasterImage = codecs.Load(singlePageFileName, bitsPerPixel, CodecsLoadByteOrder.Rgb, 1, 1)
         Console.WriteLine("Loaded as {0} order and {1} bits/pixel", image.Order, image.BitsPerPixel)
         Debug.Assert(bitsPerPixel = image.BitsPerPixel)
         image.Dispose()

         Dim multiPageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")

         ' Get the file information (we are interested in the number of pages)
         info = codecs.GetInformation(multiPageFileName, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the first page
         Dim first As Integer = 1
         Dim last As Integer = 1
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load the second page
         first = 2
         last = 2
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load from the second page to page before last
         first = 2
         last = info.TotalPages - 1
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' load all the pages
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1)
         Console.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadFile2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         // First, test loading as different color byte order and bits per pixel
         string singlePageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Get the file information
         CodecsImageInfo info = codecs.GetInformation(singlePageFileName, true);
         Console.WriteLine("Order according to info is: {0}, bits/pixel is: {1}", info.Order, info.BitsPerPixel);

         // Now, load this file with different color byte order and bits per pixel
         int bitsPerPixel = 1;
         RasterImage image = codecs.Load(singlePageFileName, bitsPerPixel, CodecsLoadByteOrder.Rgb, 1, 1);
         Console.WriteLine("Loaded as {0} order and {1} bits/pixel", image.Order, image.BitsPerPixel);
         Debug.Assert(bitsPerPixel == image.BitsPerPixel);
         image.Dispose();

         string multiPageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");

         // Get the file information (we are interested in the number of pages)
         info = codecs.GetInformation(multiPageFileName, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the first page
         int first = 1;
         int last = 1;
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load the second page
         first = 2;
         last = 2;
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load from the second page to the second before last page
         first = 2;
         last = info.TotalPages - 1;
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // load all the pages
         image = codecs.Load(multiPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1);
         Console.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads the specified image stream using specific options <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the stream.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will show how to load an image using different bits/pixel and color order than that saved on disk.
            Also, it will show how to load a single page or a group of pages from a multipage file
            All loading operation uses a stream instead of a file on disk</para>
        <code lang="VB">      Public Sub LoadStream2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim multiPageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")

         Dim fs As FileStream = File.OpenRead(multiPageFileName)

         ' Get the file information (we are interested in the number of pages)
         Dim info As CodecsImageInfo = codecs.GetInformation(fs, True)
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the first page
         Dim first As Integer = 1
         Dim last As Integer = 1
         Dim image As RasterImage = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load the second page
         first = 2
         last = 2
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load from the second page to page before last
         first = 2
         last = info.TotalPages - 1
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' load all the pages
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1)
         Console.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         fs.Close()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadStream2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string multiPageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");

         FileStream fs = File.OpenRead(multiPageFileName);

         // Get the file information (we are interested in the number of pages)
         CodecsImageInfo info = codecs.GetInformation(fs, true);
         Console.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the first page
         int first = 1;
         int last = 1;
         RasterImage image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load the second page
         first = 2;
         last = 2;
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load from the second page to page before last
         first = 2;
         last = info.TotalPages - 1;
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Console.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // load all the pages
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1);
         Console.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         fs.Close();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void LoadStream2Example(Stream inStreamMultiGif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the file information (we are interested in the number of pages)
         CodecsImageInfo info = codecs.GetInformation(inStreamMultiGif, true);
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages);

         // Load the first page
         int first = 1;
         int last = 1;
         RasterImage image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load the second page
         first = 2;
         last = 2;
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // Load from the second page to page before last
         first = 2;
         last = info.TotalPages - 1;
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last);
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount);
         Debug.Assert(image.PageCount == last - first + 1);
         image.Dispose();

         // load all the pages
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1);
         Debug.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount);
         Debug.Assert(image.PageCount == info.TotalPages);
         image.Dispose();

         inStreamMultiGif.Close();
      }</code>
        <code lang="SilverlightVB">      Public Sub LoadStream2Example(ByVal inStreamMultiGif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the file information (we are interested in the number of pages)
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamMultiGif, True)
         Debug.WriteLine("Number of pages according to info: {0}", info.TotalPages)

         ' Load the first page
         Dim first As Integer = 1
         Dim last As Integer = 1
         Dim image As RasterImage = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load the second page
         first = 2
         last = 2
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' Load from the second page to page before last
         first = 2
         last = info.TotalPages - 1
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, first, last)
         Debug.WriteLine("Loading pages {0} to {1}, pages loaded = {2}", first, last, image.PageCount)
         Debug.Assert(image.PageCount = last - first + 1)
         image.Dispose()

         ' load all the pages
         image = codecs.Load(inStreamMultiGif, 0, CodecsLoadByteOrder.BgrOrGray, 1, -1)
         Debug.WriteLine("Loading all pages, pages loaded = {0}", image.PageCount)
         Debug.Assert(image.PageCount = info.TotalPages)
         image.Dispose()

         inStreamMultiGif.Close()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,System.Int64,System.Int64)">
      <summary>Loads an image file, letting you specify the location of the image data within the stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="offset">Offset from the beginning of the stream at which loading should start.</param>
      <param name="count">Total size of the image file data.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method can be used to load an image file that is embedded in another stream.</para>
        <para>The location of the image is specified as shown in the following simple illustration:</para>
        <para>
          <img src="LoadOffset.gif" />
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image. For these images,
            the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load an image located in an offset into a stream</para>
        <code lang="VB">      Public Sub LoadStreamOffset1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadStreamOffset1.bmp")

         ' Create a memory stream, add a cutsom header then copy the content of the file
         ' into this stream.  After that, load the image from the stream given the offset

         Dim ms As MemoryStream = New MemoryStream()

         ' Add some custom header to the stream (4 bytes)
         Dim headerSize As Integer = 4
         Dim i As Integer = 0
         Do While i &lt; headerSize
            ms.WriteByte(0)
            i += 1
         Loop

         ' Now append the file into this stream
         Dim fs As FileStream = File.OpenRead(srcFileName)

         Const bufferSize As Integer = 1024
         Dim buffer As Byte() = New Byte(bufferSize - 1) {}
         Dim bytesRead As Integer
         Do
            bytesRead = fs.Read(buffer, 0, bufferSize)
            If bytesRead &gt; 0 Then
               ms.Write(buffer, 0, bytesRead)
            End If
         Loop While bytesRead &gt; 0

         fs.Close()

         ' Reset the memory stream position to the beginning
         ms.Position = 0

         ' Now load the image with the offset
         Dim offset As Long = headerSize
         Dim count As Long = ms.Length - headerSize
         Dim image As RasterImage = codecs.Load(ms, offset, count)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadStreamOffset1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadStreamOffset1.bmp");

         // Create a memory stream, add a cutsom header then copy the content of the file
         // into this stream.  After that, load the image from the stream given the offset

         MemoryStream ms = new MemoryStream();

         // Add some custom header to the stream (4 bytes)
         int headerSize = 4;
         for(int i = 0; i &lt; headerSize; i++)
            ms.WriteByte(0);

         // Now append the file into this stream
         FileStream fs = File.OpenRead(srcFileName);

         const int bufferSize = 1024;
         byte[] buffer = new byte[bufferSize];
         int bytesRead;
         do
         {
            bytesRead = fs.Read(buffer, 0, bufferSize);
            if(bytesRead &gt; 0)
               ms.Write(buffer, 0, bytesRead);
         }
         while(bytesRead &gt; 0);

         fs.Close();

         // Reset the memory stream position to the beginning
         ms.Position = 0;

         // Now load the image with the offset
         long offset = headerSize;
         long count = ms.Length - headerSize;
         RasterImage image = codecs.Load(ms, offset, count);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,System.Int64,System.Int64,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads an image file, letting you specify the location of the image data within the stream and the options to use when loading. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="offset">Offset from the beginning of the stream at which loading should start.</param>
      <param name="count">Total size of the image file data.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the stream.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method can be used to load an image file that is embedded in another stream.</para>
        <para>The location of the image is specified as shown in the following simple illustration:</para>
        <para>
          <img src="LoadOffset.gif" />
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image. For these images,
            the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load a multipage image located in an offset into a stream</para>
        <code lang="VB">      Public Sub LoadStreamOffset2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadStreamOffset2.bmp")

         ' Create a memory stream, add a cutsom header then copy the content of the file
         ' into this stream.  After that, load the image from the stream given the offset

         Dim ms As MemoryStream = New MemoryStream()

         ' Add some custom header to the stream (4 bytes)
         Dim headerSize As Integer = 4
         Dim i As Integer = 0
         Do While i &lt; headerSize
            ms.WriteByte(0)
            i += 1
         Loop

         ' Now append the file into this stream
         Dim fs As FileStream = File.OpenRead(srcFileName)

         Const bufferSize As Integer = 1024
         Dim buffer As Byte() = New Byte(bufferSize - 1) {}
         Dim bytesRead As Integer
         Do
            bytesRead = fs.Read(buffer, 0, bufferSize)
            If bytesRead &gt; 0 Then
               ms.Write(buffer, 0, bytesRead)
            End If
         Loop While bytesRead &gt; 0

         fs.Close()

         ' Reset the memory stream position to the beginning
         ms.Position = 0

         ' Now load the second page in the image using the offset
         Dim offset As Long = headerSize
         Dim count As Long = ms.Length - headerSize
         Dim image As RasterImage = codecs.Load(ms, offset, count, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadStreamOffset2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_LoadStreamOffset2.bmp");

         // Create a memory stream, add a cutsom header then copy the content of the file
         // into this stream.  After that, load the image from the stream given the offset

         MemoryStream ms = new MemoryStream();

         // Add some custom header to the stream (4 bytes)
         int headerSize = 4;
         for(int i = 0; i &lt; headerSize; i++)
            ms.WriteByte(0);

         // Now append the file into this stream
         FileStream fs = File.OpenRead(srcFileName);

         const int bufferSize = 1024;
         byte[] buffer = new byte[bufferSize];
         int bytesRead;
         do
         {
            bytesRead = fs.Read(buffer, 0, bufferSize);
            if(bytesRead &gt; 0)
               ms.Write(buffer, 0, bytesRead);
         }
         while(bytesRead &gt; 0);

         fs.Close();

         // Reset the memory stream position to the beginning
         ms.Position = 0;

         // Now load the second page in the image using the offset
         long offset = headerSize;
         long count = ms.Length - headerSize;
         RasterImage image = codecs.Load(ms, offset, count, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String,Leadtools.LeadRect)">
      <summary>Loads the specified rectangle from the specified image file using default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will create a rectangle area from an image on disk.</para>
        <code lang="VB">      Public Sub LoadTileFile1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileFile1.bmp")

         ' Get the image dimension
         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, False)

         ' Load the lower right corner of the image
         Dim rc As LeadRect = New LeadRect(info.Width \ 2, info.Height \ 2, info.Width \ 2, info.Height \ 2)

         Dim image As RasterImage = codecs.Load(srcFileName, rc)
         Debug.Assert(image.Width = (info.Width \ 2))
         Debug.Assert(image.Height = (info.Height \ 2))

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadTileFile1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileFile1.bmp");

         // Get the image dimension
         CodecsImageInfo info = codecs.GetInformation(srcFileName, false);

         // Load the lower right corner of the image
         LeadRect rc = new LeadRect(
            info.Width / 2,
            info.Height / 2,
            info.Width / 2,
            info.Height / 2);

         RasterImage image = codecs.Load(srcFileName, rc);
         Debug.Assert(image.Width == (info.Width / 2));
         Debug.Assert(image.Height == (info.Height / 2));

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,Leadtools.LeadRect)">
      <summary>Loads the specified rectangle from the specified image stream using default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image stream (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will create a rectangle area from a stream containing image data.</para>
        <code lang="VB">      Public Sub LoadTileStream1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileStream1.bmp")

         Dim fs As FileStream = File.OpenRead(srcFileName)

         ' Get the image dimension
         Dim info As CodecsImageInfo = codecs.GetInformation(fs, False)

         ' Load the lower right corner of the image
         Dim rc As LeadRect = New LeadRect(info.Width \ 2, info.Height \ 2, info.Width \ 2, info.Height \ 2)

         Dim image As RasterImage = codecs.Load(fs, rc)
         fs.Close()

         Debug.Assert(image.Width = (info.Width \ 2))
         Debug.Assert(image.Height = (info.Height \ 2))

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadTileStream1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileStream1.bmp");

         FileStream fs = File.OpenRead(srcFileName);

         // Get the image dimension
         CodecsImageInfo info = codecs.GetInformation(fs, false);

         // Load the lower right corner of the image
         LeadRect rc = new LeadRect(
            info.Width / 2,
            info.Height / 2,
            info.Width / 2,
            info.Height / 2);

         RasterImage image = codecs.Load(fs, rc);
         fs.Close();

         Debug.Assert(image.Width == (info.Width / 2));
         Debug.Assert(image.Height == (info.Height / 2));

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void LoadTileStream1Example(Stream inStreamCmp, Stream outStreamBmp)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the image dimension
         CodecsImageInfo info = codecs.GetInformation(inStreamCmp, false);

         // Load the lower right corner of the image
         LeadRect rc = new LeadRect(info.Width / 2, info.Height / 2, info.Width / 2, info.Height / 2);

         RasterImage image = codecs.Load(inStreamCmp, rc);
         Debug.Assert(image.Width == (info.Width / 2));
         Debug.Assert(image.Height == (info.Height / 2));

         // Save this image back to disk
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LoadTileStream1Example(ByVal inStreamCmp As Stream, ByVal outStreamBmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the image dimension
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamCmp, False)

         ' Load the lower right corner of the image
         Dim rc As LeadRect = New LeadRect(info.Width / 2, info.Height / 2, info.Width / 2, info.Height / 2)

         Dim image As RasterImage = codecs.Load(inStreamCmp, rc)
         Debug.Assert(image.Width = (info.Width / 2))
         Debug.Assert(image.Height = (info.Height / 2))

         ' Save this image back to disk
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads the specified rectangle from the specified image file using the specified options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load the middle portion of the second page of a multipage file as 1 bits/pixel</para>
        <code lang="VB">      Public Sub LoadTileFile2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileFile2.bmp")

         ' Get the image dimension
         Dim pageNumber As Integer = 2
         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True, pageNumber)

         ' Load the middle portion of the page
         Dim width As Integer = info.Width \ 3
         Dim height As Integer = info.Height \ 3
         Dim rc As LeadRect = New LeadRect((info.Width - width) \ 2, (info.Height - height) \ 2, width, height)

         Dim image As RasterImage = codecs.Load(srcFileName, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2)
         Debug.Assert(image.PageCount = 1)
         Debug.Assert(image.Width = rc.Width)
         Debug.Assert(image.Height = rc.Height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 1)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadTileFile2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileFile2.bmp");

         // Get the image dimension
         int pageNumber = 2;
         CodecsImageInfo info = codecs.GetInformation(srcFileName, true, pageNumber);

         // Load the middle portion of the page
         int width = info.Width / 3;
         int height = info.Height / 3;
         LeadRect rc = new LeadRect(
            (info.Width - width) / 2,
            (info.Height - height) / 2,
            width,
            height);

         RasterImage image = codecs.Load(srcFileName, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2);
         Debug.Assert(image.PageCount == 1);
         Debug.Assert(image.Width == rc.Width);
         Debug.Assert(image.Height == rc.Height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 1);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads the specified rectangle from the specified image stream using the specified options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load the middle portion of the second page from a stream that contains a multipage file as 1 bits/pixel</para>
        <code lang="VB">      Public Sub LoadTileStream2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileStream2.bmp")

         Dim fs As FileStream = File.OpenRead(srcFileName)

         ' Get the image dimension
         Dim pageNumber As Integer = 2
         Dim info As CodecsImageInfo = codecs.GetInformation(fs, True, pageNumber)

         ' Load the middle portion of the page
         Dim width As Integer = info.Width \ 3
         Dim height As Integer = info.Height \ 3
         Dim rc As LeadRect = New LeadRect((info.Width - width) \ 2, (info.Height - height) \ 2, width, height)

         Dim image As RasterImage = codecs.Load(fs, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2)
         fs.Close()

         Debug.Assert(image.PageCount = 1)
         Debug.Assert(image.Width = rc.Width)
         Debug.Assert(image.Height = rc.Height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 1)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadTileStream2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_LoadTileStream2.bmp");

         FileStream fs = File.OpenRead(srcFileName);

         // Get the image dimension
         int pageNumber = 2;
         CodecsImageInfo info = codecs.GetInformation(fs, true, pageNumber);

         // Load the middle portion of the page
         int width = info.Width / 3;
         int height = info.Height / 3;
         LeadRect rc = new LeadRect(
            (info.Width - width) / 2,
            (info.Height - height) / 2,
            width,
            height);

         RasterImage image = codecs.Load(fs, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2);
         fs.Close();

         Debug.Assert(image.PageCount == 1);
         Debug.Assert(image.Width == rc.Width);
         Debug.Assert(image.Height == rc.Height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 1);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void LoadTileStream2Example(Stream inStreamGif, Stream outStreamBmp)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the image dimension
         int pageNumber = 2;
         CodecsImageInfo info = codecs.GetInformation(inStreamGif, true, pageNumber);

         // Load the middle portion of the page
         int width = info.Width / 3;
         int height = info.Height / 3;
         LeadRect rc = new LeadRect((info.Width - width) / 2, (info.Height - height) / 2, width, height);

         RasterImage image = codecs.Load(inStreamGif, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2);
         Debug.Assert(image.PageCount == 1);
         Debug.Assert(image.Width == rc.Width);
         Debug.Assert(image.Height == rc.Height);

         // Save this image back to disk
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 1);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LoadTileStream2Example(ByVal inStreamGif As Stream, ByVal outStreamBmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the image dimension
         Dim pageNumber As Integer = 2
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamGif, True, pageNumber)

         ' Load the middle portion of the page
         Dim width As Integer = info.Width / 3
         Dim height As Integer = info.Height / 3
         Dim rc As LeadRect = New LeadRect((info.Width - width) / 2, (info.Height - height) / 2, width, height)

         Dim image As RasterImage = codecs.Load(inStreamGif, rc, 1, CodecsLoadByteOrder.Rgb, 2, 2)
         Debug.Assert(image.PageCount = 1)
         Debug.Assert(image.Width = rc.Width)
         Debug.Assert(image.Height = rc.Height)

         ' Save this image back to disk
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 1)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder)">
      <summary>Loads an image file to the desired width, height, and bits per pixel, resizing the image as it loads. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="width">New width of the image in pixels.</param>
      <param name="height">New height of the image in pixels.</param>
      <param name="flags">
        <para>Flag that indicates the type of resizing to use. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.None</term>
              <description>Normal resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Resample</term>
              <description>Linear interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Bicubic</term>
              <description>Bicubic interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.FavorBlack</term>
              <description>Not supported</description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>This method resizes a file to the desired width, height, and bits per pixel as it loads. Note that the original file is
            not completely loaded into memory. This method is ideal for sampling large images (i.e. generating a thumbnail) without the
            memory overhead of loading the large file itself.</para>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load an image from file in a specified size.</para>
        <code lang="VB">      Public Sub LoadResize1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize1.bmp")

         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         ' We want to load the image as 320/200
         Dim width As Integer = 320
         Dim height As Integer = 200

         Dim image As RasterImage = codecs.Load(srcFileName, width, height, 0, RasterSizeFlags.Resample, CodecsLoadByteOrder.BgrOrGray)

         Debug.Assert(image.Width = width)
         Debug.Assert(image.Height = height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadResize1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize1.bmp");

         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);

         // We want to load the image as 320/200
         int width = 320;
         int height = 200;

         RasterImage image = codecs.Load(
            srcFileName,
            width,
            height,
            0,
            RasterSizeFlags.Resample,
            CodecsLoadByteOrder.BgrOrGray);

         Debug.Assert(image.Width == width);
         Debug.Assert(image.Height == height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads an image file to the desired width, height, and bits per pixel, resizing as it loads. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="width">New width of the image in pixels.</param>
      <param name="height">New height of the image in pixels.</param>
      <param name="flags">
        <para>Flag that indicates the type of resizing to use. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.None</term>
              <description>Normal resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Resample</term>
              <description>Linear interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Bicubic</term>
              <description>Bicubic interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.FavorBlack</term>
              <description>Not supported</description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method resizes a file as it loads, to the desired width, height, and bits per pixel. Note that the original file is
            not completely loaded into memory. This method is ideal for sampling large images (i.e. generating a thumbnail) without the
            memory overhead of loading the large file itself.</para>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load the last page of an image from file in a specified size.</para>
        <code lang="VB">      Public Sub LoadResize2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize2.bmp")

         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         ' Get the page number to load
         Dim pageNumber As Integer = info.TotalPages

         ' We want to load the image as 320/200
         Dim width As Integer = 320
         Dim height As Integer = 200

         ' Load the last page in the specified size
         Dim image As RasterImage = codecs.Load(srcFileName, width, height, 0, RasterSizeFlags.Resample, CodecsLoadByteOrder.BgrOrGray, pageNumber, pageNumber)

         Debug.Assert(image.Width = width)
         Debug.Assert(image.Height = height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadResize2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize2.bmp");

         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);

         // Get the page number to load
         int pageNumber = info.TotalPages;

         // We want to load the image as 320/200
         int width = 320;
         int height = 200;

         // Load the last page in the specified size
         RasterImage image = codecs.Load(
            srcFileName,
            width,
            height,
            0,
            RasterSizeFlags.Resample,
            CodecsLoadByteOrder.BgrOrGray,
            pageNumber,
            pageNumber);

         Debug.Assert(image.Width == width);
         Debug.Assert(image.Height == height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder)">
      <summary>Loads an image file to the desired width, height, and bits per pixel, resizing the image as it loads. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="width">New width of the image in pixels.</param>
      <param name="height">New height of the image in pixels.</param>
      <param name="flags">
        <para>Flag that indicates the type of resizing to use. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.None</term>
              <description>Normal resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Resample</term>
              <description>Linear interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Bicubic</term>
              <description>Bicubic interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.FavorBlack</term>
              <description>Not supported</description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>This method resizes a file to the desired width, height, and bits per pixel as it loads. Note that the original file is
            not completely loaded into memory. This method is ideal for sampling large images (i.e. generating a thumbnail) without the
            memory overhead of loading the large file itself.</para>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load an image from file in a specified size.</para>
        <code lang="VB">      Public Sub LoadResize1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize1.bmp")

         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         ' We want to load the image as 320/200
         Dim width As Integer = 320
         Dim height As Integer = 200

         Dim image As RasterImage = codecs.Load(srcFileName, width, height, 0, RasterSizeFlags.Resample, CodecsLoadByteOrder.BgrOrGray)

         Debug.Assert(image.Width = width)
         Debug.Assert(image.Height = height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadResize1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize1.bmp");

         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);

         // We want to load the image as 320/200
         int width = 320;
         int height = 200;

         RasterImage image = codecs.Load(
            srcFileName,
            width,
            height,
            0,
            RasterSizeFlags.Resample,
            CodecsLoadByteOrder.BgrOrGray);

         Debug.Assert(image.Width == width);
         Debug.Assert(image.Height == height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.IO.Stream,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads an image file to the desired width, height, and bits per pixel, resizing as it loads. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="width">New width of the image in pixels.</param>
      <param name="height">New height of the image in pixels.</param>
      <param name="flags">
        <para>Flag that indicates the type of resizing to use. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.None</term>
              <description>Normal resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Resample</term>
              <description>Linear interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.Bicubic</term>
              <description>Bicubic interpolation resizing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterSizeFlags" />RasterSizeFlags.FavorBlack</term>
              <description>Not supported</description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method resizes a file as it loads, to the desired width, height, and bits per pixel. Note that the original file is
            not completely loaded into memory. This method is ideal for sampling large images (i.e. generating a thumbnail) without the
            memory overhead of loading the large file itself.</para>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load the last page of an image from file in a specified size.</para>
        <code lang="VB">      Public Sub LoadResize2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize2.bmp")

         Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         ' Get the page number to load
         Dim pageNumber As Integer = info.TotalPages

         ' We want to load the image as 320/200
         Dim width As Integer = 320
         Dim height As Integer = 200

         ' Load the last page in the specified size
         Dim image As RasterImage = codecs.Load(srcFileName, width, height, 0, RasterSizeFlags.Resample, CodecsLoadByteOrder.BgrOrGray, pageNumber, pageNumber)

         Debug.Assert(image.Width = width)
         Debug.Assert(image.Height = height)

         ' Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadResize2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "LoadResize2.bmp");

         CodecsImageInfo info = codecs.GetInformation(srcFileName, true);

         // Get the page number to load
         int pageNumber = info.TotalPages;

         // We want to load the image as 320/200
         int width = 320;
         int height = 200;

         // Load the last page in the specified size
         RasterImage image = codecs.Load(
            srcFileName,
            width,
            height,
            0,
            RasterSizeFlags.Resample,
            CodecsLoadByteOrder.BgrOrGray,
            pageNumber,
            pageNumber);

         Debug.Assert(image.Width == width);
         Debug.Assert(image.Height == height);

         // Save this image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri)">
      <summary>Loads the specified image URL using default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load an image from a uri</para>
        <code lang="VB">      Public Sub LoadUri1Example()
         Dim codecs As New RasterCodecs()

         Dim uri As New Uri("http://www.leadtools.com/images/15-homepg-banner.jpg")
         Dim image As RasterImage = codecs.Load(uri)

         ' Show information about tha image
         Console.WriteLine("Size: {0} by {1} pixels", image.Width, image.Height)
         Console.WriteLine("Bits/Pixel: {0}", image.BitsPerPixel)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void LoadUri1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         Uri uri = new Uri(@"http://www.leadtools.com/images/page_graphics/leadlogo.png");
         RasterImage image = codecs.Load(uri);

         // Show information about tha image
         Console.WriteLine("Size: {0} by {1} pixels", image.Width, image.Height);
         Console.WriteLine("Bits/Pixel: {0}", image.BitsPerPixel);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Loads the specified image URL using specified options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load an image from a uri with different bits per pixel</para>
        <code lang="VB">      Public Sub LoadUri2Example()
         Dim codecs As New RasterCodecs()

         ' Load the image with 1 bits/pixel
         Dim uri As New Uri("http://www.leadtools.com/images/15-homepg-banner.jpg")
         Dim image As RasterImage = codecs.Load(uri, 1, CodecsLoadByteOrder.Rgb, 1, 1)

         ' Show information about tha image
         Console.WriteLine("Size: {0} by {1} pixels", image.Width, image.Height)
         Console.WriteLine("Bits/Pixel: {0}", image.BitsPerPixel)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void LoadUri2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         // Load the image with 1 bits/pixel
         Uri uri = new Uri(@"http://www.leadtools.com/images/page_graphics/leadlogo.png");
         RasterImage image = codecs.Load(uri, 1, CodecsLoadByteOrder.Rgb, 1, 1);

         // Show information about tha image
         Console.WriteLine("Size: {0} by {1} pixels", image.Width, image.Height);
         Console.WriteLine("Bits/Pixel: {0}", image.BitsPerPixel);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Saves a <see cref="T:Leadtools.RasterImage" /> to a file in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Save|Saving images|Saving</keywords>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the output file name.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <remarks>
        <para>If the output file format supports multipage and then all the pages in <paramref name="image" /> will be saved to the
            file.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>. 
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load a 24 bits/pixel CMP image and save it as 1 bits/pixel TIF image.</para>
        <code lang="VB">      Public Sub SaveFile1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveFile1.tif")

         ' Load the source file (make sure to load as 24 bits/pixel)
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Console.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel)

         ' Save it as 1 bpp TIF
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1)
         image.Dispose()

         ' Check if the image was saved correctly
         Dim info As CodecsImageInfo = codecs.GetInformation(destFileName, False)
         Console.WriteLine("Saved image has {0} bpp", info.BitsPerPixel)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveFile1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveFile1.tif");

         // Load the source file (make sure to load as 24 bits/pixel)
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Console.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel);

         // Save it as 1 bpp TIF
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1);
         image.Dispose();

         // Check if the image was saved correctly
         CodecsImageInfo info = codecs.GetInformation(destFileName, false);
         Console.WriteLine("Saved image has {0} bpp", info.BitsPerPixel);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Saves a <see cref="T:Leadtools.RasterImage" /> to a stream in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> where the image data will be saved.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <remarks>
        <para>If the output file format supports multipage and then all the pages in <paramref name="image" /> will be saved to the
            file.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will load a 24 bits/pixel CMP image and save it to a stream as 1 bits/pixel TIF image.</para>
        <code lang="VB">      Public Sub SaveStream1Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveStream1.tif")

         ' Load the source file (make sure to load as 24 bits/pixel)
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Console.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel)

         ' Create a stream for the destination file
         Dim fs As FileStream = File.Create(destFileName)

         ' Save it as 1 bpp TIF
         codecs.Save(image, fs, RasterImageFormat.Tif, 1)
         fs.Close()

         image.Dispose()

         ' Check if the image was saved correctly
         Dim info As CodecsImageInfo = codecs.GetInformation(destFileName, False)
         Console.WriteLine("Saved image has {0} bpp", info.BitsPerPixel)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveStream1Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveStream1.tif");

         // Load the source file (make sure to load as 24 bits/pixel)
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Console.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel);

         // Create a stream for the destination file
         FileStream fs = File.Create(destFileName);

         // Save it as 1 bpp TIF
         codecs.Save(image, fs, RasterImageFormat.Tif, 1);
         fs.Close();

         image.Dispose();

         // Check if the image was saved correctly
         CodecsImageInfo info = codecs.GetInformation(destFileName, false);
         Console.WriteLine("Saved image has {0} bpp", info.BitsPerPixel);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SaveStream1Example(Stream inStreamCmp, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the source file (make sure to load as 24 bits/pixel)
         RasterImage image = codecs.Load(inStreamCmp, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Debug.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel);

         // Save it as 1 bpp TIF
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1);
         image.Dispose();

         // Check if the image was saved correctly
         CodecsImageInfo info = codecs.GetInformation(outStreamTif, false);
         Debug.WriteLine("Saved image has {0} bpp", info.BitsPerPixel);
      }</code>
        <code lang="SilverlightVB">      Public Sub SaveStream1Example(ByVal inStreamCmp As Stream, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the source file (make sure to load as 24 bits/pixel)
         Dim image As RasterImage = codecs.Load(inStreamCmp, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Debug.WriteLine("Loaded image has {0} bpp", image.BitsPerPixel)

         ' Save it as 1 bpp TIF
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1)
         image.Dispose()

         ' Check if the image was saved correctly
         Dim info As CodecsImageInfo = codecs.GetInformation(outStreamTif, False)
         Debug.WriteLine("Saved image has {0} bpp", info.BitsPerPixel)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves one or more pages of a <see cref="T:Leadtools.RasterImage" /> to a file in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the output file name.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this
            parameter lets you control which pages to overwrite and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will create a multipage image and save it to a file before using the Save method to insert and replace pages directly in the file.</para>
        <code lang="VB">      Public Sub SaveFile2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveFile2.tif")

         ' Create a RasterImage with 4 pages containing text showing the page number
         Dim image As RasterImage = Nothing
         Const pageCount As Integer = 4

         Using f As New System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold)
            Using btmp As New System.Drawing.Bitmap(320, 200)
               Using sf As New System.Drawing.StringFormat()
                  Dim rc As New System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height)
                  sf.Alignment = System.Drawing.StringAlignment.Center
                  sf.LineAlignment = System.Drawing.StringAlignment.Center

                  For i As Integer = 1 To pageCount
                     ' Create a GDI+ bitmap with the text
                     Dim text As String = "Page " + i.ToString()

                     Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(btmp)
                        g.FillRectangle(System.Drawing.Brushes.White, rc)
                        g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf)
                     End Using

                     Dim tempImage As RasterImage = RasterImageConverter.ConvertFromImage(btmp, ConvertFromImageOptions.None)

                     If image Is Nothing Then
                        image = tempImage
                     Else
                        image.AddPage(tempImage)
                     End If
                  Next
               End Using
            End Using
         End Using

         ' Save all the pages to the file
         ' The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' Load the 3rd page and insert it as the second
         ' The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3)
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Load the last page, and insert it as the first
         ' The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5)
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Replace the 5th page with the 2nd
         ' The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2)
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace)
         image.Dispose()

         ' Delete the 2nd and 6th pages
         ' The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(destFileName, 2)
         ' Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(destFileName, 6 - 1)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveFile2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveFile2.tif");

         // Use GDI+ to create a RasterImage with 4 pages containing text showing the page number
         RasterImage image = null;
         const int pageCount = 4;

         using(System.Drawing.Font f = new System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold))
         using(System.Drawing.Bitmap btmp = new System.Drawing.Bitmap(320, 200))
         using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
         {
            System.Drawing.Rectangle rc = new System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height);
            sf.Alignment = System.Drawing.StringAlignment.Center;
            sf.LineAlignment = System.Drawing.StringAlignment.Center;

            for(int i = 1; i &lt;= pageCount; i++)
            {
               // Create a GDI+ bitmap with the text
               string text = "Page " + i;

               using(System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(btmp))
               {
                  g.FillRectangle(System.Drawing.Brushes.White, rc);
                  g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf);
               }

               RasterImage tempImage = Leadtools.Drawing.RasterImageConverter.ConvertFromImage(btmp, Leadtools.Drawing.ConvertFromImageOptions.None);

               if(image == null)
                  image = tempImage;
               else
                  image.AddPage(tempImage);
            }
         }

         // Save all the pages to the file
         // The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // Load the 3rd page and insert it as the second
         // The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3);
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert);
         image.Dispose();

         // Load the last page, and insert it as the first
         // The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5);
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert);
         image.Dispose();

         // Replace the 5th page with the 2nd
         // The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2);
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace);
         image.Dispose();

         // Delete the 2nd and 6th pages
         // The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(destFileName, 2);
         // Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(destFileName, 6 - 1);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SaveStream2Example(int width, int height, int pageCount, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create a RasterImage with 4 pages containing text showing the page number
         RasterImage image = null;

         // The white background canvas
         Canvas canvas = new Canvas();
         canvas.Width = width;
         canvas.Height = height;
         canvas.Background = new SolidColorBrush(Color.FromArgb(255, 255, 255, 255));

         // The black text block
         TextBlock textBlock = new TextBlock();
         textBlock.FontFamily = new FontFamily("Arial");
         textBlock.FontSize = 36;
         textBlock.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));
         canvas.Children.Add(textBlock);

         for (int i = 1; i &lt;= pageCount; i++)
         {
            // The text we want on the page
            string text = "Page " + i;
            textBlock.Text = text;

            // Center the text
            double left = (canvas.Width - textBlock.ActualWidth) / 2;
            double top = (canvas.Height - textBlock.ActualHeight) / 2;
            textBlock.SetValue(Canvas.LeftProperty, left);
            textBlock.SetValue(Canvas.TopProperty, top);

            // Create a Writeable bitmap with the text
            WriteableBitmap wb = new WriteableBitmap(width, height);

            wb.Render(canvas, null);
            wb.Invalidate();

            // Convert it to a RasterImage
            RasterImage pageImage = RasterImageConverter.ConvertFromSource(wb, ConvertFromSourceOptions.None);

            // Add it as a page to our main raster image
            if (image == null)
               image = pageImage;
            else
               image.AddPage(pageImage);
         }

         // Save all the pages to the file
         // The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // Load the 3rd page and insert it as the second
         // The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3);
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert);
         image.Dispose();

         // Load the last page, and insert it as the first
         // The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5);
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert);
         image.Dispose();

         // Replace the 5th page with the 2nd
         // The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2);
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace);
         image.Dispose();

         // Delete the 2nd and 6th pages
         // The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(outStreamTif, 2);
         // Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(outStreamTif, 6 - 1);
      }</code>
        <code lang="SilverlightVB">      Public Sub SaveStream2Example(ByVal width As Integer, ByVal height As Integer, ByVal pageCount As Integer, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create a RasterImage with 4 pages containing text showing the page number
         Dim image As RasterImage = Nothing

         ' The white background canvas
         Dim canvas As Canvas = New Canvas()
         canvas.Width = width
         canvas.Height = height
         canvas.Background = New SolidColorBrush(Color.FromArgb(255, 255, 255, 255))

         ' The black text block
         Dim textBlock As TextBlock = New TextBlock()
         textBlock.FontFamily = New FontFamily("Arial")
         textBlock.FontSize = 36
         textBlock.Foreground = New SolidColorBrush(Color.FromArgb(255, 0, 0, 0))
         canvas.Children.Add(textBlock)

         Dim i As Integer = 1
         Do While i &lt;= pageCount
            ' The text we want on the page
            Dim text As String = "Page " &amp; i
            textBlock.Text = text

            ' Center the text
            Dim left As Double = (canvas.Width - textBlock.ActualWidth) / 2
            Dim top As Double = (canvas.Height - textBlock.ActualHeight) / 2
            textBlock.SetValue(Canvas.LeftProperty, left)
            textBlock.SetValue(Canvas.TopProperty, top)

            ' Create a Writeable bitmap with the text
            Dim wb As WriteableBitmap = New WriteableBitmap(width, height)

            wb.Render(canvas, Nothing)
            wb.Invalidate()

            ' Convert it to a RasterImage
            Dim pageImage As RasterImage = RasterImageConverter.ConvertFromSource(wb, ConvertFromSourceOptions.None)

            ' Add it as a page to our main raster image
            If image Is Nothing Then
               image = pageImage
            Else
               image.AddPage(pageImage)
            End If
            i += 1
         Loop

         ' Save all the pages to the file
         ' The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' Load the 3rd page and insert it as the second
         ' The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3)
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Load the last page, and insert it as the first
         ' The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5)
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Replace the 5th page with the 2nd
         ' The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(outStreamTif, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2)
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace)
         image.Dispose()

         ' Delete the 2nd and 6th pages
         ' The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(outStreamTif, 2)
         ' Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(outStreamTif, 6 - 1)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves one or more pages of a <see cref="T:Leadtools.RasterImage" /> to a stream in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> where the image data will be saved.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this
            parameter lets you control which pages to overwrite and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. 
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.       /// For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will create a multipage image and save it to a stream before using the Save method to insert and replace pages directly in the file.</para>
        <code lang="VB">      Public Sub SaveStream2Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveStream2.tif")

         ' Create a RasterImage with 4 pages containing text showing the page number
         Dim image As RasterImage = Nothing
         Const pageCount As Integer = 4

         Using f As New System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold)
            Using btmp As New System.Drawing.Bitmap(320, 200)
               Using sf As New System.Drawing.StringFormat()
                  Dim rc As New System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height)
                  sf.Alignment = System.Drawing.StringAlignment.Center
                  sf.LineAlignment = System.Drawing.StringAlignment.Center

                  For i As Integer = 1 To pageCount
                     ' Create a GDI+ bitmap with the text
                     Dim text As String = "Page " + i.ToString()

                     Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(btmp)
                        g.FillRectangle(System.Drawing.Brushes.White, rc)
                        g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf)
                     End Using

                     Dim tempImage As RasterImage = RasterImageConverter.ConvertFromImage(btmp, ConvertFromImageOptions.None)

                     If image Is Nothing Then
                        image = tempImage
                     Else
                        image.AddPage(tempImage)
                     End If
                  Next
               End Using
            End Using
         End Using

         ' Save all the pages to the a stream
         Dim fs As FileStream = File.Create(destFileName)

         ' The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' Load the 3rd page and insert it as the second
         ' The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3)
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Load the last page, and insert it as the first
         ' The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5)
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert)
         image.Dispose()

         ' Replace the 5th page with the 2nd
         ' The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2)
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace)
         image.Dispose()

         ' We will delete pages now from the file
         ' LEADTOOLS does not support deleting pages from
         ' a stream, so we have to close it now and use
         ' the file instead.
         fs.Close()

         ' Delete the 2nd and 6th pages
         ' The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(destFileName, 2)
         ' Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(destFileName, 6 - 1)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveStream2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1_SaveStream2.tif");

         // Create a RasterImage with 4 pages containing text showing the page number
         RasterImage image = null;
         const int pageCount = 4;

         using(System.Drawing.Font f = new System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold))
         using(System.Drawing.Bitmap btmp = new System.Drawing.Bitmap(320, 200))
         using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
         {
            System.Drawing.Rectangle rc = new System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height);
            sf.Alignment = System.Drawing.StringAlignment.Center;
            sf.LineAlignment = System.Drawing.StringAlignment.Center;

            for(int i = 1; i &lt;= pageCount; i++)
            {
               // Create a GDI+ bitmap with the text
               string text = "Page " + i;

               using(System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(btmp))
               {
                  g.FillRectangle(System.Drawing.Brushes.White, rc);
                  g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf);
               }

               RasterImage tempImage = Leadtools.Drawing.RasterImageConverter.ConvertFromImage(btmp, Leadtools.Drawing.ConvertFromImageOptions.None);

               if(image == null)
                  image = tempImage;
               else
                  image.AddPage(tempImage);
            }
         }

         // Save all the pages to the a stream
         FileStream fs = File.Create(destFileName);

         // The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // Load the 3rd page and insert it as the second
         // The file should have 5 pages now: 1, 3, 2, 3, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 3, 3);
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 2, CodecsSavePageMode.Insert);
         image.Dispose();

         // Load the last page, and insert it as the first
         // The file should have 5 pages now: 4, 1, 3, 2, 3, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 5, 5);
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 1, CodecsSavePageMode.Insert);
         image.Dispose();

         // Replace the 5th page with the 2nd
         // The file should have 5 pages now: 4, 1, 3, 2, 1, 4
         image = codecs.Load(fs, 0, CodecsLoadByteOrder.BgrOrGray, 2, 2);
         codecs.Save(image, fs, RasterImageFormat.Tif, 1, 1, 1, 5, CodecsSavePageMode.Replace);
         image.Dispose();

         // We will delete pages now from the file
         // LEADTOOLS does not support deleting pages from
         // a stream, so we have to close it now and use
         // the file instead.
         fs.Close();

         // Delete the 2nd and 6th pages
         // The file should have 5 pages now: 4, 3, 2, 1
         codecs.DeletePage(destFileName, 2);
         // Notice, -1 because we already deleted a page, so 6th page is not 5th
         codecs.DeletePage(destFileName, 6 - 1);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.IO.Stream,System.Int64,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Saves the specified image to a stream using an offset within to begin saving. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> where the image data will be saved.</param>
      <param name="offset">The offset within the specified stream to embed the saved image file. For example, if you specify 5,
            then 5 bytes of other data will precede the embedded file.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <returns>The size of the embedded image file in bytes.</returns>
      <remarks>
        <para>You can use this method to embed an image file in another file.</para>
        <para>If the output file format supports multipage and then all the pages in <paramref name="image" /> will be saved to the
            file.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. 
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit. 
            For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will save an image to a stream before loading it back.</para>
        <code lang="VB">      Public Sub SaveStream3Example()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveStream3.bin")

         ' Load the source image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Create a memory stream
         Dim ms As MemoryStream = New MemoryStream()

         ' Save this image to the stream after the header
         Console.WriteLine("Saving the image")
         Dim position As Long = codecs.Save(image, ms, 0, RasterImageFormat.Cmp, 24)
         image.Dispose()

         Console.WriteLine("{0} bytes saved to the stream")

         ' Save the stream to a file
         Using fs As FileStream = File.Create(destFileName)
            ms.WriteTo(fs)
         End Using

         ms.Close()

         ' Make sure the saved file works

         ' Save the image into disk
         Console.WriteLine("Loading the file back")
         image = codecs.Load(destFileName)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveStream3Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1_SaveStream3.bin");

         // Load the source image
         RasterImage image = codecs.Load(srcFileName);

         // Create a memory stream
         MemoryStream ms = new MemoryStream();

         // Save this image to the stream after the header
         Console.WriteLine("Saving the image");
         long position = codecs.Save(image, ms, 0, RasterImageFormat.Cmp, 24);
         image.Dispose();

         Console.WriteLine("{0} bytes saved to the stream");

         // Save the stream to a file
         using(FileStream fs = File.Create(destFileName))
            ms.WriteTo(fs);

         ms.Close();

         // Make sure the saved file works

         // Save the image into disk
         Console.WriteLine("Loading the file back");
         image = codecs.Load(destFileName);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.IO.Stream,System.Int64,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves the specified image to a stream using an offset within to begin saving. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> where the image data will be saved.</param>
      <param name="offset">The offset within the specified stream to embed the saved image file. For example, if you specify 5,
            then 5 bytes of other data will precede the embedded file.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this
            parameter lets you control which pages to overwrite and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <returns>The size of the embedded image file in bytes.</returns>
      <remarks>
        <para>You can use this method to embed an image file in another file.</para>
        <para>If the output file format supports multipage and then all the pages in <paramref name="image" /> will be saved to the
            file.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. 
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit. 
            For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.IO.Stream,System.Int64,Leadtools.RasterImageFormat,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String)">
      <summary>Saves a stamp in an existing file with default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that contain the thumbnail (stamp) image.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of an existing image file.</param>
      <remarks>
        <para>The stamp will be written to last page in the file. If that page already has a stamp, it will be overwritten; If the
            file to which the stamp is being written does not exist, an exception will occur.</para>
        <para>This method works for regular JPEG files and Exif JPEG files. For regular JPEG files, the stamp saved is always
            uncompressed and can be 8 or 24 bits per pixel. The stamp can be any width and height, but the stamp data and stamp header
            must completely fit in an APP0 marker. Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>For Exif JPEG files, the stamps can be uncompressed or JPEG compressed and must be 24 bits per pixel. Exif JPEG
            stamps are supposed to be 160 x 120. However, LEADTOOLS can save and read Exif JPEG stamps of other dimensions. The stamp,
            along with other information such as the TIFF_HEADER, 0th IFD, 1st IFD, etc. must completely fit in an APP1 marker.
            Therefore, the size must be less than 64k bytes (0xFFFF).</para>
      </remarks>
      <para>
        <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.IO.Stream)">
      <summary>Saves a stamp in an existing stream with default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that contain the thumbnail (stamp) image.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the data an existing image file.</param>
      <remarks>
        <para>The stamp will be written to last page in the file. If that page already has a stamp, it will be overwritten; If the
            file to which the stamp is being written does not exist, an exception will occur.</para>
        <para>This method works for regular JPEG files and Exif JPEG files. For regular JPEG files, the stamp saved is always
            uncompressed and can be 8 or 24 bits per pixel. The stamp can be any width and height, but the stamp data and stamp header
            must completely fit in an APP0 marker. Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>For Exif JPEG files, the stamps can be uncompressed or JPEG compressed and must be 24 bits per pixel. Exif JPEG
            stamps are supposed to be 160 x 120. However, LEADTOOLS can save and read Exif JPEG stamps of other dimensions. The stamp,
            along with other information such as the TIFF_HEADER, 0th IFD, 1st IFD, etc. must completely fit in an APP1 marker.
            Therefore, the size must be less than 64k bytes (0xFFFF).</para>
      </remarks>
      <para>
        <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves a stamp in an existing file with specific options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that contain the thumbnail (stamp) image.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of an existing image file.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this
            parameter lets you control which pages to overwrite and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>The stamp will be written to last page in the file. If that page already has a stamp, it will be overwritten; If the
            file to which the stamp is being written does not exist, an exception will occur.</para>
        <para>This method works for regular JPEG files and Exif JPEG files. For regular JPEG files, the stamp saved is always
            uncompressed and can be 8 or 24 bits per pixel. The stamp can be any width and height, but the stamp data and stamp header
            must completely fit in an APP0 marker. Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>For Exif JPEG files, the stamps can be uncompressed or JPEG compressed and must be 24 bits per pixel. Exif JPEG
            stamps are supposed to be 160 x 120. However, LEADTOOLS can save and read Exif JPEG stamps of other dimensions. The stamp,
            along with other information such as the TIFF_HEADER, 0th IFD, 1st IFD, etc. must completely fit in an APP1 marker.
            Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>
          <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>
        <para>This example will add a stamp to an existing file before reading it back</para>
        <code lang="VB">      Public Sub StampExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithCustomStamp.cmp")
         Dim stampFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Stamp.bmp")

         ' Load the source file name
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Save as the destination image
         codecs.Save(image, destFileName, RasterImageFormat.Cmp, 24)

         ' Resize the image to fit into 128 by 128 pixels keeping the aspect ratio
         Dim rc As LeadRect = New LeadRect(0, 0, 128, 128)
         rc = RasterImage.CalculatePaintModeRectangle(image.ImageWidth, image.ImageHeight, rc, RasterPaintSizeMode.FitAlways, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near)

         Dim command As SizeCommand = New SizeCommand()
         command.Width = rc.Width
         command.Height = rc.Height
         command.Flags = RasterSizeFlags.None
         command.Run(image)

         ' Add the word "Stamp" on the image at the middle
         Dim message As String = "Stamp"

         Using rg As RasterGraphics = RasterImagePainter.CreateGraphics(image)
            Using sf As New System.Drawing.StringFormat()
               sf.Alignment = System.Drawing.StringAlignment.Center
               sf.LineAlignment = System.Drawing.StringAlignment.Center
               Using f As New System.Drawing.Font("Arial", 20, System.Drawing.FontStyle.Bold)
                  Dim rcDraw As New System.Drawing.Rectangle(rc.X, rc.Y, rc.Width, rc.Height)
                  rg.Graphics.DrawString(message, f, System.Drawing.Brushes.Yellow, rcDraw, sf)
               End Using
            End Using
         End Using

         ' Now set this image as the stamp for this file
         codecs.SaveStamp(image, destFileName, 1, 1, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' Load the stamp from the file and save it into another file
         image = codecs.ReadStamp(destFileName, 1)
         codecs.Save(image, stampFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void StampExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1_WithCustomStamp.cmp");
         string stampFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Image1_Stamp.bmp");

         // Load the source file name
         RasterImage image = codecs.Load(srcFileName);

         // Save as the destination image
         codecs.Save(image, destFileName, RasterImageFormat.Cmp, 24);

         // Resize the image to fit into 128 by 128 pixels keeping the aspect ratio
         LeadRect rc = new LeadRect(0, 0, 128, 128);
         rc = RasterImage.CalculatePaintModeRectangle(
            image.ImageWidth,
            image.ImageHeight,
            rc,
            RasterPaintSizeMode.FitAlways,
            RasterPaintAlignMode.Near,
            RasterPaintAlignMode.Near);

         SizeCommand command = new SizeCommand();
         command.Width = rc.Width;
         command.Height = rc.Height;
         command.Flags = RasterSizeFlags.None;
         command.Run(image);

         // Add the word "Stamp" on the image at the middle
         string message = "Stamp";

         using(Leadtools.Drawing.RasterGraphics rg = Leadtools.Drawing.RasterImagePainter.CreateGraphics(image))
         {
            using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
            {
               sf.Alignment = System.Drawing.StringAlignment.Center;
               sf.LineAlignment = System.Drawing.StringAlignment.Center;
               using(System.Drawing.Font f = new System.Drawing.Font("Arial", 20, System.Drawing.FontStyle.Bold))
               {
                  System.Drawing.Rectangle rcDraw = new System.Drawing.Rectangle(rc.X, rc.Y, rc.Width, rc.Height);
                  rg.Graphics.DrawString(message, f, System.Drawing.Brushes.Yellow, rcDraw, sf);
               }
            }
         }

         // Now set this image as the stamp for this file
         codecs.SaveStamp(image, destFileName, 1, 1, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // Load the stamp from the file and save it into another file
         image = codecs.ReadStamp(destFileName, 1);
         codecs.Save(image, stampFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void StampExample(RasterImage image, Stream outStreamFileWithStamp, Stream outStreamStampOnly)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Save as the destination image
         codecs.Save(image, outStreamFileWithStamp, RasterImageFormat.Cmp, 24);

         // Resize the image to fit into 128 by 128 pixels keeping the aspect ratio
         LeadRect rc = new LeadRect(0, 0, 128, 128);
         rc = RasterImage.CalculatePaintModeRectangle(
            image.ImageWidth,
            image.ImageHeight,
            rc,
            RasterPaintSizeMode.FitAlways,
            RasterPaintAlignMode.Near,
            RasterPaintAlignMode.Near);

         SizeCommand command = new SizeCommand();
         command.Width = rc.Width;
         command.Height = rc.Height;
         command.Flags = RasterSizeFlags.None;
         command.Run(image);

         // Add the word "Stamp" on the image at the middle
         string message = "Stamp";

         // To add "Stamp", we will create a WriteableBitmap from the RasterImage
         // then add a canvas and a text block on top of it

         // Create a writeable bitmap from the image source
         WriteableBitmap bitmap = new WriteableBitmap(image.ImageWidth, image.ImageHeight);

         // The white background canvas
         Canvas canvas = new Canvas();
         canvas.Width = image.ImageWidth;
         canvas.Height = image.ImageHeight;

         // Get the RasterImage as an ImageSource
         ImageSource source = RasterImageConverter.ConvertToSource(image, ConvertToSourceOptions.UseSetSource);

         // The image for the ImageSource
         Image img = new Image();
         img.Source = source;

         // The black text block
         TextBlock textBlock = new TextBlock();
         textBlock.FontFamily = new FontFamily("Arial");
         textBlock.FontSize = 20;
         textBlock.Text = message;
         textBlock.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));

         // Add the image source and the text block
         canvas.Children.Add(img);
         canvas.Children.Add(textBlock);

         // Center the text
         double left = (canvas.Width - textBlock.ActualWidth) / 2;
         double top = (canvas.Height - textBlock.ActualHeight) / 2;
         textBlock.SetValue(Canvas.LeftProperty, left);
         textBlock.SetValue(Canvas.TopProperty, top);

         // Render
         bitmap.Render(canvas, null);
         bitmap.Invalidate();

         image.Dispose();

         // Re-create the RasterImage from the WriteableBitmap
         image = RasterImageConverter.ConvertFromSource(bitmap, ConvertFromSourceOptions.None);

         // stamp has to be 24-bit, so convert it back
         ColorResolutionCommand cmd = new ColorResolutionCommand();
         cmd.BitsPerPixel = 24;
         cmd.Run(image);

         // This image contains the stamp, save it to the output stream
         codecs.SaveStamp(image, outStreamFileWithStamp);
         image.Dispose();

         // Load the stamp from the file and save it to the other output stream
         image = codecs.ReadStamp(outStreamFileWithStamp, 1);
         codecs.Save(image, outStreamStampOnly, RasterImageFormat.Bmp, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Sub StampExample(ByVal image As RasterImage, ByVal outStreamFileWithStamp As Stream, ByVal outStreamStampOnly As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Save as the destination image
         codecs.Save(image, outStreamFileWithStamp, RasterImageFormat.Cmp, 24)

         ' Resize the image to fit into 128 by 128 pixels keeping the aspect ratio
         Dim rc As LeadRect = New LeadRect(0, 0, 128, 128)
         rc = RasterImage.CalculatePaintModeRectangle(image.ImageWidth, image.ImageHeight, rc, RasterPaintSizeMode.FitAlways, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near)

         Dim command As SizeCommand = New SizeCommand()
         command.Width = rc.Width
         command.Height = rc.Height
         command.Flags = RasterSizeFlags.None
         command.Run(image)

         ' Add the word "Stamp" on the image at the middle
         Dim message As String = "Stamp"

         ' To add "Stamp", we will create a WriteableBitmap from the RasterImage
         ' then add a canvas and a text block on top of it

         ' Create a writeable bitmap from the image source
         Dim bitmap As WriteableBitmap = New WriteableBitmap(image.ImageWidth, image.ImageHeight)

         ' The white background canvas
         Dim canvas As Canvas = New Canvas()
         canvas.Width = image.ImageWidth
         canvas.Height = image.ImageHeight

         ' Get the RasterImage as an ImageSource
         Dim source As ImageSource = RasterImageConverter.ConvertToSource(image, ConvertToSourceOptions.UseSetSource)

         ' The image for the ImageSource
         Dim img As Image = New Image()
         img.Source = source

         ' The black text block
         Dim textBlock As TextBlock = New TextBlock()
         textBlock.FontFamily = New FontFamily("Arial")
         textBlock.FontSize = 20
         textBlock.Text = message
         textBlock.Foreground = New SolidColorBrush(Color.FromArgb(255, 0, 0, 0))

         ' Add the image source and the text block
         canvas.Children.Add(img)
         canvas.Children.Add(textBlock)

         ' Center the text
         Dim left As Double = (canvas.Width - textBlock.ActualWidth) / 2
         Dim top As Double = (canvas.Height - textBlock.ActualHeight) / 2
         textBlock.SetValue(Canvas.LeftProperty, left)
         textBlock.SetValue(Canvas.TopProperty, top)

         ' Render
         bitmap.Render(canvas, Nothing)
         bitmap.Invalidate()

         image.Dispose()

         ' Re-create the RasterImage from the WriteableBitmap
         image = RasterImageConverter.ConvertFromSource(bitmap, ConvertFromSourceOptions.None)

         ' stamp has to be 24-bit, so convert it back
         Dim cmd As ColorResolutionCommand = New ColorResolutionCommand()
         cmd.BitsPerPixel = 24
         cmd.Run(image)

         ' This image contains the stamp, save it to the output stream
         codecs.SaveStamp(image, outStreamFileWithStamp)
         image.Dispose()

         ' Load the stamp from the file and save it to the other output stream
         image = codecs.ReadStamp(outStreamFileWithStamp, 1)
         codecs.Save(image, outStreamStampOnly, RasterImageFormat.Bmp, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.IO.Stream,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves a stamp in an existing stream with specific options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that contain the thumbnail (stamp) image.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the data an existing image file.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this
            parameter lets you control which pages to overwrite and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>The stamp will be written to last page in the file. If that page already has a stamp, it will be overwritten; If the
            file to which the stamp is being written does not exist, an exception will occur.</para>
        <para>This method works for regular JPEG files and Exif JPEG files. For regular JPEG files, the stamp saved is always
            uncompressed and can be 8 or 24 bits per pixel. The stamp can be any width and height, but the stamp data and stamp header
            must completely fit in an APP0 marker. Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>For Exif JPEG files, the stamps can be uncompressed or JPEG compressed and must be 24 bits per pixel. Exif JPEG
            stamps are supposed to be 160 x 120. However, LEADTOOLS can save and read Exif JPEG stamps of other dimensions. The stamp,
            along with other information such as the TIFF_HEADER, 0th IFD, 1st IFD, etc. must completely fit in an APP1 marker.
            Therefore, the size must be less than 64k bytes (0xFFFF).</para>
        <para>
          <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)">
      <summary>Initializes a file-load process in which you control the input stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>The desired color order. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>You must call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" /> method to supply buffered data, and you must call <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> when
            the loading is complete.</para>
        <para>This file-load process is useful when receiving transmitted images, such as those on the Internet. It works the same
            way as the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods, except that your code supplies the image data. The file-load process works as
            follows:</para>
        <para>
          <list type="number">
            <item>
              <description>
            You call the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" /> method to initialize the file-load process.</description>
            </item>
            <item>
              <description>
            You create a buffer, and each time you fill it with information, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" />
            method, which sends the data to the file-load process just as if the data were being read from a file on disk.
            </description>
            </item>
            <item>
              <description>
                <para>Whenever it has enough data to do so, the file-load process behaves the same as in the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />
            methods. It allocates and begins loading the image. It calls your <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event handler, if one is specified,
            whenever it has enough data in its input buffer.</para>
                <para>The file-load process updates information in the <see cref="T:Leadtools.RasterImage" /> when it has received enough
            information to do so.  The file-load process will make the first call to your event handler whenever this information is
            available.</para>
              </description>
            </item>
            <item>
              <description>
            At any time after calling <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />, you can call <see cref="M:Leadtools.Codecs.RasterCodecs.CancelFeedLoad" /> to gracefully abort the
            feed load operation.  This allows you to end the feed load process without throwing an exception.
            </description>
            </item>
            <item>
              <description>
            To end the file-load process, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> method, which cleans up the process, and returns
            the loaded <see cref="T:Leadtools.RasterImage" />, if successful. If you call this method before supplying the complete file, it will
            successfully clean up the process, but will throw an exception. You should catch the exception if the load is canceled
            purposely.</description>
            </item>
          </list>
        </para>
        <para>
          <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>This method cannot be used in combination with <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will use feed load to load an image from a url</para>
        <code lang="VB">      Public Sub FeedLoadExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim url As String = "http://www.leadtools.com/images/web-header.jpg"
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "FeedLoad.bmp")

         ' Create a WebRequest for the URL
         Dim request As WebRequest = WebRequest.Create(url)
         request.Proxy.Credentials = CredentialCache.DefaultCredentials

         ' reduce the timeout to 20sec
         request.Timeout = 20000

         Dim response As WebResponse = request.GetResponse()
         Try
            Dim strm As Stream = response.GetResponseStream()

            ' Read chunks from the stream and feed load to the image
            codecs.StartFeedLoad(0, CodecsLoadByteOrder.BgrOrGray)

            Const bufferSize As Integer = 1024
            Dim buffer(bufferSize - 1) As Byte

            Dim read As Integer

            Do
               System.Windows.Forms.Application.DoEvents()

               read = strm.Read(buffer, 0, bufferSize)
               Console.WriteLine("Downloading {0} bytes", read)
               If read &gt; 0 Then
                  codecs.FeedLoad(buffer, 0, read)
               End If
            Loop While read &gt; 0
         Finally
            response.Close()
         End Try

         Dim image As RasterImage = codecs.StopFeedLoad()

         ' Save the image to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FeedLoadExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string url = @"http://www.leadtools.com/images/page_graphics/leadlogo.png";
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,  "FeedLoad.bmp");

         // Create a WebRequest for the URL
         WebRequest request = WebRequest.Create(url);
         request.Proxy.Credentials = CredentialCache.DefaultCredentials;

         // reduce the timeout to 20sec
         request.Timeout = 20000;

         WebResponse response = request.GetResponse();
         try
         {
            Stream strm = response.GetResponseStream();

            // Read chunks from the stream and feed load to the image
            codecs.StartFeedLoad(0, CodecsLoadByteOrder.BgrOrGray);

            const int bufferSize = 1024;
            byte[] buffer = new byte[bufferSize];

            int read;

            do
            {
               System.Windows.Forms.Application.DoEvents();

               read = strm.Read(buffer, 0, bufferSize);
               Console.WriteLine("Downloading {0} bytes", read);
               if(read &gt; 0)
                  codecs.FeedLoad(buffer, 0, read);
            }
            while(read &gt; 0);
         }
         finally
         {
            response.Close();
         }

         RasterImage image = codecs.StopFeedLoad();

         // Save the image to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">
      <summary>Initializes a file-load process in which you control the input stream with specific number of pages. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>The desired color order. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <remarks>
        <para>You must call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" /> method to supply buffered data, and you must call <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> when
            the loading is complete.</para>
        <para>This file-load process is useful when receiving transmitted images, such as those on the Internet. It works the same
            way as the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods, except that your code supplies the image data. The file-load process works as
            follows:</para>
        <para>
          <list type="number">
            <item>
              <description>
            You call the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" /> method to initialize the file-load process.</description>
            </item>
            <item>
              <description>
            You create a buffer, and each time you fill it with information, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" />
            method, which sends the data to the file-load process just as if the data were being read from a file on disk.
            </description>
            </item>
            <item>
              <description>
                <para>Whenever it has enough data to do so, the file-load process behaves the same as in the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />
            methods. It allocates and begins loading the image. It calls your <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event handler, if one is specified,
            whenever it has enough data in its input buffer.</para>
                <para>The file-load process updates information in the <see cref="T:Leadtools.RasterImage" /> when it has received enough
            information to do so.  The file-load process will make the first call to your event handler whenever this information is
            available.</para>
              </description>
            </item>
            <item>
              <description>
            At any time after calling <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />, you can call <see cref="M:Leadtools.Codecs.RasterCodecs.CancelFeedLoad" /> to gracefully abort the
            feed load operation.  This allows you to end the feed load process without throwing an exception.
            </description>
            </item>
            <item>
              <description>
            To end the file-load process, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> method, which cleans up the process, and returns
            the loaded <see cref="T:Leadtools.RasterImage" />, if successful. If you call this method before supplying the complete file, it will
            successfully clean up the process, but will throw an exception. You should catch the exception if the load is canceled
            purposely.</description>
            </item>
            <item>
              <description>You can also call the <see cref="P:Leadtools.Codecs.RasterCodecs.IsFeedLoadDone" /> property to check if the framework has enough data to 
            load the pages specified in <paramref name="firstPage" /> and <paramref name="lastPage" />.</description>
            </item>
          </list>
        </para>
        <para>
          <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>This method cannot be used in combination with <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will use feed load to load a few pages of a multipage file</para>
        <code lang="VB">      Public Sub FeedLoadMultiExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "FeedLoadMulti.tif")

         ' Load pages 2 through 5 from the file by reading chunks from the stream
         codecs.StartFeedLoad(0, CodecsLoadByteOrder.BgrOrGray, 2, 5)

         Dim fs As FileStream = File.OpenRead(srcFileName)
         Try
            Const bufferSize As Integer = 1024
            Dim buffer(bufferSize - 1) As Byte

            Dim read As Integer

            Do
               System.Windows.Forms.Application.DoEvents()

               read = fs.Read(buffer, 0, bufferSize)
               Console.WriteLine("Feeding {0} bytes", read)
               If (read &gt; 0) Then
                  codecs.FeedLoad(buffer, 0, read)
               End If
            Loop While read &gt; 0 AndAlso Not codecs.IsFeedLoadDone
         Finally
            fs.Close()
         End Try

         Dim image As RasterImage = codecs.StopFeedLoad()
         Console.WriteLine("{0} pages loaded", image.PageCount)

         ' Save the image to disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FeedLoadMultiExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,  "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,  "FeedLoadMulti.tif");

         // Load pages 2 through 5 from the file by reading chunks from the stream
         codecs.StartFeedLoad(0, CodecsLoadByteOrder.BgrOrGray, 2, 5);

         using(FileStream fs = File.OpenRead(srcFileName))
         {
            const int bufferSize = 1024;
            byte[] buffer = new byte[bufferSize];

            int read;

            do
            {
               System.Windows.Forms.Application.DoEvents();

               read = fs.Read(buffer, 0, bufferSize);
               Console.WriteLine("Feeding {0} bytes", read);
               if(read &gt; 0)
                  codecs.FeedLoad(buffer, 0, read);
            }
            while(read &gt; 0 &amp;&amp; !codecs.IsFeedLoadDone);
         }

         RasterImage image = codecs.StopFeedLoad();
         Console.WriteLine("{0} pages loaded", image.PageCount);

         // Save the image to disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)">
      <summary>Supplies image data to the file-load process from a buffer that you provide. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">The image file data.</param>
      <param name="offset">Offset from the beginning of the buffer to where the image data starts.</param>
      <param name="length">Total size (in bytes) of the image data.</param>
      <remarks>
        <para>Use this method with the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> methods.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image. For these images, the
            load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.IntPtr,System.Int32)">
      <summary>Supplies unmanaged memory image data to the file-load process from a buffer that you provide. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">The image file unmanaged memory data.</param>
      <param name="length">Total size (in bytes) of the image data.</param>
      <remarks>
        <para>Use this method with the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad" /> methods.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image. For these images, the
            load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopFeedLoad">
      <summary>Ends a file-load process in which you control the input stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>The image loaded by the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" /> process.</returns>
      <remarks>
        <para>This cleans up all the variables and buffers allocated by the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" />
            methods and resets all internal variables to their default settings.</para>
        <para>You must call this method to complete a file load that was started with <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</para>
        <para>If you call this method before supplying the complete file, it will successfully clean up the process, but will throw
            a file-read exception. You should trap the error if the load is canceled purposely.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CancelFeedLoad">
      <summary>This method can be used to purposefully cancel the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" /> process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This method can be used to gracefully cancel a feed load operation.  For example, during feed load progressing, the
            user might click a cancel button to abort the operation.  You can then call this method to end the feed load process
            without throwing an exception.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)">
      <summary>Initializes a file information process in which you control the input stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <param name="pageNumber">1-based index to the page number to query.</param>
      <remarks>
        <para>You must call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" /> method to supply buffered data, and you must call
            <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> when the process is complete.</para>
        <para>This file information process is useful when receiving transmitted images, such as those on the Internet. It works the same
            way as the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> method, except that your code supplies the image data. The file information process works as
            follows:</para>
        <para>
          <list type="number">
            <item>
              <description>
            You call the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" /> method to initialize the file information process.</description>
            </item>
            <item>
              <description>
                <para>You create a buffer, and each time you fill it with information, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" />
            method, which sends the data to the file information process just as if the data were being read from a file on disk.</para>
                <para>If the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" /> returns true, this means the frameworks does not have enough data to get the
            information required; you must read more data and call the <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" /> again. When <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" />
            returns false, the framework has gathered enough data and you can break out of the loop.</para>
              </description>
            </item>
            <item>
              <description>
            At any time after calling <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />, you can call <see cref="M:Leadtools.Codecs.RasterCodecs.CancelFeedGetInformation" /> to gracefully
            abort the feed operation.  This allows you to end the feed process without throwing an exception.
            </description>
            </item>
            <item>
              <description>
            To end the file information process, you call the <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> method, which cleans up the process,
            and returns an instance of the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> class if successful. If you call this method before enough image data
            is passed to gather the information, it will successfully clean up the process, but will throw an exception. You should catch the
            exception if the process is canceled purposely.
            </description>
            </item>
          </list>
        </para>
        <para>This method cannot be used in combination with <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" />.</para>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
      </remarks>
      <example>
        <para>This example will use feed information to get information of an image from a url</para>
        <code lang="VB">      Public Sub FeedGetInformationExample()
         Dim codecs As New RasterCodecs()

         Dim url As String = "http://www.leadtools.com/images/web-header.jpg"

         ' Create a WebRequest for the URL
         Dim request As WebRequest = WebRequest.Create(url)
         request.Proxy.Credentials = CredentialCache.DefaultCredentials

         ' reduce the timeout to 20 sec
         request.Timeout = 20000

         Dim response As WebResponse = request.GetResponse()

         Try
            Dim strm As Stream = response.GetResponseStream()

            ' Read chunks from the stream and feed load to the image
            codecs.StartFeedGetInformation(True, 1)

            Const bufferSize As Integer = 1024
            Dim buffer(bufferSize - 1) As Byte

            Dim more As Boolean

            Do
               System.Windows.Forms.Application.DoEvents()

               Dim read As Integer = strm.Read(buffer, 0, bufferSize)
               Console.WriteLine("Downloading {0} bytes", read)
               If (read &gt; 0) Then
                  more = codecs.FeedGetInformation(buffer, 0, read)
               Else
                  ' no more image data in the stream
                  more = False
               End If
            Loop While more
         Finally
            response.Close()
         End Try

         Dim info As CodecsImageInfo = codecs.StopFeedGetInformation()

         ' Clean up
         codecs.Dispose()

         ' Show the information
         Console.WriteLine(info.ToString())
      End Sub</code>
        <code lang="CS">      public void FeedGetInformationExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string url = @"http://www.leadtools.com/images/page_graphics/leadlogo.png";

         // Create a WebRequest for the URL
         WebRequest request = WebRequest.Create(url);
         request.Proxy.Credentials = CredentialCache.DefaultCredentials;

         // reduce the timeout to 20 sec
         request.Timeout = 20000;

         WebResponse response = request.GetResponse();

         try
         {
            Stream strm = response.GetResponseStream();

            // Read chunks from the stream and feed load to the image
            codecs.StartFeedGetInformation(true, 1);

            const int bufferSize = 1024;
            byte[] buffer = new byte[bufferSize];

            bool more;

            do
            {
               System.Windows.Forms.Application.DoEvents();

               int read = strm.Read(buffer, 0, bufferSize);
               Console.WriteLine("Downloading {0} bytes", read);
               if(read &gt; 0)
                  more = codecs.FeedGetInformation(buffer, 0, read);
               else
               {
                  // no more image data in the stream
                  more = false;
               }
            }
            while(more);
         }
         finally
         {
            response.Close();
         }

         CodecsImageInfo info = codecs.StopFeedGetInformation();

         // Clean up
         codecs.Dispose();

         // Show the information
         Console.WriteLine(info.ToString());
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)">
      <summary>Supplies image data to the file information process from a buffer that you provide. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">The image file data.</param>
      <param name="offset">Offset from the beginning of the buffer to where the image data starts.</param>
      <param name="length">Total size (in bytes) of the image data.</param>
      <returns>true if the get information process requires more data, false otherwise. When this method returns false,
            you can break out of the loop and call <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> to obtain the <see cref="T:Leadtools.Codecs.CodecsImageInfo" />
            object containing the information of the image file.</returns>
      <remarks>
        <para>Use this method with the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> methods.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.IntPtr,System.Int64)">
      <summary>Supplies unmanaged memory image data to the file information process from a buffer that you provide. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">The image file unmanaged memory data.</param>
      <param name="length">Total size (in bytes) of the image data.</param>
      <returns>true if the get information process requires more data, false otherwise. When this method returns false,
            you can break out of the loop and call <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> to obtain the <see cref="T:Leadtools.Codecs.CodecsImageInfo" />
            object containing the information of the image file.</returns>
      <remarks>
        <para>Use this method with the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation" /> methods.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopFeedGetInformation">
      <summary>Ends a file information process in which you control the input stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>An <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object containing information about the image data provided by <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" />.</returns>
      <remarks>
        <para>This cleans up all the variables and buffers allocated by the <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" /> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.FeedGetInformation(System.Byte[],System.Int32,System.Int32)" /> methods and resets all internal variables to their default settings.</para>
        <para>You must call this method to complete the file information that was started with <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</para>
        <para>If you call this method before enough data is supplied to obtain the image information, it will successfully clean up the process, but will
            throw an exception. You should trap the error if the process is canceled purposely.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CancelFeedGetInformation">
      <summary>This method can be used to purposefully cancel the feed information process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>This method can be used to gracefully cancel a feed information operation.  For example, during feed information progressing,
            the user might click a cancel button to abort the operation.  You can then call this method to end the feed information process
            without throwing an exception.</para>
        <para>For a description of how the methods relate to each other, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedGetInformation(System.Boolean,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DeletePage(System.String,System.Int32)">
      <summary>Deletes the specified page from a multipage file, if the format supports delete operations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file from which to delete the page.</param>
      <param name="page">1-based index of the page to delete. Use -1 to delete the last page. Use 1 to delete the first page.</param>
      <remarks>
            The following file formats support delete operations:
            <list><item><description>TIFF (most TIFF formats, including JTIF, but excluding EXIF)</description></item><item><description>PCX</description></item><item><description>Winfax</description></item></list></remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DeletePage(System.IO.Stream,System.Int32)">
      <summary>Deletes the specified page from a multipage file in a stream, if the format supports delete operations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the data of the image file from which to delete the page.</param>
      <param name="page">1-based index of the page to delete. Use -1 to delete the last page. Use 1 to delete the first page.</param>
      <remarks>
            The following file formats support delete operations:
            <list><item><description>TIFF (most TIFF formats, including JTIF, but excluding EXIF)</description></item><item><description>PCX</description></item><item><description>Winfax</description></item></list></remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadLoadResolutions(System.String)">
      <summary>Examines a file to determine which resolutions it contains. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file to query.</param>
      <returns>A <see cref="T:Leadtools.LeadSize" /> structure containing the available resolutions.</returns>
      <remarks>
        <para>A FlashPix, PhotoCD, ECW, JPEG 2000 or JBIG/JBIG2 file can contain more than one copy of the same image, each at a different physical
            resolution (width and height in pixels).</para>
        <para>After you get the available resolutions, you can use any of the following to specify the one to be loaded:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJbigLoadOptions.Resolution">CodecsJbigLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.J2kResolution">CodecsJpeg2000LoadOptions.J2kResolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.CmwResolution">CodecsJpeg2000LoadOptions.CmwResolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsFpxLoadOptions.Resolution">CodecsFpxLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsPcdLoadOptions.Resolution">CodecsPcdLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsEcwLoadOptions.Resolution">CodecsEcwLoadOptions.Resolution</see>
              </description>
            </item>
          </list>
        </para>
        <para>For more information, refer to <see cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</see>.</para>
      </remarks>
      <example>
        <para>This example shows how many physical resolutions are available, selects the smallest one, then loads the file.</para>
        <code lang="VB">      Private Sub ReadLoadResolutionsExample(ByVal jbigFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the number of resolutions (sizes) available in this file
         Dim resolution As LeadSize() = codecs.ReadLoadResolutions(jbigFileName)
         If resolution.Length &gt; 0 Then
            Console.WriteLine("{0} resolutions available", resolution.Length)
            Dim i As Integer = 0
            Do While i &lt; resolution.Length
               Console.WriteLine("{0} by {1}", resolution(i).Width, resolution(i).Height)
               i += 1
            Loop

            ' Set the size to load, the smallest size in this case */
            codecs.Options.Jpeg2000.Load.J2kResolution = resolution(0)

            ' Get the info about the image to show its original size
            Dim info As CodecsImageInfo = codecs.GetInformation(jbigFileName, False)
            Console.WriteLine("Size of image according to GetInformation is {0} by {1}", info.Width, info.Height)

            ' Load the image, keeping the bits per pixel of the file
            Dim image As RasterImage = codecs.Load(jbigFileName)
            Console.WriteLine("Size of image loaded is {0} by {1}", image.Width, image.Height)

            image.Dispose()
         Else
            Console.WriteLine("No resolutions found")
         End If

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void ReadLoadResolutionsExample(string jbigFileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the number of resolutions (sizes) available in this file
         LeadSize[] resolution = codecs.ReadLoadResolutions(jbigFileName);
         if(resolution.Length &gt; 0)
         {
            Console.WriteLine("{0} resolutions available", resolution.Length);
            for(int i = 0; i &lt; resolution.Length; i++)
               Console.WriteLine("{0} by {1}", resolution[i].Width, resolution[i].Height);

            // Set the size to load, the smallest size in this case */
            codecs.Options.Jpeg2000.Load.J2kResolution = resolution[0];

            // Get the info in of the image to show its original size
            CodecsImageInfo info = codecs.GetInformation(jbigFileName, false);
            Console.WriteLine("Size of image according to GetInformation is {0} by {1}", info.Width, info.Height);

            // Load the image, keeping the bits per pixel of the file
            RasterImage image = codecs.Load(jbigFileName);
            Console.WriteLine("Size of image loaded is {0} by {1}", image.Width, image.Height);

            image.Dispose();
         }
         else
            Console.WriteLine("No resolutions found");

         // Clean up
         codecs.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      public void ReadLoadResolutionsExample(Stream inStreamJbig)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the number of resolutions (sizes) available in this file
         LeadSize[] resolution = codecs.ReadLoadResolutions(inStreamJbig);
         if(resolution.Length &gt; 0)
         {
            Debug.WriteLine("{0} resolutions available", resolution.Length);
            for(int i = 0; i &lt; resolution.Length; i++)
               Debug.WriteLine("{0} by {1}", resolution[i].Width, resolution[i].Height);

            // Set the size to load, the smallest size in this case */
            codecs.Options.Jpeg2000.Load.J2kResolution = resolution[0];

            // Get the info in of the image to show its original size
            CodecsImageInfo info = codecs.GetInformation(inStreamJbig, false);
            Debug.WriteLine("Size of image according to GetInformation is {0} by {1}", info.Width, info.Height);

            // Load the image, keeping the bits per pixel of the file
            RasterImage image = codecs.Load(inStreamJbig);
            Debug.WriteLine("Size of image loaded is {0} by {1}", image.Width, image.Height);

            image.Dispose();
         }
         else
            Debug.WriteLine("No resolutions found");
      }</code>
        <code lang="SilverlightVB">      Public Sub ReadLoadResolutionsExample(ByVal inStreamJbig As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the number of resolutions (sizes) available in this file
         Dim resolution As LeadSize() = codecs.ReadLoadResolutions(inStreamJbig)
         If resolution.Length &gt; 0 Then
            Debug.WriteLine("{0} resolutions available", resolution.Length)
            Dim i As Integer = 0
            Do While i &lt; resolution.Length
               Debug.WriteLine("{0} by {1}", resolution(i).Width, resolution(i).Height)
               i += 1
            Loop

            ' Set the size to load, the smallest size in this case */
            codecs.Options.Jpeg2000.Load.J2kResolution = resolution(0)

            ' Get the info in of the image to show its original size
            Dim info As CodecsImageInfo = codecs.GetInformation(inStreamJbig, False)
            Debug.WriteLine("Size of image according to GetInformation is {0} by {1}", info.Width, info.Height)

            ' Load the image, keeping the bits per pixel of the file
            Dim image As RasterImage = codecs.Load(inStreamJbig)
            Debug.WriteLine("Size of image loaded is {0} by {1}", image.Width, image.Height)

            image.Dispose()
         Else
            Debug.WriteLine("No resolutions found")
         End If
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadLoadResolutions(System.IO.Stream)">
      <summary>Examines a stream to determine which resolutions it contains. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the data of the image file to query.</param>
      <returns>A <see cref="T:Leadtools.LeadSize" /> structure containing the available resolutions.</returns>
      <remarks>
        <para>A FlashPix, PhotoCD, ECW, JPEG 2000 or JBIG/JBIG2 file can contain more than one copy of the same image, each at a different physical
            resolution (width and height in pixels).</para>
        <para>After you get the available resolutions, you can use any of the following to specify the one to be loaded:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJbigLoadOptions.Resolution">CodecsJbigLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.J2kResolution">CodecsJpeg2000LoadOptions.J2kResolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsJpeg2000LoadOptions.CmwResolution">CodecsJpeg2000LoadOptions.CmwResolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsFpxLoadOptions.Resolution">CodecsFpxLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsPcdLoadOptions.Resolution">CodecsPcdLoadOptions.Resolution</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsEcwLoadOptions.Resolution">CodecsEcwLoadOptions.Resolution</see>
              </description>
            </item>
          </list>
        </para>
        <para>For more information, refer to <see cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadLoadResolutions(System.String)">ReadLoadResolutions</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Convert(System.String,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsImageInfo)">
      <summary>Converts an image file from one format to another, creating a new file in the new format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcFileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="destFileName">A <see cref="T:System.String" /> containing the output file name.</param>
      <param name="format">The output file format. For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="width">New width of the output image. If this value is not 0, then the output file will be resized to the
            <paramref name="width" /> value. Use a value of 0 if you do not wish to resize the output file.</param>
      <param name="height">New height of the output image. If this value is not 0, then the output file will be resized to the
            <paramref name="height" /> value. Use a value of 0 if you do not wish to resize the output file.</param>
      <param name="bitsPerPixel">The output image pixel depth. Note that not all bits per pixel are available to
            all file formats.</param>
      <param name="info">A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> obect specifying more options for the conversion.</param>
      <keywords>Bits per pixel | Color space | Image converter</keywords>
      <remarks>
        <para>If you convert to a lower bits-per-pixel format, this method optimizes the colors automatically. For example, when
            converting a 24-bit file (16 million colors) to an 8-bit file (256 colors) this method selects the best 256 colors to
            represent the 24-bit image</para>
        <para>Note that this is a high-level method that does conversion from all possible formats to all possible formats.</para>
      </remarks>
      <example>
        <para>This example will convert create a <see cref="T:Leadtools.RasterImage" /> that contains as pages, thumbnails for all the CMP images in a folder</para>
        <code lang="VB">      Public Sub ConvertExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = False

         Dim destPath As String = Path.Combine(LEAD_VARS.ImagesDir, "GifThumbnails")

         If (Not Directory.Exists(destPath)) Then
            Directory.CreateDirectory(destPath)
         End If

         Const thumbWidth As Integer = 128
         Const thumbHeight As Integer = 128
         Dim destRect As LeadRect = New LeadRect(0, 0, thumbWidth, thumbHeight)

         ' Get the CMP files in this folder
         Dim files As String() = Directory.GetFiles(LEAD_VARS.ImagesDir, "*.cmp")
         For Each srcFileName As String In files
            ' Make sure that this is a file we can load
            Dim info As CodecsImageInfo = codecs.GetInformation(srcFileName, False)
            If info.Format &lt;&gt; RasterImageFormat.Unknown Then
               ' Convert to thumbnails (we want to keep the aspect ratio)
               Dim rc As LeadRect = RasterImage.CalculatePaintModeRectangle(thumbWidth, thumbHeight, destRect, RasterPaintSizeMode.FitAlways, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near)

               ' rc.Width and Height contains the image size we want with good aspect ratio
               Dim name As String = Path.GetFileNameWithoutExtension(srcFileName)
               Dim destFileName As String = Path.Combine(destPath, name &amp; "_thumb.gif")

               ' Delete the thumbnail if its already there
               If File.Exists(destFileName) Then
                  File.Delete(destFileName)
               End If

               codecs.Convert(srcFileName, destFileName, RasterImageFormat.Gif, rc.Width, rc.Height, 8, info)
            End If
         Next srcFileName

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ConvertExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = false;

         string srcPath = LEAD_VARS.ImagesDir;
         string destPath = Path.Combine(LEAD_VARS.ImagesDir, "GifThumbnails");

         if(!Directory.Exists(destPath))
            Directory.CreateDirectory(destPath);

         const int thumbWidth = 128;
         const int thumbHeight = 128;
         LeadRect destRect = new LeadRect(0, 0, thumbWidth, thumbHeight);

         // Get the CMP files in this folder
         string[] files = Directory.GetFiles(srcPath, "*.cmp");
         foreach(string srcFileName in files)
         {
            // Make sure that this is a file we can load
            CodecsImageInfo info = codecs.GetInformation(srcFileName, false);
            if(info.Format != RasterImageFormat.Unknown)
            {
               // Convert to thumbnails (we want to keep the aspect ratio)
               LeadRect rc = RasterImage.CalculatePaintModeRectangle(
                  thumbWidth,
                  thumbHeight,
                  destRect,
                  RasterPaintSizeMode.FitAlways,
                  RasterPaintAlignMode.Near,
                  RasterPaintAlignMode.Near);

               // rc.Width and Height contains the image size we want with good aspect ratio
               string name = Path.GetFileNameWithoutExtension(srcFileName);
               string destFileName = Path.Combine(destPath, name + "_thumb.gif");

               // Delete the thumbnail if its already there
               if(File.Exists(destFileName))
                  File.Delete(destFileName);

               codecs.Convert(srcFileName, destFileName, RasterImageFormat.Gif, rc.Width, rc.Height, 8, info);
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ConvertExample(Stream inStreamCmp, Stream outStreamGifThumb)
      {
         RasterCodecs codecs = new RasterCodecs();
         const int thumbWidth = 128;
         const int thumbHeight = 128;
         LeadRect destRect = new LeadRect(0, 0, thumbWidth, thumbHeight);

         // Make sure that this is a file we can load
         CodecsImageInfo info = codecs.GetInformation(inStreamCmp, false);

         // Convert to thumbnails (we want to keep the aspect ratio)
         LeadRect rc = RasterImage.CalculatePaintModeRectangle(
            thumbWidth,
            thumbHeight,
            destRect,
            RasterPaintSizeMode.FitAlways,
            RasterPaintAlignMode.Near,
            RasterPaintAlignMode.Near);

         codecs.Convert(inStreamCmp, outStreamGifThumb, RasterImageFormat.Gif, rc.Width, rc.Height, 8, info);
      }</code>
        <code lang="SilverlightVB">      Public Sub ConvertExample(ByVal inStreamCmp As Stream, ByVal outStreamGifThumb As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Const thumbWidth As Integer = 128
         Const thumbHeight As Integer = 128
         Dim destRect As LeadRect = New LeadRect(0, 0, thumbWidth, thumbHeight)

         ' Make sure that this is a file we can load
         Dim info As CodecsImageInfo = codecs.GetInformation(inStreamCmp, False)

         ' Convert to thumbnails (we want to keep the aspect ratio)
         Dim rc As LeadRect = RasterImage.CalculatePaintModeRectangle(thumbWidth, thumbHeight, destRect, RasterPaintSizeMode.FitAlways, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near)

         codecs.Convert(inStreamCmp, outStreamGifThumb, RasterImageFormat.Gif, rc.Width, rc.Height, 8, info)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Convert(System.IO.Stream,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsImageInfo)">
      <summary>Converts an image stream from one format to another, creating a new image file in a stream in the new format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcStream">A <see cref="T:System.IO.Stream" /> containing the data of the input image file.</param>
      <param name="destStream">A <see cref="T:System.IO.Stream" /> that will contain the data of the output image file.</param>
      <param name="format">The output file format. For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="width">New width of the output image. If this value is not 0, then the output file will be resized to the
            <paramref name="width" /> value. Use a value of 0 if you do not wish to resize the output file.</param>
      <param name="height">New height of the output image. If this value is not 0, then the output file will be resized to the
            <paramref name="height" /> value. Use a value of 0 if you do not wish to resize the output file.</param>
      <param name="bitsPerPixel">The output image pixel depth. Note that not all bits per pixel are available to
            all file formats.</param>
      <param name="info">A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> obect specifying more options for the conversion.</param>
      <keywords>Bits per pixel | Color space | Image converter</keywords>
      <remarks>
        <para>If you convert to a lower bits-per-pixel format, this method optimizes the colors automatically. For example, when
            converting a 24-bit file (16 million colors) to an 8-bit file (256 colors) this method selects the best 256 colors to
            represent the 24-bit image</para>
        <para>Note that this is a high-level method that does conversion from all possible formats to all possible formats.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Convert(System.String,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsImageInfo)">Convert</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.String)">
      <summary>Reads all the metadata markers (COM and APPn) from a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterMarkerMetadata" /> objects containing the metadata marker data.</returns>
      <remarks>
        <para>This method reads all the metadata markers from a file, and returns a collection of the markers.</para>
        <para> For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
        <para>If the file contains no marker, then this method will return an empty collection.</para>
      </remarks>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>
        <para>This example will read all the markers from an EXIF file</para>
        <code lang="VB">      Private Sub ReadMarkersFromFileExample(ByVal exifFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim markers As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(exifFileName)
         Console.WriteLine("{0} markers found with the following ID's:", markers.Count)
         For Each marker As RasterMarkerMetadata In markers
            Console.WriteLine(marker.Id)
         Next marker

         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void ReadMarkersFromFileExample(string exifFileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterCollection&lt;RasterMarkerMetadata&gt; markers = codecs.ReadMarkers(exifFileName);
         Console.WriteLine("{0} markers found with the following ID's:", markers.Count);
         foreach(RasterMarkerMetadata marker in markers)
            Console.WriteLine(marker.Id);

         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.IO.Stream)">
      <summary>Reads all the metadata markers (COM and APPn) from a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file image data.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterMarkerMetadata" /> objects containing the metadata marker data.</returns>
      <remarks>
        <para>This method reads all the metadata markers from a file, and returns a collection of the markers.</para>
        <para>For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
        <para>If the file contains no marker, then this method will return an empty collection.</para>
      </remarks>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>
        <para>This example will read all the markers from a stream that contains an EXIF file data</para>
        <code lang="VB">      Private Sub ReadMarkersFromStreamExample(ByVal theStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim markers As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(theStream)
         Console.WriteLine("{0} markers found with the following ID's:", markers.Count)
         For Each marker As RasterMarkerMetadata In markers
            Console.WriteLine(marker.Id)
         Next marker

         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void ReadMarkersFromStreamExample(Stream theStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterCollection&lt;RasterMarkerMetadata&gt; markers = codecs.ReadMarkers(theStream);
         Console.WriteLine("{0} markers found with the following ID's:", markers.Count);
         foreach(RasterMarkerMetadata marker in markers)
            Console.WriteLine(marker.Id);

         codecs.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      public void ReadMarkersFromStreamExample(Stream inStreamExif)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterCollection&lt;RasterMarkerMetadata&gt; markers = codecs.ReadMarkers(inStreamExif);
         Debug.WriteLine("{0} markers found with the following ID's:", markers.Count);
         foreach(RasterMarkerMetadata marker in markers)
            Debug.WriteLine(marker.Id);
      }</code>
        <code lang="SilverlightVB">      Public Sub ReadMarkersFromStreamExample(ByVal inStreamExif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim markers As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(inStreamExif)
         Debug.WriteLine("{0} markers found with the following ID's:", markers.Count)
         For Each marker As RasterMarkerMetadata In markers
            Debug.WriteLine(marker.Id)
         Next marker
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">
      <summary>Creates a thumbnail from the specified image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file from which the thumbnail image will be
            created.</param>
      <param name="options">Options for creating the thumbnail image.</param>
      <param name="pageNumber">1-based index of the page from which the thumbnail image should be created.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method creates.</returns>
      <remarks>
            This method will always return a thumbnail image. Depending on the <paramref name="options" /> passed, this method might
            read the stamp stored inside EXIF, CMP, JFIF and FlashPix files and return that.  To read the file stamp only, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.String,System.Int32)" />.
            </remarks>
      <seealso cref="T:L.Topics.ThumbnailBrowser">Thumbnail Browser</seealso>
      <example>
        <para>This example will read a thumbnail from a CMP file</para>
        <code lang="VB">      Public Sub ReadThumbnailExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Create a thumbnail with default options
         Dim options As CodecsThumbnailOptions = CodecsThumbnailOptions.Default
         options.LoadStamp = False
         Dim thumbnail As RasterImage = codecs.ReadThumbnail(srcFileName, options, 1)

         Console.WriteLine("Thumbnail with default option:")
         Console.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel)
         thumbnail.Dispose()

         ' Create a thumbnail with some options
         options.LoadStamp = False
         options.Width = 40
         options.Height = 80
         options.ForceSize = True
         options.MaintainAspectRatio = False
         options.BackColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue)
         options.BitsPerPixel = 8
         thumbnail = codecs.ReadThumbnail(srcFileName, options, 1)

         Console.WriteLine("Thumbnail with set option (size: {0} by {1}, Bits/Pixel: {2}, ForeSize: {3}", options.Width, options.Height, options.BitsPerPixel, options.ForceSize)
         Console.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel)
         thumbnail.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ReadThumbnailExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");

         // Create a thumbnail with default options
         CodecsThumbnailOptions options = CodecsThumbnailOptions.Default;
         options.LoadStamp = false;
         RasterImage thumbnail = codecs.ReadThumbnail(srcFileName, options, 1);

         Console.WriteLine("Thumbnail with default option:");
         Console.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel);
         thumbnail.Dispose();

         // Create a thumbnail with some options
         options.LoadStamp = false;
         options.Width = 40;
         options.Height = 80;
         options.ForceSize = true;
         options.MaintainAspectRatio = false;
         options.BackColor = RasterColor.FromKnownColor(RasterKnownColor.LightBlue);
         options.BitsPerPixel = 8;
         thumbnail = codecs.ReadThumbnail(srcFileName, options, 1);

         Console.WriteLine("Thumbnail with set option (size: {0} by {1}, Bits/Pixel: {2}, ForeSize: {3}",
            options.Width, options.Height, options.BitsPerPixel, options.ForceSize);
         Console.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel);
         thumbnail.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ReadThumbnailExample(Stream inStreamCmp)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create a thumbnail with default options
         CodecsThumbnailOptions options = CodecsThumbnailOptions.Default;
         options.LoadStamp = false;
         RasterImage thumbnail = codecs.ReadThumbnail(inStreamCmp, options, 1);

         Debug.WriteLine("Thumbnail with default option:");
         Debug.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel);
         thumbnail.Dispose();

         // Create a thumbnail with some options
         options.LoadStamp = false;
         options.Width = 40;
         options.Height = 80;
         options.ForceSize = true;
         options.MaintainAspectRatio = false;
         options.BackColor = new RasterColor(0x00, 0x00, 0x7F);
         options.BitsPerPixel = 8;
         thumbnail = codecs.ReadThumbnail(inStreamCmp, options, 1);

         Debug.WriteLine("Thumbnail with set option (size: {0} by {1}, Bits/Pixel: {2}, ForeSize: {3}",
            options.Width, options.Height, options.BitsPerPixel, options.ForceSize);
         Debug.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel);
         thumbnail.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ReadThumbnailExample(ByVal inStreamCmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create a thumbnail with default options
         Dim options As CodecsThumbnailOptions = CodecsThumbnailOptions.Default
         options.LoadStamp = False
         Dim thumbnail As RasterImage = codecs.ReadThumbnail(inStreamCmp, options, 1)

         Debug.WriteLine("Thumbnail with default option:")
         Debug.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel)
         thumbnail.Dispose()

         ' Create a thumbnail with some options
         options.LoadStamp = False
         options.Width = 40
         options.Height = 80
         options.ForceSize = True
         options.MaintainAspectRatio = False
         options.BackColor = New RasterColor(&amp;H00, &amp;H00, &amp;H7F)
         options.BitsPerPixel = 8
         thumbnail = codecs.ReadThumbnail(inStreamCmp, options, 1)

         Debug.WriteLine("Thumbnail with set option (size: {0} by {1}, Bits/Pixel: {2}, ForeSize: {3}", options.Width, options.Height, options.BitsPerPixel, options.ForceSize)
         Debug.WriteLine("  Size: {0} by {1} pixels. Bits/Pixel: {2}", thumbnail.Width, thumbnail.Height, thumbnail.BitsPerPixel)
         thumbnail.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.IO.Stream,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">
      <summary>Creates a thumbnail from the specified image stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data from which the thumbnail image will be
            created.</param>
      <param name="options">Options for creating the thumbnail image.</param>
      <param name="pageNumber">1-based index of the page from which the thumbnail image should be created.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method creates.</returns>
      <remarks>
            This method will always return a thumbnail image. Depending on the <paramref name="options" /> passed, this method might
            read the stamp stored inside EXIF, CMP, JFIF and FlashPix files and return that.  To read the file stamp only, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.String,System.Int32)" />.
            </remarks>
      <seealso cref="T:L.Topics.ThumbnailBrowser">Thumbnail Browser</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)">ReadThumbnail</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.String,System.Int32)">
      <summary>Reads a thumbnail image stored in the image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file which contains the stamp image to load.</param>
      <param name="pageNumber">1-based index of the page from which the stamp image should be loaded.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>
            Only EXIF, CMP, JFIF and FlashPix formats support stamps. However, not all file of these formats contain stamps. To create a
            thumbnail image from any file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)" />.
            </para>
        <para>
          <strong>NOTE</strong>: At this time, there are no multipage formats that support stamps.
            </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.IO.Stream,System.Int32)">
      <summary>Reads a thumbnail image stored in an image stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data which contains the stamp image to load.</param>
      <param name="pageNumber">1-based index of the page from which the stamp image should be loaded.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
            Only EXIF, CMP, JFIF and FlashPix formats support stamps. However, not all file of these formats contain stamps. To create a
            thumbnail image from any file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)" />.
            </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">
      <summary>Indicates which method should be called when an overlay is detected inside a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="callback">The method which should be called when an overlay is detected. Use a null reference (Nothing in
            Visual Basic) to indicate that LEADTOOLS should handle overlays automatically.</param>
      <param name="mode">Indicates when should this method be called. See <see cref="T:Leadtools.Codecs.CodecsOverlayCallbackMode" /> for possible
            values.</param>
      <remarks>
        <para>Currently, only PTOCA files are known to use such overlays.</para>
        <para>PTOCA files contain file references (ie filenames) to external files that contain overlay bitmaps. (These files are
            typically in IOCA format)</para>
        <para>These external overlay files will be resized and placed on the current page according to the information from the
            PTOCA files. By default, LEADTOOLS will load these external overlay files from disk. You should override this behaviour if
            you load files that are not stored locally (eg: on a remote storage or in a database).</para>
        <para>To load overlays stored on other storage, you have to pass your overlay callback to this method and load the overlays
            in your overlay callback.</para>
        <para>The overlay callback will be used until <see cref="M:Leadtools.Codecs.RasterCodecs.StopOverlay" /> is called.</para>
      </remarks>
      <example>
        <para>This example will read a PTOKA file and overlays a TIF file on it</para>
        <code lang="VB">      Private Sub PtokaOverlayExample(ByVal ptokaFileName As String, ByVal ptokaFilesPath As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "PtokaOverlay.tif")

         ' Set up the private variables used in the callback
         myCodecs = codecs
         myPtokaFilesPath = ptokaFilesPath

         ' Set the overlay callback
         codecs.StartOverlay(AddressOf MyOverlayCallback, CodecsOverlayCallbackMode.CallLoad)

         ' Load the PTOKA file
         Dim image As RasterImage = codecs.Load(ptokaFileName)

         ' Stop the overlay by resetting the old callback.
         codecs.StopOverlay()

         ' Save the image as TIFF
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

      Private myCodecs As RasterCodecs
      Private myPtokaFilesPath As String

      Private Sub MyOverlayCallback(ByVal data As CodecsOverlayData)
         ' Show overlay information
         Console.WriteLine("File: {0}", data.FileName)
         Console.WriteLine("Page Number: {0}", data.PageNumber)
         Console.WriteLine("Info: {0}", data.Info)

         ' Construct the overlay file name
         Dim overlayFileName As String = Path.Combine(myPtokaFilesPath, data.FileName)

         If data.Info Then
            ' Info, we only need to fill in the .InfoXXX members of the data
            Dim imageInfo As CodecsImageInfo = myCodecs.GetInformation(overlayFileName, False)
            data.InfoWidth = imageInfo.Width
            data.InfoHeight = imageInfo.Height
            data.InfoXResolution = imageInfo.XResolution
            data.InfoYResolution = imageInfo.YResolution
         Else
            ' We need to load the overlay image into the .Image member
            data.Image = myCodecs.Load(overlayFileName)
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      void PtokaOverlayExample(string ptokaFileName, string ptokaFilesPath)
      {
         RasterCodecs codecs = new RasterCodecs();
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "PtokaOverlay.tif");

         // Set up the private variables used in the callback
         myCodecs = codecs;
         myPtokaFilesPath = ptokaFilesPath;

         // Set the overlay callback
         codecs.StartOverlay(MyOverlayCallback, CodecsOverlayCallbackMode.CallLoad);

         // Load the PTOKA file
         RasterImage image = codecs.Load(ptokaFileName);

         // Stop the overlay by resetting the old callback.
         codecs.StopOverlay();

         // Save the image as TIFF
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

      RasterCodecs myCodecs;
      string myPtokaFilesPath;

      void MyOverlayCallback(CodecsOverlayData data)
      {
         // Show overlay information
         Console.WriteLine("File: {0}", data.FileName);
         Console.WriteLine("Page Number: {0}", data.PageNumber);
         Console.WriteLine("Info: {0}", data.Info);

         // Construct the overlay file name
         string overlayFileName = Path.Combine(myPtokaFilesPath, data.FileName);

         if(data.Info)
         {
            // Info, we only need to fill in the .InfoXXX members of the data
            CodecsImageInfo imageInfo = myCodecs.GetInformation(overlayFileName, false);
            data.InfoWidth = imageInfo.Width;
            data.InfoHeight = imageInfo.Height;
            data.InfoXResolution = imageInfo.XResolution;
            data.InfoYResolution = imageInfo.YResolution;
         }
         else
         {
            // We need to load the overlay image into the .Image member
            data.Image = myCodecs.Load(overlayFileName);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopOverlay">
      <summary>Restores the previous overlay callback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Call this method to restore the old overlay handling prior to calling <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)" /></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)">
      <summary>Enumerates all the tags in a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to enumerate the tags.</param>
      <remarks>
        <para>This method will fire the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event for each tag found in the file.</para>
        <para>Currently, only TIFF and Exif files contain tags.</para>
        <para>For multipage TIFF files, you can enumerate the tags from a particular page. Specify the page number whose tags to
            enumerate.</para>
        <para>This method enumerates the standard TIFF tags and the user tags. Standard TIFF tags are less than 32767. User TIFF
            tags are usually between 32768 and 65535.</para>
        <para>To enumerate the tags stored in a stream, use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.IO.Stream,System.Int32)" />.</para>
        <para>To read a tag value, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to read all the tags in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</para>
        <para>For general information about TIFF tags, refer to
            <see cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</see>.</para>
        <para>Do not attempt to use <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)" /> to delete tags from inside the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event. If you
            want to delete tags that you enumerate, use this event to add the tags to a list. Upon returning from
            <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />, you can delete all the tags from the list.</para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
      </remarks>
      <example>
        <para>This example will show all the tags in the give file, read them then saves them to another file</para>
        <code lang="VB">      Private tagsFileName As String
      Private myTags As RasterCollection(Of RasterTagMetadata)
      Private Sub EnumTagsExample(ByVal srcFileName As String, ByVal destFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()

         tagsFileName = srcFileName
         myTags = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.TagFound, AddressOf codecs_TagFound
         codecs.EnumTags(srcFileName, 1)
         RemoveHandler codecs.TagFound, AddressOf codecs_TagFound

         ' We read all the tags now, save them to the file
         Console.WriteLine("{0} tags read, saving them to the destination file", myTags.Count)
         codecs.WriteTags(destFileName, 1, myTags)

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_TagFound(ByVal sender As Object, ByVal e As CodecsEnumTagsEventArgs)
         Console.WriteLine("Tag: Id={0}, Count={1}, Type={2}", e.Id, e.Count, e.MetadataType)

         ' Read this tag from the file and add it to our collection
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim tag As RasterTagMetadata = codecs.ReadTag(tagsFileName, 1, e.Id)
         myTags.Add(tag)
      End Sub</code>
        <code lang="CS">      string tagsFileName;
      RasterCollection&lt;RasterTagMetadata&gt; myTags;
      void EnumTagsExample(string srcFileName, string destFileName)
      {
         RasterCodecs codecs = new RasterCodecs();

         tagsFileName = srcFileName;
         myTags = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.TagFound += new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);
         codecs.EnumTags(srcFileName, 1);
         codecs.TagFound -= new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);

         // We read all the tags now, save them to the file
         Console.WriteLine("{0} tags read, saving them to the destination file", myTags.Count);
         codecs.WriteTags(destFileName, 1, myTags);

         // Clean up
         codecs.Dispose();
      }

      void codecs_TagFound(object sender, CodecsEnumTagsEventArgs e)
      {
         Console.WriteLine("Tag: Id={0}, Count={1}, Type={2}", e.Id, e.Count, e.MetadataType);

         // Read this tag from the file and add it to our collection
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata tag = codecs.ReadTag(tagsFileName, 1, e.Id);
         myTags.Add(tag);
      }</code>
        <code lang="SilverlightCSharp">      Stream tagsStream;
      RasterCollection&lt;RasterTagMetadata&gt; myTags;
      void EnumTagsExample(Stream inStreamTif, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();

         tagsStream = inStreamTif;
         myTags = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.TagFound += new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);
         codecs.EnumTags(inStreamTif, 1);
         codecs.TagFound -= new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);

         // We read all the tags now, save them to the file
         Debug.WriteLine("{0} tags read, saving them to the destination file", myTags.Count);
         codecs.WriteTags(outStreamTif, 1, myTags);
      }

      void codecs_TagFound(object sender, CodecsEnumTagsEventArgs e)
      {
         Debug.WriteLine("Tag: Id={0}, Count={1}, Type={2}", e.Id, e.Count, e.MetadataType);

         // Read this tag from the file and add it to our collection
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata tag = codecs.ReadTag(tagsStream, 1, e.Id);
         myTags.Add(tag);
      }</code>
        <code lang="SilverlightVB">      Private tagsStream As Stream
      Private myTags As RasterCollection(Of RasterTagMetadata)
      Private Sub EnumTagsExample(ByVal inStreamTif As Stream, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         tagsStream = inStreamTif
         myTags = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.TagFound, AddressOf codecs_TagFound
         codecs.EnumTags(inStreamTif, 1)
         RemoveHandler codecs.TagFound, AddressOf codecs_TagFound

         ' We read all the tags now, save them to the file
         Debug.WriteLine("{0} tags read, saving them to the destination file", myTags.Count)
         codecs.WriteTags(outStreamTif, 1, myTags)
      End Sub

      Private Sub codecs_TagFound(ByVal sender As Object, ByVal e As CodecsEnumTagsEventArgs)
         Debug.WriteLine("Tag: Id={0}, Count={1}, Type={2}", e.Id, e.Count, e.MetadataType)

         ' Read this tag from the file and add it to our collection
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim tag As RasterTagMetadata = codecs.ReadTag(tagsStream, 1, e.Id)
         myTags.Add(tag)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.IO.Stream,System.Int32)">
      <summary>Enumerates all the tags in a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file image data.</param>
      <param name="pageNumber">1-based index of the page from which to enumerate the tags.</param>
      <remarks>
        <para>This method will fire the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event for each tag found in the stream.</para>
        <para>Currently, only TIFF and Exif files contain tags.</para>
        <para>For multipage TIFF files, you can enumerate the tags from a particular page. Specify the page number whose tags to
            enumerate.</para>
        <para>This method enumerates the standard TIFF tags and the user tags. Standard TIFF tags are less than 32767. User TIFF
            tags are usually between 32768 and 65535.</para>
        <para>To enumerate the tags stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>To read a tag value, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to read all the tags in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</para>
        <para>For general information about TIFF tags, refer to
            <see cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</see>.</para>
        <para>Do not attempt to use <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)" /> to delete tags from inside the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event. If you
            want to delete tags that you enumerate, use this event to add the tags to a list. Upon returning from
            <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />, you can delete all the tags from the list.</para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)">
      <summary>Enumerates all the GeoKeys in a Geo TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to enumerate the tags.</param>
      <remarks>
        <para>To enumerate all the keys stored in a stream, use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.IO.Stream,System.Int32)" />.</para>
        <para>For multipage Geo TIFF files, you can enumerate the GeoKeys from a particular page. Specify the page number whose
            GeoKeys to enumerate.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound" /> event is called for each GeoKey value stored in the three standard Geo TIFF tags 
            (34735, 34736 and 34737). For enumerating the other standard Geo TIFF data stored as separate tags, you can use
            <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />. Or, you can call <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> for each of these tags (since there are not that
            many of them to warrant the use of <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />).</para>
        <para>For more information, refer to<see cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</see>.</para>
      </remarks>
      <example>
        <para>This example will show all the geo keys in the given file then loads them and adds them to a destination file</para>
        <code lang="VB">      Private myGeoKeys As RasterCollection(Of RasterTagMetadata)
      Private geoKeyFileName As String

      Private Sub EnumGeoKeysExample(ByVal srcFileName As String, ByVal destFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeyFileName = srcFileName
         myGeoKeys = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound
         codecs.EnumGeoKeys(srcFileName, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound

         ' We read all the tags now, save them to the file
         Console.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count)
         codecs.WriteGeoKeys(destFileName, 1, myGeoKeys)

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_GeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Console.Write("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeyFileName, 1, e.Id)
         Dim data As Byte() = geoKey.GetData()
         Dim i As Integer = 0
         Do While i &lt; data.Length
            Console.Write("{0:X} ", data(i))
            i += 1
         Loop
         Console.WriteLine()

         ' Add it to our collection
         myGeoKeys.Add(geoKey)
      End Sub</code>
        <code lang="CS">      RasterCollection&lt;RasterTagMetadata&gt; myGeoKeys;
      string geoKeyFileName;

      void EnumGeoKeysExample(string srcFileName, string destFileName)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeyFileName = srcFileName;
         myGeoKeys = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);
         codecs.EnumGeoKeys(srcFileName, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);

         // We read all the tags now, save them to the file
         Console.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count);
         codecs.WriteGeoKeys(destFileName, 1, myGeoKeys);

         // Clean up
         codecs.Dispose();
      }

      void codecs_GeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Console.Write("GeoKey: Id={0}, Count={1}, Type={2}, Data Length={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeyFileName, 1, e.Id);
         byte[] data = geoKey.GetData();
         for(int i = 0; i &lt; data.Length; i++)
            Console.Write("{0:X} ", data[i]);
         Console.WriteLine();

         // Add it to our collection
         myGeoKeys.Add(geoKey);
      }</code>
        <code lang="SilverlightCSharp">      RasterCollection&lt;RasterTagMetadata&gt; myGeoKeys;
      Stream geoKeyStream;
      void EnumGeoKeysExample(Stream inStreamGeyKey, Stream outStreamGeyKey)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeyStream = inStreamGeyKey;
         myGeoKeys = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);
         codecs.EnumGeoKeys(inStreamGeyKey, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);

         // We read all the tags now, save them to the file
         Debug.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count);
         codecs.WriteGeoKeys(outStreamGeyKey, 1, myGeoKeys);
      }

      void codecs_GeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeyStream, 1, e.Id);
         byte[] data = geoKey.GetData();
         for(int i = 0; i &lt; data.Length; i++)
            Debug.WriteLine("{0:X} ", data[i]);
         Debug.WriteLine("");

         // Add it to our collection
         myGeoKeys.Add(geoKey);
      }</code>
        <code lang="SilverlightVB">      Private myGeoKeys As RasterCollection(Of RasterTagMetadata)
      Private geoKeyStream As Stream
      Private Sub EnumGeoKeysExample(ByVal inStreamGeyKey As Stream, ByVal outStreamGeyKey As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeyStream = inStreamGeyKey
         myGeoKeys = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound
         codecs.EnumGeoKeys(inStreamGeyKey, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound

         ' We read all the tags now, save them to the file
         Debug.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count)
         codecs.WriteGeoKeys(outStreamGeyKey, 1, myGeoKeys)
      End Sub

      Private Sub codecs_GeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeyStream, 1, e.Id)
         Dim data As Byte() = geoKey.GetData()
         Dim i As Integer = 0
         Do While i &lt; data.Length
            Debug.WriteLine("{0:X} ", data(i))
            i += 1
         Loop
         Debug.WriteLine("")

         ' Add it to our collection
         myGeoKeys.Add(geoKey)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.IO.Stream,System.Int32)">
      <summary>Enumerates all the GeoKeys in a Geo TIFF stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="pageNumber">1-based index of the page from which to enumerate the tags.</param>
      <remarks>
        <para>To enumerate all the keys stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</para>
        <para>For multipage Geo TIFF files, you can enumerate the GeoKeys from a particular page. Specify the page number whose
            GeoKeys to enumerate.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound" /> event is called for each GeoKey value stored in the three standard Geo TIFF tags 
            (34735, 34736 and 34737). For enumerating the other standard Geo TIFF data stored as separate tags, you can use
            <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />. Or, you can call <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> for each of these tags (since there are not that
            many of them to warrant the use of <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />).</para>
        <para>For more information, refer to <see cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</see>.</para>
      </remarks>
      <example>
        <para>This example will show all the geo keys in the given file then loads them and adds them to a destination file</para>
        <code lang="VB">      Private myGeoKeys As RasterCollection(Of RasterTagMetadata)
      Private geoKeyFileName As String

      Private Sub EnumGeoKeysExample(ByVal srcFileName As String, ByVal destFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeyFileName = srcFileName
         myGeoKeys = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound
         codecs.EnumGeoKeys(srcFileName, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound

         ' We read all the tags now, save them to the file
         Console.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count)
         codecs.WriteGeoKeys(destFileName, 1, myGeoKeys)

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_GeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Console.Write("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeyFileName, 1, e.Id)
         Dim data As Byte() = geoKey.GetData()
         Dim i As Integer = 0
         Do While i &lt; data.Length
            Console.Write("{0:X} ", data(i))
            i += 1
         Loop
         Console.WriteLine()

         ' Add it to our collection
         myGeoKeys.Add(geoKey)
      End Sub</code>
        <code lang="CS">      RasterCollection&lt;RasterTagMetadata&gt; myGeoKeys;
      string geoKeyFileName;

      void EnumGeoKeysExample(string srcFileName, string destFileName)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeyFileName = srcFileName;
         myGeoKeys = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);
         codecs.EnumGeoKeys(srcFileName, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);

         // We read all the tags now, save them to the file
         Console.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count);
         codecs.WriteGeoKeys(destFileName, 1, myGeoKeys);

         // Clean up
         codecs.Dispose();
      }

      void codecs_GeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Console.Write("GeoKey: Id={0}, Count={1}, Type={2}, Data Length={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeyFileName, 1, e.Id);
         byte[] data = geoKey.GetData();
         for(int i = 0; i &lt; data.Length; i++)
            Console.Write("{0:X} ", data[i]);
         Console.WriteLine();

         // Add it to our collection
         myGeoKeys.Add(geoKey);
      }</code>
        <code lang="SilverlightCSharp">      RasterCollection&lt;RasterTagMetadata&gt; myGeoKeys;
      Stream geoKeyStream;
      void EnumGeoKeysExample(Stream inStreamGeyKey, Stream outStreamGeyKey)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeyStream = inStreamGeyKey;
         myGeoKeys = new RasterCollection&lt;RasterTagMetadata&gt;();

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);
         codecs.EnumGeoKeys(inStreamGeyKey, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_GeyKeyFound);

         // We read all the tags now, save them to the file
         Debug.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count);
         codecs.WriteGeoKeys(outStreamGeyKey, 1, myGeoKeys);
      }

      void codecs_GeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeyStream, 1, e.Id);
         byte[] data = geoKey.GetData();
         for(int i = 0; i &lt; data.Length; i++)
            Debug.WriteLine("{0:X} ", data[i]);
         Debug.WriteLine("");

         // Add it to our collection
         myGeoKeys.Add(geoKey);
      }</code>
        <code lang="SilverlightVB">      Private myGeoKeys As RasterCollection(Of RasterTagMetadata)
      Private geoKeyStream As Stream
      Private Sub EnumGeoKeysExample(ByVal inStreamGeyKey As Stream, ByVal outStreamGeyKey As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeyStream = inStreamGeyKey
         myGeoKeys = New RasterCollection(Of RasterTagMetadata)()

         AddHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound
         codecs.EnumGeoKeys(inStreamGeyKey, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_GeyKeyFound

         ' We read all the tags now, save them to the file
         Debug.WriteLine("{0} GeoKeys read, saving them to the destination file", myGeoKeys.Count)
         codecs.WriteGeoKeys(outStreamGeyKey, 1, myGeoKeys)
      End Sub

      Private Sub codecs_GeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeyStream, 1, e.Id)
         Dim data As Byte() = geoKey.GetData()
         Dim i As Integer = 0
         Do While i &lt; data.Length
            Debug.WriteLine("{0:X} ", data(i))
            i += 1
         Loop
         Debug.WriteLine("")

         ' Add it to our collection
         myGeoKeys.Add(geoKey)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">
      <summary>Deletes a tag from a file, if the file supports tags (TIFF or Exif). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the file from which to delete the tag.</param>
      <param name="pageNumber">The 1-based index of the page from which the tag will be deleted. Use -1 to delete the tag from
            the last page. Use 1 to delete the tag from the first page.</param>
      <param name="id">The ID of the tag in the TIFF file. The tag IDs are between 0 and 65535.</param>
      <remarks>
        <para>If you want to delete the tag from a particular IFD in the file, set
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.UseImageFileDirectoryOffset</see>
            to true, and set <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>
            to the IFD in question. This method will delete tags only from the main IFDs that make up an image. Some TIFF tags are
            themselves SubIFDs. You can delete tags from such SubIFDs by using
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.UseImageFileDirectoryOffset</see>
            and
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>
            specifying the IFD as above.</para>
        <para>Notes:</para>
        <para>
          <list type="bullet">
            <item>
              <description>The <strong>Leadtools.Codecs.Cmp.dll</strong> codec is used to delete the tag from all the TIFF and Exif
            files.</description>
            </item>
            <item>
              <description>Do not attempt to use this method to delete tags from inside the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event. If you
            want to delete tags that you enumerate, use the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event to add the tags to a list. Upon returning
            from <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />, you can delete all the tags from the list.</description>
            </item>
            <item>
              <description>You should be careful when you delete non-custom tags (tags below 32768). If you delete the wrong tag,
            you might corrupt the TIF file!.</description>
            </item>
          </list>
        </para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>
        <para>This example will create a TIF file, add a certain tag to it then delete it</para>
        <code lang="VB">      Public Sub TagExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_PageNumberTag.tif")

         ' Convert the source file to TIF
         Console.WriteLine("Converting the source file to TIF")
         codecs.Convert(srcFileName, destFileName, RasterImageFormat.Tif, 0, 0, 24, Nothing)

         Const pageNumberTagId As Integer = 297
         Dim pageNumber As Integer = 7

         Dim writeTag As RasterTagMetadata = New RasterTagMetadata()
         writeTag.Id = pageNumberTagId
         writeTag.DataType = RasterTagMetadataDataType.Int32
         writeTag.FromInt32(New Integer() {pageNumber})

         Console.WriteLine("Writing the following tag to the file:")
         Console.WriteLine("  ID: {0}", writeTag.Id)
         Console.WriteLine("  DataType: {0}", writeTag.DataType)
         Console.Write("  Data: ")
         Dim writeTagData As Byte() = writeTag.GetData()
         Dim i As Integer = 0
         Do While i &lt; writeTagData.Length
            Console.Write("{0:X} ", writeTagData(i))
            i += 1
         Loop
         Console.WriteLine()

         ' Add the tag
         Console.WriteLine("Writing the page number tag with data = {0} to the file", pageNumber)
         codecs.WriteTag(destFileName, 1, writeTag)

         ' Read the tag and make sure it is in the file
         Console.WriteLine("Reading the page number tag from the file")
         Dim readTag As RasterTagMetadata = codecs.ReadTag(destFileName, 1, pageNumberTagId)

         Console.WriteLine("Tag read from the file:")
         Console.WriteLine("  ID: {0}", readTag.Id)
         Console.WriteLine("  DataType: {0}", readTag.DataType)
         Console.Write("  Data: ")
         Dim readTagData As Byte() = readTag.GetData()
         i = 0
         Do While i &lt; readTagData.Length
            Console.Write("{0:X} ", readTagData(i))
            i += 1
         Loop
         Console.WriteLine()

         Debug.Assert(writeTag.Id = readTag.Id)
         Debug.Assert(writeTag.DataType = readTag.DataType)
         Debug.Assert(writeTagData.Length = writeTagData.Length)
         i = 0
         Do While i &lt; writeTagData.Length
            Debug.Assert(writeTagData(i) = readTagData(i))
            i += 1
         Loop

         ' Delete the tag from the file
         Console.WriteLine("Deleting the tag from the file")
         codecs.DeleteTag(destFileName, 1, pageNumberTagId)

         ' Make sure the tag is deleted
         Console.WriteLine("Reading the tag from the file again")
         readTag = codecs.ReadTag(destFileName, 1, pageNumberTagId)

         If readTag Is Nothing Then
            Console.WriteLine("Tag was not found")
         Else
            Console.WriteLine("Tag is found, this should not happen")
         End If

         Debug.Assert(readTag Is Nothing)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void TagExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_PageNumberTag.tif");

         // Convert the source file to TIF
         Console.WriteLine("Converting the source file to TIF");
         codecs.Convert(srcFileName, destFileName, RasterImageFormat.Tif, 0, 0, 24, null);

         const int pageNumberTagId = 297;
         int pageNumber = 7;

         RasterTagMetadata writeTag = new RasterTagMetadata();
         writeTag.Id = pageNumberTagId;
         writeTag.DataType = RasterTagMetadataDataType.Int32;
         writeTag.FromInt32(new int[] { pageNumber });

         Console.WriteLine("Writing the following tag to the file:");
         Console.WriteLine("  ID: {0}", writeTag.Id);
         Console.WriteLine("  DataType: {0}", writeTag.DataType);
         Console.Write("  Data: ");
         byte[] writeTagData = writeTag.GetData();
         for(int i = 0; i &lt; writeTagData.Length; i++)
            Console.Write("{0:X} ", writeTagData[i]);
         Console.WriteLine();

         // Add the tag
         Console.WriteLine("Writing the page number tag with data = {0} to the file", pageNumber);
         codecs.WriteTag(destFileName, 1, writeTag);

         // Read the tag and make sure its in the file
         Console.WriteLine("Reading the page number tag from the file");
         RasterTagMetadata readTag = codecs.ReadTag(destFileName, 1, pageNumberTagId);

         Console.WriteLine("Tag read from the file:");
         Console.WriteLine("  ID: {0}", readTag.Id);
         Console.WriteLine("  DataType: {0}", readTag.DataType);
         Console.Write("  Data: ");
         byte[] readTagData = readTag.GetData();
         for(int i = 0; i &lt; readTagData.Length; i++)
            Console.Write("{0:X} ", readTagData[i]);
         Console.WriteLine();

         Debug.Assert(writeTag.Id == readTag.Id);
         Debug.Assert(writeTag.DataType == readTag.DataType);
         Debug.Assert(writeTagData.Length == writeTagData.Length);
         for(int i = 0; i &lt; writeTagData.Length; i++)
            Debug.Assert(writeTagData[i] == readTagData[i]);

         // Delete the tag from the file
         Console.WriteLine("Deleting the tag from the file");
         codecs.DeleteTag(destFileName, 1, pageNumberTagId);

         // Make sure the tag is deleted
         Console.WriteLine("Reading the tag from the file again");
         readTag = codecs.ReadTag(destFileName, 1, pageNumberTagId);

         if(readTag == null)
            Console.WriteLine("Tag was not found");
         else
            Console.WriteLine("Tag is found, this should not happen");

         Debug.Assert(readTag == null);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void TagExample(Stream inStreamCmp, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Convert the source file to TIF
         Debug.WriteLine("Converting the source file to TIF");
         codecs.Convert(inStreamCmp, outStreamTif, RasterImageFormat.Tif, 0, 0, 24, null);

         const int pageNumberTagId = 297;
         int pageNumber = 7;

         RasterTagMetadata writeTag = new RasterTagMetadata();
         writeTag.Id = pageNumberTagId;
         writeTag.DataType = RasterTagMetadataDataType.Int32;
         writeTag.FromInt32(new int[] { pageNumber });

         Debug.WriteLine("Writing the following tag to the file:");
         Debug.WriteLine("  ID: {0}", writeTag.Id);
         Debug.WriteLine("  DataType: {0}", writeTag.DataType);
         Debug.WriteLine("  Data: ");
         byte[] writeTagData = writeTag.GetData();
         for(int i = 0; i &lt; writeTagData.Length; i++)
            Debug.WriteLine("{0:X} ", writeTagData[i]);
         Debug.WriteLine("");

         // Add the tag
         Debug.WriteLine("Writing the page number tag with data = {0} to the file", pageNumber);
         //FileStream fsDest = new FileStream(destFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
         codecs.WriteTag(outStreamTif, 1, writeTag);

         // Read the tag and make sure its in the file
         Debug.WriteLine("Reading the page number tag from the file");
         RasterTagMetadata readTag = codecs.ReadTag(outStreamTif, 1, pageNumberTagId);
         Debug.WriteLine("Tag read from the file:");
         Debug.WriteLine("  ID: {0}", readTag.Id);
         Debug.WriteLine("  DataType: {0}", readTag.DataType);
         Debug.WriteLine("  Data: ");
         byte[] readTagData = readTag.GetData();
         for(int i = 0; i &lt; readTagData.Length; i++)
            Debug.WriteLine("{0:X} ", readTagData[i]);
         Debug.WriteLine("");

         Debug.Assert(writeTag.Id == readTag.Id);
         Debug.Assert(writeTag.DataType == readTag.DataType);
         Debug.Assert(writeTagData.Length == writeTagData.Length);
         for(int i = 0; i &lt; writeTagData.Length; i++)
            Debug.Assert(writeTagData[i] == readTagData[i]);

         // Delete the tag from the file
         Debug.WriteLine("Deleting the tag from the file");
         codecs.DeleteTag(outStreamTif, 1, pageNumberTagId);

         // Make sure the tag is deleted
         Debug.WriteLine("Reading the tag from the file again");
         readTag = codecs.ReadTag(outStreamTif, 1, pageNumberTagId);

         if(readTag == null)
            Debug.WriteLine("Tag was not found");
         else
            Debug.WriteLine("Tag is found, this should not happen");

         Debug.Assert(readTag == null);
      }</code>
        <code lang="SilverlightVB">      Public Sub TagExample(ByVal inStreamCmp As Stream, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Convert the source file to TIF
         Debug.WriteLine("Converting the source file to TIF")
         codecs.Convert(inStreamCmp, outStreamTif, RasterImageFormat.Tif, 0, 0, 24, Nothing)

         Const pageNumberTagId As Integer = 297
         Dim pageNumber As Integer = 7

         Dim writeTag As RasterTagMetadata = New RasterTagMetadata()
         writeTag.Id = pageNumberTagId
         writeTag.DataType = RasterTagMetadataDataType.Int32
         writeTag.FromInt32(New Integer() { pageNumber })

         Debug.WriteLine("Writing the following tag to the file:")
         Debug.WriteLine("  ID: {0}", writeTag.Id)
         Debug.WriteLine("  DataType: {0}", writeTag.DataType)
         Debug.WriteLine("  Data: ")
         Dim writeTagData As Byte() = writeTag.GetData()
         Dim i As Integer = 0
         Do While i &lt; writeTagData.Length
            Debug.WriteLine("{0:X} ", writeTagData(i))
            i += 1
         Loop
         Debug.WriteLine("")

         ' Add the tag
         Debug.WriteLine("Writing the page number tag with data = {0} to the file", pageNumber)
         'FileStream fsDest = new FileStream(destFileName, FileMode.OpenOrCreate, FileAccess.ReadWrite);
         codecs.WriteTag(outStreamTif, 1, writeTag)

         ' Read the tag and make sure its in the file
         Debug.WriteLine("Reading the page number tag from the file")
         Dim readTag As RasterTagMetadata = codecs.ReadTag(outStreamTif, 1, pageNumberTagId)
         Debug.WriteLine("Tag read from the file:")
         Debug.WriteLine("  ID: {0}", readTag.Id)
         Debug.WriteLine("  DataType: {0}", readTag.DataType)
         Debug.WriteLine("  Data: ")
         Dim readTagData As Byte() = readTag.GetData()
         i = 0
         Do While i &lt; readTagData.Length
            Debug.WriteLine("{0:X} ", readTagData(i))
            i += 1
         Loop
         Debug.WriteLine("")

         Debug.Assert(writeTag.Id = readTag.Id)
         Debug.Assert(writeTag.DataType = readTag.DataType)
         Debug.Assert(writeTagData.Length = writeTagData.Length)
         i = 0
         Do While i &lt; writeTagData.Length
            Debug.Assert(writeTagData(i) = readTagData(i))
            i += 1
         Loop

         ' Delete the tag from the file
         Debug.WriteLine("Deleting the tag from the file")
         codecs.DeleteTag(outStreamTif, 1, pageNumberTagId)

         ' Make sure the tag is deleted
         Debug.WriteLine("Reading the tag from the file again")
         readTag = codecs.ReadTag(outStreamTif, 1, pageNumberTagId)

         If readTag Is Nothing Then
            Debug.WriteLine("Tag was not found")
         Else
            Debug.WriteLine("Tag is found, this should not happen")
         End If

         Debug.Assert(readTag Is Nothing)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Deletes a tag from a stream, if the file supports tags (TIFF or Exif). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data of the file from which to delete the tag.</param>
      <param name="pageNumber">The 1-based index of the page from which the tag will be deleted. Use -1 to delete the tag from
            the last page. Use 1 to delete the tag from the first page.</param>
      <param name="id">The ID of the tag in the TIFF file. The tag IDs are between 0 and 65535.</param>
      <remarks>
        <para>If you want to delete the tag from a particular IFD in the file, set
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.UseImageFileDirectoryOffset</see>
            to true, and set <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>
            to the IFD in question. This method will delete tags only from the main IFDs that make up an image. Some TIFF tags are
            themselves SubIFDs. You can delete tags from such SubIFDs by using
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.UseImageFileDirectoryOffset</see>
            and
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>
            specifying the IFD as above.</para>
        <para>Notes:</para>
        <para>
          <list type="bullet">
            <item>
              <description>The <strong>Leadtools.Codecs.Cmp.dll</strong> codec is used to delete the tag from all the TIFF and Exif
            files.</description>
            </item>
            <item>
              <description>Do not attempt to use this method to delete tags from inside the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event. If you
            want to delete tags that you enumerate, use the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound" /> event to add the tags to a list. Upon returning
            from <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />, you can delete all the tags from the list.</description>
            </item>
            <item>
              <description>You should be careful when you delete non-custom tags (tags below 32768). If you delete the wrong tag,
            you might corrupt the TIF file!.</description>
            </item>
          </list>
        </para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">DeleteTag</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)">
      <summary>Gets the specified tagged data from a TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data.</returns>
      <remarks>
        <para>This method is provided to support TIFF tags that you define. If no such tag exists in the image, this method will
            return a null reference (Nothing in Visual Basic).</para>
        <para>To read all the tags stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" /></para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)">EnumTags(string, int) Method</seealso>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)">EnumTags(Stream, int) method</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">DeleteTag</see>.</example>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the tag.</param>
      <param name="id">
        <para>Tag to identify the data in the TIFF file. Use the same tag that you specified in the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.String,System.Int32,Leadtools.RasterTagMetadata)" />. Examples
            of registered tags are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0x8298</term>
              <description>Copyright comment</description>
            </item>
            <item>
              <term>0x8769</term>
              <description>General Exif comments</description>
            </item>
            <item>
              <term>0x8825</term>
              <description>Exif GPS comments</description>
            </item>
            <item>
              <term>0x80A4</term>
              <description>Annotation TIFF tag</description>
            </item>
          </list>
        </para>
      </param>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Gets the specified tagged data from a TIFF stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data.</returns>
      <remarks>
        <para>This method is provided to support TIFF tags that you define. If no such tag exists in the image, this method will
            return a null reference (Nothing in Visual Basic).</para>
        <para>To read all the tags stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" /></para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">DeleteTag</see>.</example>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)">EnumTags(string, int) Method</seealso>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)">EnumTags(Stream, int) Method</seealso>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file image data.</param>
      <param name="pageNumber">1-based index of the page from which to read the tag.</param>
      <param name="id">
        <para>Tag to identify the data in the TIFF file. Use the same tag that you specified in the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.String,System.Int32,Leadtools.RasterTagMetadata)" />. Examples
            of registered tags are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0x8298</term>
              <description>Copyright comment</description>
            </item>
            <item>
              <term>0x8769</term>
              <description>General Exif comments</description>
            </item>
            <item>
              <term>0x8825</term>
              <description>Exif GPS comments</description>
            </item>
            <item>
              <term>0x80A4</term>
              <description>Annotation TIFF tag</description>
            </item>
          </list>
        </para>
      </param>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)">
      <summary>Gets the specified GeoKey data from a TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the GeoKey.</param>
      <param name="id">
        <para>GeoKey ID. Values of the GeoKey ID range between 0 and 65535. Possible ranges are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Range</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0..1023</term>
              <description>Do not use; reserved for future use.</description>
            </item>
            <item>
              <term>1024..2047</term>
              <description>GeoTIFF Configuration Keys.</description>
            </item>
            <item>
              <term>2048..3071</term>
              <description>Geographic/Geocentric CS Parameter Keys.</description>
            </item>
            <item>
              <term>3072..4095</term>
              <description>Projected CS Parameter Keys.</description>
            </item>
            <item>
              <term>4096..5119</term>
              <description>Vertical CS Parameter Keys.</description>
            </item>
            <item>
              <term>5120..32767</term>
              <description>Reserved.</description>
            </item>
            <item>
              <term>32768..65535</term>
              <description>Private use - use to store your own data.</description>
            </item>
          </list>
        </para>
      </param>
      <returns>The GeoKey data.</returns>
      <remarks>
        <para>You can use this method to obtain the GeoKey data from a particular file.</para>
        <para>If no such GeoKey exists in the image, this method will return a null reference (Nothing in Visual Basic).</para>
        <para>The most efficient way of reading the GeoKeys in a file is to enumerate them with <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" /> and 
            then read each GeoKey with <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>Refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Gets the specified GeoKey data from a TIFF stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file data.</param>
      <param name="pageNumber">1-based index of the page from which to read the GeoKey.</param>
      <param name="id">
        <para>GeoKey ID. Values of the GeoKey ID range between 0 and 65535. Possible ranges are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Range</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0..1023</term>
              <description>Do not use; reserved for future use.</description>
            </item>
            <item>
              <term>1024..2047</term>
              <description>GeoTIFF Configuration Keys.</description>
            </item>
            <item>
              <term>2048..3071</term>
              <description>Geographic/Geocentric CS Parameter Keys.</description>
            </item>
            <item>
              <term>3072..4095</term>
              <description>Projected CS Parameter Keys.</description>
            </item>
            <item>
              <term>4096..5119</term>
              <description>Vertical CS Parameter Keys.</description>
            </item>
            <item>
              <term>5120..32767</term>
              <description>Reserved.</description>
            </item>
            <item>
              <term>32768..65535</term>
              <description>Private use - use to store your own data.</description>
            </item>
          </list>
        </para>
      </param>
      <returns>The GeoKey data.</returns>
      <remarks>
        <para>You can use this method to obtain the GeoKey data from a particular file.</para>
        <para>If no such GeoKey exists in the image, this method will return a null reference (Nothing in Visual Basic).</para>
        <para>The most efficient way of reading the GeoKeys in a file is to enumerate them with <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" /> and 
            then read each GeoKey with <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.String,System.Int32,Leadtools.RasterTagMetadata)">
      <summary>Writes or changes a tag to an existing file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="tag">Tag to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes tags into an existing file or changes tags in an existing file.</para>
        <para>This method works only with TIFF files.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the tags that you write. If you write bad tags, the file
            might become corrupted. Consult the TIFF documentation for a list of predefined tags. It is recommended that you write only
            the user-defined tags (the tags between 0x8000 and 0xFFFF).</para>
        <para>See the TIFF documentation for a complete list of the TIFF tags and types.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">DeleteTag</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)">
      <summary>Writes or changes a tag to an existing stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="tag">Tag to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes tags into an existing file or changes tags in an existing file.</para>
        <para>This method works only with TIFF files.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the tags that you write. If you write bad tags, the file
            might become corrupted. Consult the TIFF documentation for a list of predefined tags. It is recommended that you write only
            the user-defined tags (the tags between 0x8000 and 0xFFFF).</para>
        <para>See the TIFF documentation for a complete list of the TIFF tags and types.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the tag. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)">DeleteTag</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTags(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">
      <summary>
            Writes or changes one or more tags to an existing file.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="tags">A collection of <see cref="T:Leadtools.RasterTagMetadata" /> objects to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes tags into an existing file or changes tags in an existing file.</para>
        <para>This method works only with TIFF files.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the tags that you write. If you write bad tags, the file
            might become corrupted. Consult the TIFF documentation for a list of predefined tags. It is recommended that you write only
            the user-defined tags (the tags between 0x8000 and 0xFFFF).</para>
        <para>See the TIFF documentation for a complete list of the TIFF tags and types.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTags(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">
      <summary>
            Writes or changes one or more tags to an existing stream.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="tags">A collection of <see cref="T:Leadtools.RasterTagMetadata" /> objects to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes tags into an existing file or changes tags in an existing file.</para>
        <para>This method works only with TIFF files.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the tags that you write. If you write bad tags, the file
            might become corrupted. Consult the TIFF documentation for a list of predefined tags. It is recommended that you write only
            the user-defined tags (the tags between 0x8000 and 0xFFFF).</para>
        <para>See the TIFF documentation for a complete list of the TIFF tags and types.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteGeoKey(System.String,System.Int32,Leadtools.RasterTagMetadata)">
      <summary>Writes or changes a GeoKeys to an existing file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the filename.</param>
      <param name="pageNumber">1-based index of the page at which to write the GeoKey.</param>
      <param name="geoKey">GeoKey to identify the data in the Geo TIFF file.</param>
      <remarks>
        <para>This method writes to or changes the GeoKeys in an existing file.</para>
        <para>This method works only with TIFF files. If you also want to write the other TIFF tags and comments, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">WriteMarkers</see> instead.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the GeoKeys that you write. If you write bad GeoKeys,
            the file might become corrupted. Consult the GeoTIFF specification documentation for a list of GeoKeys.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>
        <para>This example will show all the geo keys in the given file then loads them and adds them to a destination file</para>
        <code lang="VB">      Private geoKeySrcFileName As String
      Private geoKeyDestFileName As String

      Private Sub WriteGeoKeyExample(ByVal srcFileName As String, ByVal destFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeySrcFileName = srcFileName
         geoKeyDestFileName = destFileName

         AddHandler codecs.GeoKeyFound, AddressOf codecs_MyGeyKeyFound
         codecs.EnumGeoKeys(srcFileName, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_MyGeyKeyFound

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_MyGeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Console.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeySrcFileName, 1, e.Id)

         ' Write it to the destination file
         Console.WriteLine("Wirting this GeoKey to the destination file")
         codecs.WriteGeoKey(geoKeyDestFileName, 1, geoKey)
      End Sub</code>
        <code lang="CS">      string geoKeySrcFileName;
      string geoKeyDestFileName;

      void WriteGeoKeyExample(string srcFileName, string destFileName)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeySrcFileName = srcFileName;
         geoKeyDestFileName = destFileName;

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_MyGeyKeyFound);
         codecs.EnumGeoKeys(srcFileName, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_MyGeyKeyFound);

         // Clean up
         codecs.Dispose();
      }

      void codecs_MyGeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Console.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, Data Length={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeySrcFileName, 1, e.Id);

         // Write it to the destination file
         Console.WriteLine("Wirting this GeoKey to the destination file");
         codecs.WriteGeoKey(geoKeyDestFileName, 1, geoKey);
      }</code>
        <code lang="SilverlightCSharp">      Stream geoKeySrcStream;
      Stream geoKeyDestStream;
      void WriteGeoKeyExample(Stream inStreamGeyKey, Stream outStreamGeyKey)
      {
         RasterCodecs codecs = new RasterCodecs();

         geoKeySrcStream = inStreamGeyKey;
         geoKeyDestStream = outStreamGeyKey;

         codecs.GeoKeyFound += new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_MyGeyKeyFound);
         codecs.EnumGeoKeys(inStreamGeyKey, 1);
         codecs.GeoKeyFound -= new EventHandler&lt;CodecsEnumGeoKeysEventArgs&gt;(codecs_MyGeyKeyFound);
      }

      void codecs_MyGeyKeyFound(object sender, CodecsEnumGeoKeysEventArgs e)
      {
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length);

         // Load this GeoKey
         RasterCodecs codecs = sender as RasterCodecs;
         RasterTagMetadata geoKey = codecs.ReadGeoKey(geoKeySrcStream, 1, e.Id);

         // Write it to the destination file
         Debug.WriteLine("Wirting this GeoKey to the destination file");
         codecs.WriteGeoKey(geoKeyDestStream, 1, geoKey);
      }</code>
        <code lang="SilverlightVB">      Private geoKeySrcStream As Stream
      Private geoKeyDestStream As Stream
      Private Sub WriteGeoKeyExample(ByVal inStreamGeyKey As Stream, ByVal outStreamGeyKey As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         geoKeySrcStream = inStreamGeyKey
         geoKeyDestStream = outStreamGeyKey

         AddHandler codecs.GeoKeyFound, AddressOf codecs_MyGeyKeyFound
         codecs.EnumGeoKeys(inStreamGeyKey, 1)
         RemoveHandler codecs.GeoKeyFound, AddressOf codecs_MyGeyKeyFound
      End Sub

      Private Sub codecs_MyGeyKeyFound(ByVal sender As Object, ByVal e As CodecsEnumGeoKeysEventArgs)
         Debug.WriteLine("GeoKey: Id={0}, Count={1}, Type={2}, DataLength={3}, Data=", e.Id, e.Count, e.MetadataType, e.Buffer.Length)

         ' Load this GeoKey
         Dim codecs As RasterCodecs = TryCast(sender, RasterCodecs)
         Dim geoKey As RasterTagMetadata = codecs.ReadGeoKey(geoKeySrcStream, 1, e.Id)

         ' Write it to the destination file
         Debug.WriteLine("Wirting this GeoKey to the destination file")
         codecs.WriteGeoKey(geoKeyDestStream, 1, geoKey)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteGeoKey(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)">
      <summary>Writes or changes a GeoKeys to an existing stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the GeoKey.</param>
      <param name="geoKey">GeoKey to identify the data in the Geo TIFF file.</param>
      <remarks>
        <para>This method writes to or changes the GeoKeys in an existing file.</para>
        <para>This method works only with TIFF files. If you also want to write the other TIFF tags and comments, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">WriteMarkers</see> instead.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the GeoKeys that you write. If you write bad GeoKeys,
            the file might become corrupted. Consult the GeoTIFF specification documentation for a list of GeoKeys.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteGeoKey(System.String,System.Int32,Leadtools.RasterTagMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteGeoKeys(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">
      <summary>
            Writes or changes one or more GeoKeys to an existing file.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="geoKeys">A collection of <see cref="T:Leadtools.RasterTagMetadata" /> GeoKey objects to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes to or changes the GeoKeys in an existing file.</para>
        <para>This method works only with TIFF files. If you also want to write the other TIFF tags and comments, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">WriteMarkers</see> instead.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the GeoKeys that you write. If you write bad GeoKeys,
            the file might become corrupted. Consult the GeoTIFF specification documentation for a list of GeoKeys.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteGeoKeys(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">
      <summary>
            Writes or changes one or more GeoKeys to an existing stream.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the tag.</param>
      <param name="geoKeys">A collection of <see cref="T:Leadtools.RasterTagMetadata" /> GeoKey objects to identify the data in the TIFF file.</param>
      <remarks>
        <para>This method writes to or changes the GeoKeys in an existing file.</para>
        <para>This method works only with TIFF files. If you also want to write the other TIFF tags and comments, use
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">WriteMarkers</see> instead.</para>
        <para>Note: Use this method carefully. LEADTOOLS will not restrict the GeoKeys that you write. If you write bad GeoKeys,
            the file might become corrupted. Consult the GeoTIFF specification documentation for a list of GeoKeys.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)">
      <summary>Gets a comment field from a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the comment.</param>
      <param name="type">The type of comment. Refer to <see cref="T:L.Topics.FileComments">Types of File Comments</see>.</param>
      <returns>A <see cref="T:Leadtools.RasterCommentMetadata" /> object containing the comment field information.  If no such comment
            is found in the file, this method will return a null reference (Nothing in Visual Basic).</returns>
      <remarks>
        <para>Some file formats can contain comments, and some cannot, and each file format has its own set of comment types.
            When you save a file, the comments in the <see cref="T:Leadtools.RasterImage" /> object can be saved in the file. The index into the
            array (specified using a constant) determines the type of comment.</para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
        <para>To read all the comments stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>
        <para>This example demonstrates all of the methods related to comments for TIFF files. It saves a few comments to a file before loading them back</para>
        <code lang="VB">      Public Sub CommentsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Comments.tif")

         ' Convert the source file to TIF
         Console.WriteLine("Converting the source file to TIF")
         codecs.Convert(srcFileName, destFileName, RasterImageFormat.Tif, 0, 0, 24, Nothing)

         ' Add the artist comment
         Dim writeComment As RasterCommentMetadata = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Artist
         writeComment.FromAscii("LEADTOOLS")

         Console.WriteLine("Writing the following comment:")
         Console.WriteLine(" Type:{0}, Data:{1}", writeComment.Type, writeComment.ToAscii())

         codecs.WriteComment(destFileName, 1, writeComment)

         ' Read the comment back
         Dim readComment As RasterCommentMetadata = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.Artist)
         Console.WriteLine("The following comment has been read:")
         Console.WriteLine(" Type:{0}, Data:{1}", readComment.Type, readComment.ToAscii())

         ' Write a few comments to the file in one pass
         Dim comments As RasterCollection(Of RasterCommentMetadata) = New RasterCollection(Of RasterCommentMetadata)()
         writeComment = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Artist
         writeComment.FromAscii("LEADTOOLS Again")
         comments.Add(writeComment)

         writeComment = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Copyright
         writeComment.FromAscii("(c) 2006")
         comments.Add(writeComment)

         Console.WriteLine("Writing the following comments to the file:")
         For Each comment As RasterCommentMetadata In comments
            Console.WriteLine(" Type:{0}, Data:{1}", comment.Type, comment.ToAscii())
         Next comment

         codecs.WriteComments(destFileName, 1, comments)

         ' Now get all the comments in the file and show them:
         Console.WriteLine("Reading all comments from the file:")

         Dim tifComments As RasterCommentMetadataType() = _
         { _
            RasterCommentMetadataType.Artist, _
            RasterCommentMetadataType.Copyright, _
            RasterCommentMetadataType.DateTime, _
            RasterCommentMetadataType.Description, _
            RasterCommentMetadataType.HostComputer, _
            RasterCommentMetadataType.Make, _
            RasterCommentMetadataType.Model, _
            RasterCommentMetadataType.NameOfDocument, _
            RasterCommentMetadataType.NameOfPage, _
            RasterCommentMetadataType.Software _
         }

         For Each tifComment As RasterCommentMetadataType In tifComments
            Dim comment As RasterCommentMetadata = codecs.ReadComment(destFileName, 1, tifComment)
            If Not comment Is Nothing Then
               Console.Write("Found comment, Type:{0}, Data:", comment.Type)

               Dim dataType As RasterCommentMetadataDataType = RasterCommentMetadata.GetDataType(comment.Type)

               Dim byteData As Byte()
               Dim shortData As Short()
               Dim rationalData As RasterMetadataRational()
               Dim urationalData As RasterMetadataURational()

               Select Case dataType
                  Case RasterCommentMetadataDataType.Ascii
                     Console.WriteLine(comment.ToAscii())

                  Case RasterCommentMetadataDataType.Byte
                     byteData = comment.ToByte()
                     Dim i As Integer = 0
                     Do While i &lt; byteData.Length
                        Console.Write("{0:X} ", byteData(i))
                        i += 1
                     Loop
                     Console.WriteLine()

                  Case RasterCommentMetadataDataType.Int16
                     shortData = comment.ToInt16()
                     Dim i As Integer = 0
                     Do While i &lt; shortData.Length
                        Console.Write("{0:X} ", shortData(i))
                        i += 1
                     Loop
                     Console.WriteLine()

                  Case RasterCommentMetadataDataType.Rational
                     rationalData = comment.ToRational()
                     Dim i As Integer = 0
                     Do While i &lt; rationalData.Length
                        Console.Write("{0}/{1) ", rationalData(i).Numerator, rationalData(i).Denominator)
                        i += 1
                     Loop
                     Console.WriteLine()

                  Case RasterCommentMetadataDataType.URational
                     urationalData = comment.ToURational()
                     Dim i As Integer = 0
                     Do While i &lt; urationalData.Length
                        Console.Write("{0}/{1) ", urationalData(i).Numerator, urationalData(i).Denominator)
                        i += 1
                     Loop
                     Console.WriteLine()
               End Select
            End If
         Next tifComment

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CommentsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_Comments.tif");

         // Convert the source file to TIF
         Console.WriteLine("Converting the source file to TIF");
         codecs.Convert(srcFileName, destFileName, RasterImageFormat.Tif, 0, 0, 24, null);

         // Add the artist comment
         RasterCommentMetadata writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Artist;
         writeComment.FromAscii("LEADTOOLS");

         Console.WriteLine("Writing the following comment:");
         Console.WriteLine(" Type:{0}, Data:{1}", writeComment.Type, writeComment.ToAscii());

         codecs.WriteComment(destFileName, 1, writeComment);

         // Read the comment back
         RasterCommentMetadata readComment = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.Artist);
         Console.WriteLine("The following comment has been read:");
         Console.WriteLine(" Type:{0}, Data:{1}", readComment.Type, readComment.ToAscii());

         // Write a few comments to the file in one pass
         RasterCollection&lt;RasterCommentMetadata&gt; comments = new RasterCollection&lt;RasterCommentMetadata&gt;();
         writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Artist;
         writeComment.FromAscii("LEADTOOLS Again");
         comments.Add(writeComment);

         writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Copyright;
         writeComment.FromAscii("(c) 2006");
         comments.Add(writeComment);

         Console.WriteLine("Writing the following comments to the file:");
         foreach(RasterCommentMetadata comment in comments)
            Console.WriteLine(" Type:{0}, Data:{1}", comment.Type, comment.ToAscii());

         codecs.WriteComments(destFileName, 1, comments);

         // Now get all the comments in the file and show them:
         Console.WriteLine("Reading all comments from the file:");

         RasterCommentMetadataType[] tifComments =
         {
            RasterCommentMetadataType.Artist,
            RasterCommentMetadataType.Copyright,
            RasterCommentMetadataType.DateTime,
            RasterCommentMetadataType.Description,
            RasterCommentMetadataType.HostComputer,
            RasterCommentMetadataType.Make,
            RasterCommentMetadataType.Model,
            RasterCommentMetadataType.NameOfDocument,
            RasterCommentMetadataType.NameOfPage,
            RasterCommentMetadataType.Software,
         };

         foreach(RasterCommentMetadataType tifComment in tifComments)
         {
            RasterCommentMetadata comment = codecs.ReadComment(destFileName, 1, tifComment);
            if(comment != null)
            {
               Console.Write("Found comment, Type:{0}, Data:", comment.Type);

               RasterCommentMetadataDataType dataType = RasterCommentMetadata.GetDataType(comment.Type);

               byte[] byteData;
               short[] shortData;
               RasterMetadataRational[] rationalData;
               RasterMetadataURational[] urationalData;

               switch(dataType)
               {
                  case RasterCommentMetadataDataType.Ascii:
                     Console.WriteLine(comment.ToAscii());
                     break;

                  case RasterCommentMetadataDataType.Byte:
                     byteData = comment.ToByte();
                     for(int i = 0; i &lt; byteData.Length; i++)
                        Console.Write("{0:X} ", byteData[i]);
                     Console.WriteLine();
                     break;

                  case RasterCommentMetadataDataType.Int16:
                     shortData = comment.ToInt16();
                     for(int i = 0; i &lt; shortData.Length; i++)
                        Console.Write("{0:X} ", shortData[i]);
                     Console.WriteLine();
                     break;

                  case RasterCommentMetadataDataType.Rational:
                     rationalData = comment.ToRational();
                     for(int i = 0; i &lt; rationalData.Length; i++)
                        Console.Write(@"{0}/{1) ", rationalData[i].Numerator, rationalData[i].Denominator);
                     Console.WriteLine();
                     break;

                  case RasterCommentMetadataDataType.URational:
                     urationalData = comment.ToURational();
                     for(int i = 0; i &lt; urationalData.Length; i++)
                        Console.Write(@"{0}/{1) ", urationalData[i].Numerator, urationalData[i].Denominator);
                     Console.WriteLine();
                     break;
               }
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CommentsExample(Stream inStreamCmp, Stream outStreamTif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Convert the source file to TIF
         Debug.WriteLine("Converting the source file to TIF");
         codecs.Convert(inStreamCmp, outStreamTif, RasterImageFormat.Tif, 0, 0, 24, null);

         // Add the artist comment
         RasterCommentMetadata writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Artist;
         writeComment.FromAscii("LEADTOOLS");

         Debug.WriteLine("Writing the following comment:");
         Debug.WriteLine(" Type:{0}, Data:{1}", writeComment.Type, writeComment.ToAscii());

         codecs.WriteComment(outStreamTif, 1, writeComment);

         // Read the comment back
         RasterCommentMetadata readComment = codecs.ReadComment(outStreamTif, 1, RasterCommentMetadataType.Artist);
         Debug.WriteLine("The following comment has been read:");
         Debug.WriteLine(" Type:{0}, Data:{1}", readComment.Type, readComment.ToAscii());

         // Write a few comments to the file in one pass
         RasterCollection&lt;RasterCommentMetadata&gt; comments = new RasterCollection&lt;RasterCommentMetadata&gt;();
         writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Artist;
         writeComment.FromAscii("LEADTOOLS Again");
         comments.Add(writeComment);

         writeComment = new RasterCommentMetadata();
         writeComment.Type = RasterCommentMetadataType.Copyright;
         writeComment.FromAscii("(c) 2006");
         comments.Add(writeComment);

         Debug.WriteLine("Writing the following comments to the file:");
         foreach(RasterCommentMetadata comment in comments)
            Debug.WriteLine(" Type:{0}, Data:{1}", comment.Type, comment.ToAscii());

         codecs.WriteComments(outStreamTif, 1, comments);

         // Now get all the comments in the file and show them:
         Debug.WriteLine("Reading all comments from the file:");

         RasterCommentMetadataType[] tifComments =
         {
            RasterCommentMetadataType.Artist,
            RasterCommentMetadataType.Copyright,
            RasterCommentMetadataType.DateTime,
            RasterCommentMetadataType.Description,
            RasterCommentMetadataType.HostComputer,
            RasterCommentMetadataType.Make,
            RasterCommentMetadataType.Model,
            RasterCommentMetadataType.NameOfDocument,
            RasterCommentMetadataType.NameOfPage,
            RasterCommentMetadataType.Software,
         };

         foreach(RasterCommentMetadataType tifComment in tifComments)
         {
            RasterCommentMetadata comment = codecs.ReadComment(outStreamTif, 1, tifComment);
            if(comment != null)
            {
               Debug.WriteLine("Found comment, Type:{0}, Data:", comment.Type);

               RasterCommentMetadataDataType dataType = RasterCommentMetadata.GetDataType(comment.Type);

               byte[] byteData;
               short[] shortData;
               RasterMetadataRational[] rationalData;
               RasterMetadataURational[] urationalData;

               switch(dataType)
               {
                  case RasterCommentMetadataDataType.Ascii:
                     Debug.WriteLine(comment.ToAscii());
                     break;

                  case RasterCommentMetadataDataType.Byte:
                     byteData = comment.ToByte();
                     for(int i = 0; i &lt; byteData.Length; i++)
                        Debug.WriteLine("{0:X} ", byteData[i]);
                     Debug.WriteLine("");
                     break;

                  case RasterCommentMetadataDataType.Int16:
                     shortData = comment.ToInt16();
                     for(int i = 0; i &lt; shortData.Length; i++)
                        Debug.WriteLine("{0:X} ", shortData[i]);
                     Debug.WriteLine("");
                     break;

                  case RasterCommentMetadataDataType.Rational:
                     rationalData = comment.ToRational();
                     for(int i = 0; i &lt; rationalData.Length; i++)
                        Debug.WriteLine(@"{0}/{1) ", rationalData[i].Numerator, rationalData[i].Denominator);
                     Debug.WriteLine("");
                     break;

                  case RasterCommentMetadataDataType.URational:
                     urationalData = comment.ToURational();
                     for(int i = 0; i &lt; urationalData.Length; i++)
                        Debug.WriteLine(@"{0}/{1) ", urationalData[i].Numerator, urationalData[i].Denominator);
                     Debug.WriteLine("");
                     break;
               }
            }
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub CommentsExample(ByVal inStreamCmp As Stream, ByVal outStreamTif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Convert the source file to TIF
         Debug.WriteLine("Converting the source file to TIF")
         codecs.Convert(inStreamCmp, outStreamTif, RasterImageFormat.Tif, 0, 0, 24, Nothing)

         ' Add the artist comment
         Dim writeComment As RasterCommentMetadata = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Artist
         writeComment.FromAscii("LEADTOOLS")

         Debug.WriteLine("Writing the following comment:")
         Debug.WriteLine(" Type:{0}, Data:{1}", writeComment.Type, writeComment.ToAscii())

         codecs.WriteComment(outStreamTif, 1, writeComment)

         ' Read the comment back
         Dim readComment As RasterCommentMetadata = codecs.ReadComment(outStreamTif, 1, RasterCommentMetadataType.Artist)
         Debug.WriteLine("The following comment has been read:")
         Debug.WriteLine(" Type:{0}, Data:{1}", readComment.Type, readComment.ToAscii())

         ' Write a few comments to the file in one pass
         Dim comments As RasterCollection(Of RasterCommentMetadata) = New RasterCollection(Of RasterCommentMetadata)()
         writeComment = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Artist
         writeComment.FromAscii("LEADTOOLS Again")
         comments.Add(writeComment)

         writeComment = New RasterCommentMetadata()
         writeComment.Type = RasterCommentMetadataType.Copyright
         writeComment.FromAscii("(c) 2006")
         comments.Add(writeComment)

         Debug.WriteLine("Writing the following comments to the file:")
         For Each comment As RasterCommentMetadata In comments
            Debug.WriteLine(" Type:{0}, Data:{1}", comment.Type, comment.ToAscii())
         Next comment

         codecs.WriteComments(outStreamTif, 1, comments)

         ' Now get all the comments in the file and show them:
         Debug.WriteLine("Reading all comments from the file:")

         Dim tifComments As RasterCommentMetadataType() = {RasterCommentMetadataType.Artist, RasterCommentMetadataType.Copyright, RasterCommentMetadataType.DateTime, RasterCommentMetadataType.Description, RasterCommentMetadataType.HostComputer, RasterCommentMetadataType.Make, RasterCommentMetadataType.Model, RasterCommentMetadataType.NameOfDocument, RasterCommentMetadataType.NameOfPage, RasterCommentMetadataType.Software}

         For Each tifComment As RasterCommentMetadataType In tifComments
            Dim comment As RasterCommentMetadata = codecs.ReadComment(outStreamTif, 1, tifComment)
            If Not comment Is Nothing Then
               Debug.WriteLine("Found comment, Type:{0}, Data:", comment.Type)

               Dim dataType As RasterCommentMetadataDataType = RasterCommentMetadata.GetDataType(comment.Type)

               Dim byteData As Byte()
               Dim shortData As Short()
               Dim rationalData As RasterMetadataRational()
               Dim urationalData As RasterMetadataURational()

               Select Case dataType
                  Case RasterCommentMetadataDataType.Ascii
                     Debug.WriteLine(comment.ToAscii())

                  Case RasterCommentMetadataDataType.Byte
                     byteData = comment.ToByte()
                     Dim i As Integer = 0
                     Do While i &lt; byteData.Length
                        Debug.WriteLine("{0:X} ", byteData(i))
                        i += 1
                     Loop
                     Debug.WriteLine("")

                  Case RasterCommentMetadataDataType.Int16
                     shortData = comment.ToInt16()
                     Dim i As Integer = 0
                     Do While i &lt; shortData.Length
                        Debug.WriteLine("{0:X} ", shortData(i))
                        i += 1
                     Loop
                     Debug.WriteLine("")

                  Case RasterCommentMetadataDataType.Rational
                     rationalData = comment.ToRational()
                     Dim i As Integer = 0
                     Do While i &lt; rationalData.Length
                        Debug.WriteLine("{0}/{1) ", rationalData(i).Numerator, rationalData(i).Denominator)
                        i += 1
                     Loop
                     Debug.WriteLine("")

                  Case RasterCommentMetadataDataType.URational
                     urationalData = comment.ToURational()
                     Dim i As Integer = 0
                     Do While i &lt; urationalData.Length
                        Debug.WriteLine("{0}/{1) ", urationalData(i).Numerator, urationalData(i).Denominator)
                        i += 1
                     Loop
                     Debug.WriteLine("")
               End Select
            End If
         Next tifComment
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadataType)">
      <summary>Gets a comment field from a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file data.</param>
      <param name="pageNumber">1-based index of the page from which to read the comment.</param>
      <param name="type">The type of comment. Refer to 
            <see cref="T:L.Topics.FileComments">Types of File Comments</see>.</param>
      <returns>A <see cref="T:Leadtools.RasterCommentMetadata" /> object containing the comment field information.  
            If no such comment
            is found in the file, this method will return a null reference (Nothing in Visual Basic).</returns>
      <remarks>
        <para>Some file formats can contain comments, and some cannot, and each file format has its 
            own set of comment types.
            When you save a file, the comments in the <see cref="T:Leadtools.RasterImage" /> object can be saved in the 
            file. The index into the
            array (specified using a constant) determines the type of comment.</para>
        <para>You can use <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" /> to check if a certain file format supports tags.</para>
        <para>To read all the comments stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.String,System.Int32,Leadtools.RasterCommentMetadata)">
      <summary>Writes a comment to an existing file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the comment.</param>
      <param name="comment">A <see cref="T:Leadtools.RasterCommentMetadata" /> object containing the comment data.</param>
      <remarks>
        <para>This function only applies to TIF, uncompressed EXIF, or FPX files.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> 
            and <see cref="T:L.Topics.FileComments">Types of File Comments</see> topics for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.ImplementingExifFeatures">Implementing Exif Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)">
      <summary>Writes a comment to an existing stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the comment.</param>
      <param name="comment">A <see cref="T:Leadtools.RasterCommentMetadata" /> object containing the comment data.</param>
      <remarks>
        <para>This function only applies to TIF, uncompressed EXIF, or FPX files.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> and 
            <see cref="T:L.Topics.FileComments">Types of File Comments</see> topics for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.ImplementingExifFeatures">Implementing Exif Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteComments(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterCommentMetadata})">
      <summary>
            Writes one or more comments to an existing file.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the comment.</param>
      <param name="comments">A collection of <see cref="T:Leadtools.RasterCommentMetadata" /> objects containing he comments data.</param>
      <remarks>
        <para>This function only applies to TIF, uncompressed EXIF, or FPX files.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExifFeatures">Implementing Exif Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteComments(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterCommentMetadata})">
      <summary>
            Writes one or more comments to an existing stream.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the comment.</param>
      <param name="comments">A collection of <see cref="T:Leadtools.RasterCommentMetadata" /> objects containing he comments data.</param>
      <remarks>
        <para>This function only applies to TIF, uncompressed EXIF, or FPX files.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the comment. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExifFeatures">Implementing Exif Features</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteMarker(System.String,System.Int32,Leadtools.RasterMarkerMetadata)">
      <summary>Writes a marker to an existing file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the marker.</param>
      <param name="marker">A <see cref="T:Leadtools.RasterMarkerMetadata" /> object that contains the marker data.</param>
      <remarks>
        <para>For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
      </remarks>
      <example>
        <para>This example read the markers from a source file and saving them to a destination file</para>
        <code lang="VB">      Private Sub MarkersExample(ByVal srcFileName As String, ByVal destFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the source image with markers
         Console.WriteLine("Loading the source image with all markers")
         codecs.Options.Load.Markers = True
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Show the markers loaded
         Console.WriteLine("These markers were loaded:")
         For Each marker As RasterMarkerMetadata In srcImage.Markers
            Dim data As Byte() = marker.GetData()
            Console.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length)
         Next marker

         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 320, 20, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)

         ' Save this as JPEG
         codecs.Save(destImage, destFileName, RasterImageFormat.Jpeg, 24)

         ' Write the markers from the source image to this destination image
         Console.WriteLine("Writing the markers to the destination file")
         codecs.WriteMarkers(destFileName, 1, srcImage.Markers)

         srcImage.Dispose()
         destImage.Dispose()

         ' Re-load the destination image with markers
         Console.WriteLine("Loading the destination image with all markers")
         codecs.Options.Load.Markers = True
         destImage = codecs.Load(destFileName)

         ' Show the markers loaded
         Console.WriteLine("These markers were loaded:")
         For Each marker As RasterMarkerMetadata In destImage.Markers
            Dim data As Byte() = marker.GetData()
            Console.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length)
         Next marker

         destImage.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void MarkersExample(string srcFileName, string destFileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the source image with markers
         Console.WriteLine("Loading the source image with all markers");
         codecs.Options.Load.Markers = true;
         RasterImage srcImage = codecs.Load(srcFileName);

         // Show the markers loaded
         Console.WriteLine("These markers were loaded:");
         foreach(RasterMarkerMetadata marker in srcImage.Markers)
         {
            byte[] data = marker.GetData();
            Console.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length);
         }

         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            320,
            20,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);

         // Save this as JPEG
         codecs.Save(destImage, destFileName, RasterImageFormat.Jpeg, 24);

         // Write the markers from the source image to this destination image
         Console.WriteLine("Writing the markers to the destination file");
         codecs.WriteMarkers(destFileName, 1, srcImage.Markers);

         srcImage.Dispose();
         destImage.Dispose();

         // Re-load the destination image with markers
         Console.WriteLine("Loading the destination image with all markers");
         codecs.Options.Load.Markers = true;
         destImage = codecs.Load(destFileName);

         // Show the markers loaded
         Console.WriteLine("These markers were loaded:");
         foreach(RasterMarkerMetadata marker in destImage.Markers)
         {
            byte[] data = marker.GetData();
            Console.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length);
         }

         destImage.Dispose();

         // Clean up
         codecs.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      void MarkersExample(Stream inStreamExif, Stream outStreamJpg)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the source image with markers
         Debug.WriteLine("Loading the source image with all markers");
         codecs.Options.Load.Markers = true;
         RasterImage srcImage = codecs.Load(inStreamExif);

         // Show the markers loaded
         Debug.WriteLine("These markers were loaded:");
         foreach(RasterMarkerMetadata marker in srcImage.Markers)
         {
            byte[] data = marker.GetData();
            Debug.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length);
         }

         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            320,
            20,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);

         // Save this as JPEG
         codecs.Save(destImage, outStreamJpg, RasterImageFormat.Jpeg, 24);

         // Write the markers from the source image to this destination image
         Debug.WriteLine("Writing the markers to the destination file");
         codecs.WriteMarkers(outStreamJpg, 1, srcImage.Markers);

         srcImage.Dispose();
         destImage.Dispose();

         // Re-load the destination image with markers
         Debug.WriteLine("Loading the destination image with all markers");
         codecs.Options.Load.Markers = true;
         destImage = codecs.Load(outStreamJpg);

         // Show the markers loaded
         Debug.WriteLine("These markers were loaded:");
         foreach(RasterMarkerMetadata marker in destImage.Markers)
         {
            byte[] data = marker.GetData();
            Debug.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length);
         }

         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Sub MarkersExample(ByVal inStreamExif As Stream, ByVal outStreamJpg As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the source image with markers
         Debug.WriteLine("Loading the source image with all markers")
         codecs.Options.Load.Markers = True
         Dim srcImage As RasterImage = codecs.Load(inStreamExif)

         ' Show the markers loaded
         Debug.WriteLine("These markers were loaded:")
         For Each marker As RasterMarkerMetadata In srcImage.Markers
            Dim data As Byte() = marker.GetData()
            Debug.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length)
         Next marker

         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 320, 20, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)

         ' Save this as JPEG
         codecs.Save(destImage, outStreamJpg, RasterImageFormat.Jpeg, 24)

         ' Write the markers from the source image to this destination image
         Debug.WriteLine("Writing the markers to the destination file")
         codecs.WriteMarkers(outStreamJpg, 1, srcImage.Markers)

         srcImage.Dispose()
         destImage.Dispose()

         ' Re-load the destination image with markers
         Debug.WriteLine("Loading the destination image with all markers")
         codecs.Options.Load.Markers = True
         destImage = codecs.Load(outStreamJpg)

         ' Show the markers loaded
         Debug.WriteLine("These markers were loaded:")
         For Each marker As RasterMarkerMetadata In destImage.Markers
            Dim data As Byte() = marker.GetData()
            Debug.WriteLine(" {0}, DataSize:{1}", marker.Id, data.Length)
         Next marker

         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteMarker(System.IO.Stream,System.Int32,Leadtools.RasterMarkerMetadata)">
      <summary>Writes a marker to an existing stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the output file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the marker.</param>
      <param name="marker">A <see cref="T:Leadtools.RasterMarkerMetadata" /> object that contains the marker data.</param>
      <remarks>
        <para>For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
        <para>When you add or remove tags, the tags array at the end of the file is re-written. When 
            you modify existing tags, the new tag value is added to the file and the IFD is 
            modified as necessary. In all of these cases, there is no image recompression.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarker(System.String,System.Int32,Leadtools.RasterMarkerMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.String,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">
      <summary>
            Writes one or more markers to an existing file.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the file name.</param>
      <param name="pageNumber">1-based index of the page at which to write the marker.</param>
      <param name="markers">A collection of <see cref="T:Leadtools.RasterMarkerMetadata" /> objects that contains the marker data.</param>
      <remarks>
        <para>For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarker(System.String,System.Int32,Leadtools.RasterMarkerMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">
      <summary>
            Writes one or more markers to an existing stream.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the output file data.</param>
      <param name="pageNumber">1-based index of the page at which to write the marker.</param>
      <param name="markers">A collection of <see cref="T:Leadtools.RasterMarkerMetadata" /> objects that contains the marker data.</param>
      <remarks>
        <para>For Exif files, this metadata collection will contain all the Exif and GPS comments, stored in APP1. It will also
            contain the audio information stored in APP2.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarker(System.String,System.Int32,Leadtools.RasterMarkerMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)">
      <summary>Performs a lossless transformation for certain formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="srcFileName">A <see cref="T:System.String" /> containing the name of the source file.</param>
      <param name="destFileName">A <see cref="T:System.String" /> containing the name of the destination file.</param>
      <param name="flags">
        <para>Indicates the transform to be performed.  Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.Flip</see>
              </term>
              <description>Flip the image vertically</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.Reverse</see>
              </term>
              <description>Reverse the image (flip horizontally)</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.Rotate90</see>
              </term>
              <description>Rotate the image clockwise by 90 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.Rotate180</see>
              </term>
              <description>Rotate the image clockwise by 180 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.Rotate270</see>
              </term>
              <description>Rotate the image clockwise by 270 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTransformFlags">CodecsTransformFlags.None</see>
              </term>
              <description>Do nothing</description>
            </item>
          </list>
        </para>
      </param>
      <param name="pageNumber">1-based index of the page within the source file to process.</param>
      <param name="callback">
        <para>Optional callback method for processing custom markers. (This is useful for rotating JPEG files only). When
            transforming JPEG files, the method will enumerate all the markers contained in the file and it will pass them to this
            callback. The user has the ability to control the transformation for all the markers. For additional information on JPEG
            markers, please consult the JPEG specification.</para>
        <para>
          <list type="bullet">
            <item>
              <description>If you do not provide a callback method, use a null reference (Nothing in Visual Basic) as the value of
            this parameter and no JPEG markers will be transformed</description>
            </item>
            <item>
              <description>If you do provide a callback method, use a delegate to a method that has the same signature as 
            <see cref="T:Leadtools.Codecs.CodecsTransformMarkerCallback" /> as the value of this parameter</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>Currently, only JPEG, CMP and JPEG TIFF formats are supported.</para>
        <para>Only one of the rotate flags can be specified.</para>
        <para>The files transformed by this method will be read transformed by other applications capable of reading these file
            formats.</para>
        <para>JPEG and Exif JPEG stamps are transformed according to the flags specified in <paramref name="flags" />. Please note
            that some JPEG stamps will not be transformed by this method. Specifically, stamps stored in markers other than APP0 and
            APP1 will not be transformed. Use the <paramref name="callback" /> parameter to handle these cases. For example, if a stamp
            is in the APP14 marker, check for this in the <paramref name="callback" /> and write your own stamp using
            <see cref="M:Leadtools.Codecs.RasterCodecs.SaveStamp(Leadtools.RasterImage,System.String)" />.</para>
        <para>
            For JPEG files, the size of the image might be changed. The image width and height
            is adjusted to be a multiple of 8 or 16 depending on the subsampling present in the
            image. If the image is 4:4:4, the width and height is adjusted to be a multiple of
            16. If the image is 422, the original width is adjusted to be a multiple of 16 and
            the height to be a multiple of 8. After rotation, the width might become height.
            If the image is 411, the width and height are adjusted to be a multiple of 16.
            </para>
        <para>The transformation is lossless. It is better than loading the image, transforming it using
            <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> or <see cref="T:Leadtools.ImageProcessing.FlipCommand" /> and resaving it. Repeated load and save process will cause image
            degradation, but calling this method will not cause any image degradation.</para>
        <para>The rotation transformations are performed before the flip/reverse operations.</para>
        <para>Use the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> method to control how the transform markers are used.</para>
      </remarks>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <example>
        <para>This example will use the JPEG transformation to rotate a file by 90 degrees</para>
        <code lang="VB">      Public Sub TransformExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Transform.cmp")

         codecs.Transform(srcFileName, destFileName, CodecsTransformFlags.Rotate90, 1, AddressOf MyCodecsTransformMarkerCallback)

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Function MyCodecsTransformMarkerCallback(ByVal id As Integer, ByVal buffer As RasterNativeBuffer, ByVal transform As CodecsTransformFlags) As CodecsTransformMarkerAction
         Console.WriteLine("Transforming: id: {0}, Data Length: {1}, transform: {2}", id, buffer.Length, transform)
         Return CodecsTransformMarkerAction.Default
      End Function

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void TransformExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Transform.cmp");

         codecs.Transform(
            srcFileName,
            destFileName,
            CodecsTransformFlags.Rotate90,
            1,
            MyCodecsTransformMarkerCallback);

         // Clean up
         codecs.Dispose();
      }

      CodecsTransformMarkerAction MyCodecsTransformMarkerCallback(int id, RasterNativeBuffer buffer, CodecsTransformFlags transform)
      {
         Console.WriteLine("Transforming: id: {0}, Data Length: {1}, transform: {2}", id, buffer.Length, transform);
         return CodecsTransformMarkerAction.Default;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Controls how the transform markers are used when performing a lossless transformation for certain formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="id">The id of the metadata marker.</param>
      <param name="data">A byte array containing the data for the metadata marker.</param>
      <param name="dataOffset">Offset into <paramref name="data" /> into which to beging the read operation.</param>
      <param name="dataLength">Number of bytes to read from <paramref name="data" />.</param>
      <remarks>
        <para>You should use this method to write a certain marker data into the file.</para>
        <para>This method can be called only from within the <see cref="T:Leadtools.Codecs.CodecsTransformMarkerCallback" /> passed to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> method.</para>
        <para>The transform mechanism is as follows:</para>
        <para>
          <list type="bullet">
            <item>
              <description>You call <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" />.</description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> will call the <see cref="T:Leadtools.Codecs.CodecsTransformMarkerCallback" /> callback passed to it
            for every marker contained in the source file. In the callback, you can replace markers, insert markers or allow Leadtools
            to do the default processing (<strong>recommended</strong>).</description>
            </item>
            <item>
              <description>You can override the default action for a marker by returning one of the following values from the
            transform callback:
            <list type="bullet"><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Default</see>:
            Let Leadtools perform the default action on the marker. This means the marker might (or might not) be transformed and will
            be written to the destination file.</description></item><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Ignore</see>: This marker will be
            ignored (this is useful for stripping unwanted markers). You should also use this if you want to do your own
            transformation and write the marker yourself by calling <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" />.</description></item><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Abort</see>: Abort the process.
            This will cause <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> to throw a 'user-abort' exception.</description></item></list></description>
            </item>
          </list>
        </para>
        <para>Note: You can also use <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> to insert your own markers. The marker will be inserted
            before the current marker. You can call <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> as many times as you wish. Every call to
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> will insert a new marker.</para>
        <para>
          <strong>Warning</strong>: Incorrect handling of the markers will generate corrupt files!  Since some markers contain
            important information about the image (image width, height, compression method, colorspace, etc), you should use caution
            when working with markers.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.IntPtr,System.Int32)">
      <summary>Controls how the transform markers are used when performing a lossless transformation for certain formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="id">The id of the metadata marker.</param>
      <param name="data">A pointer to unmanaged memory buffer containing the data for the metadata marker.</param>
      <param name="dataLength">Number of bytes to read from <paramref name="data" />.</param>
      <remarks>
        <para>You should use this method to write a certain marker data into the file.</para>
        <para>This method can be called only from within the <see cref="T:Leadtools.Codecs.CodecsTransformMarkerCallback" /> passed to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> method.</para>
        <para>The transform mechanism is as follows:</para>
        <para>
          <list type="bullet">
            <item>
              <description>You call <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" />.</description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> will call the <see cref="T:Leadtools.Codecs.CodecsTransformMarkerCallback" /> callback passed to it
            for every marker contained in the source file. In the callback, you can replace markers, insert markers or allow Leadtools
            to do the default processing (<strong>recommended</strong>).</description>
            </item>
            <item>
              <description>You can override the default action for a marker by returning one of the following values from the
            transform callback:
            <list type="bullet"><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Default</see>:
            Let Leadtools perform the default action on the marker. This means the marker might (or might not) be transformed and will
            be written to the destination file.</description></item><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Ignore</see>: This marker will be
            ignored (this is useful for stripping unwanted markers). You should also use this if you want to do your own
            transformation and write the marker yourself by calling <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" />.</description></item><item><description><see cref="T:Leadtools.Codecs.CodecsTransformMarkerAction">CodecsTransformMarkerAction.Abort</see>: Abort the process.
            This will cause <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" /> to throw a 'user-abort' exception.</description></item></list></description>
            </item>
          </list>
        </para>
        <para>Note: You can also use <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> to insert your own markers. The marker will be inserted
            before the current marker. You can call <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> as many times as you wish. Every call to
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTransformMarker(System.Int32,System.Byte[],System.Int32,System.Int32)" /> will insert a new marker.</para>
        <para>
          <strong>Warning</strong>: Incorrect handling of the markers will generate corrupt files!  Since some markers contain
            important information about the image (image width, height, compression method, colorspace, etc), you should use caution
            when working with markers.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Transform(System.String,System.String,Leadtools.Codecs.CodecsTransformFlags,System.Int32,Leadtools.Codecs.CodecsTransformMarkerCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)">
      <summary>Initializes the buffered compression engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="width">The image being compressed width in pixels.</param>
      <param name="height">The image being compressed height in pixels.</param>
      <param name="bitsPerPixel">The image being compressed bits/pixel value.</param>
      <param name="order">The image being compressed byte order.</param>
      <param name="viewPerspective">The image being compressed view perspective value.</param>
      <param name="inputDataLength">Size in bytes of the input image data.</param>
      <param name="outputData">Array of bytes which will be filled with the compressed data.</param>
      <param name="outputDataIndex">Index into <paramref name="outputData" /> where the compressed data should be inserted.</param>
      <param name="outputDataLength">Size of <paramref name="outputData" /> in bytes.</param>
      <param name="compression">
        <para>Type of compression to use. Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Cmp</see>
              </term>
              <description>LEAD CMP compression format</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg444</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:4:4 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg422</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:2:2 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg411</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:1:1 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg444</see>
              </term>
              <description>JPEG JTIF using YUV 4:4:4 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg422</see>
              </term>
              <description>JPEG JTIF using YUV 4:2:2 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg411</see>
              </term>
              <description>JPEG JTIF using YUV 4:1:1 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead0</see>
              </term>
              <description>LEAD 1 bit, lossless compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead1</see>
              </term>
              <description>LEAD 1 bit, excellent compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcitt</see>
              </term>
              <description>TIFF CCITT</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax1Dim</see>
              </term>
              <description>CCITT Group 3 one dimensional</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax2Dim</see>
              </term>
              <description>CCITT Group 3 two dimensional</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG4Fax</see>
              </term>
              <description>CCITT Group 4 two dimensional</description>
            </item>
          </list>
        </para>
      </param>
      <param name="callback">The callback method responsible for writing or handling the compressed data.</param>
      <remarks>
        <para>This method initializes the buffered compression engine. The compression is then carried out using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" /> method. It is ended by the <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> method.</para>
        <para>If <paramref name="order" /> is set to to <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> and
            <paramref name="viewPerspective" /> is <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> then the
            data that you put into the input buffer must be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> and loaded from top
            left.</para>
        <para>The compression process starts after the first call to <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" />. The <paramref name="callback" />
            is called when the output buffer is filled with compressed data or after completing the compression process.
            <paramref name="callback" /> is responsible for emptying the output buffer - storing it, sending it, or doing other
            processing.</para>
        <para>The following is a flow chart that shows the relationship of these methods:</para>
        <para>
          <img src="CompressBuffer.gif" />
        </para>
        <para>Call <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> to end the compression process started by a call to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</para>
        <para>The quality factor of the compressed data is obtained as follows:
            <para><list type="table"><listheader><term>Format</term><description>Quality factor used</description></listheader><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Cmp</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see> and
            <see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.CmpQualityFactorPredefined">CodecsJpegSaveOptions.CmpQualityFactorPredefined</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg444</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg422</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg411</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg444</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg422</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg411</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead0</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead1</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcitt</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax1Dim</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax2Dim</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG4Fax</see></term><description>Not used</description></item></list></para></para>
        <para>This method does not support signed data images.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>
        <para>This example demonstrates low-level image compression using <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />, <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" />.
            The callback method for writing the output is included at the end of the example</para>
        <code lang="VB">      Public Sub CompressExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CompressData.cmp")

         ' Load the image to at 24-bits per pixel
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         If image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Create the output file
         _compressStream = File.Create(destFileName)

         ' Calculate the bytes per line in the input buffer, without padding 
         Dim lineBytes As Integer = image.Width * 3

         ' Allocate a buffer for the incoming uncompressed data. Note that we
         '  are compressing 16 lines at a time. You should always use multiples of 16
         Dim inBuffer As Byte() = New Byte(16 * lineBytes - 1) {}

         ' Allocate an output buffer. This is where the compressed data will
         ' go.  Note that this allocates 1024-byte packets. 
         Dim outBuffer As Byte() = New Byte(1023) {}

         ' Lock down the image
         image.Access()

         ' Initialize the compression engine
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.QualityAndSize
         codecs.StartCompress(image.Width, image.Height, image.BitsPerPixel, image.Order, image.ViewPerspective, 16 * lineBytes, outBuffer, 0, outBuffer.Length, CodecsCompression.Cmp, AddressOf MyCodecsCompressDataCallback)

         ' Compress the data
         Dim i As Integer = 0
         Do While i &lt; image.Height ' i is incremented at the end
            ' Compression of the 16-line chunk starts here
            Dim j As Integer = 0
            Dim inBufferIndex As Integer = 0
            Do While (i + j) &lt; image.Height AndAlso j &lt; 16
               ' Get one line at time
               image.GetRow(i + j, inBuffer, inBufferIndex, lineBytes)

               ' Move to next line
               inBufferIndex += lineBytes

               j += 1
            Loop

            ' This is the main function that will do the actual Compression
            codecs.Compress(inBuffer, 0)
            i += 16
         Loop

         ' Reset the compression engine 
         codecs.StopCompress()

         ' Release the image and close the file
         image.Release()
         _compressStream.Close()

         ' Clean up
         codecs.Dispose()
      End Sub

      Private _compressStream As FileStream
      Private _compressBuffer As Byte()

      Private Function MyCodecsCompressDataCallback(ByVal width As Integer, ByVal height As Integer, ByVal bitsPerPixel As Integer, ByVal order As RasterByteOrder, ByVal viewPerspective As RasterViewPerspective, ByVal buffer As RasterNativeBuffer) As Boolean
         ' Write data to the file
         If _compressBuffer Is Nothing OrElse _compressBuffer.Length &lt; buffer.Length Then
            _compressBuffer = New Byte(CType(buffer.Length, Integer) - 1) {}
         End If

         Marshal.Copy(buffer.Data, _compressBuffer, 0, CType(buffer.Length, Integer))

         _compressStream.Write(_compressBuffer, 0, CType(buffer.Length, Integer))

         Return True
      End Function

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CompressExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CompressData.cmp");

         // Load the image to at 24-bits per pixel
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         if(image.ViewPerspective != RasterViewPerspective.TopLeft)
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Create the output file
         _compressStream = File.Create(destFileName);

         // Calculate the bytes per line in the input buffer, without padding 
         int lineBytes = image.Width * 3;

         // Allocate a buffer for the incoming uncompressed data. Note that we
         //  are compressing 16 lines at a time. You should always use multiples of 16
         byte[] inBuffer = new byte[16 * lineBytes];

         // Allocate an output buffer. This is where the compressed data will
         // go.  Note that this allocates 1024-byte packets. 
         byte[] outBuffer = new byte[1024];

         // Lock down the image
         image.Access();

         // Initialize the compression engine
         codecs.Options.Jpeg.Save.CmpQualityFactorPredefined = CodecsCmpQualityFactorPredefined.QualityAndSize;
         codecs.StartCompress(
            image.Width,
            image.Height,
            image.BitsPerPixel,
            image.Order,
            image.ViewPerspective,
            16 * lineBytes,
            outBuffer,
            0,
            outBuffer.Length,
            CodecsCompression.Cmp,
            MyCodecsCompressDataCallback);

         // Compress the data
         int i = 0;
         while(i &lt; image.Height) // i is incremented at the end
         {
            // Compression of the 16-line chunk starts here
            int j = 0;
            int inBufferIndex = 0;
            while((i + j) &lt; image.Height &amp;&amp; j &lt; 16)
            {
               // Get one line at time
               image.GetRow(i + j, inBuffer, inBufferIndex, lineBytes);

               // Move to next line
               inBufferIndex += lineBytes;

               j++;
            }

            // This is the main function that will do the actual Compression
            codecs.Compress(inBuffer, 0);
            i += 16;
         }

         // Reset the compression engine 
         codecs.StopCompress();

         // Release the image and close the file
         image.Release();
         _compressStream.Close();

         // Clean up
         codecs.Dispose();
      }

      FileStream _compressStream;
      byte[] _compressBuffer;

      bool MyCodecsCompressDataCallback(int width, int height, int bitsPerPixel, RasterByteOrder order, RasterViewPerspective viewPerspective, RasterNativeBuffer buffer)
      {
         // Write data to the file
         if(_compressBuffer == null || _compressBuffer.Length &lt; buffer.Length)
            _compressBuffer = new byte[(int)buffer.Length];

         Marshal.Copy(buffer.Data, _compressBuffer, 0, (int)buffer.Length);

         _compressStream.Write(_compressBuffer, 0, (int)buffer.Length);

         return true;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.IntPtr,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)">
      <summary>Initializes the unmanaged memory buffered compression engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="width">The image being compressed width in pixels.</param>
      <param name="height">The image being compressed height in pixels.</param>
      <param name="bitsPerPixel">The image being compressed bits/pixel value.</param>
      <param name="order">The image being compressed byte order.</param>
      <param name="viewPerspective">The image being compressed view perspective value.</param>
      <param name="inputDataLength">Size in bytes of the input image data.</param>
      <param name="outputData">Pointer to unmanaged memory buffer will be filled with the compressed data.</param>
      <param name="outputDataLength">Size of <paramref name="outputData" /> in bytes.</param>
      <param name="compression">
        <para>Type of compression to use. Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Cmp</see>
              </term>
              <description>LEAD CMP compression format</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg444</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:4:4 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg422</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:2:2 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg411</see>
              </term>
              <description>JPEG File Interchange Format using YUV 4:1:1 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg444</see>
              </term>
              <description>JPEG JTIF using YUV 4:4:4 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg422</see>
              </term>
              <description>JPEG JTIF using YUV 4:2:2 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg411</see>
              </term>
              <description>JPEG JTIF using YUV 4:1:1 color spacing</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead0</see>
              </term>
              <description>LEAD 1 bit, lossless compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead1</see>
              </term>
              <description>LEAD 1 bit, excellent compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcitt</see>
              </term>
              <description>TIFF CCITT</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax1Dim</see>
              </term>
              <description>CCITT Group 3 one dimensional</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax2Dim</see>
              </term>
              <description>CCITT Group 3 two dimensional</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG4Fax</see>
              </term>
              <description>CCITT Group 4 two dimensional</description>
            </item>
          </list>
        </para>
      </param>
      <param name="callback">The callback method responsible for writing or handling the compressed data.</param>
      <remarks>
        <para>This method initializes the buffered compression engine. The compression is then carried out using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" /> method. It is ended by the <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> method.</para>
        <para>If <paramref name="order" /> is set to to <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> and
            <paramref name="viewPerspective" /> is <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> then the
            data that you put into the input buffer must be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> and loaded from top
            left.</para>
        <para>The compression process starts after the first call to <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" />. The <paramref name="callback" />
            is called when the output buffer is filled with compressed data or after completing the compression process.
            <paramref name="callback" /> is responsible for emptying the output buffer - storing it, sending it, or doing other
            processing.</para>
        <para>The following is a flow chart that shows the relationship of these methods:</para>
        <para>
          <img src="CompressBuffer.gif" />
        </para>
        <para>Call <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> to end the compression process started by a call to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</para>
        <para>The quality factor of the compressed data is obtained as follows:
            <para><list type="table"><listheader><term>Format</term><description>Quality factor used</description></listheader><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Cmp</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see> and
            <see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.CmpQualityFactorPredefined">CodecsJpegSaveOptions.CmpQualityFactorPredefined</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg444</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg422</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Jpeg411</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg444</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg422</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TifJpeg411</see></term><description><see cref="P:Leadtools.Codecs.CodecsJpegSaveOptions.QualityFactor">CodecsJpegSaveOptions.QualityFactor</see></description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead0</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.Lead1</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcitt</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax1Dim</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG3Fax2Dim</see></term><description>Not used</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsCompression">CodecsCompression.TiffCcittG4Fax</see></term><description>Not used</description></item></list></para></para>
        <para>This method does not support signed data images.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)">
      <summary>Does buffer-to-buffer JPEG or LEAD CMP compression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">Array of bytes that holds the data to be compressed.</param>
      <param name="dataIndex">Index into <paramref name="data" /> where the data starts.</param>
      <remarks>
            You must call <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" /> before using this method, and you must call <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> to end
            the compression process. For a description of how these methods work together, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.
            </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Compress(System.IntPtr)">
      <summary>Does buffer-to-buffer JPEG or LEAD CMP compression using an unmanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">Pointer to unmanaged memory that holds the data to be compressed.</param>
      <remarks>
            You must call <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" /> before using this method, and you must call <see cref="M:Leadtools.Codecs.RasterCodecs.StopCompress" /> to end
            the compression process. For a description of how these methods work together, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.
            </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopCompress">
      <summary>Cleans up all data variables and buffers allocated by the JPEG or LEAD CMP compression engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            Calling this method will reset all internal variables to their default settings. Call this method after the compression of
            the entire image using <see cref="M:Leadtools.Codecs.RasterCodecs.Compress(System.Byte[],System.Int32)" />. For a detailed description of when to use this method, refer to
            <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.
            </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">
      <summary>Initializes the buffered decompression engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="options">Provides input parameters for the decompression process.</param>
      <returns>An object that identifies the decompression process.  This same object must be passed to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.StopDecompress(System.Object)" /> methods.</returns>
      <remarks>
        <para>Initializes the buffered decompression engine. The decompression is then carried out using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)" /> method. It is ended by the <see cref="M:Leadtools.Codecs.RasterCodecs.StopDecompress(System.Object)" /> method.</para>
        <para>Currently, raw JPEG must contain all the Huffman tables encoded. That is, it must be a readable JPEG file.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>
        <para />
        <code lang="VB">      ' This sample loads raw data from a PackBits TIF file
      ' PackBits.tif is a 24-bit tif packbits compressed file
      ' PackBits.tif has 46 strips of packbits data
      ' The strip information is obtained by reading the TIF tags TAG_STRIPOFFSETS and TAG_STRIPBYTECOUNTS
      ' The strips are directly read and fed to the Compress method
      Private Sub LoadRawPackbitsStrips(ByVal packTifFile As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Decompress.bmp")

         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(packTifFile, False)

         ' StartDecompress
         Dim options As CodecsStartDecompressOptions = CodecsStartDecompressOptions.Empty
         options.DataType = CodecsStartDecompressDataType.Strips
         options.Format = RasterImageFormat.RawPackBits
         options.Width = imageInfo.Width
         options.Height = imageInfo.Height
         options.BitsPerPixel = imageInfo.BitsPerPixel
         options.ViewPerspective = imageInfo.ViewPerspective
         options.RawOrder = imageInfo.Order
         options.LoadOrder = CodecsLoadByteOrder.BgrOrGray
         options.XResolution = imageInfo.XResolution
         options.YResolution = imageInfo.YResolution
         options.TiffPhotometricInterpretation = CodecsTiffPhotometricInterpretation.Rgb

         Dim decompressObject As Object = codecs.StartDecompress(options)

         ' Decompress

         Const TAG_STRIPOFFSETS As Integer = &amp;H111
         Const TAG_STRIPBYTECOUNTS As Integer = &amp;H117
         Const TAG_ROWSPERSTRIP As Integer = &amp;H116
         Const MAX_STRIPS As Integer = 1000

         Dim stripOffsets As Integer() = New Integer(MAX_STRIPS - 1) {}
         Dim stripSizes As Integer() = New Integer(MAX_STRIPS - 1) {}
         Dim rowsPerStripBuffer As Integer() = New Integer(0) {}

         Dim maxIndex As Integer = ReadTag(codecs, packTifFile, TAG_STRIPOFFSETS, stripOffsets)
         ReadTag(codecs, packTifFile, TAG_STRIPBYTECOUNTS, stripSizes)
         ReadTag(codecs, packTifFile, TAG_ROWSPERSTRIP, rowsPerStripBuffer)
         Dim rowsPerStrip As Integer = rowsPerStripBuffer(0)

         Dim fs As FileStream = File.OpenRead(packTifFile)

         Const row As Integer = 0 ' Note: this parameter is ignored for strips
         Const column As Integer = 0 ' Column offset of tile
         Dim index As Integer = 0
         Do While index &lt; maxIndex
            ' seek to the first strip
            fs.Seek(stripOffsets(index), SeekOrigin.Begin)

            Dim buffer As Byte() = New Byte(stripSizes(index) - 1) {}
            fs.Read(buffer, 0, buffer.Length)

            ' Calculate the height of uncompressed strip/tile
            Dim height As Integer = rowsPerStrip
            If index = (maxIndex - 1) Then
               ' fewer rows per strip
               height = imageInfo.Height - (maxIndex - 1) * rowsPerStrip
            End If

            codecs.Decompress(decompressObject, buffer, 0, buffer.Length, imageInfo.Width, height, row, column, CodecsDecompressDataFlags.Complete)
            index += 1
         Loop

         fs.Close()

         ' StopDecompress
         Dim image As RasterImage = codecs.StopDecompress(decompressObject)

         ' 'image' contains the uncompressed image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

      ' Returns maximum index
      Private Function ReadTag(ByVal codecs As RasterCodecs, ByVal fileName As String, ByVal tagId As Integer, ByVal stripArray As Integer()) As Integer
         Dim tag As RasterTagMetadata = codecs.ReadTag(fileName, 1, tagId)
         Dim data As Integer() = tag.ToInt32()
         data.CopyTo(stripArray, 0)
         Return tag.Count
      End Function

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // This sample loads raw data from a PackBits TIF file
      // PackBits.tif is a 24-bit tif packbits compressed file
      // PackBits.tif has 46 strips of packbits data
      // The strip information is obtained by reading the TIF tags TAG_STRIPOFFSETS and TAG_STRIPBYTECOUNTS
      // The strips are directly read and fed to the Compress method
      void LoadRawPackbitsStrips(string packTifFile)
      {
         RasterCodecs codecs = new RasterCodecs();
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Decompress.bmp");

         CodecsImageInfo imageInfo = codecs.GetInformation(packTifFile, false);

         // StartDecompress
         CodecsStartDecompressOptions options = CodecsStartDecompressOptions.Empty;
         options.DataType = CodecsStartDecompressDataType.Strips;
         options.Format = RasterImageFormat.RawPackBits;
         options.Width = imageInfo.Width;
         options.Height = imageInfo.Height;
         options.BitsPerPixel = imageInfo.BitsPerPixel;
         options.ViewPerspective = imageInfo.ViewPerspective;
         options.RawOrder = imageInfo.Order;
         options.LoadOrder = CodecsLoadByteOrder.BgrOrGray;
         options.XResolution = imageInfo.XResolution;
         options.YResolution = imageInfo.YResolution;
         options.TiffPhotometricInterpretation = CodecsTiffPhotometricInterpretation.Rgb;

         object decompressObject = codecs.StartDecompress(options);

         // Decompress

         const int TAG_STRIPOFFSETS = 0x111;
         const int TAG_STRIPBYTECOUNTS = 0x117;
         const int TAG_ROWSPERSTRIP = 0x116;
         const int MAX_STRIPS = 1000;

         int[] stripOffsets = new int[MAX_STRIPS];
         int[] stripSizes = new int[MAX_STRIPS];
         int[] rowsPerStripBuffer = new int[1];

         int maxIndex = ReadTag(codecs, packTifFile, TAG_STRIPOFFSETS, stripOffsets);
         ReadTag(codecs, packTifFile, TAG_STRIPBYTECOUNTS, stripSizes);
         ReadTag(codecs, packTifFile, TAG_ROWSPERSTRIP, rowsPerStripBuffer);
         int rowsPerStrip = rowsPerStripBuffer[0];

         FileStream fs = File.OpenRead(packTifFile);

         const int row = 0; // Note: this parameter is ignored for strips
         const int column = 0; // Column offset of tile
         for(int index = 0; index &lt; maxIndex; index++)
         {
            // seek to the first strip
            fs.Seek(stripOffsets[index], SeekOrigin.Begin);

            byte[] buffer = new byte[stripSizes[index]];
            fs.Read(buffer, 0, buffer.Length);

            // Calculate the height of uncompressed strip/tile
            int height = rowsPerStrip;
            if(index == (maxIndex - 1))
            {
               // fewer rows per strip
               height = imageInfo.Height - (maxIndex - 1) * rowsPerStrip;
            }

            codecs.Decompress(
               decompressObject,
               buffer,
               0,
               buffer.Length,
               imageInfo.Width,
               height,
               row,
               column,
               CodecsDecompressDataFlags.Complete);
         }

         fs.Close();

         // StopDecompress
         RasterImage image = codecs.StopDecompress(decompressObject);

         // 'image' contains the uncompressed image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

      // Returns maximum index
      int ReadTag(RasterCodecs codecs, string fileName, int tagId, int[] stripArray)
      {
         RasterTagMetadata tag = codecs.ReadTag(fileName, 1, tagId);
         int[] data = tag.ToInt32();
         data.CopyTo(stripArray, 0);
         return tag.Count;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)">
      <summary>Called for each buffer, strip or tile of decompressed data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="decompressContext">The decompressing context object obtained through <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</param>
      <param name="data">An array of bytes that contains the raw compressed data.</param>
      <param name="dataOffset">Offset of the strip referenced by <paramref name="data" />, This is usually zero.</param>
      <param name="dataLength">Number of bytes in <paramref name="data" />.</param>
      <param name="width">Width of the uncompressed strip or tile, in bytes</param>
      <param name="height">Height of the uncompressed strip or tile, in bytes. If the image consists of a single compressed
            strip, as with TWAIN, this is the height of the image.</param>
      <param name="row">Row offset of the tile or strip.</param>
      <param name="column">Column offset of the tile or strip.</param>
      <param name="flags">
        <para>Flags that indicate whether which part of a strip or tile is being processed. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see>
              </term>
              <description>Processing the beginning of a tile or strip</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see>
              </term>
              <description>Processing the end of a tile or strip</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Complete</see>
              </term>
              <description>Process a complete tile or strip. This is the same as
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see> |
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see></description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>Note that you must call the <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" /> method before using this method, and you must call the
            <see cref="M:Leadtools.Codecs.RasterCodecs.StopDecompress(System.Object)" /> method to end the decompression process.</para>
        <para>If <paramref name="data" /> does not point to a full tile or strip, set <paramref name="flags" /> to
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see> when the tile/strip begins and set it to
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see> when the tile/strip ends.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)">
      <summary>Called for each unmanaged memory buffer, strip or tile of decompressed data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="decompressContext">The decompressing context object obtained through <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</param>
      <param name="data">A pointer to an unmanaged memory buffer that contains the raw compressed data.</param>
      <param name="dataOffset">Offset of the strip referenced by <paramref name="data" />, This is usually zero.</param>
      <param name="dataLength">Number of bytes in <paramref name="data" />.</param>
      <param name="width">Width of the uncompressed strip or tile, in bytes</param>
      <param name="height">Height of the uncompressed strip or tile, in bytes. If the image consists of a single compressed
            strip, as with TWAIN, this is the height of the image.</param>
      <param name="row">Row offset of the tile or strip.</param>
      <param name="column">Column offset of the tile or strip.</param>
      <param name="flags">
        <para>Flags that indicate whether which part of a strip or tile is being processed. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see>
              </term>
              <description>Processing the beginning of a tile or strip</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see>
              </term>
              <description>Processing the end of a tile or strip</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Complete</see>
              </term>
              <description>Process a complete tile or strip. This is the same as
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see> |
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see></description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>Note that you must call the <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" /> method before using this method, and you must call the
            <see cref="M:Leadtools.Codecs.RasterCodecs.StopDecompress(System.Object)" /> method to end the decompression process.</para>
        <para>If <paramref name="data" /> does not point to a full tile or strip, set <paramref name="flags" /> to
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.Start</see> when the tile/strip begins and set it to
            <see cref="T:Leadtools.Codecs.CodecsDecompressDataFlags">CodecsDecompressDataFlags.End</see> when the tile/strip ends.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.StopDecompress(System.Object)">
      <summary>Ends the decompression process and cleans up all the variables and buffers allocated. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="decompressContext">The decompressing context object obtained through <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object created from decompressing the input image data.</returns>
      <remarks>
        <para>This method will end the decompression process and cleans up all the variables and buffers allocated by the
            <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)" />.</para>
        <para>Call this method after the decompression of the entire image using <see cref="M:Leadtools.Codecs.RasterCodecs.Decompress(System.Object,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.Codecs.CodecsDecompressDataFlags)" />.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetPcdResolution(System.String)">
      <summary>Examines a PhotoCD file to determine which resolutions it contains. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the PhotoCD file.</param>
      <returns>An array of 6 boolean values that specifies if the resolution at the corresponding index exists.</returns>
      <remarks>
        <para>For the returned array of booleans, <strong>true</strong> means the corresponding resolution at this index exist in
            the file, while <strong>false</strong> means the corresponding resolution at the index does not exist in the file.</para>
        <para>The following table defines the resolution value at each index:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Index</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0 (PCD Base Over 64)</term>
              <description>Resolution 64 x 96</description>
            </item>
            <item>
              <term>1 (PCD Base Over 16)</term>
              <description>Resolution 128 x 192</description>
            </item>
            <item>
              <term>2 (PCD Base Over 4)</term>
              <description>Resolution 256 x 384</description>
            </item>
            <item>
              <term>3 (PCD Base)</term>
              <description>Resolution 512 x 768</description>
            </item>
            <item>
              <term>4 (PCD 4 Base)</term>
              <description>Resolution 1024 x 1536</description>
            </item>
            <item>
              <term>5 (PCD 16 Base)</term>
              <description>Resolution 2048 x 3072</description>
            </item>
          </list>
        </para>
      </remarks>
      <example>
        <para>This example checks for a high resolution PCD image and loads it if possible.</para>
        <code lang="VB">      Private Sub GetPcdResolutionExample(ByVal pcdFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get the PCD resolution information.
         Const pcd4Base As Integer = 4

         Dim resolutions As Integer() = codecs.GetPcdResolution(pcdFileName)

         ' Use high resolution if possible
         If resolutions(pcd4Base) &lt;&gt; 0 Then
            codecs.Options.Pcd.Load.Resolution = New LeadSize(1024, 1536)
            Console.WriteLine("Loading Loading 1024 x 1536")
         Else
            codecs.Options.Pcd.Load.Resolution = New LeadSize(512, 768)
            Console.WriteLine("Loading 512 x 768")
         End If

         ' Load the image at its own bits per pixel
         Dim image As RasterImage = codecs.Load(pcdFileName, 0, CodecsLoadByteOrder.Bgr, 1, 1)
         Console.WriteLine("Image size loaded: {0} by {1}", image.Width, image.Height)
         image.Dispose()

         ' Reset the default PCD resolution
         codecs.Options.Pcd.Load.Resolution = New LeadSize(512, 768)

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void GetPcdResolutionExample(string pcdFileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get the PCD resolution information.
         const int pcd4Base = 4;

         int[] resolutions = codecs.GetPcdResolution(pcdFileName);

         // Use high resolution if possible
         if(resolutions[pcd4Base] != 0)
         {
            codecs.Options.Pcd.Load.Resolution = new LeadSize(1024, 1536);
            Console.WriteLine("Loading Loading 1024 x 1536");
         }
         else
         {
            codecs.Options.Pcd.Load.Resolution = new LeadSize(512, 768);
            Console.WriteLine("Loading 512 x 768");
         }

         // Load the image at its own bits per pixel
         RasterImage image = codecs.Load(pcdFileName, 0, CodecsLoadByteOrder.Bgr, 1, 1);
         Console.WriteLine("Image size loaded: {0} by {1}", image.Width, image.Height);
         image.Dispose();

         // Reset the default PCD resolution
         codecs.Options.Pcd.Load.Resolution = new LeadSize(512, 768);

         // Clean up
         codecs.Dispose();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">
      <summary>Loads the specified layer from the specified PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">The desired color order.</param>
      <param name="layer">Index of the layer to load. This index is zero-based. Pass 0 to load the first layer,
            1 to load the second layer, etc.</param>
      <param name="layerInfo">a <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /> object to be updated with information about the
            loaded layer. Pass a null reference (Nothing in Visual Basic) for this parameter if layer information is not needed.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>Use this method to load PSD files only.</para>
        <para>This method works similarly to a normal <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods, except that it loads only a layer from a
            PSD file. It loads the layer specified in <paramref name="layer" />.</para>
        <para>Before calling this method, you may need to get or set file information, such as the number of layers on
            the file. Refer to <see cref="T:Leadtools.Codecs.CodecsPsdImageInfo" />.</para>
        <para>The number of layers in a file is indicated in <see cref="P:Leadtools.Codecs.CodecsPsdImageInfo.Layers">CodecsPsdImageInfo.Layers</see>.
            If this number is 0, the file does not contains any layers and this method should not be called.</para>
      </remarks>
      <example>
        <para>This example will create and save a PSD with layers before re-loading the first layer back</para>
        <code lang="VB">      Public Sub PsdLayersExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim layerFileNames As String() = _
         { _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample2.cmp"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample3.cmp") _
         }

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.psd")

         ' Load the layer images (as pages in 1 image)
         Dim layersImage As RasterImage = Nothing
         For Each layerFileName As String In layerFileNames
            Dim layerImage As RasterImage = codecs.Load(layerFileName)
            If layersImage Is Nothing Then
               layersImage = layerImage
            Else
               layersImage.AddPage(layerImage)
            End If
         Next layerFileName

         ' Load the image that is made up of all the layers
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)

         ' Save this image and all the layers
         codecs.SavePsdWithLayers(image, destFileName, 0, layersImage, Nothing)
         image.Dispose()
         layersImage.Dispose()

         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(destFileName, False)
         If imageInfo.Psd.Layers &gt; 0 Then
            Dim layer As Integer = 0
            Dim layerInfo As CodecsPsdLayerInfo = New CodecsPsdLayerInfo()
            Dim layerImage As RasterImage = codecs.LoadPsdLayer(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, layer, layerInfo)

            Dim blendModeKey As String = Encoding.ASCII.GetString(layerInfo.GetBlendModeKey())

            Console.WriteLine("Loaded layer at index {0}, size is {1} by {2}, Blend mode key:{3}", layer, layerImage.Width, layerImage.Height, blendModeKey)
            Console.WriteLine("TransparencyProtected is {1}, Visible is {2}, Obsolete is {3} and Psd5OrLater is {4}", _
               layerInfo.TransparencyProtected, layerInfo.Visible, layerInfo.Obsolete, layerInfo.Psd5OrLater)
            layerImage.Dispose()
         Else
            Console.WriteLine("No layers found in this PSD file")
         End If

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PsdLayersExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string[] layerFileNames =
         {
            Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"),
            Path.Combine(LEAD_VARS.ImagesDir, "Sample2.cmp"),
            Path.Combine(LEAD_VARS.ImagesDir, "Sample3.cmp"),
         };

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.psd");

         // Load the layer images (as pages in 1 image)
         RasterImage layersImage = null;
         foreach(string layerFileName in layerFileNames)
         {
            RasterImage layerImage = codecs.Load(layerFileName);
            if(layersImage == null)
               layersImage = layerImage;
            else
               layersImage.AddPage(layerImage);
         }

         // Load the image that is made up of all the layers
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Save this image and all the layers
         codecs.SavePsdWithLayers(image, destFileName, 0, layersImage, null);
         image.Dispose();
         layersImage.Dispose();

         CodecsImageInfo imageInfo = codecs.GetInformation(destFileName, false);
         if(imageInfo.Psd.Layers &gt; 0)
         {
            int layer = 0;
            CodecsPsdLayerInfo layerInfo = new CodecsPsdLayerInfo();
            RasterImage layerImage = codecs.LoadPsdLayer(destFileName, 0, CodecsLoadByteOrder.BgrOrGray, layer, layerInfo);

            string blendModeKey = Encoding.ASCII.GetString(layerInfo.GetBlendModeKey());

            Console.WriteLine("Loaded layer at index {0}, size is {1} by {2}, Blend mode key:{3}", layer, layerImage.Width, layerImage.Height, blendModeKey);
            Console.WriteLine("TransparencyProtected is {0}, Visible is {1}, Obsolete is {2} and Psd5OrLater is {3}",
               layerInfo.TransparencyProtected, layerInfo.Visible, layerInfo.Obsolete, layerInfo.Psd5OrLater);
            layerImage.Dispose();
         }
         else
            Console.WriteLine("No layers found in this PSD file");

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadPsdChannel(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdChannelInfo)">
      <summary>Loads the specified channel from the specified PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">The desired color order.</param>
      <param name="channelIndex">Index of the channel to load. This index is zero-based. Pass 0 to load the first channel,
            1 to load the second channel, etc.</param>
      <param name="channelInfo">a <see cref="T:Leadtools.Codecs.CodecsPsdChannelInfo" /> object to be updated with information about the
            loaded channel. Pass a null reference (Nothing in Visual Basic) for this parameter if channel information is not needed.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads.</returns>
      <remarks>
        <para>Use this method to load PSD files only.</para>
        <para>This method works similarly to a normal <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods, except that it loads only a channel from a
            PSD file. It loads the channel specified in <paramref name="channel" />.</para>
        <para>Before calling this method, you may need to get or set file information, such as the number of channels on
            the file. Refer to <see cref="T:Leadtools.Codecs.CodecsPsdImageInfo" />.</para>
        <para>The number of channels in a file is indicated in <see cref="P:Leadtools.Codecs.CodecsPsdImageInfo.Channels">CodecsPsdImageInfo.Channels</see>.
            If this number is 0, the file does not contains any channels and this method should not be called.</para>
      </remarks>
      <example>
        <para>This example loads all channels from a PSD file</para>
        <code lang="VB">      Public Sub LoadPsdChannels()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Sunflower.psd")

         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(srcFileName, False)
         For iCount As Integer = 0 To imageInfo.Psd.Channels - 1
            Dim ChannelInfo As New CodecsPsdChannelInfo()
            Dim ChannelImage As RasterImage = codecs.LoadPsdChannel(srcFileName, 0, CodecsLoadByteOrder.Rgb, iCount, ChannelInfo)

            Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Channel_")
            destFileName = destFileName &amp; iCount &amp; ".Bmp"

            codecs.Save(ChannelImage, destFileName, RasterImageFormat.Bmp, ChannelImage.BitsPerPixel)

            ChannelImage.Dispose()
         Next
         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadPsdChannels()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Sunflower.psd");

         CodecsImageInfo imageInfo = codecs.GetInformation(srcFileName, false);
         for (int iCount = 0; iCount &lt; imageInfo.Psd.Channels; iCount++)
         {
            CodecsPsdChannelInfo ChannelInfo = new CodecsPsdChannelInfo();
            RasterImage ChannelImage = codecs.LoadPsdChannel(srcFileName, 0, CodecsLoadByteOrder.Rgb, iCount, ChannelInfo);

            string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Channel_");
            destFileName = destFileName + iCount + ".Bmp";

            codecs.Save(ChannelImage, destFileName, RasterImageFormat.Bmp, ChannelImage.BitsPerPixel);

            ChannelImage.Dispose();
         }
         // Clean up 
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">
      <summary>Saves an image to a PSD file, along with the specified layers. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="image">The image to save.</param>
      <param name="fileName">The output file name.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. For color images this can be 24 or 32. For grayscale images this
            can be 8.</param>
      <param name="layerImages">An <see cref="T:Leadtools.RasterImage" /> object that contains layers (in each page) to save in the output
            file. The layers should have the same bits per pixel as the file. Every page in the image will be saved as a
            layer. The first page in the image will be interpreted as the first layer. The pages in the image must have the
            same bits per pixel as specified in <paramref name="bitsPerPixel" />.</param>
      <param name="layerInfos">An optional array of <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /> objects. If this is a null reference
            (Nothing in Visual Basic), then each layer will start at (0, 0) and will have the same size as the image. If this is not
            a null reference (Nothing in Visual Basic), then the layer information for each layer in <paramref name="layersInfo" />
            will be stored here.The number of <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /> objects must be the same as the number of pages in
            <paramref name="layerImages" />.
            </param>
      <remarks>
            Use this method to save PSD files with layers.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.String,System.String,System.Int32)">
      <summary>Compacts TIFF files with default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcFileName">A <see cref="T:System.String" /> containing the name of the file being compacted. All the pages will be
            read from this file.</param>
      <param name="destFileName">A <see cref="T:System.String" /> containing the name of the file in which all the pages will be written.</param>
      <param name="pages">Value that represents the number of pages to copy. Use 0 to copy all the pages. If
            <paramref name="pages" /> is &gt; 0, only <paramref name="pages" /> will be copied to <paramref name="destFileName" />.</param>
      <remarks>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit. 
            </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CompactFileExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CompactFile1_Src.tif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CompactFile1_Dest.tif")

         ' Create a RasterImage with 4 pages containing text showing the page number
         Dim image As RasterImage = Nothing
         Const pageCount As Integer = 4

         Using f As New System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold)
            Using btmp As New System.Drawing.Bitmap(320, 200)
               Using sf As New System.Drawing.StringFormat()
                  Dim rc As New System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height)
                  sf.Alignment = System.Drawing.StringAlignment.Center
                  sf.LineAlignment = System.Drawing.StringAlignment.Center

                  For i As Integer = 1 To pageCount
                     ' Create a GDI+ bitmap with the text
                     Dim text As String = "Page " + i.ToString()

                     Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(btmp)
                        g.FillRectangle(System.Drawing.Brushes.White, rc)
                        g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf)
                     End Using

                     Dim tempImage As RasterImage = RasterImageConverter.ConvertFromImage(btmp, ConvertFromImageOptions.None)

                     If image Is Nothing Then
                        image = tempImage
                     Else
                        image.AddPage(tempImage)
                     End If
                  Next
               End Using
            End Using
         End Using

         ' Save all the pages to the file
         ' The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, srcFileName, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         ' All the pages in the source TIFF file. This will create the destination file
         codecs.CompactFile(srcFileName, destFileName, 0)

         ' Compact the source file again and append all the pages to the existing destination file
         Dim pagesToAdd As Integer = 0 ' 0 means all pages
         Dim srcStartPage As Integer = 1
         Dim destStartPage As Integer = 5 ' insert at the end

         codecs.CompactFile(srcFileName, destFileName, pagesToAdd, srcStartPage, False, 0, destStartPage, False, 0, CodecsSavePageMode.Insert, False, False)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CompactFileExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName =Path.Combine(LEAD_VARS.ImagesDir, "CompactFile1_Src.tif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CompactFile1_Dest.tif");

         // Create a RasterImage with 4 pages containing text showing the page number
         RasterImage image = null;
         const int pageCount = 4;

         using(System.Drawing.Font f = new System.Drawing.Font("Arial", 36, System.Drawing.FontStyle.Bold))
         using(System.Drawing.Bitmap btmp = new System.Drawing.Bitmap(320, 200))
         using(System.Drawing.StringFormat sf = new System.Drawing.StringFormat())
         {
            System.Drawing.Rectangle rc = new System.Drawing.Rectangle(0, 0, btmp.Width, btmp.Height);
            sf.Alignment = System.Drawing.StringAlignment.Center;
            sf.LineAlignment = System.Drawing.StringAlignment.Center;

            for(int i = 1; i &lt;= pageCount; i++)
            {
               // Create a GDI+ bitmap with the text
               string text = "Page " + i;

               using(System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(btmp))
               {
                  g.FillRectangle(System.Drawing.Brushes.White, rc);
                  g.DrawString(text, f, System.Drawing.Brushes.Black, rc, sf);
               }

               RasterImage tempImage = Leadtools.Drawing.RasterImageConverter.ConvertFromImage(btmp, Leadtools.Drawing.ConvertFromImageOptions.None);

               if(image == null)
                  image = tempImage;
               else
                  image.AddPage(tempImage);
            }
         }

         // Save all the pages to the file
         // The file should have 4 pages now: 1, 2, 3, 4
         codecs.Save(image, srcFileName, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         // All the pages in the source TIFF file. This will create the destination file
         codecs.CompactFile(srcFileName, destFileName, 0);

         // Compact the source file again and append all the pages to the existing destination file
         int pagesToAdd = 0;  // 0 means all pages
         int srcStartPage = 1;
         int destStartPage = 5;  // insert at the end

         codecs.CompactFile(
            srcFileName,
            destFileName,
            pagesToAdd,
            srcStartPage,
            false,
            0,
            destStartPage,
            false,
            0,
            CodecsSavePageMode.Insert,
            false,
            false);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CompactFileExample(Stream dstStream, int width, int height, int pageCount)
      {
         // Create a RasterImage with number of pages containing text showing the page number
         RasterImage image = null;
         // The white background canvas
         Canvas canvas = new Canvas();
         canvas.Width = width;
         canvas.Height = height;
         canvas.Background = new SolidColorBrush(Color.FromArgb(255, 255, 255, 255));

         // The black text block
         TextBlock textBlock = new TextBlock();
         textBlock.FontFamily = new FontFamily("Arial");
         textBlock.FontSize = 36;
         textBlock.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));
         canvas.Children.Add(textBlock);

         for (int i = 1; i &lt;= pageCount; i++)
         {
            // The text we want on the page
            string text = "Page " + i;
            textBlock.Text = text;

            // Center the text
            double left = (canvas.Width - textBlock.ActualWidth) / 2;
            double top = (canvas.Height - textBlock.ActualHeight) / 2;
            textBlock.SetValue(Canvas.LeftProperty, left);
            textBlock.SetValue(Canvas.TopProperty, top);

            // Create a Writeable bitmap with the text
            WriteableBitmap wb = new WriteableBitmap(320, 200);

            wb.Render(canvas, null);
            wb.Invalidate();

            // Convert it to a RasterImage
            RasterImage pageImage = RasterImageConverter.ConvertFromSource(wb, ConvertFromSourceOptions.None);

            // Add it as a page to our main raster image
            if (image == null)
               image = pageImage;
            else
               image.AddPage(pageImage);
         }

         RasterCodecs codecs = new RasterCodecs();
         // Save all the pages to the file 
         // The file should have 4 pages now: 1, 2, 3, 4 
         codecs.Save(image, dstStream, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite);
         image.Dispose();

         MemoryStream memoryStream = new MemoryStream((int)dstStream.Length);
         // All the pages in the source TIFF file. This will create the destination file 
         codecs.CompactFile(dstStream, memoryStream, 0);

         // Compact the source file again and append all the pages to the existing destination file 
         int pagesToAdd = 0;  // 0 means all pages 
         int srcStartPage = 1;
         int destStartPage = 5;  // insert at the end 

         codecs.CompactFile(
            dstStream,
            memoryStream,
            pagesToAdd,
            srcStartPage,
            false,
            0,
            destStartPage,
            false,
            0,
            CodecsSavePageMode.Insert,
            false,
            false); 
      }</code>
        <code lang="SilverlightVB">      Public Sub CompactFileExample(ByVal dstStream As Stream, ByVal width As Integer, ByVal height As Integer, ByVal pageCount As Integer)
         ' Create a RasterImage with number of pages containing text showing the page number
         Dim image As RasterImage = Nothing
         ' The white background canvas
         Dim canvas As Canvas = New Canvas()
         canvas.Width = width
         canvas.Height = height
         canvas.Background = New SolidColorBrush(Color.FromArgb(255, 255, 255, 255))

         ' The black text block
         Dim textBlock As TextBlock = New TextBlock()
         textBlock.FontFamily = New FontFamily("Arial")
         textBlock.FontSize = 36
         textBlock.Foreground = New SolidColorBrush(Color.FromArgb(255, 0, 0, 0))
         canvas.Children.Add(textBlock)

         Dim i As Integer = 1
         Do While i &lt;= pageCount
            ' The text we want on the page
            Dim text As String = "Page " &amp; i
            textBlock.Text = text

            ' Center the text
            Dim left As Double = (canvas.Width - textBlock.ActualWidth) / 2
            Dim top As Double = (canvas.Height - textBlock.ActualHeight) / 2
            textBlock.SetValue(Canvas.LeftProperty, left)
            textBlock.SetValue(Canvas.TopProperty, top)

            ' Create a Writeable bitmap with the text
            Dim wb As WriteableBitmap = New WriteableBitmap(320, 200)

            wb.Render(canvas, Nothing)
            wb.Invalidate()

            ' Convert it to a RasterImage
            Dim pageImage As RasterImage = RasterImageConverter.ConvertFromSource(wb, ConvertFromSourceOptions.None)

            ' Add it as a page to our main raster image
            If image Is Nothing Then
               image = pageImage
            Else
               image.AddPage(pageImage)
            End If
            i += 1
         Loop

         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Save all the pages to the file 
         ' The file should have 4 pages now: 1, 2, 3, 4 
         codecs.Save(image, dstStream, RasterImageFormat.Tif, 1, 1, pageCount, 1, CodecsSavePageMode.Overwrite)
         image.Dispose()

         Dim memoryStream As MemoryStream = New MemoryStream(CInt(dstStream.Length))
         ' All the pages in the source TIFF file. This will create the destination file 
         codecs.CompactFile(dstStream, memoryStream, 0)

         ' Compact the source file again and append all the pages to the existing destination file 
         Dim pagesToAdd As Integer = 0 ' 0 means all pages
         Dim srcStartPage As Integer = 1
         Dim destStartPage As Integer = 5 ' insert at the end

         codecs.CompactFile(dstStream, memoryStream, pagesToAdd, srcStartPage, False, 0, destStartPage, False, 0, CodecsSavePageMode.Insert, False, False)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.IO.Stream,System.IO.Stream,System.Int32)">
      <summary>Compacts TIFF streams with default options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcStream">A <see cref="T:System.IO.Stream" /> containing the data for the file being compacted. All the pages will be
            read from this stream.</param>
      <param name="destStream">A <see cref="T:System.IO.Stream" /> that will contain the data written.</param>
      <param name="pages">Value that represents the number of pages to copy. Use 0 to copy all the pages. If
            <paramref name="pages" /> is &gt; 0, only <paramref name="pages" /> will be copied to <paramref name="destStream" />.</param>
      <remarks>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit. 
            </para>
      </remarks>
      <example>For an an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.String,System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32,Leadtools.Codecs.CodecsSavePageMode,System.Boolean,System.Boolean)">
      <summary>Compacts TIFF files with specific options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcFileName">A <see cref="T:System.String" /> containing the name of the file being compacted. All the pages will be
            read from this file.</param>
      <param name="destFileName">A <see cref="T:System.String" /> containing the name of the file in which all the pages will be written.</param>
      <param name="pages">Value that represents the number of pages to copy. Use 0 to copy all the pages. If
            <paramref name="pages" /> is &gt; 0, only <paramref name="pages" /> will be copied to <paramref name="destFileName" />.</param>
      <param name="srcStartPage">Specifies the start page in the source file. Page 1 is the first page, page 2 is the second page,
            etc. The pages will be read starting with this page.</param>
      <param name="useSrcIfd">true to use <paramref name="srcIfd" /> as the file offset of the first page.  false to use
            <paramref name="srcStartPage" />.</param>
      <param name="srcIfd">
        <para>Offset into the source file for the start page.  Used only if <paramref name="useSrcIfd" /> is true.</para>
        <para>All pages will be relative to that page. (Note that this might not be the first physical page in the file). This is
            a common technique for manipulating files with thousands of pages.</para>
      </param>
      <param name="destStartPage">0 to overwrite <paramref name="destFileName" />. &lt;&gt;0 to append the pages to the end
            of the file.</param>
      <param name="useDestIfd">true to use <paramref name="destIfd" /> as the file offset of the first page.  false to use
            <paramref name="destStartPage" />.</param>
      <param name="destIfd">
        <para>Offset into the destinatio file for the start page.  Used only if <paramref name="useDestIfd" /> is true.</para>
        <para>All pages will be relative to that page. (Note that this might not be the first physical page in the file). This
            is a common technique for manipulating files with thousands of pages.</para>
      </param>
      <param name="pageMode">
            Flag which indidates the save page mode.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term><see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see></term><description>All pages are inserted before <paramref name="destStartPage" />.</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see></term><description>Pages in <paramref name="destFileName" /> are replaced beginning with <paramref name="destStartPage" />.</description></item></list></param>
      <param name="noSubFileType">true to have the <strong>TGSUBFILETYPE</strong> tag stripped from all pages in the destination
            file.</param>
      <param name="motorolaOrder">true to save pages in Motorola byte order. false to save pages in Intel byte order. This only
            applies when creating a new file. When updating existing files, the byte order of the original file is used.</param>
      <remarks>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.String,System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Int32,Leadtools.Codecs.CodecsSavePageMode,System.Boolean,System.Boolean)">
      <summary>Compacts TIFF streams with specific options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcStream">A <see cref="T:System.IO.Stream" /> containing the data of the file being compacted. All the pages will be
            read from this stream.</param>
      <param name="destStream">A <see cref="T:System.IO.Stream" /> that will contain the written data.</param>
      <param name="pages">Value that represents the number of pages to copy. Use 0 to copy all the pages. If
            <paramref name="pages" /> is &gt; 0, only <paramref name="pages" /> will be copied to <paramref name="destStream" />.</param>
      <param name="srcStartPage">Specifies the start page in the source stream. Page 1 is the first page, page 2 is the second page,
            etc. The pages will be read starting with this page.</param>
      <param name="useSrcIfd">true to use <paramref name="srcIfd" /> as the stream offset of the first page.  false to use
            <paramref name="srcStartPage" />.</param>
      <param name="srcIfd">
        <para>Offset into the source stream for the start page.  Used only if <paramref name="useSrcIfd" /> is true.</para>
        <para>All pages will be relative to that page. (Note that this might not be the first physical page in the stream). This is
            a common technique for manipulating files with thousands of pages.</para>
      </param>
      <param name="destStartPage">0 to overwrite <paramref name="destStream" />. &lt;&gt;0 to append the pages to the end
            of the stream.</param>
      <param name="useDestIfd">true to use <paramref name="destIfd" /> as the stream offset of the first page.  false to use
            <paramref name="destStartPage" />.</param>
      <param name="destIfd">
        <para>Offset into the destinatio stream for the start page.  Used only if <paramref name="useDestIfd" /> is true.</para>
        <para>All pages will be relative to that page. (Note that this might not be the first physical page in the stream). This
            is a common technique for manipulating files with thousands of pages.</para>
      </param>
      <param name="pageMode">
            Flag which indidates the save page mode.
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term><see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see></term><description>All pages are inserted before <paramref name="destStartPage" />.</description></item><item><term><see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see></term><description>Pages in <paramref name="destStream" /> are replaced beginning with <paramref name="destStartPage" />.</description></item></list></param>
      <param name="noSubFileType">true to have the <strong>TGSUBFILETYPE</strong> tag stripped from all pages in the destination
            file.</param>
      <param name="motorolaOrder">true to save pages in Motorola byte order. false to save pages in Intel byte order. This only
            applies when creating a new file. When updating existing files, the byte order of the original file is used.</param>
      <remarks>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.CompactFile(System.String,System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.String,System.Int32,System.Int32)">
      <summary>Loads CMYK TIFF files as CMYK and avoids the colorspace conversion to RGB. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load. The file must be
            CMYK, otherwise the method will fail and throw an exception.</param>
      <param name="bitsPerPixel">
            Resulting image pixel depth.  Possible values are:<br /><list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>8</term><description>Each plane will be a grayscale 8 bis per pixel image.</description></item><item><term>16</term><description>Each plane will be a grayscale 16 bits per pixel image.</description></item></list></param>
      <param name="page">1-based index of the page from which the planes should be loaded.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> that this method loads.  The image will contain one page for each of the CMYK planes.</returns>
      <remarks>
        <para>If the data does not have to be loaded as CMYK, use <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />.</para>
        <para>Support for 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>This method will fail if the input file is not TIFF CMYK. Note that not all the pages should be CMYK - it is enough
            if only the page that you wish to load is CMYK.</para>
        <para>Only the following memory load options are supported by this method:
            <list type="bullet"><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.AllocateImage">RasterCodecs.Options.Load.AllocateImage</see></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.StoreDataInImage">RasterCodecs.Options.Load.StoreDataInImage</see></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.SuperCompressed">RasterCodecs.Options.Load.SuperCompressed</see></description></item></list></para>
        <para>This method uses the values of
            <see cref="P:Leadtools.Codecs.CodecsTiffLoadOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Load.ImageFileDirectoryOffset</see>.</para>
        <para>If the image being loaded contains alpha channel information, it will be stored in the 5th page of the returned image.</para>
        <para>Use <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintCmykPlanes(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties,System.Object)">RasterImagePainter.PaintCmykPlanes</see> to display the array and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SaveCmykPlanes(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">SaveCmykArray</see> to save an image as a CMYK TIFF file.</para>
        <para>If you want to convert the CMYK array to a regular BGR image and use the other methods or save to a file format other
            than TIFF CMYK, use <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">ColorMergeCommand</see> and set the
            <see cref="P:Leadtools.ImageProcessing.Color.ColorMergeCommand.Type">ColorMergeCommand.Type</see> to
            <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommandType">ColorMergeCommandType.Cmyk</see>.</para>
        <para>If you have an alpha image, use <see cref="M:Leadtools.RasterImage.SetAlphaImage(Leadtools.RasterImage)">RasterImage.SetAlphaImage</see> to set the
            alpha image.</para>
        <para>You can apply image processing on each individual image. This allows you to process each color plane separately.</para>
        <para>If you want to load a non-CMYK file as an array of color plane, use the normal <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> method and
            then use <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand">ColorSeparateCommand</see> and
            <see cref="M:Leadtools.RasterImage.CreateAlphaImage">RasterImage.CreateAlphaImage</see> method.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.HandlingCMYKFilesAsSeparateBitmaps">Handling CMYK Files as Separate Images</seealso>
      <example>
        <para>This example will load all CMYK TIFF file, increase the brightness of the K plane only (which will darken the image) and save the file as CMYK TIFF</para>
        <code lang="VB">      Private Sub CmykPlanesExample(ByVal cmykTifFile As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CmykPlanesTif.tif")

         ' Load the CMYK Planes of this image
         Dim cmykImage As RasterImage = codecs.LoadCmykPlanes(cmykTifFile, 8, 1)

         Console.WriteLine("CMYK planes loaded into an image with {0} pages", cmykImage.PageCount)
         Debug.Assert(cmykImage.PageCount = 4)

         ' The load has succeeded. Increase the brightness of the K (black) plane by 50%
         ' Note that this will DARKEN the image, because we increased the amount of black!

         Console.WriteLine("Changing the intensity of the K plane (the 4th page)")
         Dim command As ChangeIntensityCommand = New ChangeIntensityCommand()
         command.Brightness = 500
         cmykImage.Page = 4
         command.Run(cmykImage)
         cmykImage.Page = 1

         Console.WriteLine("Saving the image to the destination file")
         codecs.SaveCmykPlanes(cmykImage, destFileName, RasterImageFormat.TifLzwCmyk, 8, 1, CodecsSavePageMode.Overwrite)
         cmykImage.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      void CmykPlanesExample(string cmykTifFile)
      {
         RasterCodecs codecs = new RasterCodecs();
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CmykPlanesTif.tif");

         // Load the CMYK Planes of this image
         RasterImage cmykImage = codecs.LoadCmykPlanes(cmykTifFile, 8, 1);

         Console.WriteLine("CMYK planes loaded into an image with {0} pages", cmykImage.PageCount);
         Debug.Assert(cmykImage.PageCount == 4);

         // The load has succeeded. Increase the brightness of the K (black) plane by 50%
         // Note that this will DARKEN the image, because we increased the amount of black!

         Console.WriteLine("Changing the intensity of the K plane (the 4th page)");
         ChangeIntensityCommand command = new ChangeIntensityCommand();
         command.Brightness = 500;
         cmykImage.Page = 4;
         command.Run(cmykImage);
         cmykImage.Page = 1;

         Console.WriteLine("Saving the image to the destination file");
         codecs.SaveCmykPlanes(cmykImage, destFileName, RasterImageFormat.TifLzwCmyk, 8, 1, CodecsSavePageMode.Overwrite);
         cmykImage.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      void CmykPlanesExample(Stream inStreamCmykTif, Stream outStreamTifLzwCmyk)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the CMYK Planes of this image
         RasterImage cmykImage = codecs.LoadCmykPlanes(inStreamCmykTif, 8, 1);

         Debug.WriteLine("CMYK planes loaded into an image with {0} pages", cmykImage.PageCount);
         Debug.Assert(cmykImage.PageCount == 4);

         // The load has succeeded. Increase the brightness of the K (black) plane by 50%
         // Note that this will DARKEN the image, because we increased the amount of black!

         Debug.WriteLine("Changing the intensity of the K plane (the 4th page)");
         ChangeIntensityCommand command = new ChangeIntensityCommand();
         command.Brightness = 500;
         cmykImage.Page = 4;
         command.Run(cmykImage);
         cmykImage.Page = 1;

         Debug.WriteLine("Saving the image to the destination file");
         codecs.SaveCmykPlanes(cmykImage, outStreamTifLzwCmyk, RasterImageFormat.TifLzwCmyk, 8, 1, CodecsSavePageMode.Overwrite);
         cmykImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Sub CmykPlanesExample(ByVal inStreamCmykTif As Stream, ByVal outStreamTifLzwCmyk As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the CMYK Planes of this image
         Dim cmykImage As RasterImage = codecs.LoadCmykPlanes(inStreamCmykTif, 8, 1)

         Debug.WriteLine("CMYK planes loaded into an image with {0} pages", cmykImage.PageCount)
         Debug.Assert(cmykImage.PageCount = 4)

         ' The load has succeeded. Increase the brightness of the K (black) plane by 50%
         ' Note that this will DARKEN the image, because we increased the amount of black!

         Debug.WriteLine("Changing the intensity of the K plane (the 4th page)")
         Dim command As ChangeIntensityCommand = New ChangeIntensityCommand()
         command.Brightness = 500
         cmykImage.Page = 4
         command.Run(cmykImage)
         cmykImage.Page = 1

         Debug.WriteLine("Saving the image to the destination file")
         codecs.SaveCmykPlanes(cmykImage, outStreamTifLzwCmyk, RasterImageFormat.TifLzwCmyk, 8, 1, CodecsSavePageMode.Overwrite)
         cmykImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.IO.Stream,System.Int32,System.Int32)">
      <summary>Loads CMYK TIFF streams as CMYK and avoids the colorspace conversion to RGB. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the data of the image file to load. The image data must be
            CMYK, otherwise the method will fail and throw an exception.</param>
      <param name="bitsPerPixel">
            Resulting image pixel depth.  Possible values are:<br /><list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>8</term><description>Each plane will be a grayscale 8 bis per pixel image.</description></item><item><term>16</term><description>Each plane will be a grayscale 16 bits per pixel image.</description></item></list></param>
      <param name="page">1-based index of the page from which the planes should be loaded.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> that this method loads.  The image will contain one page for each of the CMYK planes.</returns>
      <remarks>
        <para>If the data does not have to be loaded as CMYK, use <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />.</para>
        <para>Support for 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>This method will fail if the input file is not TIFF CMYK. Note that not all the pages should be CMYK - it is enough
            if only the page that you wish to load is CMYK.</para>
        <para>Only the following memory load options are supported by this method:
            <list type="bullet"><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.AllocateImage">RasterCodecs.Options.Load.AllocateImage</see></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.StoreDataInImage">RasterCodecs.Options.Load.StoreDataInImage</see></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsLoadOptions.SuperCompressed">RasterCodecs.Options.Load.SuperCompressed</see></description></item></list></para>
        <para>This method uses the values of
            <see cref="P:Leadtools.Codecs.CodecsTiffLoadOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Load.ImageFileDirectoryOffset</see>.</para>
        <para>If the image being loaded contains alpha channel information, it will be stored in the 5th page of the returned image.</para>
        <para>Use <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintCmykPlanes(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties,System.Object)">RasterImagePainter.PaintCmykPlanes</see> to display the array and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SaveCmykPlanes(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">SaveCmykArray</see> to save an image as a CMYK TIFF file.</para>
        <para>If you want to convert the CMYK array to a regular BGR image and use the other methods or save to a file format other
            than TIFF CMYK, use <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">ColorMergeCommand</see> and set the
            <see cref="P:Leadtools.ImageProcessing.Color.ColorMergeCommand.Type">ColorMergeCommand.Type</see> to
            <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommandType">ColorMergeCommandType.Cmyk</see>.</para>
        <para>If you have an alpha image, use <see cref="M:Leadtools.RasterImage.SetAlphaImage(Leadtools.RasterImage)">RasterImage.SetAlphaImage</see> to set the
            alpha image.</para>
        <para>You can apply image processing on each individual image. This allows you to process each color plane separately.</para>
        <para>If you want to load a non-CMYK file as an array of color plane, use the normal <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods and
            then use <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand">ColorSeparateCommand</see> and
            <see cref="M:Leadtools.RasterImage.CreateAlphaImage">RasterImage.CreateAlphaImage</see> method.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.HandlingCMYKFilesAsSeparateBitmaps">Handling CMYK Files as Separate Images</seealso>
      <example>Refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.String,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveCmykPlanes(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves the pages of an image as a CMYK TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image that contains the CMKY planes to be saved.</param>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to save.</param>
      <param name="format">
        <para>Specifies the output file format. Valid values are:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifCmyk</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifPackBitsCmyk</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifLzwCmyk</see>
              </description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPlane">
        <para>Resulting bits per pixel for each plane.  Possible values:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Default bits per pixel. LEADTOOLS will pick the closest valid value.</description>
            </item>
            <item>
              <term>8</term>
              <description>Save 8 bits per component. The generated file will contain 32 bits (no alpha) or 40 bits
                  (if alpha). Note that <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" />will report 8 bits less (24 or 32-bit).</description>
            </item>
            <item>
              <term>16</term>
              <description>Save 16 bits per component. The generated file will contain 64 bits (no alpha) or 80 bits
                  (if alpha). Note that <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" />will report 16 bits less (48 or 64-bit).</description>
            </item>
          </list>
        </para>
      </param>
      <param name="pageNumber">Specifies the reference page number when saving a multipage file.</param>
      <param name="pageMode">Determines how to handle the page when saving to multipage formats.</param>
      <remarks>
        <para>This method will save a CMYK file without performing a color conversion. Each page in the <paramref name="image" />
            will contain one of the C, M, Y, K, Alpha planes. The Alpha plane is optional. The <paramref name="image" /> should contain:
            </para>
        <para>
          <list>
            <item>
              <description>4 pages if you do not save alpha channel information or</description>
            </item>
            <item>
              <description>5 pages if you save alpha channel information</description>
            </item>
          </list>
        </para>
        <para>The pages are in this order: C, M, Y, K, Alpha (optional). All the pages must have the same width, height, bits per
            pixel and palette.</para>
        <para>If you want to save the pages of the <paramref name="image" /> as a file format not supported by this function, use 
            <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">ColorMergeCommand</see> to create a BGR image and save the generated image using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> method.</para>
        <para>CMYK TIFF files can be saved as planar (each image in its own plane) or chunky (the data from all the images will
            be interleaved during saving). Planar images will be saved faster, while chunky images are more compatible (some TIFF
            readers will not read planar files) and require less memory during the load process. The default is to save chunky files.</para>
        <para>You select the planar save mode by setting the
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.SavePlanar">RasterCodecs.Options.Tiff.Save.SavePlanar</see> property to true.</para>
        <para>This method uses the values of
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>.</para>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.HandlingCMYKFilesAsSeparateBitmaps">Handling CMYK Files as Separate Images</seealso>
      <example>Refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.String,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.SaveCmykPlanes(Leadtools.RasterImage,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>Saves the pages of an image as a CMYK TIFF stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image that contains the CMKY planes to be saved.</param>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that will contain the image data to save.</param>
      <param name="format">
        <para>Specifies the output file format. Valid values are:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifCmyk</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifPackBitsCmyk</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.TifLzwCmyk</see>
              </description>
            </item>
          </list>
        </para>
      </param>
      <param name="bitsPerPlane">
        <para>Resulting bits per pixel for each plane.  Possible values:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Default bits per pixel. LEADTOOLS will pick the closest valid value.</description>
            </item>
            <item>
              <term>8</term>
              <description>Save 8 bits per component. The generated file will contain 32 bits (no alpha) or 40 bits
                  (if alpha). Note that <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> will report 8 bits less (24 or 32-bit).</description>
            </item>
            <item>
              <term>16</term>
              <description>Save 16 bits per component. The generated file will contain 64 bits (no alpha) or 80 bits
                  (if alpha). Note that <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> will report 16 bits less (48 or 64-bit).</description>
            </item>
          </list>
        </para>
      </param>
      <param name="pageNumber">Specifies the reference page number when saving a multipage file.</param>
      <param name="pageMode">Determines how to handle the page when saving to multipage formats.</param>
      <remarks>
        <para>This method will save a CMYK file without performing a color conversion. Each page in the <paramref name="image" />
            will contain one of the C, M, Y, K, Alpha planes. The Alpha plane is optional. The <paramref name="image" /> should contain:
            </para>
        <para>
          <list>
            <item>
              <description>4 pages if you do not save alpha channel information or</description>
            </item>
            <item>
              <description>5 pages if you save alpha channel information</description>
            </item>
          </list>
        </para>
        <para>The pages are in this order: C, M, Y, K, Alpha (optional). All the pages must have the same width, height, bits per
            pixel and palette.</para>
        <para>If you want to save the pages of the <paramref name="image" /> as a file format not supported by this function, use 
            <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">ColorMergeCommand</see> to create a BGR image and save the generated image using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> method.</para>
        <para>CMYK TIFF files can be saved as planar (each image in its own plane) or chunky (the data from all the images will
            be interleaved during saving). Planar images will be saved faster, while chunky images are more compatible (some TIFF
            readers will not read planar files) and require less memory during the load process. The default is to save chunky files.</para>
        <para>You select the planar save mode by setting the
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.SavePlanar">RasterCodecs.Options.Tiff.Save.SavePlanar</see> property to true.</para>
        <para>This method uses the values of
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">RasterCodecs.Options.Tiff.Save.ImageFileDirectoryOffset</see>.</para>
        <para>
            This method can also be used to copy or extract one or more pages from a TIFF file and 
            copy them without recompression to another TIFF file. Whenever you save an image 
            containing a region as a TIFF file format, the region is also saved. Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.HandlingCMYKFilesAsSeparateBitmaps">Handling CMYK Files as Separate Images</seealso>
      <example>Refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.String,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Encodes the input raw data using the ABIC encoder. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inputData">A byte array which contains the input data.</param>
      <param name="align">Number of bytes aligned for uncompresed input data.</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
      <param name="biLevel">true to indicate bi-level encoding, false to indicate 4-bit grayscale encoding.</param>
      <returns>A byte array that contains the ABIC encoded data.</returns>
      <remarks>
        <para>Call this method to compress the input raw data to 1-bit bi-level or 4-bit grayscale ABIC data.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.DecodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" /> to decode ABIC data.</para>
      </remarks>
      <example>
        <para>This example will load a file and encode as as ABIC. Decodes the data again before saving it to a destination file</para>
        <code lang="VB">      Public Sub EncodeDecodeAbicExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destDataFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Abic.bmp")

         ' Load the file save it to a memory stream as RAW
         Console.WriteLine("Loading the source image as 1 bits/pixel")
         Dim srcImage As RasterImage = codecs.Load(srcFileName, 1, CodecsLoadByteOrder.Rgb, 1, 1)

         Console.WriteLine("Saving the image to memory as RAW format")
         Dim ms As MemoryStream = New MemoryStream()
         codecs.Save(srcImage, ms, RasterImageFormat.Raw, srcImage.BitsPerPixel)

         Console.WriteLine("Encoding the data as ABIC")
         Dim rawData As Byte() = ms.GetBuffer()
         ms.Close()

         ' Encode this data as ABIC
         Dim abicData As Byte() = codecs.EncodeAbic(rawData, 4, srcImage.Width, srcImage.Height, False)

         ' Decode the data back to RAW
         Console.WriteLine("Deconding the data back as RAW")
         rawData = codecs.DecodeAbic(abicData, 4, srcImage.Width, srcImage.Height, False)

         ' Create a new image from this data
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         ' Add the scan lines
         Dim y As Integer = 0
         Do While y &lt; destImage.Height
            Dim bufferIndex As Integer = y * destImage.BytesPerLine
            destImage.SetRow(y, rawData, bufferIndex, destImage.BytesPerLine)
            y += 1
         Loop

         ' Save this image to disk
         codecs.Save(destImage, destDataFile, RasterImageFormat.Bmp, destImage.BitsPerPixel)

         srcImage.Dispose()
         destImage.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void EncodeDecodeAbicExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destDataFile = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Abic.bmp");

         // Load the file save it to a memory stream as RAW
         Console.WriteLine("Loading the source image as 1 bits/pixel");
         RasterImage srcImage = codecs.Load(srcFileName, 1, CodecsLoadByteOrder.Rgb, 1, 1);

         Console.WriteLine("Saving the image to memory as RAW format");
         MemoryStream ms = new MemoryStream();
         codecs.Save(srcImage, ms, RasterImageFormat.Raw, srcImage.BitsPerPixel);

         Console.WriteLine("Encoding the data as ABIC");
         byte[] rawData = ms.GetBuffer();
         ms.Close();

         // Encode this data as ABIC
         byte[] abicData = codecs.EncodeAbic(rawData, 4, srcImage.Width, srcImage.Height, false);

         // Decode the data back to RAW
         Console.WriteLine("Deconding the data back as RAW");
         rawData = codecs.DecodeAbic(abicData, 4, srcImage.Width, srcImage.Height, false);

         // Create a new image from this data
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         // Add the scan lines
         for(int y = 0; y &lt; destImage.Height; y++)
         {
            int bufferIndex = y * destImage.BytesPerLine;
            destImage.SetRow(y, rawData, bufferIndex, destImage.BytesPerLine);
         }

         // Save this image to disk
         codecs.Save(destImage, destDataFile, RasterImageFormat.Bmp, destImage.BitsPerPixel);

         srcImage.Dispose();
         destImage.Dispose();

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(Leadtools.RasterNativeBuffer,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Encodes the input raw unmanaged memory data using the ABIC encoder. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inputData">A <see cref="T:Leadtools.RasterNativeBuffer" /> object which contains the input data.</param>
      <param name="align">Number of bytes aligned for uncompresed input data.</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
      <param name="biLevel">true to indicate bi-level encoding, false to indicate 4-bit grayscale encoding.</param>
      <returns>A <see cref="T:Leadtools.RasterNativeBuffer" /> object that contains the ABIC encoded data.</returns>
      <remarks>
        <para>Call this method to compress the input raw data to 1-bit bi-level or 4-bit grayscale ABIC data.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.DecodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" /> to decode ABIC data.</para>
        <para>The output buffer in the <see cref="T:Leadtools.RasterNativeBuffer" /> object returned is allocated automatically by
            this method. The user is responsible to free this unmanaged memory buffer by calling
            <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">Marshal.FreeHGlobal</see> as follows:</para>
        <para>
          <code>
            RasterNativeBuffer buffer = rasterCodecsObject.EncodeAbic(...
            // Use buffer
            Marshal.FreeHGlobal(buffer.Data);
            </code>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DecodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Decodes the input ABIC data using the ABIC decoder and returns raw uncompressed data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inputData">A byte array which contains the input data.</param>
      <param name="align">Number of bytes to align the uncompressed output data.</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
      <param name="biLevel">true to indicate bi-level encoding, false to indicate 4-bit grayscale encoding.</param>
      <returns>A byte array that contains the raw uncompressed data.</returns>
      <remarks>
        <para>Call this method to decompress the input 1-bit bi-level or 4-bit grayscale ABIC data.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" /> to encode ABIC data.</para>
        <para>The output buffer in the <see cref="T:Leadtools.RasterNativeBuffer" /> object returned is allocated automatically by
            this method. The user is responsible to free this unmanaged memory buffer by calling
            <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">Marshal.FreeHGlobal</see> as follows:</para>
        <para>
          <code>
            RasterNativeBuffer buffer = rasterCodecsObject.EncodeAbic(...
            // Use buffer
            Marshal.FreeHGlobal(buffer.Data);
            </code>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.DecodeAbic(Leadtools.RasterNativeBuffer,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Decodes the input ABIC unmanaged memory data using the ABIC decoder and returns raw uncompressed data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inputData">A <see cref="T:Leadtools.RasterNativeBuffer" /> object which contains the input data.</param>
      <param name="align">Number of bytes to align the uncompressed output data.</param>
      <param name="width">Image width, in pixels.</param>
      <param name="height">Image height, in pixels.</param>
      <param name="biLevel">true to indicate bi-level encoding, false to indicate 4-bit grayscale encoding.</param>
      <returns>A <see cref="T:Leadtools.RasterNativeBuffer" /> object that contains the raw uncompressed data.</returns>
      <remarks>
        <para>Call this method to decompress the input 1-bit bi-level or 4-bit grayscale ABIC data.</para>
        <para>Use <see cref="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" /> to encode ABIC data.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EncodeAbic(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)">
      <summary>Loads extensions from the specified Exif file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">The input file name.</param>
      <param name="pageNumber">1-based index of the page within the file that contains the extension.</param>
      <returns>An <see cref="T:Leadtools.Codecs.CodecsExtensionList" /> object that contains the extensions found in this file.</returns>
      <remarks>
        <para>Please note that not all Exif files have extensions.</para>
        <para>Currently, this method works only with Exif files. Exif files can contain extra data stored as "FlashPix extensions".
            This method can be used to access this extra data. Leadtools refers to this extra data as "extensions".</para>
        <para>You must dispose the <see cref="T:Leadtools.Codecs.CodecsExtensionList" /> returned from this method when you are done using it.</para>
      </remarks>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <example>
        <para>This example will show detailed information on the streams present in the Exif file.</para>
        <code lang="VB">      Private Sub ExtensionsExample(ByVal exifFileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim stampFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Extension.bmp")
         Dim audioFileNameTemplate As String = Path.Combine(LEAD_VARS.ImagesDir, "Extension{0}.wav")

         ' Read the extensions from the file
         Console.WriteLine("Reading the extensions from the exif file")
         Dim extensionList As CodecsExtensionList = codecs.ReadExtensions(exifFileName, 1)
         If Not extensionList Is Nothing Then
            If (extensionList.Flags And CodecsExtensionListFlags.Stamp) = CodecsExtensionListFlags.Stamp Then
               Console.WriteLine("Stamp extension: Found, saving to {0}", stampFileName)
               Dim stampImage As RasterImage = extensionList.CreateStamp()
               codecs.Save(stampImage, stampFileName, RasterImageFormat.Bmp, 24)
               stampImage.Dispose()
            Else
               Console.WriteLine("Stamp extension: Not found")
            End If

            If (extensionList.Flags And CodecsExtensionListFlags.Audio) = CodecsExtensionListFlags.Audio Then
               Console.WriteLine("Audio extension: Found, saving ...")
               Dim audioData As RasterNativeBuffer
               Dim streamIndex As Integer = 0

               Do
                  audioData = extensionList.GetAudioData(streamIndex)
                  If audioData.Data &lt;&gt; IntPtr.Zero Then
                     Dim audioFileName As String = String.Format(audioFileNameTemplate, streamIndex)
                     Console.WriteLine("To {0}", audioFileName)
                     Using fs As FileStream = File.Create(audioFileName)
                        Dim data As Byte() = New Byte(CInt(audioData.Length) - 1) {}
                        Marshal.Copy(audioData.Data, data, 0, CInt(audioData.Length))
                        fs.Write(data, 0, CInt(audioData.Length))
                     End Using

                     streamIndex += 1
                  End If
               Loop While audioData.Data &lt;&gt; IntPtr.Zero

               Console.WriteLine("{0} total audio streams found", streamIndex)
            Else
               Console.WriteLine("Audio extension: Not found")
            End If

            Dim extensions As CodecsExtension() = extensionList.GetExtensions()
            Console.WriteLine("Total number of extensions found in the file: {0}", extensions.Length)

            Dim i As Integer = 0
            Do While i &lt; extensions.Length
               Dim extension As CodecsExtension = extensions(i)
               Console.WriteLine(" {0}. Name: {1}, Clsid: {2}, UCDefault: {3}, DatLength: {4}", i, extension.Name, extension.Clsid, extension.UCDefault, extension.DataLength)
               i += 1
            Loop

            extensionList.Dispose()
         Else
            Console.WriteLine("No extensions were found in the file")
         End If

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      void ExtensionsExample(string exifFileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         string stampFileName = Path.Combine(LEAD_VARS.ImagesDir, "Extension.bmp");
         string audioFileNameTemplate = Path.Combine(LEAD_VARS.ImagesDir, "Extension{0}.wav");

         // Read the extensions from the file
         Console.WriteLine("Reading the extensions from the exif file");
         CodecsExtensionList extensionList = codecs.ReadExtensions(exifFileName, 1);
         if(extensionList != null)
         {
            if((extensionList.Flags &amp; CodecsExtensionListFlags.Stamp) == CodecsExtensionListFlags.Stamp)
            {
               Console.WriteLine("Stamp extension: Found, saving to {0}", stampFileName);
               RasterImage stampImage = extensionList.CreateStamp();
               codecs.Save(stampImage, stampFileName, RasterImageFormat.Bmp, 24);
               stampImage.Dispose();
            }
            else
               Console.WriteLine("Stamp extension: Not found");

            if((extensionList.Flags &amp; CodecsExtensionListFlags.Audio) == CodecsExtensionListFlags.Audio)
            {
               Console.WriteLine("Audio extension: Found, saving ...");
               RasterNativeBuffer audioData;
               int streamIndex = 0;

               do
               {
                  audioData = extensionList.GetAudioData(streamIndex);
                  if(audioData.Data != IntPtr.Zero)
                  {
                     string audioFileName = string.Format(audioFileNameTemplate, streamIndex);
                     Console.WriteLine("To {0}", audioFileName);
                     using(FileStream fs = File.Create(audioFileName))
                     {
                        byte[] data = new byte[audioData.Length];
                        Marshal.Copy(audioData.Data, data, 0, (int)audioData.Length);
                        fs.Write(data, 0, (int)audioData.Length);
                     }

                     streamIndex++;
                  }
               }
               while(audioData.Data != IntPtr.Zero);

               Console.WriteLine("{0} total audio streams found", streamIndex);
            }
            else
               Console.WriteLine("Audio extension: Not found");

            CodecsExtension[] extensions = extensionList.GetExtensions();
            Console.WriteLine("Total number of extensions found in the file: {0}", extensions.Length);

            for(int i = 0; i &lt; extensions.Length; i++)
            {
               CodecsExtension extension = extensions[i];
               Console.WriteLine(" {0}. Name: {1}, Clsid: {2}, UCDefault: {3}, DatLength: {4}",
                  i, extension.Name, extension.Clsid, extension.UCDefault, extension.DataLength);
            }

            extensionList.Dispose();
         }
         else
            Console.WriteLine("No extensions were found in the file");

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.IO.Stream,System.Int32)">
      <summary>Loads extensions from the specified Exif stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="stream">The input file data stream.</param>
      <param name="pageNumber">1-based index of the page within the file that contains the extension.</param>
      <returns>An <see cref="T:Leadtools.Codecs.CodecsExtensionList" /> object that contains the extensions found in this file.</returns>
      <remarks>
        <para>Please note that not all Exif files have extensions.</para>
        <para>Currently, this method works only with Exif files. Exif files can contain extra data stored as "FlashPix extensions".
            This method can be used to access this extra data. Leadtools refers to this extra data as "extensions".</para>
        <para>You must dispose the <see cref="T:Leadtools.Codecs.CodecsExtensionList" /> returned from this method when you are done using it.</para>
      </remarks>
      <seealso cref="T:L.Topics.ExifFileExtensions">Exif File Extensions</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32)">
      <summary>Saves a <see cref="T:Leadtools.RasterImage" /> to a remote URL in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Save|Saving images|Saving</keywords>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="uri">The <see cref="T:System.Uri" /> containing the output URL name.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <remarks>
        <para>The remote URL defined by <paramref name="uri" /> can be any resource that accepts an HTML "PUT" method. For example, an FTP or SharePoint server.</para>
        <para>To setup the authentication and proxy information to use when accessing <paramref name="uri" />, use <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>If the output file format supports multipage and then all the pages in <paramref name="image" /> will be saved to the
            file.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>. 
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingExtendedFlashPixSupport">Implementing Extended FlashPix Support</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel, int firstPage, int lastPage)</see>.
            </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">
      <summary>Saves one or more pages of a <see cref="T:Leadtools.RasterImage" /> to a remote URL in any of the supported compressed or uncompressed formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object that holds the image data.</param>
      <param name="uri">The <see cref="T:System.Uri" /> containing the output URL name.</param>
      <param name="format">The output file format. For valid values,
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</param>
      <param name="bitsPerPixel">Resulting file's pixel depth. Note that not all bits per pixel are
            available to all file formats.  For valid values, refer to 
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>. If
            <paramref name="bitsPerPixel" /> is 0, the image will be stored using the closet bits/pixel value supported by that format.
            For example, if a file format supports 1, 4, and 24 bits/pixel, and
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 5, the file will be stored as 24 bit. Likewise, if
            <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> is 2, the file will be stored as 4 bit.</param>
      <param name="firstPage">1-based index of the first page in <paramref name="image" /> to save.</param>
      <param name="lastPage">1-based index of the last page in <paramref name="image" /> to save. Pass -1 to save from
            <paramref name="firstPage" /> to the last page in <paramref name="image" />.</param>
      <remarks>
        <para>The remote URL defined by <paramref name="uri" /> can be any resource that accepts an HTML "PUT" method. For example, an FTP or SharePoint server.</para>
        <para>To setup the authentication and proxy information to use when accessing <paramref name="uri" />, use <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>If the image is 8 bits per pixel or greater, use the LEAD CMP format or one of the JPEG (JTIF or JFIF) formats to
            save disk space.</para>
        <para>If the image is 1-bit per pixel, use the LEAD 1-bit format or a CCITT Group 3 or 4 format to save disk space.</para>
        <para>If the image has a region, the region stored in the image will be saved, if the image is saved as one of the TIFF
            file formats. For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.
            Note, however, 
            that the ability to save a region inside a TIFF file must be unlocked. This requires 
            a <see cref="T:Leadtools.Topics.RasterProDocMed">Document Imaging</see> or <see cref="T:Leadtools.Topics.RasterProDocMed">Medical Imaging</see> toolkit.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see>, by using
            the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling. If a
            window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsSaveOptions" /> class to set up other save options parameters before calling this
            method.</para>
        <para>Use to the <see cref="E:Leadtools.Codecs.RasterCodecs.SaveImage" /> event to provide progress feedback or to set or modify the saved image data.</para>
        <para>This method supports signed data images, but only DICOM and TIFF formats support signed data. This method will throw
            an exception if you attempt to save a signed image to a format other than DICOM or TIFF.</para>
        <para>In LEADTOOLS version 17 and up, when saving a colored image (such as a 24-bits per pixel image) to bitonal (1-bit per pixel), the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will not use any dithering when converting the image data. This is done because dithering is not the
            recommended when converting colored images containing text for document processing such as OCR and Barcode. The result text will be fuzzy and
            hard for a recognition engine to process. To save a colored image as bitonal with Floyd-Stein dithering (the behavior of LEADTOOLS 16.5 and earlier)
            use <see cref="P:Leadtools.Codecs.CodecsSaveOptions.UseImageDitheringMethod">CodecsSaveOptions.UseImageDitheringMethod</see> along with
            <see cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod</see> as illustrated below:</para>
        <para>
          <pre>
            <code>
            // 'codecs' is the RasterCodecs to use when saving
            // 'image' is a colored RasterImage object
            // Setup FloydStein dithering:
            codecs.Options.Save.UseImageDitheringMethod = true;
            image.DitheringMethod = RasterDitheringMethod.FloydStein;
            // Save the image as 1-bpp with auto-dithering:
            codecs.Save(image, fileName, RasterImageFormat.Tif, 1);
            </code>
          </pre>
        </para>
        <para>For an information about quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para>This example will create a multipage image and then upload only the second page to a share point server "Shared Document" folder.</para>
        <code lang="VB">      Public Sub SaveToSharePointExample()
         Dim codecs As New RasterCodecs()
         ' Change the path to a server you have access to
         Dim mySharePointServer As String = "http://leadweb3/Shared%20Documents"

         Dim myDocumentFileName As String = mySharePointServer + "/MyJpegFile.jpg"

         Dim image As RasterImage = Nothing

         ' Create a multi-page TIF file
         For i As Integer = 0 To 3
            Dim pageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr" + (i + 1).ToString() + ".tif")
            Dim pageImage As RasterImage = codecs.Load(pageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)

            If (image Is Nothing) Then
               image = pageImage
            Else
               image.AddPage(pageImage)
               pageImage.Dispose()
            End If
         Next

         ' We have the image, upload it

         ' Use the credentials of the logged in user
         ' Change this if you have different user name/password/domain
         ' For example:
         ' codecs.UriOperationCredentials = New System.Net.NetworkCredential("myuser", "mypassword", "mydomain")
         codecs.UriOperationCredentials = System.Net.CredentialCache.DefaultCredentials

         ' Use the default proxy
         codecs.UriOperationProxy = WebRequest.DefaultWebProxy

         ' Upload the second page of the file to the server as JPEG
         codecs.Save(image, New Uri(myDocumentFileName), RasterImageFormat.Jpeg, 24, 2, 2)

         image.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveToSharePointExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Change the path to a server you have access to
         string mySharePointServer = @"http://leadweb3/Shared%20Documents";

         string myDocumentFileName = mySharePointServer + "/MyJpegFile.jpg";

         RasterImage image = null;

         // Create a multi-page TIF file
         for(int i = 0; i &lt; 4; i++)
         {
            string pageFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr" + (i + 1).ToString() + ".tif");
            RasterImage pageImage = codecs.Load(pageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);

            if(image == null)
               image = pageImage;
            else
            {
               image.AddPage(pageImage);
               pageImage.Dispose();
            }
         }

         // We have the image, upload it

         // Use the credentials of the logged in user
         // Change this if you have different user name/password/domain
         // For example:
         // codecs.UriOperationCredentials = new System.Net.NetworkCredential("myuser", "mypassword", "mydomain");
         codecs.UriOperationCredentials = System.Net.CredentialCache.DefaultCredentials;

         // Use the default proxy
         codecs.UriOperationProxy = WebRequest.DefaultWebProxy;

         // Upload the second page of the file to the server as JPEG
         codecs.Save(image, new Uri(myDocumentFileName), RasterImageFormat.Jpeg, 24, 2, 2);

         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
      <keywords>SharePoint Server</keywords>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)">
      <summary>Checks whether the given file format supports tags <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="format">The <see cref="T:Leadtools.RasterImageFormat" /> to check</param>
      <returns>
        <strong>true</strong> if the format supports tags; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>This is a helper method that can be used to detect if a certain raster file format supports tags. For example,
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />, <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" /> can be used to read the tags stored in a file. If
            the file format supports tags, such as JPEG or TIFF, then these methods will successfully return the tags stored.</para>
        <para>However, if the format does not support tags, such as BMP, an exception will be thrown by the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects. You can use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" /> to check if the file supports tags and only call
            the read tags methods if the return value is true.</para>
        <para>Note that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> option uses this method internally to check if the file supports tags when the
            <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags">CodecsLoadOptions.Tags</see> is set to true and only read the file tags if the file
            format supports them.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTagsWithOffsets(System.String,System.Int32,System.Int64[]@)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)">
      <summary>Checks whether the given file format supports TIFF Geo key tags <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="format">The <see cref="T:Leadtools.RasterImageFormat" /> to check</param>
      <returns>
        <strong>true</strong> if the format supports TIFF Geo key tags; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>This is a helper method that can be used to detect if a certain raster file format supports TIFF Geo key tags. For example,
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />, <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" /> can be used to read the geo keys stored in a file. If
            the file format supports geo keys, such as TIFF, then these methods will successfully return the geo key tags stored.</para>
        <para>However, if the format does not support geo key tags, such as BMP, an exception will be thrown by the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects. You can use <see cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" /> to check if the file supports geo keys and only call
            the read methods if the return value is true.</para>
        <para>Note that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> option uses this method internally to check if the file supports geo keys when the
            <see cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys">CodecsLoadOptions.GeoKeys</see> is set to true and only read the file geo keys if the file
            format supports them.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)">
      <summary>Checks whether the given file format supports comment fields <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="format">The <see cref="T:Leadtools.RasterImageFormat" /> to check</param>
      <returns>
        <strong>true</strong> if the format supports comment fields; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>This is a helper method that can be used to detect if a certain raster file format supports comment fields. For example,
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" /> can be used to read the comments stored in a file. If
            the file format supports comments, such as JPEG or EXIF, then these methods will successfully return the comments stored.</para>
        <para>However, if the format does not support comments, such as BMP, an exception will be thrown by the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects. You can use <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" /> to check if the file supports comments and only call
            the read methods if the return value is true.</para>
        <para>Note that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> option uses this method internally to check if the file supports comments when the
            <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments">CodecsLoadOptions.Comments</see> is set to true and only read the file comments if the file
            format supports them.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.MarkersSupported(Leadtools.RasterImageFormat)">
      <summary>Checks whether the given file format supports markers <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="format">The <see cref="T:Leadtools.RasterImageFormat" /> to check</param>
      <returns>
        <strong>true</strong> if the format supports markers; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>This is a helper method that can be used to detect if a certain raster file format supports markers. For example,
            <see cref="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.String)" /> can be used to read the markers stored in a file. If
            the file format supports markers, such as EXIF, then these methods will successfully return the markers stored.</para>
        <para>However, if the format does not support markers, such as BMP, an exception will be thrown by the
            <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects. You can use <see cref="M:Leadtools.Codecs.RasterCodecs.MarkersSupported(Leadtools.RasterImageFormat)" /> to check if the file supports markers and only call
            the read methods if the return value is true.</para>
        <para>Note that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> option uses this method internally to check if the file supports markers when the
            <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers">CodecsLoadOptions.Markers</see> is set to true and only read the file marekrs if the file
            format supports them.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.String)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)">
      <summary>Reads all the tags stored in a TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the tags.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the tags found in the file. If the file does not
            contain any tags, an empty collection will be returned. If the file format does not support tags, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific tag stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to enumerate all the tag ids (but not the
            data) stored in a file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support tags. To check if a file
            format supports tags, use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the tags stored in a file during a
            load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags">CodecsLoadOptions.Tags</see> property to true. The tags
            data will be stored in the result image <see cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</see> collection.</para>
        <para>To load all the tags stored in a stream containing the image data, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.IO.Stream,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>
        <para>
          <para>This example will load all the metadata (tags, geo-keys and comments) found in a disk file.</para>
        </para>
        <code lang="VB">      Public Sub MetadataLoadExample()
         ' Prompt the user for an image file
         Dim imageFileName As String = PromptForFileName()
         ' Initialize LEADTOOLS
         Using codecs As New RasterCodecs()
            ' Get the file format
            Dim format As RasterImageFormat

            Using info As CodecsImageInfo = codecs.GetInformation(imageFileName, False)
               format = info.Format
            End Using

            ' Load the tags
            Dim tags As RasterCollection(Of RasterTagMetadata) = Nothing
            If RasterCodecs.TagsSupported(format) Then
               tags = codecs.ReadTags(imageFileName, 1)
            End If

            ' Load the comments
            Dim comments As RasterCollection(Of RasterCommentMetadata) = Nothing
            If RasterCodecs.CommentsSupported(format) Then
               comments = codecs.ReadComments(imageFileName, 1)
            End If

            ' Load the geo keys
            Dim geoKeys As RasterCollection(Of RasterTagMetadata) = Nothing
            If RasterCodecs.GeoKeysSupported(format) Then
               geoKeys = codecs.ReadGeoKeys(imageFileName, 1)
            End If

            ' Load the markers
            Dim markers As RasterCollection(Of RasterMarkerMetadata) = Nothing
            If RasterCodecs.MarkersSupported(format) Then
               markers = codecs.ReadMarkers(imageFileName)
            End If

            Dim txtFileName As String = Path.Combine( _
               Path.GetDirectoryName(imageFileName), _
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt")

            Using writer As StreamWriter = File.CreateText(txtFileName)
               ' Write the tags
               WriteTags(writer, "Tags", tags)

               ' Write the comments
               WriteComments(writer, comments)

               ' Write the geo keys (tags and geokeys use the same data type)
               WriteTags(writer, "GeoKeys", geoKeys)

               ' Write the markers
               WriteMarkers(writer, markers)
            End Using

            ' Show the text file we created
            System.Diagnostics.Process.Start(txtFileName)
         End Using
      End Sub

      Private Shared Sub WriteTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata))
         writer.WriteLine("{0}:", name)

         If Not IsNothing(tags) Then
            For Each tag As RasterTagMetadata In tags
               writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length)
            Next
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub

      Private Shared Sub WriteComments(ByVal writer As StreamWriter, ByVal comments As RasterCollection(Of RasterCommentMetadata))
         writer.WriteLine("Comments:")

         If Not IsNothing(comments) Then
            For Each comment As RasterCommentMetadata In comments
               writer.WriteLine("Type: {0}, data length: {1}", comment.Type, comment.GetData().Length)
            Next
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub

      Private Shared Sub WriteMarkers(ByVal writer As StreamWriter, ByVal markers As RasterCollection(Of RasterMarkerMetadata))
         writer.WriteLine("Comments:")

         If Not IsNothing(markers) Then
            For Each marker As RasterMarkerMetadata In markers
               writer.WriteLine("ID: {0}, data length: {1}", marker.Id, marker.GetData().Length)
            Next
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub</code>
        <code lang="CS">      public void MetadataLoadExample()
      {
         // Prompt the user for an image file
         string imageFileName = PromptForFileName();
         // Initialize LEADTOOLS
         using(RasterCodecs codecs = new RasterCodecs())
         {
            // Get the file format
            RasterImageFormat format;

            using(CodecsImageInfo info = codecs.GetInformation(imageFileName, false))
            {
               format = info.Format;
            }

            // Load the tags
            RasterCollection&lt;RasterTagMetadata&gt; tags = null;
            if(RasterCodecs.TagsSupported(format))
               tags = codecs.ReadTags(imageFileName, 1);

            // Load the comments
            RasterCollection&lt;RasterCommentMetadata&gt; comments = null;
            if(RasterCodecs.CommentsSupported(format))
               comments = codecs.ReadComments(imageFileName, 1);

            // Load the geo keys
            RasterCollection&lt;RasterTagMetadata&gt; geoKeys = null;
            if(RasterCodecs.GeoKeysSupported(format))
               geoKeys = codecs.ReadGeoKeys(imageFileName, 1);

            // Load the markers
           RasterCollection&lt;RasterMarkerMetadata&gt; markers = null;
           if (RasterCodecs.MarkersSupported(format))
               markers = codecs.ReadMarkers(imageFileName);

            string txtFileName = Path.Combine(
               Path.GetDirectoryName(imageFileName),
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt");

            using(StreamWriter writer = File.CreateText(txtFileName))
            {
               // Write the tags
               WriteTags(writer, "Tags", tags);

               // Write the comments
               WriteComments(writer, comments);

               // Write the geo keys (tags and geokeys use the same data type)
               WriteTags(writer, "GeoKeys", geoKeys);

               // Write the markers
               WriteMarkers(writer, markers);
            }

            // Show the text file we created
            System.Diagnostics.Process.Start(txtFileName);
         }
      }

      private static void WriteTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags)
      {
         writer.WriteLine("{0}:", name);

         if(tags != null)
         {
            foreach(RasterTagMetadata tag in tags)
            {
               writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length);
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }

      private static void WriteComments(StreamWriter writer, RasterCollection&lt;RasterCommentMetadata&gt; comments)
      {
         writer.WriteLine("Comments:");

         if(comments != null)
         {
            foreach(RasterCommentMetadata comment in comments)
            {
               writer.WriteLine("Type: {0}, data length: {1}", comment.Type, comment.GetData().Length);
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }

      private static void WriteMarkers(StreamWriter writer, RasterCollection&lt;RasterMarkerMetadata&gt; markers)
      {
         writer.WriteLine("Markers:");

         if (markers != null)
         {
            foreach (RasterMarkerMetadata marker in markers)
            {
               writer.WriteLine("ID: {0}, data length: {1}", marker.Id, marker.GetData().Length);
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }</code>
        <code lang="SilverlightCSharp">      public void MetadataLoadExample(Stream inStreamImage, StreamWriter outStreamText)
      {
         // Initialize LEADTOOLS
         RasterCodecs codecs = new RasterCodecs();
         {
            // Get the file format
            RasterImageFormat format;
            CodecsImageInfo info = codecs.GetInformation(inStreamImage, false);
            {
               format = info.Format;
            }

            // Load the tags
            RasterCollection&lt;RasterTagMetadata&gt; tags = null;
            if(RasterCodecs.TagsSupported(format))
               tags = codecs.ReadTags(inStreamImage, 1);

            // Load the comments
            RasterCollection&lt;RasterCommentMetadata&gt; comments = null;
            if(RasterCodecs.CommentsSupported(format))
               comments = codecs.ReadComments(inStreamImage, 1);

            // Load the geo keys
            RasterCollection&lt;RasterTagMetadata&gt; geoKeys = null;
            if(RasterCodecs.GeoKeysSupported(format))
               geoKeys = codecs.ReadGeoKeys(inStreamImage, 1);

            // Write the tags
            WriteTags(outStreamText, "Tags", tags);

            // Write the comments
            WriteComments(outStreamText, comments);

            // Write the geo keys (tags and geokeys use the same data type)
            WriteTags(outStreamText, "GeoKeys", geoKeys);
         }
      }

      private static void WriteTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags)
      {
         writer.WriteLine("{0}:", name);

         if(tags != null)
         {
            foreach(RasterTagMetadata tag in tags)
            {
               writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length);
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }

      private static void WriteComments(StreamWriter writer, RasterCollection&lt;RasterCommentMetadata&gt; comments)
      {
         writer.WriteLine("Comments:");

         if(comments != null)
         {
            foreach(RasterCommentMetadata comment in comments)
            {
               writer.WriteLine("Type: {0}, data length: {1}", comment.Type, comment.GetData().Length);
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }</code>
        <code lang="SilverlightVB">      Public Sub MetadataLoadExample(ByVal inStreamImage As Stream, ByVal outStreamText As StreamWriter)
         ' Initialize LEADTOOLS
         Dim codecs As RasterCodecs = New RasterCodecs()
            ' Get the file format
            Dim format As RasterImageFormat
            Dim info As CodecsImageInfo = codecs.GetInformation(inStreamImage, False)
               format = info.Format

            ' Load the tags
            Dim tags As RasterCollection(Of RasterTagMetadata) = Nothing
            If RasterCodecs.TagsSupported(format) Then
               tags = codecs.ReadTags(inStreamImage, 1)
            End If

            ' Load the comments
            Dim comments As RasterCollection(Of RasterCommentMetadata) = Nothing
            If RasterCodecs.CommentsSupported(format) Then
               comments = codecs.ReadComments(inStreamImage, 1)
            End If

            ' Load the geo keys
            Dim geoKeys As RasterCollection(Of RasterTagMetadata) = Nothing
            If RasterCodecs.GeoKeysSupported(format) Then
               geoKeys = codecs.ReadGeoKeys(inStreamImage, 1)
            End If

            ' Write the tags
            WriteTags(outStreamText, "Tags", tags)

            ' Write the comments
            WriteComments(outStreamText, comments)

            ' Write the geo keys (tags and geokeys use the same data type)
            WriteTags(outStreamText, "GeoKeys", geoKeys)
      End Sub

      Private Shared Sub WriteTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata))
         writer.WriteLine("{0}:", name)

         If Not tags Is Nothing Then
            For Each tag As RasterTagMetadata In tags
               writer.WriteLine("Id: 0x{0}, data length: {1}", tag.Id.ToString("X"), tag.GetData().Length)
            Next tag
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub

      Private Shared Sub WriteComments(ByVal writer As StreamWriter, ByVal comments As RasterCollection(Of RasterCommentMetadata))
         writer.WriteLine("Comments:")

         If Not comments Is Nothing Then
            For Each comment As RasterCommentMetadata In comments
               writer.WriteLine("Type: {0}, data length: {1}", comment.Type, comment.GetData().Length)
            Next comment
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.IO.Stream,System.Int32)">
      <summary>Reads all the tags stored in a TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="pageNumber">1-based index of the page from which to read the tags.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the tags found in the file. If the file does not
            contain any tags, an empty collection will be returned. If the file format does not support tags, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific tag stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to enumerate all the tag ids (but not the
            data) stored in a file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support tags. To check if a file
            format supports tags, use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the tags stored in a file during a
            load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags">CodecsLoadOptions.Tags</see> property to true. The tags
            data will be stored in the result image <see cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</see> collection.</para>
        <para>To load all the tags stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTagsWithOffsets(System.String,System.Int32,System.Int64[]@)">
      <summary>
            Reads all the tags stored in a TIFF file, along with the offsets for each tag.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the tags.</param>
      <param name="offsets">An array that contains the offests for each tag.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the tags found in the file. If the file does not
            contain any tags, an empty collection will be returned. If the file format does not support tags, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific tag stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to enumerate all the tag ids (but not the
            data) stored in a file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support tags. To check if a file
            format supports tags, use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the tags stored in a file during a
            load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags">CodecsLoadOptions.Tags</see> property to true. The tags
            data will be stored in the result image <see cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</see> collection.</para>
        <para>To load all the tags stored in a stream containing the image data, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.IO.Stream,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>
        <para>
          <para>This example will load all the tags, with their offsets, from a file.</para>
        </para>
        <code lang="VB">      Private Shared Sub ReadTagsWithOffsetsExample()
         ' Prompt the user for an image file
         Dim imageFileName As String = PromptForFileName()
         ' Initialize LEADTOOLS
         Using codecs As New RasterCodecs()
            ' Get the file format
            Dim format As RasterImageFormat

            Using info As CodecsImageInfo = codecs.GetInformation(imageFileName, False)
               format = info.Format
            End Using

            ' Load the tags, with their offsets
            Dim tags As RasterCollection(Of RasterTagMetadata) = Nothing
            Dim offsets As Long() = Nothing
            If RasterCodecs.TagsSupported(format) Then
               tags = codecs.ReadTagsWithOffsets(imageFileName, 1, offsets)
            End If

            Dim txtFileName As String = Path.Combine( _
               Path.GetDirectoryName(imageFileName), _
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt")

            Using writer As StreamWriter = File.CreateText(txtFileName)
               ' Write the tags
               WriteTags(writer, "Tags", tags, offsets)
            End Using

            ' Show the text file we created
            System.Diagnostics.Process.Start(txtFileName)
         End Using
      End Sub

      Private Shared Sub WriteTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata), ByVal offsets As Long())
         writer.WriteLine("{0}:", name)

         If Not IsNothing(tags) Then
            Dim x As Integer = 0
            For Each tag As RasterTagMetadata In tags
               writer.WriteLine("Id: 0x{0}, offset: {1}", tag.Id.ToString("X"), offsets(x))
               x = x + 1
            Next
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub</code>
        <code lang="CS">      public void ReadTagsWithOffsetsExample()
      {
         // Prompt the user for an image file
         string imageFileName = PromptForFileName();
         // Initialize LEADTOOLS
         using (RasterCodecs codecs = new RasterCodecs())
         {
            // Get the file format
            RasterImageFormat format;

            using (CodecsImageInfo info = codecs.GetInformation(imageFileName, false))
            {
               format = info.Format;
            }

            // Load the tags, with their offsets
            RasterCollection&lt;RasterTagMetadata&gt; tags = null;
            long[] offsets = null;
            if (RasterCodecs.TagsSupported(format))
               tags = codecs.ReadTagsWithOffsets(imageFileName, 1, out offsets);

            string txtFileName = Path.Combine(
               Path.GetDirectoryName(imageFileName),
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt");

            using (StreamWriter writer = File.CreateText(txtFileName))
            {
               // Write the tags
               WriteTags(writer, "Tags", tags, offsets);
            }

            // Show the text file we created
            System.Diagnostics.Process.Start(txtFileName);
         }
      }

      private static void WriteTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags, long[] offsets)
      {
         writer.WriteLine("{0}:", name);

         if (tags != null)
         {
            int x = 0;
            foreach (RasterTagMetadata tag in tags)
            {
               writer.WriteLine("Id: 0x{0}, offset: {1}", tag.Id.ToString("X"), offsets[x]);
               x++;
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadTagsWithOffsets(System.IO.Stream,System.Int32,System.Int64[]@)">
      <summary>
            Reads all the tags stored in a TIFF file, along with the offsets for each tag.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="pageNumber">1-based index of the page from which to read the tags.</param>
      <param name="offsets">An array that contains the offests for each tag.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the tags found in the file. If the file does not
            contain any tags, an empty collection will be returned. If the file format does not support tags, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific tag stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" /> and to enumerate all the tag ids (but not the
            data) stored in a file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support tags. To check if a file
            format supports tags, use <see cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the tags stored in a file during a
            load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags">CodecsLoadOptions.Tags</see> property to true. The tags
            data will be stored in the result image <see cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</see> collection.</para>
        <para>To load all the tags stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Tags" />
      <seealso cref="P:Leadtools.RasterImage.Tags">RasterImage.Tags</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>
        <para>
          <para>This example will load all the tags, with their offsets, from a file.</para>
        </para>
        <code lang="VB">      Private Shared Sub ReadTagsWithOffsetsExample()
         ' Prompt the user for an image file
         Dim imageFileName As String = PromptForFileName()
         ' Initialize LEADTOOLS
         Using codecs As New RasterCodecs()
            ' Get the file format
            Dim format As RasterImageFormat

            Using info As CodecsImageInfo = codecs.GetInformation(imageFileName, False)
               format = info.Format
            End Using

            ' Load the tags, with their offsets
            Dim tags As RasterCollection(Of RasterTagMetadata) = Nothing
            Dim offsets As Long() = Nothing
            If RasterCodecs.TagsSupported(format) Then
               tags = codecs.ReadTagsWithOffsets(imageFileName, 1, offsets)
            End If

            Dim txtFileName As String = Path.Combine( _
               Path.GetDirectoryName(imageFileName), _
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt")

            Using writer As StreamWriter = File.CreateText(txtFileName)
               ' Write the tags
               WriteTags(writer, "Tags", tags, offsets)
            End Using

            ' Show the text file we created
            System.Diagnostics.Process.Start(txtFileName)
         End Using
      End Sub

      Private Shared Sub WriteTags(ByVal writer As StreamWriter, ByVal name As String, ByVal tags As RasterCollection(Of RasterTagMetadata), ByVal offsets As Long())
         writer.WriteLine("{0}:", name)

         If Not IsNothing(tags) Then
            Dim x As Integer = 0
            For Each tag As RasterTagMetadata In tags
               writer.WriteLine("Id: 0x{0}, offset: {1}", tag.Id.ToString("X"), offsets(x))
               x = x + 1
            Next
         Else
            writer.WriteLine("Not supported")
         End If

         writer.WriteLine()
      End Sub</code>
        <code lang="CS">      public void ReadTagsWithOffsetsExample()
      {
         // Prompt the user for an image file
         string imageFileName = PromptForFileName();
         // Initialize LEADTOOLS
         using (RasterCodecs codecs = new RasterCodecs())
         {
            // Get the file format
            RasterImageFormat format;

            using (CodecsImageInfo info = codecs.GetInformation(imageFileName, false))
            {
               format = info.Format;
            }

            // Load the tags, with their offsets
            RasterCollection&lt;RasterTagMetadata&gt; tags = null;
            long[] offsets = null;
            if (RasterCodecs.TagsSupported(format))
               tags = codecs.ReadTagsWithOffsets(imageFileName, 1, out offsets);

            string txtFileName = Path.Combine(
               Path.GetDirectoryName(imageFileName),
               Path.GetFileNameWithoutExtension(imageFileName) + "_metadata.txt");

            using (StreamWriter writer = File.CreateText(txtFileName))
            {
               // Write the tags
               WriteTags(writer, "Tags", tags, offsets);
            }

            // Show the text file we created
            System.Diagnostics.Process.Start(txtFileName);
         }
      }

      private static void WriteTags(StreamWriter writer, string name, RasterCollection&lt;RasterTagMetadata&gt; tags, long[] offsets)
      {
         writer.WriteLine("{0}:", name);

         if (tags != null)
         {
            int x = 0;
            foreach (RasterTagMetadata tag in tags)
            {
               writer.WriteLine("Id: 0x{0}, offset: {1}", tag.Id.ToString("X"), offsets[x]);
               x++;
            }
         }
         else
         {
            writer.WriteLine("Not supported");
         }

         writer.WriteLine();
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)">
      <summary>Read all the GeoKey data found in a TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the GeoKey tags.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the GeoKey tags found in the file. If the file does not
            contain any geo keys, an empty collection will be returned. If the file format does not support geo keys, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific geo key stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" /> and to enumerate all the geo keys stored in a
            file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support geo keys. To check if a file
            format supports geo keys, use <see cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the geo keys stored in a
            file during a load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys">CodecsLoadOptions.GeoKeys</see> property to
            true. The geo keys data will be stored in the result image <see cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</see> collection.</para>
        <para>To load all the geo keys stored in a stream containing the image data, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.IO.Stream,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys" />
      <seealso cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.IO.Stream,System.Int32)">
      <summary>Read all the GeoKey data found in a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input TIFF image data.</param>
      <param name="pageNumber">1-based index of the page from which to read the GeoKey tags.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the GeoKey tags found in the file. If the file does not
            contain any geo keys, an empty collection will be returned. If the file format does not support geo keys, an exception will be thrown.</returns>
      <remarks>
        <para>To read a specific geo key stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" /> and to enumerate all the geo keys stored in a
            file use <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</para>
        <para>This method will throw an exception if the file format does not support geo keys. To check if a file
            format supports geo keys, use <see cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the geo keys stored in a
            file during a load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys">CodecsLoadOptions.GeoKeys</see> property to
            true. The geo keys data will be stored in the result image <see cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</see> collection.</para>
        <para>To load all the geo keys stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.GeoKeys" />
      <seealso cref="P:Leadtools.RasterImage.GeoKeys">RasterImage.GeoKeys</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)">
      <summary>Gets all the comment fields stored in a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the input file name.</param>
      <param name="pageNumber">1-based index of the page from which to read the comments.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the comment fields information found in the file. If
            the file does not contain any comments, an empty collection will be returned. If the file format does not support comment
            fields, an exception will be thrown.</returns>
      <remarks>
        <para>Some file formats can contain comments, and some cannot, and each file format has its own set of comment types.
            When you save a file, the comments in the <see cref="T:Leadtools.RasterImage" /> object can be saved in the file. The index into the
            array (specified using a constant) determines the type of comment.</para>
        <para>To read a specific comment field stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</para>
        <para>This method will throw an exception if the file format does not support comments fields. To check if a file
            format supports comment fields, use <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the comment fields
            stored in a file during a load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments">CodecsLoadOptions.Comments</see>
            property to true. The comment fields data will be stored in the result image
            <see cref="P:Leadtools.RasterImage.Comments">RasterImage.Comments</see> collection.</para>
        <para>To load all the comments stored in a stream, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.IO.Stream,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments" />
      <seealso cref="P:Leadtools.RasterImage.Comments">RasterImage.Comments</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments">TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.IO.Stream,System.Int32)">
      <summary>Gets all the comment fields stored in a stream. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input image data.</param>
      <param name="pageNumber">1-based index of the page from which to read the comments.</param>
      <returns>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> containing all the comment fields information found in the file. If
            the file does not contain any comments, an empty collection will be returned. If the file format does not support comment
            fields, an exception will be thrown.</returns>
      <remarks>
        <para>Some file formats can contain comments, and some cannot, and each file format has its own set of comment types.
            When you save a file, the comments in the <see cref="T:Leadtools.RasterImage" /> object can be saved in the file. The index into the
            array (specified using a constant) determines the type of comment.</para>
        <para>To read a specific comment field stored in a file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />.</para>
        <para>This method will throw an exception if the file format does not support comments fields. To check if a file
            format supports comment fields, use <see cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />. You can also automatically load all the comment fields
            stored in a file during a load operation by setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments">CodecsLoadOptions.Comments</see>
            property to true. The comment fields data will be stored in the result image
            <see cref="P:Leadtools.RasterImage.Comments">RasterImage.Comments</see> collection.</para>
        <para>To load all the comments stored in a disk file, use <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComments(System.String,System.Int32)" />.</para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.Comments" />
      <seealso cref="P:Leadtools.RasterImage.Comments">RasterImage.Comments</seealso>
      <seealso cref="T:L.Topics.WorkingWithMarkers">Working with Markers</seealso>
      <seealso cref="T:L.Topics.ImplementingTiffCommentsandTags">Implementing TIFF Comments and Tags</seealso>
      <seealso cref="T:L.Topics.TIFFFileComments"> TIFF File Comments</seealso>
      <seealso cref="T:L.Topics.ImplementingGeoKeys"> Implementing GeoKeys (GeoTIFF tags)</seealso>
      <seealso cref="T:Leadtools.RasterCommentMetadataType" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.UseAsync">
      <summary>Creates the <see cref="T:System.Net.WebClient" /> object used for asynchronous operations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object supports getting information and loading image files asnchronously through the use of the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods. These methods will use an internal <see cref="T:System.Net.WebClient" /> object to perform
            their operations and this object will be created automatically on the first call to these methods and can be accessed through the
            <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" /> property.</para>
        <para>If it is desired to create the <see cref="T:System.Net.WebClient" /> object manually (for example, to subscribe to any of its event or set the
            credentials prior to invoking any read operations), you can call <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" /> to create the object, change its behavior and then call
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />.</para>
        <para>
          <strong>Note:</strong>
          <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" />, <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />, <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" />, and <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> are only applicable
            when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> was with the versions that take a <see cref="T:System.Uri" /> parameter. The versions
            thet take a <see cref="T:System.String" /> or a <see cref="T:System.IO.Stream" /> does not use a <see cref="T:System.Net.WebClient" /> object internally. If you want to check the progress
            or cancel the operation then use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event as normal.</para>
      </remarks>
      <example>
        <para>
          <para>This example will use <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" /> to create the <see cref="T:System.Net.WebClient" /> object used by a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object
            for asyncrounous operations. It will then change the cache policy of the web client object before loading an image asynchronously.</para>
        </para>
        <code lang="VB">      Public Sub UseAsyncExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' The RasterCodecs.AsyncWebClient is Nothing first
         Debug.Assert(Not IsNothing(codecs.AsyncWebClient))

         ' Force the RasterCodecs object to create it
         codecs.UseAsync()

         ' Change the Cache policy
         codecs.AsyncWebClient.CachePolicy = New System.Net.Cache.RequestCachePolicy(System.Net.Cache.RequestCacheLevel.CacheOnly)

         ' Now Load the file asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf useAsyncExample_LoadAsyncCompleted
         Dim image As RasterImage = codecs.LoadAsync(uri, Nothing)
      End Sub

      Private Sub useAsyncExample_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image loaded asynchronously: Size = {0} by {1}", image.Width, image.Height)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf useAsyncExample_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void UseAsyncExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // The RasterCodecs.AsyncWebClient is null first
         Debug.Assert(codecs.AsyncWebClient == null);

         // Force the RasterCodecs object to create it
         codecs.UseAsync();

         // Change the Cache policy
         codecs.AsyncWebClient.CachePolicy = new System.Net.Cache.RequestCachePolicy(System.Net.Cache.RequestCacheLevel.CacheOnly);

         // Now Load the file asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(useAsyncExample_LoadAsyncCompleted);
         RasterImage image = codecs.LoadAsync(uri, null);
      }

      private void useAsyncExample_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image loaded asynchronously: Size = {0} by {1}", image.Width, image.Height);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(useAsyncExample_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.CancelAsync">
      <summary>Cancels a pending asynchronous operation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object supports getting information and loading image files asnchronously through the use of the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods.</para>
        <para>You can call one asyncronous operation per <see cref="T:Leadtools.Codecs.RasterCodecs" /> object at a time. To check if the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is
            busy with a previous asynchronous operation, use <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" /> property. This is the equivalant of the <see cref="P:System.Net.WebClient.IsBusy">WebClient.IsBusy</see> property of <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />.</para>
        <para>You can also use the <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> method to cancel any current asynchronous operation in this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. This
            is the equivalant of calling <see cref="M:System.Net.WebClient.CancelAsync">WebClient.CancelAsync</see> on <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />.</para>
        <para>
          <strong>Note:</strong>
          <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" />, <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />, <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" />, and <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> are only applicable
            when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> was with the versions that take a <see cref="T:System.Uri" /> parameter. The versions
            thet take a <see cref="T:System.String" /> or a <see cref="T:System.IO.Stream" /> does not use a <see cref="T:System.Net.WebClient" /> object internally. If you want to check the progress
            or cancel the operation then use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event as normal.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CancelAsyncExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' Now Load the file asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf cancelAsyncExample_LoadAsyncCompleted
         Dim image As RasterImage = codecs.LoadAsync(uri, Nothing)

         ' Cancel it immediatly, in normal situation, the cancelation will happen
         ' before the LoadAsync method has a chance to load the file and
         ' the message "User canceled" will be displayed on the console
         If codecs.IsAsyncBusy Then
            codecs.CancelAsync()
         End If
      End Sub

      Private Sub cancelAsyncExample_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image loaded asynchronously: Size = {0} by {1}", image.Width, image.Height)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf cancelAsyncExample_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CancelAsyncExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // Now Load the file asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(cancelAsyncExample_LoadAsyncCompleted);
         RasterImage image = codecs.LoadAsync(uri, null);

         // Cancel it immediatly, in normal situation, the cancelation will happen
         // before the LoadAsync method has a chance to load the file and
         // the message "User canceled" will be displayed on the console
         if(codecs.IsAsyncBusy)
         {
            codecs.CancelAsync();
         }
      }

      private void cancelAsyncExample_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image loaded asynchronously: Size = {0} by {1}", image.Width, image.Height);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(cancelAsyncExample_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">
      <summary>Gets the image information from a disk file asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">
        <see cref="T:System.String" /> containing the input file name to query.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <param name="pageNumber">The page number to query. Pass 1 for the first page (default).</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image. See remarks about the usage of this object.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>
          <paramref name="userState" /> will be passed to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">CodecsGetInformationAsyncCompletedEventArgs.UserState</see>
            member of the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted" /> event data.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationAsyncFileExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim codecs As New RasterCodecs()

         ' Now get information about the file asynchronously
         AddHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncFileExample_GetInformationAsyncCompleted
         Dim imageInfoObject As Object = codecs.GetInformationAsync(srcFileName, True, 1, Nothing)

         ' Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         ' fires.
      End Sub

      Private Sub GetInformationAsyncFileExample_GetInformationAsyncCompleted(ByVal sender As Object, ByVal e As CodecsGetInformationAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Get the image info
            Dim info As CodecsImageInfo = DirectCast(e.Info, CodecsImageInfo)
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString())
            info.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncFileExample_GetInformationAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetInformationAsyncFileExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         RasterCodecs codecs = new RasterCodecs();

         // Now get information about the file asynchronously
         codecs.GetInformationAsyncCompleted += new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncFileExample_GetInformationAsyncCompleted);
         object imageInfoObject = codecs.GetInformationAsync(srcFileName, true, 1, null);

         // Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         // fires.
      }

      private void GetInformationAsyncFileExample_GetInformationAsyncCompleted(object sender, CodecsGetInformationAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Get the image info
            CodecsImageInfo info = e.Info;
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString());
            info.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.GetInformationAsyncCompleted -= new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncFileExample_GetInformationAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.IO.Stream,System.Boolean,System.Int32,System.Object)">
      <summary>Gets the image information from a stream containing image data asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> containing the input image data to query.</param>
      <param name="totalPages">true to query the file for total number of pages, false otherwise.</param>
      <param name="pageNumber">The page number to query. Pass 1 for the first page (default).</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image. See remarks about the usage of this object.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>
          <paramref name="userState" /> will be passed to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">CodecsGetInformationAsyncCompletedEventArgs.UserState</see>
            member of the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted" /> event data.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationAsyncStreamExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim codecs As New RasterCodecs()

         ' Now get information about the file asynchronously
         AddHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncStreamExample_GetInformationAsyncCompleted

         Dim stream As Stream = File.OpenRead(srcFileName)
         Dim imageInfoObject As Object = codecs.GetInformationAsync(stream, True, 1, Nothing)

         ' Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         ' fires.
      End Sub

      Private Sub GetInformationAsyncStreamExample_GetInformationAsyncCompleted(ByVal sender As Object, ByVal e As CodecsGetInformationAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Get the image info
            Dim info As CodecsImageInfo = DirectCast(e.Info, CodecsImageInfo)
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString())
            info.Dispose()
         End If

         ' We should close the stream here
         e.Stream.Dispose()

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncStreamExample_GetInformationAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetInformationAsyncStreamExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         RasterCodecs codecs = new RasterCodecs();

         // Now get information about the file asynchronously
         codecs.GetInformationAsyncCompleted += new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncStreamExample_GetInformationAsyncCompleted);

         Stream stream = File.OpenRead(srcFileName);
         object imageInfoObject = codecs.GetInformationAsync(stream, true, 1, null);

         // Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         // fires.
      }

      private void GetInformationAsyncStreamExample_GetInformationAsyncCompleted(object sender, CodecsGetInformationAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Get the image info
            CodecsImageInfo info = e.Info;
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString());
            info.Dispose();
         }

         // We should close the stream here
         e.Stream.Dispose();

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.GetInformationAsyncCompleted -= new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncStreamExample_GetInformationAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.Uri,System.Boolean,System.Int32,System.Object)">
      <summary>Gets the specific image page information from the specified <see cref="T:System.Uri" /> asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="totalPages">true to query the URI for total number of pages, false otherwise.</param>
      <param name="pageNumber">The page number to query. Pass 1 for the first page (default).</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the specified image. See remarks about the usage of this object.</returns>
      <remarks>
        <para>Specifying true for <paramref name="totalPages" /> can cause the process to be slow for files with large number of
            pages.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>
          <paramref name="userState" /> will be passed to the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">CodecsGetInformationAsyncCompletedEventArgs.UserState</see>
            member of the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted" /> event data.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified rectangle from the specified image file using the specified options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncFile4Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load a random tile from the image at 1 bits/pixel asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile4Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(srcFileName, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncFile4Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile4Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncFile4Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load a random tile from the image at 1 bits/pixel asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile4Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(srcFileName, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncFile4Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile4Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Object)">
      <summary>Loads the specified rectangle from the specified image file using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncFile3Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load a random tile from the image asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile3Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(srcFileName, tileRect, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncFile3Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile3Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncFile3Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load a random tile from the image asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile3Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(srcFileName, tileRect, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncFile3Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile3Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified image file using specific options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncFile2Example()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")

         Dim codecs As New RasterCodecs()

         ' Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile2Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(srcFileName, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncFile2Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile2Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncFile2Example()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");

         RasterCodecs codecs = new RasterCodecs();

         // Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile2Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(srcFileName, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncFile2Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.FileName, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile2Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">
      <summary>Loads the specified image file using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the name of the image file to load.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats|Load|Loading|Loading Images</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncFile1Example()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim codecs As New RasterCodecs()

         ' Now load the image asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile1Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(srcFileName, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncFile1Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.FileName, image.Width, image.Height)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncFile1Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncFile1Example()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         RasterCodecs codecs = new RasterCodecs();

         // Now load the image asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile1Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(srcFileName, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncFile1Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.FileName, image.Width, image.Height);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncFile1Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.IO.Stream,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified rectangle from the specified image stream using the specified options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncStream4Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load a random tile from the image at 1 bits/pixel asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream4Example_LoadAsyncCompleted
         Dim stream As Stream = File.OpenRead(srcFileName)
         Dim rasterImageObject As Object = codecs.LoadAsync(stream, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncStream4Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' We should close the stream here
         e.Stream.Dispose()

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream4Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncStream4Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load a random tile from the image at 1 bits/pixel asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream4Example_LoadAsyncCompleted);
         Stream stream = File.OpenRead(srcFileName);
         object rasterImageObject = codecs.LoadAsync(stream, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncStream4Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // We should close the stream here
         e.Stream.Dispose();

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream4Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.IO.Stream,Leadtools.LeadRect,System.Object)">
      <summary>Loads the specified rectangle from the specified image stream using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image stream (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncStream3Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load a random tile from the image asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream3Example_LoadAsyncCompleted
         Dim stream As Stream = File.OpenRead(srcFileName)
         Dim rasterImageObject As Object = codecs.LoadAsync(stream, tileRect, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncStream3Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' We should close the stream here
         e.Stream.Dispose()

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream3Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncStream3Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load a random tile from the image asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream3Example_LoadAsyncCompleted);
         Stream stream = File.OpenRead(srcFileName);
         object rasterImageObject = codecs.LoadAsync(stream, tileRect, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncStream3Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // We should close the stream here
         e.Stream.Dispose();

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream3Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.IO.Stream,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified image stream using specific options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the stream.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncStream2Example()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")

         Dim codecs As New RasterCodecs()

         ' Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream2Example_LoadAsyncCompleted
         Dim stream As Stream = File.OpenRead(srcFileName)
         Dim rasterImageObject As Object = codecs.LoadAsync(stream, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncStream2Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' We should close the stream here
         e.Stream.Dispose()

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream2Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncStream2Example()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");

         RasterCodecs codecs = new RasterCodecs();

         // Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream2Example_LoadAsyncCompleted);
         Stream stream = File.OpenRead(srcFileName);
         object rasterImageObject = codecs.LoadAsync(stream, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncStream2Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at loaded OK, size: {0} by {1}, order: {2}, bits/pixel: {3}", image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // We should close the stream here
         e.Stream.Dispose();

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream2Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.IO.Stream,System.Object)">
      <summary>Loads the specified image stream using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the image data to load.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The stream can point to any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the stream.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncStream1Example()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim codecs As New RasterCodecs()

         ' Now load the image asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream1Example_LoadAsyncCompleted
         Dim stream As Stream = File.OpenRead(srcFileName)
         Dim rasterImageObject As Object = codecs.LoadAsync(stream, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncStream1Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at loaded OK, size: {0} by {1}", image.Width, image.Height)
            image.Dispose()
         End If

         ' We should close the stream here
         e.Stream.Dispose()

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncStream1Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncStream1Example()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         RasterCodecs codecs = new RasterCodecs();

         // Now load the image asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream1Example_LoadAsyncCompleted);
         Stream stream = File.OpenRead(srcFileName);
         object rasterImageObject = codecs.LoadAsync(stream, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncStream1Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at loaded OK, size: {0} by {1}", image.Width, image.Height);
            image.Dispose();
         }

         // We should close the stream here
         e.Stream.Dispose();

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncStream1Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified rectangle from the specified image URL using the specified options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncUrl3Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         ' Load a random tile from the image at 1 bits/pixel asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl3Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(uri, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncUrl3Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl3Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncUrl3Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         // Load a random tile from the image at 1 bits/pixel asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl3Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(uri, tileRect, 1, CodecsLoadByteOrder.Rgb, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncUrl3Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl3Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Object)">
      <summary>Loads the specified rectangle from the specified image URL using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="tile">A <see cref="T:Leadtools.LeadRect" /> describing the tile/area of the image to load.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <remarks>
        <para>This method loads a section of an image file (any format). The section begins is defined by <paramref name="tile" /> rectangle.</para>
        <para>
        </para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncUrl2Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         ' Load a random tile from the image asynchronously
         Dim tileRect As New LeadRect(100, 50, 200, 150)
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl2Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(uri, tileRect, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncUrl2Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl2Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncUrl2Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         // Load a random tile from the image asynchronously
         LeadRect tileRect = new LeadRect(100, 50, 200, 150);
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl2Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(uri, tileRect, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncUrl2Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl2Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">
      <summary>Loads the specified image URL using specified options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="bitsPerPixel">
        <para>Resulting image pixel depth.  Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>value</term>
              <description>meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Keep the original file's pixel depth (Do not convert).</description>
            </item>
            <item>
              <term>1 to 8</term>
              <description>The specified bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>12</term>
              <description>12 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>16</term>
              <description>16 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>24</term>
              <description>24 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>32</term>
              <description>32 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>48</term>
              <description>48 bits per pixel in the resulting image.</description>
            </item>
            <item>
              <term>64</term>
              <description>64 bits per pixel in the resulting image.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48-, and 64-bit images. If the resulting image is less than 16 bits per pixel, this
            will have no effect since palletized images have no order. The following are valid values.</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Rgb</see>
              </term>
              <description>Red, green, and blue color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Bgr</see>
              </term>
              <description>Blue, green, and red color order in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Gray</see>
              </term>
              <description>12 or 16-bit grayscale image. 12 and 16-bit grayscale images are only supported in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.RgbOrGray</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGray</see>
              </term>
              <description>Load the image as blue, green, red OR as a 12 or 16-bit grayscale image. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.Romm</see>
              </term>
              <description>ROMM order. ROMM only supports 24 and 48-bit images</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadByteOrder">CodecsLoadByteOrder.BgrOrGrayOrRomm</see>
              </term>
              <description>Load the image as red, green, blue OR as a 12 or 16-bit grayscale image OR as ROMM. 12 and 16-bit grayscale
            images are supported in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions only.
            ROMM only supports 24 and 48-bit color images.</description>
            </item>
          </list>
        </para>
      </param>
      <param name="firstPage">1-based index of the first page to load.</param>
      <param name="lastPage">The 1-based index of the last page to load.  Must be greater than or equal to <paramref name="firstPage" />.
            You can pass -1 to load from <paramref name="firstPage" /> to the last page in the file.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <keywords>Multipage File Formats</keywords>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncUrl1Example()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl1Example_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(uri, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncUrl1Example_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncUrl1Example_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncUrl1Example()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // Now load the first page of the image as 24 bits/pixel with order BGR asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl1Example_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(uri, 24, CodecsLoadByteOrder.BgrOrGray, 1, 1, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncUrl1Example_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}, order: {3}, bits/pixel: {4}", e.Uri, image.Width, image.Height, image.Order, image.BitsPerPixel);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncUrl1Example_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">
      <summary>Loads the specified image URL using default options asynchronously. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="T:System.Uri" /> containing the input image data.</param>
      <param name="userState">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
      <returns>The <see cref="T:Leadtools.RasterImage" /> object that this method loads. See remarks for the usage of this object.</returns>
      <remarks>
        <para>The file can be in any supported image file format and bits per pixel, whether compressed or uncompressed.</para>
        <para>This method will load all the pages in a multipage file. The resulting image will have the same bits/pixel and color
            order value of the image as it was stored in the file.</para>
        <para>LEADTOOLS will attempt to load corrupted files, so you can see at least a portion of the image.
            For these images, the load methods succeed, but <see cref="P:Leadtools.Codecs.RasterCodecs.LoadStatus" /> will return an error code.</para>
        <para>Use the <see cref="T:Leadtools.Codecs.CodecsLoadOptions" /> class to set up other load options parameters before calling this
            method.</para>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For supported formats, refer to
            <see cref="T:L.Topics.SummaryOfAllSupportedImageFileFormats">Summary of All Supported Image File Formats</see>.</para>
        <para>LEADTOOLS loads all PDF files as Raster PDF uncompressed
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdf</see>, regardless of the compression and color space used when
            saving the file.</para>
        <para>LEADTOOLS supports the following URI schemes:
            <list type="table"><listheader><term>Scheme</term><description>Description</description></listheader><item><term><see cref="F:System.Uri.UriSchemeFile" /></term><description>Specifies that the URI is a disk file in local machine or universal naming convention (UNC) path.</description></item><item><term><see cref="F:System.Uri.UriSchemeHttp" /></term><description>Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP).</description></item><item><term><see cref="F:System.Uri.UriSchemeHttps" /></term><description>Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS).</description></item><item><term><see cref="F:System.Uri.UriSchemeFtp" /></term><description>Specifies that the URI is accessed through the File Transfer Protocol (FTP).</description></item></list></para>
        <para>If <paramref name="uri" /> points to a resource in a <see cref="F:System.Uri.UriSchemeHttp" />, <see cref="F:System.Uri.UriSchemeHttps" /> or
            <see cref="F:System.Uri.UriSchemeFtp" />, then this <see cref="T:Leadtools.Codecs.RasterCodecs" /> will attempt to download image data in an iterative fashion by
            creating a temporary buffer. The size of this buffer can be determined and changed by setting up the
            <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> prior to calling this method.</para>
        <para>For authentical and proxy settings, refer to <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> and <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading and Saving Large Tiff Files</seealso>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <seealso cref="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">Fast File Info</seealso>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">
      <summary>Gets information for a page in a raster PDF file created with the LEADTOOLS Raster PDF plug in. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">The input PDF file.</param>
      <param name="pageNumber">The 1-based page number.</param>
      <returns>An instance of <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> containing information for the raster PDF page.</returns>
      <remarks>
        <para>The various <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> methods are used to return information
            about a raster image file on disk or stream. The information such as the format, size, dimension, bits per pixel are returned as member
            of the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see>.</para>
        <para>Raster Adobe PDF saved with the various <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> methods (using any of the
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see> flavors), contain extra information that can be obtained using
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">RasterCodecs.GetRasterPdfInfo</see>. This method return an instance of
            <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> filled with these extra information. Refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> for more information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.IO.Stream,System.Int32)">
      <summary>Gets information for a page in a raster PDF file contained in a stream created with the LEADTOOLS Raster PDF plug in. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="stream">The input PDF stream.</param>
      <param name="pageNumber">The 1-based page number.</param>
      <returns>An instance of <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> containing information for the raster PDF page.</returns>
      <remarks>
        <para>The various <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> methods are used to return information
            about a raster image file on disk or stream. The information such as the format, size, dimension, bits per pixel are returned as member
            of the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see>.</para>
        <para>Raster Adobe PDF saved with the various <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> methods (using any of the
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see> flavors), contain extra information that can be obtained using
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">RasterCodecs.GetRasterPdfInfo</see>. This method return an instance of
            <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> filled with these extra information. Refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> for more information.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.FastFileInfo">
      <summary>Enables or disables fast file info processing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>True to enable fast file info processing; false to disable it.</value>
      <remarks>
        <para>This property causes the LEADTOOLS File Information and Load methods to only check the file’s signature when trying to determine the file’s format.</para>
        <para>The default behavior when calling LEADTOOLS File Information and Load methods, is that if the file’s signature does not match one of the known file format 
            signatures, then LEADTOOLS will allow each of the available file format filters a chance to properly identify the file’s format.  
            This can both slow down an application and unnecessarily use up system resources if the application attempts to load files of an unsupported format (i.e. non-image files).</para>
        <para>When Fast File Info is enabled, the file will be rejected if the signature does not match one of the known file format signatures. As a result the file format dlls will not be loaded or called unnecessarily.</para>
        <para>You must enable this feature prior to calling any LEADTOOLS File Information or Load and Save methods.</para>
        <para>The default value is false.</para>
      </remarks>
      <noexample />
      <seealso cref="T:L.Topics.LoadingFileFilters">Loading File Codecs</seealso>
      <seealso cref="T:L.Topics.LoadingAndSavingImages">Loading and Saving Images</seealso>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.PreloadCodecsList">
      <summary>Gets the current preload codecs list. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current preload codecs list.</value>
      <remarks>
        <para>Use this property before calling <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" /> if you wish to get the current setting for the preload
            codecs list before changing it.</para>
        <para>The preload codecs list contains the list of fixed and cached codecs.</para>
        <para>The fixed codec count can be obtained from <see cref="P:Leadtools.Codecs.RasterCodecs.FixedPreloadCodecs" />.</para>
        <para>The cached codec count can be obtained from <see cref="P:Leadtools.Codecs.RasterCodecs.CachedPreloadCodecs" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.LoadingFileFilters">Loading File Codecs</seealso>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.FixedPreloadCodecs">
      <summary>Gets the current setting for the fixed preload codecs count. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current setting for the fixed preload codecs count.</value>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.CachedPreloadCodecs">
      <summary>Gets the current setting for the cached preload codecs count. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current setting for the cached preload codecs count.</value>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.IgnoreCodecsList">
      <summary>Gets the current ignore codecs list. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current ignore codecs list.</value>
      <remarks>
            Use this property before calling <see cref="M:Leadtools.Codecs.RasterCodecs.IgnoreCodecs(System.String)" /> if you wish to get the current setting for the ignore
            codecs list before changing it.
            </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.IgnoreCodecs(System.String)" />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.Options">
      <summary>Gets or sets the load and save options for this <see cref="T:Leadtools.Codecs.RasterCodecs" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The load and save options for this <see cref="T:Leadtools.Codecs.RasterCodecs" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class lets you set different options when loading and saving image files.</para>
        <para>These options are categorized into groups corresponding to the image format they are applied to.</para>
        <para>Some of the options are "global", for example, overriding the resolution of the file to load.</para>
        <para>You manipulate the options of a certain format through the embedded classes inside the <see cref="P:Leadtools.Codecs.RasterCodecs.Options" /> 
            property of this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object.  For example, to disable MMX when loading JPEG options,
            you would do:</para>
        <para>
          <code>
            rasterCodecsObject.Options.Jpeg.Load.DisableMmx = true;
            </code>
        </para>
        <para>Alternatively, you can obtain an instance of the correct options, manipulate the values before setting it back
            as follows:</para>
        <para>
          <code>
            CodecsOptions options = rasterCodecsObject.Options;
            options.Jpeg.Load.DisableMmx = true;
            rasterCodecsObject.Options = options;
            </code>
        </para>
        <para>You can access the various options with the following properties:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Class</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsLoadOptions" />
              </term>
              <description>Global load options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Load">CodecsOptions.Load</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSaveOptions" />
              </term>
              <description>Global save options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Save">CodecsOptions.Save</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />
              </term>
              <description>LEAD Advanced Bitonal Compression (ABC) options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Abc">CodecsOptions.Abc</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />
              </term>
              <description>ECW format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Ecw">CodecsOptions.Ecw</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsEpsOptions" />
              </term>
              <description>EPS format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Eps">CodecsOptions.Eps</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsFpxOptions" />
              </term>
              <description>FPX (FlashPix) format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Fpx">CodecsOptions.Fpx</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsGifOptions" />
              </term>
              <description>GIF format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Gif">CodecsOptions.Gif</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsJbigOptions" />
              </term>
              <description>JBIG format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Jbig">CodecsOptions.Jbig</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsJbig2Options" />
              </term>
              <description>JBIG2 format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Jbig2">CodecsOptions.Jbig2</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />
              </term>
              <description>JPEG and LEAD CMP Compressed format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Jpeg">CodecsOptions.Jpeg</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsJpeg2000Options" />
              </term>
              <description>JPEG 2000 and LEAD CMW Compressed format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Jpeg2000">CodecsOptions.Jpeg2000</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPcdOptions" />
              </term>
              <description>PCD format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Pcd">CodecsOptions.Pcd</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />
              </term>
              <description>PDF format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Pdf">CodecsOptions.Pdf</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPngOptions" />
              </term>
              <description>PNG format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Png">CodecsOptions.Png</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsPtokaOptions" />
              </term>
              <description>PTOKA format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Ptoka">CodecsOptions.Ptoka</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsRawOptions" />
              </term>
              <description>RAW format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Raw">CodecsOptions.Raw</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsRtfOptions" />
              </term>
              <description>RTF format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Rtf">CodecsOptions.Rtf</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />
              </term>
              <description>TIFF format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Tiff">CodecsOptions.Tiff</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />
              </term>
              <description>TEXT format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Txt">CodecsOptions.Txt</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsWmfOptions" />
              </term>
              <description>WMF format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Wmf">CodecsOptions.Wmf</see> property.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsXpsOptions" />
              </term>
              <description>XPS format options. Accessed through the <see cref="P:Leadtools.Codecs.CodecsOptions.Xps">CodecsOptions.Xps</see> property.</description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.RasterCodecs" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.ThrowExceptionsOnInvalidImages">
      <summary>Gets or sets a value indicating whether to throw an exception instead of returning a null reference (Nothing in Visual Basic)
            on certain methods of this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A value indicating whether to throw an exception instead of returning a null reference (Nothing in Visual Basic)
            on certain methods of this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object.
            </value>
      <remarks>
        <para>Some of the methods of this <see cref="T:Leadtools.Codecs.RasterCodecs" /> class will return an object when called.  For example, the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods will return the <see cref="T:Leadtools.RasterImage" /> object created.  If the value of
            <see cref="P:Leadtools.Codecs.RasterCodecs.ThrowExceptionsOnInvalidImages" /> is set to true, then when the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods
            encounters an error and cannot return a valud image, it will throw an appropriate exception.</para>
        <para>Set <see cref="P:Leadtools.Codecs.RasterCodecs.ThrowExceptionsOnInvalidImages" /> to false to cause the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods to
            return a null reference (Nothing in Visual Basic) instead when it encounters an error and cannot return a valud image</para>
        <para>The following methods will either throw an exception or return a null reference (Nothing in Visual Basic)
            depending on the setting of the <see cref="P:Leadtools.Codecs.RasterCodecs.ThrowExceptionsOnInvalidImages" /> property.</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.String)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadThumbnail(System.String,Leadtools.Codecs.CodecsThumbnailOptions,System.Int32)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadStamp(System.String,System.Int32)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.String,System.Int32,System.Int32)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadGeoKey(System.String,System.Int32,System.Int32)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadComment(System.String,System.Int32,Leadtools.RasterCommentMetadataType)" />
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.Codecs.RasterCodecs.ReadExtensions(System.String,System.Int32)" />
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.TagsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.CommentsSupported(Leadtools.RasterImageFormat)" />
      <seealso cref="M:Leadtools.Codecs.RasterCodecs.GeoKeysSupported(Leadtools.RasterImageFormat)" />
      <example>
        <para />
        <code lang="VB">      Public Sub ThrowExceptionsOnInvalidImagesExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' enable codec exceptions
         codecs.ThrowExceptionsOnInvalidImages = True
         Try
            Dim image As RasterImage = codecs.Load("some non-image file")
         Catch
            Console.WriteLine("exception caught - sample sucess")
         End Try

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void ThrowExceptionsOnInvalidImagesExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // enable codec exceptions
         codecs.ThrowExceptionsOnInvalidImages = true;
         try
         {
            RasterImage image = codecs.Load("some non-image file");
         }
         catch
         {
            Console.WriteLine("exception caught - sample sucess");
         }

         // Clean up
         codecs.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      public void ThrowExceptionsOnInvalidImagesExample(Stream inStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // enable codec exceptions
         codecs.ThrowExceptionsOnInvalidImages = true;
         try
         {
            RasterImage image = codecs.Load(inStream); //some non-image file
         }
         catch
         {
            Debug.WriteLine("exception caught - sample sucess");
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub ThrowExceptionsOnInvalidImagesExample(ByVal inStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' enable codec exceptions
         codecs.ThrowExceptionsOnInvalidImages = True
         Try
            Dim image As RasterImage = codecs.Load(inStream) 'some non-image file
         Catch
            Debug.WriteLine("exception caught - sample sucess")
         End Try
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize">
      <summary>Gets or sets the size of the buffer used in URI-based load or information operations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A value specifying the size of the buffer (in bytes) used in streaming operations.
            The value should be greater or equal to 1. Default value is 4096.</value>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationBufferSize" /> property is used to determine the size of the temporary buffer used
            when streaming image file data using any of the URI-based load or information operations.</para>
        <para>The following methods will use use the value of this property internally to allocate the temporary buffer:
            <list type="bullet"><item><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean)">GetInformation(Uri, bool)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)">GetInformation(Uri, bool, int)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri)">Load(Uri)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">Load(Uri, int, CodecsLoadByteOrder, int, int)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">LoadAsync(Uri uri, object userState)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Object)">LoadAsync(Uri uri, LeadRect tile, object userState)</see></item><item><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, LeadRect tile, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></item></list></para>
        <para>The default size of the buffer is 4096 (4 KBytes). This means that the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will try to load the
            image data in 4 KBytes chunks of data.</para>
        <para>Increasing the buffer size might enhance the performance while also increasing the amount of memory resources used.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri)" />.</example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.RedirectOpen">
      <summary>Replaces the normal Leadtools method for opening a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can redirect all the toolkit I/O methods to your own I/O methods to load/save images from your own streams.</para>
        <para>To replace the normal method for opening a file, set your own subscribe to this event then call
            the <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /></example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.RedirectRead">
      <summary>Replaces the normal LEADTOOLS method for reading from a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can redirect all the toolkit I/O methods to your own I/O methods to load/save images from your own streams.</para>
        <para>To replace the normal method for reading from a file, set your own subscribe to this event then call
            the <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /></example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.RedirectWrite">
      <summary>Replaces the normal LEADTOOLS method for writing to a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can redirect all the toolkit I/O methods to your own I/O methods to load/save images from your own streams.</para>
        <para>To replace the normal method for writing to a file, set your own subscribe to this event then call
            the <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /></example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.RedirectSeek">
      <summary>Replaces the normal LEADTOOLS method for seeking into a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can redirect all the toolkit I/O methods to your own I/O methods to load/save images from your own streams.</para>
        <para>To replace the normal method for seeking into file, set your own subscribe to this event then call
            the <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /></example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.RedirectClose">
      <summary>Replaces the normal LEADTOOLS method for closing a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>You can redirect all the toolkit I/O methods to your own I/O methods to load/save images from your own streams.</para>
        <para>To replace the normal method for closing a file, set your own subscribe to this event then call
            the <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting" /></example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.LoadInformation">
      <summary>Occurs during loading of a file for which LEADTOOLS cannot recognize the format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadInformation" /> event will occur when LEADTOOLS cannot recognize the image file format during a call to
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" />. This event can be used for loading raw FAX data (CCITT Group 3 or Group 4), raw
            run-length-encoded data (4-bit or 8-bit), raw Bitfield compressed data, raw PackBits compressed data or raw uncompressed
            data.</para>
        <para>To load a raw fax file, you must subscribe to this event first. When the toolkit fails to recognize the image
            file format, it will fire this event. If you know the size of the fax image, then set the values in the
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Width">CodecsLoadInformationEventArgs.Width</see> and
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Height">CodecsLoadInformationEventArgs.Height</see> properties of the 
            <see cref="T:Leadtools.Codecs.CodecsLoadInformationEventArgs" /> passed as the event data. To automatically detect the width and height of the fax
            file, set <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Width">CodecsLoadInformationEventArgs.Width</see> and
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Height">CodecsLoadInformationEventArgs.Height</see> to -1.</para>
        <para>To load raw uncompressed data, you must subscribe to this event first. When the toolkit fails to recognize the image
            file format, it will fire this event. Set the
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Format">CodecsLoadInformationEventArgs.Format</see> property to 
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Raw</see>. Valid values must also be set for the following properties:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Width">CodecsLoadInformationEventArgs.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Height">CodecsLoadInformationEventArgs.Height</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.BitsPerPixel">CodecsLoadInformationEventArgs.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Offset">CodecsLoadInformationEventArgs.Offset</see> (byte location in file where raw data begins)</description>
            </item>
          </list>
        </para>
        <para>If each line of RAW data is padded so that the number of bytes is a multiple of 4 (as is the case with raw
            Windows BMP data), set
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Pad4">CodecsLoadInformationEventArgs.Pad4</see> to true. Include an orientation
            in the <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.ViewPerspective">CodecsLoadInformationEventArgs.ViewPerspective</see> to
            load with the proper orientation. For example, raw Windows BMP data is stored with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see> orientation. If the orientation is
            unknown, then set it to <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see>. If the raw
            data is 8 bits per pixel or less, then the image is palettized and a palette must be generated. If this is the case,
            pass in a valid palette with <c>1 &gt;gt; bits/pixel</c> number of entries to the
            <see cref="M:Leadtools.Codecs.CodecsLoadInformationEventArgs.SetPalette(Leadtools.RasterColor[])">CodecsLoadInformationEventArgs.SetPalette</see> method.</para>
        <para>Set the correct color order in the
            <see cref="P:Leadtools.Codecs.CodecsLoadInformationEventArgs.Order">CodecsLoadInformationEventArgs.Order</see> property.  For example, if the
            order of the data is BGR, then set this value to <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Codecs.CodecsLoadInformationEventArgs" />.</para>
      </remarks>
      <example>
        <para>This example demonstrates saving and loading raw/headerless image files.</para>
        <code lang="VB">      Private Structure RawData
         Public Width As Integer ' Width of image
         Public Height As Integer ' Height of image
         Public BitsPerPixel As Integer ' Bits per pixel of image--if palettized, a gray palette is generated
         Public ViewPerspective As RasterViewPerspective ' View perspective of raw data (TopLeft, BottomLeft, etc)
         Public Order As RasterByteOrder ' Rgb or Bgr
         Public XResolution As Integer ' Horizontal resolution in DPI
         Public YResolution As Integer ' Vertical resolution in DPI
         Public Offset As Integer ' Offset into file where raw data begins
         Public Padding As Boolean ' true if each line of data is padded to four bytes
         Public ReverseBits As Boolean ' true if the bits of each byte are reversed
      End Structure
      Private myRawData As RawData

      Private Sub codecs_LoadInformation(ByVal sender As Object, ByVal e As CodecsLoadInformationEventArgs)
         ' Set the information
         e.Format = RasterImageFormat.Raw
         e.Width = myRawData.Width
         e.Height = myRawData.Height
         e.BitsPerPixel = myRawData.BitsPerPixel
         e.XResolution = myRawData.XResolution
         e.YResolution = myRawData.YResolution
         e.Offset = myRawData.Offset

         If myRawData.Padding Then
            e.Pad4 = True
         End If

         e.Order = myRawData.Order

         If myRawData.ReverseBits Then
            e.LeastSignificantBitFirst = True
         End If

         e.ViewPerspective = myRawData.ViewPerspective

         ' If image is palettized create a grayscale palette
         If e.BitsPerPixel &lt;= 8 Then
            Dim colors As Integer = 1 &lt;&lt; e.BitsPerPixel
            Dim palette As RasterColor() = New RasterColor(colors - 1) {}
            Dim i As Integer = 0
            Do While i &lt; palette.Length
               Dim val As Byte = CByte((i * 255) / (colors - 1))
               palette(i) = New RasterColor(val, val, val)
               i += 1
            Loop

            e.SetPalette(palette)
         End If
      End Sub


      Public Sub LoadInformationExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' First, load a JPEG or CMP file
         Dim srcFilename As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim rawFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.raw")
         Dim image As RasterImage = codecs.Load(srcFilename)

         ' Save this image as RAW data

         ' Set RAW options
         codecs.Options.Raw.Save.Pad4 = True
         codecs.Options.Raw.Save.ReverseBits = True
         codecs.Options.Save.OptimizedPalette = True

         codecs.Save(image, rawFileName, RasterImageFormat.Raw, 0)

         ' Save information about this image so we can use it to load the RAW file
         myRawData = New RawData()
         myRawData.Width = image.Width
         myRawData.Height = image.Height
         myRawData.BitsPerPixel = image.BitsPerPixel
         myRawData.ViewPerspective = image.ViewPerspective
         myRawData.Order = image.Order
         myRawData.XResolution = image.XResolution
         myRawData.YResolution = image.YResolution
         myRawData.Offset = 0
         myRawData.Padding = True
         myRawData.ReverseBits = True

         ' We dont need the image anymore
         image.Dispose()

         ' Now load this RAW image back

         ' First subscribe to the LoadInformation event so we can set the image information
         AddHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Load the image
         image = codecs.Load(rawFileName)

         ' Unsubscribe from the event
         RemoveHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' save it as bmp for testing
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_raw.bmp"), RasterImageFormat.Bmp, 0)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private struct RawData
      {
         public int Width;                               // Width of image
         public int Height;                              // Height of image
         public int BitsPerPixel;                        // Bits per pixel of image--if palettized, a gray palette is generated
         public RasterViewPerspective ViewPerspective;   // View perspective of raw data (TopLeft, BottomLeft, etc)
         public RasterByteOrder Order;                   // Rgb or Bgr
         public int XResolution;                         // Horizontal resolution in DPI
         public int YResolution;                         // Vertical resolution in DPI
         public int Offset;                              // Offset into file where raw data begins
         public bool Padding;                            // true if each line of data is padded to four bytes
         public bool ReverseBits;                        // true if the bits of each byte are reversed 
      }
      private RawData myRawData;

      private void codecs_LoadInformation(object sender, CodecsLoadInformationEventArgs e)
      {
         // Set the information
         e.Format = RasterImageFormat.Raw;
         e.Width = myRawData.Width;
         e.Height = myRawData.Height;
         e.BitsPerPixel = myRawData.BitsPerPixel;
         e.XResolution = myRawData.XResolution;
         e.YResolution = myRawData.YResolution;
         e.Offset = myRawData.Offset;

         if(myRawData.Padding)
            e.Pad4 = true;

         e.Order = myRawData.Order;

         if(myRawData.ReverseBits)
            e.LeastSignificantBitFirst = true;

         e.ViewPerspective = myRawData.ViewPerspective;

         // If image is palettized create a grayscale palette
         if(e.BitsPerPixel &lt;= 8)
         {
            int colors = 1 &lt;&lt; e.BitsPerPixel;
            RasterColor[] palette = new RasterColor[colors];
            for(int i = 0; i &lt; palette.Length; i++)
            {
               byte val = (byte)((i * 255) / (colors - 1));
               palette[i] = new RasterColor(val, val, val);
            }

            e.SetPalette(palette);
         }
      }


      public void LoadInformationExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // First, load a JPEG or CMP file
         string srcFilename = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string rawFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.raw");
         RasterImage image = codecs.Load(srcFilename);

         // Save this image as RAW data

         // Set RAW options
         codecs.Options.Raw.Save.Pad4 = true;
         codecs.Options.Raw.Save.ReverseBits = true;
         codecs.Options.Save.OptimizedPalette = true;

         codecs.Save(image, rawFileName, RasterImageFormat.Raw, 0);

         // Save information about this image so we can use it to load the RAW file
         myRawData = new RawData();
         myRawData.Width = image.Width;
         myRawData.Height = image.Height;
         myRawData.BitsPerPixel = image.BitsPerPixel;
         myRawData.ViewPerspective = image.ViewPerspective;
         myRawData.Order = image.Order;
         myRawData.XResolution = image.XResolution;
         myRawData.YResolution = image.YResolution;
         myRawData.Offset = 0;
         myRawData.Padding = true;
         myRawData.ReverseBits = true;

         // We dont need the image anymore
         image.Dispose();

         // Now load this RAW image back

         // First subscribe to the LoadInformation event so we can set the image information
         codecs.LoadInformation += new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Load the image
         image = codecs.Load(rawFileName);

         // Unsubscribe from the event
         codecs.LoadInformation -= new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // save it as bmp for testing
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_raw.bmp"), RasterImageFormat.Bmp, 0);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private struct RawData
      {
         public int Width;                               // Width of image
         public int Height;                              // Height of image
         public int BitsPerPixel;                        // Bits per pixel of image--if palettized, a gray palette is generated
         public RasterViewPerspective ViewPerspective;   // View perspective of raw data (TopLeft, BottomLeft, etc)
         public RasterByteOrder Order;                   // Rgb or Bgr
         public int XResolution;                         // Horizontal resolution in DPI
         public int YResolution;                         // Vertical resolution in DPI
         public int Offset;                              // Offset into file where raw data begins
         public bool Padding;                            // true if each line of data is padded to four bytes
         public bool ReverseBits;                        // true if the bits of each byte are reversed 
      }
      private RawData myRawData;

      private void codecs_LoadInformation(object sender, CodecsLoadInformationEventArgs e)
      {
         // Set the information
         e.Format = RasterImageFormat.Raw;
         e.Width = myRawData.Width;
         e.Height = myRawData.Height;
         e.BitsPerPixel = myRawData.BitsPerPixel;
         e.XResolution = myRawData.XResolution;
         e.YResolution = myRawData.YResolution;
         e.Offset = myRawData.Offset;

         if(myRawData.Padding)
            e.Pad4 = true;

         e.Order = myRawData.Order;

         if(myRawData.ReverseBits)
            e.LeastSignificantBitFirst = true;

         e.ViewPerspective = myRawData.ViewPerspective;

         // If image is palettized create a grayscale palette
         if(e.BitsPerPixel &lt;= 8)
         {
            int colors = 1 &lt;&lt; e.BitsPerPixel;
            RasterColor[] palette = new RasterColor[colors];
            for(int i = 0; i &lt; palette.Length; i++)
            {
               byte val = (byte)((i * 255) / (colors - 1));
               palette[i] = new RasterColor(val, val, val);
            }

            e.SetPalette(palette);
         }
      }

      public void LoadInformationExample(Stream inStreamCmp, Stream outStreamRaw, Stream outStreamBmp)
      {
         RasterCodecs codecs = new RasterCodecs();

         // First, load a JPEG or CMP file
         RasterImage image = codecs.Load(inStreamCmp);

         // Save this image as RAW data

         // Set RAW options
         codecs.Options.Raw.Save.Pad4 = true;
         codecs.Options.Raw.Save.ReverseBits = true;
         codecs.Options.Save.OptimizedPalette = true;

         codecs.Save(image, outStreamRaw, RasterImageFormat.Raw, 0);

         // Save information about this image so we can use it to load the RAW file
         myRawData = new RawData();
         myRawData.Width = image.Width;
         myRawData.Height = image.Height;
         myRawData.BitsPerPixel = image.BitsPerPixel;
         myRawData.ViewPerspective = image.ViewPerspective;
         myRawData.Order = image.Order;
         myRawData.XResolution = image.XResolution;
         myRawData.YResolution = image.YResolution;
         myRawData.Offset = 0;
         myRawData.Padding = true;
         myRawData.ReverseBits = true;

         // We dont need the image anymore
         image.Dispose();

         // Now load this RAW image back

         // First subscribe to the LoadInformation event so we can set the image information
         codecs.LoadInformation += new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Load the image
         image = codecs.Load(outStreamRaw);

         // Unsubscribe from the event
         codecs.LoadInformation -= new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // save it as bmp for testing
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 0);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Structure RawData
         Public Width As Integer ' Width of image
         Public Height As Integer ' Height of image
         Public BitsPerPixel As Integer ' Bits per pixel of image--if palettized, a gray palette is generated
         Public ViewPerspective As RasterViewPerspective ' View perspective of raw data (TopLeft, BottomLeft, etc)
         Public Order As RasterByteOrder ' Rgb or Bgr
         Public XResolution As Integer ' Horizontal resolution in DPI
         Public YResolution As Integer ' Vertical resolution in DPI
         Public Offset As Integer ' Offset into file where raw data begins
         Public Padding As Boolean ' true if each line of data is padded to four bytes
         Public ReverseBits As Boolean ' true if the bits of each byte are reversed
      End Structure
      Private myRawData As RawData

      Private Sub codecs_LoadInformation(ByVal sender As Object, ByVal e As CodecsLoadInformationEventArgs)
         ' Set the information
         e.Format = RasterImageFormat.Raw
         e.Width = myRawData.Width
         e.Height = myRawData.Height
         e.BitsPerPixel = myRawData.BitsPerPixel
         e.XResolution = myRawData.XResolution
         e.YResolution = myRawData.YResolution
         e.Offset = myRawData.Offset

         If myRawData.Padding Then
            e.Pad4 = True
         End If

         e.Order = myRawData.Order

         If myRawData.ReverseBits Then
            e.LeastSignificantBitFirst = True
         End If

         e.ViewPerspective = myRawData.ViewPerspective

         ' If image is palettized create a grayscale palette
         If e.BitsPerPixel &lt;= 8 Then
            Dim colors As Integer = 1 &lt;&lt; e.BitsPerPixel
            Dim palette As RasterColor() = New RasterColor(colors - 1){}
            Dim i As Integer = 0
            Do While i &lt; palette.Length
               Dim val As Byte = CByte((i * 255) / (colors - 1))
               palette(i) = New RasterColor(val, val, val)
               i += 1
            Loop

            e.SetPalette(palette)
         End If
      End Sub

      Public Sub LoadInformationExample(ByVal inStreamCmp As Stream, ByVal outStreamRaw As Stream, ByVal outStreamBmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' First, load a JPEG or CMP file
         Dim image As RasterImage = codecs.Load(inStreamCmp)

         ' Save this image as RAW data

         ' Set RAW options
         codecs.Options.Raw.Save.Pad4 = True
         codecs.Options.Raw.Save.ReverseBits = True
         codecs.Options.Save.OptimizedPalette = True

         codecs.Save(image, outStreamRaw, RasterImageFormat.Raw, 0)

         ' Save information about this image so we can use it to load the RAW file
         myRawData = New RawData()
         myRawData.Width = image.Width
         myRawData.Height = image.Height
         myRawData.BitsPerPixel = image.BitsPerPixel
         myRawData.ViewPerspective = image.ViewPerspective
         myRawData.Order = image.Order
         myRawData.XResolution = image.XResolution
         myRawData.YResolution = image.YResolution
         myRawData.Offset = 0
         myRawData.Padding = True
         myRawData.ReverseBits = True

         ' We dont need the image anymore
         image.Dispose()

         ' Now load this RAW image back

         ' First subscribe to the LoadInformation event so we can set the image information
         AddHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Load the image
         image = codecs.Load(outStreamRaw)

         ' Unsubscribe from the event
         RemoveHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' save it as bmp for testing
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, 0)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.LoadPage">
      <summary>Occurs once for each page loaded from an image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            This event will fire once for each page loaded with any of the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods.  You can use this event to get
            information about the image pages being loaded or to skip loading certain pages.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub Codecs_LoadSavePage(ByVal sender As Object, ByVal e As CodecsPageEventArgs)
         If e.State = CodecsPageEventState.After Then
            Console.WriteLine("The image has been processed")
         Else
            Console.WriteLine("The image has not processed yet")
         End If
         If e.Page &gt; 5 Then
            e.Command = CodecsPageEventCommand.Stop
         End If

         Console.WriteLine("File name is: {0}", e.FileName)
         If Not e.Image Is Nothing Then
            Console.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height)
         End If
         Console.WriteLine("Page Index is: {0}", e.Page)
         Console.WriteLine("Page Count is: {0}", e.PageCount)
      End Sub


      Public Sub LoadPageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         AddHandler codecs.LoadPage, AddressOf Codecs_LoadSavePage
         AddHandler codecs.SavePage, AddressOf Codecs_LoadSavePage

         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "loadsave.jpg"), RasterImageFormat.Jpeg, image.BitsPerPixel)

         RemoveHandler codecs.LoadPage, AddressOf Codecs_LoadSavePage
         RemoveHandler codecs.SavePage, AddressOf Codecs_LoadSavePage

         ' Clean up
         codecs.Dispose()
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void Codecs_LoadSavePage(object sender, CodecsPageEventArgs e)
      {
         if(e.State == CodecsPageEventState.After)
            Console.WriteLine("The image has been processed");
         else
            Console.WriteLine("The image has not processed yet");
         if(e.Page &gt; 5)
            e.Command = CodecsPageEventCommand.Stop;

         Console.WriteLine("File name is: {0}", e.FileName);
         if(e.Image != null)
            Console.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height);
         Console.WriteLine("Page Index is: {0}", e.Page);
         Console.WriteLine("Page Count is: {0}", e.PageCount);
      }

      public void LoadPageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.LoadPage += new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);
         codecs.SavePage += new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);

         RasterImage image = codecs.Load( Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "loadsave.jpg"), RasterImageFormat.Jpeg, image.BitsPerPixel);

         codecs.LoadPage -= new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);
         codecs.SavePage -= new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);

         // Clean up
         codecs.Dispose();
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void Codecs_LoadSavePage(object sender, CodecsPageEventArgs e)
      {
         if(e.State == CodecsPageEventState.After)
            Debug.WriteLine("The image has been processed");
         else
            Debug.WriteLine("The image has not processed yet");
         if(e.Page &gt; 5)
            e.Command = CodecsPageEventCommand.Stop;

         Debug.WriteLine("File name is: {0}", e.FileName);
         if(e.Image != null)
            Debug.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height);
         Debug.WriteLine("Page Index is: {0}", e.Page);
         Debug.WriteLine("Page Count is: {0}", e.PageCount);
      }

      public void LoadPageExample(Stream inStream, Stream outStream)
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.LoadPage += new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);
         codecs.SavePage += new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);

         RasterImage image = codecs.Load(inStream);

         codecs.Save(image, outStream, RasterImageFormat.Jpeg, image.BitsPerPixel);

         codecs.LoadPage -= new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);
         codecs.SavePage -= new EventHandler&lt;CodecsPageEventArgs&gt;(Codecs_LoadSavePage);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Sub Codecs_LoadSavePage(ByVal sender As Object, ByVal e As CodecsPageEventArgs)
         If e.State = CodecsPageEventState.After Then
            Debug.WriteLine("The image has been processed")
         Else
            Debug.WriteLine("The image has not processed yet")
         End If
         If e.Page &gt; 5 Then
            e.Command = CodecsPageEventCommand.Stop
         End If

         Debug.WriteLine("File name is: {0}", e.FileName)
         If Not e.Image Is Nothing Then
            Debug.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height)
         End If
         Debug.WriteLine("Page Index is: {0}", e.Page)
         Debug.WriteLine("Page Count is: {0}", e.PageCount)
      End Sub

      Public Sub LoadPageExample(ByVal inStream As Stream, ByVal outStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         AddHandler codecs.LoadPage, AddressOf Codecs_LoadSavePage
         AddHandler codecs.SavePage, AddressOf Codecs_LoadSavePage

         Dim image As RasterImage = codecs.Load(inStream)

         codecs.Save(image, outStream, RasterImageFormat.Jpeg, image.BitsPerPixel)

         RemoveHandler codecs.LoadPage, AddressOf Codecs_LoadSavePage
         RemoveHandler codecs.SavePage, AddressOf Codecs_LoadSavePage

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.LoadImage">
      <summary>Occurs during the file load process to provide functionality for manually handling the output image data or monitoring a
            progress status. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            This event will fire during loading images with the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods.  You can use this event to get
            information about the image being loaded, manually handle the image scanline data or provide a progress status as well
            as to abort the load operation.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub Codecs_LoadImage(ByVal sender As Object, ByVal e As CodecsLoadImageEventArgs)
         e.Cancel = True
         ' get all properties for the CodecsLoadImageEventArgs class.
         Console.WriteLine("File name is: {0}", e.FileName)
         Console.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height)
         Console.WriteLine("The Length of the buffer is: {0}", e.Buffer.Length)
         Console.WriteLine("The current row in the first line of the buffer is: {0}", e.Row)

         If e.OffsetValid Then
            Console.WriteLine("Offset count is : {0}", e.OffsetCount)
            Console.WriteLine("Offset value is : {0}", e.Offset)
         End If

         If e.TileValid Then
            Dim rect As LeadRect = e.Tile
            Console.WriteLine("Tile Dimension ({0},{1},{2},{3)}", rect.X, rect.Y, rect.Width, rect.Height)
         End If


         Console.WriteLine("Image p number: {0}", e.ImagePage)
         Console.WriteLine("First page number: {0}", e.FirstPage)
         Console.WriteLine("Current page number: {0}", e.Page)
         Console.WriteLine("Last page number: {0}", e.LastPage)
         Console.WriteLine("Page percent: {0}%", e.PagePercent)
         Console.WriteLine("Total percent: {0}%", e.TotalPercent)
         Console.WriteLine("Flags = {0}", e.Flags)

         Dim loadStream As System.IO.Stream = e.Stream
         Dim info As CodecsImageInfo = e.Info
         e.Cancel = False
      End Sub


      Public Sub LoadImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         AddHandler codecs.LoadImage, AddressOf Codecs_LoadImage
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))
         RemoveHandler codecs.LoadImage, AddressOf Codecs_LoadImage

         ' Clean up
         codecs.Dispose()
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void Codecs_LoadImage(object sender, CodecsLoadImageEventArgs e)
      {
         e.Cancel = true;
         // get all properties for the CodecsLoadImageEventArgs class.
         Console.WriteLine("File name is: {0}", e.FileName);
         Console.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height);
         Console.WriteLine("The Length of the buffer is: {0}", e.Buffer.Length);
         Console.WriteLine("The current row in the first line of the buffer is: {0}", e.Row);

         if(e.OffsetValid)
         {
            Console.WriteLine("Offset count is : {0}", e.OffsetCount);
            Console.WriteLine("Offset value is : {0}", e.Offset);
         }

         if(e.TileValid)
         {
            LeadRect rect = e.Tile;
            Console.WriteLine("Tile Dimension ({0},{1},{2},{3)}", rect.X, rect.Y, rect.Width, rect.Height);
         }

         Console.WriteLine("Image p number: {0}", e.ImagePage);
         Console.WriteLine("First page number: {0}", e.FirstPage);
         Console.WriteLine("Current page number: {0}", e.Page);
         Console.WriteLine("Last page number: {0}", e.LastPage);
         Console.WriteLine("Page percent: {0}%", e.PagePercent);
         Console.WriteLine("Total percent: {0}%", e.TotalPercent);
         Console.WriteLine("Flags = {0}", e.Flags);

         System.IO.Stream loadStream = e.Stream;
         CodecsImageInfo info = e.Info;
         e.Cancel = false;
      }


      public void LoadImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.LoadImage += new EventHandler&lt;CodecsLoadImageEventArgs&gt;(Codecs_LoadImage);
         RasterImage image = codecs.Load( Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));
         codecs.LoadImage -= new EventHandler&lt;CodecsLoadImageEventArgs&gt;(Codecs_LoadImage);

         // Clean up
         codecs.Dispose();
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void Codecs_LoadImage(object sender, CodecsLoadImageEventArgs e)
      {
         e.Cancel = true;
         if (e.Buffer.Length != 0)
         {
            // get all properties for the CodecsLoadImageEventArgs class.
            Debug.WriteLine("File name is: {0}", e.FileName);
            Debug.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height);
            Debug.WriteLine("The Length of the buffer is: {0}", e.Buffer.Length);
            Debug.WriteLine("The current row in the first line of the buffer is: {0}", e.Row);
            if(e.TileValid)
            {
               LeadRect rect = e.Tile;
               Debug.WriteLine("Tile Dimension ({0},{1},{2},{3)}", rect.X, rect.Y, rect.Width, rect.Height);
            }

            Debug.WriteLine("Page Index is: {0}", e.Page);
            Debug.WriteLine("Page Count is: {0}", e.LastPage);
            Debug.WriteLine("Image Page Index is: {0}", e.ImagePage);
            Debug.WriteLine("Flags = {0}", e.Flags);

            System.IO.Stream loadStream = e.Stream;
            CodecsImageInfo info = e.Info;
            e.Cancel = false;
         }
      }

      public void LoadImageExample(Stream inStream)
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.LoadImage += new EventHandler&lt;CodecsLoadImageEventArgs&gt;(Codecs_LoadImage);
         RasterImage image = codecs.Load(inStream);
         codecs.LoadImage -= new EventHandler&lt;CodecsLoadImageEventArgs&gt;(Codecs_LoadImage);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Sub Codecs_LoadImage(ByVal sender As Object, ByVal e As CodecsLoadImageEventArgs)
         e.Cancel = True
         If e.Buffer.Length &lt;&gt; 0 Then
            ' get all properties for the CodecsLoadImageEventArgs class.
            Debug.WriteLine("File name is: {0}", e.FileName)
            Debug.WriteLine("The Image width and height is: {0},{1}", e.Image.Width, e.Image.Height)
            Debug.WriteLine("The Length of the buffer is: {0}", e.Buffer.Length)
            Debug.WriteLine("The current row in the first line of the buffer is: {0}", e.Row)
            If e.TileValid Then
               Dim rect As LeadRect = e.Tile
               Debug.WriteLine("Tile Dimension ({0},{1},{2},{3)}", rect.X, rect.Y, rect.Width, rect.Height)
            End If

            Debug.WriteLine("Page Index is: {0}", e.Page)
            Debug.WriteLine("Page Count is: {0}", e.LastPage)
            Debug.WriteLine("Image Page Index is: {0}", e.ImagePage)
            Debug.WriteLine("Flags = {0}", e.Flags)

            Dim loadStream As System.IO.Stream = e.Stream
            Dim info As CodecsImageInfo = e.Info
            e.Cancel = False
         End If
      End Sub

      Public Sub LoadImageExample(ByVal inStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         AddHandler codecs.LoadImage, AddressOf Codecs_LoadImage
         Dim image As RasterImage = codecs.Load(inStream)
         RemoveHandler codecs.LoadImage, AddressOf Codecs_LoadImage

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.SavePage">
      <summary>Occurs once for each page saved to an image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            This event will fire once for each page save with any of the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> methods.  You can use this event to get
            information about the image pages being saved or to skip saving certain pages.
            </remarks>
      <example>
        <para>This example will use the SavePage event to skip a certain page when saving a multipage file</para>
        <code lang="VB">      Public Sub SavePageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye_SavePage.gif")

         ' Load all the pages in the file
         Dim image As RasterImage = codecs.Load(srcFileName)
         Console.WriteLine("Original image has {0} pages", image.PageCount)

         ' Add a handler to the SavePage event
         AddHandler codecs.SavePage, AddressOf codecs_SavePage

         ' Save all the pages of this file
         codecs.Save(image, destFileName, RasterImageFormat.Gif, 0, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         RemoveHandler codecs.SavePage, AddressOf codecs_SavePage

         ' Check if we saved all pages but 1
         Dim info As CodecsImageInfo = codecs.GetInformation(destFileName, True)
         Console.WriteLine("Info reports {0} pages saved to the file", info.TotalPages)
         Debug.Assert(info.TotalPages = (image.PageCount - 1))

         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_SavePage(ByVal sender As Object, ByVal e As CodecsPageEventArgs)
         If e.State = CodecsPageEventState.Before AndAlso e.Page = 1 Then
            ' Before saving the first page, show the save operation information
            Console.WriteLine("Saving {0} pages to {1}.  Image size is {2} by {3}", e.PageCount - 1, e.FileName, e.Image.Width, e.Image.Height)
         End If

         If e.State = CodecsPageEventState.After Then
            Console.WriteLine("{0} saving page {1}:{2}", "After", e.Page, e.PageCount)
         Else
            Console.WriteLine("{0} saving page {1}:{2}", "Before", e.Page, e.PageCount)
         End If

         ' If this is the 2nd page, ignore it
         If e.Page = 2 AndAlso e.State = CodecsPageEventState.Before Then
            e.Command = CodecsPageEventCommand.Skip
            Console.WriteLine("--- Skipping this page, there should be no 'After' for this one")
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SavePageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye_SavePage.gif");

         // Load all the pages in the file
         RasterImage image = codecs.Load(srcFileName);
         Console.WriteLine("Original image has {0} pages", image.PageCount);

         // Add a handler to the SavePage event
         codecs.SavePage += new EventHandler&lt;CodecsPageEventArgs&gt;(codecs_SavePage);

         // Save all the pages of this file
         codecs.Save(image, destFileName, RasterImageFormat.Gif, 0, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         codecs.SavePage -= new EventHandler&lt;CodecsPageEventArgs&gt;(codecs_SavePage);

         // Check if we saved all pages but 1
         CodecsImageInfo info = codecs.GetInformation(destFileName, true);
         Console.WriteLine("Info reports {0} pages saved to the file", info.TotalPages);
         Debug.Assert(info.TotalPages == (image.PageCount - 1));

         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

      void codecs_SavePage(object sender, CodecsPageEventArgs e)
      {
         if(e.State == CodecsPageEventState.Before &amp;&amp; e.Page == 1)
         {
            // Before saving the first page, show the save operation information
            Console.WriteLine(
               "Saving {0} pages to {1}.  Image size is {2} by {3}",
               e.PageCount - 1, e.FileName, e.Image.Width, e.Image.Height);
         }

         Console.WriteLine("{0} saving page {1}:{2}",
            e.State == CodecsPageEventState.After ? "After" : "Before",
            e.Page, e.PageCount);

         // If this is the 2nd page, ignore it
         if(e.Page == 2 &amp;&amp; e.State == CodecsPageEventState.Before)
         {
            e.Command = CodecsPageEventCommand.Skip;
            Console.WriteLine("--- Skipping this page, there should be no 'After' for this one");
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SavePageExample(Stream inStreamGif, Stream outStreamGif)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load all the pages in the file
         RasterImage image = codecs.Load(inStreamGif);
         Debug.WriteLine("Original image has {0} pages", image.PageCount);

         // Add a handler to the SavePage event
         codecs.SavePage += new EventHandler&lt;CodecsPageEventArgs&gt;(codecs_SavePage);

         // Save all the pages of this file
         codecs.Save(image, outStreamGif, RasterImageFormat.Gif, 0, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         codecs.SavePage -= new EventHandler&lt;CodecsPageEventArgs&gt;(codecs_SavePage);

         // Check if we saved all pages but 1
         CodecsImageInfo info = codecs.GetInformation(outStreamGif, true);
         Debug.WriteLine("Info reports {0} pages saved to the file", info.TotalPages);
         Debug.Assert(info.TotalPages == (image.PageCount - 1));

         image.Dispose();
      }

      void codecs_SavePage(object sender, CodecsPageEventArgs e)
      {
         if(e.State == CodecsPageEventState.Before &amp;&amp; e.Page == 1)
         {
            // Before saving the first page, show the save operation information
            Debug.WriteLine(
               "Saving {0} pages to {1}.  Image size is {2} by {3}",
               e.PageCount - 1, e.FileName, e.Image.Width, e.Image.Height);
         }

         Debug.WriteLine("{0} saving page {1}:{2}",
            e.State == CodecsPageEventState.After ? "After" : "Before",
            e.Page, e.PageCount);

         // If this is the 2nd page, ignore it
         if(e.Page == 2 &amp;&amp; e.State == CodecsPageEventState.Before)
         {
            e.Command = CodecsPageEventCommand.Skip;
            Debug.WriteLine("--- Skipping this page, there should be no 'After' for this one");
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub SavePageExample(ByVal inStreamGif As Stream, ByVal outStreamGif As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load all the pages in the file
         Dim image As RasterImage = codecs.Load(inStreamGif)
         Debug.WriteLine("Original image has {0} pages", image.PageCount)

         ' Add a handler to the SavePage event
         AddHandler codecs.SavePage, AddressOf codecs_SavePage

         ' Save all the pages of this file
         codecs.Save(image, outStreamGif, RasterImageFormat.Gif, 0, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         RemoveHandler codecs.SavePage, AddressOf codecs_SavePage

         ' Check if we saved all pages but 1
         Dim info As CodecsImageInfo = codecs.GetInformation(outStreamGif, True)
         Debug.WriteLine("Info reports {0} pages saved to the file", info.TotalPages)
         Debug.Assert(info.TotalPages = (image.PageCount - 1))

         image.Dispose()
      End Sub

      Private Sub codecs_SavePage(ByVal sender As Object, ByVal e As CodecsPageEventArgs)
         If e.State = CodecsPageEventState.Before AndAlso e.Page = 1 Then
            ' Before saving the first page, show the save operation information
            Debug.WriteLine("Saving {0} pages to {1}.  Image size is {2} by {3}", e.PageCount - 1, e.FileName, e.Image.Width, e.Image.Height)
         End If

         If e.State = CodecsPageEventState.After Then
            Debug.WriteLine("{0} saving page {1}:{2}","After", e.Page, e.PageCount)
         Else
            Debug.WriteLine("{0} saving page {1}:{2}","Before", e.Page, e.PageCount)
         End If

         ' If this is the 2nd page, ignore it
         If e.Page = 2 AndAlso e.State = CodecsPageEventState.Before Then
            e.Command = CodecsPageEventCommand.Skip
            Debug.WriteLine("--- Skipping this page, there should be no 'After' for this one")
         End If
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.SaveImage">
      <summary>Occurs during the file save process to provide functionality for manually handling the output image data or monitoring a
            progress status. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>
            This event will fire during saving images with the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> methods. If you use this event, you must copy the image 
            data to the provided event buffer.
            </para>
        <para>
            You can also use this event to get information about the image being saved, provide a progress status, and/or abort the save 
            operation. For information on how to use this event as a progress status monitor, refer to
            <see cref="P:Leadtools.Codecs.CodecsSaveOptions.RetrieveDataFromImage">CodecsSaveOptions.RetrieveDataFromImage</see> and <see cref="T:Leadtools.Codecs.CodecsSaveImageEventArgs" />.
            </para>
      </remarks>
      <example>
        <para>This example will double the density of an image as it is being saved.</para>
        <code lang="VB">      Public Sub SaveImageExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveImage.cmp")

         ' Load the source file (make sure to load as 24 bits/pixel)
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)

         ' Instruct RasterCodecs to generate the saved scanlines data for us to manipulate
         codecs.Options.Save.RetrieveDataFromImage = True

         ' Add a handler to the SaveImage event
         AddHandler codecs.SaveImage, AddressOf codecs_SaveImage

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Cmp, 24)

         RemoveHandler codecs.SaveImage, AddressOf codecs_SaveImage

         image.Dispose()

         ' Clean up
         codecs.Dispose()
      End Sub

      Private Sub codecs_SaveImage(ByVal sender As Object, ByVal e As CodecsSaveImageEventArgs)
         ' This example works with images saved as 24-bit per pixel only
         Debug.Assert(e.Image.BitsPerPixel = 24)

         If e.Row = 0 Then
            ' Show information about the image being saved
            Console.WriteLine("Saving an image with {0} bpp to {1}", e.Image.BitsPerPixel, e.FileName)
            Console.WriteLine("Offset: {0}, OffsetValid: {1}", e.Offset, e.OffsetValid)
            Console.WriteLine("Page: {0} of {1}", e.Page, e.LastPage - e.FirstPage + 1)
            Console.WriteLine("Page percent: {0}%, Total percent: {1}%", e.PagePercent, e.TotalPercent)
         End If

         Console.WriteLine("Row: {0}, Lines {1}", e.Row, e.Lines)

         ' Get the scanlines from the image
         Dim scanlineLength As Integer = e.Image.BytesPerLine
         Dim scanline(scanlineLength - 1) As Byte

         ' Loop through all the scanlines in the data
         For y As Integer = 0 To e.Lines - 1
            ' Get this row
            e.Buffer.GetData(y * scanlineLength, scanline, 0, scanlineLength)

            ' We got the data, now double the intensity
            ' Remember, this is 24-bits/pixel
            For x As Integer = 0 To scanlineLength - 1
               scanline(x) = CType(scanline(x) * 2, Byte)
            Next

            ' Copy it back to the event buffer
            e.Buffer.SetData(y * scanlineLength, scanline, 0, scanlineLength)
         Next
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SaveImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_SaveImage.cmp");

         // Load the source file (make sure to load as 24 bits/pixel)
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);

         // Instruct RasterCodecs to generate the saved scanlines data for us to manipulate
         codecs.Options.Save.RetrieveDataFromImage = true;

         // Add a handler to the SaveImage event
         codecs.SaveImage += new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Cmp, 24);

         codecs.SaveImage -= new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);

         image.Dispose();

         // Clean up
         codecs.Dispose();
      }

      private void codecs_SaveImage(object sender, CodecsSaveImageEventArgs e)
      {
         // This example works with images saved as 24-bit per pixel only
         Debug.Assert(e.Image.BitsPerPixel == 24);

         if(e.Row == 0)
         {
            // Show information about the image being saved
            Console.WriteLine("Saving an image with {0} bpp to {1}", e.Image.BitsPerPixel, e.FileName);
            Console.WriteLine("Offset: {0}, OffsetValid: {1}", e.Offset, e.OffsetValid);
            Console.WriteLine("Page: {0} of {1}", e.Page, e.LastPage - e.FirstPage + 1);
            Console.WriteLine("Page percent: {0}%, Total percent: {1}%", e.PagePercent, e.TotalPercent);
         }

         Console.WriteLine("Row: {0}, Lines {1}", e.Row, e.Lines);

         // Get the scanlines from the image
         int scanlineLength = e.Image.BytesPerLine;
         byte[] scanline = new byte[scanlineLength];

         // Loop through all the scanlines in the data
         for(int y = 0; y &lt; e.Lines; y++)
         {
            // Get this row
            e.Buffer.GetData(y * scanlineLength, scanline, 0, scanlineLength);

            // We got the data, now double the intensity
            // Remember, this is 24-bits/pixel
            for(int x = 0; x &lt; scanlineLength; x++)
            {
               scanline[x] *= 2;
            }

            // Copy it back to the event buffer
            e.Buffer.SetData(y * scanlineLength, scanline, 0, scanlineLength);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SaveImageExample(Stream inStreamCmp, Stream outStreamCmp)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the source file (make sure to load as 24 bits/pixel)
         RasterImage image = codecs.Load(inStreamCmp, 24, CodecsLoadByteOrder.Bgr, 1, 1);

         // Add a handler to the SaveImage event
         codecs.SaveImage += new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);

         // Save the image
         codecs.Save(image, outStreamCmp, RasterImageFormat.Cmp, 24);

         codecs.SaveImage -= new EventHandler&lt;CodecsSaveImageEventArgs&gt;(codecs_SaveImage);

         image.Dispose();
      }

      byte[] _saveImageScanLine;

      void codecs_SaveImage(object sender, CodecsSaveImageEventArgs e)
      {
         if (e.Row == 0)
         {
            // Show information about the image being saved
            Console.WriteLine("Saving an image with {0} bpp to {1}", e.Image.BitsPerPixel, e.FileName);
            //Console.WriteLine("Offset: {0}, OffsetValid: {1}", e.Offset, e.OffsetValid);
            Console.WriteLine("Page: {0} of {1}", e.Page, e.PageCount);
         }

         Console.WriteLine("Row: {0}, Lines {1}", e.Row, e.Lines);

         // Get the scanlines from the image
         int lastRow = e.Row + e.Lines;
         int bytesPerLine = e.Image.BytesPerLine;
         RasterNativeBuffer buffer = e.Buffer;

         // See if we need to re-allocate the managed buffer
         if (_saveImageScanLine == null || _saveImageScanLine.Length &lt; bytesPerLine)
            _saveImageScanLine = new byte[bytesPerLine];

         long offset = 0;
         for (int y = e.Row; y &lt; lastRow; y++)
         {
            // Get the row into the managed buffer
            e.Image.Access();
            e.Image.GetRow(y, _saveImageScanLine, 0, bytesPerLine);
            e.Image.Release();

            // We got the data, now double the intensity
            // Remember, this is 24-bits/pixel
            for (int x = 0; x &lt; bytesPerLine; x++)
               _saveImageScanLine[x] *= 2;

            // Copy the data into the buffer
            buffer.SetData(offset, _saveImageScanLine, 0, bytesPerLine);

            // Move the pointer to the position in the buffer for the next row
            offset += bytesPerLine;
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub SaveImageExample(ByVal inStreamCmp As Stream, ByVal outStreamCmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the source file (make sure to load as 24 bits/pixel)
         Dim image As RasterImage = codecs.Load(inStreamCmp, 24, CodecsLoadByteOrder.Bgr, 1, 1)

         ' Add a handler to the SaveImage event
         AddHandler codecs.SaveImage, AddressOf codecs_SaveImage

         ' Save the image
         codecs.Save(image, outStreamCmp, RasterImageFormat.Cmp, 24)

         RemoveHandler codecs.SaveImage, AddressOf codecs_SaveImage

         image.Dispose()
      End Sub

      Private _saveImageScanLine As Byte()

      Private Sub codecs_SaveImage(ByVal sender As Object, ByVal e As CodecsSaveImageEventArgs)
         If e.Row = 0 Then
            ' Show information about the image being saved
            Console.WriteLine("Saving an image with {0} bpp to {1}", e.Image.BitsPerPixel, e.FileName)
            'Console.WriteLine("Offset: {0}, OffsetValid: {1}", e.Offset, e.OffsetValid);
            Console.WriteLine("Page: {0} of {1}", e.Page, e.PageCount)
         End If

         Console.WriteLine("Row: {0}, Lines {1}", e.Row, e.Lines)

         ' Get the scanlines from the image
         Dim lastRow As Integer = e.Row + e.Lines
         Dim bytesPerLine As Integer = e.Image.BytesPerLine
         Dim buffer As RasterNativeBuffer = e.Buffer

         ' See if we need to re-allocate the managed buffer
         If _saveImageScanLine Is Nothing OrElse _saveImageScanLine.Length &lt; bytesPerLine Then
            _saveImageScanLine = New Byte(bytesPerLine - 1){}
         End If

         Dim offset As Long = 0
         Dim y As Integer = e.Row
         Do While y &lt; lastRow
            ' Get the row into the managed buffer
            e.Image.Access()
            e.Image.GetRow(y, _saveImageScanLine, 0, bytesPerLine)
            e.Image.Release()

            ' We got the data, now double the intensity
            ' Remember, this is 24-bits/pixel
            Dim x As Integer = 0
            Do While x &lt; bytesPerLine
               _saveImageScanLine(x) *= 2
               x += 1
            Loop

            ' Copy the data into the buffer
            buffer.SetData(offset, _saveImageScanLine, 0, bytesPerLine)

            ' Move the pointer to the position in the buffer for the next row
            offset += bytesPerLine
            y += 1
         Loop
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.IsFeedLoadDone">
      <summary>Determines if the feed-load process is done. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the feed-load process is done, otherwise; false.</value>
      <remarks>
            Checking the value of <see cref="P:Leadtools.Codecs.RasterCodecs.IsFeedLoadDone" /> is useful to exit out of the feed-load process when sufficient data has been collected
            to load all the pages requested.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartFeedLoad(System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)" />.
            </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.TagFound">
      <summary>Occurs during the TIFF tag enumerated by the <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This event will fire for each tag found in the file as a result of calling <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</para>
        <para>Do not attempt to use <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)" /> to delete tags from inside this event. If you want to delete tags that
            you enumerate, use this event to add the tags to a list. Upon returning from <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />, you can delete all the
            tags from the list.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.String,System.Int32)" />.</example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">
      <summary>Occurs once for each GeoKey enumerated by the <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This event will fire for each GeoKey found in the file as a result of calling <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</para>
        <para>Do not attempt to use <see cref="M:Leadtools.Codecs.RasterCodecs.DeleteTag(System.String,System.Int32,System.Int32)" /> to delete tags from inside this event. If you want to delete tags that
            you enumerate, use this event to add the tags to a list. Upon returning from <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />, you can delete all
            the tags from the list.</para>
      </remarks>
      <example>Refer to <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.String,System.Int32)" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.LoadStatus">
      <summary>Gets a value that allows the detection of whether the image was loaded with errors. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>A <see cref="T:Leadtools.RasterExceptionCode" /> which indicates the result of the most recent load operation.</para>
        <para>The most common return values are:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Meaning</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.Success</see>
            </term>
            <description>The image loaded by the last load call does not have any errors.</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.CompressedDataFailure</see>
            </term>
            <description>There were errors decoding the last image. The bottom part of the image might be corrupted.</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.BadResyncMarker</see>
            </term>
            <description>Some of the resync markers were incorrect or missing while decoding the last
                  image. Resync markers are used by JPEG files to recover from decoding errors. Portions of
                  the image are corrupted. They are indicated by a checkerboard pattern.</description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.FileRead</see>
            </term>
            <description>The file was truncated. The bottom part of the image is missing.</description>
          </item>
        </list>
      </value>
      <remarks>
        <para>An error return code is a warning that portions of the image that was last loaded might be corrupted.</para>
        <para>This property should be called after a load method has been sucessfully called. This value is reset after each page
            is loaded, so if you are loading multiple pages, this error code is valid only for the last page.</para>
        <para>If the last load method threw an exception, then this method should not be used, as its return value is undefined.</para>
        <para>Note that this property is valid for the current thread. So it should be used in the same thread as the load method.</para>
        <para>This is valid for all the methods that will load an image, including <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" />, <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.FeedLoad(System.Byte[],System.Int32,System.Int32)" />.</para>
      </remarks>
      <example>
        <para>This example will load an image and checks whether the image has corrupted areas</para>
        <code lang="VB">      Private Sub LoadStatusExample(ByVal fileName As String)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Try
            Dim image As RasterImage = codecs.Load(fileName, 0, CodecsLoadByteOrder.Bgr, 1, 1)
            Dim loadStatusCode As RasterExceptionCode = codecs.LoadStatus
            If loadStatusCode = RasterExceptionCode.Success Then
               Console.WriteLine("The image was loaded successfully and with no errors")
            Else
               Console.WriteLine("The image was loaded, but it might have corrupted areas, error = {0}", loadStatusCode)
            End If

            image.Dispose()
         Catch ex As RasterException
            Console.WriteLine("LEADTOOLS could not load this image, error code is is '{0}', message is '{1}'", ex.Code, ex.Message)
         End Try

         ' Clean up
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      void LoadStatusExample(string fileName)
      {
         RasterCodecs codecs = new RasterCodecs();
         try
         {
            RasterImage image = codecs.Load(fileName, 0, CodecsLoadByteOrder.Bgr, 1, 1);
            RasterExceptionCode loadStatusCode = codecs.LoadStatus;
            if(loadStatusCode == RasterExceptionCode.Success)
               Console.WriteLine("The image was loaded successfully and with no errors");
            else
               Console.WriteLine("The image was loaded, but it might have corrupted areas, error = {0}", loadStatusCode);

            image.Dispose();
         }
         catch(RasterException ex)
         {
            Console.WriteLine("LEADTOOLS could not load this image, error code is is '{0}', message is '{1}'", ex.Code, ex.Message);
         }

         // Clean up
         codecs.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      void LoadStatusExample(Stream inStreamCorrupted)
      {
         RasterCodecs codecs = new RasterCodecs();
         try
         {
            RasterImage image = codecs.Load(inStreamCorrupted, 0, CodecsLoadByteOrder.Bgr, 1, 1);
            RasterExceptionCode loadStatusCode = codecs.LoadStatus;
            if(loadStatusCode == RasterExceptionCode.Success)
               Debug.WriteLine("The image was loaded successfully and with no errors");
            else
               Debug.WriteLine("The image was loaded, but it might have corrupted areas, error = {0}", loadStatusCode);

            image.Dispose();
         }
         catch(RasterException ex)
         {
            Debug.WriteLine("LEADTOOLS could not load this image, error code is is '{0}', message is '{1}'", ex.Code, ex.Message);
         }
      }</code>
        <code lang="SilverlightVB">      Private Sub LoadStatusExample(ByVal inStreamCorrupted As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Try
            Dim image As RasterImage = codecs.Load(inStreamCorrupted, 0, CodecsLoadByteOrder.Bgr, 1, 1)
            Dim loadStatusCode As RasterExceptionCode = codecs.LoadStatus
            If loadStatusCode = RasterExceptionCode.Success Then
               Debug.WriteLine("The image was loaded successfully and with no errors")
            Else
               Debug.WriteLine("The image was loaded, but it might have corrupted areas, error = {0}", loadStatusCode)
            End If

            image.Dispose()
         Catch ex As RasterException
            Debug.WriteLine("LEADTOOLS could not load this image, error code is is '{0}', message is '{1}'", ex.Code, ex.Message)
         End Try
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.LoadThenResize">
      <summary>Gets or sets a value that determine whether this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object should load the image entirely before resizing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to load the image entirely before resizing, <strong>false</strong>, otherwise. The default value is <strong>false</strong>.</value>
      <remarks>
        <para>
          <strong>Note:</strong> The restriction on using portions of LEADTOOLS inside ASP.NET applications has been removed starting with LEADTOOLS 16.5.</para>
        <para>
            The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object has the following methods that allows you to resize an image while it is being loaded:
            <list type="bullet"><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder)">Load(string fileName, int width, int height, int bitsPerPixel, RasterSizeFlags flags, CodecsLoadByteOrder order)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String,System.Int32,System.Int32,System.Int32,Leadtools.RasterSizeFlags,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">Load(string fileName, int width, int height, int bitsPerPixel, RasterSizeFlags flags, CodecsLoadByteOrder order, int firstPage, int lastPage)</see></description></item></list></para>
        <para>This method works by resizing the image while it is being loaded using an internal thread. To disable this behavior, you can set the value of the
            <see cref="P:Leadtools.Codecs.RasterCodecs.LoadThenResize" /> property to <strong>true</strong> to completely load an image before resizing it.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials">
      <summary>Gets or sets authentication information used with URI-based operations <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An <see cref="T:System.Net.ICredentials" /> that contains the authentication credentials used with URI-based operations. The default is a null reference (<strong>Nothing</strong> in Visual Basic).
            </value>
      <remarks>
        <para>The <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> is used to authenticate the required access to a remote resource.</para>
        <para>To override the default credentials to use when accessing a remote resource, you must change the value of the <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> property
            prior to calling any of these methods:
            <list type="bullet"><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean)">GetInformation(Uri uri, bool totalPages)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)">GetInformation(Uri uri, bool totalPages, int pageNumber)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.Uri,System.Boolean,System.Int32,System.Object)">GetInformation(Uri uri, bool totalPages, int pageNumber, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri)">Load(Uri uri)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">Load(Uri uri, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">LoadAsync(Uri uri, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Object)">LoadAsync(Uri uri, LeadRect tile, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, LeadRect tile, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel, int firstPage, int lastPage)</see></description></item></list></para>
        <para>To change the proxy information to use when accessing a remote resource, use the <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" /> property.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel, int firstPage, int lastPage)</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy">
      <summary>Gets or sets proxy information used with URI-based operations <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            The <see cref="T:System.Net.IWebProxy" /> object to use to proxy URI-based operation. The default is a null reference (<strong>Nothing</strong> in Visual Basic).
            </value>
      <remarks>
        <para>The <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" /> property identifies the <see cref="T:System.Net.WebProxy" /> object to use to process requests to Internet resources.</para>
        <para>To override the default proxy to use when accessing a remote resource, you must change the value of the <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationProxy" /> property
            prior to calling any of these methods:
            <list type="bullet"><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean)">GetInformation(Uri uri, bool totalPages)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)">GetInformation(Uri uri, bool totalPages, int pageNumber)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.Uri,System.Boolean,System.Int32,System.Object)">GetInformation(Uri uri, bool totalPages, int pageNumber, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri)">Load(Uri uri)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">Load(Uri uri, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">LoadAsync(Uri uri, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Object)">LoadAsync(Uri uri, LeadRect tile, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync(Uri uri, LeadRect tile, int bitsPerPixel, CodecsLoadByteOrder order, int firstPage, int lastPage, object userState)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel)</see></description></item><item><description><see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel, int firstPage, int lastPage)</see></description></item></list></para>
        <para>To change the authentication information to use when accessing a remote resource, use the <see cref="P:Leadtools.Codecs.RasterCodecs.UriOperationCredentials" /> property.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">Save(RasterImage image, Uri uri, RasterImageFormat format, int bitsPerPixel, int firstPage, int lastPage)</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient">
      <summary>Gets the <see cref="T:System.Net.WebClient" /> object used for asynchronous operations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.Net.WebClient" /> object that will be used for asynchronous operations.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object supports getting information and loading image files asnchronously through the use of the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods. These methods will use an internal <see cref="T:System.Net.WebClient" /> object to perform
            their operations and this object will be created automatically on the first call to these methods and can be accessed through the
            <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" /> property.</para>
        <para>If it is desired to create the <see cref="T:System.Net.WebClient" /> object manually (for example, to subscribe to any of its event or set the
            credentials prior to invoking any read operations), you can call <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" /> to create the object, change its behavior and then call
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" />.</para>
        <para>
          <strong>Note:</strong>
          <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" />, <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />, <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" />, and <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> are only applicable
            when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> was with the versions that take a <see cref="T:System.Uri" /> parameter. The versions
            thet take a <see cref="T:System.String" /> or a <see cref="T:System.IO.Stream" /> does not use a <see cref="T:System.Net.WebClient" /> object internally. If you want to check the progress
            or cancel the operation then use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event as normal.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy">
      <summary>Gets a value that determines whether this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is currently busy with an asynchronous operation on a URL. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is currently busy with an asynchronous operation on a URL, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object supports getting information and loading image files asnchronously through the use of the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods.</para>
        <para>You can call one asyncronous operation per <see cref="T:Leadtools.Codecs.RasterCodecs" /> object at a time. To check if the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is
            busy with a previous asynchronous operation, use <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" /> property. This is the equivalant of the <see cref="P:System.Net.WebClient.IsBusy">WebClient.IsBusy</see> property of <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />.</para>
        <para>You can also use the <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> method to cancel any current asynchronous operation in this <see cref="T:Leadtools.Codecs.RasterCodecs" /> object. This
            is the equivalant of calling <see cref="M:System.Net.WebClient.CancelAsync">WebClient.CancelAsync</see> on <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />.</para>
        <para>
          <strong>Note:</strong>
          <see cref="M:Leadtools.Codecs.RasterCodecs.UseAsync" />, <see cref="P:Leadtools.Codecs.RasterCodecs.AsyncWebClient" />, <see cref="P:Leadtools.Codecs.RasterCodecs.IsAsyncBusy" />, and <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" /> are only applicable
            when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> was with the versions that take a <see cref="T:System.Uri" /> parameter. The versions
            thet take a <see cref="T:System.String" /> or a <see cref="T:System.IO.Stream" /> does not use a <see cref="T:System.Net.WebClient" /> object internally. If you want to check the progress
            or cancel the operation then use the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage" /> event as normal.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync" />.</example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">
      <summary>Indicates that an asynchronous get information operation has been completed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event use data argument object of
            type <see cref="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs" />. This class contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Property</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri">CodecsGetInformationAsyncCompletedEventArgs.Uri</see>, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream">CodecsGetInformationAsyncCompletedEventArgs.Stream</see> and
                 <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName">CodecsGetInformationAsyncCompletedEventArgs.FileName</see></term>
            <description>
              <para>Contains the URI, stream or file name passed to the method that initialized this asynchronous operation.</para>
              <para>Only one of these properties can be a valid value (not a null reference) at any time The property that contains a valid reference depends on what
            version of <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> method has been called.</para>
              <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.Uri,System.Boolean,System.Int32,System.Object)">GetInformationAsync(Uri uri, bool totalPages, int pageNumberobject, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method while
            <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync(string fileName, bool totalPages, int pageNumberobject, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">CodecsGetInformationAsyncCompletedEventArgs.Info</see>
            </term>
            <description>
              <para>Contains the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> class instance that contains the information about the image file. This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">GetInformationAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the information and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">Info</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">CodecsGetInformationAsyncCompletedEventArgs.Error</see>
            </term>
            <description>
              <para>Contains any errors that might have occured during the asynchronous operation. You musg check this value when the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">GetInformationAsyncCompleted</see> event fires and make sure it does not
            contain a valid <see cref="T:System.Exception" /> object.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">CodecsGetInformationAsyncCompletedEventArgs.Cancelled</see>
            </term>
            <description>
              <para>Contains a value indicating whether an asynchronous operation has been canceled. For example, by calling <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync">CancelAsync</see> when using <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> with a URL.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetInformationAsyncCompletedExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' Now get information about the file asynchronously
         AddHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncCompletedExample_GetInformationAsyncCompleted
         Dim imageInfoObject As Object = codecs.GetInformationAsync(uri, True, 1, Nothing)

         ' Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         ' fires.
      End Sub

      Private Sub GetInformationAsyncCompletedExample_GetInformationAsyncCompleted(ByVal sender As Object, ByVal e As CodecsGetInformationAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Get the image info
            Dim info As CodecsImageInfo = DirectCast(e.Info, CodecsImageInfo)
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString())
            info.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.GetInformationAsyncCompleted, AddressOf GetInformationAsyncCompletedExample_GetInformationAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetInformationAsyncCompletedExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // Now get information about the file asynchronously
         codecs.GetInformationAsyncCompleted += new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncCompletedExample_GetInformationAsyncCompleted);
         object imageInfoObject = codecs.GetInformationAsync(uri, true, 1, null);

         // Notice that the returned imageInfoObject is a CodecsImageInfo with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the GetInformationAsyncCompleted
         // fires.
      }

      private void GetInformationAsyncCompletedExample_GetInformationAsyncCompleted(object sender, CodecsGetInformationAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Get the image info
            CodecsImageInfo info = e.Info;
            Console.WriteLine("Image info obtainted asynchronously:\n{0}", info.ToString());
            info.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.GetInformationAsyncCompleted -= new EventHandler&lt;CodecsGetInformationAsyncCompletedEventArgs&gt;(GetInformationAsyncCompletedExample_GetInformationAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">
      <summary>Indicates that an asynchronous load operation has been completed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event use data argument object of
            type <see cref="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs" />. This class contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Property</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri">CodecsLoadAsyncCompletedEventArgs.Uri</see>, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream">CodecsLoadAsyncCompletedEventArgs.Stream</see> and
                 <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName">CodecsLoadAsyncCompletedEventArgs.FileName</see></term>
            <description>
              <para>Contains the URI, stream or file name passed to the method that initialized this asynchronous operation.</para>
              <para>Only one of these properties can be a valid value (not a null reference) at any time The property that contains a valid reference depends on what
            version of <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> method has been called.</para>
              <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">LoadAsync(Uri uri, object userState)</see> is being called, the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If 
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">LoadAsync(String fileName, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">CodecsLoadAsyncCompletedEventArgs.Image</see>
            </term>
            <description>
              <para>Contains the <see cref="T:Leadtools.RasterImage" /> class instance that contains the image data being loaded. This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">LoadAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the image information and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">Image</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">CodecsLoadAsyncCompletedEventArgs.Error</see>
            </term>
            <description>
              <para>Contains any errors that might have occured during the asynchronous operation. You musg check this value when the
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">LoadAsyncCompleted</see> event fires and make sure it does not
            contain a valid <see cref="T:System.Exception" /> object.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">CodecsLoadAsyncCompletedEventArgs.Cancelled</see>
            </term>
            <description>
              <para>Contains a value indicating whether an asynchronous operation has been canceled. For example, by calling <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync">CancelAsync</see> when using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> with a URL.</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub LoadAsyncCompletedExample()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim uri As New Uri(srcFileName)

         Dim codecs As New RasterCodecs()

         ' Now load the image asynchronously
         AddHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncCompletedExample_LoadAsyncCompleted
         Dim rasterImageObject As Object = codecs.LoadAsync(uri, Nothing)

         ' Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         ' The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         ' fires.
      End Sub

      Private Sub LoadAsyncCompletedExample_LoadAsyncCompleted(ByVal sender As Object, ByVal e As CodecsLoadAsyncCompletedEventArgs)
         If e.Cancelled Then
            Console.WriteLine("User canceled")
         ElseIf Not IsNothing(e.Error) Then
            Console.WriteLine("Error: " + e.Error.Message)
         Else
            ' Everything is OK, get the image
            Dim image As RasterImage = e.Image
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.Uri, image.Width, image.Height)
            image.Dispose()
         End If

         ' Unsubscribe to the event and dispose the RasterCodecs object
         Dim codecs As RasterCodecs = DirectCast(sender, RasterCodecs)
         RemoveHandler codecs.LoadAsyncCompleted, AddressOf LoadAsyncCompletedExample_LoadAsyncCompleted
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void LoadAsyncCompletedExample()
      {
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         Uri uri = new Uri(srcFileName);

         RasterCodecs codecs = new RasterCodecs();

         // Now load the image asynchronously
         codecs.LoadAsyncCompleted += new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncCompletedExample_LoadAsyncCompleted);
         object rasterImageObject = codecs.LoadAsync(uri, null);

         // Notice that the returned rasterImageObject is a RasterImage with IsLoading set to true at this point
         // The IsLoading will be false (and hence, the object will be usable) when the LoadAsyncCompleteted
         // fires.
      }

      private void LoadAsyncCompletedExample_LoadAsyncCompleted(object sender, CodecsLoadAsyncCompletedEventArgs e)
      {
         if(e.Cancelled)
         {
            Console.WriteLine("User canceled");
         }
         else if(e.Error != null)
         {
            Console.WriteLine("Error: " + e.Error.Message);
         }
         else
         {
            // Everything is OK, get the image
            RasterImage image = e.Image;
            Console.WriteLine("Image at {0} loaded OK, size: {1} by {2}", e.Uri, image.Width, image.Height);
            image.Dispose();
         }

         // Unsubscribe to the event and dispose the RasterCodecs object
         RasterCodecs codecs = sender as RasterCodecs;
         codecs.LoadAsyncCompleted -= new EventHandler&lt;CodecsLoadAsyncCompletedEventArgs&gt;(LoadAsyncCompletedExample_LoadAsyncCompleted);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadImageFlags">
      <summary>Describes whether this is the first or last call of the event, and whether the buffer contains first or last row of image
            data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.FirstPass">
      <summary>
            This is the first pass through a progressive JPEG or CMP file.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.LastPass">
      <summary>
            This is the last pass through a progressive JPEG or CMP file.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.FirstRow">
      <summary>
            The first row of the buffer is the first row of the image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.LastRow">
      <summary>
            The last row of the buffer is the last row of the image.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsLoadImageFlags.Compressed">
      <summary>
            The data in the buffer is 1-bit compressed data, which you can handle as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadImageEventArgs">
      <summary>Provides information for the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>To understand the various page and percentages, consider the following example.</para>
        <para>File Ocr.tif is a multi-page TIF file containing 4 pages. We want to load pages 2 through 4 (a total of 3 pages). We make the following call:</para>
        <para>
          <code>
             private RasterImage Test(RasterCodecs rasterCodecsObject)
             {
                // Subscribe to the LoadImage event
                rasterCodecsObject.LoadImage += new EventHandler&lt;CodecsLoadImageEventArgs&gt;(rasterCodecsObject_LoadImage);
                // Load pages 2 through 4 (total of 3 pages)
                RasterImage image = rasterCodecsObject.Load(@"C:\Users\Public\Documents\LEADTOOLS Images\Ocr.tif", 0, CodecsLoadByteOrder.BgrOrGray, 2, 4);
                // Unsubscribe to the LoadImage event
                rasterCodecsObject.LoadImage -= new EventHandler&lt;CodecsLoadImageEventArgs&gt;(rasterCodecsObject_LoadImage);
                return image;
             }
            
             private void rasterCodecsObject_LoadImage(object sender, CodecsLoadImageEventArgs e)
             {
             }
             </code>
        </para>
        <para>Inside the event handler, we will have the following values:
             <list type="table"><listheader><term>Member</term><description>Values</description></listheader><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.FirstPage" /></term><description>Will always be 2 since we specified 2 as the first page to load.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Page" /></term><description>Will go from 2 through 4 since we are loading pages 2, 3 and 4.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.LastPage" /></term><description>Will always be 4 since we specified 4 as the last page to load.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.ImagePage" /></term><description>Will go from 1 through 3 since we are loading new pages 1, 2 and 3.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /></term><description>Will go from 0 to 100 three times since we are loading three pages. This value will reset back to zero whenever <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Page" /> and <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.ImagePage" /> changes.</description></item><item><term><see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /></term><description>Will go from 0 to 100 during the whole loading operation. When this value is 100, all the pages are loaded and the method returns.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Image">
      <summary>Gets the <see cref="T:Leadtools.RasterImage" /> object into which the image data is being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterImage" /> object into which the image data is being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.FirstPage">
      <summary>Gets the index of the first page being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the first page being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Page">
      <summary>Gets the index of the page currently being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the page currently being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.LastPage">
      <summary>Gets the index of the last page being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the last page being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.ImagePage">
      <summary>Gets the index of the <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> into which the image data is being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> into which the image
            data is being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent">
      <summary>Gets the load completion percentage of the current page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A number between 0 and 100 that indicates the completion percentage of the load operation of the current page.</value>
      <remarks>
        <para>Using the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> properties, you can use the <see cref="T:Leadtools.Codecs.CodecsLoadImageEventArgs" /> to show
            a progress bar of the current load operation.</para>
        <para>When loading a multi-page file, <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> will go from 0 to 100 for each page loaded while <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> will go
            from 0 to 100 only once during the whole page operation. Usually, you will use <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> to show an overall load progress if the multi-page
            image is considered to be one document. If however, individual progress is required for each page, then you can track the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> property
            as well.</para>
        <para>When loading a single page file or one page from a multi-page file, both <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> will go from
            0 to 100 simultunasouly.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent">
      <summary>Gets the overall completion percentage for the load operation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A number between 0 and 100 that indicates the overall completion percentage of the load operation.</value>
      <remarks>
        <para>Using the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> properties, you can use the <see cref="T:Leadtools.Codecs.CodecsLoadImageEventArgs" /> to show
            a progress bar of the current load operation.</para>
        <para>When loading a multi-page file, <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> will go from 0 to 100 for each page loaded while <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> will go
            from 0 to 100 only once during the whole page operation. Usually, you will use <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> to show an overall load progress if the multi-page
            image is considered to be one document. If however, individual progress is required for each page, then you can track the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> property
            as well.</para>
        <para>When loading a single page file or one page from a multi-page file, both <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.PagePercent" /> and <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TotalPercent" /> will go from
            0 to 100 simultunasouly.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.FileName">
      <summary>Gets the name of the file currently being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> containing the name of the file currently being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Stream">
      <summary>Gets the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Stream" /> associated with the file load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Stream" /> associated with the file load process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.OffsetValid">
      <summary>Determines whether the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Offset" /> property is valid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the value of the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Offset" /> property is valid, false if it is being ignored.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Offset">
      <summary>Gets the offset in bytes from the beginning of the file at which the image data begins. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The offset in bytes to the start of the image data.</value>
      <remarks>
        <para>This is only valid if <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.OffsetValid" /> is true.</para>
        <para>This is the same value passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> methods that takes a
            <paramref name="offset" /> parameter</para>.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.OffsetCount">
      <summary>Gets the number of bytes that make up the actual image data being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The number of bytes that make up the actual image data being loaded.</value>
      <remarks>
        <para>This is only valid if <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.OffsetValid" /> is true.</para>
        <para>This is the same value passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> methods that takes a
            <paramref name="offsetCount" /> parameter</para>.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.TileValid">
      <summary>Determines whether the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Tile" /> property is valid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the value in the <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Tile" /> property is valid, false if it is being ignored.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Tile">
      <summary>Gets the rectangular area of the image being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The rectangular area of the image being loaded.</value>
      <remarks>
        <para>This is only valid if <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.OffsetValid" /> is true.</para>
        <para>This is the same value passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)" /> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> methods that takes a
            <paramref name="tile" /> parameter</para>.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Cancel">
      <summary>Gets or sets a value which allows the user to abort the load process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the load process, false to continue normally.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Info">
      <summary>Gets a <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains information about the image file being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains information about the image file being loaded.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Flags">
      <summary>Gets a value which describes whether this is the first or last call of the event, and whether the buffer contains
            first or last row of image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsLoadImageFlags" /> enumeration combination flags that describe whether this is the first or
            last call of the event, and whether the buffer contains first or last row of image data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Row">
      <summary>Gets the current image row number of the first line in <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The current image row number of the first line in <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Lines">
      <summary>Gets the number of lines in <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of lines in <see cref="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadImageEventArgs.Buffer">
      <summary>Gets the memory buffer containing one or more lines of output image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterNativeBuffer" /> object containing one or more lines of output image data. The buffer has
            has already processed (read or decompressed).</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadImage">RasterCodecs.LoadImage</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsStartDecompressDataType">
      <summary>Indicates the data format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsStartDecompressDataType.Strips">
      <summary>
            Data is in strips.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsStartDecompressDataType.Tiles">
      <summary>
            Data is in tiles.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsStartDecompressOptions">
      <summary>Provides information and parameters for the <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:Leadtools.Topics.CompressingAndDecompressingBuffers">Compressing and Decompressing Buffers</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsStartDecompressOptions.GetPalette">
      <summary>Gets the palette used for uncompressed data that is 8 bits per pixel or less. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.RasterColor" /> structures that represents the palette used for uncompressed data that is 8 bits
            per pixel or less.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsStartDecompressOptions.SetPalette(Leadtools.RasterColor[])">
      <summary>Sets the palette used for uncompressed data that is 8 bits per pixel or less. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="palette">An array of <see cref="T:Leadtools.RasterColor" /> structures that represents the palette used for uncompressed data that is 8 bits
            per pixel or less</param>
      <remarks>
        <para>The toolkit will use the first 2 &gt;&gt; <see cref="P:Leadtools.Codecs.CodecsStartDecompressOptions.BitsPerPixel" /> entries from the palette.</para>
        <para>The <see cref="P:Leadtools.Codecs.CodecsStartDecompressOptions.UsePalette" /> property must be set to true in order for the decompress operation to use the
            palette.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsStartDecompressOptions.GetColorMask">
      <summary>Gets an array of integer values that represent RGB color masks. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of 3 integers as follows: ColorMask[0] is the red mask; ColorMask[1] is the green mask;
            ColorMask[2] is the blue mask.</returns>
      <remarks>
        <para>The color mask is valid only if <see cref="P:Leadtools.Codecs.CodecsStartDecompressOptions.Format" /> is set to <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>.</para>
        <para>As an example, with 16-bit data arranged as RRR RRGG GGGB BBBB, the masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0x7C00
            ColorMask[1] = 0x0E30
            ColorMask[2] = 0x001F
            </code>
          </pre>
        </para>
        <para>For 32-bit data, the only valid data is RRRR RRRR GGGG GGGG BBBB BBBB. The masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0xFF0000
            ColorMask[1] = 0x00FF00
            ColorMask[2] = 0x0000FF
            </code>
          </pre>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsStartDecompressOptions.SetColorMask(System.Int32[])">
      <summary>Sets the array of integer values that represent RGB color masks. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="colorMask">An array of 3 integers as follows: ColorMask[0] is the red mask; ColorMask[1] is the green mask;
            ColorMask[2] is the blue mask.</param>
      <remarks>
        <para>The color mask is valid only if <see cref="P:Leadtools.Codecs.CodecsStartDecompressOptions.Format" /> is set to <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>.</para>
        <para>As an example, with 16-bit data arranged as RRR RRGG GGGB BBBB, the masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0x7C00
            ColorMask[1] = 0x0E30
            ColorMask[2] = 0x001F
            </code>
          </pre>
        </para>
        <para>For 32-bit data, the only valid data is RRRR RRRR GGGG GGGG BBBB BBBB. The masks would be:</para>
        <para>
          <pre>
            <code>
            ColorMask[0] = 0xFF0000
            ColorMask[1] = 0x00FF00
            ColorMask[2] = 0x0000FF
            </code>
          </pre>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.Empty">
      <summary>Initializes a new instance of <see cref="T:Leadtools.Codecs.CodecsStartDecompressOptions" /> with empty parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of <see cref="T:Leadtools.Codecs.CodecsStartDecompressOptions" /> with empty parameters.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.DataType">
      <summary>Gets or sets a value indicating whether strips or tiles are being decompressed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A value indicating whether strips or tiles are being decompressed.</value>
      <remarks>
            Strips have a width equal to the image width, but tiles can have a width that is less than the image width.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.Format">
      <summary>Gets or sets a value indicating the format of the image to decompress. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>A <see cref="T:Leadtools.RasterImageFormat" /> value indicating the format of the image to decompress.</para>
        <para>Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Jpeg</see>
              </term>
              <description>JPEG file</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawRle4</see>
              </term>
              <description>RAW file with RLE compression, 4 bits per pixel</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawRle8</see>
              </term>
              <description>RAW file with RLE compression, 8 bits per pixel</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawBitfields</see>
              </term>
              <description>RAW file with bitfield compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawPackBits</see>
              </term>
              <description>RAW file with packed bits compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawCcitt</see>
              </term>
              <description>RAW file with CCITT compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG31Dim</see>
              </term>
              <description>Fax file with G3 one-dimensional compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG32Dim</see>
              </term>
              <description>Fax file with G3 two-dimensional compression</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.FaxG4</see>
              </term>
              <description>Fax file with G4 compression</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.Width">
      <summary>Gets or sets a value indicating the width in pixels of the compressed data image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width in pixels of the compressed data image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.Height">
      <summary>Gets or sets a value indicating the height in pixels of the compressed data image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height in pixels of the compressed data image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.BitsPerPixel">
      <summary>Gets or sets a value indicating the bits per pixel of the compressed data <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The bits per pixel of the compressed data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.ViewPerspective">
      <summary>Gets or sets a value indicating the view perspective of the compressed data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>A <see cref="T:Leadtools.RasterViewPerspective" /> that indicates the view perspective of the compressed data.</para>
        <para>Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>
              </term>
              <description>Top-left of image is first in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft90</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> rotated clockwise by 90 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft180</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> rotated clockwise by 180 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft270</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> rotated clockwise by 270 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see>
              </term>
              <description>Bottom-left of image is first in memory</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft90</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see> rotated clockwise by 90 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft180</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see> rotated clockwise by 180 degrees</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft270</see>
              </term>
              <description>
                <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see> rotated clockwise by 270 degrees</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.RawOrder">
      <summary>Gets or sets a value indicating the color order of 24-bit raw data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>A <see cref="T:Leadtools.RasterByteOrder" /> that indicates the color order of 24-bit raw data.</para>
        <para>This is ignored if the image is palettized. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>
              </term>
              <description>Data is RGB</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>
              </term>
              <description>Data is BGR</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.LoadOrder">
      <summary>Gets or sets a value indicating the color order after a 24-bit image is loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>A <see cref="T:Leadtools.RasterByteOrder" /> that indicates the color order after a 24-bit image is loaded.</para>
        <para>This is ignored if the image is palettized. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>
              </term>
              <description>Data is RGB</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>
              </term>
              <description>Data is BGR</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.XResolution">
      <summary>Gets or sets a value indicating the horizontal resolution, in dots per inch of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The horizontal resolution, in dots per inch of the image data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.YResolution">
      <summary>Gets or sets a value indicating the vertical, in dots per inch of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The vertical resolution, in dots per inch of the image data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.LeastSignificantBitFirst">
      <summary>Gets or sets a value specifying whether to save the image data with least significant bit first or last. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save to save the image data with least significant bit first (LSB) or last (MSB).</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.Pad4">
      <summary>Gets or sets a value indicating whether to save the data padded to 4-byte boundary. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the data padded to 4-byte boundary, false otherwise.</value>
      <remarks>
            This property is used when saving raw data only.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.UsePalette">
      <summary>Gets or sets a value indicating whether to use the palette when saving images to formats that
            require a palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the palette set in <see cref="M:Leadtools.Codecs.CodecsStartDecompressOptions.SetPalette(Leadtools.RasterColor[])" />, false to use the <see cref="T:Leadtools.RasterImage" />'s own palette.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.TiffPhotometricInterpretation">
      <summary>Gets or sets the desiired photometric interpretation value for the save process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desiired photometric interpretation value for the save process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsStartDecompressOptions.PlanarConfiguration">
      <summary>Gets or sets a value indicating the desired planar configuration for the save process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desired planar configuration for the save process.</value>
      <remarks>
            This value is used only if <see cref="P:Leadtools.Codecs.CodecsStartDecompressOptions.Format" /> is <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RawPackBits</see>.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)">RasterCodecs.StartDecompress</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsDecompressDataFlags">
      <summary>Indicates the state of the decompression engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsDecompressDataFlags.None">
      <summary>
            Undefined.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsDecompressDataFlags.Start">
      <summary>
            Started.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsDecompressDataFlags.End">
      <summary>
            Stopped.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsDecompressDataFlags.Complete">
      <summary>
            Completed.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRtfLoadOptions">
      <summary>Provides options specifically for loading RTF files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Rich Text Format (RTF) files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRtfOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRtfLoadOptions.BackColor">
      <summary>Gets or sets the background color used when rendering RTF documents. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The background color used when rendering RTF documents. Default value is "white".</value>
      <remarks>
        <para>Background is the color used to fill the resulting image before rendering the RTF contents on top of it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRtfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRtfOptions">
      <summary>Provides extra options for loading RTF files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsRtfOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.rtf")

         ' Setting new options.
         codecs.Options.RasterizeDocument.Load.LeftMargin = 1.0
         codecs.Options.RasterizeDocument.Load.TopMargin = 1.25
         codecs.Options.RasterizeDocument.Load.PageWidth = 8.5
         codecs.Options.RasterizeDocument.Load.PageHeight = 11.0
         codecs.Options.RasterizeDocument.Load.BottomMargin = 1.0
         codecs.Options.RasterizeDocument.Load.RightMargin = 1.25

         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "rtf.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsRtfOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.rtf");

         // Setting new options.
         codecs.Options.RasterizeDocument.Load.LeftMargin = 1.00;
         codecs.Options.RasterizeDocument.Load.TopMargin = 1.25;
         codecs.Options.RasterizeDocument.Load.PageWidth = 8.50;
         codecs.Options.RasterizeDocument.Load.PageHeight = 11.00;
         codecs.Options.RasterizeDocument.Load.BottomMargin = 1.00;
         codecs.Options.RasterizeDocument.Load.RightMargin = 1.25;

         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "rtf.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRtfOptions.LoadMetafile(System.String,System.Int32)">
      <summary>Loads the specified RTF file as a Windows Enhanced Metafile. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="fileName">The source RTF file.</param>
      <param name="pageNumber">The 1-based page number to load.</param>
      <returns>The Windows Enhanced Metafile this method creates.</returns>
      <remarks>
        <para>This method uses the following members of the current <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" /> set in
            <see cref="P:Leadtools.Codecs.CodecsOptions.RasterizeDocument">RasterCodecs.Options.RasterizeDocument.Load</see> to determine the page size, resolution and margins:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution">CodecsRasterizeDocumentLoadOptions.XResolution</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution">CodecsRasterizeDocumentLoadOptions.YResolution</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin">CodecsRasterizeDocumentLoadOptions.LeftMargin</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin">CodecsRasterizeDocumentLoadOptions.TopMargin</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin">CodecsRasterizeDocumentLoadOptions.RightMargin</see>
            </description>
          </item>
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin">CodecsRasterizeDocumentLoadOptions.BottomMargin</see>
            </description>
          </item>
        </list>
        <para>Also, it uses the following members of the current <see cref="T:Leadtools.Codecs.CodecsRtfLoadOptions" /> set in <see cref="P:Leadtools.Codecs.CodecsOptions.Rtf">RasterCodecs.Options.Rtf.Load</see>
            to determine tha back color to use:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="P:Leadtools.Codecs.CodecsRtfLoadOptions.BackColor">CodecsRtfLoadOptions.BackColor</see>
            </description>
          </item>
        </list>
        <para>So you must set these options according to your application needs before calling this method. The number of pages inside the RTF file will depend on
            the Rasterize Document options.</para>
        <para>You must destroy the Windows Enhanced Metafile (EMF) handle this method creates manually using the <strong>DeleteEnhMetaFile</strong> Windows API.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function DeleteEnhMetaFile(ByVal hemf As IntPtr) As Integer
      End Function
      Public Sub LoadRtfAsMetafileExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.rtf")

         ' Load the source file as a metafile
         Dim hemf As IntPtr = codecs.Options.Rtf.LoadMetafile(srcFileName, 1)

         If hemf &lt;&gt; IntPtr.Zero Then
            ' Use the metafile here

            ' Finally, delete it using the Windows API
            DeleteEnhMetaFile(hemf)
         End If

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      [DllImport("Gdi32")]
      private static extern int DeleteEnhMetaFile(IntPtr hemf);
      public void LoadRtfAsMetafileExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.rtf");

         // Load the source file as a metafile
         IntPtr hemf = codecs.Options.Rtf.LoadMetafile(srcFileName, 1);

         if(hemf != IntPtr.Zero)
         {
            // Use the metafile here

            // Finally, delete it using the Windows API
            DeleteEnhMetaFile(hemf);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRtfOptions.Load">
      <summary>Gets the options for loading RTF files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The RTF load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRtfOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsFpxLoadOptions">
      <summary>Gets the options for loading FPX images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The FPX load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsFpxOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsFpxLoadOptions.Resolution">
      <summary>Gets or sets the resolution to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
        <para>Specify 0 for both dimensions to load the default resolution, which is the highest resolution layer, 
            which corresponds to the image with its FULL DIMENSIONS.</para>
        <para>Ex: If the file contains the image at the following dimensions: 800X600, 400X300 and 200X150, then 
            in the default case the codec will load the image at 800X600.</para>
        <para>Specify either the desired width or desired height to load, and use 0 to get the default for the other 
            dimension. The load procedure will determine the closest resolution layer, which best fits the user's 
            request.</para>
        <para>Ex: If the file contains the image at the following dimensions: 800X600, 400X300 and 200X150 and the 
            user requests an image with width equal to 780 for example, then LEADTOOLS will automatically know that 
            the proper width is 800 and load the image at the (800X600) resolution.</para>
        <para>Specify one of the exact sets of dimensions in the file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsFpxOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsFpxOptions">
      <summary>Provides extra options for loading and saving FPX images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsFpxOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.fpx")

         codecs.Options.Fpx.Load.Resolution = New LeadSize(200, 200)
         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "fpx.bmp"), RasterImageFormat.Bmp, 8)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsFpxOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.fpx");

         codecs.Options.Fpx.Load.Resolution = new LeadSize(200, 200);
         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "fpx.bmp"), RasterImageFormat.Bmp, 8);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsFpxOptions.Load">
      <summary>Gets the options for loading FPX images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            The options for loading FPX images.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsFpxOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRawSaveOptions">
      <summary>Provides options specifically for saving RAW Data images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRawOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRawSaveOptions.ReverseBits">
      <summary>Enables or disables reversing the bits. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to reverse the bit order when writing CCITT Group 3 and 4 files and RAW uncompressed data, so that the least
            significant bit (LSB) is first.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRawOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRawSaveOptions.Pad4">
      <summary>Enables or disables padding the data to a multiple of 4. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save each line padded to a multiple of 4 bytes.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRawOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRawOptions">
      <summary>Provides extra options for loading and saving RAW Data images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Structure RawData
         Public Width As Integer ' Width of image
         Public Height As Integer ' Height of image
         Public BitsPerPixel As Integer ' Bits per pixel of image--if palettized, a gray palette is generated
         Public ViewPerspective As RasterViewPerspective ' View perspective of raw data (TopLeft, BottomLeft, etc)
         Public Order As RasterByteOrder ' Rgb or Bgr
         Public XResolution As Integer ' Horizontal resolution in DPI
         Public YResolution As Integer ' Vertical resolution in DPI
         Public Offset As Integer ' Offset into file where raw data begins
         Public Padding As Boolean ' true if each line of data is padded to four bytes
         Public ReverseBits As Boolean ' true if the bits of each byte are reversed
      End Structure
      Private myRawData As RawData

      Private Sub codecs_LoadInformation(ByVal sender As Object, ByVal e As CodecsLoadInformationEventArgs)
         ' Set the information
         e.Format = RasterImageFormat.Raw
         e.Width = myRawData.Width
         e.Height = myRawData.Height
         e.BitsPerPixel = myRawData.BitsPerPixel
         e.XResolution = myRawData.XResolution
         e.YResolution = myRawData.YResolution
         e.Offset = myRawData.Offset

         If myRawData.Padding Then
            e.Pad4 = True
         End If

         e.Order = myRawData.Order

         If myRawData.ReverseBits Then
            e.LeastSignificantBitFirst = True
         End If

         e.ViewPerspective = myRawData.ViewPerspective

         ' If image is palettized create a grayscale palette
         If e.BitsPerPixel &lt;= 8 Then
            Dim colors As Integer = 1 &lt;&lt; e.BitsPerPixel
            Dim palette As RasterColor() = New RasterColor(colors - 1) {}
            Dim i As Integer = 0
            Do While i &lt; palette.Length
               Dim val As Byte = CByte((i * 255) / (colors - 1))
               palette(i) = New RasterColor(val, val, val)
               i += 1
            Loop

            e.SetPalette(palette)
         End If
      End Sub


      Public Sub CodecsRawOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' First, load a JPEG or CMP file
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         ' Save this image as RAW data

         ' Set RAW options
         codecs.Options.Raw.Save.Pad4 = True
         codecs.Options.Raw.Save.ReverseBits = True
         codecs.Options.Save.OptimizedPalette = True

         Dim rawFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Test.raw")
         codecs.Save(image, rawFileName, RasterImageFormat.Raw, 0)

         ' Save information about this image so we can use it to load the RAW file
         myRawData = New RawData()
         myRawData.Width = image.Width
         myRawData.Height = image.Height
         myRawData.BitsPerPixel = image.BitsPerPixel
         myRawData.ViewPerspective = image.ViewPerspective
         myRawData.Order = image.Order
         myRawData.XResolution = image.XResolution
         myRawData.YResolution = image.YResolution
         myRawData.Offset = 0
         myRawData.Padding = True
         myRawData.ReverseBits = True

         ' We dont need the image anymore
         image.Dispose()

         ' Now load this RAW image back

         ' First subscribe to the LoadInformation event so we can set the image information
         AddHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Load the image
         image = codecs.Load(rawFileName)
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "raw.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel)
         ' Unsubscribe from the event
         RemoveHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private struct RawData
      {
         public int Width;                               // Width of image
         public int Height;                              // Height of image
         public int BitsPerPixel;                        // Bits per pixel of image--if palettized, a gray palette is generated
         public RasterViewPerspective ViewPerspective;   // View perspective of raw data (TopLeft, BottomLeft, etc)
         public RasterByteOrder Order;                   // Rgb or Bgr
         public int XResolution;                         // Horizontal resolution in DPI
         public int YResolution;                         // Vertical resolution in DPI
         public int Offset;                              // Offset into file where raw data begins
         public bool Padding;                            // true if each line of data is padded to four bytes
         public bool ReverseBits;                        // true if the bits of each byte are reversed 
      }
      private RawData myRawData;

      private void codecs_LoadInformation(object sender, CodecsLoadInformationEventArgs e)
      {
         // Set the information
         e.Format = RasterImageFormat.Raw;
         e.Width = myRawData.Width;
         e.Height = myRawData.Height;
         e.BitsPerPixel = myRawData.BitsPerPixel;
         e.XResolution = myRawData.XResolution;
         e.YResolution = myRawData.YResolution;
         e.Offset = myRawData.Offset;

         if (myRawData.Padding)
            e.Pad4 = true;

         e.Order = myRawData.Order;

         if (myRawData.ReverseBits)
            e.LeastSignificantBitFirst = true;

         e.ViewPerspective = myRawData.ViewPerspective;

         // If image is palettized create a grayscale palette
         if (e.BitsPerPixel &lt;= 8)
         {
            int colors = 1 &lt;&lt; e.BitsPerPixel;
            RasterColor[] palette = new RasterColor[colors];
            for (int i = 0; i &lt; palette.Length; i++)
            {
               byte val = (byte)((i * 255) / (colors - 1));
               palette[i] = new RasterColor(val, val, val);
            }

            e.SetPalette(palette);
         }
      }


      public void CodecsRawOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // First, load a JPEG or CMP file
         RasterImage image = codecs.Load( Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));

         // Save this image as RAW data

         // Set RAW options
         codecs.Options.Raw.Save.Pad4 = true;
         codecs.Options.Raw.Save.ReverseBits = true;
         codecs.Options.Save.OptimizedPalette = true;

         string rawFileName = Path.Combine(LEAD_VARS.ImagesDir, "Test.raw");
         codecs.Save(image, rawFileName, RasterImageFormat.Raw, 0);

         // Save information about this image so we can use it to load the RAW file
         myRawData = new RawData();
         myRawData.Width = image.Width;
         myRawData.Height = image.Height;
         myRawData.BitsPerPixel = image.BitsPerPixel;
         myRawData.ViewPerspective = image.ViewPerspective;
         myRawData.Order = image.Order;
         myRawData.XResolution = image.XResolution;
         myRawData.YResolution = image.YResolution;
         myRawData.Offset = 0;
         myRawData.Padding = true;
         myRawData.ReverseBits = true;

         // We dont need the image anymore
         image.Dispose();

         // Now load this RAW image back

         // First subscribe to the LoadInformation event so we can set the image information
         codecs.LoadInformation += new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Load the image
         image = codecs.Load(rawFileName);
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "raw.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel);
         // Unsubscribe from the event
         codecs.LoadInformation -= new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private struct RawData
      {
         public int Width;                               // Width of image
         public int Height;                              // Height of image
         public int BitsPerPixel;                        // Bits per pixel of image--if palettized, a gray palette is generated
         public RasterViewPerspective ViewPerspective;   // View perspective of raw data (TopLeft, BottomLeft, etc)
         public RasterByteOrder Order;                   // Rgb or Bgr
         public int XResolution;                         // Horizontal resolution in DPI
         public int YResolution;                         // Vertical resolution in DPI
         public int Offset;                              // Offset into file where raw data begins
         public bool Padding;                            // true if each line of data is padded to four bytes
         public bool ReverseBits;                        // true if the bits of each byte are reversed 
      }
      private RawData myRawData;

      private void codecs_LoadInformation(object sender, CodecsLoadInformationEventArgs e)
      {
         // Set the information
         e.Format = RasterImageFormat.Raw;
         e.Width = myRawData.Width;
         e.Height = myRawData.Height;
         e.BitsPerPixel = myRawData.BitsPerPixel;
         e.XResolution = myRawData.XResolution;
         e.YResolution = myRawData.YResolution;
         e.Offset = myRawData.Offset;

         if (myRawData.Padding)
            e.Pad4 = true;

         e.Order = myRawData.Order;

         if (myRawData.ReverseBits)
            e.LeastSignificantBitFirst = true;

         e.ViewPerspective = myRawData.ViewPerspective;

         // If image is palettized create a grayscale palette
         if (e.BitsPerPixel &lt;= 8)
         {
            int colors = 1 &lt;&lt; e.BitsPerPixel;
            RasterColor[] palette = new RasterColor[colors];
            for (int i = 0; i &lt; palette.Length; i++)
            {
               byte val = (byte)((i * 255) / (colors - 1));
               palette[i] = new RasterColor(val, val, val);
            }

            e.SetPalette(palette);
         }
      }

      public void CodecsRawOptionsExample(Stream inStreamCmp, Stream outStreamRaw, Stream outStreamBmp)
      {
         RasterCodecs codecs = new RasterCodecs();

         // First, load a JPEG or CMP file
         RasterImage image = codecs.Load(inStreamCmp);

         // Save this image as RAW data

         // Set RAW options
         codecs.Options.Raw.Save.Pad4 = true;
         codecs.Options.Raw.Save.ReverseBits = true;
         codecs.Options.Save.OptimizedPalette = true;

         codecs.Save(image, outStreamRaw, RasterImageFormat.Raw, 0);

         // Save information about this image so we can use it to load the RAW file
         myRawData = new RawData();
         myRawData.Width = image.Width;
         myRawData.Height = image.Height;
         myRawData.BitsPerPixel = image.BitsPerPixel;
         myRawData.ViewPerspective = image.ViewPerspective;
         myRawData.Order = image.Order;
         myRawData.XResolution = image.XResolution;
         myRawData.YResolution = image.YResolution;
         myRawData.Offset = 0;
         myRawData.Padding = true;
         myRawData.ReverseBits = true;

         // We dont need the image anymore
         image.Dispose();

         // Now load this RAW image back

         // First subscribe to the LoadInformation event so we can set the image information
         codecs.LoadInformation += new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Load the image
         image = codecs.Load(outStreamRaw);

         // Save the image
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, image.BitsPerPixel);
         // Unsubscribe from the event
         codecs.LoadInformation -= new EventHandler&lt;CodecsLoadInformationEventArgs&gt;(codecs_LoadInformation);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Private Structure RawData
         Public Width As Integer ' Width of image
         Public Height As Integer ' Height of image
         Public BitsPerPixel As Integer ' Bits per pixel of image--if palettized, a gray palette is generated
         Public ViewPerspective As RasterViewPerspective ' View perspective of raw data (TopLeft, BottomLeft, etc)
         Public Order As RasterByteOrder ' Rgb or Bgr
         Public XResolution As Integer ' Horizontal resolution in DPI
         Public YResolution As Integer ' Vertical resolution in DPI
         Public Offset As Integer ' Offset into file where raw data begins
         Public Padding As Boolean ' true if each line of data is padded to four bytes
         Public ReverseBits As Boolean ' true if the bits of each byte are reversed
      End Structure
      Private myRawData As RawData

      Private Sub codecs_LoadInformation(ByVal sender As Object, ByVal e As CodecsLoadInformationEventArgs)
         ' Set the information
         e.Format = RasterImageFormat.Raw
         e.Width = myRawData.Width
         e.Height = myRawData.Height
         e.BitsPerPixel = myRawData.BitsPerPixel
         e.XResolution = myRawData.XResolution
         e.YResolution = myRawData.YResolution
         e.Offset = myRawData.Offset

         If myRawData.Padding Then
            e.Pad4 = True
         End If

         e.Order = myRawData.Order

         If myRawData.ReverseBits Then
            e.LeastSignificantBitFirst = True
         End If

         e.ViewPerspective = myRawData.ViewPerspective

         ' If image is palettized create a grayscale palette
         If e.BitsPerPixel &lt;= 8 Then
            Dim colors As Integer = 1 &lt;&lt; e.BitsPerPixel
            Dim palette As RasterColor() = New RasterColor(colors - 1){}
            Dim i As Integer = 0
            Do While i &lt; palette.Length
               Dim val As Byte = CByte((i * 255) / (colors - 1))
               palette(i) = New RasterColor(val, val, val)
               i += 1
            Loop

            e.SetPalette(palette)
         End If
      End Sub

      Public Sub CodecsRawOptionsExample(ByVal inStreamCmp As Stream, ByVal outStreamRaw As Stream, ByVal outStreamBmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' First, load a JPEG or CMP file
         Dim image As RasterImage = codecs.Load(inStreamCmp)

         ' Save this image as RAW data

         ' Set RAW options
         codecs.Options.Raw.Save.Pad4 = True
         codecs.Options.Raw.Save.ReverseBits = True
         codecs.Options.Save.OptimizedPalette = True

         codecs.Save(image, outStreamRaw, RasterImageFormat.Raw, 0)

         ' Save information about this image so we can use it to load the RAW file
         myRawData = New RawData()
         myRawData.Width = image.Width
         myRawData.Height = image.Height
         myRawData.BitsPerPixel = image.BitsPerPixel
         myRawData.ViewPerspective = image.ViewPerspective
         myRawData.Order = image.Order
         myRawData.XResolution = image.XResolution
         myRawData.YResolution = image.YResolution
         myRawData.Offset = 0
         myRawData.Padding = True
         myRawData.ReverseBits = True

         ' We dont need the image anymore
         image.Dispose()

         ' Now load this RAW image back

         ' First subscribe to the LoadInformation event so we can set the image information
         AddHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Load the image
         image = codecs.Load(outStreamRaw)

         ' Save the image
         codecs.Save(image, outStreamBmp, RasterImageFormat.Bmp, image.BitsPerPixel)
         ' Unsubscribe from the event
         RemoveHandler codecs.LoadInformation, AddressOf codecs_LoadInformation

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRawOptions.Save">
      <summary>Gets the options for saving RAW Data images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The RAW Data save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRawOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAnzView">
      <summary>Indicates the view to use when loading ANZ (Analyze) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information and an example, refer to <see cref="T:Leadtools.Codecs.CodecsAnzOptions" />.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsAnzView.Transverse">
      <summary>
            View is from underneath
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAnzView.Sagittal">
      <summary>
            View is from right side
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAnzView.Coronal">
      <summary>
            View is from front
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAnzLoadOptions">
      <summary>Provides options for loading ANZ (Analyze) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to 
            <see cref="T:L.Topics.FileFormatsANZ">File Formats - ANZ Format</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsAnzLoadOptionsExample()
         Dim codecs As New RasterCodecs()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.Anz")
         Dim dstFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AnzCoronal.bmp")

         ' Set the load options to use
         ' "view is from front" ANZ viewing options
         codecs.Options.Anz.Load.View = CodecsAnzView.Coronal

         ' Load the source file
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Save the image as BMP
            codecs.Save(image, dstFileName, RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsAnzLoadOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.Anz");
         string dstFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AnzCoronal.bmp");

         // Set the load options to use
         // "view is from front" ANZ viewing options
         codecs.Options.Anz.Load.View = CodecsAnzView.Coronal;

         // Load the source file
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Save the image as BMP
            codecs.Save(image, dstFileName, RasterImageFormat.Bmp, 24);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAnzLoadOptions.View">
      <summary>Gets or sets the view to use when loading ANZ (Analyze) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The view to use when loading ANZ (Analyze) images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAnzLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAnzOptions">
      <summary>Provides extra options for loading and saving ANZ (Analyze) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAnzLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAnzOptions.Load">
      <summary>Gets the options for loading ANZ (Analyze) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The options to use when loading ANZ (Analyze) images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAnzLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsOverlayData">
      <summary>Contains information about the overlay image found in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>An <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object is populated and passed as data to the <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" />
            parameter passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see> method. Some members of this
            class are for input some are for output as follows:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Member</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.FileName" />
              </term>
              <description>(Input) The name of the file containing the overlay image</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.PageNumber" />
              </term>
              <description>(Input) Page number of the requested overlay image</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" />
              </term>
              <description>(Input) Determines whether overlay image info or actual image is needed</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoWidth" />
              </term>
              <description>(Output) Overlay image width in pixels (Ignore if <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> is false)</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoHeight" />
              </term>
              <description>(Output) Overlay image height in pixels (Ignore if <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> is false)</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoXResolution" />
              </term>
              <description>(Output) Overlay image horizontal resolution in pixels per inch (Ignore if <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> is false)</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoYResolution" />
              </term>
              <description>(Output) Overlay image vertical resolution in pixels per inch (Ignore if <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> is false)</description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsOverlayData.Image" />
              </term>
              <description>(Output) The <see cref="T:Leadtools.RasterImage" /> object containing the loaded overlay image (Only <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> is false)</description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsOverlayData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.FileName">
      <summary>Gets the name of the file containing the overlay image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The name of the file containing the overlay image.</value>
      <remarks>
            This property is input only.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.PageNumber">
      <summary>Gets the page number of the requested overlay image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index of the page number of the requested overlay image.</value>
      <remarks>
            This property is input only.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.Info">
      <summary>Gets a value that determines whether overlay image info or actual image is needed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>true</term>
            <description>
                 Only the information about the overlay image is needed. You must now in fill in the 
                 <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoWidth" />, <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoHeight" />, <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoXResolution" /> and <see cref="P:Leadtools.Codecs.CodecsOverlayData.InfoYResolution" />
                 properties of this <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object.
                 </description>
          </item>
          <item>
            <term>false</term>
            <description>
                 The actual overlay image is needed. You must now load the overlay image into the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Image" /> property of this
                 <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object.
                 </description>
          </item>
        </list>
      </value>
      <remarks>
            This property is input only.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.InfoWidth">
      <summary>Gets or sets the overlay image width in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The overlay image width in pixels. If the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> property of this <see cref="T:Leadtools.Codecs.CodecsOverlayData" />
            object is true, you need to set this property to the overlay image width, otherwise, ignore.</value>
      <remarks>
            This property is output.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.InfoHeight">
      <summary>Gets or sets the overlay image height in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The overlay image height in pixels. If the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> property of this <see cref="T:Leadtools.Codecs.CodecsOverlayData" />
            object is true, you need to set this property to the overlay image height, otherwise, ignore.</value>
      <remarks>
            This property is output.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.InfoXResolution">
      <summary>Gets or sets the overlay image horizontal resolution in pixels per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The overlay image horizontal resolution in pixels per inch. If the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> property of this
            <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object is true, you need to set this property to the overlay image horizontal resolution,
            otherwise ignore.</value>
      <remarks>
            This property is output.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.InfoYResolution">
      <summary>Gets or sets the overlay image vertical resolution in pixels per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The overlay image vertical resolution in pixels per inch. If the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> property of this
            <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object is true, you need to set this property to the overlay image vertical resolution,
            otherwise ignore.</value>
      <remarks>
            This property is output.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsOverlayData.Image">
      <summary>Gets or sets the <see cref="T:Leadtools.RasterImage" /> object containing the loaded overlay image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The <see cref="T:Leadtools.RasterImage" /> object containing the loaded overlay image. If the <see cref="P:Leadtools.Codecs.CodecsOverlayData.Info" /> property of this
            <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> objet is false, you need to load the overlay image into this property. Otherwise ignore.
            You do not need to call <see cref="M:Leadtools.RasterImage.Dispose" /> on this image. LEADTOOLS will dispose it for you once its done
            overlaying it on the image.
            </value>
      <remarks>
            This property is output.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsOverlayCallback">
      <summary>Provides a callback method that gets called when loading a file containing an overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="data">
            A <see cref="T:Leadtools.Codecs.CodecsOverlayData" /> object that contains information for the callback. Some members of this object are for
            input, some are for output. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsOverlayData" />.
            </param>
      <remarks>
            The <see cref="T:Leadtools.Codecs.CodecsOverlayCallback" /> delegate is passed to
            <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see> to get the overlay image and other information from the
            user when loading a file containing an overlay.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartOverlay(Leadtools.Codecs.CodecsOverlayCallback,Leadtools.Codecs.CodecsOverlayCallbackMode)">RasterCodecs.StartOverlay</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.ToRasterTagMetadata">
      <summary>Constructs a <see cref="T:Leadtools.RasterTagMetadata" /> from this GeoKey data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A <see cref="T:Leadtools.RasterTagMetadata" /> object that contains the data stored in this GeoKey.</returns>
      <remarks>
        <para>The number of bytes in <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer" /> can be obtained by <see cref="P:Leadtools.RasterNativeBuffer.Length">RasterNativeBuffer.Length</see>, while the number of items can
            be obtained by <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Count" />.</para>
        <para>You can also construct a new <see cref="T:Leadtools.RasterTagMetadata" /> object from the data stored in this <see cref="T:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs" /> using
            the <see cref="M:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.ToRasterTagMetadata" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Id">
      <summary>Gets the GeoKey ID identifying the GeoTIFF key. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The GeoKey ID identifying the GeoTIFF key.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.MetadataType">
      <summary>Gets the type of GeoKey. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The type of the GeoKey This indicates whether the data pointed to by <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer" /> is SHORT, DOUBLE or ASCII.
            Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Int16</see>
              </term>
              <description>Two bytes, unsigned.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Double</see>
              </term>
              <description>Eight bytes used as a double-precision floating-point number</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Ascii</see>
              </term>
              <description>Byte in the range of 0 to 255. Null-terminated</description>
            </item>
          </list>
        </para>
        <para>You can also construct a new <see cref="T:Leadtools.RasterTagMetadata" /> object from the data stored in this <see cref="T:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs" /> using
            the <see cref="M:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.ToRasterTagMetadata" /> method.</para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Count">
      <summary>Gets the number of items in <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The number of items in the <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer" /> buffer. Note that this doesn't describe the number of bytes. For example,
            <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Count" /> is 10 and <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.MetadataType" /> is
            <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Double</see>, you will need 10 x 8 = 80 bytes to read the
            tag data.</para>
        <para>You can also construct a new <see cref="T:Leadtools.RasterTagMetadata" /> object from the data stored in this <see cref="T:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs" /> using
            the <see cref="M:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.ToRasterTagMetadata" /> method.</para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer">
      <summary>Gets a pointer to the unmanaged memory containing the GeoKey data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A pointer to the unmanaged memory containing the GeoKey data.</value>
      <remarks>
        <para>The number of bytes in <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Buffer" /> can be obtained by <see cref="P:Leadtools.RasterNativeBuffer.Length">RasterNativeBuffer.Length</see>, while the number of items can
            be obtained by <see cref="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Count" />.</para>
        <para>You can also construct a new <see cref="T:Leadtools.RasterTagMetadata" /> object from the data stored in this <see cref="T:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs" /> using
            the <see cref="M:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.ToRasterTagMetadata" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumGeoKeysEventArgs.Cancel">
      <summary>Gets or sets a value which allows the user to abort the enumeration process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the enumeration process, false to continue normally.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GeoKeyFound">RasterCodecs.GeoKeyFound</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPcdLoadOptions">
      <summary>Provides options specifically for loading PCD images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPcdOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPcdLoadOptions.Resolution">
      <summary>Gets or sets the resolution to load when loading PCD files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
            Specifies the resolution of the image to load. You can specify 0 to get the default.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPcdOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPcdOptions">
      <summary>Provides extra options for loading and saving PCD images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsPcdOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.pcd")

         ' get the current PCD load resolution
         Dim sz As LeadSize = codecs.Options.Pcd.Load.Resolution
         Console.WriteLine("Before set: {0}", sz)

         ' change it to 100 by 100 pixels
         codecs.Options.Pcd.Load.Resolution = New LeadSize(96, 64)
         sz = codecs.Options.Pcd.Load.Resolution
         Console.WriteLine("After set: {0}", sz)
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "pcd.bmp"), RasterImageFormat.Bmp, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsPcdOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.pcd");

         // get the current PCD load resolution
         LeadSize sz = codecs.Options.Pcd.Load.Resolution;
         Console.WriteLine("Before set: {0}", sz);

         // change it to 100 by 100 pixels
         codecs.Options.Pcd.Load.Resolution = new LeadSize(96, 64);
         sz = codecs.Options.Pcd.Load.Resolution;
         Console.WriteLine("After set: {0}", sz);
         RasterImage srcImage = codecs.Load(srcFileName);

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "pcd.bmp"), RasterImageFormat.Bmp, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPcdOptions.Load">
      <summary>Gets the options for loading PCD images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PCD load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPcdOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsGifLoadOptions">
      <summary>Provides options specifically for loading GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifLoadOptions.AnimationLoop">
      <summary>Gets or sets the animation loop value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation loop value.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsGifSaveOptions">
      <summary>Provides options specifically for saving GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsGifSaveOptions.GetAnimationPalette">
      <summary>Gets the animation palette to use when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An array of <see cref="T:Leadtools.RasterColor" /> object that represents the current animation palette to use when saving
            GIF files.</value>
      <remarks>
        <para>The palette stored in <see cref="M:Leadtools.Codecs.CodecsGifSaveOptions.GetAnimationPalette" /> is only used when the value of <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationPalette" /> is
            set to true.</para>
        <para>Use <see cref="M:Leadtools.Codecs.CodecsGifSaveOptions.SetAnimationPalette(Leadtools.RasterColor[])" /> to change the animation palette to use when saving GIF files.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsGifSaveOptions.SetAnimationPalette(Leadtools.RasterColor[])">
      <summary>Sets the animation palette used when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="palette">An array of <see cref="T:Leadtools.RasterColor" /> object that represents the current animation palette to
            use when saving GIF files.</param>
      <remarks>
        <para>The palette set with <see cref="M:Leadtools.Codecs.CodecsGifSaveOptions.SetAnimationPalette(Leadtools.RasterColor[])" /> is only used when the value of
            <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationPalette" /> is set to true.</para>
        <para>Use <see cref="M:Leadtools.Codecs.CodecsGifSaveOptions.GetAnimationPalette" /> to get the animation palette to use when saving GIF files.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationPalette">
      <summary>Gets or sets a value indicating if the image uses an animation palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image should use an animation palette, otherwise; false.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.Interlaced">
      <summary>Gets or sets a value indicating whether to save interlaced GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save the image interlaced, otherwise; false.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationLoop">
      <summary>Gets or sets a value indicating whether to use the animation loop when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationLoop" /> when saving GIF files, otherwise; fasle.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationLoop">
      <summary>Gets or sets the animation loop value to use when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation loop value to use when saving GIF files.</value>
      <remarks>
        <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationLoop" /> is only used when the value of <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationLoop" /> is set to true.
            </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationWidth">
      <summary>Gets or sets the animation width used when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation width used when saving GIF files.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationHeight">
      <summary>Gets or sets the animation height used when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation height used when saving GIF files.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationBackground">
      <summary>Gets or sets a value indicating whether to use the animation background when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationBackground" /> value when saving GIF files, otherwise; false.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationBackground">
      <summary>Gets or sets the animation background color used when saving GIF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation background color used when saving GIF files.</value>
      <remarks>
        <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.AnimationBackground" /> is only used when the value of <see cref="P:Leadtools.Codecs.CodecsGifSaveOptions.UseAnimationBackground" /> is set to true.
            </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsGifOptions">
      <summary>Provides extra options for loading and saving GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsGifOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")

         ' Get all Information about the Gif file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         ' set the animation loop value. 
         If imageInfo.Gif.HasAnimationLoop Then
            codecs.Options.Gif.Load.AnimationLoop = imageInfo.Gif.AnimationLoop
            If imageInfo.Gif.AnimationLoop &gt; 10 Then
               codecs.Options.Gif.Save.AnimationLoop = 10
            End If
         End If

         ' if this image that you want to load uses the Animation loop then use it in the save options.
         codecs.Options.Gif.Save.UseAnimationLoop = imageInfo.Gif.HasAnimationLoop

         ' if this image that you want to load uses the Animation Background then use it in the save options.
         If imageInfo.Gif.HasAnimationBackground Then
            codecs.Options.Gif.Save.AnimationBackground = imageInfo.Gif.AnimationBackground
         End If

         ' if this image that you want to load uses the Animation Palette then use it in the save options.
         If imageInfo.Gif.HasAnimationPalette Then
            codecs.Options.Gif.Save.SetAnimationPalette(imageInfo.Gif.GetAnimationPalette())
         End If

         codecs.Options.Gif.Save.UseAnimationPalette = imageInfo.Gif.HasAnimationPalette

         ' if this image that you want to load uses the Intrlaced option, then use it otherwise don't use it.
         codecs.Options.Gif.Save.Interlaced = imageInfo.Gif.IsInterlaced

         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight

         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "gif1.gif"), RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite)

         'change some save options and save the image in a new file.
         codecs.Options.Gif.Save.UseAnimationLoop = True
         codecs.Options.Gif.Save.AnimationLoop = 1
         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth + 100
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight + 100

         'Saving the image after the Gif setting.
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "gif2.gif"), RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsGifOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");

         // Get all Information about the Gif file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(srcFileName, true);

         // set the animation loop value. 
         if (imageInfo.Gif.HasAnimationLoop)
         {
            codecs.Options.Gif.Load.AnimationLoop = imageInfo.Gif.AnimationLoop;
            if (imageInfo.Gif.AnimationLoop &gt; 10)
               codecs.Options.Gif.Save.AnimationLoop = 10;
         }

         // if this image that you want to load uses the Animation loop then use it in the save options.
         codecs.Options.Gif.Save.UseAnimationLoop = imageInfo.Gif.HasAnimationLoop;

         // if this image that you want to load uses the Animation Background then use it in the save options.
         if (imageInfo.Gif.HasAnimationBackground)
            codecs.Options.Gif.Save.AnimationBackground = imageInfo.Gif.AnimationBackground;

         // if this image that you want to load uses the Animation Palette then use it in the save options.
         if (imageInfo.Gif.HasAnimationPalette)
            codecs.Options.Gif.Save.SetAnimationPalette(imageInfo.Gif.GetAnimationPalette());

         codecs.Options.Gif.Save.UseAnimationPalette = imageInfo.Gif.HasAnimationPalette;

         // if this image that you want to load uses the Intrlaced option, then use it otherwise don't use it.
         codecs.Options.Gif.Save.Interlaced = imageInfo.Gif.IsInterlaced;

         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth;
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight;

         RasterImage srcImage = codecs.Load(srcFileName);

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "gif1.gif"), RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite);

         //change some save options and save the image in a new file.
         codecs.Options.Gif.Save.UseAnimationLoop = true;
         codecs.Options.Gif.Save.AnimationLoop = 1;
         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth + 100;
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight + 100;

         //Saving the image after the Gif setting.
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "gif2.gif"), RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsGifOptionsExample(Stream inStreamGif, Stream outStreamGif1, Stream outStreamGif2)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get all Information about the Gif file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(inStreamGif, true);

         // set the animation loop value. 
         if (imageInfo.Gif.HasAnimationLoop)
         {
            codecs.Options.Gif.Load.AnimationLoop = imageInfo.Gif.AnimationLoop;
            if (imageInfo.Gif.AnimationLoop &gt; 10)
               codecs.Options.Gif.Save.AnimationLoop = 10;
         }

         // if this image that you want to load uses the Animation loop then use it in the save options.
         codecs.Options.Gif.Save.UseAnimationLoop = imageInfo.Gif.HasAnimationLoop;

         // if this image that you want to load uses the Animation Background then use it in the save options.
         if (imageInfo.Gif.HasAnimationBackground)
            codecs.Options.Gif.Save.AnimationBackground = imageInfo.Gif.AnimationBackground;

         // if this image that you want to load uses the Animation Palette then use it in the save options.
         if (imageInfo.Gif.HasAnimationPalette)
            codecs.Options.Gif.Save.SetAnimationPalette(imageInfo.Gif.GetAnimationPalette());

         codecs.Options.Gif.Save.UseAnimationPalette = imageInfo.Gif.HasAnimationPalette;

         // if this image that you want to load uses the Intrlaced option, then use it otherwise don't use it.
         codecs.Options.Gif.Save.Interlaced = imageInfo.Gif.IsInterlaced;

         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth;
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight;

         RasterImage srcImage = codecs.Load(inStreamGif);

         codecs.Save(srcImage, outStreamGif1, RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite);

         //change some save options and save the image in a new file.
         codecs.Options.Gif.Save.UseAnimationLoop = true;
         codecs.Options.Gif.Save.AnimationLoop = 1;
         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth + 100;
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight + 100;

         //Saving the image after the Gif setting.
         codecs.Save(srcImage, outStreamGif2, RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsGifOptionsExample(ByVal inStreamGif As Stream, ByVal outStreamGif1 As Stream, ByVal outStreamGif2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get all Information about the Gif file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(inStreamGif, True)

         ' set the animation loop value. 
         If imageInfo.Gif.HasAnimationLoop Then
            codecs.Options.Gif.Load.AnimationLoop = imageInfo.Gif.AnimationLoop
            If imageInfo.Gif.AnimationLoop &gt; 10 Then
               codecs.Options.Gif.Save.AnimationLoop = 10
            End If
         End If

         ' if this image that you want to load uses the Animation loop then use it in the save options.
         codecs.Options.Gif.Save.UseAnimationLoop = imageInfo.Gif.HasAnimationLoop

         ' if this image that you want to load uses the Animation Background then use it in the save options.
         If imageInfo.Gif.HasAnimationBackground Then
            codecs.Options.Gif.Save.AnimationBackground = imageInfo.Gif.AnimationBackground
         End If

         ' if this image that you want to load uses the Animation Palette then use it in the save options.
         If imageInfo.Gif.HasAnimationPalette Then
            codecs.Options.Gif.Save.SetAnimationPalette(imageInfo.Gif.GetAnimationPalette())
         End If

         codecs.Options.Gif.Save.UseAnimationPalette = imageInfo.Gif.HasAnimationPalette

         ' if this image that you want to load uses the Intrlaced option, then use it otherwise don't use it.
         codecs.Options.Gif.Save.Interlaced = imageInfo.Gif.IsInterlaced

         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight

         Dim srcImage As RasterImage = codecs.Load(inStreamGif)

         codecs.Save(srcImage, outStreamGif1, RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite)

         'change some save options and save the image in a new file.
         codecs.Options.Gif.Save.UseAnimationLoop = True
         codecs.Options.Gif.Save.AnimationLoop = 1
         codecs.Options.Gif.Save.AnimationWidth = imageInfo.Gif.AnimationWidth + 100
         codecs.Options.Gif.Save.AnimationHeight = imageInfo.Gif.AnimationHeight + 100

         'Saving the image after the Gif setting.
         codecs.Save(srcImage, outStreamGif2, RasterImageFormat.Gif, srcImage.BitsPerPixel, 1, srcImage.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifOptions.Load">
      <summary>Gets the options for loading GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The GIF load options.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifOptions.Save">
      <summary>Gets the options for saving GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The GIF save options.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsGifOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAbcQualityFactor">
      <summary>Indicates the pre-defined quality factor for saving images using LEAD Advanced Bitonal Compression (ABC). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information and an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" /> and <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Lossless">
      <summary>
            Lossless compression. This option compresses a 1-bit file and maintains image data unchanged. Highest quality.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.LosslessFast">
      <summary>
            Faster lossless compression than <strong>Lossless</strong>. This option compresses a 1-bit file and maintains 
            image data unchanged.  Highest quality.  Does not produce compression ratios as high as 
            <b>Lossless</b>.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.LossyFast">
      <summary>
            Lossy compression.  This is the fastest ABC lossy compression option.  Does not produce compression 
            ratios as high as the other lossy options.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.VirtualLossless">
      <summary>
            Lossy compression. This option removes image noisy pixels and
            compresses it at a smaller file size than <strong>Lossless</strong>.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.RemoveBorder">
      <summary>
            Lossy compression. This option removes image border if it exists
            and compresses it at a smaller file size than <strong>VirtualLossless</strong>.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Enhance">
      <summary>
            Lossy compression. This option cleans up the image, removes its border if it exists and
            compresses it at a smaller file size than <strong>RemoveBorder</strong>.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified1">
      <summary>
            Lossy compression. This option cleans up the image, removes its
            border if it exists and compresses it at a smaller file size than <strong>Enhance</strong>.
            However, it may distort some text or straight lines.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified1Fast">
      <summary>
            Same as <strong>Modified1</strong> without the border remove or image clean processes.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified2">
      <summary>
            Lossy compression. This option cleans up the image, removes its border
            if it exists and compresses it at a smaller file size than <strong>Modified1</strong>.
            However, it may distort some text or straight lines. Maximum compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified2Fast">
      <summary>
            Lossy compression. This option compresses the image at a smaller file size than <strong>Modified1</strong>.
            However, it may distort some text or straight lines. Maximum compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified3">
      <summary>
            Lossy compression. Provdes faster encode and decode speed than <strong>Modified1</strong> or <strong>Modified2</strong>.
            if one exists and compresses it at a smaller file size than <strong>Modified1</strong> or <strong>Modified2</strong>.
            Provides the maximum compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsAbcQualityFactor.Modified3Fast">
      <summary>
            Same as <strong>Modified3</strong> without the border remove or image clean processes.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAbcLoadOptions">
      <summary>Provides options specifically for loading ABC images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsAbcLoadOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.abc")

         ' enable fast load of ABC
         codecs.Options.Abc.Load.FastLoad = True

         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsAbcLoadOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.abc");

         // enable fast load of ABC
         codecs.Options.Abc.Load.FastLoad = true;

         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAbcLoadOptions.FastLoad">
      <summary>Enables or disables fast loading algorithm for loading ABC images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to enable fast loading algorithm; otherwise, false.</value>
      <remarks>
            Enabling <see cref="P:Leadtools.Codecs.CodecsAbcLoadOptions.FastLoad" /> will result in faster image loads but less image details.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAbcSaveOptions">
      <summary>Provides options specifically for saving ABC images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For information about compression quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAbcSaveOptions.QualityFactor">
      <summary>Gets or sets the quality factor for saving ABC files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            An <see cref="T:Leadtools.Codecs.CodecsAbcQualityFactor" /> enumeration value that specifies the quality factor used when saving ABC files.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAbcOptions">
      <summary>Provides extra options for loading and saving images using LEAD Advanced Bitonal Compression (ABC). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsAbcOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF")
         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' save with maximum quality
         codecs.Options.Abc.Save.QualityFactor = CodecsAbcQualityFactor.Lossless
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "quality.abc"), RasterImageFormat.Abc, srcImage.BitsPerPixel)

         ' save with maximum compression
         codecs.Options.Abc.Save.QualityFactor = CodecsAbcQualityFactor.Modified2
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "compression.abc"), RasterImageFormat.Abc, srcImage.BitsPerPixel)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsAbcOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF");
         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         // save with maximum quality
         codecs.Options.Abc.Save.QualityFactor = CodecsAbcQualityFactor.Lossless;
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "quality.abc"), RasterImageFormat.Abc, srcImage.BitsPerPixel);

         // save with maximum compression
         codecs.Options.Abc.Save.QualityFactor = CodecsAbcQualityFactor.Modified2;
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "compression.abc"), RasterImageFormat.Abc, srcImage.BitsPerPixel);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAbcOptions.Load">
      <summary>Gets the options for loading images using LEAD Advanced Bitonal Compression (ABC). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The LEAD Advanced Bitonal Compression load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAbcOptions.Save">
      <summary>Gets the options for saving images using LEAD Advanced Bitonal Compression (ABC). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The LEAD Advanced Bitonal Compression save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsAbcOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRedirectOpenEventArgs">
      <summary>Information for the <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectOpen">RasterCodecs.RedirectOpen</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRedirectOpenEventArgs.#ctor">
      <summary>Initializaes a new instance of the <see cref="T:Leadtools.Codecs.CodecsRedirectOpenEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectOpenEventArgs.FileName">
      <summary>Gets the name of the file to be opened. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> containing the name of the file to be opened.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectOpenEventArgs.Mode">
      <summary>Gets the requested mode that determines how to open or create the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The requested open mode that determines how to open or create the file.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectOpenEventArgs.Access">
      <summary>Gets the requested mode that determines how the file can be accessed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The requested mode that determines how the file can be accessed.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectOpenEventArgs.Share">
      <summary>Gets the requested mode that determines how the file will be shared by processes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The requested mode that determines how the file will be shared by processes.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectOpenEventArgs.Success">
      <summary>Gets or sets a value indicating that the open operation was successful. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to indicate that the open operation was successful, otherwise; false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRedirectReadEventArgs">
      <summary>Information for the <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectRead">RasterCodecs.RedirectRead</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRedirectReadEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsRedirectReadEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Buffer">
      <summary>Gets a pointer to the unmanaged memory buffer into which this read operation should copy the data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A pointer to the unmanaged memory buffer into which this read request should copy data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Count">
      <summary>Gets the number of bytes that this read operation request. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The number of bytes that this read operation request and should copied to <see cref="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Read">
      <summary>Gets or sets the actual number of bytes that this read operation has copied to <see cref="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The actual number of bytes that this read operation has copied to <see cref="P:Leadtools.Codecs.CodecsRedirectReadEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRedirectWriteEventArgs">
      <summary>Information for the <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectWrite">RasterCodecs.RedirectWrite</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRedirectWriteEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsRedirectWriteEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Buffer">
      <summary>Gets a pointer to the unmanaged memory buffer from which this write operation should copy the data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A pointer to the unmanaged memory buffer from which this write operation should copy the data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Count">
      <summary>Gets the number of bytes that this write operation request. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The number of bytes that this write operation request and should copied from <see cref="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Written">
      <summary>Gets or sets the actual number of bytes that this write operation has copied to <see cref="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Buffer" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The actual number of bytes that this read write operation has copied to <see cref="P:Leadtools.Codecs.CodecsRedirectWriteEventArgs.Buffer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRedirectSeekEventArgs">
      <summary>Information for the <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectSeek">RasterCodecs.RedirectSeek</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRedirectSeekEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsRedirectSeekEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset">
      <summary>Gets or sets the byte offset relative to <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The byte offset relative to <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" /> this seek operation should move. After the seek operation is done.
            This property should updated with the new offset value.</value>
      <remarks>
            If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is negative, the new position is required to precede the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" />
            by the number of bytes specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" />. If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is zero (0), the new position is required
            to be the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" />. If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is positive, the new position is required to
            follow the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" /> by the number of bytes specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" />.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin">
      <summary>Gets a value indicating the reference point used to obtain the new position. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.IO.SeekOrigin" /> value indicating the reference point used to obtain the new position.</value>
      <remarks>
            If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is negative, the new position is required to precede the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" />
            by the number of bytes specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" />. If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is zero (0), the new position is required
            to be the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" />. If <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" /> is positive, the new position is required to
            follow the position specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Origin" /> by the number of bytes specified by <see cref="P:Leadtools.Codecs.CodecsRedirectSeekEventArgs.Offset" />.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRedirectCloseEventArgs">
      <summary>Information for the <see cref="E:Leadtools.Codecs.RasterCodecs.RedirectClose">RasterCodecs.RedirectClose</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsRedirectCloseEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsRedirectCloseEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartRedirecting">RasterCodecs.StartRedirecting</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJpegImageInfo">
      <summary>Provides information specific to JPEG and LEAD CMP images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegImageInfo.IsProgressive">
      <summary>Determines whether or not the image is progressive. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is progressive, false otherwise.</value>
      <seealso cref="T:L.Topics.ControllingProgressiveLoadsAndSaves">Controlling Progressive Loads and Saves</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegImageInfo.IsLossless">
      <summary>Determines whether or not the image uses lossless JPEG compression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image uses lossles JPEG compression, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJpegImageInfo.HasStamp">
      <summary>Determines whether or not the image file has a stamp stored. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if a stamp image is stored in the image file, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTxtLoadOptions">
      <summary>Provides options specifically for loading TEXT files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Text files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Enabled">
      <summary>Enables or disables the LEADTOOLS Txt codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to enable the LEADTOOLS Txt codecs (Leadtools.Codecs.Txt.dll), <strong>false</strong> to disable it. Default is <strong>false</strong>.</value>
      <remarks>
        <para>When this property is set to false, LEADTOOLS will not attempt to load TEXT files and rasterize them and the Leadtools.Codecs.Txt codecs
            will not be used.</para>
        <para>Enabling the TEXT code will generally hender performance when the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object is attempting to load a file on disk
            with a wrong or missing a file header.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.FontColor">
      <summary>Gets or sets the text font color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text font color.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Highlight">
      <summary>Gets or sets the text highlight color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text highlight color.</value>
      <remarks>
        <para>Highlight is the color used as background for the text paragraphs found in the file. If you do not want to show the highlight
            color, set its value to the same as <see cref="P:Leadtools.Codecs.CodecsTxtLoadOptions.FontColor" /> or <see cref="P:Leadtools.Codecs.CodecsTxtLoadOptions.BackColor" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.BackColor">
      <summary>Gets or sets the text background color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text background color.</value>
      <remarks>
        <para>Background is the color used to fill the resulting image before rendering the text on top of it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.FontSize">
      <summary>Gets or sets the text font size in points. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text font size in points.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.FaceName">
      <summary>Gets or sets the text font face name. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The text font face name.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Bold">
      <summary>Indicates whether or not the text font should be bold. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use bold font for the text, false to use normal font.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Italic">
      <summary>Indicates whether or not the text font should be italic. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use italic font for the text, false to use normal font.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Underline">
      <summary>Indicates whether or not the text font should be underlined. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use underlinded font for the text, false to use normal font.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.Strikethrough">
      <summary>Indicates whether or not the text font should use strikethrough style. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to use strikethrough font for the text, false to use normal font.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtLoadOptions.UseSystemLocale">
      <summary>Indicates whether to use the current Windows locale (code page) when rendering text files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to use the current Windows locale (code page) when rendering text files, otherwise; <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTxtOptions">
      <summary>Provides extra options for loading TEXT files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsTxtOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.txt")

         ' Setting new options.
         codecs.Options.RasterizeDocument.Load.LeftMargin = 1.0
         codecs.Options.RasterizeDocument.Load.TopMargin = 1.25
         codecs.Options.RasterizeDocument.Load.PageWidth = 8.5
         codecs.Options.RasterizeDocument.Load.PageHeight = 11.0
         codecs.Options.RasterizeDocument.Load.BottomMargin = 1.0
         codecs.Options.RasterizeDocument.Load.RightMargin = 1.25
         codecs.Options.Txt.Load.FontColor = New RasterColor(255, 0, 0)
         codecs.Options.Txt.Load.FontSize = 12
         codecs.Options.Txt.Load.Bold = True
         codecs.Options.Txt.Load.Enabled = True

         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "txt.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsTxtOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.txt");

         // Setting new options.
         codecs.Options.RasterizeDocument.Load.LeftMargin = 1.00;
         codecs.Options.RasterizeDocument.Load.TopMargin = 1.25;
         codecs.Options.RasterizeDocument.Load.PageWidth = 8.50;
         codecs.Options.RasterizeDocument.Load.PageHeight = 11.00;
         codecs.Options.RasterizeDocument.Load.BottomMargin = 1.00;
         codecs.Options.RasterizeDocument.Load.RightMargin = 1.25;

         codecs.Options.Txt.Load.FontColor = new RasterColor(255, 0, 0);
         codecs.Options.Txt.Load.FontSize = 12;
         codecs.Options.Txt.Load.Bold = true;
         codecs.Options.Txt.Load.Enabled = true;

         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "txt.bmp"), RasterImageFormat.Bmp, image.BitsPerPixel);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTxtOptions.Load">
      <summary>Gets the options for loading TEXT files as raster images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The TEXT load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTxtOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJbigLoadOptions">
      <summary>Provides options specifically for loading JBIG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbigOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbigLoadOptions.Resolution">
      <summary>Gets or sets the resolution to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
        <para>Specify 0 for both dimensions to load the default resolution, which is the highest resolution layer,
            which corresponds to the image with its FULL DIMENSIONS.</para>
        <para>Ex: If the file contains the image at the following dimensions: 800X600, 400X 300 and 200X150, then
            in the default case the codec will load the image at 800X600.</para>
        <para>Specify either the desired width or desired height to load, and use 0 to get the default for the other
            dimension. The load procedure will determine the closest resolution layer, which best fits the user's
            request.</para>
        <para>Ex: If the file contains the image at the following dimensions: 800X600, 400X 300 and 200X150 and the
            user requests an image with width equal to 780 for example, then LEADTOOLS will automatically know that
            the proper width is 800 and load the image at the (800X600) resolution.</para>
        <para>Specify one of the exact sets of dimensions in the file.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbigOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsJbigOptions">
      <summary>Provides extra options for loading and saving JBIG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsJbigOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Ex: If the file contains the image 
         ' at the following dimensions: 800X600, 
         ' 400X 300 and 200X150 and the user requests 
         ' an image with width equal to 180 for example, 
         ' then LEADTOOLS will automatically know that the 
         ' proper width is 200 and load the image at the (200X150) resolution.         
         codecs.Options.Jbig.Load.Resolution = New LeadSize(180, 0)
         Dim sizes As LeadSize() = New LeadSize(2) {}
         sizes(0) = New LeadSize(800, 600)
         sizes(1) = New LeadSize(400, 300)
         sizes(2) = New LeadSize(200, 150)
         codecs.Options.Save.SetResolutions(sizes)
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jbg"), RasterImageFormat.Jbig, 8)
         srcImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jbg"))

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "jbg.bmp"), RasterImageFormat.Bmp, 1)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsJbigOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         RasterImage srcImage = codecs.Load(srcFileName);

         // Ex: If the file contains the image 
         // at the following dimensions: 800X600, 
         // 400X 300 and 200X150 and the user requests 
         // an image with width equal to 180 for example, 
         // then LEADTOOLS will automatically know that the 
         // proper width is 200 and load the image at the (200X150) resolution.         
         codecs.Options.Jbig.Load.Resolution = new LeadSize(180, 0);
         LeadSize[] sizes = new LeadSize[3];
         sizes[0] = new LeadSize(800,600);
         sizes[1] = new LeadSize(400, 300);
         sizes[2] = new LeadSize(200, 150);
         codecs.Options.Save.SetResolutions(sizes);
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jbg"), RasterImageFormat.Jbig, 8);
         srcImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1_test.jbg"));

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir,"jbg.bmp"), RasterImageFormat.Bmp, 1);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsJbigOptionsExample(Stream inStream, Stream outStreamJbig, Stream outStreamBmp)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage srcImage = codecs.Load(inStream);

         // Ex: If the file contains the image 
         // at the following dimensions: 800X600, 
         // 400X 300 and 200X150 and the user requests 
         // an image with width equal to 180 for example, 
         // then LEADTOOLS will automatically know that the 
         // proper width is 200 and load the image at the (200X150) resolution.         
         codecs.Options.Jbig.Load.Resolution = new LeadSize(180, 0);
         LeadSize[] sizes = new LeadSize[3];
         sizes[0] = new LeadSize(800, 600);
         sizes[1] = new LeadSize(400, 300);
         sizes[2] = new LeadSize(200, 150);
         codecs.Options.Save.SetResolutions(sizes);
         codecs.Save(srcImage, outStreamJbig, RasterImageFormat.Jbig, 8);

         srcImage = codecs.Load(outStreamJbig);
         codecs.Save(srcImage, outStreamBmp, RasterImageFormat.Bmp, 1);

         // Clean up
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsJbigOptionsExample(ByVal inStream As Stream, ByVal outStreamJbig As Stream, ByVal outStreamBmp As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim srcImage As RasterImage = codecs.Load(inStream)

         ' Ex: If the file contains the image 
         ' at the following dimensions: 800X600, 
         ' 400X 300 and 200X150 and the user requests 
         ' an image with width equal to 180 for example, 
         ' then LEADTOOLS will automatically know that the 
         ' proper width is 200 and load the image at the (200X150) resolution.         
         codecs.Options.Jbig.Load.Resolution = New LeadSize(180, 0)
         Dim sizes As LeadSize() = New LeadSize(2){}
         sizes(0) = New LeadSize(800, 600)
         sizes(1) = New LeadSize(400, 300)
         sizes(2) = New LeadSize(200, 150)
         codecs.Options.Save.SetResolutions(sizes)
         codecs.Save(srcImage, outStreamJbig, RasterImageFormat.Jbig, 8)

         srcImage = codecs.Load(outStreamJbig)
         codecs.Save(srcImage, outStreamBmp, RasterImageFormat.Bmp, 1)

         ' Clean up
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsJbigOptions.Load">
      <summary>Gets the options for loading JBIG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The JBIG load options.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing JBIG Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJbigOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEnumTagsEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.Id">
      <summary>Gets the tag id. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Tag to identify the data in the TIFF file. This may be any tag specified in
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.String,System.Int32,Leadtools.RasterTagMetadata)">RasterCodecs.WriteTag</see>, or any other tag added by the TIFF filter when saving
            the file. For example, all of the TIFF comments would generate a particular TIFF tag.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.MetadataType">
      <summary>Gets the tagged data type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <para>The tagged data type. Valid values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Byte</see>
              </term>
              <description>Byte</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Ascii</see>
              </term>
              <description>Byte in the range of 0 to 255</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.SByte</see>
              </term>
              <description>Byte used as signed number in the range of -128 to +127</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Undefined</see>
              </term>
              <description>Byte, with application-defined usage</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.UInt16</see>
              </term>
              <description>Two bytes, unsigned</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Int16</see>
              </term>
              <description>Two bytes, signed</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.UInt32</see>
              </term>
              <description>Four bytes, unsigned</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Int32</see>
              </term>
              <description>Four bytes, signed</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Single</see>
              </term>
              <description>Four bytes used as a floating point number</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Double</see>
              </term>
              <description>Eight bytes used as a double-precision floating point number</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.URational</see>
              </term>
              <description>Eight bytes, used as a pair of unsigned long integers, where the first number is the numerator and the
                 second is the denominator of a fraction</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Rational</see>
              </term>
              <description>Eight bytes, used as a pair of signed long integers, where the first number is the numerator and the
                 second is the denominator of a fraction</description>
            </item>
          </list>
        </para>
      </value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.Count">
      <summary>Gets the number of elements. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of elements of type <see cref="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.MetadataType" />. Note that this is not the same as the number of bytes. For
            example, if <see cref="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.Count" />is 10 and <see cref="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.MetadataType" /> is <see cref="T:Leadtools.RasterTagMetadataDataType">RasterTagMetadataDataType.Int32</see>, you
            will need 10 x 4 = 40 bytes to read the tag data</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEnumTagsEventArgs.Cancel">
      <summary>Gets or sets a value which allows the user to abort the enumeration process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the enumeration process, false to continue normally.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.TagFound">RasterCodecs.TagFound</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPngLoadOptions">
      <summary>Provides options specifically for loading PNG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPngLoadOptions.GetTrnsChunk">
      <summary>Gets the alpha transform chunk of the PNG file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of bytes that represents the alpha transform chunk of the PNG file.</returns>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPngLoadOptions.SetTrnsChunk(System.Byte[])">
      <summary>Sets the alpha transform chunk of the PNG file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="chunk">An array of bytes that represents the alpha transform chunk of the PNG file.</param>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPngSaveOptions">
      <summary>Provides options specifically for saving PNG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <remarks>
            For information about compression quality factors, refer to <see cref="T:Leadtools.Topics.CompressionQualityFactors">Compression Quality Factors</see>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPngSaveOptions.QualityFactor">
      <summary>Gets and sets the Quality Factor for saving PNG files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Any value between 0 and 9. 0 = (default compression), 1 (fastest compression) ... 9 (highest compression ratio).</value>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPngOptions">
      <summary>Provides extra options for loading and saving PNG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsPngOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' save with maximum quality
         codecs.Options.Png.Save.QualityFactor = 1
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "quality.png"), RasterImageFormat.Png, image.BitsPerPixel)

         ' save with maximum compression
         codecs.Options.Png.Save.QualityFactor = 9
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "compression.png"), RasterImageFormat.Png, image.BitsPerPixel)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsPngOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         RasterImage image = codecs.Load(srcFileName);

         // save with maximum quality
         codecs.Options.Png.Save.QualityFactor = 1;
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "quality.png"), RasterImageFormat.Png, image.BitsPerPixel);

         // save with maximum compression
         codecs.Options.Png.Save.QualityFactor = 9;
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "compression.png"), RasterImageFormat.Png, image.BitsPerPixel);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsPngOptionsExample(Stream inStream, Stream outStreamPng1, Stream outStreamPng2)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(inStream);

         // save with maximum quality
         codecs.Options.Png.Save.QualityFactor = 1;
         codecs.Save(image, outStreamPng1, RasterImageFormat.Png, image.BitsPerPixel);

         // save with maximum compression
         codecs.Options.Png.Save.QualityFactor = 9;
         codecs.Save(image, outStreamPng2, RasterImageFormat.Png, image.BitsPerPixel);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsPngOptionsExample(ByVal inStream As Stream, ByVal outStreamPng1 As Stream, ByVal outStreamPng2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(inStream)

         ' save with maximum quality
         codecs.Options.Png.Save.QualityFactor = 1
         codecs.Save(image, outStreamPng1, RasterImageFormat.Png, image.BitsPerPixel)

         ' save with maximum compression
         codecs.Options.Png.Save.QualityFactor = 9
         codecs.Save(image, outStreamPng2, RasterImageFormat.Png, image.BitsPerPixel)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPngOptions.Load">
      <summary>Gets the options for loading PNG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The PNG load options.</value>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPngOptions.Save">
      <summary>Gets the options for saving PNG images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The PNG save options.</value>
      <seealso cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPngOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEpsLoadOptions">
      <summary>Provides options specifically for loading EPS images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEpsOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEpsLoadOptions.ForceThumbnail">
      <summary>Enables or disables the loading of thumbnails from EPS files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true to force the loading of thumbnails (if present) in EPS files, false to load the actual EPS data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEpsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEpsOptions">
      <summary>Provides extra options for loading and saving EPS images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsEpsOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "test.eps"), RasterImageFormat.Eps, 8)
         srcImage.Dispose()
         codecs.Options.Eps.Load.ForceThumbnail = True
         srcImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "test.eps"))
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "eps.bmp"), RasterImageFormat.Bmp, 8)

         ' Clean up
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsEpsOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "test.eps"), RasterImageFormat.Eps, 8);
         srcImage.Dispose();
         codecs.Options.Eps.Load.ForceThumbnail = true;
         srcImage = codecs.Load( Path.Combine(LEAD_VARS.ImagesDir,"test.eps"));
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "eps.bmp"), RasterImageFormat.Bmp, 8);

         // Clean up
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEpsOptions.Load">
      <summary>Gets the options for loading EPS images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The EPS load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEpsOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEcwSaveOptions">
      <summary>Provides options specifically for saving ECW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEcwSaveOptions.QualityFactor">
      <summary>Gets or sets the quality factor for saving ECW files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            An integer value between 1 and 100 that specifies the quality factor used when saving ECW files where
            1 is maximum quality and 100 is maximum compression.  Default value is 1.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEcwLoadOptions">
      <summary>Provides options specifically for loading ECW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEcwLoadOptions.Resolution">
      <summary>Gets or sets the resolution to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The resolution to load.</value>
      <remarks>
        <para>Specify 0 for both dimensions to load the default resolution, which is the highest resolution layer, 
            which corresponds to the image with its FULL DIMENSIONS.</para>
        <para>Scenario 1: If the file contains the image at the following dimensions: 800X600, 400X300 and 200X150, then 
            in the default case the codec will load the image at 800X600.</para>
        <para>Specify either the desired width or desired height to load, and use 0 to get the default for the other 
            dimension. The load procedure will determine the closest resolution layer, which best fits the user's 
            request.</para>
        <para>Scenario 2: If the file contains the image at the following dimensions: 800X600, 400X300 and 200X150 and the 
            user requests an image with width equal to 780 for example, then LEADTOOLS will automatically know that 
            the proper width is 800 and load the image at the (800X600) resolution.</para>
        <para>Specify one of the exact sets of dimensions in the file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsEcwOptions">
      <summary>Provides extra options for loading and saving ECW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsEcwOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF")
         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' save with maximum quality
         codecs.Options.Ecw.Save.QualityFactor = 1
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "quality.ecw"), RasterImageFormat.Ecw, srcImage.BitsPerPixel)

         ' save with maximum compression
         codecs.Options.Ecw.Save.QualityFactor = 100
         codecs.Save(srcImage, Path.Combine(LEAD_VARS.ImagesDir, "compression.ecw"), RasterImageFormat.Ecw, srcImage.BitsPerPixel)

         ' load a small resolution
         codecs.Options.Ecw.Load.Resolution = New LeadSize(200, 200)
         Dim smallImage As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "quality.ecw"))

         ' Clean up
         smallImage.Dispose()
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsEcwOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF");
         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         // save with maximum quality
         codecs.Options.Ecw.Save.QualityFactor = 1;
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "quality.ecw"), RasterImageFormat.Ecw, srcImage.BitsPerPixel);

         // save with maximum compression
         codecs.Options.Ecw.Save.QualityFactor = 100;
         codecs.Save(srcImage,  Path.Combine(LEAD_VARS.ImagesDir, "compression.ecw"), RasterImageFormat.Ecw, srcImage.BitsPerPixel);

         // load a small resolution
         codecs.Options.Ecw.Load.Resolution = new LeadSize(200, 200);
         RasterImage smallImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "quality.ecw"));

         // Clean up
         srcImage.Dispose();
         smallImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEcwOptions.Save">
      <summary>Gets the options for saving ECW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The ECW save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsEcwOptions.Load">
      <summary>Gets the options for loading ECW images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The ECW load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsEcwOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterPdfVersion">
      <summary>Indicates the PDF file version. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>Used as value for <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Version">CodecsRasterPdfInfo.Version</see> to determine the version of the raster
            PDF file and <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version">CodecsPdfSaveOptions.Version</see> to specifcy the version of the raster PDF file
            to save.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> and <see cref="T:Leadtools.Codecs.CodecsPdfSaveOptions" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V12">
      <summary>
        <para>Adobe Acrobat PDF version 1.2</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V14">
      <summary>
        <para>Adobe Acrobat PDF version 1.4</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.PdfA">
      <summary>
        <para>Adobe Acrobat PDF/A. PDF/A is a subset of the PDF standard that contains only those features that are suited for long-term archival.
            Primarily this means that the document will be completely self-contained: it includes all content, font and color information</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V15">
      <summary>
        <para>Adobe Acrobat PDF version 1.5</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V16">
      <summary>
        <para>Adobe Acrobat PDF version 1.6</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V13">
      <summary>
        <para>Adobe Acrobat PDF version 1.3</para>
      </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsRasterPdfVersion.V17">
      <summary>
        <para>Adobe Acrobat PDF version 1.7</para>
      </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterPdfInfo">
      <summary>Contains information for a raster PDF file created with the LEADTOOLS Raster PDF plug in. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The various <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> methods are used to return information
            about a raster image file on disk or stream. The information such as the format, size, dimension, bits per pixel are returned as member
            of the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see>.</para>
        <para>Raster Adobe PDF saved with the various <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)" /> methods (using any of the
            <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see> flavors), contain extra information that can be obtained using
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetRasterPdfInfo(System.String,System.Int32)">RasterCodecs.GetRasterPdfInfo</see>. This method return an instance of
            <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> filled with these extra information as follows:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Member</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.IsLeadPdf" />
              </term>
              <description>
                <para>
                  <strong>true</strong> if the source file was created with the LEADTOOLS Raster PDF plug in, <strong>false</strong>; otherwise.
              If the value of this property is <strong>true</strong>, then other members of this structure are guarranteed to contain accurate information. If the
              value of this property is <strong>false</strong> and <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Format" /> is one of the PDF flavors
              (<see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see>, then the source file is a PDF not created with LEADTOOLS, and the other members of
              this structure may not be guarranteed to contain accurate information (except for <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Width" />, <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Height" />,
              <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.YResolution" />). If this property is <strong>true</strong>, then calling
              <see cref="M:Leadtools.Codecs.RasterCodecs.DeletePage(System.String,System.Int32)">RasterCodecs.DeletePage</see> is guarranteed to work on this file.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.BitsPerPixel" />
              </term>
              <description>
                <para>The bits per pixel value of the raster PDF page. This is the same value used as the <i>bitsPerPixel</i> parameter value to the
              <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file. You can set the value of
              <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.DisplayDepth">CodecsPdfLoadOptions.DisplayDepth</see> to this value to load a PDF page in the original
              bits per pixel value it was saved at.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Format" />
              </term>
              <description>
                <para>The format (compression type) of the raster PDF page, one of <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see>. This
              is the same value used as the <i>format</i> parameter value to the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this
              file.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Width" />
              </term>
              <description>
                <para>The width of the page in pixels. This is the same width of the <see cref="T:Leadtools.RasterImage" /> object to the
              <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Height" />
              </term>
              <description>
                <para>The height of the page in pixels. This is the same height of the <see cref="T:Leadtools.RasterImage" /> object to the
              <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.XResolution" />
              </term>
              <description>
                <para>The horizontal resolution of the page in dots per inch. This is the same horizontal resolution of the
              <see cref="T:Leadtools.RasterImage" /> object to the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file if
              <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.UseImageResolution">CodecsPdfSaveOptions.UseImageResolution</see> was set to <strong>true</strong>.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.YResolution" />
              </term>
              <description>
                <para>The vertical resolution of the page in dots per inch. This is the same vertical resolution of the
              <see cref="T:Leadtools.RasterImage" /> object to the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file. if
              <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.UseImageResolution">CodecsPdfSaveOptions.UseImageResolution</see> was set to <strong>true</strong>.</para>
              </description>
            </item>
            <item>
              <term>
                <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Version" />
              </term>
              <description>
                <para>The version of the PDF file. This is the same value as <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version">CodecsPdfSaveOptions.Version</see> used
              when saving this file with the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method.</para>
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <example>
        <para>
          <para>This example will create a multi-page raster PDF file with each page having its own size, compression and bits/pixel, then
            use <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" /> to split this file into several pages with each page saved with the original compression, size,
            dimension obtained from the file directly.</para>
        </para>
        <code lang="VB">      Private Shared Sub CodecsRasterPdfInfoExample()
         Dim multiPageRasterPdfFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "MultiPageRasterPdf.pdf")
         Dim pagesPdfFileNames As String = Path.Combine(LEAD_VARS.ImagesDir, "Page{0}.pdf")
         ' Create a 4 pages PDF file
         CreateMultiPageRasterPdfFile(multiPageRasterPdfFileName)

         ' Without prior information, we will split this multi-page PDF file into
         ' multiple single page PDF files with original size, resolution, bit-depth and compression
         Using codecs As New RasterCodecs()
            Dim pagesSaved As Integer = 0

            ' Get the file information
            Using imageInfo As CodecsImageInfo = codecs.GetInformation(multiPageRasterPdfFileName, True)
               Console.WriteLine( _
                  "Information: Format:\n Format: {0}\n Pages: {1}\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}", _
                  imageInfo.Format, imageInfo.TotalPages, imageInfo.BitsPerPixel, imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution)
               Console.WriteLine("-----------------------")

               ' Now show the PDF specific information
               ' Notice: GetInformation will return RasPdf as the format for all PDF files
               ' regardless of the actual compression
               If imageInfo.Format = RasterImageFormat.RasPdf Then
                  Console.WriteLine("Image is PDF, getting the specific info for each page")

                  For i As Integer = 0 To imageInfo.TotalPages - 1
                     Dim pageNumber As Integer = i + 1

                     Dim pdfInfo As CodecsRasterPdfInfo = codecs.GetRasterPdfInfo(multiPageRasterPdfFileName, i + 1)
                     If pageNumber = 1 Then
                        Console.WriteLine(" LEAD PDF?: {0}", pdfInfo.IsLeadPdf)
                        Console.WriteLine(" Version: {0}", pdfInfo.Version)
                     End If

                     If pdfInfo.IsLeadPdf Then
                        Console.WriteLine( _
                           "Page {0} of {1} info:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}\n Format: {7}", _
                           pageNumber, imageInfo.TotalPages, pdfInfo.BitsPerPixel, pdfInfo.Width, pdfInfo.Height, pdfInfo.XResolution, pdfInfo.YResolution, pdfInfo.Format)
                        Console.WriteLine("-----------------------")

                        ' Load this page with its original parameters
                        codecs.Options.RasterizeDocument.Load.XResolution = pdfInfo.XResolution
                        codecs.Options.RasterizeDocument.Load.YResolution = pdfInfo.YResolution
                        codecs.Options.Pdf.Load.DisplayDepth = pdfInfo.BitsPerPixel

                        Using pageImage As RasterImage = codecs.Load(multiPageRasterPdfFileName, 0, CodecsLoadByteOrder.BgrOrGray, pageNumber, pageNumber)
                           Console.WriteLine( _
                              "Page {0} of {1} loaded:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}", _
                              pageNumber, imageInfo.TotalPages, pageImage.BitsPerPixel, pageImage.Width, pageImage.Height, pageImage.XResolution, pageImage.YResolution)
                           Console.WriteLine("-----------------------")

                           ' Setup the PDF save options
                           codecs.Options.Pdf.Save.UseImageResolution = True
                           codecs.Options.Pdf.Save.Version = pdfInfo.Version

                           ' Save this page to a separate file
                           Dim pagePdfFileName As String = String.Format(pagesPdfFileNames, pageNumber)
                           codecs.Save(pageImage, pagePdfFileName, pdfInfo.Format, pdfInfo.BitsPerPixel)
                           pagesSaved = pagesSaved + 1
                        End Using
                     End If
                  Next
               End If
            End Using

            ' We are done, now show the info of the generated files
            For i As Integer = 0 To pagesSaved - 1
               Dim pageNumber As Integer = i + 1
               Dim pagePdfFileName As String = String.Format(pagesPdfFileNames, pageNumber)

               Dim pdfInfo As CodecsRasterPdfInfo = codecs.GetRasterPdfInfo(pagePdfFileName, 1)
               Console.WriteLine( _
                  "Page {0} of {1} info:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}\n Format: {7}", _
                  pageNumber, pagesSaved, pdfInfo.BitsPerPixel, pdfInfo.Width, pdfInfo.Height, pdfInfo.XResolution, pdfInfo.YResolution, pdfInfo.Format)
               Console.WriteLine("-----------------------")
            Next
         End Using
      End Sub

      Private Shared Sub CreateMultiPageRasterPdfFile(ByVal pdfFileName As String)
         Dim sourceFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp")

         ' Delete the destination PDF file if exists
         If System.IO.File.Exists(pdfFileName) Then
            System.IO.File.Delete(pdfFileName)
         End If

         Using codecs As New RasterCodecs()
            ' Save to PDF v1.4
            codecs.Options.Pdf.Save.Version = CodecsRasterPdfVersion.V14
            ' Save using image resolution
            codecs.Options.Pdf.Save.UseImageResolution = True

            ' Load the source file to use for each page
            Using pageImage As RasterImage = codecs.Load(sourceFile, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Console.WriteLine( _
                  "Original image dimension:\n Size: {0} by {1}\n Resolution: {2} by {3}", _
                  pageImage.Width, pageImage.Height, pageImage.XResolution, pageImage.YResolution)

               ' Array of bits/pixel and compression to use when saving the pages
               Dim bitsPerPixel() As Integer = _
               { _
                  1, _
                  8, _
                  24 _
               }
               Dim formats() As RasterImageFormat = _
               { _
                  RasterImageFormat.RasPdfG4, _
                  RasterImageFormat.RasPdfLzw, _
                  RasterImageFormat.RasPdfJpeg422 _
               }

               Dim pageCount As Integer = bitsPerPixel.Length
               For i As Integer = 0 To pageCount - 1
                  ' Append this page with given format
                  Console.WriteLine("Saving page {0} of {1} using {2} at {3}", i + 1, pageCount, bitsPerPixel(i), formats(i))
                  codecs.Save(pageImage, pdfFileName, formats(i), bitsPerPixel(i), 1, 1, -1, CodecsSavePageMode.Append)
               Next
            End Using

            Console.WriteLine("-----------------------")
         End Using
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private static void CodecsRasterPdfInfoExample()
      {
         string multiPageRasterPdfFileName = Path.Combine(LEAD_VARS.ImagesDir,"MultiPageRasterPdf.pdf");
         string pagesPdfFileNames = Path.Combine(LEAD_VARS.ImagesDir,"Page{0}.pdf");
         // Create a 4 pages PDF file
         CreateMultiPageRasterPdfFile(multiPageRasterPdfFileName);

         // Without prior information, we will split this multi-page PDF file into
         // multiple single page PDF files with original size, resolution, bit-depth and compression
         using(RasterCodecs codecs = new RasterCodecs())
         {
            int pagesSaved = 0;

            // Get the file information
            using(CodecsImageInfo imageInfo = codecs.GetInformation(multiPageRasterPdfFileName, true))
            {
               Console.WriteLine(
                  "Information: Format:\n Format: {0}\n Pages: {1}\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}",
                  imageInfo.Format, imageInfo.TotalPages, imageInfo.BitsPerPixel, imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution);
               Console.WriteLine("-----------------------");

               // Now show the PDF specific information
               // Notice: GetInformation will return RasPdf as the format for all PDF files
               // regardless of the actual compression
               if(imageInfo.Format == RasterImageFormat.RasPdf)
               {
                  Console.WriteLine("Image is PDF, getting the specific info for each page");

                  for(int i = 0; i &lt; imageInfo.TotalPages; i++)
                  {
                     int pageNumber = i + 1;

                     CodecsRasterPdfInfo pdfInfo = codecs.GetRasterPdfInfo(multiPageRasterPdfFileName, i + 1);
                     if(pageNumber == 1)
                     {
                        Console.WriteLine(" LEAD PDF?: {0}", pdfInfo.IsLeadPdf);
                        Console.WriteLine(" Version: {0}", pdfInfo.Version);
                     }

                     if(pdfInfo.IsLeadPdf)
                     {
                        Console.WriteLine(
                           "Page {0} of {1} info:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}\n Format: {7}",
                           pageNumber, imageInfo.TotalPages, pdfInfo.BitsPerPixel, pdfInfo.Width, pdfInfo.Height, pdfInfo.XResolution, pdfInfo.YResolution, pdfInfo.Format);
                        Console.WriteLine("-----------------------");

                        // Load this page with its original parameters
                        codecs.Options.RasterizeDocument.Load.XResolution = pdfInfo.XResolution;
                        codecs.Options.RasterizeDocument.Load.YResolution = pdfInfo.YResolution;
                        codecs.Options.Pdf.Load.DisplayDepth = pdfInfo.BitsPerPixel;

                        using(RasterImage pageImage = codecs.Load(multiPageRasterPdfFileName, 0, CodecsLoadByteOrder.BgrOrGray, pageNumber, pageNumber))
                        {
                           Console.WriteLine(
                              "Page {0} of {1} loaded:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}",
                              pageNumber, imageInfo.TotalPages, pageImage.BitsPerPixel, pageImage.Width, pageImage.Height, pageImage.XResolution, pageImage.YResolution);
                           Console.WriteLine("-----------------------");

                           // Setup the PDF save options
                           codecs.Options.Pdf.Save.UseImageResolution = true;
                           codecs.Options.Pdf.Save.Version = pdfInfo.Version;

                           // Save this page to a separate file
                           string pagePdfFileName = string.Format(pagesPdfFileNames, pageNumber);
                           codecs.Save(pageImage, pagePdfFileName, pdfInfo.Format, pdfInfo.BitsPerPixel);
                           pagesSaved++;
                        }
                     }
                  }
               }
            }

            // We are done, now show the info of the generated files
            for(int i = 0; i &lt; pagesSaved; i++)
            {
               int pageNumber = i + 1;
               string pagePdfFileName = string.Format(pagesPdfFileNames, pageNumber);

               CodecsRasterPdfInfo pdfInfo = codecs.GetRasterPdfInfo(pagePdfFileName, 1);
               Console.WriteLine(
                  "Page {0} of {1} info:\n Bits/Pixel: {2}\n Size: {3} by {4}\n Resolution: {5} by {6}\n Format: {7}",
                  pageNumber, pagesSaved, pdfInfo.BitsPerPixel, pdfInfo.Width, pdfInfo.Height, pdfInfo.XResolution, pdfInfo.YResolution, pdfInfo.Format);
               Console.WriteLine("-----------------------");
            }
         }
      }

      private static void CreateMultiPageRasterPdfFile(string pdfFileName)
      {
         string sourceFile = Path.Combine(LEAD_VARS.ImagesDir,"Sample1.cmp");

         // Delete the destination PDF file if exists
         if(System.IO.File.Exists(pdfFileName))
         {
            System.IO.File.Delete(pdfFileName);
         }

         using(RasterCodecs codecs = new RasterCodecs())
         {
            // Save to PDF v1.4
            codecs.Options.Pdf.Save.Version = CodecsRasterPdfVersion.V14;
            // Save using image resolution
            codecs.Options.Pdf.Save.UseImageResolution = true;

            // Load the source file to use for each page
            using(RasterImage pageImage = codecs.Load(sourceFile, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
            {
               Console.WriteLine(
                  "Original image dimension:\n Size: {0} by {1}\n Resolution: {2} by {3}",
                  pageImage.Width, pageImage.Height, pageImage.XResolution, pageImage.YResolution);

               // Array of bits/pixel and compression to use when saving the pages
               int[] bitsPerPixel =
               {
                  1,
                  8,
                  24
               };
               RasterImageFormat[] formats =
               {
                  RasterImageFormat.RasPdfG4,
                  RasterImageFormat.RasPdfLzw,
                  RasterImageFormat.RasPdfJpeg422
               };

               int pageCount = bitsPerPixel.Length;
               for(int i = 0; i &lt; pageCount; i++)
               {
                  // Append this page with given format
                  Console.WriteLine("Saving page {0} of {1} using {2} at {3}", i + 1, pageCount, bitsPerPixel[i], formats[i]);
                  codecs.Save(pageImage, pdfFileName, formats[i], bitsPerPixel[i], 1, 1, -1, CodecsSavePageMode.Append);
               }
            }

            Console.WriteLine("-----------------------");
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.IsLeadPdf">
      <summary>Gets or sets a value indicating whether the PDF file was created with the LEADTOOLS Raster PDF plug in. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the PDF file was created with the LEADTOOLS Raster PDF plug in, <strong>false</strong>; otherwise.</value>
      <remarks>
        <para>If the value of this property is <strong>true</strong>, then other members of this structure are guarranteed to contain accurate information.
            If the value of this property is <strong>false</strong> and <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.Format" /> is one of the PDF flavors
            (<see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see>, then the source file is a PDF not created with LEADTOOLS, and the other members of
            this structure may not be guarranteed to contain accurate information. If this property is <strong>true</strong>, then calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.DeletePage(System.String,System.Int32)">RasterCodecs.DeletePage</see> is guarranteed to work on this file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.BitsPerPixel">
      <summary>Gets or sets a value indicating the bits per pixel value of the raster PDF page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer that indicates the bits per pixel value of the raster PDF page.</value>
      <remarks>
        <para>The bits per pixel value of the raster PDF page. This is the same value used as the <i>bitsPerPixel</i> parameter value to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file. You can set the value of
            <see cref="P:Leadtools.Codecs.CodecsPdfLoadOptions.DisplayDepth">CodecsPdfLoadOptions.DisplayDepth</see> to this value to load a PDF page in the original
            bits per pixel value it was saved at.</para>
        <para>This property is guarranteed to contain accurate information only if the value of <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.IsLeadPdf" /> is <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.Format">
      <summary>Gets or sets the format (compression) type of the raster PDF page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>One of <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.RasPdfXyz</see> that indicates the format (compression) type of the raster PDF page. If the
            source file is not a raster PDF, the value of this property will be <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>.</value>
      <remarks>
        <para>This is the same value used as the <i>format</i> parameter value to the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to
            create this file.</para>
        <para>This property is guarranteed to contain accurate information only if the value of <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.IsLeadPdf" /> is <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.Width">
      <summary>Gets or sets the width of the PDF page in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The width of the PDF page in pixels.</value>
      <remarks>
        <para>The width of the page in pixels. This is the same width of the <see cref="T:Leadtools.RasterImage" /> object to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.Height">
      <summary>Gets or sets the height of the PDF page in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The height of the PDF page in pixels.</value>
      <remarks>
        <para>The height of the page in pixels. This is the same height of the <see cref="T:Leadtools.RasterImage" /> object to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.XResolution">
      <summary>Gets or sets the horizontal resolution of the PDF page in dots per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The horizontal resolution of the PDF page in dots per inch.</value>
      <remarks>
        <para>This is the same horizontal resolution of the <see cref="T:Leadtools.RasterImage" /> object to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file if
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.UseImageResolution">CodecsPdfSaveOptions.UseImageResolution</see> was set to
            <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.YResolution">
      <summary>Gets or sets the vertical resolution of the PDF page in dots per inch. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The vertical resolution of the PDF page in dots per inch.</value>
      <remarks>
        <para>This is the same vertical resolution of the <see cref="T:Leadtools.RasterImage" /> object to the
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method used to create this file if
            <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.UseImageResolution">CodecsPdfSaveOptions.UseImageResolution</see> was set to
            <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterPdfInfo.Version">
      <summary>Gets or sets the version of PDF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>One of the <see cref="T:Leadtools.Codecs.CodecsRasterPdfVersion" /> enumeration members that indicate the version of the PDF file.</value>
      <remarks>
        <para>This is the same value as <see cref="P:Leadtools.Codecs.CodecsPdfSaveOptions.Version">CodecsPdfSaveOptions.Version</see> used
            when saving this file with the <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.String,Leadtools.RasterImageFormat,System.Int32)">RasterCodecs.Save</see> method.</para>
        <para>This property is guarranteed to contain accurate information only if the value of <see cref="P:Leadtools.Codecs.CodecsRasterPdfInfo.IsLeadPdf" /> is <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterPdfInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsGifImageInfo">
      <summary>Provides information specific to GIF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsGifImageInfo.GetAnimationPalette">
      <summary>Gets the animation palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation palette.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.HasAnimationLoop">
      <summary>Determines whether or not the image has animation looping. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has animation looping, false otherwise.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.AnimationLoop">
      <summary>Determines whether or not the image has animation looping enabled. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>non-zero if the image has animation looping enabled, zero otherwise.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.AnimationWidth">
      <summary>Gets the animation width. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation width, in pixels.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.AnimationHeight">
      <summary>Gets the animation height. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation height, in pixels.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.HasAnimationBackground">
      <summary>Determines whether or not the image has animation background. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has animation background, false otherwise.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.AnimationBackground">
      <summary>Gets the animation background. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The animation background.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.HasAnimationPalette">
      <summary>Determines whether or not the image has animation palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has animation palette, false otherwise.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGifImageInfo.IsInterlaced">
      <summary>Determines whether or not the image is interlaced. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is interlaced, false otherwise.</value>
      <seealso cref="T:L.Topics.ImplementingJbigFeatures">Implementing GIF Features</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsVffView">
      <summary>Indicates the view to use when loading VFF (Sun TAAC Bitmap) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information and an example, refer to <see cref="T:Leadtools.Codecs.CodecsVffOptions" />.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.UpToDown">
      <summary>
            Up to down along the X-Axis
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.DownToUp">
      <summary>
            Down to up along the X-Axis
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.LeftToRight">
      <summary>
            Left to right along the Y-Axis
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.RightToLeft">
      <summary>
            Right to left along the Y-Axis
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.FrontToRear">
      <summary>
            Front to rear along the Z-Axis
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsVffView.RearToFront">
      <summary>
            Rear to front along the Z-Axis
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsVffLoadOptions">
      <summary>Provides options for loading VFF (Sun TAAC Bitmap) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to 
            <see cref="T:L.Topics.FileFormatsVff">File Formats - VFF Format</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsVffLoadOptionsExample()
         Dim codecs As New RasterCodecs()
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.vff")
         Dim dstFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Vff_UpToDown.bmp")
         Dim dstFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Vff_LeftToRight.bmp")

         ' Set the load options to use up to down along the X-Axis
         codecs.Options.Vff.Load.View = CodecsVffView.UpToDown

         ' Load the source file
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Save the image as BMP
            codecs.Save(image, dstFileName1, RasterImageFormat.Bmp, 24)
         End Using

         ' Now, set the load options to use left to right along the Y-Axis
         codecs.Options.Vff.Load.View = CodecsVffView.LeftToRight

         ' Re-load the source file
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Save the image as BMP
            codecs.Save(image, dstFileName2, RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsVffLoadOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.vff");
         string dstFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Vff_UpToDown.bmp");
         string dstFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Vff_LeftToRight.bmp");

         // Set the load options to use up to down along the X-Axis
         codecs.Options.Vff.Load.View = CodecsVffView.UpToDown;

         // Load the source file
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Save the image as BMP
            codecs.Save(image, dstFileName1, RasterImageFormat.Bmp, 24);
         }

         // Now, set the load options to use left to right along the Y-Axis
         codecs.Options.Vff.Load.View = CodecsVffView.LeftToRight;

         // Re-load the source file
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Save the image as BMP
            codecs.Save(image, dstFileName2, RasterImageFormat.Bmp, 24);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsVffLoadOptions.View">
      <summary>Gets or sets the view to use when loading VFF (Sun TAAC Bitmap) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The view to use when loading VFF (Sun TAAC Bitmap) images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsVffLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsVffOptions">
      <summary>Provides extra options for loading and saving VFF (Sun TAAC Bitmap) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsVffLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsVffOptions.Load">
      <summary>Gets the options for loading VFF (Sun TAAC Bitmap) images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The options to use when loading VFF (Sun TAAC Bitmap) images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsVffLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPsdChannelInfo">
      <summary>Provides information about a specified channel in the PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information on PSD channels, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdChannel(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdChannelInfo)">RasterCodecs.LoadPsdChannel</see>.
            </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPsdChannelInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsPsdChannelInfo" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdChannel(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdChannelInfo)">RasterCodecs.LoadPsdChannel</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdChannelInfo.ChannelType">
      <summary>The type of the channel in the PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsPsdChannelType" /> object that specifies the type of the channel in the PSD file.</value>
      <remarks>
        <para>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdChannel(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdChannelInfo)">RasterCodecs.LoadPsdChannel</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdChannelInfo.Name">
      <summary>Gets the name for the channel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the name for the channel.</value>
      <remarks>
        <para>The channel name will be stored in the file.</para>
        <para>For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdChannel(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdChannelInfo)">RasterCodecs.LoadPsdChannel</see>.
            </example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsColorSpaceType">
      <summary>Indicates the colorspace of the image data <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsColorSpaceType.Bgr">
      <summary>
            BGR colorspace
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsColorSpaceType.Yuv">
      <summary>
            YUV colorspace
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsColorSpaceType.Cmyk">
      <summary>
            CMYK colorspace
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsColorSpaceType.CieLab">
      <summary>
            CIELab colorspace
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsAsyncCompletedEventArgs">
      <summary>Base class for the <see cref="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs" /> and <see cref="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs" /> classes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports asynchronous operations for getting information and loading of images through the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> and <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see>
            methods. These methods will not block the calling thread and perform their work in the background. When the operation is completed, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> or
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> events will fire with the operation status and result.</para>
        <para>Both of these events use data arguments object of classes derived from <see cref="T:Leadtools.Codecs.CodecsAsyncCompletedEventArgs" />. For more information,
            refer to <see cref="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs" /> and <see cref="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs" />.</para>
        <para>The <see cref="T:Leadtools.Codecs.CodecsAsyncCompletedEventArgs" /> class derives from .NET <see cref="T:System.ComponentModel.AsyncCompletedEventArgs">System.ComponentModel.AsyncCompletedEventArgs</see>
            and use this class properties to provide information on the status of the asynchronous operation.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> and
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see></example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.#ctor(System.Uri,System.IO.Stream,System.String,System.Exception,System.Boolean,System.Object)">
      <summary>Creates new instance of the <see cref="T:Leadtools.Codecs.CodecsAsyncCompletedEventArgs" /> with the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="uri">The <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> this asynchronous operation is using.</param>
      <param name="stream">The <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> this asynchronous operation is using.</param>
      <param name="fileName">The file name this asynchronous operation is using.</param>
      <param name="error">Any error that occurred during the asynchronous operation.</param>
      <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
      <param name="userState">The optional user-supplied state object passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method that initialized the construction of this object.</param>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> and
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri">
      <summary>Gets the URI this asynchronous operation is using. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> this asynchronous operation is using.</value>
      <remarks>
        <para>Only one of the following can be a valid value (not a null reference) at any time: <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" />, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> or <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" />.
            The property that contains a valid reference depends on what version of <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method has been called.</para>
        <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">RasterCodecs.LoadAsync(Uri uri, object userState)</see> is being called, the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If 
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">RasterCodecs.LoadAsync(String fileName, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> and
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream">
      <summary>Gets the stream this asynchronous operation is using. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> this asynchronous operation is using.</value>
      <remarks>
        <para>Only one of the following can be a valid value (not a null reference) at any time: <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" />, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> or <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" />.
            The property that contains a valid reference depends on what version of <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method has been called.</para>
        <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">RasterCodecs.LoadAsync(Uri uri, object userState)</see> is being called, the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">RasterCodecs.LoadAsync(String fileName, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> and
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see></example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName">
      <summary>Gets the file name this asynchronous operation is using. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The file name this asynchronous operation is using.</value>
      <remarks>
        <para>Only one of the following can be a valid value (not a null reference) at any time: <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" />, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> or <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" />.
            The property that contains a valid reference depends on what version of <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method has been called.</para>
        <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">RasterCodecs.LoadAsync(Uri uri, object userState)</see> is being called, the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If 
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">RasterCodecs.LoadAsync(String fileName, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> and
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see></example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs">
      <summary>Contains data for the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports getting information on image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> that is in a loading status
            (<see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes getting the information on the file, the various properties of the
            <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> will be populated with the image file information and the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> property to check when the
            image information has been collected, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event use data argument object of
            type <see cref="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs" />. This class contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Property</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri">Uri</see>, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream">Stream</see> and
                 <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName">FileName</see></term>
            <description>
              <para>Contains the URI, stream or file name passed to the method that initialized this asynchronous operation.</para>
              <para>Only one of these properties can be a valid value (not a null reference) at any time The property that contains a valid reference depends on what
            version of <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> method has been called.</para>
              <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.Uri,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync(Uri uri, bool totalPages, int pageNumberobject, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method while
            <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync(string fileName, bool totalPages, int pageNumberobject, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">Info</see>
            </term>
            <description>
              <para>Contains the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> class instance that contains the information about the image file. This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the information and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">Info</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see>
            </term>
            <description>
              <para>Contains any errors that might have occured during the asynchronous operation. You musg check this value when the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event fires and make sure it does not
            contain a valid <see cref="T:System.Exception" /> object.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">Cancelled</see>
            </term>
            <description>
              <para>Contains a value indicating whether an asynchronous operation has been canceled. For example, by calling <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync">RasterCodecs.CancelAsync</see> when using <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> with a URL</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.#ctor(Leadtools.Codecs.CodecsImageInfo,System.Uri,System.IO.Stream,System.String,System.Exception,System.Boolean,System.Object)">
      <summary>Creates new instance of the <see cref="T:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs" /> with the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="info">The <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object instance being used.</param>
      <param name="uri">The <see cref="T:System.Uri" /> this asynchronous operation is using.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> this asynchronous operation is using.</param>
      <param name="fileName">The file name this asynchronous operation is using.</param>
      <param name="error">Any error that occurred during the asynchronous operation.</param>
      <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
      <param name="userState">The optional user-supplied state object passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method that initialized the construction of this object.</param>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">
      <summary>Gets the <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> class instance that contains the information about the image file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsImageInfo" /> object that contains the information about the image file, or a null reference (Nothing in Visual Basic)
            if an error occured.</value>
      <remarks>
        <para>This property contains the information about the image file. This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.Codecs.CodecsImageInfo.IsLoading">CodecsImageInfo.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the information and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsGetInformationAsyncCompletedEventArgs.Info">Info</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
        <para>When an error occur, either the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> property is not a null reference or
            the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">Cancelled</see> property is <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs">
      <summary>Contains data for the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event use data argument object of
            type <see cref="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs" />. This class contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Property</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri">Uri</see>, <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream">Stream</see> and
                 <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName">FileName</see></term>
            <description>
              <para>Contains the URI, stream or file name passed to the method that initialized this asynchronous operation.</para>
              <para>Only one of these properties can be a valid value (not a null reference) at any time The property that contains a valid reference depends on what
            version of <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method has been called.</para>
              <para>For example, if
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.Uri,System.Object)">RasterCodecs.LoadAsync(Uri uri, object userState)</see> is being called, the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> will contain the same URI passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will both be null. If 
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,System.Object)">RasterCodecs.LoadAsync(String fileName, object userState)</see> is being called,
            the <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.FileName" /> will contain the same file name string value passed to the method
            while <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Uri" /> and <see cref="P:Leadtools.Codecs.CodecsAsyncCompletedEventArgs.Stream" /> will both be null and so on.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">Image</see>
            </term>
            <description>
              <para>Contains the <see cref="T:Leadtools.RasterImage" /> class instance that contains the image data being loaded. This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the image information and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">Image</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see>
            </term>
            <description>
              <para>Contains any errors that might have occured during the asynchronous operation. You musg check this value when the
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event fires and make sure it does not
            contain a valid <see cref="T:System.Exception" /> object.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">Cancelled</see>
            </term>
            <description>
              <para>Contains a value indicating whether an asynchronous operation has been canceled. For example, by calling <see cref="M:Leadtools.Codecs.RasterCodecs.CancelAsync">RasterCodecs.CancelAsync</see> when using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> with a URL</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.#ctor(Leadtools.RasterImage,System.Uri,System.IO.Stream,System.String,System.Exception,System.Boolean,System.Object)">
      <summary>Creates new instance of the <see cref="T:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs" /> with the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object instance being used.</param>
      <param name="uri">The <see cref="T:System.Uri" /> this asynchronous operation is using.</param>
      <param name="stream">The <see cref="T:System.IO.Stream" /> this asynchronous operation is using.</param>
      <param name="fileName">The file name this asynchronous operation is using.</param>
      <param name="error">Any error that occurred during the asynchronous operation.</param>
      <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
      <param name="userState">The optional user-supplied state object passed to the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>
            or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method that initialized the construction of this object.</param>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">
      <summary>Gets the <see cref="T:Leadtools.RasterImage" /> class instance that is being loaded. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that is being loaded, or a null reference (Nothing in Visual Basic)
            if an error occured.</value>
      <remarks>
        <para>This instance is the same
            object returned from the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> method. While the asynchronous operation
            is running, the value of the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> will be <strong>true</strong> indicating that
            the object is being populated with the image data and should not be used. Whe the asynchronous operation compelets, the
            <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event will fire and
            <see cref="P:Leadtools.Codecs.CodecsLoadAsyncCompletedEventArgs.Image">Image</see> will contain the final and ready to use object. If an error occurs,
            this property will be set to null and the object is disposed internally by the toolkit.</para>
        <para>When an error occur, either the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error">Error</see> property is not a null reference or
            the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">Cancelled</see> property is <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsFaxImageInfo">
      <summary>Provides information specific to FAX images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsFaxImageInfo.IsCompressed">
      <summary>Determines whether or not the image is compressed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image is compressed, false otherwise.</value>
      <seealso cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</seealso>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPsdImageInfo">
      <summary>Provides information specific to PSD images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdImageInfo.Layers">
      <summary>Gets the number of layers in the PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that represents the number of layers in the PSD file.</value>
      <remarks>
        <para>If this value is 0, then the PSD file does not contain any layers.</para>
        <para>For more information on PSD layers, refer to the FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdImageInfo.Channels">
      <summary>Gets the number of channels in the PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that represents the number of channels in the PSD file.</value>
      <remarks>
        <para>If this value is 0, then the PSD file does not contain any channel.</para>
        <para>For more information on PSD channels, refer to the FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsImageInfo" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsCodecLoadMode">
      <summary>The handling mode for a file codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS maintains a list of codecs used for querying for the file information.</para>
        <para>Fixed codecs are never unloaded from the list. This makes the file detection of file formats very fast.</para>
        <para>Dynamic codecs are dynamically unloaded when the number of loaded codecs exceeds the number set through
            <see cref="M:Leadtools.Codecs.RasterCodecs.PreloadCodecs(System.Int32,System.Int32,System.String)">RasterCodecs.PreloadCodecs</see>.</para>
        <para>Ignored codecs will never be used. You cannot load, save or obtain information on file formats normally handled by a
            codec that is ignored.</para>
        <para>Once you save or load a file handled by a certain codec, that codec will be permanently loaded into memory. From that
            point on, setting the codecs load mode has no effect.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCodecLoadMode.Dynamic">
      <summary>
            The codec is dynamically loaded and freed as necessary.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCodecLoadMode.Fixed">
      <summary>
            The codec is loaded into memory and will never be unloaded. (This makes the file handling very fast).
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCodecLoadMode.Ignored">
      <summary>
            The codec is ignored. You cannot load, save or get the file information for any files normally handled by this codec.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsCodecInformation">
      <summary>Provides information about a Leadtools file codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsCodecInformation.ToString">
      <summary>Returns the value of the <see cref="P:Leadtools.Codecs.CodecsCodecInformation.Name" /> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>The value of the <see cref="P:Leadtools.Codecs.CodecsCodecInformation.Name" /> property.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.Name">
      <summary>Gets the codec assembly file name. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A string containing the codec assembly file name.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.ExtensionList">
      <summary>Gets or sets the list of extensions that the Leadtools codec supports. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A string containing the list of extensions that the Leadtools codec supports. Each extension is separated by the
            ";" character.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.IsPresent">
      <summary>Determines whether or not the Leadtools codec is present on the system. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the codec is present on the system, false otherwise.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.LoadMode">
      <summary>Gets and sets the load mode for the Leadtools codec. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The load mode for the Leadtools codec.</value>
      <remarks>
            Affects the behaviour of <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)">RasterCodecs.Load</see>, <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see>,
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> and <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>. This can be one of three values:
            Ignored (do not use this codec), Fixed (this codec is always loaded), Dynamic (this codec is load when needed, and unloaded
            when finished).
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.CheckedByInformation">
      <summary>Identifies if a particular file codec is used when processing a call to <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> or
            <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the filter codec is used, false otherwise.</value>
      <remarks>
            A call to has three phases used in identifying a file format.  The first phase checks the first few bytes.  The second
            phase checks the file extension.  The third phase tries all available codec filters. When this value is 'false', the
            corresponding file codec is excluded from all phases.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsCodecInformation.IsSlowInformation">
      <summary>Identifies if a particular file codec has been marked as taking a relatively long time to load a file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true if the codec takes a long time to load a file, false otherwise.</value>
      <remarks>
            Value that indicates if the codec takes a long time to load.  There are three phases used in identifying a file format.
            The first phase checks the first few bytes.  The second phase checks the file extension.  The third phase tries all
            available codec filters. When this value is 'true', it means that the file format can not be identified by looking at the
            first few bytes of the file.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.GetCodecInformation(System.String)">RasterCodecs.GetCodecInformation</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTiffLoadOptions">
      <summary>Provides options specifically for loading TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.ImageFileDirectoryOffset">
      <summary>Gets or sets the offset within a TIFF file where a page starts. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The offset within a TIFF file where the page starts.</value>
      <remarks>
        <para>This serves as a reference page for loading pages from a large TIFF file.</para>
        <para>The value of the <see cref="P:Leadtools.Codecs.CodecsTiffLoadOptions.UseImageFileDirectoryOffset" /> must be set to true in order for the toolkit to use
            the <see cref="P:Leadtools.Codecs.CodecsTiffLoadOptions.ImageFileDirectoryOffset" /> value when loading TIFF images.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write a comment, tag, metadata, or GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.UseImageFileDirectoryOffset">
      <summary>Enables or disables using the IFD offset. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the <see cref="P:Leadtools.Codecs.CodecsTiffLoadOptions.ImageFileDirectoryOffset" /> when loading TIFF images.</value>
      <remarks>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write a comment, tag, metadata, or GeoKey. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.IgnoreViewPerspective">
      <summary>Indicates whether or not to ignore the view perspective stored in the file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to load the file as <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>.</value>
      <remarks>
            If you are loading a TIFF or Exif file that looks rotated or flipped, try setting this property before loading the file.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.IgnorePhotometricInterpretation">
      <summary>Enables or disables loading Flash-Pix files without the color transforms. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to ignore the color transforms.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.UseFastConversion">
      <summary>Enables or disables use of the fast color conversions when loading CMYK or CIELab files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to enable fast color conversion, false to disable it.</value>
      <remarks>
            Setting this property to true will greatly speed up the loading of CMYK and CIELab files,
            but it will reduce the image quality.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffLoadOptions.IgnoreAdobeColorTransform">
      <summary>Ignore the Adobe marker containing color transformations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to ignore the Adobe marker, false to use it.</value>
      <remarks>
            Set this property to True load corrupt files with wrong APPE marker which have incorrect colors.
            </remarks>
      <seealso cref="T:L.Topics.CompressionUsingLEADandJPEGFormats">Compression Using LEAD and JPEG Formats</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.LoadCorrupted" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsJpegOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTiffSaveOptions">
      <summary>Provides options specifically for saving TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.NoSubFileType">
      <summary>Enables or disables writing a subfile type TIFF tag when writing any TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to prevent writing a subfile type TIFF tag when writing any TIFF file.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.NoPageNumber">
      <summary>Enables or disables updating the PageNumber tag associated with the pages of a multipage TIFF file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to disable updating the PageNumber tag associated with the pages of a multipage TIFF file.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.NoPalette">
      <summary>Enables or disables saving a TIFF file as grayscale, without a palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            true to save a TIFF file as grayscale, without a palette.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset">
      <summary>Enables or disables using the IFD offset. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset" /> value when saving TIFF images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset">
      <summary>Gets or sets the offset within a TIFF file where a page starts. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The offset within a TIFF file where the page starts.</value>
      <remarks>
        <para>This serves as a reference page for saving pages from a large TIFF file.</para>
        <para>The value of the <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseImageFileDirectoryOffset" /> must be set to true in order for the toolkit to use
            the <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.ImageFileDirectoryOffset" /> value when saving TIFF images.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.UsePhotometricInterpretation">
      <summary>Enables or disables using Photometric Interpretation when saving TIFF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use Photometric Interpretation when saving TIFF files.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.PhotometricInterpretation">
      <summary>Gets or sets the Photometric Interpretation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The Photometric Interpretation.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseTileSize">
      <summary>Enables and disables using the tile size when saving TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> and <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> when saving TIFF images.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth">
      <summary>Gets or sets the width of the tile to use when saving TIFF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width of the tile to use when saving TIFF files.</value>
      <remarks>
        <para>When saving TIFF files, the size of the tiles or strips saved in the file can be controlled. Some graphic packages
            cannot load TIFF files unless the files are saved with a certain tile or strip size. LEADTOOLS can load files of any strip
            and tile size, so modifying these settings is not necessary when saving files that will be loaded with LEADTOOLS.</para>
        <para>If the <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseTileSize" /> Property is not true, then <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> and <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> are
            ignored. In this case, the image will be saved like in the previous versions of LEADTOOLS.</para>
        <para>If <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> is less than or equal to the image width, the image will be saved as tiles. If
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> is greater than the image width, the image will be saved as strips.  If the image is saved as
            tiles, <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> controls the height of the tile. If the image is saved as strips, <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" />
            controls the height of the strip. The image can be saved as one strip by setting <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> to a value
            greater than the image height.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight">
      <summary>Gets or sets the height of the tile to use when saving TIFF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height of the tile to use when saving TIFF files.</value>
      <remarks>
        <para>When saving TIFF files, the size of the tiles or strips saved in the file can be controlled. Some graphic packages
            cannot load TIFF files unless the files are saved with a certain tile or strip size. LEADTOOLS can load files of any strip
            and tile size, so modifying these settings is not necessary when saving files that will be loaded with LEADTOOLS.</para>
        <para>If the <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.UseTileSize" /> Property is not true, then <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> and <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> are
            ignored. In this case, the image will be saved like in the previous versions of LEADTOOLS.</para>
        <para>If <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> is less than or equal to the image width, the image will be saved as tiles. If
            <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileWidth" /> is greater than the image width, the image will be saved as strips.  If the image is saved as
            tiles, <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> controls the height of the tile. If the image is saved as strips, <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" />
            controls the height of the strip. The image can be saved as one strip by setting <see cref="P:Leadtools.Codecs.CodecsTiffSaveOptions.TileHeight" /> to a value
            greater than the image height.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.PreservePalette">
      <summary>Enables and disables preservation of the palette when saving TIFF CCITT files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to enable preservation of the palette when saving TIFF CCITT files.</value>
      <remarks>
            Note, this may decrease the compression ratio.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.UsePredictor">
      <summary>Gets a value indicating whether to use a predictor when saving LZW data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use a predictor when saving LZW data; otherwise, false.</value>
      <remarks>
            This is for TIF LZW or Raw LZW data that is 8 bpp or more.  This property is ignored if the LZW data is less than 8 bpp.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.SavePlanar">
      <summary>Gets a value indicating whether to save CMYK TIFF data as planar. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to save CMYK TIFF data as planar; otherwise, false.</value>
      <remarks>
            This is for CMYK TIFF images.  This property is ignored for other formats/colorspaces.
            </remarks>
      <seealso cref="T:Leadtools.Topics.HandlingCMYKFilesAsSeparateBitmaps">Handling CMYK Files as Separate Images</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffSaveOptions.NoLzwAutoClear">
      <summary>Gets a value indicating whether to automatically insert CLEAR codes during LZW compression. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to disable insert of CLEAR codes; otherwise, false.</value>
      <remarks>
        <para>This option can be used when saving TIFF LZW files.  To save files compatible with some buggy LZW decoders that cannot
            handle early CLEAR codes. Some IBM decoders are known to have this problem.  They will not decode LEAD TIFF LZW files
            unless this property is set to true.</para>
        <para>This property is set to false by default, which allows LEADTOOLS to insert CLEAR LZW codes and reset the LZW 
            compression engine if the compression ratio is not adequate.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsTiffOptions">
      <summary>Provides extra options for loading and saving TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsTiffOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF")

         ' Get all Information about the Tiff file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(srcFileName, True)

         If imageInfo.Tiff.IsImageFileDirectoryOffsetValid Then
            codecs.Options.Tiff.Load.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset
            codecs.Options.Tiff.Save.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset
         End If

         codecs.Options.Tiff.Load.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid
         codecs.Options.Tiff.Save.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid

         codecs.Options.Tiff.Load.IgnorePhotometricInterpretation = True

         Dim image As RasterImage = codecs.Load(srcFileName)

         codecs.Options.Tiff.Save.NoPalette = imageInfo.Tiff.HasNoPalette
         codecs.Options.Tiff.Save.PreservePalette = imageInfo.Tiff.HasNoPalette

         'Set the tiffSave options
         codecs.Options.Tiff.Save.NoPageNumber = False
         codecs.Options.Tiff.Save.NoSubFileType = False
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = True
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.YcbCr
         codecs.Options.Tiff.Save.UseTileSize = True
         codecs.Options.Tiff.Save.TileHeight = 200
         codecs.Options.Tiff.Save.TileWidth = 200

         'saving the image
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "testtiff1.TIF"), RasterImageFormat.Tif, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         'change some tiffsave options.
         codecs.Options.Tiff.Save.NoPageNumber = True
         codecs.Options.Tiff.Save.NoSubFileType = True
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = False
         codecs.Options.Tiff.Save.UseTileSize = False
         codecs.Options.Tiff.Save.NoPalette = False
         codecs.Options.Tiff.Save.PreservePalette = True
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.Palette

         'save the image with different name.
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "testtiff2.TIF"), RasterImageFormat.CcittGroup4, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsTiffOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF");

         // Get all Information about the Tiff file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(srcFileName, true);

         if (imageInfo.Tiff.IsImageFileDirectoryOffsetValid)
         {
            codecs.Options.Tiff.Load.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset;
            codecs.Options.Tiff.Save.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset;
         }

         codecs.Options.Tiff.Load.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid;
         codecs.Options.Tiff.Save.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid;

         codecs.Options.Tiff.Load.IgnorePhotometricInterpretation = true;

         RasterImage image = codecs.Load(srcFileName);

         codecs.Options.Tiff.Save.NoPalette = imageInfo.Tiff.HasNoPalette;
         codecs.Options.Tiff.Save.PreservePalette = imageInfo.Tiff.HasNoPalette;

         //Set the tiffSave options
         codecs.Options.Tiff.Save.NoPageNumber = false;
         codecs.Options.Tiff.Save.NoSubFileType = false;
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = true;
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.YcbCr;
         codecs.Options.Tiff.Save.UseTileSize = true;
         codecs.Options.Tiff.Save.TileHeight = 200;
         codecs.Options.Tiff.Save.TileWidth = 200;

         //saving the image
         codecs.Save(image,  Path.Combine(LEAD_VARS.ImagesDir, "testtiff1.TIF"), RasterImageFormat.Tif, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         //change some tiffsave options.
         codecs.Options.Tiff.Save.NoPageNumber = true;
         codecs.Options.Tiff.Save.NoSubFileType = true;
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = false;
         codecs.Options.Tiff.Save.UseTileSize = false;
         codecs.Options.Tiff.Save.NoPalette = false;
         codecs.Options.Tiff.Save.PreservePalette = true;
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.Palette;

         //save the image with different name.
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "testtiff2.TIF"), RasterImageFormat.CcittGroup4, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CodecsTiffOptionsExample(Stream inStreamTif, Stream outStreamTif, Stream outStreamCcittG4)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Get all Information about the Tiff file that you want to load.
         CodecsImageInfo imageInfo = codecs.GetInformation(inStreamTif, true);

         if (imageInfo.Tiff.IsImageFileDirectoryOffsetValid)
         {
            codecs.Options.Tiff.Load.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset;
            codecs.Options.Tiff.Save.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset;
         }

         codecs.Options.Tiff.Load.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid;
         codecs.Options.Tiff.Save.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid;

         codecs.Options.Tiff.Load.IgnorePhotometricInterpretation = true;

         RasterImage image = codecs.Load(inStreamTif);

         codecs.Options.Tiff.Save.NoPalette = imageInfo.Tiff.HasNoPalette;
         codecs.Options.Tiff.Save.PreservePalette = imageInfo.Tiff.HasNoPalette;

         //Set the tiffSave options
         codecs.Options.Tiff.Save.NoPageNumber = false;
         codecs.Options.Tiff.Save.NoSubFileType = false;
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = true;
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.YcbCr;
         codecs.Options.Tiff.Save.UseTileSize = true;
         codecs.Options.Tiff.Save.TileHeight = 200;
         codecs.Options.Tiff.Save.TileWidth = 200;

         //saving the image
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         //change some tiffsave options.
         codecs.Options.Tiff.Save.NoPageNumber = true;
         codecs.Options.Tiff.Save.NoSubFileType = true;
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = false;
         codecs.Options.Tiff.Save.UseTileSize = false;
         codecs.Options.Tiff.Save.NoPalette = false;
         codecs.Options.Tiff.Save.PreservePalette = true;
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.Palette;

         //save the image with different name.
         codecs.Save(image, outStreamCcittG4, RasterImageFormat.CcittGroup4, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CodecsTiffOptionsExample(ByVal inStreamTif As Stream, ByVal outStreamTif As Stream, ByVal outStreamCcittG4 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Get all Information about the Tiff file that you want to load.
         Dim imageInfo As CodecsImageInfo = codecs.GetInformation(inStreamTif, True)

         If imageInfo.Tiff.IsImageFileDirectoryOffsetValid Then
            codecs.Options.Tiff.Load.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset
            codecs.Options.Tiff.Save.ImageFileDirectoryOffset = imageInfo.Tiff.ImageFileDirectoryOffset
         End If

         codecs.Options.Tiff.Load.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid
         codecs.Options.Tiff.Save.UseImageFileDirectoryOffset = imageInfo.Tiff.IsImageFileDirectoryOffsetValid

         codecs.Options.Tiff.Load.IgnorePhotometricInterpretation = True

         Dim image As RasterImage = codecs.Load(inStreamTif)

         codecs.Options.Tiff.Save.NoPalette = imageInfo.Tiff.HasNoPalette
         codecs.Options.Tiff.Save.PreservePalette = imageInfo.Tiff.HasNoPalette

         'Set the tiffSave options
         codecs.Options.Tiff.Save.NoPageNumber = False
         codecs.Options.Tiff.Save.NoSubFileType = False
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = True
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.YcbCr
         codecs.Options.Tiff.Save.UseTileSize = True
         codecs.Options.Tiff.Save.TileHeight = 200
         codecs.Options.Tiff.Save.TileWidth = 200

         'saving the image
         codecs.Save(image, outStreamTif, RasterImageFormat.Tif, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         'change some tiffsave options.
         codecs.Options.Tiff.Save.NoPageNumber = True
         codecs.Options.Tiff.Save.NoSubFileType = True
         codecs.Options.Tiff.Save.UsePhotometricInterpretation = False
         codecs.Options.Tiff.Save.UseTileSize = False
         codecs.Options.Tiff.Save.NoPalette = False
         codecs.Options.Tiff.Save.PreservePalette = True
         codecs.Options.Tiff.Save.PhotometricInterpretation = CodecsTiffPhotometricInterpretation.Palette

         'save the image with different name.
         codecs.Save(image, outStreamCcittG4, RasterImageFormat.CcittGroup4, image.BitsPerPixel, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffOptions.Load">
      <summary>Gets the options for loading TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The TIFF load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsTiffOptions.Save">
      <summary>Gets the options for saving TIFF images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The TIFF save options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsTiffOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPtokaLoadOptions">
      <summary>Provides options specifically for loading PTOKA images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPtokaOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPtokaLoadOptions.Resolution">
      <summary>Gets or sets the resolution (DPI) to load. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The resolution (DPI) to load.</value>
      <remarks>
        <para>A value of 0 means use current screen resolution (usually 96).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPtokaOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPtokaOptions">
      <summary>Provides extra options for loading and saving PTOKA images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub CodecsPtokaOptionsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.ptk")

         ' Setting new options.
         codecs.Options.Ptoka.Load.Resolution = 500

         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsPtokaOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.ptk");

         // Setting new options.
         codecs.Options.Ptoka.Load.Resolution = 500;

         RasterImage image = codecs.Load(srcFileName);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPtokaOptions.Load">
      <summary>Gets the options for loading PTOKA images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The PTOKA load options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPtokaOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsXlsLoadOptions">
      <summary>Provides the options for loading Microsoft Excel 2003 (XLS) documents as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XLS|Excel</keywords>
      <remarks>
        <para>Microsoft Excel 2003 (XLS) files have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>For more information, refer to 
            <see cref="T:L.Topics.FileFormatsXLS">File Formats - XLS Format</see>.</para>
        <para>Important note: The XLS file format only supports the following rasterization size modes:
            <list type="bullet"><item><description><see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see></description></item><item><description><see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Fit</see></description></item></list></para>
        <para>All other size modes will be treated as <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Fit</see></para>
        <para>XLS also does not support loading a document using different horizontal or vertical resolution. So if the value of
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution">CodecsRasterizeDocumentLoadOptions.XResolution</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution">CodecsRasterizeDocumentLoadOptions.YResolution</see> are different,
            the XLS codecs will use the larger of the two values as the resolution to use when rasterizing.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load the given Excel 2003 file and render it as a raster image</para>
        </para>
        <code lang="VB">      Public Sub CodecsXlsOptionsExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.Xls")

         ' Enable using the RasterizeDocumentOptions
         Dim rasterizeDocumentLoadOptions As CodecsRasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load
         ' Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit
         rasterizeDocumentLoadOptions.PageWidth = 8.5
         rasterizeDocumentLoadOptions.PageHeight = 11
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch
         rasterizeDocumentLoadOptions.XResolution = 300
         rasterizeDocumentLoadOptions.YResolution = 300

         ' Load each sheet in a separate page
         codecs.Options.Xls.Load.MultiPageSheet = False

         ' Load the source file
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Show the image information
            Console.WriteLine("Image has {0} pages", image.PageCount)
            Console.WriteLine("Image size: {0} by {1} pixels at {2} by {3} DPI", _
               image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CodecsXlsOptionsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.Xls");

         // Enable using the RasterizeDocumentOptions
         CodecsRasterizeDocumentLoadOptions rasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load;
         // Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit;
         rasterizeDocumentLoadOptions.PageWidth = 8.5;
         rasterizeDocumentLoadOptions.PageHeight = 11;
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch;
         rasterizeDocumentLoadOptions.XResolution = 300;
         rasterizeDocumentLoadOptions.YResolution = 300;

         // Load each sheet in a separate page
         codecs.Options.Xls.Load.MultiPageSheet = false;

         // Load the source file
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Show the image information
            Console.WriteLine("Image has {0} pages", image.PageCount);
            Console.WriteLine("Image size: {0} by {1} pixels at {2} by {3} DPI",
               image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXlsLoadOptions.MultiPageSheet">
      <summary>Gets or sets a value that indicates whether to draw multiple sheets per page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to draw multiple sheets per page if the final page size is greater than the sheet size,
            <strong>false</strong> to always draw one sheet per page.</value>
      <remarks>
        <para>Depending on the current rasterization options set with <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />, the resulting
            physical render size of the page can hold more than one sheet. If the value of <see cref="P:Leadtools.Codecs.CodecsXlsLoadOptions.MultiPageSheet" /> is set to
            <strong>true</strong>, then as many sheets as possible will be rendered on the same page if the size permits. Otherwise,
            exactly one sheet per page will be used.</para>
        <para>Notice that if the sheet size is larger than the page size specified by the user, the sheet will be cropped
            regardless of the setting of this property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXlsLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsXlsOptions">
      <summary>Provides the options for loading or saving a Microsoft Excel 2003 (XLS) document. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XLS</keywords>
      <remarks>
        <para>Microsoft Excel 2003 (XLS) documents have no physical width or height in pixels. You can use
            the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions" /> to control
            how the final document is rendered as a raster image. For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>Currently, LEADTOOLS does not support saving a raster image as a XLS document.</para>
        <para>For more information, refer to 
            <see cref="T:L.Topics.FileFormatsXLS">File Formats - XLS Format</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXlsLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsXlsOptions.Load">
      <summary>Get the object to set the options for loading Microsoft Excel 2003 (XLS) documents as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>XLS</keywords>
      <value>The XLS options used to load Microsoft Excel 2003 (XLS) documents as a raster image..</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsXlsLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPsdLayerInfo">
      <summary>Describes the layer position within a PSD file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            For more information on PSD layers, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPsdLayerInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPsdLayerInfo.GetBlendModeKey">
      <summary>Gets the blend mode key for the layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <para>A four byte character array that represents the blend mode key for the layer. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>'norm'</term>
              <description>Normal.</description>
            </item>
            <item>
              <term>'dark'</term>
              <description>Darken.</description>
            </item>
            <item>
              <term>'lite'</term>
              <description>Lighten.</description>
            </item>
            <item>
              <term>'hue '</term>
              <description>Hue.</description>
            </item>
            <item>
              <term>'sat '</term>
              <description>Saturation.</description>
            </item>
            <item>
              <term>'colr'</term>
              <description>Color.</description>
            </item>
            <item>
              <term>'lum '</term>
              <description>Luminosity.</description>
            </item>
            <item>
              <term>'mul '</term>
              <description>Multiply.</description>
            </item>
            <item>
              <term>'scrn'</term>
              <description>Screen.</description>
            </item>
            <item>
              <term>'diss'</term>
              <description>Dissolve.</description>
            </item>
            <item>
              <term>'over'</term>
              <description>Overlay.</description>
            </item>
            <item>
              <term>'hLit'</term>
              <description>Hard light.</description>
            </item>
            <item>
              <term>sLit'</term>
              <description>Soft light.</description>
            </item>
            <item>
              <term>'diff'</term>
              <description>Difference.</description>
            </item>
            <item>
              <term>'smud'</term>
              <description>Exclusion.</description>
            </item>
            <item>
              <term>'div '</term>
              <description>Dodge.</description>
            </item>
            <item>
              <term>'idiv'</term>
              <description>Color burn.</description>
            </item>
          </list>
        </para>
      </value>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="M:Leadtools.Codecs.CodecsPsdLayerInfo.SetBlendModeKey(System.Byte[])">
      <summary>Sets the blend mode key for the layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="blendModeKey">
        <para>A four byte character array that represents the blend mode key for the layer. Possible values are:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>'norm'</term>
              <description>Normal.</description>
            </item>
            <item>
              <term>'dark'</term>
              <description>Darken.</description>
            </item>
            <item>
              <term>'lite'</term>
              <description>Lighten.</description>
            </item>
            <item>
              <term>'hue '</term>
              <description>Hue.</description>
            </item>
            <item>
              <term>'sat '</term>
              <description>Saturation.</description>
            </item>
            <item>
              <term>'colr'</term>
              <description>Color.</description>
            </item>
            <item>
              <term>'lum '</term>
              <description>Luminosity.</description>
            </item>
            <item>
              <term>'mul '</term>
              <description>Multiply.</description>
            </item>
            <item>
              <term>'scrn'</term>
              <description>Screen.</description>
            </item>
            <item>
              <term>'diss'</term>
              <description>Dissolve.</description>
            </item>
            <item>
              <term>'over'</term>
              <description>Overlay.</description>
            </item>
            <item>
              <term>'hLit'</term>
              <description>Hard light.</description>
            </item>
            <item>
              <term>sLit'</term>
              <description>Soft light.</description>
            </item>
            <item>
              <term>'diff'</term>
              <description>Difference.</description>
            </item>
            <item>
              <term>'smud'</term>
              <description>Exclusion.</description>
            </item>
            <item>
              <term>'div '</term>
              <description>Dodge.</description>
            </item>
            <item>
              <term>'idiv'</term>
              <description>Color burn.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Left">
      <summary>Left layer position. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that represents the left postion of this <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /></value>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Top">
      <summary>Top layer position. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that represents the top postion of this <see cref="T:Leadtools.Codecs.CodecsPsdLayerInfo" /></value>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Opacity">
      <summary>Opacity value of the layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>Possible values are between 0 and 255, where a value of 0 is completely transparent and a value of 255 is
            completely opaque.</value>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Clipping">
      <summary>Clipping value for the layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A value of 0 represents base. A value of 1 represents non-base.</value>
      <remarks>
            For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.LoadMaskImage">
      <summary>Determines whether to load the mask image when loading PSD files with <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>true load to load the mask image when loading PSD files with <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>;
            otherwise, false.</value>
      <remarks>
        <para>When tha value of this property is true and you call <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>
            to load a PSD file, then the transparency mask channel image will bei in the <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.MaskImage" /> property.</para>
        <para>This property is not used when calling <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>
            to save a PSD file.</para>
        <para>Default value is true.</para>
        <para>For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.MaskImage">
      <summary>The transparency mask channel of the saved PSD layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that specifies the transparency mask channel of the saved PSD layer.</value>
      <remarks>
        <para>This is an 8-bit grayscale image. The value of each pixel indicates the amount of transparency the data
            of the original image has at this point. For example, if the value is 0xFF at a certain point, the pixel value
            of the layer image at that point is not transparent at all. If the value was 0x00, the pixel value of the
            layer image at that point is fully transparent. If the value is between these two, it indicates the degree of
            transparency the pixel value of the layer image has at that point.</para>
        <para>When loading, if you set the <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.LoadMaskImage" /> property to true, then this property will hold an
            <see cref="T:Leadtools.RasterImage" /> object that represents the transparency mask channel found in the PSD file.</para>
        <para>If the mask image does not need to be loaded, pass false to <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.LoadMaskImage" />.  The value of
            <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.MaskImage" /> will not be used.  Passing false to <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.LoadMaskImage" /> saves the transparency mask
            as full white image, which represents full visibility of the layer.</para>
        <para>When saving, if this is a valid image, then it should be of the same width and height as the corresponding
            layer image. It should also be an 8-bit grayscale image.</para>
        <para>For more information, refer to FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Name">
      <summary>Gets or sets the name for the layer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> which contains the name for the layer.</value>
      <remarks>
        <para>The layer name will be stored in the file.  The maximum size for this string is 256 characters.</para>
        <para>For more information, refer to the FILE FORMATS SPECIFICATION from Adobe.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see> and
            <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.TransparencyProtected">
      <summary>Gets a value that indicates whether the PSD layer transparency data is locked. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the PSD layer transparency data is locked, otherwise; <strong>false</strong></value>
      <remarks>
        <para>The following are values are only when layer information is obtained from a PSD file using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>. These properties
            are not used and will be ignored when saving PSD layers using <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>:
            <list type="bullet"><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.TransparencyProtected" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Visible" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Obsolete" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Psd5OrLater" /></description></item></list></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Visible">
      <summary>Gets a value that indicates whether the PSD layer is visible. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the PSD layer is visible, otherwise; <strong>false</strong></value>
      <remarks>
        <para>The following are values are only when layer information is obtained from a PSD file using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>. These properties
            are not used and will be ignored when saving PSD layers using <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>:</para>
        <ul>
          <li>
            <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.TransparencyProtected" />
          </li>
          <li>
            <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Visible" />
          </li>
          <li>
            <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Obsolete" />
          </li>
          <li>
            <see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Psd5OrLater" />
          </li>
        </ul>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Obsolete">
      <summary>Gets a value that indicates whether the PSD layer is obsolete. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the PSD layer is obsolete, otherwise; <strong>false</strong></value>
      <remarks>
        <para>The following are values are only when layer information is obtained from a PSD file using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>. These properties
            are not used and will be ignored when saving PSD layers using <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>:
            <list type="bullet"><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.TransparencyProtected" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Visible" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Obsolete" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Psd5OrLater" /></description></item></list></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>.
            </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPsdLayerInfo.Psd5OrLater">
      <summary>Gets a value that indicates whether the PSD layer is generated or modified using Photoshop 5 or later. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the PSD layer is generated or modified using Photoshop 5 or later, otherwise; <strong>false</strong></value>
      <remarks>
        <para>The following are values are only when layer information is obtained from a PSD file using <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>. These properties
            are not used and will be ignored when saving PSD layers using <see cref="M:Leadtools.Codecs.RasterCodecs.SavePsdWithLayers(Leadtools.RasterImage,System.String,System.Int32,Leadtools.RasterImage,Leadtools.Codecs.CodecsPsdLayerInfo[])">RasterCodecs.SavePsdWithLayers</see>:
            <list type="bullet"><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.TransparencyProtected" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Visible" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Obsolete" /></description></item><item><description><see cref="P:Leadtools.Codecs.CodecsPsdLayerInfo.Psd5OrLater" /></description></item></list></para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.LoadPsdLayer(System.String,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,Leadtools.Codecs.CodecsPsdLayerInfo)">RasterCodecs.LoadPsdLayer</see>.
            </example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPageEventCommand">
      <summary>Indicates the action to take regarding the load/save operation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsPageEventCommand.Continue">
      <summary>
            Continue normally.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPageEventCommand.Skip">
      <summary>
            Skip the current page.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPageEventCommand.Stop">
      <summary>
            Abort the process.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPageEventState">
      <summary>Indicates the state of the page load/save process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsPageEventState.Before">
      <summary>
            The page is about to be processed.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsPageEventState.After">
      <summary>
            The page has been processed.
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsPageEventArgs">
      <summary>Provides information for the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.Image">
      <summary>Gets the object being loaded from the image file page or the image that is being saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> that specifies the object being loaded from the image file page or the image that
            is being saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.Page">
      <summary>Gets the page number of the image being loaded or saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The 1-based index page number of the image being loaded or saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.PageCount">
      <summary>Gets the number of pages being loaded or saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of pages being loaded or saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.FileName">
      <summary>Gets the name of the file being loaded or saved. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The name of the file being loaded or saved.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.State">
      <summary>Gets the state of the load or save process. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The state of the load or save process.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsPageEventArgs.Command">
      <summary>Gets or sets a value indicating how the load or save process should continue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A value indicating how the load or save process should continue.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.LoadPage">RasterCodecs.LoadPage</see>.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions">
      <summary>Contains set options for loading a document file as a raster image (rasterization). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Documents formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
             do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
             specify the transformation from logical coordinates to physical pixels through a process called rasterization.</para>
        <para>Rasterization is the process of converting a document to a raster image. To check if a certain file on disk (or in a .NET stream)
             contains a document file rather than a regular raster image, call the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.String,System.Boolean)">RasterCodecs.GetInformation</see> o
             <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformationAsync(System.String,System.Boolean,System.Int32,System.Object)">RasterCodecs.GetInformationAsync</see> method and
             check the <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.IsDocumentFile">CodecsDocumentImageInfo.IsDocumentFile</see> property. Here is a code
             snippet:</para>
        <para>
          <pre>
            <code>
             CodecsImageInfo imageInfo = rasterCodecsInstance.GetInformation(fileName, true);
             if(imageInfo.Document.IsDocumentFile)
             {
                // A document file (PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, etc), show the original document size:
                Console.WriteLine("Document file, original size is {0} by {1} {2}",
                   imageInfo.Document.PageWidth, imageInfo.Document.PageHeight, imageInfo.Document.Unit);
            
                // Your code specific to rasterization based on the original document size goes here
             }
             </code>
          </pre>
        </para>
        <para>To rasterize a document file, set the properties of the <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" /> to the required value.
             For example, the following code snippet will instruct LEADTOOLS to fit any document files into 8.5 by 11 inches at 300 paper size.
             Every document file loaded with the <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.String)">RasterCodecs.Load</see> or <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> methods will have width/height of no more
             than 2550 by 3300 pixels with a resolution of 300 by 300:</para>
        <para>
          <pre>
            <code>
             CodecsRasterizeDocumentLoadOptions rasterDocumentLoadOptions = rasterCodecsInstance.Options.RasterizeDocument.Load;
             // Set the size mode, we want to fit
             rasterDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit;
             // Set the page size
             rasterDocumentLoadOptions.PageWidth = 8.5;
             rasterDocumentLoadOptions.PageHeight = 11;
             rasterDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch;
             // And the resolution
             rasterDocumentLoadOptions.XResolution = 300;
             rasterDocumentLoadOptions.YResolution = 300;
            
             // Load the image
             RasterImage image = rasterCodecsInstance.Load(fileName);
            
             // Show its pixel size, it should be less than or equal to
             // 2550 by 3300 pixels (8.5 * 300 by 11 * 300)
             Console.WriteLine("Loaded image size: {0} by {1} pixels at {2} by {3}",
             image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution);
             </code>
          </pre>
        </para>
        <para>The <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" /> class contains the following properties:</para>
        <list type="table">
          <listheader>
            <term>Property</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /></term>
            <description>
              <para>The result page width and height (in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />). The value of the result raster image width and height
             in pixels depends on the current resolution and size mode values.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /></term>
            <description>
              <para>The size of the margins to leave from the left, top, right and bottom in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />. Currently, only
             <see cref="T:Leadtools.Codecs.CodecsRtfLoadOptions">RTF</see> and <see cref="T:Leadtools.Codecs.CodecsTxtLoadOptions">TXT</see> documents support margins.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />
            </term>
            <description>
              <para>The units to use for the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />,
             <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> values.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" /></term>
            <description>
              <para>The resolution to use when rasterization the document files. A value of 0 means using the current screen resolution
             (usually 96). The resolution controls the pixel density of the result raster image. For example, if you specify 8.5 by 11 inches
             page width and height and a resolution of 96, the result image will have a pixel width and height of (8.5 * 96 = 816) and
             (11 * 96 = 1056) pixels. This is suitable for viewing at a 100 percent zoom but when you start zooming in, the image
             will get pixelated. Pixelation may also occur if you send the raster image to a printer, since printers usually have
             much higher resolution than a screen.</para>
              <para>If zooming in or high quality printing is a requirement in your code, then a higher resolution value must be specified, for
             example 300 by 300. For an 8.5 by 11 inch document, this results in a raster image size if (8.5 * 300 = 2550) and
             (11 * 300 = 3300) pixels. More than suitable for printing or zooming in. Keep in mind that increasing the resolution will increase
             the memory used to hold the image data. Finding the right balance between pixel density and memory consumption depends on your
             application needs.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode" />
            </term>
            <description>
              <para>Controls the transformation used when converting the logical size specified in page width and height to the physical raster image
             size. Refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode" /> for more information.</para>
            </description>
          </item>
        </list>
        <para>Refer to the C# and VB Rasterize Document Demo that ships with your version of LEADTOOLS for an interactive demonstration of
             <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
      </remarks>
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <keywords>PDFv14|PDFv15|PDFA|PDF/A|PDF v1.4|PDF v1.5|DOC|Word</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsPdfOptions" />.</example>
      <example>
        <para>
          <para>This example will load a PDF document using different rasterize document options and show its effect on the result raster image
             width, height and resolution.</para>
        </para>
        <code lang="VB">      Public Sub RasterizeDocumentExample()
         ' Initialize the RasterCodecs object to use
         Dim codecs As New RasterCodecs()
         ' Enable using the RasterizeDocumentOptions
         Dim rasterizeDocumentLoadOptions As CodecsRasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load

         ' No margins (only used with RTF and TXT files)
         rasterizeDocumentLoadOptions.LeftMargin = 0
         rasterizeDocumentLoadOptions.TopMargin = 0
         rasterizeDocumentLoadOptions.RightMargin = 0
         rasterizeDocumentLoadOptions.BottomMargin = 0

         ' The PDF file we are testing. This could be an XPS, RTF, TXT or XLS file as well
         Dim imageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Leadtools.pdf")

         ' Show the file information
         Using imageInfo As CodecsImageInfo = codecs.GetInformation(imageFileName, True)
            Dim documentImageInfo As CodecsDocumentImageInfo = imageInfo.Document

            ' If this is a document file, show the document information
            If documentImageInfo.IsDocumentFile Then
               Console.WriteLine("Document file")
               Console.WriteLine("  Original size is: {0} by {1} {2}", _
                  documentImageInfo.PageWidth, documentImageInfo.PageHeight, documentImageInfo.Unit)

               Console.WriteLine("  Using current rasterization, load size will be: {0} by {1} pixels at {2} by {3}", _
                  imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution)
            Else
               ' Regular raster image, show the image information
               Console.WriteLine("Raster file")
               Console.WriteLine("  Original size is: {0} by {1} pixels at {2} by {3}", _
                  imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution)
            End If
         End Using

         ' Example 1. Load at original document size at 300 DPI
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.None
         rasterizeDocumentLoadOptions.XResolution = 300
         rasterizeDocumentLoadOptions.YResolution = 300

         Using image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ShowResult(codecs, image)
         End Using

         ' Example 2. Fit the document at 640 by 480 pixels at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit
         rasterizeDocumentLoadOptions.PageWidth = 640
         rasterizeDocumentLoadOptions.PageHeight = 480
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Pixel
         rasterizeDocumentLoadOptions.XResolution = 96
         rasterizeDocumentLoadOptions.YResolution = 96

         Using image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ShowResult(codecs, image)
         End Using

         ' Example 3. Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit
         rasterizeDocumentLoadOptions.PageWidth = 8.5
         rasterizeDocumentLoadOptions.PageHeight = 11
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch
         rasterizeDocumentLoadOptions.XResolution = 300
         rasterizeDocumentLoadOptions.YResolution = 300

         Using image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ShowResult(codecs, image)
         End Using

         ' Example 4. Stretch the image to always be 4 by 4 inches at 150 DPI. Aspect ratio may differ
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Stretch
         rasterizeDocumentLoadOptions.PageWidth = 4
         rasterizeDocumentLoadOptions.PageHeight = 4
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch
         rasterizeDocumentLoadOptions.XResolution = 150
         rasterizeDocumentLoadOptions.YResolution = 150

         Using image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ShowResult(codecs, image)
         End Using

         codecs.Dispose()
      End Sub

      Private Shared Sub ShowResult(ByVal codecs As RasterCodecs, ByVal image As RasterImage)
         Dim rasterizeDocumentLoadOptions As CodecsRasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load

         Console.WriteLine("Showing result..")
         Console.WriteLine("  Current rasterization options:")
         Console.WriteLine("    Size mode is: {0}", rasterizeDocumentLoadOptions.SizeMode)
         Console.WriteLine("    Page size is {0} by {1} {2}", _
            rasterizeDocumentLoadOptions.PageWidth, rasterizeDocumentLoadOptions.PageHeight, rasterizeDocumentLoadOptions.Unit)
         Console.WriteLine("    Resolution is {0} by {1}", _
            rasterizeDocumentLoadOptions.XResolution, rasterizeDocumentLoadOptions.YResolution)

         Console.WriteLine("  Loaded raster image size is: {0} by {1} at {2} by {3}", _
            image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution)

         ' Code to verify our results

         ' Get the suggested page width and height in pixels
         Dim pageWidthInPixels As Double
         Dim pageHeightInPixels As Double

         Select Case rasterizeDocumentLoadOptions.Unit
            Case CodecsRasterizeDocumentUnit.Inch
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth * rasterizeDocumentLoadOptions.XResolution
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight * rasterizeDocumentLoadOptions.YResolution

            Case CodecsRasterizeDocumentUnit.Millimeter
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth * rasterizeDocumentLoadOptions.XResolution * 25.400000025908
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight * rasterizeDocumentLoadOptions.YResolution * 25.400000025908

            Case CodecsRasterizeDocumentUnit.Pixel
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight
         End Select

         ' Verify
         Select Case rasterizeDocumentLoadOptions.SizeMode
            Case CodecsRasterizeDocumentSizeMode.Fit, CodecsRasterizeDocumentSizeMode.FitAlways
               ' The image width/height must not be greater than suggested page width/height
               Console.WriteLine("Image width/height must be less than or equal to page width/height")
               System.Diagnostics.Debug.Assert(image.ImageWidth &lt;= pageWidthInPixels)
               System.Diagnostics.Debug.Assert(image.ImageHeight &lt;= pageHeightInPixels)

            Case CodecsRasterizeDocumentSizeMode.FitWidth
               ' The image width must be equal to the suggested page width
               Console.WriteLine("Image width must be equal to page width")
               System.Diagnostics.Debug.Assert(image.ImageWidth = pageWidthInPixels)

            Case CodecsRasterizeDocumentSizeMode.Stretch
               ' The image width/height must be equal to the suggested page width/height
               Console.WriteLine("Image width/height must be equal to suggested page width/height")
               System.Diagnostics.Debug.Assert(image.ImageWidth = pageWidthInPixels)
               System.Diagnostics.Debug.Assert(image.ImageHeight = pageHeightInPixels)

            Case CodecsRasterizeDocumentSizeMode.None
               Console.WriteLine("Loading at original document page size")
               ' No checking
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterizeDocumentExample()
      {
         // Initialize the RasterCodecs object to use
         RasterCodecs codecs = new RasterCodecs();
         // Enable using the RasterizeDocumentOptions
         CodecsRasterizeDocumentLoadOptions rasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load;

         // No margins (only used with RTF and TXT files)
         rasterizeDocumentLoadOptions.LeftMargin = 0;
         rasterizeDocumentLoadOptions.TopMargin = 0;
         rasterizeDocumentLoadOptions.RightMargin = 0;
         rasterizeDocumentLoadOptions.BottomMargin = 0;

         // The PDF file we are testing. This could be an XPS, RTF, TXT or XLS file as well
         string imageFileName = Path.Combine(LEAD_VARS.ImagesDir,"Leadtools.pdf");

         // Show the file information
         using(CodecsImageInfo imageInfo = codecs.GetInformation(imageFileName, true))
         {
            CodecsDocumentImageInfo documentImageInfo = imageInfo.Document;

            // If this is a document file, show the document information
            if(documentImageInfo.IsDocumentFile)
            {
               Console.WriteLine("Document file");
               Console.WriteLine("  Original size is: {0} by {1} {2}",
                  documentImageInfo.PageWidth, documentImageInfo.PageHeight, documentImageInfo.Unit);

               Console.WriteLine("  Using current rasterization, load size will be: {0} by {1} pixels at {2} by {3}",
                  imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution);
            }
            else
            {
               // Regular raster image, show the image information
               Console.WriteLine("Raster file");
               Console.WriteLine("  Original size is: {0} by {1} pixels at {2} by {3}",
                  imageInfo.Width, imageInfo.Height, imageInfo.XResolution, imageInfo.YResolution);
            }
         }

         // Example 1. Load at original document size at 300 DPI
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.None;
         rasterizeDocumentLoadOptions.XResolution = 300;
         rasterizeDocumentLoadOptions.YResolution = 300;

         using(RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            ShowResult(codecs, image);
         }

         // Example 2. Fit the document at 640 by 480 pixels at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit;
         rasterizeDocumentLoadOptions.PageWidth = 640;
         rasterizeDocumentLoadOptions.PageHeight = 480;
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Pixel;
         rasterizeDocumentLoadOptions.XResolution = 96;
         rasterizeDocumentLoadOptions.YResolution = 96;

         using(RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            ShowResult(codecs, image);
         }

         // Example 3. Fit the document at 8.5 by 11 inches at 96 DPI keeping the aspect ratio
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Fit;
         rasterizeDocumentLoadOptions.PageWidth = 8.5;
         rasterizeDocumentLoadOptions.PageHeight = 11;
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch;
         rasterizeDocumentLoadOptions.XResolution = 300;
         rasterizeDocumentLoadOptions.YResolution = 300;

         using(RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            ShowResult(codecs, image);
         }

         // Example 4. Stretch the image to always be 4 by 4 inches at 150 DPI. Aspect ratio may differ
         rasterizeDocumentLoadOptions.SizeMode = CodecsRasterizeDocumentSizeMode.Stretch;
         rasterizeDocumentLoadOptions.PageWidth = 4;
         rasterizeDocumentLoadOptions.PageHeight = 4;
         rasterizeDocumentLoadOptions.Unit = CodecsRasterizeDocumentUnit.Inch;
         rasterizeDocumentLoadOptions.XResolution = 150;
         rasterizeDocumentLoadOptions.YResolution = 150;

         using(RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            ShowResult(codecs, image);
         }

         codecs.Dispose();
      }

      private static void ShowResult(RasterCodecs codecs, RasterImage image)
      {
         CodecsRasterizeDocumentLoadOptions rasterizeDocumentLoadOptions = codecs.Options.RasterizeDocument.Load;

         Console.WriteLine("Showing result..");
         Console.WriteLine("  Current rasterization options:");
         Console.WriteLine("    Size mode is: {0}", rasterizeDocumentLoadOptions.SizeMode);
         Console.WriteLine("    Page size is {0} by {1} {2}",
            rasterizeDocumentLoadOptions.PageWidth, rasterizeDocumentLoadOptions.PageHeight, rasterizeDocumentLoadOptions.Unit);
         Console.WriteLine("    Resolution is {0} by {1}",
            rasterizeDocumentLoadOptions.XResolution, rasterizeDocumentLoadOptions.YResolution);

         Console.WriteLine("  Loaded raster image size is: {0} by {1} at {2} by {3}",
            image.ImageWidth, image.ImageHeight, image.XResolution, image.YResolution);

         // Code to verify our results

         // Get the suggested page width and height in pixels
         double pageWidthInPixels;
         double pageHeightInPixels;

         switch(rasterizeDocumentLoadOptions.Unit)
         {
            case CodecsRasterizeDocumentUnit.Inch:
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth * rasterizeDocumentLoadOptions.XResolution;
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight * rasterizeDocumentLoadOptions.YResolution;
               break;

            case CodecsRasterizeDocumentUnit.Millimeter:
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth * rasterizeDocumentLoadOptions.XResolution * 25.400000025908000026426160026955;
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight * rasterizeDocumentLoadOptions.YResolution * 25.400000025908000026426160026955;
               break;

            case CodecsRasterizeDocumentUnit.Pixel:
            default:
               pageWidthInPixels = rasterizeDocumentLoadOptions.PageWidth;
               pageHeightInPixels = rasterizeDocumentLoadOptions.PageHeight;
               break;
         }

         // Verify
         switch(rasterizeDocumentLoadOptions.SizeMode)
         {
            case CodecsRasterizeDocumentSizeMode.Fit:
            case CodecsRasterizeDocumentSizeMode.FitAlways:
               // The image width/height must not be greater than suggested page width/height
               Console.WriteLine("Image width/height must be less than or equal to page width/height");
               System.Diagnostics.Debug.Assert(image.ImageWidth &lt;= pageWidthInPixels);
               System.Diagnostics.Debug.Assert(image.ImageHeight &lt;= pageHeightInPixels);
               break;

            case CodecsRasterizeDocumentSizeMode.FitWidth:
               // The image width must be equal to the suggested page width
               Console.WriteLine("Image width must be equal to page width");
               System.Diagnostics.Debug.Assert(image.ImageWidth == pageWidthInPixels);
               break;

            case CodecsRasterizeDocumentSizeMode.Stretch:
               // The image width/height must be equal to the suggested page width/height
               Console.WriteLine("Image width/height must be equal to suggested page width/height");
               System.Diagnostics.Debug.Assert(image.ImageWidth == pageWidthInPixels);
               System.Diagnostics.Debug.Assert(image.ImageHeight == pageHeightInPixels);
               break;

            case CodecsRasterizeDocumentSizeMode.None:
            default:
               Console.WriteLine("Loading at original document page size");
               // No checking
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">
      <summary>Gets or sets the resulting raster image suggested width in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicates the resulting <see cref="T:Leadtools.RasterImage" /> suggested width in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />.
            Default value is <strong>8.5</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> must be greater than 0.</value>
      <remarks>
        <para>The value of the resulting raster image width and height in pixels depends on the current resolution and size mode values. For
            more information refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>Use <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> to set the result raster image suggested height. <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> are in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />.</para>
        <para>When the value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode" /> is set to
            <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see>, the original document size
            is kept and hence <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> will not be used.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">
      <summary>Gets or sets the resulting raster image suggested height in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicate the resulting <see cref="T:Leadtools.RasterImage" /> suggested height in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />.
            Default value is <strong>11</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> must be greater than 0.</value>
      <remarks>
        <para>The values of the resulting raster image width and height in pixels depends on the current resolution and size mode values. For
            more information refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>Use <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> to set the resulting raster image suggested height. <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> are in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" />.</para>
        <para>When the value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode" /> is set to
            <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see>, the original document size
            is kept and hence <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> will not be used.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin">
      <summary>Gets or sets the left margin value when rasterizing a document to a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicates the margin value in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" /> to use when rasterizing a document to
            a raster image. Default value is <strong>1.25</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" /> must be greater than or
            equal to 0.</value>
      <remarks>
        <para>The values of the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> are only used when loading RTF and TXT documents. They are not used when loading
            other document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX and XLS/XLSX.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin">
      <summary>Gets or sets the top margin value when rasterizing a document to a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicates the margin value in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" /> to use when rasterizing a document to
            a raster image. Default value is <strong>1.0</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" /> must be greater than or
            equal to 0.</value>
      <remarks>
        <para>The values of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> are only used when loading RTF and TXT documents. They are not used when loading
            other document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX and XLS/XLSX.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin">
      <summary>Gets or sets the right margin value when rasterizing a document to a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicates the margin value in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" /> to use when rasterizing a document to
            a raster image. Default value is <strong>1.25</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> must be greater than or
            equal to 0.</value>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> are only used when loading RTF and TXT documents. They are not used when loading
            other document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX and XLS/XLSX.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin">
      <summary>Gets or sets the bottom margin value when rasterizing a document to a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:System.Double" /> value that indicate the margin value in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit" /> to use when rasterizing a document to
            a raster image. Default value is <strong>1.0</strong> inches. The value of <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> must be greater than or
            equal to 0.</value>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> are only used when loading RTF and TXT documents. They are not used when loading
            other document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX and XLS/XLSX.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.Unit">
      <summary>Gets or sets the units to use for <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit" /> enumeration member that specify the unit to use for
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.LeftMargin" />,
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.TopMargin" />, <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.RightMargin" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.BottomMargin" /> values. Default value
            is <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Inch</see></value>
      <remarks>
        <para>When using a pixel unit (<see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Pixel</see>), the
            page width and height are multiplied by the current resolution(<see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" />) to
            detemine the final physical page size).</para>
        <para>Possible values are:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Pixel</see>
            </term>
            <description>
              <para>The page width, height or margins are in pixels</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Inch</see>
            </term>
            <description>
              <para>The page width, height or margins are in inches</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentUnit">CodecsRasterizeDocumentUnit.Millimeter</see>
            </term>
            <description>
              <para>The page width, height or margins are in millimeters</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution">
      <summary>Gets or sets the horizontal resolution to use when rasterization document files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the horizontal resolution to use when rasterization occurs on document files such
            as PDF and XPS. A value of 0 means use the current screen resolution. The default value is 150.</value>
      <remarks>
        <para>The resolution controls the pixel density of the resulting raster image. For example, if you specify 8.5 by 11 inches
            page width and height and a resolution of 96, the resulting image will have a pixel width and height of (8.5 * 96 = 816) and
            (11 * 96 = 1056) pixels. This is suitable for viewing at a 100 percent zoom but when you start zooming in, the image
            will get pixelated. Pixelation may also occur if you send the raster image to a printer, since printers usually have
            much higher resolution than a screen.</para>
        <para>If zooming in or high quality printing is a requirement in your code, then a higher resolution value must be specified, for
            example 300 by 300. For an 8.5 by 11 inches document, this results in a raster image size if (8.5 * 300 = 2550) and
            (11 * 300 = 3300) pixels. More than suitable for printing or zooming in. Keep in mind that increasing the resolution will increase
            the memory used to hold the image data. Finding the right balance between pixel density and memory consumption depends on your
            application needs.</para>
        <para>After the <see cref="T:Leadtools.RasterImage" /> is loaded, the image resolution set in
            <see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see> and <see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see>
            will be the same as <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" />.</para>
        <para>The vertical resolution is specified in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" />. For most normal usage, the value of
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" /> should be equal.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution">
      <summary>Gets or sets the vertical resolution to use when rasterization document files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that indicates the vertical resolution to use when rasterization document files such
            as PDF and XPS. A value of 0 means use the current screen resolution. The default value is 150.</value>
      <remarks>
        <para>The resolution controls the pixel density of the result raster image. For example, if you specify 8.5 by 11 inches
            page width and height and a resolution of 96, the result image will have a pixel width and height of (8.5 * 96 = 816) and
            (11 * 96 = 1056) pixels. This is suitable for viewing at a 100 percent zoom but when you start zooming in, the image
            will get pixelated. Pixelation may also occur if you send the raster image to a printer, since printers usually have
            much higher resolution than a screen.</para>
        <para>If zooming in or high quality printing is a requirement in your code, then a higher resolution value must be specified, for
            example 300 by 300. For an 8.5 by 11 inch document, this results in a raster image size if (8.5 * 300 = 2550) and
            (11 * 300 = 3300) pixels. More than suitable for printing or zooming in. Keep in mind that increasing the resolution will increase
            the memory used to hold the image data. Finding the right balance between pixel density and memory consumption depends on your
            application needs.</para>
        <para>After the <see cref="T:Leadtools.RasterImage" /> is loaded, the image resolution set in
            <see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see> and <see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see>
            will be the same as <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" />.</para>
        <para>The horizontal resolution is specified in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" />. For most normal usage, the value of
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.XResolution" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.YResolution" /> should be equal.</para>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode">
      <summary>Gets or sets a value that indicates the transformation to use when converting the logical size specified in
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> to the final physical raster image size. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode" /> enumeration member that indicates the transformation to use when
            converting the logical size specified in <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> to the final physical
            raster image size. Default value is <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see>.
            </value>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.
            For more information, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</para>
        <para>You can use the <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode" /> property to specifiy how to use <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth" /> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight" /> to control the final raster image size. LEADTOOLS will determine the original document size (a value
            that can be obtained in <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageWidth">CodecsDocumentImageInfo.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsDocumentImageInfo.PageHeight">CodecsDocumentImageInfo.PageHeight</see>) and then apply the transformation
            from this value to determine the final <see cref="T:Leadtools.RasterImage" /> width and height as follows:</para>
        <list type="table">
          <listheader>
            <term>
              <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.SizeMode">CodecsRasterizeDocumentLoadOptions.SizeMode</see>
            </term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.None</see>
            </term>
            <description>
              <para>Use the original document width and height. No transformation will be performed and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> are not used.</para>
              <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height value equals to the original document size.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Fit</see>
            </term>
            <description>
              <para>Fit the result raster image into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> while
            maintaining the aspect ratio. If the original document size is smaller than the requested page size, no transformation is performed.</para>
              <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height equal to or less than the requested
            page width or height but not greater.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.FitAlways</see>
            </term>
            <description>
              <para>Always fit the result raster image into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> while
            maintaining the aspect ratio. If the original document size is smaller than the requested page size, then the resulting
            image is scaled up.</para>
              <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width or height equal to the requested
            page width or height. Not less and not greater.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.FitWidth</see>
            </term>
            <description>
              <para>Fit the result raster image width into
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> while
            maintaining the aspect ratio. The image height will be calculated based on the transformation and 
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see> is not used.</para>
              <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width equal to the requested
            page width. The height depends on the original document height.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentSizeMode">CodecsRasterizeDocumentSizeMode.Stretch</see>
            </term>
            <description>
              <para>The resulting raster image width and height will be exactly equal to
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageWidth">CodecsRasterizeDocumentLoadOptions.PageWidth</see> and
            <see cref="P:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions.PageHeight">CodecsRasterizeDocumentLoadOptions.PageHeight</see>. Aspect ratio
            might be different than the original document.</para>
              <para>The final <see cref="T:Leadtools.RasterImage" /> will have a width and height equal to the requested
            page width and height.</para>
            </description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />
      <seealso cref="T:L.Topics.ImplementingPDFPluginFeatures">Implementing PDF Plug in Features</seealso>
      <seealso cref="T:Leadtools.Codecs.CodecsDocumentImageInfo" />
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsRasterizeDocumentOptions">
      <summary>Provides support for loading or saving a document file. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Document formats such as PDF, XPS, DOC/DOCX, PPT/PPTX ,XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="P:Leadtools.Codecs.CodecsRasterizeDocumentOptions.Load">
      <summary>Gets the object used to set the options for loading a document file as a raster image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An instance of <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" /> object that contains the options
            to use for loading a document file as a raster image.</value>
      <remarks>
        <para>LEADTOOLS provides support for loading a document as a raster image. Documents formats such as PDF, XPS, DOC/DOCX, PPT/PPTX, XLS/XLSX, RTF and Text
            do not contain physical width, height or resolution. It is up to the loader (in this case, the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object) to
            specify the transformation from logical coordinates to physical pixels through a process called rasterization.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Codecs.CodecsRasterizeDocumentLoadOptions" />.</example>
    </member>
    <member name="T:Leadtools.Codecs.CodecsCompression">
      <summary>Indicates the compression type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Cmp">
      <summary>
            LEAD CMP.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Jpeg444">
      <summary>
            JPEG 4:4:4.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TifJpeg444">
      <summary>
            TIFF with JPEG 4:4:4.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Jpeg411">
      <summary>
            JPEG 4:1:1.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TifJpeg411">
      <summary>
            TIFF with JPEG 4:1:1.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Jpeg422">
      <summary>
            JPEG 4:2:2.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TifJpeg422">
      <summary>
            TIFF with JPEG 4:2:2.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Lead0">
      <summary>
            LEAD 1 bit, lossless compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Lead1">
      <summary>
            LEAD 1 bit, excellent compression.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TiffCcitt">
      <summary>
            TIFF CCITT.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TiffCcittG3Fax1Dim">
      <summary>
            CCITT Group 3 one dimensional.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TiffCcittG3Fax2Dim">
      <summary>
            CCITT Group 3 two dimensional.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.TiffCcittG4Fax">
      <summary>
            CCITT Group 4 two dimensional.
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.J2k">
      <summary>
            JPEG 2000 file
            </summary>
    </member>
    <member name="F:Leadtools.Codecs.CodecsCompression.Jp2">
      <summary>
            JPEG 2000 stream
            </summary>
    </member>
    <member name="T:Leadtools.Codecs.CodecsCompressDataCallback">
      <summary>Provides a callback method that gets called when compressed data is available. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="width">The image being compressed width in pixels.</param>
      <param name="height">The image being compressed height in pixels.</param>
      <param name="bitsPerPixel">The image being compressed bits/pixel value.</param>
      <param name="order">The image being compressed byte order.</param>
      <param name="viewPerspective">The image being compressed view perspective value.</param>
      <param name="buffer">A pointer to the memory buffer containing compressed data.</param>
      <returns>true to continue compressing the data, false to abort.</returns>
      <remarks>
            The <see cref="T:Leadtools.Codecs.CodecsCompressDataCallback" /> delegate is passed to
            <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)">RasterCodecs.StartCompress</see> and will get called compressed data is available.
            </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartCompress(System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.Codecs.CodecsCompression,Leadtools.Codecs.CodecsCompressDataCallback)">RasterCodecs.StartCompress</see>.</example>
    </member>
  </members>
</doc>