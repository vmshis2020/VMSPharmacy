<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.MedicalViewer</name>
  </assembly>
  <members>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues">
      <summary>
            Represents the class that is used to set or get window level values.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The value that indicates the window level width value</param>
      <param name="center">The value that indicates the window level center value.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues.Width">
      <summary>
            Gets or sets the value that indicates the window level width value.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the window level width value.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues.Center">
      <summary>
            Gets or sets the value that indicates the window level center value.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the window level center value.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerVirtualImage">
      <summary>
            Represents a class that is used for multiple purposes. These include checking for the state of the image (whether it exists or not), 
            and whether it has a region. This is useful when low memory usage is enabled.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerVirtualImage.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerVirtualImage" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerVirtualImage.Image">
      <summary>
            (Read only) Gets the loaded image.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that represents the loaded image.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerVirtualImage.ImageExist">
      <summary>
            (Read only) Gets a value that indicates whether the image is already loaded.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the image is already loaded; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerVirtualImage.HasRegion">
      <summary>
            (Read only) Gets a value that indicates whether the image has a region.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the image has a region; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs">
      <summary>
            The MedicalViewerRequestedFramesInformationEventArgs class provides data for the 
            MedicalViewer <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell on which the user tag will be drawn.</param>
      <param name="requestedFramesIndexes">Array of requested frame indexes.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs.CellIndex">
      <summary>
            Gets or sets a value that indicates the index of the cell that requested the frames.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell that requested the frames.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs.RequestedFramesIndexes">
      <summary>
            Gets or sets the array of the requested frame indexes.
            </summary>
      <medaddon>yes</medaddon>
      <value>Array of array of the requested frame indexes.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRequestedFramesInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs">
      <summary>
            The MedicalViewerPlaneCutLineEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PlaneCutLineClicked" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerMouseButtons)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that that has had its cut line selected.</param>
      <param name="cutLineIndex">The index of the selected cut line.</param>
      <param name="x">The pointer X position.</param>
      <param name="y">The pointer Y position.</param>
      <param name="mouseButton">A<see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons" /> value that represents 
            the button that was clicked to select the cut line.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that has the cut line that was selected.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell that has the cut line that was selected.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.CutLineIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the selected cut line.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the selected cut line.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.X">
      <summary>
            (Read only) Gets the value that indicates the X position for the pointer.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the X position for the pointer.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.Y">
      <summary>
            (Read only) Gets the value that indicates the Y position for the pointer.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the Y position for the pointer.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs.Button">
      <summary>
            (Read only) Gets an enumerated value that indicates which Mouse button was used to click on the cut line object.
            </summary>
      <medaddon>yes</medaddon>
      <value>A<see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons" /> value that represents the button that was used to click on the cut line object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLineEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes">
      <summary>
            Represents the class that is used to retrieve the attributes for the selected annotation object.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class contains the return values for the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetSelectedAnnotationAttributes" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes.Type">
      <summary>
            (Read only) Gets a value which indicates which annotation type is selected.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that indicates which type of annotation is selected.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationArrow">
      <summary>
             Represents the class that contains the properties of the annotation arrow action.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the annotation arrow action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
             Click and drag to create an arrow annotation object.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para>This example changes the color of all the selected arrow objects inside the medical viewer.</para>
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.AnnotationArrow)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.AnnotationArrow, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function


      Public Sub MedicalViewerAnnotationArrowExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim arrow As MedicalViewerAnnotationArrow = New MedicalViewerAnnotationArrow()
         arrow.AnnotationColor = Color.FromArgb(0, 0, 255)
         arrow.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationArrow, arrow)
         myForm.ShowDialog()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.AnnotationArrow);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationArrow, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }


      public void MedicalViewerAnnotationArrowExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerAnnotationArrow arrow = new MedicalViewerAnnotationArrow();
         arrow.AnnotationColor = Color.FromArgb(0, 0, 255);
         arrow.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationArrow, arrow);
         myForm.ShowDialog();
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationArrow-->
      </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotation">
      <summary>
            Represents the base class used by the annotation action classes.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            This class is the base class for the following classes:
            <list type="bullet"><item><description>MedicalViewerAnnotationRuler</description></item><item><description>MedicalViewerAnnotationRectangle</description></item><item><description>MedicalViewerAnnotationEllipse</description></item><item><description>MedicalViewerAnnotationHilite</description></item><item><description>MedicalViewerAnnotationText</description></item><item><description>MedicalViewerAnnotationArrow</description></item><item><description>MedicalViewerAnnotationAngle</description></item></list></description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerBaseAction">
      <summary>
            Represents the base class for the action classes.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseAction.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseAction"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotation"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotation.AnnotationColor">
      <summary>
            Gets or sets the color of the annotation object.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the annotation object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotation.Flags">
      <summary>
            Gets or sets the enumerated value that represents the type of annotations the properties are applied to.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that represents the type of annotations should to which the properties should be applied.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationArrow.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationArrow"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationArrow" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell">
      <summary>
            Represents the cell that will be used to display the paraxial cut cells. It is generated from creating and adding a <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> to a another cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            The paraxial cuts are images generated from the lines that are perpendicular to one of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> lines.
            <para>In order to be able to connect the paraxial cut cell to a polygon, pass it in the cell constructor, then change which line of the polygon to attach the paraxial cell to through <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.PolygonLineIndex" />.</para><para>The user cannot draw the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> to:</para><list type="bullet"><item><description> Derivative Cell. </description></item><item><description> Generated MPR Cell. </description></item><item><description> Paraxial cut cell itself.</description></item><item><description>A cell with less than 3 frames.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMultiCell">
      <summary>
            Represents the class that is used to create and adjust the cell being added to or removed from the <see cref="N:Leadtools.MedicalViewer">MedicalViewer</see> control.
            </summary>
      <keywords>Multi-frame viewer|Sub-cell|Sub cell</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>To add this to the MedicalViewer use the <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" /> property.</description>
          </item>
          <item>
            <description>This cell contains all the properties and methods of the Medical Viewer Cell, please the properties and methods that allows the user to update and change a sub-cell properties.</description>
          </item>
          <item>
            <description>The sub-cell is a part of the cell that is used to view one frame of a multi-images cell, along with it's properties.</description>
          </item>
        </list>
        <para>For more information, refer to 
            <see cref="T:MV.Topics.ImageViewerCells">Image Viewer Cells</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCell">
      <summary>
            Represents the class that is used to create and adjust the cell being added to / removed from the <see cref="N:Leadtools.MedicalViewer" /> control.
            </summary>
      <keywords>Cell control</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>To add this to the MedicalViewer use the <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" /> property.</description>
          </item>
          <item>
            <description>This cell contains properties and method that allows the user to update and change the image properties, for more information refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" />.</description>
          </item>
        </list>
        <para>For more information, refer to 
            <see cref="T:MV.Topics.ImageViewerCells">Image Viewer Cells</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerBaseCell">
      <summary>
            Represents the base cell class that contains the basic cell properties and methods that the user must inherits his custom control from in order to be able to add it to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Any control must inherit this class in order for the user to be able to add it to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</description>
          </item>
          <item>
            <description>to add this cell to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> use the property collection <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" />.</description>
          </item>
        </list>
        <para>For more information, refer to 
            <see cref="T:MV.Topics.ImageViewerCells">Image Viewer Cells</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.OnPropertyChanged(System.String)">
      <summary>
            Fires the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.PropertyChanged" /> event.
            </summary>
      <param name="info">The name of the property changed.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <returns>true if the specified key is a regular input key; otherwise, false.</returns>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell"></see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize">Finalize</see>.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetAnnotationContainer">
      <summary>
            (Read only) Gets the <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container.
            </returns>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetAnnotationContainer(System.Int32)" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Match(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseCell)">
      <summary>
            Matches the cell property specified by <paramref name="action" /> to <paramref name="sourceCell" />.
            </summary>
      <param name="action">Enumeration that represents the action to be matched.</param>
      <param name="sourceCell">The source cell that has the action parameters to be applied to this cell.</param>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Matching the property means copying the values from sourceCell to the cell.
            <para>Currently, only <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.Scale</see> is supported.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetSelectedAnnotationAttributes">
      <summary>
            Retrieves the selected annotation attribute for the cell.
            </summary>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes" /> object that contains the selected annotation attributes.
            </returns>
      <remarks> For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.#ctor">
      <summary>
            Initializes a new Leadtools.MedicalViewer.MedicalViewerBaseCell class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.#ctor(Leadtools.MedicalViewer.MedicalViewerLayoutPosition)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class.
            </summary>
      <param name="location">The location of the cell in the viewer.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.SaveLayout(System.IO.Stream)" />.
            </example>
      <remarks>
            The position is represented by four dimensionless floating point values, in the range
            0.0 to 1.0.  The Lower left hand position represents the (0.0,0.0).
            </remarks>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)">
      <summary>
            Retrieves the tag (overlay text) for a cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="alignment">The overlay text alignment.</param>
      <remarks>
        <para>This method will retrieve the cell tag. The cell tag is a tag that appears on all the cell frames.
            To retrieve the sub-cell the tag use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)" /> method.</para>
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CanExecuteAction(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            A method that is used to determine whether the action <b><i>actionType</i></b> can be executed in the Medical Viewer Cell.
            </summary>
      <param name="actionType">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />that represents the action which will be tested if it can be executed in the Medical Viewer Cell.
            </param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            Currently that action that can be executed in the Medical Viewer Cell are:
            <list type="bullet"><item><description>Window Level</description></item><item><description>Scale</description></item><item><description>Offset</description></item><item><description>Stack</description></item><item><description>Magnify Glass</description></item><item><description>Alpha</description></item><item><description>Annotation Ruler</description></item><item><description>Annotation Angle</description></item><item><description>Annotation Text</description></item><item><description>Annotation Arrow</description></item><item><description>Annotation Rectangle</description></item><item><description>Annotation Ellipse</description></item><item><description>Annotation Hilite</description></item><item><description>Rectangle Region</description></item><item><description>Ellipse Region</description></item><item><description>Free Hand Region</description></item><item><description>Polygon Region</description></item><item><description>Magic Wand Region</description></item><item><description>Color Range Region</description></item><item><description>Circle Region</description></item><item><description>Square Region</description></item><item><description>Nudge Tool</description></item><item><description>Shrink Tool</description></item><item><description>Cut Plane</description></item><item><description>Double Cut Plane</description></item></list></description>
          </item>
          <item>
            <description>To enable the Action, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RemoveAction(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Removes the specified action from the medical viewer.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action to be removed.</param>
      <remarks>
            When an action is removed from a container, all properties, mouse buttons, and 
            keystroke combinations are also removed.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Adds a new action to the medical viewer.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action to be added.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The same action cannot be added to a medical viewer control twice.</description>
          </item>
          <item>
            <description>To set or get the properties for the specified action, use <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" />, or <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</description>
          </item>
        </list>
        <para>Actions include user-defined actions. To use a user-defined  action, cast the user-defined action ID into the actionType parameter.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>, and <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Creating a Bitmap Region</a>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)">
      <summary>
            Assigns the action to a specific mouse button.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action to be assigned.</param>
      <param name="mouseButton">The Mouse event to be associated with the specified action.</param>
      <param name="applyingOperation">Indicates the cells that the action is applied to and 
            when the action is applied.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>An action must be added to a container before it can be assigned 
            to a mouse button. To add an action to a container 
            call <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /></description>
          </item>
          <item>
            <description>If an action is set to a mouse button that is already used by 
            another action, the new action will overwrite the old one.</description>
          </item>
          <item>
            <description>
            Verify that the mouse button can be assigned to the specified action before assigning the button. Do this by calling 
            the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)" /> method.
            For example, if <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons">Leadtools.MedicalViewer.MedicalViewerMouseButtons.Wheel</see> is passed to 
            the mouseButton parameter and 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.MagnifyGlass to the actionType parameter, 
            the method will throw an exception. If the same values are passed as parameters to the 
            method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)" />, the method will 
            return false, indicating that the mouse button cannot be used.</description>
          </item>
          <item>
            <description>Actions can also be associated with keystroke combinations. 
            To assign an action to a keystroke combination, call 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerKeys)" />.</description>
          </item>
        </list>
        <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a> 
            and <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Creating a Bitmap Region</a>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionButton(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Retrieves the mouse button associated with the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action for which the mouse button information is being obtained.</param>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons" /> enumeration value that represents the assigned mouse button.
            </returns>
      <remarks>
            To assign a mouse button to a specific action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>.</para></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionFlags(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Retrieves the flags associated with the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action which to retrieve its flags.</param>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionFlags" /> enumeration that indicates the flags associated with the specified action.
            </returns>
      <remarks>
            To assign a flag to a specific action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsActionAdded(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Determines whether the specified action has been added to the container (using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method).
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action.</param>
      <returns>
            true if the action is added; otherwise, false.
            </returns>
      <remarks>
        <para>To add an action to the image viewer control, call <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</para>
        <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)">
      <summary>
            Determines whether the specified mouse button can be assigned to the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The type of action being tested.</param>
      <param name="mouseButton">The mouse button that will be checked.</param>
      <returns>
            true if the mouse button can be assigned to the action; otherwise, false.
            </returns>
      <remarks>
            To avoid exceptions being thrown, call this method to ensure that the mouse button can be assigned to the specified action before 
            calling the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> 
            method. 
            For example, if <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons">Leadtools.MedicalViewer.MedicalViewerMouseButtons.Wheel</see> is passed to the mouseButton parameter 
            and <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.MagnifyGlass to the actionType parameter, 
            the method will throw an exception. This is because the mouse button is not valid for this action. If the same values are passed as 
            parameters to the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)" /> method, the method returns false, indicating that 
            the mouse button cannot be used.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerActionFlags)">
      <summary>
            Determines whether the specified operation can be applied to the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action being tested.</param>
      <param name="applyingOperation">Flags that will be checked.</param>
      <returns>
            true if the applying operation is valid to be assigned to the action; otherwise, false.
            </returns>
      <remarks>
            To avoid exceptions being thrown, call this method to ensure that the mouse button can be assigned to the specified action before 
            calling the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method.
            For example, if <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons">Leadtools.MedicalViewer.MedicalViewerMouseButtons.Wheel</see> is passed to the mouseButton parameter 
            and <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.MagnifyGlass to the actionType parameter, the method will 
            throw an exception. If the same values are passed as parameters to the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)" /> method, the method returns false, indicating that the mouse 
            button cannot be used.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)">
      <summary>
            Determines whether the specified mouse button and applying operation can be set to the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action being tested.</param>
      <param name="mouseButton">The mouse button that will be checked.</param>
      <param name="applyingOperation">Flags that will be checked.</param>
      <returns>
            true if the mouse button and the flags are valid to be assigned to the action; otherwise, false.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To avoid exceptions being thrown, call this method to ensure that the mouse button can be assigned to the specified action before 
            calling the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method.
            For example, if <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons">Leadtools.MedicalViewer.MedicalViewerMouseButtons.Wheel</see> is passed to the mouseButton parameter 
            and <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.MagnifyGlass to the actionType parameter, the method throws an exception.
            If the same values are passed as parameters to the 
             <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.IsValidForAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons)" /> method, the method returns false, indicating that
            the mouse button cannot be used.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)">
      <summary>
            Sets the current properties for the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action for which the properties are being set.</param>
      <param name="actionProperties">The properties to be set.</param>
      <remarks>
            To retrieve the properties for a specific action call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>
            and <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Creating a Bitmap Region</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            (Read only) Gets the current properties for the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The specified action.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseAction" /> that contains the retrieved properties.
            </returns>
      <remarks>
            To set the properties for the specified action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.
            
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAlpha" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)">
      <summary>
            Changes the length of the selected annotation ruler according to the new value.
            </summary>
      <medaddon>yes</medaddon>
      <param name="distance">The new length of the annotation ruler.</param>
      <param name="measurementUnit">The unit of measure</param>
      <remarks>
            This method will calibrate all the rulers that are selected in the 
            sub-cells included within the cell.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para>Calibrate a ruler if there is one to 10.0 cm.</para>
        <code lang="VB">      ' You will need to add a ruler before being able to use this example.
      Public Sub MedicalViewerCalibrateRulerExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim annotationAttributes As MedicalViewerAnnotationAttributes = (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).GetSelectedAnnotationAttributes(-2)
         Select Case annotationAttributes.Type
            Case MedicalViewerActionType.AnnotationRuler
               CType(medicalViewer.Cells(0), MedicalViewerMultiCell).CalibrateRuler(10.0, MedicalViewerMeasurementUnit.Centimeters)
            Case Else
               MessageBox.Show("You should add a ruler annotation to calibrate")
         End Select
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      // You will need to add a ruler before being able to use this example.
      public void MedicalViewerCalibrateRulerExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerAnnotationAttributes annotationAttributes = ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).GetSelectedAnnotationAttributes(-2);
         switch (annotationAttributes.Type)
         {
            case MedicalViewerActionType.AnnotationRuler:
               ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).CalibrateRuler(10.0, MedicalViewerMeasurementUnit.Centimeters);
               break;
            default:
               MessageBox.Show("You should add a ruler annotation to calibrate");
               break;
         }
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerCalibrateRuler-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)">
      <summary>
            Changes the length of the selected annotation ruler according to the new value.
            </summary>
      <medaddon>yes</medaddon>
      <param name="distance">The new length of the annotation ruler.</param>
      <param name="measurementUnit">The unit of measure.</param>
      <param name="axis">The calibration axis.</param>
      <remarks>
        <para>This method will calibrate all the rulers that are selected in the 
            sub-cells included within the cell.</para>
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.
            </remarks>
      <example>
        <para />
        <code lang="VB">      ' You will need to add a ruler before being able to use this example.
      Public Sub MedicalViewerCalibrateRulerExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim annotationAttributes As MedicalViewerAnnotationAttributes = (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).GetSelectedAnnotationAttributes(-2)
         Select Case annotationAttributes.Type
            Case MedicalViewerActionType.AnnotationRuler
               CType(medicalViewer.Cells(0), MedicalViewerMultiCell).CalibrateRuler(10.0, MedicalViewerMeasurementUnit.Centimeters)
            Case Else
               MessageBox.Show("You should add a ruler annotation to calibrate")
         End Select
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      // You will need to add a ruler before being able to use this example.
      public void MedicalViewerCalibrateRulerExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerAnnotationAttributes annotationAttributes = ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).GetSelectedAnnotationAttributes(-2);
         switch (annotationAttributes.Type)
         {
            case MedicalViewerActionType.AnnotationRuler:
               ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).CalibrateRuler(10.0, MedicalViewerMeasurementUnit.Centimeters);
               break;
            default:
               MessageBox.Show("You should add a ruler annotation to calibrate");
               break;
         }
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerCalibrateRuler-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Calibrate(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)">
      <summary>
            Calibrates the cell based on information provided by the user. This allows the user to calibrate a cell without using an annotation ruler.
            </summary>
      <medaddon>yes</medaddon>
      <param name="sourceDistance">The old length to be calibrated.</param>
      <param name="sourceMeasurementUnit">The unit of measure.</param>
      <param name="targetDistance">The new length.</param>
      <param name="targetMeasurementUnit">The unit of measure.</param>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm1 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl1() As MedicalViewerForm1
            Return New MedicalViewerForm1()
        End Function

        ' This example calibrates the frames of the first cell.

        Public Sub MedicalViewerCalibrateCellExample()
            Dim myForm As MedicalViewerForm1 = GetMedicalControl1()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            medicalViewer.Cells(0).Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm1 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm1()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm1 GetMedicalControl1()
        {
            return new MedicalViewerForm1();
        }

        // This example calibrates the frames of the first cell.

        public void MedicalViewerCalibrateCellExample()
        {
            MedicalViewerForm1 myForm = GetMedicalControl1();
            MedicalViewer medicalViewer = myForm.Viewer;

            medicalViewer.Cells[0].Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters);

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCalibrateCell1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Calibrate(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)">
      <summary>
            Calibrates the cell along the specified axis based on information provided by the user. This allows the user to calibrate a cell without using an annotation ruler.
            </summary>
      <medaddon>yes</medaddon>
      <param name="sourceDistance">The old length to be calibrated.</param>
      <param name="sourceMeasurementUnit">The unit of measure.</param>
      <param name="targetDistance">The new length.</param>
      <param name="targetMeasurementUnit">The unit of measure.</param>
      <param name="axis">The calibration axis.</param>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm2 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl2() As MedicalViewerForm2
            Return New MedicalViewerForm2()
        End Function

        ' This example calibrates the first frame of the first cell.
        Public Sub MedicalViewerCalibrateCellExample2()
            Dim myForm As MedicalViewerForm2 = GetMedicalControl2()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            medicalViewer.Cells(0).Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, 0)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm2 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm2()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm2 GetMedicalControl2()
        {
            return new MedicalViewerForm2();
        }

        // This example calibrates the first frame of the first cell.
        public void MedicalViewerCalibrateCellExample2()
        {
            MedicalViewerForm2 myForm = GetMedicalControl2();
            MedicalViewer medicalViewer = myForm.Viewer;

            medicalViewer.Cells[0].Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, 0);

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCalibrateCell2-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.DeleteTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)">
      <summary>
            Deletes the tag (overlay text) of a cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="alignment">The overlay text alignment.</param>
      <remarks>
            This method will delete the cell tag. The cell tag is a tag that appears on all of the cell frames. 
            To delete the sub-cell the tag use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.DeleteTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)" /> method.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.EditTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagInformation)">
      <summary>
            Edits the tag (overlay text) of cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="position">The overlay text alignment.</param>
      <param name="information">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /> object that 
            contains the new data for the tag.</param>
      <remarks>
            This method will edit the cell tag. The cell tag is a tag that appears on all of the cell frames. 
            To edit a sub-cell the tag use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.EditTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagInformation)">Leadtools.MedicalViewer.MedicalViewerCell.EditTag(int, int, MedicalViewerTagAlignment, MedicalViewerTagInformation)</see> method.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.FlipAnnotationContainer">
      <summary>
            Flips all of the cell annotation containers.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.LoadAnnotations(System.IO.Stream)">
      <summary>
            Loads the annotation container(s) in a cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file being loaded.</param>
      <remarks>
            This method will load the annotations to a file. To save the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SaveAnnotations(System.String)" /> method.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.FlipOrientation">
      <summary>
            Flips the orientation of an image in the cell with the specified parameters.
            </summary>
      <remarks>
        <para>To flip the orientation of a specified sub-cell in the cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FlipOrientation(System.Int32)" /></para>
        <para>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /></para>
        <para>To flip the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage" /></para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Invalidate">
      <summary>
            Redraws the cell and causes a paint message to be sent to the <see cref="N:Leadtools.MedicalViewer" /> control that owns this cells.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            You must add the cell to the <see cref="N:Leadtools.MedicalViewer" /> control before being able to use this method. To add the cell, call the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" /> method.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SaveAnnotations(System.String)">
      <summary>
            Saves the annotation container(s) of a cell to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file to save the annotation container to.</param>
      <remarks>
            This method will save annotations to a file. 
            <para>To load the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</para><para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SaveAnnotations(System.IO.Stream)">
      <summary>
            Saves the annotation container(s) of a cell to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> to save the annotation container to.</param>
      <remarks>
            This method will save annotations to a file. 
            <para>To load the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</para><para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.LoadAnnotations(System.String)">
      <summary>
            Loads the annotation container(s) in a cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file being loaded.</param>
      <remarks>
            This method will load the annotations to a file. 
            <para>To save the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SaveAnnotations(System.String)" /> method.</para><para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.ResetWindowLevelValues">
      <summary>
            Resets the image window level to its default values.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The window level default values are set either internally by the letting 
            the control calculate it, or explicitly be using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetDefaultWindowLevelValues(System.Int32,System.Int32)" /> method.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.ReverseAnnotationContainer">
      <summary>
            Reverses all of the cell annotation containers.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Reversing the annotation containers keeps the annotations in line if the image is reversed.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.ReverseOrientation">
      <summary>
            Reverses the orientation of an image in the cell with the specified subCellIndex.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>To reverses the orientation of the specified sub-cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ReverseOrientation(System.Int32)" /></description>
          </item>
          <item>
            <description>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /></description>
          </item>
          <item>
            <description>To reverse the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage" /></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RotateAnnotationContainer(System.Double)">
      <summary>
            Rotates all the cell annotation containers by the specified amount.
            </summary>
      <medaddon>yes</medaddon>
      <param name="angle">The amount of rotation.</param>
      <remarks>
            The allowed rotation angles are: 90, 180, 270, 0, -90, -180, -270.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RotateOrientation(System.Int32)">
      <summary>
            Rotates the orientation of an image in the cell with the specified parameters.
            </summary>
      <param name="angle">The angle of rotation, the values must be multiple of 90 (i.e. 270, 180, 90, 0, -90, -180, etc.).</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To rotate the orientation of a specified sub-cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RotateOrientation(System.Int32,System.Int32)" />.</description>
          </item>
          <item>
            <description>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" />.</description>
          </item>
          <item>
            <description>To rotate the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)" />.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAnnotationContainer(Leadtools.Annotations.AnnContainer)">
      <summary>
            Sets the <see cref="T:Leadtools.Annotations.AnnContainer" /> object which represents the annotation container.
            </summary>
      <medaddon>yes</medaddon>
      <param name="annContainer">
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container to set.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetAnnotationContainer(System.Int32)" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetDefaultWindowLevelValues(System.Int32,System.Int32)">
      <summary>
            Sets the default window level values for all the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The default window level width value.</param>
      <param name="center">The default window level center value.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method does not change the current window level values.
            To change the current window level values use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="position">The <b>row</b> parameter alignment.</param>
      <param name="type">The type of the tag.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            The tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
            <list type="bullet"><item><description>If <paramref name="row" /> is set to 3 and <paramref name="position" /> to TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</description></item><item><description>If <paramref name="row" /> is set to 3 and <paramref name="position" /> to BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, on the right side.</description></item><item><description>If <paramref name="position" /> is set to TopCenter, BottomCenter, CenterLeft, CenterRight, then <paramref name="row" /> will not be used.</description></item></list></description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="alignment">The <b>row</b> parameter alignment.</param>
      <param name="type">The type of the tag.</param>
      <param name="userText">The user text.</param>
      <param name="font">The font that will be used to draw the tag over the cell.</param>
      <param name="fontColor">The color of the text.</param>
      <remarks>
            The tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
            <ul><li>If <paramref name="row" /> is set to 3 and <paramref name="position" /> is set to TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</li><li>If <paramref name="row" /> is set to 3 and <paramref name="position" /> to BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, on the right side.</li><li>If <paramref name="position" /> is set to TopCenter, BottomCenter, CenterLeft, CenterRight, then <paramref name="row" /> will not be used.</li></ul><item><description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description></item></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="position">The <b>row</b> parameter alignment.</param>
      <param name="type">The type of tag.</param>
      <param name="userText">The user text.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            The tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
            <list type="bullet"><item><description>If <paramref name="row" /> is 3 and <paramref name="position" /> is TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</description></item><item><description>If <paramref name="row" /> is 3 and <paramref name="position" /> is BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, on the right side.</description></item><item><description>If <paramref name="position" /> is TopCenter, BottomCenter, CenterLeft, or CenterRight; then <paramref name="row" /> will be not be used.</description></item><item><description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description></item></list></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.DeleteSelectedAnnotation">
      <summary>
            This method deletes the selected annotation from the cell and active sub-cell annotation container.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.DeclareActionAsAnnotation(Leadtools.MedicalViewer.MedicalViewerActionType,System.Type)">
      <summary>
            Declares the custom action sent as annotation action.
            </summary>
      <isnew>10/24/2010</isnew>
      <param name="action"> the custom action index that will be identified as a custom annotation action.</param>
      <param name="annotationObjectType"> the type of the custom annotation object, you can retrieve this value by using typeof().</param>
      <remarks>
        <para>Before declaring the action, add the action using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The custom action value must be larger than 100.</para>
      </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RefreshAnnotation">
      <summary>
            Repaints the annotations on the sub-cell or cell.
            </summary>
      <isnew>10/24/2010</isnew>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RefreshAnnotation(System.Int32)">
      <summary>
            Repaints the annotations on the sub-cell or cell.
            </summary>
      <isnew>10/24/2010</isnew>
      <param name="subCellIndex"> the sub-cell index of the cell which to repaint its annotations.</param>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Processes Windows messages. Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">WndProc</see>.
            </summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" />Represents the Windows Message to process.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RotateLabels(System.Int32)">
      <summary>
            Rotates the label tags of an image in the cell with the specified parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="degree">The rotation angle. The values must be multiple of 90 (i.e. 270, 180, 90, 0, -90, -180, etc.).</param>
      <remarks>
            The labels (overlay tags) are the text that are docked to the top-center, bottom-center, left-center and right-center of the cell.
            <para>To set those labels, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" />.</para><para>To rotate the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)" />.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.FlipLabels">
      <summary>
            Flips the label tags of an image in the cell with the specified parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            The labels (overlay tags) are the text that are docked to the top-center, bottom-center, left-center and right-center of the cell.
            <para>To set those labels, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" />.</para><para>To flip the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage" />.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.ReverseLabels">
      <summary>
            Reverses the label tags of an image in the cell with the specified subCellIndex.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            The labels (overlay tags) are the text that are docked to the top-center, bottom-center, left-center and right-center of the cell.
            <para>To set those labels, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" />.</para><para>To reverse the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage" />.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetCellActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction,System.Int32)">
      <summary>
            Sets the current properties for the specified action.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="actionType">The action for which the properties are being set.</param>
      <param name="actionProperties">The properties to be set.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell for which the properties are being set.</param>
      <remarks>
            This method is internally called by <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.
            <para>To retrieve the properties for a specific action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetCellActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,System.Int32)">
      <summary>
            Gets the current properties for the specified action.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="actionType">The specified action.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell for which the properties will be retrieved.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseAction" /> that contains the retrieved properties.
            </returns>
      <remarks>
            This method is internally called by <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.
            <para>To set the properties for the specified action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetOffset(Leadtools.MedicalViewer.Point2D)">
      <summary>
            Translates the image position according to the provided X and Y values.
            </summary>
      <param name="point"> A <see cref="T:Leadtools.MedicalViewer.Point2D" /> object that represents the new position of the image.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The points are relative to the center of the cell and the center of the image. This means that if the X and Y values are set to {0, 0}, the image will be displayed at the center of the cell.</description>
          </item>
          <item>
            <description>If the cell has multiple frames, the offset value will be applied to all of the frames.</description>
          </item>
          <item>
            <description>To change the offset using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the offset action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetOffset(System.Double,System.Double)">
      <summary>
            Translates the image position according to the provided X and Y values.
            </summary>
      <param name="x">The x coordinates that represents the new position of the image.</param>
      <param name="y">The y coordinates that represents the new position of the image.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The points are relative to the center of the cell and the center of the image. This means that if the X and Y values are set to {0, 0}, the image will be displayed at the center of the cell.</description>
          </item>
          <item>
            <description>If the cell has multiple frames, the offset value will be applied to all of them.</description>
          </item>
          <item>
            <description>To change the offset using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the offset action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetOffset">
      <summary>
            Gets the current coordinates of the image.
            </summary>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> object which represents the current coordinates of the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>The points are relative to the center of the cell and the center of the image. This means that it will return {0, 0} if the image position is centered on the screen.</description>
          </item>
          <item>
            <description>If the cell has multiple frames, the retrieved offset value will be the offset value of the selected sub-cell.</description>
          </item>
          <item>
            <description>To change the offset using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the offset action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetWindowLevelCenter">
      <summary>
            Gets the window level center value for the image.
            </summary>
      <remarks>
            Sending this instance is a must, otherwise, the custom annotation creation will fail.
            </remarks>
      <list type="bullet">
        <item>
          <description>If the cell has multiple frames, the retrieved center value is the center value of the selected sub-cell.</description>
        </item>
        <item>
          <description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description>
        </item>
      </list>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetWindowLevelWidth">
      <summary>
            Gets the window level width value for the image.
            </summary>
      <remarks>
            Sending this instance is a must, otherwise, the custom annotation creation will fail.
            </remarks>
      <list type="bullet">
        <item>
          <description>If the cell has multiple frames, the retrieved width value is the width value of the selected sub-cell.</description>
        </item>
        <item>
          <description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description>
        </item>
      </list>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetWindowLevel(System.Int32,System.Int32)">
      <summary>
            Sets the window level width and center values for the image.
            </summary>
      <param name="width">A <see cref="T:System.Int32" /> value that represents the new window level width value.</param>
      <param name="center">A <see cref="T:System.Int32" /> value that represents the new window level center value.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the cell has multiple frames, the width and center values will be applied to all of them.</description>
          </item>
          <item>
            <description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Position">
      <summary>
            Gets or sets the row/column position of the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition" /> object that represents the row and column position of the cell.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignText">
      <summary>
            Gets or sets the design text to display when in layout design mode.
            </summary>
      <value>The text to display.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignImage">
      <summary>
            Gets or sets the design image to display when in layout design mode.
            </summary>
      <value>
            The image to display.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationCreated">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user creates a new annotation object using one of the medical viewer annotation tools.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub

         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This example converts the annotation object (rectangle, ellipse and hilite) into a region once the user draws them

      Public Sub MedicalViewerAnnotationCreatedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.AnnotationCreated, AddressOf medicalViewer_AnnotationCreated
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnnotationCreated(ByVal sender As Object, ByVal e As MedicalViewerAnnotationCreatedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim attribute As MedicalViewerAnnotationAttributes = cell.GetSelectedAnnotationAttributes(e.SubCellIndex)
         Select Case attribute.Type
            Case MedicalViewerActionType.AnnotationRectangle, MedicalViewerActionType.AnnotationEllipse, MedicalViewerActionType.AnnotationHilite
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, True)
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
            cell.AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This example converts the annotation object (rectangle, ellipse and hilite) into a region once the user draws them

      public void MedicalViewerAnnotationCreatedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.AnnotationCreated += new EventHandler&lt;MedicalViewerAnnotationCreatedEventArgs&gt;(medicalViewer_AnnotationCreated);
         myForm.ShowDialog();
      }

      void medicalViewer_AnnotationCreated(object sender, MedicalViewerAnnotationCreatedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         MedicalViewerAnnotationAttributes attribute = cell.GetSelectedAnnotationAttributes(e.SubCellIndex);
         switch (attribute.Type)
         {
            case MedicalViewerActionType.AnnotationRectangle:
            case MedicalViewerActionType.AnnotationEllipse:
            case MedicalViewerActionType.AnnotationHilite:
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, true);
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationCreatedEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user start the spy glass, by holding the mouse button assign to the spy glass action.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>To use the spy glass tool, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> to add the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.SpyGlass</see> action to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ProbeToolTextChanged">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the probe tool text is changed.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CustomAnnotationDataRequested">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user creates the custom annotation, edits the custom annotation or draws the custom annotation.</value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ChangingWindowLevel">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user changes any window level values using one of the medical viewer window level tool.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm
         Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As New MedicalViewerMultiCell(_image, True, 1, 1)

            ' add window level action that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

            _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub

         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' When the user uses the window level tool, this example displays the previous and new window level values.

      Public Sub MedicalViewerAnnotationCreatedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.ChangingWindowLevel, AddressOf medicalViewer_ChangingWindowLevel
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ChangingWindowLevel(ByVal sender As Object, ByVal e As Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs)
         Dim msg As String = String.Format(Constants.vbLf &amp; "Sub Cell Index: {0}" &amp; "Previous Window Center: {1}" &amp; Constants.vbLf &amp; "Previous Window Width: {2}" &amp; Constants.vbLf &amp; "New Window Center: {3}" &amp; Constants.vbLf &amp; "New Window Width{4}", e.SubCellIndex, e.OldCenter, e.OldWidth, e.Center, e.Width)
         Console.WriteLine(msg)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add window level action that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // When the user uses the window level tool, this example displays the previous and new window level values.

      public void MedicalViewerAnnotationCreatedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.ChangingWindowLevel += new EventHandler&lt;Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs&gt;(medicalViewer_ChangingWindowLevel);
         myForm.ShowDialog();
      }

      void medicalViewer_ChangingWindowLevel(object sender, Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs e)
      {
         string msg = string.Format("\nSub Cell Index: {0}\nPrevious Window Center: {1}\nPrevious Window Width: {2}\nNew Window Center: {3}\nNew Window Width{4}",
            e.SubCellIndex,
            e.OldCenter,
            e.OldWidth,
            e.Center,
            e.Width);
         Console.WriteLine(msg);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerChangingWindowLevelEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationClicked">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user clicks on one of the existing annotation object inside a cell or a sub-cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This example will convert the rectangle, ellipse or hilite annotation into region once the user clicks on them.

      Public Sub MedicalViewerAnnotationClickedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         AddHandler cell.AnnotationClicked, AddressOf medicalViewer_AnnotationClicked
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnnotationClicked(ByVal sender As Object, ByVal e As MedicalViewerAnnotationClickedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim attribute As MedicalViewerAnnotationAttributes = cell.GetSelectedAnnotationAttributes(e.SubCellIndex)
         Select Case attribute.Type
            Case MedicalViewerActionType.AnnotationRectangle, MedicalViewerActionType.AnnotationEllipse, MedicalViewerActionType.AnnotationHilite
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, True)


         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
            cell.AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This example will convert the rectangle, ellipse or hilite annotation into region once the user clicks on them.

      public void MedicalViewerAnnotationClickedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.AnnotationClicked += new EventHandler&lt;MedicalViewerAnnotationClickedEventArgs&gt;(medicalViewer_AnnotationClicked);
         myForm.ShowDialog();
      }

      void medicalViewer_AnnotationClicked(object sender, MedicalViewerAnnotationClickedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         MedicalViewerAnnotationAttributes attribute = cell.GetSelectedAnnotationAttributes(e.SubCellIndex);
         switch (attribute.Type)
         {
            case MedicalViewerActionType.AnnotationRectangle:
            case MedicalViewerActionType.AnnotationEllipse:
            case MedicalViewerActionType.AnnotationHilite:
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, true);
               break;


         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationClickedEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DeleteAnnotation">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user delete the selected annotation object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user deletes, creates, modifies, or uses one of the annotation objects.</value>
      <remarks>
            This delegate occurs when the user:
            <list type="bullet"><item><description>starts creating a new annotation object using the Medical Viewer actions. For more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</description></item><item><description>starts editing an already created annotation object, by either moving, resizing or rotating it.</description></item><item><description>clicks on an already created annotation object in the Run mode. To enter the run mode, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.UserMode" />.</description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        ' This example makes the color of each newly created object blue.
        Private Class MedicalViewerDesignerCreatedForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _image As RasterImage

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)
                AddHandler cell.DesignerCreated, AddressOf cell_DesignerCreated

                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub cell_DesignerCreated(ByVal sender As Object, ByVal e As MedicalViewerDesignerCreatedEventArgs)
                If e.Type = MedicalViewerDesignerType.DrawDesigner Then
                    Dim designer As AnnDrawDesigner = CType(e.Designer, AnnDrawDesigner)
                    AddHandler designer.Draw, AddressOf designer_Draw
                End If
            End Sub

            Private Sub designer_Draw(ByVal sender As Object, ByVal e As AnnDrawDesignerEventArgs)
                If e.OperationStatus = AnnDesignerOperationStatus.Start Then
                    e.Object.Brush = New AnnSolidBrush(Color.Blue)
                End If
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerDesignerCreatedForm() As MedicalViewerDesignerCreatedForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Return New MedicalViewerDesignerCreatedForm()
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerDesignerCreatedExample()
            Dim myForm As MedicalViewerDesignerCreatedForm = GetMedicalViewerDesignerCreatedForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // This example makes the color of each newly created object blue.
      class MedicalViewerDesignerCreatedForm : Form
      {
         private MedicalViewer _medicalViewer;
         private RasterImage _image;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerDesignerCreatedForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);
            cell.DesignerCreated += new EventHandler&lt;MedicalViewerDesignerCreatedEventArgs&gt;(cell_DesignerCreated);

            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void cell_DesignerCreated(object sender, MedicalViewerDesignerCreatedEventArgs e)
         {
            if (e.Type == MedicalViewerDesignerType.DrawDesigner)
            {
               AnnDrawDesigner designer = (AnnDrawDesigner)e.Designer;
               designer.Draw += new EventHandler&lt;AnnDrawDesignerEventArgs&gt;(designer_Draw);
            }
         }

         void designer_Draw(object sender, AnnDrawDesignerEventArgs e)
         {
            if (e.OperationStatus == AnnDesignerOperationStatus.Start)
            {
               e.Object.Brush = new AnnSolidBrush(Color.Blue);
            }
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerDesignerCreatedForm GetMedicalViewerDesignerCreatedForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         return new MedicalViewerDesignerCreatedForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerDesignerCreatedExample()
      {
         MedicalViewerDesignerCreatedForm myForm = GetMedicalViewerDesignerCreatedForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.DesignerCreated-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <keywords>StartDrawingAnnotation</keywords>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when creates a new annotation using one of the Medical Viewer actions. For more information on adding actions, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        ' This example makes the color of each newly created object blue.
        Private Class MedicalViewerStartDrawingAnnotationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _image As RasterImage

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)
                AddHandler cell.StartDrawingAnnotation, AddressOf cell_StartDrawingAnnotation

                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub cell_StartDrawingAnnotation(ByVal sender As Object, ByVal e As MedicalViewerDrawingAnnotationsEventArgs)
                e.Object.Brush = New AnnSolidBrush(Color.Red)
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerStartDrawingAnnotationForm() As MedicalViewerStartDrawingAnnotationForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Return New MedicalViewerStartDrawingAnnotationForm()
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerStartDrawingAnnotationExample()
            Dim myForm As MedicalViewerStartDrawingAnnotationForm = GetMedicalViewerStartDrawingAnnotationForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // This example makes the color of each newly created object blue.
      class MedicalViewerStartDrawingAnnotationForm : Form
      {
         private MedicalViewer _medicalViewer;
         private RasterImage _image;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerStartDrawingAnnotationForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);
            cell.StartDrawingAnnotation += new EventHandler&lt;MedicalViewerDrawingAnnotationsEventArgs&gt;(cell_StartDrawingAnnotation);

            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void cell_StartDrawingAnnotation(object sender, MedicalViewerDrawingAnnotationsEventArgs e)
         {
            e.Object.Brush = new AnnSolidBrush(Color.Red);
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerStartDrawingAnnotationForm GetMedicalViewerStartDrawingAnnotationForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         return new MedicalViewerStartDrawingAnnotationForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerStartDrawingAnnotationExample()
      {
         MedicalViewerStartDrawingAnnotationForm myForm = GetMedicalViewerStartDrawingAnnotationForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.StartDrawingAnnotation-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.UserTag">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when painting a cell that contains a custom tag (<see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" />.OwnerDraw.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragDrop">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Optional delegate method for additional processing. Occurs when the drag-and-drop operation is completed.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragOver">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Optional delegate method for additional processing. Occurs when an object is dragged over the cell's bounds.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.BorderStyle">
      <summary>
            Gets or sets an enumerated value that indicates the style of the selected cell border.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that indicates the style of the selected cell border.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultAnnotationUnit">
      <summary>
            Gets or sets the value that determines the default unit that will be used when the user draws an annotation.
            </summary>
      <medaddon>yes</medaddon>
      <value> A <see cref="T:Leadtools.Annotations.AnnUnit" /> enumeration value that determines the default unit that will be used when the user draws an annotation.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.CreateParams">
      <summary>
            Overrides the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.CreateParams">CreateParams</see>.
            </summary>
      <medaddon>yes</medaddon>
      <value>Overrides the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.CreateParams">CreateParams.</see></value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ActionCount">
      <summary>
            (Read only) Gets the number of actions that have been added to the MedicalViewer.
            </summary>
      <medaddon>yes</medaddon>
      <value>The number of actions that have been added to the MedicalViewer.</value>
      <remarks>
        <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ParentViewer">
      <summary>
            (Read only) Gets the medical viewer object which is the owner of the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="N:Leadtools.MedicalViewer">Leadtools.MedicalViewer</see> object which is the owner of the cell. If the cell has not been added to the medical viewer, then the method will return null.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Frozen">
      <summary>
            Gets or sets the value that determines whether the cell is selected.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the cell is selected; otherwise, false.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>Freezing a cell means that no actions using the mouse or the keyboard can be performed on the cell.</description>
          </item>
          <item>
            <description>There are different methods that allow more than one cell be frozen or unfrozen, like <see cref="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.FreezeAll(System.Boolean)" />, <see cref="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.FreezeSelected(System.Boolean)" />.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Selected">
      <summary>
            Gets or sets the value that determines whether the cell is selected.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the cell is selected; otherwise, false.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>There are different methods that allow one to select or un-select more than one cell, including<see cref="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.SelectAll(System.Boolean)" />, <see cref="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.InvertSelection" />.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ShowTags">
      <summary>
            Gets or sets the value that indicates whether to show the tags on the cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the tags, false to hide the tags.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.OverlapPriority">
      <summary>
            Gets or sets the overlap priority.
            </summary>
      <value>The overlap priority.  The range is from 1 to 100.</value>
      <remarks>
            If the cell overlaps other cell positions this value indicates how to layer this cell in relation to other cells
            in the viewer.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.OverlayTextSize">
      <summary>
            Gets or sets the size of the cell or sub-cell tags.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the size of the cell or sub-cell tags. If set to zero, the size 
            of the tag will depend on the size of the cell or the sub-cell to identify the size of the tag. Default is 0.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <remarks>
            The default value is 0, which means that the size of the overlay text will depend on the size of the 
            cell / sub-cell. Setting this property to any value other than zero will set a constant size for the 
            overlay text regardless of the cell/sub-cell size.
            </remarks>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.LayoutPosition">
      <summary>
            Gets or sets the layout position.
            </summary>
      <value>The layout position.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.MeasurementUnit">
      <summary>
            Gets or sets the unit of measure for the rulers.
            </summary>
      <medaddon>yes</medaddon>
      <value>The unit of measure for the rulers.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerStyle">
      <summary>
            Gets or sets an enumerated value that indicates the style of the cell horizontal and vertical rulers.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that indicates the style of the cell horizontal and vertical rulers.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DisplayRulers">
      <summary>
            Gets or sets the enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerRulers" /> value that indicates the displayed rulers.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerRulers" /> value that indicates the displayed rulers.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Cursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is hovering over the medical control.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the mouse pointer is hovering over the medical control.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellBackColor">
      <summary>
            Gets or sets the color of the cell area.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the cell area.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.TextColor">
      <summary>
            Gets or sets the color of the cell overlay text.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the cell overlay text.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.TextShadowColor">
      <summary>
            Gets or sets the color of the cell overlay text shadow.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the cell overlay text shadow.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerInColor">
      <summary>
            Gets or sets the color of ruler.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the ruler. This is useful if the value of the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerStyle" /> is <see cref="T:Leadtools.MedicalViewer.MedicalViewerRulerStyle" />.Bordered.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerOutColor">
      <summary>
            Gets or sets the color of the ruler boundaries.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the ruler boundaries. This is useful if the value of the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerStyle" /> is <see cref="T:Leadtools.MedicalViewer.MedicalViewerRulerStyle" />.Bordered.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ActiveBorderColor">
      <summary>
            Gets or sets the border color of the selected cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The border color of the selected cell.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.NonActiveBorderColor">
      <summary>
            Gets or sets the color of the non-selected cell border.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the non-selected cell border.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ActiveSubCellBorderColor">
      <summary>
            Gets or sets the color of the active sub-cell border color.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the active sub-cell border color.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationMoveCursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over a selected annotation object.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the mouse pointer is over a selected annotation object.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationSelectCursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over a non-selected annotation.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursors" /> object that represents the cursor to display when the mouse pointer is over a non-selected annotation.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationDefaultCursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the handle of a selected annotation.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursors" /> object that represents the cursor to display when the mouse pointer is over the handle of a selected annotation.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.TextQuality">
      <summary>
            Gets or sets an enumerated value that indicates the quality of the overlay text.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that indicates the style of the quality of the overlay text.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.SubCells">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.RasterCollection`1" /> assigned to the cell.
            </summary>
      <isnew>10/24/2010</isnew>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.RasterCollection`1" />.</value>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultRubberStampType">
      <summary>
            Gets or sets the default rubber stamp type that will be used when creating a new rubber stamp.
            </summary>
      <isnew>10/24/2010</isnew>
      <remarks>
            To create a rubber stamp type, you can do one of the following:
            <list type="bullet"><item><description>Add the object <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.AnnotationContainer" /> objects collection; this is done using the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.SubCells" /> property.</description></item><para>Or;</para><item><description>Add and set the action <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.AnnotationRubberStamp using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> and <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method respectively, then draw the action using the mouse.</description></item></list></remarks>
      <value>An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> object that will be used to create a new rubber stamp</value>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.MaintainAnnotationObjectAspectRatio">
      <summary>
            Gets or sets the value that determines whether to maintain the aspect ratio when editing the annotation object using the mouse or not.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to maintain the aspect ratio; otherwise, false.</value>
      <remarks>
            This value is useful when resize the symmetrical annotation objects like rectangle, ellipse, hilite, etc.
            </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.MaintainAnnotationThickness">
      <summary>
            Gets or sets the value that determines whether to keep the annotation thickness as it is when scale the cell up or down.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to keep the thickness from changing when scaling the cell/sub-cell; otherwise, false.</value>
      <remarks>
            To change the annotation thickness, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultAnnotationThickness" /> property.
            </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ShowRotationHandle">
      <summary>
            Gets or sets the value that determines whether to show the annotation rotation handle.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to show the rotation handle along with the rotation center; otherwise, false.</value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultAnnotationColor">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> that determines the default annotation color that will be used when drawing the annotation using the annotation action.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:System.Drawing.Color" />the default annotation color.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultAnnotationThickness">
      <summary>
            Gets or sets the value that indicates the thickness of the annotation object created using the annotation action.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>Value that indicates the thickness of the annotation object created using the annotation action.</value>
      <remarks>
            To keep the annotation from changing the thickness when scaling the cell up or down, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.MaintainAnnotationThickness" /> property.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.FixedTextSize">
      <summary>
            Gets or sets the value that determines whether to maintain a fixed size of the text font, so if the user scale the annotations up or down, the text size will remain the same.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to maintain a fixed size of the text font; otherwise, false.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.CreateFromCenter">
      <summary>
            Gets or sets the value that determines whether to draw the annotation object from the center outward, or from edge to edge.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to draw the annotation object from the center, false to draw from the edge.</value>
      <remarks>
            This property works only with symmetrical objects (like button, rectangle, ellipse, etc.).
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCreateFromCenterForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForCreateFromCenterExample() As MedicalViewerForm13
            Return New MedicalViewerForm13()
        End Function


        Public Sub MedicalViewerCreateFromCenterExample()
            Dim myForm As MedicalViewerForm13 = GetMedicalControlForCreateFromCenterExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


            ' This feature allows the user to create the object from the center.
            cell.CreateFromCenter = True
            cell.AddAction(MedicalViewerActionType.AnnotationButton)
            cell.SetAction(MedicalViewerActionType.AnnotationButton, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

            MessageBox.Show("Create a button annotation by clicking and dragging the mouse button")

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerCreateFromCenterForm : Form
        {
           private MedicalViewer _medicalViewer;
           void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
           {
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
           }

           public MedicalViewerCreateFromCenterForm()
           {
              RasterCodecs _codecs = new RasterCodecs();
              RasterImage _image;

              this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

              // Create the medical viewer and adjust the size and the location.
              _medicalViewer = new MedicalViewer(1, 2);
              _medicalViewer.Location = new Point(0, 0);
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

              // Load an image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
              MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

              // add some actions that will be used to change the properties of the images inside the control.
              cell.AddAction(MedicalViewerActionType.WindowLevel);
              cell.AddAction(MedicalViewerActionType.Alpha);
              cell.AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              _medicalViewer.Cells.Add(cell);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              // Load another image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
              _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

              // add some actions that will be used to change the properties of the images inside the control.
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              Controls.Add(_medicalViewer);
              _medicalViewer.Dock = DockStyle.Fill;
           }
           public MedicalViewer Viewer
           {
              get { return _medicalViewer; }
           }
        }
        MedicalViewerForm13 GetMedicalControlForCreateFromCenterExample()
        {
           return new MedicalViewerForm13();
        }


        public void MedicalViewerCreateFromCenterExample()
        {
           MedicalViewerForm13 myForm = GetMedicalControlForCreateFromCenterExample();
           MedicalViewer medicalViewer = myForm.Viewer;
           MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


           // This feature allows the user to create the object from the center.
           cell.CreateFromCenter = true;
           cell.AddAction(MedicalViewerActionType.AnnotationButton);
           cell.SetAction(MedicalViewerActionType.AnnotationButton, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

           MessageBox.Show("Create a button annotation by clicking and dragging the mouse button");

           myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCreateFromCenter-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.MaintainTextOrientation">
      <summary>
            Gets or sets the value that determines whether to keep the text orientation as it is when rotating, flipping or reversing the annotation container.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>true to keep the text orientation; otherwise, false.</value>
      <remarks>
            This property works only with the annotation objects that contain text.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronization" /> assigned to the cell, which contains the collection where to add synchronization objects.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronization" />.</value>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerNewSyncrhonizationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private _seriesManager512 As MedicalViewerSeriesManager

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager, ByVal output512 As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output
                _seriesManager512 = output512


                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 0
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                ' this tag to identify the cell.





                ' Load the second cell with 512 frame

                cell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
                count = output512.Stacks(0).Items.Count
                imageInformation = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output512.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 1
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output512.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output512.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output512.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output512.Stacks(0).Items(0).FrameOfReferenceUID

                Dim synchronizationObject As MedicalViewerStackSynchronizationObject = New MedicalViewerStackSynchronizationObject()
                synchronizationObject.Mode = MedicalViewerSynchronizationType.Automatic
                synchronizationObject.Cells.AddRange(_medicalViewer.Cells)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()



            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                Dim output As MedicalViewerSeriesManager
                If CInt(cell.Tag) = 0 Then
                    output = _seriesManager
                Else
                    output = _seriesManager512
                End If

                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerNewSyncrhonizationForm() As MedicalViewerNewSyncrhonizationForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()
            Dim output512 As MedicalViewerSeriesManager = form.LoadJamesHead512()

            Return New MedicalViewerNewSyncrhonizationForm(output, output512)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerNewSynchronizationExample()
            Dim myForm As MedicalViewerNewSyncrhonizationForm = GetMedicalViewerNewSyncrhonizationForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerNewSyncrhonizationForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         private MedicalViewerSeriesManager _seriesManager512;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerNewSyncrhonizationForm(MedicalViewerSeriesManager output, MedicalViewerSeriesManager output512)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;
            _seriesManager512 = output512;


            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 0;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            // this tag to identify the cell.





            // Load the second cell with 512 frame

            cell = new MedicalViewerMultiCell(null, true, 1, 1);
            count = output512.Stacks[0].Items.Count;
            imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output512.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 1;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output512.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output512.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output512.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output512.Stacks[0].Items[0].FrameOfReferenceUID;

            MedicalViewerStackSynchronizationObject synchronizationObject = new MedicalViewerStackSynchronizationObject();

            synchronizationObject.Mode = MedicalViewerSynchronizationType.Automatic;
            // Add all the cells in the viewer to the synchronization object.
            synchronizationObject.Cells.AddRange(_medicalViewer.Cells);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);

            MedicalViewerSeriesManager output = (int)cell.Tag == 0 ? _seriesManager : _seriesManager512;

            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerNewSyncrhonizationForm GetMedicalViewerNewSyncrhonizationForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();
         MedicalViewerSeriesManager output512 = form.LoadJamesHead512();

         return new MedicalViewerNewSyncrhonizationForm(output, output512);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerNewSynchronizationExample()
      {
         MedicalViewerNewSyncrhonizationForm myForm = GetMedicalViewerNewSyncrhonizationForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.NewSyncID-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.DefaultAnnotationFont">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnFont" /> class that represents the font used for the text in all the annotation objects.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnFont" /> class that represents the font used for the text in all the annotation objects that will be drawn later.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" />.
            </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SelectedSubCellChanged">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user clicks on a different sub-cell or when scrolling the cell scroll.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                _medicalViewer.Cells.Add(cell)



                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 2, 2)
                _medicalViewer.Cells.Add(cell1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell1.AddAction(MedicalViewerActionType.WindowLevel)
                cell1.AddAction(MedicalViewerActionType.Alpha)
                cell1.AddAction(MedicalViewerActionType.Offset)
                cell1.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      Public Sub MedicalViewerActiveSubCellChangedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer


         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged
         AddHandler cell1.ActiveSubCellChanged, AddressOf cell1_ActiveSubCellChanged
         myForm.ShowDialog()
      End Sub

      Private Sub cell1_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         medicalViewer_ActiveSubCellChanged(sender, e)
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim index As Integer
         If (e.CellIndex = 1) Then
            index = 0
         Else
            index = 1
         End If
         Dim theOtherCell As MedicalViewerMultiCell = CType(cell.ParentViewer.Cells(index), MedicalViewerMultiCell)


         Dim stackProperties As MedicalViewerStack = CType(theOtherCell.GetActionProperties(MedicalViewerActionType.Stack), MedicalViewerStack)

         stackProperties.ActiveSubCell = e.SubCellIndex Mod (theOtherCell.Rows * theOtherCell.Columns)
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties)
         stackProperties.Dispose()

      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            _medicalViewer.Cells.Add(cell);



            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 2, 2);
            _medicalViewer.Cells.Add(cell1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);
            cell1.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      public void MedicalViewerActiveSubCellChangedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;


         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged);
         cell1.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(cell1_ActiveSubCellChanged);
         myForm.ShowDialog();
      }

      void cell1_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         medicalViewer_ActiveSubCellChanged(sender, e);
      }

      void medicalViewer_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         int index = (e.CellIndex == 1) ? 0 : 1;
         MedicalViewerMultiCell theOtherCell = (MedicalViewerMultiCell)(cell.ParentViewer.Cells[index]);


         MedicalViewerStack stackProperties = (MedicalViewerStack)theOtherCell.GetActionProperties(MedicalViewerActionType.Stack);

         stackProperties.ActiveSubCell = e.SubCellIndex % (theOtherCell.Rows * theOtherCell.Columns);
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell;
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties);
         stackProperties.Dispose();

      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ShowControlPoints">
      <summary>
            Gets or sets the value that indicates whether to display the annotation control point or not.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
            true to show the annotation control point; otherwise, it is false.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.SelectMultipleAnnotation">
      <summary>
            Gets or sets the value that indicates whether to allow the selection of multiple annotation or not.
            </summary>
      <value>
            true to allow the user to select multiple annotation, false to prevent multiple annotation selection.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>To select multiple annotation, make sure that this property is set to true, then click and drag the mouse to create a selection rectangle over the annotations object.</description>
          </item>
          <item>
            <description>To create a selection rectangle, you must have a mouse button that is not assigned to any action. this is done by setting the value <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.None through the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewer"></see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.OnUIChanged(Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UIChanged" /></summary>
      <param name="args">An EventArgs that contains the event data.</param>
      <remarks>
            When overriding OnUIChanged in a derived class, be sure to call the base class's OnUIChanged method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageFlipped">
      <summary>
            Retrieves whether the image has been flipped or not.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            true if the image is flipped; otherwise, false.
            </returns>
      <remarks>
            In order to be able to retrieve the correct value from this method, you should flip the images inside the medical viewer using the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage" />.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm14 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForIsFlippedExample() As MedicalViewerForm14
            Return New MedicalViewerForm14()
        End Function
        ' 

        Public Sub MedicalViewerIsFlippedExample()
            Dim myForm As MedicalViewerForm14 = GetMedicalControlForIsFlippedExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            MessageBox.Show(cell.IsImageFlipped(0).ToString())

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm14 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm14()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm14 GetMedicalControlForIsFlippedExample()
        {
            return new MedicalViewerForm14();
        }
        // 

        public void MedicalViewerIsFlippedExample()
        {
            MedicalViewerForm14 myForm = GetMedicalControlForIsFlippedExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            MessageBox.Show(cell.IsImageFlipped(0).ToString());

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.IsFlipped-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageReversed">
      <summary>
            Retrieves a value that indicates whether the image has been reversed or not.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            true if the image is reversed; otherwise, false.
            </returns>
      <remarks>
            In order to be able to retrieve the correct value from this method, you should reverse the images inside the medical viewer using the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage" />.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm13 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForIsReversedExample() As MedicalViewerForm13
            Return New MedicalViewerForm13()
        End Function
        ' 

        Public Sub MedicalViewerIsReversedExample()
            Dim myForm As MedicalViewerForm13 = GetMedicalControlForIsReversedExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            MessageBox.Show(cell.IsImageReversed(0).ToString())

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm13 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm13()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm13 GetMedicalControlForIsReversedExample()
        {
            return new MedicalViewerForm13();
        }
        // 

        public void MedicalViewerIsReversedExample()
        {
            MedicalViewerForm13 myForm = GetMedicalControlForIsReversedExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            MessageBox.Show(cell.IsImageReversed(0).ToString());

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.IsReversed-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetCellImage(System.Boolean,Leadtools.MedicalViewer.MedicalViewerCellImageFeatures)">
      <summary>
            Returns a printable version of the cell.
            </summary>
      <param name="exploded">true to print the sub-cell, but after scaling it up to fit the entire cell area.</param>
      <param name="features">An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures" /> value that lets 
            you select which part of the cell besides the image to draw.</param>
      <returns>
        <see cref="T:System.Drawing.Image" /> object which is the printable version of the cell.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method is useful whenever the user needs to save the image along with the annotations, tags, border, rulers and anything that has been drawn on the cell.</description>
          </item>
          <item>
            <description>The user can save, print or copy the returned image.</description>
          </item>
          <item>
            <description>For more information about the cell, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Medical Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub MedicalViewerSaveCellExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim myImage As Image = (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).GetCellImage()
         myImage.Save(Path.Combine(LEAD_VARS.ImagesDir, "FirstCell.bmp"))

         myImage.Dispose()
         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MedicalViewerSaveCellExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         Image myImage = ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).GetCellImage();
         myImage.Save(Path.Combine(LEAD_VARS.ImagesDir,"FirstCell.bmp"));

         myImage.Dispose();
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.GetCellImageSample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetRotateImagePerspectiveAngle">
      <summary>
            (Read only) Gets the rotation angle for the image in the cell.
            </summary>
      <returns>
            The image rotation angle.
            </returns>
      <remarks>
            In order to get the correct value from this method, you should rotate the images in the medical viewer control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)" /> method.
            </remarks>
      <example>
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.Refresh">
      <summary>
            Updates and recalculates the data of the cell.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.PointToClient(System.Drawing.Point)">
      <summary>
            Returns the client coordinates (the cell coordinates) corresponding to the image coordinates specified by the user.
            </summary>
      <medaddon>yes</medaddon>
      <param name="point">The <see cref="T:System.Drawing.Point" /> object that represents the image coordinates.</param>
      <returns>
            A <see cref="T:System.Drawing.Point" /> object that contains the client (the cell) coordinates.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.ConvertAnnotationToRegion(Leadtools.RasterRegionCombineMode,System.Boolean)">
      <summary>
            Converts the selected annotation into a region of interest.
            </summary>
      <medaddon>yes</medaddon>
      <param name="combineMode">A <see cref="T:Leadtools.RasterRegionCombineMode" /> value that indicates how to create a region, if one is defined.</param>
      <param name="deleteAnnotation">true to delete the annotation after creating the region, otherwise it is false.</param>
      <remarks>
            This method works only on the closed shape annotation objects, for example:
            <list type="bullet"><item><description>rectangle annotation.</description></item><item><description>ellipse annotation.</description></item><item><description>hilite annotation.</description></item></list>
            Only the selected 
            annotation in the active sub-cell is converted into a region.
            For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.
            </remarks>
      <example>
        <para>Converts the closed shape annotation object into a region of interest</para>
        <code lang="VB">      ' You will need to add hilite, a rectangle or an ellipse annotation before being able to use this example.
      Public Sub MedicalViewerAnnotationAttributesExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim annotationAttributes As MedicalViewerAnnotationAttributes = (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).GetSelectedAnnotationAttributes(-2)
         Select Case annotationAttributes.Type
            Case MedicalViewerActionType.AnnotationHilite, MedicalViewerActionType.AnnotationRectangle, MedicalViewerActionType.AnnotationEllipse
               CType(medicalViewer.Cells(0), MedicalViewerMultiCell).ConvertAnnotationToRegion(RasterRegionCombineMode.Set, True)
            Case Else
               MessageBox.Show("This annotation object cannot be converted into a region, choose either rectangle, ellipse or hilite")
         End Select
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      // You will need to add hilite, a rectangle or an ellipse annotation before being able to use this example.
      public void MedicalViewerAnnotationAttributesExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerAnnotationAttributes annotationAttributes = ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).GetSelectedAnnotationAttributes(-2);
         switch (annotationAttributes.Type)
         {
            case MedicalViewerActionType.AnnotationHilite:
            case MedicalViewerActionType.AnnotationRectangle:
            case MedicalViewerActionType.AnnotationEllipse:
               ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).ConvertAnnotationToRegion(RasterRegionCombineMode.Set, true);
               break;
            default:
               MessageBox.Show("This annotation object cannot be converted into a region, choose either rectangle, ellipse or hilite");
               break;
         }
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerAnnotationAttributes-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.DisposeCutPlanesData">
      <summary>
            Disposes the cut-plane data.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>In order to generate the cut-plane, the program will internally have to allocate a large amount of data. Keeping this data allocated after being done with the cut-plane is inefficient. It's recommended to call this method after being done with the cut-plane feature.</description>
          </item>
          <item>
            <description>Also, it's recommended not to call this method after deleting every cut-plane. Since it will require the program to recalculate data once again. You need to keep this data (not calling this method), until after you are done with the cut-plane, or when you need a large amount of free memory.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.DisposeInternalData">
      <summary>
            Disposes the cut-plane data created by either the cut-line or the panoramic image.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            In order to generate the cut-plane or the panoramic data, the program will internally have to allocate a large amount of data. Keeping this data allocated after being done with the cut-plane and the panoramic image is inefficient. It's recommended to call this method after being done with those features.
            <para>Also, it's recommended not to call this method after deleting every cut-plane or panoramic polygon since it will require the program to recalculate data once again. You need to keep this data (not calling this method), until after you are done with the cut-plane, or when you need a large amount of free memory.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.BeginUpdate">
      <summary>
            Stops the cell from being refreshed if any changes are applied. This is useful to increase the control speed efficiency.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            This method will cause the cell not to repaint if any changes are applied. When the user calls the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EndUpdate" /> method, the cell will repaint to show all the changes made. This is useful for better visual results and for speed efficiency.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.EndUpdate">
      <summary>
            Refreshes the control to include all the changes made after using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.BeginUpdate" /> method.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.BeginUpdate" /> method will cause the cell not to repaint if any change is applied. When the user calls the <b>EndUpdate</b> method, the cell will repaint to show all the changes made. This is useful for better visual results and for speed efficiency.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetNoImageText(System.String)">
      <summary>
            Set the text that will be displayed if the image is not loaded yet. This is used only with the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" /></summary>
      <param name="text"> the text that will be displayed when the image is not loaded yet. </param>
      <remarks>
            This feature can only be used with the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.#ctor">
      <summary>
            Initializes a new MedicalViewerCell class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.#ctor(Leadtools.RasterImage)">
      <summary>
            Initializes a new <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class object that has an image attached.
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The image that will be attached to this cell.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.#ctor(Leadtools.RasterImage,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class object that has an image that can be set to fit within the image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The image that will be attached to this cell.</param>
      <param name="fit">true to fit the image within the cell area; otherwise, false.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.#ctor(Leadtools.RasterImage,Leadtools.MedicalViewer.MedicalViewerLayoutPosition)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class.
            </summary>
      <param name="image">The image that will be attached to this cell.</param>
      <param name="location">The location of the cell in the viewer.</param>
      <remarks>
            The position is represented by four dimensionless floating point values, in the range
            0.0 to 1.0.  The Lower left hand position represents the (0.0,0.0).
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)">
      <summary>
            Rotates the perspective of the cell images by the specified rotation angles.
            </summary>
      <medaddon>yes</medaddon>
      <param name="angle">The rotation angle.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The allowed rotation angles are: 90, 180, 270, -90, -180, -270.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage">
      <summary>
            Flips all the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is strongly recommended to use this method to flip the image.</description>
          </item>
          <item>
            <description>To retrieve whether the image has been flipped, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageFlipped" />method. </description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm11 : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForFlipExample() As MedicalViewerForm11
            Return New MedicalViewerForm11()
        End Function
        ' 

        Public Sub MedicalViewerFlipExample()
            Dim myForm As MedicalViewerForm11 = GetMedicalControlForFlipExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


            cell.FlipImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm11 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm11()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm11 GetMedicalControlForFlipExample()
        {
            return new MedicalViewerForm11();
        }
        // 

        public void MedicalViewerFlipExample()
        {
            MedicalViewerForm11 myForm = GetMedicalControlForFlipExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


            cell.FlipImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.FlipImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage">
      <summary>
            Reverses all the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is strongly recommended to use this method to reverse the image.</description>
          </item>
          <item>
            <description>To retrieve whether the image has been reversed, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageReversed" /></description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm12 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForReverseExample() As MedicalViewerForm12
            Return New MedicalViewerForm12()
        End Function
        ' 

        Public Sub MedicalViewerReverseImageExample()
            Dim myForm As MedicalViewerForm12 = GetMedicalControlForReverseExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.ReverseImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm12 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm12()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

               // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm12 GetMedicalControlForReverseExample()
        {
            return new MedicalViewerForm12();
        }
        // 

        public void MedicalViewerReverseImageExample()
        {
            MedicalViewerForm12 myForm = GetMedicalControlForReverseExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.ReverseImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.ReverseImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.InvertImage">
      <summary>
            Inverts all the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            It is strongly recommended to use this method to invert the image. 
            Using any external command for inversion could result in loss of the inversion if the user 
            manipulates the window level values using the window level action.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm5 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl5() As MedicalViewerForm5
            Return New MedicalViewerForm5()
        End Function

        ' This example inverts the images of the first cell.

        Public Sub MedicalViewerInvertImagesExample()
            Dim myForm As MedicalViewerForm5 = GetMedicalControl5()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.InvertImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm5 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm5()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm5 GetMedicalControl5()
        {
            return new MedicalViewerForm5();
        }

        // This example inverts the images of the first cell.

        public void MedicalViewerInvertImagesExample()
        {
            MedicalViewerForm5 myForm = GetMedicalControl5();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.InvertImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.InvertImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageInverted">
      <summary>
            Retrieves a value that indicates whether the image in the selected sub-cell index has been inverted.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <returns>
            true if the image is inverted; otherwise, false.
            </returns>
      <remarks>
            To retrieve the correct value, invert the images inside the Medical Viewer using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.InvertImage" /> method.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm5 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl5() As MedicalViewerForm5
            Return New MedicalViewerForm5()
        End Function

        ' This example inverts the images of the first cell.

        Public Sub MedicalViewerInvertImagesExample()
            Dim myForm As MedicalViewerForm5 = GetMedicalControl5()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.InvertImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm5 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm5()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm5 GetMedicalControl5()
        {
            return new MedicalViewerForm5();
        }

        // This example inverts the images of the first cell.

        public void MedicalViewerInvertImagesExample()
        {
            MedicalViewerForm5 myForm = GetMedicalControl5();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.InvertImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.InvertImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.PointToImage(System.Drawing.Point)">
      <summary>
            Returns the image coordinates corresponding to the mouse coordinates specified by the user.
            </summary>
      <medaddon>yes</medaddon>
      <param name="point">The <see cref="T:System.Drawing.Point" /> object that represents the mouse coordinates.</param>
      <returns>
            A <see cref="T:System.Drawing.Point" /> object that contains the image coordinates.
            </returns>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm6 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))


                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl6() As MedicalViewerForm6
            Return New MedicalViewerForm6()
        End Function

        ' this example draw dots on the image when clicking on it using the left mouse button.

        Public Sub MedicalViewerPointToImageExample()
            Dim myForm As MedicalViewerForm6 = GetMedicalControl6()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            AddHandler cell.CellMouseDown, AddressOf medicalViewer_CellMouseDown

            myForm.ShowDialog()
        End Sub

        Private Sub medicalViewer_CellMouseDown(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
            Dim viewer As MedicalViewer = CType(sender, MedicalViewer)
            Dim point As Point
            Dim cell As MedicalViewerMultiCell = CType(viewer.Cells(0), MedicalViewerMultiCell)

            cell.Image.Page = e.SubCellIndex + 1
            point = cell.PointToImage(New Point(e.X, e.Y))
            cell.Image.SetPixelColor(point.Y, point.X, New RasterColor(255, 255, 255))
            cell.Invalidate()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm6 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm6()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));


                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }

        MedicalViewerForm6 GetMedicalControl6()
        {
            return new MedicalViewerForm6();
        }

        // this example draw dots on the image when clicking on it using the left mouse button.

        public void MedicalViewerPointToImageExample()
        {
            MedicalViewerForm6 myForm = GetMedicalControl6();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.CellMouseDown += new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseDown);

            myForm.ShowDialog();
        }

        void medicalViewer_CellMouseDown(object sender, MedicalViewerCellMouseEventArgs e)
        {
            MedicalViewer viewer = (MedicalViewer)sender;
            Point point;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(viewer.Cells[0]);

            cell.Image.Page = e.SubCellIndex + 1;
            point = cell.PointToImage(new Point(e.X, e.Y));
            cell.Image.SetPixelColor(point.Y, point.X, new RasterColor(255, 255, 255));
            cell.Invalidate();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.PointToImage-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.LoadRegion(System.String)">
      <summary>
            Loads regions from a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file that contains the region(s) to load.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the region from the file created by the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>If the file contains more than one region, the control will load the new region in the next sub-cell, 
            then it will move to the next cell and load the rest of the regions.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm7 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl7() As MedicalViewerForm7
            Return New MedicalViewerForm7()
        End Function

        ' This example will create a bitmap region on the first frame of the first image and save it.

        Public Sub MedicalViewerSaveRegionExample()
            Dim myForm As MedicalViewerForm7 = GetMedicalControl7()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm7 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm7()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm7 GetMedicalControl7()
        {
            return new MedicalViewerForm7();
        }

        // This example will create a bitmap region on the first frame of the first image and save it.

        public void MedicalViewerSaveRegionExample()
        {
            MedicalViewerForm7 myForm = GetMedicalControl7();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SaveRegion(System.String)">
      <summary>
            Saves cell regions to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file to which to save the region.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save a region to a file. To load the file, use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm8 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl8() As MedicalViewerForm8
            Return New MedicalViewerForm8()
        End Function

        ' This example will create a bitmap region on the first frame of the first image, save it, and copy it to all the cell frames.

        Public Sub MedicalViewerSaveRegionExample1()
            Dim myForm As MedicalViewerForm8 = GetMedicalControl8()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            Dim i As Integer
            i = 0
            Do While i &lt; cell.Image.PageCount
                cell.LoadRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"), i)
                i += 1
            Loop


            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm8 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm8()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm8 GetMedicalControl8()
        {
            return new MedicalViewerForm8();
        }

        // This example will create a bitmap region on the first frame of the first image, save it, and copy it to all the cell frames.

        public void MedicalViewerSaveRegionExample1()
        {
            MedicalViewerForm8 myForm = GetMedicalControl8();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            int i;
            for (i = 0; i &lt; cell.Image.PageCount; i++)
            {
                cell.LoadRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"), i);
            }


            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.RemoveRegion">
      <summary>
            Deletes the region from all of the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is recommended to use this method when removing a region, especially when using the low memory usage feature.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.UpdateView">
      <summary>
            Recalculates the cell's internal values in order to update the view according to the changes made to the image.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method is useful especially when the user applies an 
            effect on the cell image that causes the image dimensions to change.</description>
          </item>
          <item>
            <description>This method will also repaint the cell. 
            To repaint the cell only  recalculating the internal data, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.Invalidate" /> method.</description>
          </item>
          <item>
            <description>To pause repainting to apply a series of effects without refreshing each time an effect is applied, 
            use the <see cref="M:Leadtools.MedicalViewer.MedicalViewer.BeginUpdate" /> method to keep the cell from being repainted, and then use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewer.EndUpdate" /> method to repaint everything.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm10 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl10() As MedicalViewerForm10
            Return New MedicalViewerForm10()
        End Function

        ' This example resizes the first frame of the first cell.

        Public Sub MedicalViewerUpdateViewExample1()
            Dim myForm As MedicalViewerForm10 = GetMedicalControl10()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim size As SizeCommand = New SizeCommand()
            size.Width = cell.Image.Width * 2
            size.Height = cell.Image.Height
            size.Run(cell.Image)

            cell.UpdateView()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm10 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm10()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

               // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm10 GetMedicalControl10()
        {
            return new MedicalViewerForm10();
        }

        // This example resizes the first frame of the first cell.

        public void MedicalViewerUpdateViewExample1()
        {
            MedicalViewerForm10 myForm = GetMedicalControl10();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            SizeCommand size = new SizeCommand();
            size.Width = cell.Image.Width * 2;
            size.Height = cell.Image.Height;
            size.Run(cell.Image);

            cell.UpdateView();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.UpdateView-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])">
      <summary>
            Enables loading frames only when viewed to more efficiently use the system memory.
            </summary>
      <medaddon>yes</medaddon>
      <param name="hiddenFramesCount">The number of unseen frames that the control will load. Setting this value for example, to 2, 
            makes the control load the 2 frames before the viewed frames as well as the 2 frames after the viewed frames. </param>
      <param name="imageCount">The number of total frames that will be included in the specified cell.</param>
      <param name="imagesInformation">An object that contains the image information being set. Can be null</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by preventing the control from loading all of the frames at runtime; 
            instead, the control will load only the frames that are currently visible on the cell (plus the specified number of hidden frames). 
            The control will send a request each time the user scrolls down or up, or changes the number of visible frames, etc. 
            For example, suppose the cell layout is a 2X2 (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, and the user needs to load more than 100000 frames. 
            When low memory usage is enabled, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view 
            frame number 5, frame number 1 will be disposed of because it is no longer visible. Then the event will be fired to request 
            frame number 5. When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>hiddenFramesCount allows the control load a specific number of frames ahead 
            (so if you have a 2X2 cell and you set hiddenFramesCount to 3, the method will request (1, 2, 3, 4, 5, 6, 7). 
            The method will normally request also 0, -1, -2. but since those indexes are not valid, the control will not request them.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, 
            load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
          <item>
            <description>To stop using the low memory usage feature, 
            remove the cell that has this feature enabled and then add it again.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Boolean,System.Int32,System.Int32)">
      <summary>
            Enables loading frames only when being viewed, to more efficiently use the system memory.
            </summary>
      <medaddon>yes</medaddon>
      <param name="enabled">true to enable the low memory usage, false to disable the low memory usage.</param>
      <param name="pageCount">The number of total frames that will be included in the specified cell.</param>
      <param name="hiddenFramesCount">The number of unseen frames that the control will load. Setting this value for example, to 2, 
            makes the control load the 2 frames before the displayed frames as well as the 2 frames after the viewed frames. </param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by preventing the control from loading all of the frames at runtime. 
            Instead, the control will load only the frames that are currently visible on the cell (plus the specified number of hidden frames). 
            The control will send a request each time the user scrolls down or up, or changes the number of visible frames, etc. 
            For example, suppose the cell layout is a 2X2 (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, and the user needs to load more than 100,000 frames. 
            When low memory usage is enabled, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view 
            frame number 5, frame number 1 will be disposed of because it is no longer visible. Then the event will be fired to request 
            frame number 5. When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>hiddenFramesCount allows the control load a specific number of frames ahead 
            (so if you have a 2X2 cell and you set hiddenFramesCount to 3, the method will request (1, 2, 3, 4, 5, 6, 7). 
            The method will normally request frames 0, -1, -2. but since those indexes are not valid, the control will not request them.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, 
            load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
          <item>
            <description>To stop using the low memory usage feature, 
            remove the cell that has this feature enabled and then add it again.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)">
      <summary>
            Sends the requested image to the control. This method is used when the low memory usage feature is enabled (for more information see <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Boolean,System.Int32,System.Int32)" />)
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">A <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> object that contains the pages to be set 
            in response to the FrameRequested event.</param>
      <param name="index">the index of image in the cell.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by keeping the control from loading all the frames on runtime. Instead,
            the control will load only the frames that are currently visible on the cell. The control will send a request each time the user 
            scrolls down or up, changes the number of visible frames, etc. For example, suppose the cell layout is a 2X2 
            (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, 
            and the user needs to load more than 100000 frames, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view frame number 5, 
            frame number 1 will be disposed of because it is no longer visible, and the event will be fired to request frame number 5. 
            When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32[],Leadtools.MedicalViewer.MedicalViewerSetImageOptions)">
      <summary>
            Sends the requested images to the control. This method is used when the low memory usage feature is enabled (for more information see <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />)
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">A <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> object that contains the pages to be set 
            in response to the FrameRequested event.</param>
      <param name="indexes">Array of Integers containing the index of each page in <paramref name="image" />, respectively.</param>
      <param name="options">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerSetImageOptions" /> value that specifies 
            whether to insert the page or replace the page with the same index.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by keeping the control from loading all the frames on runtime. Instead,
            the control will load only the frames that are currently visible on the cell. The control will send a request each time the user 
            scrolls down or up, changes the number of visible frames, etc. For example, suppose the cell layout is a 2X2 
            (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, 
            and the user needs to load more than 100000 frames, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view frame number 5, 
            frame number 1 will be disposed of because it is no longer visible, and the event will be fired to request frame number 5. 
            When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImageThumbnail(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sends the requested images to the control. This method is used when the low memory usage feature is enabled (for more information see <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />)
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The thumbnail to be set.</param>
      <param name="index">The index of the thumbnail in the image.</param>
      <param name="width">The width of the original image.</param>
      <param name="height">The height of the original image.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by keeping the control from loading all the frames on runtime. Instead,
            the control will load only the frames that are currently visible on the cell. The control will send a request each time the user 
            scrolls down or up, changes the number of visible frames, etc. For example, suppose the cell layout is a 2X2 
            (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, 
            and the user needs to load more than 100,000 frames, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view frame number 5, 
            frame number 1 will be disposed of because it is no longer visible, and the event will be fired to request frame number 5. 
            When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImageThumbnail(Leadtools.RasterImage,System.Int32[],System.Int32[],System.Int32[])">
      <summary>
            Sends the requested images to the control. This method is used when the low memory usage feature is enabled (for more information see <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />)
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">the thumbnails to be set.</param>
      <param name="indexes">Array of Integers containing the index of each thumbnail in the cell.</param>
      <param name="widthArray">Array of Integers containing the the width of the original image to each thumbnail.</param>
      <param name="heightArray">Array of Integers containing the the height of the original image to each thumbnail.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The low memory usage feature works by keeping the control from loading all the frames on runtime. Instead,
            the control will load only the frames that are currently visible on the cell. The control will send a request each time the user 
            scrolls down or up, changes the number of visible frames, etc. For example, suppose the cell layout is a 2X2 
            (see <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Rows" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Columns" />, 
            and the user needs to load more than 100000 frames, the control will not load them all. Instead, this method will send a 
            <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested" /> event when the cell is loaded, 
            requesting 4 frames (1, 2, 3 and 4) (because the cell is 2X2). Once the user scrolls down the cell to view frame number 5, 
            frame number 1 will be disposed of because it is no longer visible, and the event will be fired to request frame number 5. 
            When frames are requested, the user is supposed to send them to the control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>If the low memory usage feature is not needed, load images directly by assigning the image to the cell using the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)">
      <summary>
            Sets the scale of all the sub-cell images inside the image by a specified value.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scale">The new scale value to be set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. One is by setting the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them make sure that <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> 
            is set to false.</description>
          </item>
          <item>
            <description>To get the scale of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To set the scale mode of cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</description>
          </item>
          <item>
            <description>To get the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)">
      <summary>
            Sets the scale mode for all of the sub-cells in a cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scaleMode">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerScaleMode" /> value that represents the scale mode to be set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. 
            One is by setting the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them, make sure that 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> is set to false.</description>
          </item>
          <item>
            <description>To set the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> method.</description>
          </item>
          <item>
            <description>To get the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To get the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetCellImage">
      <summary>
            Returns a printable version of the cell.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
        <see cref="T:System.Drawing.Image" /> object which is the printable version of the cell.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method is useful whenever the user needs to save the image along with the annotations, tags, border, rulers and anything that has been drawn on the cell.</description>
          </item>
          <item>
            <description>The user can save, print or copy the returned image.</description>
          </item>
          <item>
            <description>For more information about the cell, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Medical Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub MedicalViewerSaveCellExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim myImage As Image = (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).GetCellImage()
         myImage.Save(Path.Combine(LEAD_VARS.ImagesDir, "FirstCell.bmp"))

         myImage.Dispose()
         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MedicalViewerSaveCellExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         Image myImage = ((MedicalViewerMultiCell)(medicalViewer.Cells[0])).GetCellImage();
         myImage.Save(Path.Combine(LEAD_VARS.ImagesDir,"FirstCell.bmp"));

         myImage.Dispose();
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.GetCellImageSample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represent the part of the cell or sub-cell that is occupied by the image.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" /> that represents the part of the cell or sub-cell that is occupied by the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of the whole image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of cell or the sub-cell, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub GetDisplayedClippedImageRectangle()
            Dim form As GetDispalyedClippedImageRectangleMainForm = New GetDispalyedClippedImageRectangleMainForm()
            form.ShowDialog()
        End Sub

        ' GetDispalyedClippedImageRectangleMainForm will be the owner of the medical viewer control.
        Private Class GetDispalyedClippedImageRectangleMainForm : Inherits Form
            Public _medicalViewer As MedicalViewer

            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust some properties.
                _medicalViewer = New MedicalViewer()
                _medicalViewer.Rows = 2
                _medicalViewer.Columns = 1
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image2.cmp"))

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)

                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.UserData)
                AddHandler cell.UIChanged, AddressOf Viewer_UIChanged

                _medicalViewer.Cells.Add(cell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub Viewer_UIChanged(ByVal sender As Object, ByVal e As MedicalViewerUIChangedEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                If e.ActionType = MedicalViewerActionType.Offset OrElse e.ActionType = MedicalViewerActionType.Scale Then
                    Dim theClippedRectangle As Rectangle = cell.GetDisplayedClippedImageRectangle()
                    Dim ImageRectangle As Rectangle = cell.GetDisplayedImageRectangle()

                    Dim Ratio As Integer = (theClippedRectangle.Width * theClippedRectangle.Height) * 1000 \ (ImageRectangle.Width * ImageRectangle.Height)

                    Dim doubleRatio As Double = Ratio / 1000.0

                    Dim info As MedicalViewerTagInformation = New MedicalViewerTagInformation(1, MedicalViewerTagAlignment.BottomLeft, "Area of the image visible is " &amp; (doubleRatio * 100).ToString() &amp; "% of the whole image", MedicalViewerTagType.UserData)
                    _medicalViewer.Cells(e.CellIndex).EditTag(1, MedicalViewerTagAlignment.BottomLeft, info)
                End If
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">       public void GetDisplayedClippedImageRectangle()
      {
         GetDispalyedClippedImageRectangleMainForm form = new GetDispalyedClippedImageRectangleMainForm();
         form.ShowDialog();
      }

      // GetDispalyedClippedImageRectangleMainForm will be the owner of the medical viewer control.
       class GetDispalyedClippedImageRectangleMainForm : Form
      {
         public MedicalViewer _medicalViewer;

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public GetDispalyedClippedImageRectangleMainForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust some properties.
            _medicalViewer = new MedicalViewer();
            _medicalViewer.Rows = 2;
            _medicalViewer.Columns = 1;
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"image2.cmp"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);

            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.UserData);
            cell.UIChanged += new EventHandler&lt;MedicalViewerUIChangedEventArgs&gt;(Viewer_UIChanged);

            _medicalViewer.Cells.Add(cell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void Viewer_UIChanged(object sender, MedicalViewerUIChangedEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
             if (e.ActionType == MedicalViewerActionType.Offset || e.ActionType == MedicalViewerActionType.Scale)
             {
                 Rectangle theClippedRectangle = cell.GetDisplayedClippedImageRectangle();
                 Rectangle ImageRectangle = cell.GetDisplayedImageRectangle();

                 int Ratio = (theClippedRectangle.Width * theClippedRectangle.Height) * 1000 / (ImageRectangle.Width * ImageRectangle.Height);

                 double doubleRatio = Ratio / 1000.0;

                 MedicalViewerTagInformation info = new MedicalViewerTagInformation(1, MedicalViewerTagAlignment.BottomLeft, "Area of the image visible is " + (doubleRatio * 100).ToString()  + "% of the whole image", MedicalViewerTagType.UserData);
                 _medicalViewer.Cells[e.CellIndex].EditTag(1, MedicalViewerTagAlignment.BottomLeft, info);
             }
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.GetDisplayedClippedImageRectangle-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedRectangle">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represent the display area of the cell/sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" /> that represent the display area of the cell/sub-cell.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of the whole image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of displayed area of the image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedImageRectangle">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represents the image boundaries. This changes as you zoom in/out or offset the image.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" />that represents the image boundaries. This changes as you zoom in/out or offset the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of displayed area of the image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of cell or the sub-cell, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerKeys)">
      <summary>
            Sets the keystroke combination for the specified action
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The specified action which is having its keystroke combination set.</param>
      <param name="keyClass">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerKeys" /> that contains the keystroke combination.</param>
      <remarks>
            To get the keystroke combination for a specific action, call <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType)" />.
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a>.</para></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            (Read only) Gets the keystroke combination for the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The specified action which is having its keystroke combination retrieved.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerKeys" /> that contains the retrieved keystrokes combination.
            </returns>
      <remarks>
            To set the keystroke combination for a specific action, call <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerKeys)" />.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,System.Int32)">
      <summary>
            (Read only) Gets the current properties for the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The specified action.</param>
      <param name="subCellIndex">Index of the sub-cell for which the properties will be retrieved.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseAction" /> that contains the retrieved properties.
            </returns>
      <remarks>
            To set the properties for the specified action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" />  method.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction,System.Int32)">
      <summary>
            Sets the current properties for the specified action.
            </summary>
      <medaddon>yes</medaddon>
      <param name="actionType">The action for which the properties are being set.</param>
      <param name="actionProperties">The properties to be set.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell for which the properties are being set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To retrieve the properties for a specific action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerAlpha.#ctor(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)">
      <summary>
            Set the image position of the cell frames based on the corresponding index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">A zero-based index of the sub-cell.</param>
      <param name="imagePosition">The image position to be set.</param>
      <param name="update">true to update the cell data based on the newly inserted image position.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image position can be retrieved from the DicomDataSet.</description>
          </item>
          <item>
            <description>for efficiency purposes, it's recommended not to set the 3rd parameter <b><i>update</i></b> to true in case of multi frame cell until the user sets the last image position, otherwise, the program will keep recalculating the internal data each time the user sets a the image position for each frame.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePerspective(Leadtools.RasterViewPerspective)">
      <summary>
            Sets the value that represents the image view perspective for all the frames in the medical viewer.
            </summary>
      <isnew>10/24/2010</isnew>
      <medaddon>yes</medaddon>
      <param name="viewPerspective">
        <see cref="T:Leadtools.RasterViewPerspective" /> enumeration that represents the view perspective to be set for all the cell frames.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePerspective(Leadtools.RasterViewPerspective,System.Int32)">
      <summary>
            Sets the value that represents the image view perspective.
            </summary>
      <isnew>10/24/2010</isnew>
      <medaddon>yes</medaddon>
      <param name="viewPerspective">
        <see cref="T:Leadtools.RasterViewPerspective" /> enumeration that represents the view perspective to be set.</param>
      <param name="subCellIndex">A zero-based index of the frame for which to set the view perspective.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetScale">
      <summary>
            Gets the scale of the image.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <returns>
            The scale value.
            </returns>
      <remarks>
            Currently, there are two ways to fit the image to cell. One is by setting the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            <para>The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetScale" /> methods.
            In order to be able to use them, make sure that <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> 
            is set to false.</para><para>To set the scale of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> 
            method.</para><para>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</para><para>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para><para>To set the scale mode of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</para><para>To get the scale mode of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</para></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetImagePosition(System.Int32)">
      <summary>
            Gets the image position of the cell frames based on the corresponding index.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">A zero-based index of the sub-cell to retrieve its image position.</param>
      <remarks>
            The image position can be retrieved from the DicomDataSet.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCell.GetPage(System.Int32)">
      <summary>
            Gets the image page with the specified sub-cell index.
            </summary>
      <isnew>3/15/2011</isnew>
      <returns>
        <see cref="T:Leadtools.RasterImage" /> that represents the image assigned to the specified sub-cell index.
            </returns>
      <param name="pageIndex">A zero-based index of the sub-cell to retrieve its frame.</param>
      <remarks>
            This is only used with the MPR cell, or derivative cell.
            <para>This is useful, when the image is not generated, but the user wants it in anyway.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub Medical3DGetPageExample()
            Dim LoadObject As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = LoadObject.LoadJamesHead()

            Dim form As GetPageForm = New GetPageForm(output)
            form.ShowDialog()
        End Sub

        ' GetPageForm will be the owner of the medical viewer control.
        Public Class GetPageForm : Inherits Form
            Private _medical3DControl As Medical3DControl
            Private _axial As MedicalViewerMPRCell
            Private _coronal As MedicalViewerMPRCell
            Private _saggital As MedicalViewerMPRCell

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                Dim codecsInformation As CodecsImageInfo

                _medical3DControl = New Medical3DControl()
                AddHandler SizeChanged, AddressOf GetPageForm_SizeChanged
                AddHandler FormClosing, AddressOf GetPageForm_FormClosing

                _medical3DControl.ObjectsContainer.Objects.Add(New Medical3DObject())

                Dim index As Integer

                codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(0).Data), True)


                Dim width As Integer = codecsInformation.Width
                Dim height As Integer = codecsInformation.Height
                Dim depth As Integer = 256

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientInit(depth)

                index = 0
                Do While index &lt; depth
                    _image = _codecs.Load(CStr(output.Stacks(0).Items(index).Data), 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1)
                    _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientSetFrame(_image, index, output.Stacks(0).Items(index).ImagePosition, True)
                    index += 1
                Loop

                Dim spearator As String = ("\")
                Dim test As String() = output.Stacks(0).Items(0).ImageOrientation.Split(spearator.ToCharArray())
                Dim orientation As Single() = New Single(5) {}
                Dim i As Integer
                For i = 0 To 5
                    orientation(i) = CSng(Convert.ToDouble(test(i)))
                Next i

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientEnd(orientation, output.Stacks(0).PixelSpacing)


                _axial = New MedicalViewerMPRCell()
                _coronal = New MedicalViewerMPRCell()
                _saggital = New MedicalViewerMPRCell()


                ' set Medical 3DControl to viewer cell
                _medical3DControl.AxialFrame = _axial
                _medical3DControl.SagittalFrame = _saggital
                _medical3DControl.CoronalFrame = _coronal

                _axial.AxialName = "Axial Cell"
                _saggital.SagittalName = "Sagittal Cell"
                _coronal.CoronalName = "Coronal Cell"

                _axial.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                _saggital.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                _coronal.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)


                ' Fit image to cell
                _axial.FitImageToCell = True
                _saggital.FitImageToCell = True
                _coronal.FitImageToCell = True

                ' Show Cross hair lines
                _axial.ShowMPRCrossHair = True
                _saggital.ShowMPRCrossHair = True
                _coronal.ShowMPRCrossHair = True

                ' Show cell boundaries
                _axial.ShowCellBoundaries = True
                _saggital.ShowCellBoundaries = True
                _coronal.ShowCellBoundaries = True

                ' Enable slab option
                _medical3DControl.ObjectsContainer.Objects(0).Slab.Enabled = True

                _axial.ShowSlabBoundaries = True
                _saggital.ShowSlabBoundaries = True
                _coronal.ShowSlabBoundaries = True

                ' invert the axial image
                '_axial.InvertImage();

                '_medical3DControl.ApplyWindowLevelOnAllCells = true;

                _medical3DControl.AddAction(MedicalViewerActionType.Rotate3DObject)
                _medical3DControl.SetAction(MedicalViewerActionType.Rotate3DObject, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

                _medical3DControl.AddAction(MedicalViewerActionType.WindowLevel)
                _medical3DControl.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                Me.Controls.Add(_medical3DControl)
                Me.Controls.Add(_axial)
                Me.Controls.Add(_coronal)
                Me.Controls.Add(_saggital)

                Dim pageCount As Integer = _saggital.PageCount
                Dim image As RasterImage = Nothing

                index = 0
                Do While index &lt; pageCount
                    image = _saggital.GetPage(index)
                    _codecs.Save(image, "D:\test" &amp; index.ToString() &amp; ".bmp", RasterImageFormat.Bmp, 24)
                    image.Dispose()
                    index += 1
                Loop

                MessageBox.Show("Frames Saved")
            End Sub

            Private Sub GetPageForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
                _medical3DControl.Dispose()
            End Sub

            Private Sub GetPageForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                If Not _medical3DControl Is Nothing Then
                    _medical3DControl.Size = New Size(Me.ClientRectangle.Right \ 2, Me.ClientRectangle.Bottom \ 2)
                End If

                If Not _axial Is Nothing Then
                    _axial.Size = New Size(Me.ClientRectangle.Right \ 2, Me.ClientRectangle.Bottom \ 2)
                End If

                If Not _saggital Is Nothing Then
                    _saggital.Size = New Size(Me.ClientRectangle.Right \ 2, Me.ClientRectangle.Bottom \ 2)
                End If

                If Not _coronal Is Nothing Then
                    _coronal.Size = New Size(Me.ClientRectangle.Right \ 2, Me.ClientRectangle.Bottom \ 2)
                End If

                _axial.Location = New Point(Me.ClientRectangle.Right \ 2, 0)
                _saggital.Location = New Point(0, Me.ClientRectangle.Bottom \ 2)
                _coronal.Location = New Point(Me.ClientRectangle.Right \ 2, Me.ClientRectangle.Bottom \ 2)
            End Sub
        End Class</code>
        <code lang="CS">      public void Medical3DGetPageExample()
      {
         MedicalViewerSeriesManagerFrom LoadObject = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = LoadObject.LoadJamesHead();

         GetPageForm form = new GetPageForm(output);
         form.ShowDialog();
      }

      // GetPageForm will be the owner of the medical viewer control.
      public class GetPageForm : Form
      {
         private Medical3DControl _medical3DControl;
         private MedicalViewerMPRCell _axial;
         private MedicalViewerMPRCell _coronal;
         private MedicalViewerMPRCell _saggital;

         public GetPageForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            CodecsImageInfo codecsInformation;

            _medical3DControl = new Medical3DControl();
            this.SizeChanged += new EventHandler(GetPageForm_SizeChanged);
            this.FormClosing += new FormClosingEventHandler(GetPageForm_FormClosing);

            _medical3DControl.ObjectsContainer.Objects.Add(new Medical3DObject());

            int index;

            codecsInformation = _codecs.GetInformation((string)output.Stacks[0].Items[0].Data, true);


            int width = codecsInformation.Width;
            int height = codecsInformation.Height;
            int depth = 256;

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientInit(depth);

            for (index = 0; index &lt; depth; index++)
            {
               _image = _codecs.Load((string)output.Stacks[0].Items[index].Data, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1);
               _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientSetFrame(_image, index, output.Stacks[0].Items[index].ImagePosition, true);
            }

            string spearator = ("\\");
            string[] test = output.Stacks[0].Items[0].ImageOrientation.Split(spearator.ToCharArray());
            float[] orientation = new float[6];
            int i;
            for (i = 0; i &lt; 6; i++)
            {
               orientation[i] = (float)Convert.ToDouble(test[i]);
            }

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientEnd(orientation, output.Stacks[0].PixelSpacing);


            _axial = new MedicalViewerMPRCell();
            _coronal = new MedicalViewerMPRCell();
            _saggital = new MedicalViewerMPRCell();


            // set Medical 3DControl to viewer cell
            _medical3DControl.AxialFrame = _axial;
            _medical3DControl.SagittalFrame = _saggital;
            _medical3DControl.CoronalFrame = _coronal;

            _axial.AxialName = "Axial Cell";
            _saggital.SagittalName = "Sagittal Cell";
            _coronal.CoronalName = "Coronal Cell";

            _axial.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            _saggital.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            _coronal.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);


            // Fit image to cell
            _axial.FitImageToCell = true;
            _saggital.FitImageToCell = true;
            _coronal.FitImageToCell = true;

            // Show Cross hair lines
            _axial.ShowMPRCrossHair = true;
            _saggital.ShowMPRCrossHair = true;
            _coronal.ShowMPRCrossHair = true;

            // Show cell boundaries
            _axial.ShowCellBoundaries = true;
            _saggital.ShowCellBoundaries = true;
            _coronal.ShowCellBoundaries = true;

            // Enable slab option
            _medical3DControl.ObjectsContainer.Objects[0].Slab.Enabled = true;

            _axial.ShowSlabBoundaries = true;
            _saggital.ShowSlabBoundaries = true;
            _coronal.ShowSlabBoundaries = true;

            // invert the axial image
            //_axial.InvertImage();

            //_medical3DControl.ApplyWindowLevelOnAllCells = true;

            _medical3DControl.AddAction(MedicalViewerActionType.Rotate3DObject);
            _medical3DControl.SetAction(MedicalViewerActionType.Rotate3DObject, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

            _medical3DControl.AddAction(MedicalViewerActionType.WindowLevel);
            _medical3DControl.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            this.Controls.Add(_medical3DControl);
            this.Controls.Add(_axial);
            this.Controls.Add(_coronal);
            this.Controls.Add(_saggital);

            int pageCount = _saggital.PageCount;
            RasterImage image = null;

            for (index = 0; index &lt; pageCount; index++)
            {
               image = _saggital.GetPage(index);
               _codecs.Save(image, "D:\\test" + index.ToString() + ".bmp", RasterImageFormat.Bmp, 24);
               image.Dispose();
            }

            MessageBox.Show("Frames Saved");
         }

         void GetPageForm_FormClosing(object sender, FormClosingEventArgs e)
         {
            _medical3DControl.Dispose();
         }

         void GetPageForm_SizeChanged(object sender, EventArgs e)
         {
            if (_medical3DControl != null)
               _medical3DControl.Size = new Size(this.ClientRectangle.Right / 2, this.ClientRectangle.Bottom / 2);

            if (_axial != null)
               _axial.Size = new Size(this.ClientRectangle.Right / 2, this.ClientRectangle.Bottom / 2);

            if (_saggital != null)
               _saggital.Size = new Size(this.ClientRectangle.Right / 2, this.ClientRectangle.Bottom / 2);

            if (_coronal != null)
               _coronal.Size = new Size(this.ClientRectangle.Right / 2, this.ClientRectangle.Bottom / 2);

            _axial.Location = new Point(this.ClientRectangle.Right / 2, 0);
            _saggital.Location = new Point(0, this.ClientRectangle.Bottom / 2);
            _coronal.Location = new Point(this.ClientRectangle.Right / 2, this.ClientRectangle.Bottom / 2);
         }
      }</code>
        <!--Medical3D.GetPage-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.AnimationStarted">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the animation starts.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))

            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(cell1)


                ' add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel)
            cell1.AddAction(MedicalViewerActionType.Alpha)
            cell1.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      Public Sub MedicalViewerAnimationInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell1.AnimationStarted, AddressOf medicalViewer_AnimationStarted
         AddHandler cell1.AnimationStopped, AddressOf medicalViewer_AnimationStopped

         cell1.Animation.Animated = True
         cell1.Animation.Animated = False
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnimationStopped(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has stopped")
      End Sub

      Private Sub medicalViewer_AnimationStarted(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has started")
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 1, 1);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(cell1);


            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      public void MedicalViewerAnimationInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell1.AnimationStarted += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStarted);
         cell1.AnimationStopped += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStopped);

         cell1.Animation.Animated = true;
         cell1.Animation.Animated = false;
         myForm.ShowDialog();
      }

      void medicalViewer_AnimationStopped(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has stopped");
      }

      void medicalViewer_AnimationStarted(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has started");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnimationInformationEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.AnimationStopped">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the animation stops.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))

            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(cell1)


                ' add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel)
            cell1.AddAction(MedicalViewerActionType.Alpha)
            cell1.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      Public Sub MedicalViewerAnimationInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell1.AnimationStarted, AddressOf medicalViewer_AnimationStarted
         AddHandler cell1.AnimationStopped, AddressOf medicalViewer_AnimationStopped

         cell1.Animation.Animated = True
         cell1.Animation.Animated = False
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnimationStopped(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has stopped")
      End Sub

      Private Sub medicalViewer_AnimationStarted(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has started")
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 1, 1);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(cell1);


            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      public void MedicalViewerAnimationInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell1.AnimationStarted += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStarted);
         cell1.AnimationStopped += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStopped);

         cell1.Animation.Animated = true;
         cell1.Animation.Animated = false;
         myForm.ShowDialog();
      }

      void medicalViewer_AnimationStopped(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has stopped");
      }

      void medicalViewer_AnimationStarted(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has started");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnimationInformationEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseMove">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user hovers the mouse over a cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseUp">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user releases the mouse button.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseClick">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user clicks on a cell or a sub-cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseDoubleClick">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user double-clicks on a cell or a sub-cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseDown">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user holds down the button on a cell or a sub-cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs whenever the cell is painted..</value>
      <example>
        <para>Add some event to apply some additional painting and processing</para>
        <code lang="VB">        Public Sub MedicalViewerEventsExample()
            Dim form As MainForm3 = New MainForm3()
            form.ShowDialog()
        End Sub
#End If
        ' MainForm1 will be the owner of the medical viewer control.
        Private Class MainForm3 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _mouseDown As Boolean

            Private Sub _medicalViewer_UserActionMouseMove(ByVal sender As Object, ByVal e As MedicalViewerMouseEventArgs)
                ' Increase the gamma of the image as the user drags the mouse.
                If (e.ActionID = 101) AndAlso _mouseDown Then
                    CType(sender, MedicalViewerCell).Image.PaintGamma += 1
                    CType(sender, MedicalViewerCell).Invalidate()
                End If
            End Sub

            Private Sub _medicalViewer_UserActionMouseUp(ByVal sender As Object, ByVal e As MedicalViewerMouseEventArgs)
                _mouseDown = False
            End Sub

            Private Sub _medicalViewer_UserActionMouseDown(ByVal sender As Object, ByVal e As MedicalViewerMouseEventArgs)
                _mouseDown = True
            End Sub

            Private Sub _medicalViewer_UserActionKeyDown(ByVal sender As Object, ByVal e As MedicalViewerKeyEventArgs)
                If (CType(sender, MedicalViewerCell)).Image.PaintGamma &gt; 1 Then
                    CType(sender, MedicalViewerCell).Image.PaintGamma -= 1
                End If
            End Sub

            Private Sub _medicalViewer_UserActionKeyUp(ByVal sender As Object, ByVal e As MedicalViewerKeyEventArgs)
                CType(sender, MedicalViewerCell).Invalidate()
            End Sub

            Private Sub _medicalViewer_CustomPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintEventArgs)
                ' draw red ellipse around the first frame of the first cell.
                If (e.CellIndex = 0) AndAlso (e.SubCellIndex = 0) Then
                    e.Graphics.DrawEllipse(Pens.Red, e.ClipRectangle)
                End If
            End Sub

            Private Sub _medicalViewer_UserTag(ByVal sender As Object, ByVal e As MedicalViewerUserTagEventArgs)
                ' draw a red string at the bottom right edge of the first cell.
                If e.CellIndex = 0 Then
                    e.Graphics.DrawString("Owner Draw", New Font(FontFamily.GenericSerif, 15), Brushes.Red, New PointF(e.ClipRectangle.Left, e.ClipRectangle.Top))
                End If
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust some properties.
                _medicalViewer = New MedicalViewer()
                _medicalViewer.Rows = 1
                _medicalViewer.Columns = 2
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image3.dcm"))
                Dim cell As MedicalViewerCell = New MedicalViewerCell(_image, True)
                cell.AddAction(CType(101, MedicalViewerActionType))
                cell.SetAction(CType(101, MedicalViewerActionType), MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

                cell.SetActionKeys(CType(101, MedicalViewerActionType), New MedicalViewerKeys(Keys.Up, Keys.Down, Keys.Left, Keys.Right, MedicalViewerModifiers.None))

                AddHandler cell.UserTag, AddressOf _medicalViewer_UserTag
                AddHandler cell.CustomPaint, AddressOf _medicalViewer_CustomPaint
                AddHandler cell.UserActionMouseDown, AddressOf _medicalViewer_UserActionMouseDown
                AddHandler cell.UserActionMouseUp, AddressOf _medicalViewer_UserActionMouseUp
                AddHandler cell.UserActionMouseMove, AddressOf _medicalViewer_UserActionMouseMove
                AddHandler cell.UserActionKeyUp, AddressOf _medicalViewer_UserActionKeyUp
                AddHandler cell.UserActionKeyDown, AddressOf _medicalViewer_UserActionKeyDown

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy")
                cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445")
                cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929")
                cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999")
                cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit)
                cell.SetTag(0, MedicalViewerTagAlignment.BottomRight, MedicalViewerTagType.OwnerDraw)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MedicalViewerEventsExample()
      {
         MainForm3 form = new MainForm3();
         form.ShowDialog();
      }
#endif
      // MainForm1 will be the owner of the medical viewer control.
      class MainForm3 : Form
      {
         private MedicalViewer _medicalViewer;
         private bool _mouseDown;

         void _medicalViewer_UserActionMouseMove(object sender, MedicalViewerMouseEventArgs e)
         {
            // Increase the gamma of the image as the user drags the mouse.
            if ((e.ActionID == 101) &amp;&amp; _mouseDown)
            {
               ((MedicalViewerCell)sender).Image.PaintGamma += 1;
               ((MedicalViewerCell)sender).Invalidate();
            }
         }

         void _medicalViewer_UserActionMouseUp(object sender, MedicalViewerMouseEventArgs e)
         {
            _mouseDown = false;
         }

         void _medicalViewer_UserActionMouseDown(object sender, MedicalViewerMouseEventArgs e)
         {
            _mouseDown = true;
         }

         void _medicalViewer_UserActionKeyDown(object sender, MedicalViewerKeyEventArgs e)
         {
            if (((MedicalViewerCell)sender).Image.PaintGamma &gt; 1)
               ((MedicalViewerCell)sender).Image.PaintGamma -= 1;
         }

         void _medicalViewer_UserActionKeyUp(object sender, MedicalViewerKeyEventArgs e)
         {
            ((MedicalViewerCell)sender).Invalidate();
         }

         void _medicalViewer_CustomPaint(object sender, MedicalViewerPaintEventArgs e)
         {
            // draw red ellipse around the first frame of the first cell.
            if ((e.CellIndex == 0) &amp;&amp; (e.SubCellIndex == 0))
               e.Graphics.DrawEllipse(Pens.Red, e.ClipRectangle);
         }

         void _medicalViewer_UserTag(object sender, MedicalViewerUserTagEventArgs e)
         {
            // draw red string at the bottom right edge of the first cell.
            if (e.CellIndex == 0)
               e.Graphics.DrawString("Owner Draw", new Font(FontFamily.GenericSerif, 15), Brushes.Red, new PointF(e.ClipRectangle.Left, e.ClipRectangle.Top));
         }

         public MainForm3()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust some properties.
            _medicalViewer = new MedicalViewer();
            _medicalViewer.Rows = 1;
            _medicalViewer.Columns = 2;
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"image3.dcm"));
            MedicalViewerCell cell = new MedicalViewerCell(_image, true);
            cell.AddAction((MedicalViewerActionType)101);
            cell.SetAction((MedicalViewerActionType)101, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

            cell.SetActionKeys((MedicalViewerActionType)101, new MedicalViewerKeys(Keys.Up, Keys.Down, Keys.Left, Keys.Right, MedicalViewerModifiers.None));

            cell.UserTag += new EventHandler&lt;MedicalViewerUserTagEventArgs&gt;(_medicalViewer_UserTag);
            cell.CustomPaint += new EventHandler&lt;MedicalViewerPaintEventArgs&gt;(_medicalViewer_CustomPaint);
            cell.UserActionMouseDown += new EventHandler&lt;MedicalViewerMouseEventArgs&gt;(_medicalViewer_UserActionMouseDown);
            cell.UserActionMouseUp += new EventHandler&lt;MedicalViewerMouseEventArgs&gt;(_medicalViewer_UserActionMouseUp);
            cell.UserActionMouseMove += new EventHandler&lt;MedicalViewerMouseEventArgs&gt;(_medicalViewer_UserActionMouseMove);
            cell.UserActionKeyUp += new EventHandler&lt;MedicalViewerKeyEventArgs&gt;(_medicalViewer_UserActionKeyUp);
            cell.UserActionKeyDown += new EventHandler&lt;MedicalViewerKeyEventArgs&gt;(_medicalViewer_UserActionKeyDown);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy");
            cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445");
            cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929");
            cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999");
            cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit);
            cell.SetTag(0, MedicalViewerTagAlignment.BottomRight, MedicalViewerTagType.OwnerDraw);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerEvents-->
      </example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UIChanged">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs whenever an action has been applied.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DFrameRequested">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <value>Optional delegate method for additional processing. Occurs when the Medical Viewer Engine request a frame to provide to the 3D engine in order to create an internal 3D object.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DRequested">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <value>Optional delegate method for additional processing. Occurs when the Medical Viewer Engine request some 3D information from the Medical 3D engine.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.DerivativeGenerated">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <value>Optional delegate method for additional processing. Occurs when the program or the user creates a cut-plane line, which will create a derivative image.</value>
      <remarks>
            For more information, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.DoubleCutLines" />.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesRequested">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when frames are requested. This is active when the low memory usage feature is enabled. For more information see "Leadtools.MedicalViewerCells.EnableLowMemoryUsage".</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonCreated">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. This event is fired when the user is done creating a polygon using the action <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.PanoramicPolygon.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerPolygonCreatedForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.PanoramicPolygon)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.PanoramicPolygon, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                Dim width As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Width
                Dim height As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Height



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()

                AddHandler cell.MPRPolygonCreated, AddressOf cell_MPRPolygonCreated
                AddHandler cell.PanoramicDataRequested, AddressOf cell_PanoramicDataRequested
                AddHandler cell.MPRPolygonClicked, AddressOf cell_MPRPolygonClicked
                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                cell.AutoDisposeInternalData = True

            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_MPRPolygonCreated(ByVal sender As Object, ByVal e As MedicalViewerMPRPolygonEventsArgs)
                Dim cellSource As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim cell As MedicalViewerPanoramicCell = New MedicalViewerPanoramicCell(e.Polygon)

                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells Or MedicalViewerActionFlags.RealTime)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells.Add(cell)

                Dim paraxialCell As MedicalViewerParaxialCutCell = New MedicalViewerParaxialCutCell(e.Polygon, 0)
                paraxialCell.ParaxialDistance = 20
                paraxialCell.ParaxialLength = 200
                _medicalViewer.Cells.Add(paraxialCell)

                cellSource.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            End Sub

            Private Sub cell_MPRPolygonClicked(ByVal sender As Object, ByVal e As MedicalViewerMPRPolygonClickedEventsArgs)
                ' get the cell that contains the polygon clicked by the user.
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                ' get paraxial cell.
                Dim paraxialCell As MedicalViewerParaxialCutCell = CType(_medicalViewer.Cells(2), MedicalViewerParaxialCutCell)

                ' if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
                If (e.Button = MouseButtons.Left) AndAlso e.Type = MedicalViewerMPRPolygonHitTest.Body Then
                    paraxialCell.PolygonLineIndex = e.Index
                End If
            End Sub


            Private Sub cell_PanoramicDataRequested(ByVal sender As Object, ByVal e As MedicalViewerPanoramicDataRequestedEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                Dim fileName As String = CStr(_seriesManager.Stacks(0).Items(e.FrameIndex).Data)

                e.Frame = _codecs.Load(fileName)
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerPolygonCreatedForm() As MedicalViewerPolygonCreatedForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerPolygonCreatedForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerPolygonCreatedExample()
            Dim myForm As MedicalViewerPolygonCreatedForm = GetMedicalViewerPolygonCreatedForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            MessageBox.Show("Click to draw a polygon using the left mouse click, each click will create a new point, when done double-click")
            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerPolygonCreatedForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerPolygonCreatedForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.PanoramicPolygon);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.PanoramicPolygon, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            int width = cell.VirtualImage[cell.ActiveSubCell].Image.Width;
            int height = cell.VirtualImage[cell.ActiveSubCell].Image.Height;



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();

            cell.MPRPolygonCreated += new EventHandler&lt;MedicalViewerMPRPolygonEventsArgs&gt;(cell_MPRPolygonCreated);
            cell.PanoramicDataRequested += new EventHandler&lt;MedicalViewerPanoramicDataRequestedEventArgs&gt;(cell_PanoramicDataRequested);
            cell.MPRPolygonClicked += new EventHandler&lt;MedicalViewerMPRPolygonClickedEventsArgs&gt;(cell_MPRPolygonClicked);
            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.AutoDisposeInternalData = true;

         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_MPRPolygonCreated(object sender, MedicalViewerMPRPolygonEventsArgs e)
         {
            MedicalViewerMultiCell cellSource = (MedicalViewerMultiCell)sender;
            MedicalViewerPanoramicCell cell = new MedicalViewerPanoramicCell(e.Polygon);

            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells | MedicalViewerActionFlags.RealTime);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells.Add(cell);

            MedicalViewerParaxialCutCell paraxialCell = new MedicalViewerParaxialCutCell(e.Polygon, 0);
            paraxialCell.ParaxialDistance = 20;
            paraxialCell.ParaxialLength = 200;
            _medicalViewer.Cells.Add(paraxialCell);

            cellSource.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
         }

         void cell_MPRPolygonClicked(object sender, MedicalViewerMPRPolygonClickedEventsArgs e)
         {
            // get the cell that contaisn the polygon clicked by the user.
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

            // get paraxial cell.
            MedicalViewerParaxialCutCell paraxialCell = (MedicalViewerParaxialCutCell)_medicalViewer.Cells[2];

            // if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
            if ((e.Button == MouseButtons.Left) &amp;&amp; e.Type == MedicalViewerMPRPolygonHitTest.Body)
            {
               paraxialCell.PolygonLineIndex = e.Index;
            }
         }


         void cell_PanoramicDataRequested(object sender, MedicalViewerPanoramicDataRequestedEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
            RasterCodecs _codecs = new RasterCodecs();

            String fileName = (string)(_seriesManager.Stacks[0].Items[e.FrameIndex].Data);

            e.Frame = _codecs.Load(fileName);
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerPolygonCreatedForm GetMedicalViewerPolygonCreatedForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerPolygonCreatedForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerPolygonCreatedExample()
      {
         MedicalViewerPolygonCreatedForm myForm = GetMedicalViewerPolygonCreatedForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         MessageBox.Show("Click to draw a polygon using the left mouse click, each click will create a new point, when done double-click");
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerPolygonCreated-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.PanoramicDataRequested">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. This event is fired when the 3D toolkit starting creating the initial data that will be used to render the panoramic image. It will be fired to request each frame that will be used in order to calculate the panoramic image.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonClicked">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. This event is fired when the user clicked on the MPR polygon body or handle.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesLoaded">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when frames are loaded into the Medical Viewer. This is active when the low memory usage feature is enabled. For more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.PlaneCutLineClicked">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <value>Optional delegate method for additional processing. Occurs when the user clicks on cut-plane line. This feature is only supported under 64-bit version.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>for more information, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines" />.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.PrePaint">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs before painting the cell or the sub-cell.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.PostPaint">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs after painting the cell or the sub-cell.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.NudgeTool)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      Public Sub MedicalViewerPaintInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim i As Integer

         i = 0
         Do While i &lt; cell.Image.PageCount
            If ((i &gt;&gt; 1) &lt;&lt; 1) = i Then
               cell.FreezeSubCell(i, True)
            End If
            i += 1
         Loop


         AddHandler cell.PostPaint, AddressOf medicalViewer_PostPaint

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_PostPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.SubCellFrozen(e.SubCellIndex) Then
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Left, e.ClipRectangle.Top), New Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom))
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Right, e.ClipRectangle.Top), New Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom))
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      public void MedicalViewerPaintInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         int i;

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            if (((i &gt;&gt; 1) &lt;&lt; 1) == i)
               cell.FreezeSubCell(i, true);
         }


         cell.PostPaint += new EventHandler&lt;MedicalViewerPaintInformationEventArgs&gt;(medicalViewer_PostPaint);

         myForm.ShowDialog();
      }

      void medicalViewer_PostPaint(object sender, MedicalViewerPaintInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.SubCellFrozen(e.SubCellIndex))
         {
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Left, e.ClipRectangle.Top), new Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom));
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Right, e.ClipRectangle.Top), new Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom));
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerPaintInformationEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.RegionCreated">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user creates, changes or deletes a region from the image in the medical viewer using any of the medical viewer region tools.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This function will make the cell set the region handle for all the frame if the user create or updated a region on one of the frames.

      Public Sub MedicalViewerRegionExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         AddHandler (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).RegionCreated, AddressOf medicalViewer_RegionCreated
         AddHandler (CType(medicalViewer.Cells(1), MedicalViewerMultiCell)).RegionCreated, AddressOf medicalViewer_RegionCreated

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_RegionCreated(ByVal sender As Object, ByVal e As MedicalViewerRegionCreatedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim i As Integer

         cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

         i = 0
         Do While i &lt; cell.Image.PageCount
            cell.LoadRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"), i)
            i += 1
         Loop
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This function will make the cell set the region handle for all the frame if the user create or updated a region on one of the frames.

      public void MedicalViewerRegionExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         ((MedicalViewerMultiCell)medicalViewer.Cells[0]).RegionCreated += new EventHandler&lt;MedicalViewerRegionCreatedEventArgs&gt;(medicalViewer_RegionCreated);
         ((MedicalViewerMultiCell)medicalViewer.Cells[1]).RegionCreated += new EventHandler&lt;MedicalViewerRegionCreatedEventArgs&gt;(medicalViewer_RegionCreated);

         myForm.ShowDialog();
      }

      void medicalViewer_RegionCreated(object sender, MedicalViewerRegionCreatedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         int i;

         cell.SaveRegion(LeadtoolsExamples.Common.ImagesPath.Path + "Out_Test.rgn");

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            cell.LoadRegion(LeadtoolsExamples.Common.ImagesPath.Path + "Out_Test.rgn", i);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerRegionCreatedEventArgs-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseMove">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user releases the mouse button that is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseUp">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user releases the mouse button that is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseDown">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user press down a mouse button that is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseWheel">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user wheel the mouse while the wheel is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionKeyUp">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user release a key that is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionKeyDown">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when then the user press a key that is assigned to a user defined action.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.AutoDisposeInternalData">
      <summary>
            Gets or sets the value that indicates whether to automatically remove the internal data created by either the cut-line or the panoramic image.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>true to remove the internal data, false otherwise.</value>
      <remarks>
            Set this value to true for efficient use of the memory. Set it to false for a better speed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ZoomCenterPoint">
      <summary>
            Gets or sets the point that is used as a reference point when zooming in or out using the dynamic zoom method.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:System.Drawing.PointF" /> that represents the dynamic zoom reference point.</value>
      <remarks>
        <para>To make the zoom action dynamic, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ScaleType" />.</para>
        <para>The default value of this point is {-100000, -100000}.</para>
        <para>The dynamic zoom by default zooms towards the point clicked by the user, 
            unless the <b>ZoomCenterPoint</b> is set to any other value than {-100000, -100000}. 
            If <b>ZoomCenterPoint</b> is set to a value different than the default, then the the 
            zoom action will zoom toward the point specified in <b>ZoomCenterPoint</b>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.Derivative">
      <summary>
            (Read only) Gets the value that indicates whether the cell has a derivative image out of the cut-plane.
            </summary>
      <value>
            true if the cell is derivative; otherwise, false.
            </value>
      <remarks>
            For more information, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.DoubleCutLines" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.Titlebar">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerTitlebar" /> assigned to the control.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerTitlebar" /> assigned to the control.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.InteractiveInterpolation">
      <summary>
            Gets or sets the value that determines whether to apply the interpolation 
            during the action, or only when releasing the mouse button or key.
            </summary>
      <value>true to activate the interactive interpolation feature; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.AlwaysInterpolate">
      <summary>
            Gets or sets the value that determines whether to apply the interpolation 
            always, and not to switch to no-interpolation when any action is active.
            </summary>
      <keywords>Cell image interpolation</keywords>
      <value>true to make the cell interpolate the image all the time, false otherwise.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ShowCellBoundaries">
      <summary>
            Enables or disables showing the Reference line color as a boundaries that surround the cell.
            </summary>
      <value>
            true to show the reference line color as a boundary on the cell, false to hide the cell boundaries.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>For more information about the reference line, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ReferenceLine" /></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ShowCellScroll">
      <summary>
            Enables or disables showing the cell scrollbar that is used to scroll through the frames.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the cell scrollbar; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ShowFreezeText">
      <summary>
            Enables or disables showing the freeze text over the frozen cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show freeze text; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.RegionBorderColor1">
      <summary>
            Gets or sets the first color for the region marching ants.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:System.Drawing.Color" /> object that represents first color for the region marching ants (an animated dotted line drawn around a selection).</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.RegionBorderColor2">
      <summary>
            Gets or sets the second color of the region marching ants.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:System.Drawing.Color" /> object that represents second color of the region marching ants (an animated dotted line drawn around a selection).</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.RegionDefaultCursor">
      <summary>
            Gets or sets the cursor when the user is creating the region of interest.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.Cursors" /> object that represents the cursor to display when the user is creating the region of interest.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.PaintingMethod">
      <summary>
            Gets or sets the enumerated value that indicates which  painting method to use when drawing the image.
            </summary>
      <medaddon>yes</medaddon>
      <value>An Enumerated value that indicates which  painting method to use when drawing the image. </value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.PixelSpacing">
      <summary>
            Gets or sets the image pixel spacing. This property is used when implementing a reference line.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the image pixel spacing. This property is used when implementing the reference line. This value can be retrieved from the DicomDataSet
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.VirtualImage">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.RasterCollection`1" /> assigned to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.RasterCollection`1" />.</value>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.Animation">
      <summary>
            (Read only) Gets the animation class that contains the properties to animate and adjust the animation style of a cell that contains multiple frames.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /> object that contains the properties to animate and adjust the animation style of a cell that contains multiple frames.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ApplyActionOnMove">
      <summary>
            Gets or sets the value that indicates whether to apply the action on the rest of the sub-cells while dragging the mouse.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to apply the action while dragging the mouse, false causes the action to be applied when the user releases the mouse.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.SnapRulers">
      <summary>
            Gets or sets the value that indicates whether to position the cell ruler directly on the image.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to position the cell ruler on the image directly, false to apply the old behavior.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ApplyOnIndividualSubCell">
      <summary>
            Gets or sets the value that indicates whether to (apply window level and alpha) action on only the activated sub-cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to apply the (window level and alpha) action only to the activated sub-cells, false to apply the action on all sub-cells.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ReferenceLine">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties">MedicalViewerReferenceLineProperties</see> that is used to create the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" />, and adjust the reference line properties of this cell.
            </summary>
      <keywords>Reference line|Cell boundaries|Cut line|Cutline|Cutplane</keywords>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties">MedicalViewerReferenceLineProperties</see> that is used to create the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" />, and adjust the reference line properties of this cell.</value>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell">
      <summary>
            Gets or sets the value that indicates whether to resize the image to make it fit within the cell area.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to fit the image, false to display the image at its original size.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.Image">
      <summary>
            Gets or sets the image that will be displayed when the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that represents the image that will be displayed when the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" />.</value>
      <example>
        <para>Apply some image processing commands on the image of the first cell.</para>
        <code lang="VB">      Public Sub MedicalViewerImageProcessingExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim multiScale As MultiscaleEnhancementCommand = New MultiscaleEnhancementCommand(1500, MultiscaleEnhancementCommandType.Bicubic, MultiscaleEnhancementCommandFlags.EdgeEnhancement)
         multiScale.Run((CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).Image)
         medicalViewer.Cells(0).Invalidate()

         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerImageProcessingExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MultiscaleEnhancementCommand multiScale = new MultiscaleEnhancementCommand(1500, MultiscaleEnhancementCommandType.Bicubic, MultiscaleEnhancementCommandFlags.EdgeEnhancement);
         multiScale.Run(((MedicalViewerMultiCell)(medicalViewer.Cells[0])).Image);
         medicalViewer.Cells[0].Invalidate();

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CellImageProcessing-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.FrameOfReferenceUID">
      <summary>
            Gets or sets the frame reference of UID information that will be used when implementing the reference line.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the frame reference of UID information that will be used when implementing the reference line.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation">
      <summary>
            Gets or sets an array of float values that represent the orientation of the image attached to this cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            Array of float values that represent the orientation of the image attached to this cell.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.AutoCutLineDataDelete">
      <summary>
            Gets or sets the value that indicates whether to remove the cut-line internal data once all the cut-lines have been removed or not.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to remove the cut-line data once all the cut-lines has been removed from the cell, false otherwise.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>Set this value to true for efficient use of the memory, set it to false for a better speed.</description>
          </item>
          <item>
            <description>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ActiveSubCell">
      <summary>
            Gets or sets the index of the active sub-cell.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the active sub-cell.</value>
      <remarks>
            The active sub-cell is the cell that will be processed when applying any effect that affects only one sub-cell with no sub-cell index specified.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.SynchronizationID">
      <summary>
            Gets or sets the ID that is used to synchronize multiple cells together.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the ID that is used to synchronize multiple cells together.
            </value>
      <remarks>
            The cells must be added to the same <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> if the user want to synchronize them together. To add the cells to the Medical Viewer, use the collection <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" />.
            <para>To enable this feature, please do the following:</para><list type="number"><item><description>Set the <see cref="P:Leadtools.MedicalViewer.MedicalViewer.SynchronizationType" /> to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType" />.Automatic.</description></item><item><description>Each cell has a <b>SynchronizationID</b> property that receives a string which is used to help the toolkit identify which cells to synchronize. To synchronize two cells, pass the same value to SynchronizationID in both cells. You can pass the StudyUID to synchronize the cells from the same study.</description></item><item><description>Set the image position for each frame using <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)" /> method. This is required in order the Medical Viewer be able to match the series with the same image position together.</description></item><item><description>Set the image orientation using <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /> for each cell to synchronize.</description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSyncrhonizationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private _seriesManager512 As MedicalViewerSeriesManager

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager, ByVal output512 As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output
                _seriesManager512 = output512


                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 0
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"

                ' this tag to identify the cell.





                ' Load the second cell with 512 frame

                cell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
                count = output512.Stacks(0).Items.Count
                imageInformation = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output512.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 1
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output512.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output512.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output512.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output512.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic
                DicomEngine.Shutdown()



            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                Dim output As MedicalViewerSeriesManager
                If CInt(cell.Tag) = 0 Then
                    output = _seriesManager
                Else
                    output = _seriesManager512
                End If

                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerSyncrhonizationForm() As MedicalViewerSyncrhonizationForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()
            Dim output512 As MedicalViewerSeriesManager = form.LoadJamesHead512()

            Return New MedicalViewerSyncrhonizationForm(output, output512)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerSynchronizationExample()
            Dim myForm As MedicalViewerSyncrhonizationForm = GetMedicalViewerSyncrhonizationForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerSyncrhonizationForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         private MedicalViewerSeriesManager _seriesManager512;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSyncrhonizationForm(MedicalViewerSeriesManager output, MedicalViewerSeriesManager output512)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;
            _seriesManager512 = output512;


            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 0;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";

            // this tag to identify the cell.





            // Load the second cell with 512 frame

            cell = new MedicalViewerMultiCell(null, true, 1, 1);
            count = output512.Stacks[0].Items.Count;
            imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output512.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 1;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output512.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output512.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output512.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output512.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic;
            DicomEngine.Shutdown();



         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);

            MedicalViewerSeriesManager output = (int)cell.Tag == 0 ? _seriesManager : _seriesManager512;

            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerSyncrhonizationForm GetMedicalViewerSyncrhonizationForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();
         MedicalViewerSeriesManager output512 = form.LoadJamesHead512();

         return new MedicalViewerSyncrhonizationForm(output, output512);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerSynchronizationExample()
      {
         MedicalViewerSyncrhonizationForm myForm = GetMedicalViewerSyncrhonizationForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.SyncID-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.Polygons">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.RasterCollection`1" /> assigned to the control.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.RasterCollection`1" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.UseDPI">
      <summary>
            Enables or disables using the DPI feature.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            true to use the DPI, false to keep the normal behavior.
            </value>
      <remarks>
            Using the DPI means that the program will take the X and Y resolution of the image into account when painting the image. It will take the X and Y resolution of the screen as well.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerUseDPIForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)
                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                AddHandler cell.CellMouseClick, AddressOf cell_CellMouseClick

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub cell_CellMouseClick(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)

                ' This is used to switch between displaying the image using the DPI of the image relative to the DPI of the screen, or displaying it noramlly.
                CType(sender, MedicalViewerCell).UseDPI = Not (CType(sender, MedicalViewerCell)).UseDPI
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerUseDPIForm() As MedicalViewerUseDPIForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerUseDPIForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerUseDPIExample()
            Dim myForm As MedicalViewerUseDPIForm = GetMedicalViewerUseDPIForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerUseDPIForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerUseDPIForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);
            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.CellMouseClick += new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(cell_CellMouseClick);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }


         void cell_CellMouseClick(object sender, MedicalViewerCellMouseEventArgs e)
         {

            // This is used to switch between displaying the image using the DPI of the image relative to the DPI of the screen, or displaying it noramlly.
            ((MedicalViewerCell)sender).UseDPI = !((MedicalViewerCell)sender).UseDPI;
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerUseDPIForm GetMedicalViewerUseDPIForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerUseDPIForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerUseDPIExample()
      {
         MedicalViewerUseDPIForm myForm = GetMedicalViewerUseDPIForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.UseDPI-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.DerivativeSource">
      <summary>
            (Read only) Gets the cell object which is used to generate the derivative images to the cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell">MedicalViewerCell</see> object which is used to generate the derivative images for the cell.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.PageCount">
      <summary>
            (Read only) Gets the number of frames of the cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>value that indicates the number of frames assigned to the cell.</value>
      <remarks>
            This is especially useful when the user enables the low memory usage. In this case, the number of frames cannot be obtained from the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" /> property, since it will return null.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetPage(System.Int32)" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.PhotometricInterpretation">
      <summary>
            Gets or sets the photometric interpretation that will be used to display the image.
            </summary>
      <keywords>PhotometricInterpretation</keywords>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the photometric interpretation that will be used to display the image.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.AxialName">
      <summary>
            Gets or sets the string that will be used as overlay text for the axial cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the string that will be used as overlay text for the axial cell.
            </value>
      <remarks>
            This value is used when the user adds a tag call <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" />.MPRType to the cell. Use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" /> to add tag to the cell.
            <para>The default value for this property is "Axial".</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerMPRForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerMPRForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerMPRForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(2, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim index As Integer
                Dim image As RasterImage
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim AxialFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim SagittalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim CoronalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()

                codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(0).Data), True)

                Dim width As Integer = codecsInformation.Width
                Dim height As Integer = codecsInformation.Height
                Dim depth As Integer = 256

                ' Create a 3D control.
                Dim _medical3DControl As Medical3DControl = New Medical3DControl()

                _medical3DControl.ObjectsContainer.VolumeType = Medical3DVolumeType.MPR
                _medical3DControl.ObjectsContainer.Objects.Add(New Medical3DObject())

                ' Create a 3D object.

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientInit(depth)

                index = 0
                Do While index &lt; depth
                    image = _codecs.Load(CStr(output.Stacks(0).Items(index).Data), 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1)
                    _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientSetFrame(image, index, True)
                    index += 1
                Loop

                Dim spearator As String = ("\")
                Dim test As String() = output.Stacks(0).Items(0).ImageOrientation.Split(spearator.ToCharArray())
                Dim orientation As Single() = New Single(5) {}
                Dim i As Integer
                For i = 0 To 5
                    orientation(i) = CSng(Convert.ToDouble(test(i)))
                Next i

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientEnd(orientation, output.Stacks(0).PixelSpacing)

                ' Create axial frame
                AxialFrame.ShowMPRCrossHair = True
                AxialFrame.DistinguishMPRByColor = True
                AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                AxialFrame.AddAction(MedicalViewerActionType.Stack)
                AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)


                ' Create Sagittal frame
                SagittalFrame.ShowMPRCrossHair = True
                SagittalFrame.DistinguishMPRByColor = True
                SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                SagittalFrame.AddAction(MedicalViewerActionType.Stack)
                SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' Create coronal frame
                CoronalFrame.ShowMPRCrossHair = True
                CoronalFrame.DistinguishMPRByColor = True
                CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                CoronalFrame.AddAction(MedicalViewerActionType.Stack)
                CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' attach the MPR cells to the 3D control
                _medical3DControl.AxialFrame = AxialFrame
                _medical3DControl.SagittalFrame = SagittalFrame
                _medical3DControl.CoronalFrame = CoronalFrame


                AxialFrame.AxialName = "Axial Cell"
                SagittalFrame.SagittalName = "Sagittal Cell"
                CoronalFrame.CoronalName = "Coronal Cell"

                AxialFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                SagittalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                CoronalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)

                ' with this option, you will not be able to select more than one cell at the same time. (selecting multiple cells are done with the pressing and holding the Ctrl and clicking on cell)
                _medicalViewer.AllowMultipleSelection = False

                _medicalViewer.Cells.Add(_medical3DControl)
                _medicalViewer.Cells.Add(AxialFrame)
                _medicalViewer.Cells.Add(SagittalFrame)
                _medicalViewer.Cells.Add(CoronalFrame)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            ' This event handles communication between the the 3D and the MedicalViewer.
            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerMPRForm() As MedicalViewerMPRForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerMPRForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerMPRExample()
            Dim myForm As MedicalViewerMPRForm = GetMedicalViewerMPRForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerMPRForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerMPRForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerMPRForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerMPRForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(2, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            int index;
            RasterImage image;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerMPRCell AxialFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell SagittalFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell CoronalFrame = new MedicalViewerMPRCell();

            codecsInformation = _codecs.GetInformation((string)output.Stacks[0].Items[0].Data, true);

            int width = codecsInformation.Width;
            int height = codecsInformation.Height;
            int depth = 256;

            // Create a 3D control.
            Medical3DControl _medical3DControl = new Medical3DControl();

            _medical3DControl.ObjectsContainer.VolumeType = Medical3DVolumeType.MPR;
            _medical3DControl.ObjectsContainer.Objects.Add(new Medical3DObject());

            // Create a 3D object.

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientInit(depth);

            for (index = 0; index &lt; depth; index++)
            {
               image = _codecs.Load((string)output.Stacks[0].Items[index].Data, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1);
               _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientSetFrame(image, index, true);
            }

            string spearator = ("\\");
            string[] test = output.Stacks[0].Items[0].ImageOrientation.Split(spearator.ToCharArray());
            float[] orientation = new float[6];
            int i;
            for (i = 0; i &lt; 6; i++)
            {
               orientation[i] = (float)Convert.ToDouble(test[i]);
            }

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientEnd(orientation,
                                                                             output.Stacks[0].PixelSpacing);

            // Create axial frame
            AxialFrame.ShowMPRCrossHair = true;
            AxialFrame.DistinguishMPRByColor = true;
            AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            AxialFrame.AddAction(MedicalViewerActionType.Stack);
            AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);


            // Create Sagittal frame
            SagittalFrame.ShowMPRCrossHair = true;
            SagittalFrame.DistinguishMPRByColor = true;
            SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            SagittalFrame.AddAction(MedicalViewerActionType.Stack);
            SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // Create coronal frame
            CoronalFrame.ShowMPRCrossHair = true;
            CoronalFrame.DistinguishMPRByColor = true;
            CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            CoronalFrame.AddAction(MedicalViewerActionType.Stack);
            CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // attach the MPR cells to the 3D control
            _medical3DControl.AxialFrame    = AxialFrame;
            _medical3DControl.SagittalFrame = SagittalFrame;
            _medical3DControl.CoronalFrame  = CoronalFrame;

            AxialFrame.AxialName = "Axial Cell";
            SagittalFrame.SagittalName = "Sagittal Cell";
            CoronalFrame.CoronalName = "Coronal Cell";

            AxialFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            SagittalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            CoronalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);

            // with this option, you will not be able to select more than one cell at the same time. (selecting multiple cells are done with the pressing and holding the Ctrl and clicking on cell)
            _medicalViewer.AllowMultipleSelection = false;

            _medicalViewer.Cells.Add(_medical3DControl);
            _medicalViewer.Cells.Add(AxialFrame);
            _medicalViewer.Cells.Add(SagittalFrame);
            _medicalViewer.Cells.Add(CoronalFrame);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         // This event handles communication between the the 3D and the MedicalViewer.
         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerMPRForm GetMedicalViewerMPRForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerMPRForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerMPRExample()
      {
         MedicalViewerMPRForm myForm = GetMedicalViewerMPRForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MPRSample-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.SagittalName">
      <summary>
            Gets or sets the string that will be used as overlay text for the sagittal cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the string that will be used as overlay text for the sagittal cell.
            </value>
      <remarks>
            This value is used when the user adds a tag call <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" />.MPRType to the cell. Use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" /> to add tag to the cell.
            <para>The default value for this property is "Sagittal".</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.AxialName" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.CoronalName">
      <summary>
            Gets or sets the string that will be used as overlay text for the coronal cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            A value that indicates the string that will be used as overlay text for the coronal cell.
            </value>
      <remarks>
            This value is used when the user adds a tag call <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" />.MPRType to the cell. Use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" /> to add tag to the cell.
            <para>The default value for this property is "Coronal".</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.AxialName" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.UseWindowLevelBoundaries">
      <summary>
            Gets or sets the value that indicates whether to limit the width and center value to the range specified by the image calculated range.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
            true to limit the width and center values to the image boundaries, otherwise, it is false.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            The image calculated range is the initial window level width and center values of the image. It is calculated using various methods, depending on the image attributes:
            <list type="number"><item><description>For 8 –bit images, the default width and center is always 255 and 128 respectively.</description></item><item><description>For 16 and 12 bit images with no lookup table, the width is calculated using MaxVal – MinVal and the center is calculated using (MaxVal + MinVal)/2.</description></item><item><description>For 16 and 12 bit images with lookup table, the width and center values are calculated using the function “get linear voi lut” which finds the line inside the LUT and returns the width and center.</description></item></list>
            Not exceeding the calculated range means that the width will be kept inside the range 1 to Original Width). The center will be kept inside the range of -Original Width to +Original Width.
            </description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.ScaleType">
      <summary>
            Gets or sets the scale type used when using the zoom action.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerScaleType" /> enumeration that represents the scaling method used when zooming the image using the zoom action.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>To scale the image manually, use either the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> method or the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</description>
          </item>
          <item>
            <description>To zoom the image using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the zoom action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerDynamicZoomForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)
                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                cell.ActiveSubCell = cell.PageCount \ 2
                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerDynamicZoomForm() As MedicalViewerDynamicZoomForm
            MessageBox.Show("Zoom by clicking on the area you want to zoom using the left mouse button")
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerDynamicZoomForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerDynamicZoomExample()
            Dim myForm As MedicalViewerDynamicZoomForm = GetMedicalViewerDynamicZoomForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerDynamicZoomForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerDynamicZoomForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);
            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            cell.ScaleType = MedicalViewerScaleType.Dynamic;

            cell.ActiveSubCell = cell.PageCount / 2;
            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerDynamicZoomForm GetMedicalViewerDynamicZoomForm()
      {
         MessageBox.Show("Zoom by clicking on the area you want to zoom using the left mouse button");
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerDynamicZoomForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerDynamicZoomExample()
      {
         MedicalViewerDynamicZoomForm myForm = GetMedicalViewerDynamicZoomForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.DynamicZoomSample-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.AutoMagnifyEnabled">
      <summary>
            Gets or sets the value that indicates whether to enable the automatic magnify glass. which is a magnify glass that works if the user only hovers over the cell.
            </summary>
      <value>
            true to enable the auto magnify glass; false to disable the auto magnify glass.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>The auto magnify works exactly as the magnify glass action, except, this works only by hover the mouse over the cell (i.e. without having to press down the mouse button).</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerAutoMagnifyForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                Dim _image As RasterImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' Enable the auto magnify glass 
                cell.AutoMagnifyEnabled = True

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub


            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerAutoMagnifyForm() As MedicalViewerAutoMagnifyForm
            MessageBox.Show("Hover over the cell with the mouse button")

            Return New MedicalViewerAutoMagnifyForm()
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerAutoMagnifyExample()
            Dim myForm As MedicalViewerAutoMagnifyForm = GetMedicalViewerAutoMagnifyForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerAutoMagnifyForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerAutoMagnifyForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            RasterImage _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // Enable the auto magnify glass 
            cell.AutoMagnifyEnabled = true;

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.ScaleType = MedicalViewerScaleType.Dynamic;

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }


         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerAutoMagnifyForm GetMedicalViewerAutoMagnifyForm()
      {
         MessageBox.Show("Hover over the cell with the mouse button");

         return new MedicalViewerAutoMagnifyForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerAutoMagnifyExample()
      {
         MedicalViewerAutoMagnifyForm myForm = GetMedicalViewerAutoMagnifyForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.AutoMagnifySample-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass">
      <summary>
            Gets the class that contains the properties that control the spy glass style and shape.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlass" /> class that contains the properties that control the spy glass style and shape.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>To use the spy glass tool, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.SpyGlass</see> action to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the action with a mouse button.</description>
          </item>
          <item>
            <description>The user must register the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" /> event to use the spy glass.</description>
          </item>
          <item>
            <description>The spy glass is similar to the Magnify glass feature, the main difference here is that the spy glass works by sending a copy of the image through the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" />, the user can apply any effect on that copy, the spy glass then will display the copy as the user hovers the mouse over the original image.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSpyGlassForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                Dim _image As RasterImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.SpyGlass)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.SpyGlass, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

                AddHandler cell.SpyGlassStarted, AddressOf cell_SpyGlassStarted

                ' adjust some spy glass properties.
                cell.SpyGlass.PositionText = MedicalViewerSpyGlassTextType.Actual
                cell.SpyGlass.ZoomText = MedicalViewerSpyGlassTextType.Percentage
                cell.SpyGlass.ZoomOnScroll = True

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub cell_SpyGlassStarted(ByVal sender As Object, ByVal e As MedicalViewerSpyGlassStartedEventArgs)
                If Not e.Image Is Nothing Then
                    Dim invert As Leadtools.ImageProcessing.Color.InvertCommand = New Leadtools.ImageProcessing.Color.InvertCommand()
                    invert.Run(e.Image)
                End If
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub


            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerSpyGlassForm() As MedicalViewerSpyGlassForm
            MessageBox.Show("Hold down Left click to show the spy glass, " &amp; Constants.vbLf &amp; " move the mouse while you hold the mouse button down to move the spy glass. " &amp; Constants.vbLf &amp; " scroll while holding the mouse down to zoom in or out")
            Return New MedicalViewerSpyGlassForm()
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerSpyGlassExample()
            Dim myForm As MedicalViewerSpyGlassForm = GetMedicalViewerSpyGlassForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerSpyGlassForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSpyGlassForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            RasterImage _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.SpyGlass);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.SpyGlass, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

            cell.SpyGlassStarted += new EventHandler&lt;MedicalViewerSpyGlassStartedEventArgs&gt;(cell_SpyGlassStarted);

            // adjust some spy glass properties.
            cell.SpyGlass.PositionText = MedicalViewerSpyGlassTextType.Actual;
            cell.SpyGlass.ZoomText = MedicalViewerSpyGlassTextType.Percentage;
            cell.SpyGlass.ZoomOnScroll = true;

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.ScaleType = MedicalViewerScaleType.Dynamic;

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void cell_SpyGlassStarted(object sender, MedicalViewerSpyGlassStartedEventArgs e)
         {
            if (e.Image != null)
            {
               Leadtools.ImageProcessing.Color.InvertCommand invert = new Leadtools.ImageProcessing.Color.InvertCommand();
               invert.Run(e.Image);
            }
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }


         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerSpyGlassForm GetMedicalViewerSpyGlassForm()
      {
         MessageBox.Show("Hold down Left click to show the spy glass, \n move the mouse while you hold the mouse button down to move the spy glass. \n scroll while holding the mouse down to zoom in or out");
         return new MedicalViewerSpyGlassForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerSpyGlassExample()
      {
         MedicalViewerSpyGlassForm myForm = GetMedicalViewerSpyGlassForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SpyGlassSample-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCell.CustomLookupTable">
      <summary>
            Gets the collection of custom lookup table that the user can assign to any frame (image) in the cell.
            </summary>
      <value>
        <see cref="T:Leadtools.RasterCollection`1" /> collection that contains arrays of a custom lookup tables that the user can assign to any frame or image in the cell.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>the custom lookup table can be of any size, the toolkit will resize the lookuptable to fit the image.</description>
          </item>
          <item>
            <description>After the user creates a <see cref="T:Leadtools.RasterColor" /> array and assign it to this collection, he use that created lookup table on any frame by setting the value of <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.PaletteType" /> to a value equal or larger than 100. The program will then subtract 100 from the number sent and use the result as an index in this collection. For example, setting the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.PaletteType" /> to 100 will means that the frame will use the first lookup table in this collection, 101 means that the frame will use the second lookup table in this collection.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCustomLookupTableForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                Dim _image As RasterImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' Create a custom lookup table that will make the frames look inverted
                ' the value set here (8000) is random, you can choose any number
                Dim colors As RasterColor() = New RasterColor(7999) {}
                Dim index As Integer

                Dim lutValue As Byte
                index = 0
                Do While index &lt; colors.Length
                    lutValue = CByte(255 - ((index * 255 + 128) / (colors.Length - 1)))
                    colors(index).R = lutValue
                    colors(index).G = lutValue
                    colors(index).B = lutValue

                    index += 1
                Loop

                cell.CustomLookupTable.Add(colors)

                For Each subCell As MedicalViewerSubCell In cell.SubCells
                    subCell.PaletteType = CType(100, MedicalViewerPaletteType) ' the index of the first custom lookup table in Cell.CustomLookupTable
                Next subCell


                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub


            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCustomLookupTableForm() As MedicalViewerCustomLookupTableForm
            Return New MedicalViewerCustomLookupTableForm()
        End Function

        ' This examples assigns a custom lookup table to the image.

        Public Sub MedicalViewerCustomLookupTableExample()
            Dim myForm As MedicalViewerCustomLookupTableForm = GetMedicalViewerCustomLookupTableForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerCustomLookupTableForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCustomLookupTableForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            RasterImage _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // Create a custom lookup table that will make the frames look inverted
            RasterColor[] colors = new RasterColor[8000 /* or any number */];
            int index;

            for (index = 0; index &lt; colors.Length; index++)
            {
               colors[index].R =
               colors[index].G =
               colors[index].B = (byte)(255 - ((index * 255 + 128) / (colors.Length - 1)));
            }

            cell.CustomLookupTable.Add(colors);

            foreach (MedicalViewerSubCell subCell in cell.SubCells)
            {
               subCell.PaletteType = (MedicalViewerPaletteType)100; // the index of the first custom lookup table in Cell.CustomLookupTable
            }


            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.ScaleType = MedicalViewerScaleType.Dynamic;

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }


         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCustomLookupTableForm GetMedicalViewerCustomLookupTableForm()
      {
         return new MedicalViewerCustomLookupTableForm();
      }

      // This examples assigns a custom lookup table to the image.

      public void MedicalViewerCustomLookupTableExample()
      {
         MedicalViewerCustomLookupTableForm myForm = GetMedicalViewerCustomLookupTableForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.CustomLookupTableSample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.DeleteSelectedAnnotation(System.Int32)">
      <summary>
            This method deletes the selected annotation from the specified sub-cell annotation container.
            </summary>
      <param name="subCellIndex"> A zero-based index of the sub-cell that contains the selected annotation. </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.#ctor">
      <summary>
            Initializes a new MedicalViewerMultiCell class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMultiCell"></see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize">Finalize</see>.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetScale(System.Int32,System.Double)">
      <summary>
            Sets the scale of image with a specified sub-cell index by a specified value.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scale">The new scale value to be set.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell which is having its scale set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. One is by setting the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them, make sure that <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> 
            is set to false.</description>
          </item>
          <item>
            <description>To get the scale of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> 
            method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To set the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</description>
          </item>
          <item>
            <description>To get the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.#ctor(Leadtools.RasterImage)">
      <summary>
            Initializes a new <see cref="T:Leadtools.MedicalViewer.MedicalViewerMultiCell" /> class object that has an image attached.
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The image that will be attached to this cell.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.#ctor(Leadtools.RasterImage,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.MedicalViewer.MedicalViewerMultiCell" /> class object that has an image that can be set to fit within the image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The image that will be attached to this cell.</param>
      <param name="fit">true to fit the image within the cell area; otherwise, false.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.#ctor(Leadtools.RasterImage,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.MedicalViewer.MedicalViewerMultiCell" /> 
            class object that includes an image that can be set to fit within the 
            image with sub-cells of the specified number of rows and columns.
            </summary>
      <medaddon>yes</medaddon>
      <param name="image">The image that will be attached to this cell.</param>
      <param name="fit">true to fit the image within the cell area; otherwise, false.</param>
      <param name="rows">Number of rows in the sub-cell areas, maximum allowed is 8.</param>
      <param name="columns">Number of columns in the sub-cell areas, maximum allowed is 8.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Int32,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)">
      <summary>
            Changes the length of the selected annotation ruler according to 
            the new unit of measure.
            </summary>
      <medaddon>yes</medaddon>
      <param name="distance">The new length of the annotation ruler.</param>
      <param name="measurementUnit">The unit of measure.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell being calibrated. Pass -1 to calibrate all the sub-cells; pass -2 to calibrate the active sub-cell.</param>
      <param name="axis">The calibration axis.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RotateImagePerspective(System.Int32,System.Int32)">
      <summary>
            Rotates the perspective of the image with the specified sub-cell index by a specified rotation angle.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image is to be rotated. Pass -1 to rotate all the images in the cells. Pass - 2 to rotate the view perspective of the selected sub-cell image.</param>
      <param name="angle">The rotation angle.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The allowed rotation angles are: 90, 180, 270, -90, -180, -270.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ResetWindowLevelValues(System.Int32)">
      <summary>
            Resets the image window level to its default values.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which will be reset to its 
            default values. Pass -1 to reset the window level values for all the images in the cell. 
            Pass - 2 to reset the window level values for the selected sub-cell image.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The window level default values are set either internally 
            by the letting the control calculate it, or explicitly be using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetDefaultWindowLevelValues(System.Int32,System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FlipImage(System.Int32)">
      <summary>
            Flips the image with the specified subCellIndex in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which to flip.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is strongly recommended to use this method to flip the image.</description>
          </item>
          <item>
            <description>To retrieve whether the image has been flipped, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageFlipped" /></description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm11 : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForFlipExample() As MedicalViewerForm11
            Return New MedicalViewerForm11()
        End Function
        ' 

        Public Sub MedicalViewerFlipExample()
            Dim myForm As MedicalViewerForm11 = GetMedicalControlForFlipExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


            cell.FlipImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm11 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm11()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm11 GetMedicalControlForFlipExample()
        {
            return new MedicalViewerForm11();
        }
        // 

        public void MedicalViewerFlipExample()
        {
            MedicalViewerForm11 myForm = GetMedicalControlForFlipExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


            cell.FlipImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.FlipImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.IsImageFlipped(System.Int32)">
      <summary>
            Retrieves a value that indicates whether the image in the specified sub-cell index has been reversed or not.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">Index of the sub-cell that has the image which to retrieve whether it's flipped or not.</param>
      <returns>
            true if the image is flipped; otherwise, false.
            </returns>
      <remarks>
            In order to be able to retrieve the correct value from this method, you should flip the images inside the medical viewer using the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.DeleteTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)">
      <summary>
            Deletes the tag (overlay text) for the sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">Index of the sub-cell that will have the overlay text deleted.</param>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="alignment">The overlay text alignment.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will delete the sub-cell tag. The sub-cell tag is a tag that 
            appears on a single frame with the specified sub-cell index. To delete the cell tag use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.EditTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagInformation)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)">
      <summary>
            Retrieves the tag (overlay text) for a sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">Index of the sub-cell that is having its overlay text retrieved.</param>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="alignment">The overlay text alignment.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will retrieve the sub-cell tag. The sub-cell tag is a tag that appears on a single 
            frame with the specified sub-cell index. To retrieve a cell tag use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadRegion(System.String,System.Int32,System.Int32)">
      <summary>
            Loads regions from a file in the specified sub-cell image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file that contains the region(s) to load.</param>
      <param name="subCellIndex">Index of the sub-cell that contains the image being loaded.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one region.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the region from the file created by the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm7 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl7() As MedicalViewerForm7
            Return New MedicalViewerForm7()
        End Function

        ' This example will create a bitmap region on the first frame of the first image and save it.

        Public Sub MedicalViewerSaveRegionExample()
            Dim myForm As MedicalViewerForm7 = GetMedicalControl7()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm7 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm7()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm7 GetMedicalControl7()
        {
            return new MedicalViewerForm7();
        }

        // This example will create a bitmap region on the first frame of the first image and save it.

        public void MedicalViewerSaveRegionExample()
        {
            MedicalViewerForm7 myForm = GetMedicalControl7();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32)">
      <summary>
            Saves regions to a file from the specified sub-cell image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file which to save the region in.</param>
      <param name="subCellIndex">Index of the sub-cell that contains the image which to save its region.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save the region to a file. To load the file use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm7 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl7() As MedicalViewerForm7
            Return New MedicalViewerForm7()
        End Function

        ' This example will create a bitmap region on the first frame of the first image and save it.

        Public Sub MedicalViewerSaveRegionExample()
            Dim myForm As MedicalViewerForm7 = GetMedicalControl7()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm7 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm7()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm7 GetMedicalControl7()
        {
            return new MedicalViewerForm7();
        }

        // This example will create a bitmap region on the first frame of the first image and save it.

        public void MedicalViewerSaveRegionExample()
        {
            MedicalViewerForm7 myForm = GetMedicalControl7();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetScaleMode(System.Int32,Leadtools.MedicalViewer.MedicalViewerScaleMode)">
      <summary>
            Sets the scale mode for the specified sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The index of the sub-cell which is having its scale mode set.</param>
      <param name="scaleMode">An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerScaleMode" /> value that represents the scale mode to be set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. 
            One is by setting the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> 
            property to true. The other way is by using the SetScale and 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them, make sure that 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> is set to false.</description>
          </item>
          <item>
            <description>To set the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> method.</description>
          </item>
          <item>
            <description>To get the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To get the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadRegion(System.String,System.Int32)">
      <summary>
            Loads regions from a file in the specified sub-cell image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file that contains the region(s) to load.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the image being loaded.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the region from the file created by the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm7 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl7() As MedicalViewerForm7
            Return New MedicalViewerForm7()
        End Function

        ' This example will create a bitmap region on the first frame of the first image and save it.

        Public Sub MedicalViewerSaveRegionExample()
            Dim myForm As MedicalViewerForm7 = GetMedicalControl7()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm7 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm7()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm7 GetMedicalControl7()
        {
            return new MedicalViewerForm7();
        }

        // This example will create a bitmap region on the first frame of the first image and save it.

        public void MedicalViewerSaveRegionExample()
        {
            MedicalViewerForm7 myForm = GetMedicalControl7();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetTitlebarIconState(System.Int32,System.Int32)">
      <summary>
            Determines whether the specified icon is checked.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the targeted icon.</param>
      <param name="iconIndex">Index of the icon to be checked.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerIconStatus" /> enumeration value 
            that contains the status of the specified icon in the specified cell.
            </returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)">
      <summary>
            (Read only) Gets the scale mode for the specified sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
            An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerScaleMode" /> value that represents the scale mode.
            </returns>
      <param name="subCellIndex">The zero-based index of the sub-cell which is having its scale mode retrieved.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. 
            One is by setting the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them, make sure that 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> is set to false.</description>
          </item>
          <item>
            <description>To set the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> method.</description>
          </item>
          <item>
            <description>To get the scale of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To set the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetCellImage(System.Int32,System.Boolean)">
      <summary>
            Returns a printable version of the sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
        <see cref="T:System.Drawing.Image" /> object which is the printable version of the sub-cell.
            </returns>
      <param name="subCellIndex">The zero-based index of the sub-cell from which to get the image. 
            If the cell layout displays more than one sub-cell and the user passed -1, the method will return a printable version of the entire cell.</param>
      <param name="exploded">true to print the sub-cell, but after scaling it up to fit the entire cell area.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method is useful whenever the user needs to save the image along with the annotations, tags, border, rulers and 
            anything that has been drawn on the cell. If you want to print specific features of the cell, use the overloaded  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetCellImage(System.Int32,System.Boolean,Leadtools.MedicalViewer.MedicalViewerCellImageFeatures)" /> method.</description>
          </item>
          <item>
            <description>For more information about the cell, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Medical Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl() As MedicalViewerForm
            Return New MedicalViewerForm()
        End Function

        ' 

        Public Sub MedicalViewerGetCellImageExample()
            Dim myForm As MedicalViewerForm = GetMedicalControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim image As Image = cell.GetCellImage(0, True, MedicalViewerCellImageFeatures.All Xor MedicalViewerCellImageFeatures.Annotations)
            image.Save(Path.Combine(LEAD_VARS.ImagesDir, "Test.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg)
            image.Dispose()
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm GetMedicalControl()
        {
            return new MedicalViewerForm();
        }

        // 

        public void MedicalViewerGetCellImageExample()
        {
            MedicalViewerForm myForm = GetMedicalControl();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            Image image = cell.GetCellImage(0, true, MedicalViewerCellImageFeatures.All ^ MedicalViewerCellImageFeatures.Annotations);
            image.Save(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg);
            image.Dispose();
            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerGetCellImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetCellImage(System.Int32,System.Boolean,Leadtools.MedicalViewer.MedicalViewerCellImageFeatures)">
      <summary>
            Returns a printable version of the sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
        <see cref="T:System.Drawing.Image" /> object which is the printable version of the sub-cell.
            </returns>
      <param name="subCellIndex">The zero-based index of the sub-cell from which to get the image.
            If the cell layout displays more than one sub-cell and the user passed -1, the method will return a printable version of the entire cell.</param>
      <param name="exploded">true to print the sub-cell, but after scaling it up to fit the entire cell area.</param>
      <param name="features">An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures" /> value that lets 
            you select which part of the cell besides the image to draw.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method is useful whenever the user needs to save the image along with specified 
            parts of the cell like annotations, tags, border, rulers and anything that has been drawn on the cell.</description>
          </item>
          <item>
            <description>For more information about the cell, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Medical Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl() As MedicalViewerForm
            Return New MedicalViewerForm()
        End Function

        ' 

        Public Sub MedicalViewerGetCellImageExample()
            Dim myForm As MedicalViewerForm = GetMedicalControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim image As Image = cell.GetCellImage(0, True, MedicalViewerCellImageFeatures.All Xor MedicalViewerCellImageFeatures.Annotations)
            image.Save(Path.Combine(LEAD_VARS.ImagesDir, "Test.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg)
            image.Dispose()
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm GetMedicalControl()
        {
            return new MedicalViewerForm();
        }

        // 

        public void MedicalViewerGetCellImageExample()
        {
            MedicalViewerForm myForm = GetMedicalControl();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            Image image = cell.GetCellImage(0, true, MedicalViewerCellImageFeatures.All ^ MedicalViewerCellImageFeatures.Annotations);
            image.Save(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.jpg"), System.Drawing.Imaging.ImageFormat.Jpeg);
            image.Dispose();
            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerGetCellImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetAnnotationContainer(System.Int32)">
      <summary>
            (Read only) Gets the <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">sub-cell zero-based index value from which to get the annotation container.</param>
      <returns>
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container.
            </returns>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm15 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForAnnotationContainerExample() As MedicalViewerForm15
            Return New MedicalViewerForm15()
        End Function
        ' 

        Public Sub MedicalViewerAnnotationContainerExample()
            Dim myForm As MedicalViewerForm15 = GetMedicalControlForAnnotationContainerExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim annContainer As AnnContainer = cell.GetAnnotationContainer(0)

            Dim annRectangleObject As AnnRectangleObject = New AnnRectangleObject()
            annRectangleObject.Bounds = New AnnRectangle(100, 100, 100, 100)
            annRectangleObject.Pen = New AnnPen(Color.Yellow, New AnnLength(3))
            annContainer.Objects.Add(annRectangleObject)

            cell.SetAnnotationContainer(annContainer, 0)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm15 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm15()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

               // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm15 GetMedicalControlForAnnotationContainerExample()
        {
            return new MedicalViewerForm15();
        }
        // 

        public void MedicalViewerAnnotationContainerExample()
        {
            MedicalViewerForm15 myForm = GetMedicalControlForAnnotationContainerExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            AnnContainer annContainer = cell.GetAnnotationContainer(0);

            AnnRectangleObject annRectangleObject = new AnnRectangleObject();
            annRectangleObject.Bounds = new AnnRectangle(100, 100, 100, 100);
            annRectangleObject.Pen = new AnnPen(Color.Yellow, new AnnLength(3));
            annContainer.Objects.Add(annRectangleObject);

            cell.SetAnnotationContainer(annContainer, 0);

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.AnnotationContainerExample-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetAnnotationContainer(Leadtools.Annotations.AnnContainer,System.Int32)">
      <summary>
            Sets the <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container.
            </summary>
      <medaddon>yes</medaddon>
      <param name="annContainer">
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Annotations/Leadtools.Annotations.html">Leadtools.Annotations</a> object which represents the annotation container to set.</param>
      <param name="subCellIndex">The sub-cell zero-based index value which to set the annotation container into.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetAnnotationContainer(System.Int32)" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ConvertAnnotationToRegion(System.Int32,Leadtools.RasterRegionCombineMode,System.Boolean)">
      <summary>
            Converts the selected annotation into a region of interest.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the selected annotation object being converted. Pass -1 to convert all sub-cells contained within the cell; pass -2 to convert only the active sub-cell.</param>
      <param name="combineMode">An enumerated <see cref="T:Leadtools.RasterRegionCombineMode" /> value that indicates how to create a region, if one is defined.</param>
      <param name="deleteAnnotation">true to delete the annotation after creating the region; otherwise, false.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            This method will work only on the closed shape annotation objects, namely:
            <list type="bullet"><item><description>rectangle annotation.</description></item><item><description>ellipse annotation.</description></item><item><description>hilite annotation.</description></item></list></description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ConvertAnnotationToRegion(System.Int32,Leadtools.RasterRegionCombineMode,System.Boolean)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetSelectedAnnotationAttributes(System.Int32)">
      <summary>
            Retrieves the selected annotation attribute for the specified cell or sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the targeted selected annotation object.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAttributes" /> object that contains the selected annotation attributes.
            </returns>
      <remarks> For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)">
      <summary>
            (Read only) Gets the scale of an image with the specified sub-cell index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell which is having its scale retrieved.</param>
      <returns>
            The scale value.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>Currently, there are two ways to fit the image to cell. One is by setting the 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> property to true. 
            The other way is by using the SetScale and <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScale(System.Int32)" /> methods. 
            In order to be able to use them, make sure that <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FitImageToCell" /> 
            is set to false.</description>
          </item>
          <item>
            <description>To set the scale of a cell or sub-cell use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScale(System.Double)" /> 
            method.</description>
          </item>
          <item>
            <description>To set the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
          <item>
            <description>To retrieve the properties of the scale action use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>To set the scale mode of a cell or sub-cell use the 
            
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetScaleMode(Leadtools.MedicalViewer.MedicalViewerScaleMode)" /> method.</description>
          </item>
          <item>
            <description>To get the scale mode of a cell or sub-cell use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetScaleMode(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RemoveRegion(System.Int32)">
      <summary>
            Deletes the region from all of the images in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell to which the annotation container will be loaded.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is recommended to use this method when removing a region, especially when using the low memory usage feature.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FreezeSubCell(System.Int32,System.Boolean)">
      <summary>
            Freezes the sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that is having its frozen status changed.</param>
      <param name="frozen">true to freeze the sub-cell, false to unfreeze the sub-cell.</param>
      <remarks>
            This method freezes only a sub-cell. 
            To freeze or unfreeze the entire cell, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Frozen" /> property.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.NudgeTool)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      Public Sub MedicalViewerPaintInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim i As Integer

         i = 0
         Do While i &lt; cell.Image.PageCount
            If ((i &gt;&gt; 1) &lt;&lt; 1) = i Then
               cell.FreezeSubCell(i, True)
            End If
            i += 1
         Loop


         AddHandler cell.PostPaint, AddressOf medicalViewer_PostPaint

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_PostPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.SubCellFrozen(e.SubCellIndex) Then
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Left, e.ClipRectangle.Top), New Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom))
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Right, e.ClipRectangle.Top), New Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom))
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      public void MedicalViewerPaintInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         int i;

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            if (((i &gt;&gt; 1) &lt;&lt; 1) == i)
               cell.FreezeSubCell(i, true);
         }


         cell.PostPaint += new EventHandler&lt;MedicalViewerPaintInformationEventArgs&gt;(medicalViewer_PostPaint);

         myForm.ShowDialog();
      }

      void medicalViewer_PostPaint(object sender, MedicalViewerPaintInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.SubCellFrozen(e.SubCellIndex))
         {
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Left, e.ClipRectangle.Top), new Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom));
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Right, e.ClipRectangle.Top), new Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom));
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerPaintInformationEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SubCellFrozen(System.Int32)">
      <summary>
            Retrieves a value that indicates whether the sub-cell has been frozen.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell being checked.</param>
      <returns>
            true if the sub-cell is frozen; otherwise, false.
            </returns>
      <remarks>
            This method retrieves the status for a sub-cell only. 
            To check the frozen status for an entire cell use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Frozen" /> property. 
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.NudgeTool)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      Public Sub MedicalViewerPaintInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim i As Integer

         i = 0
         Do While i &lt; cell.Image.PageCount
            If ((i &gt;&gt; 1) &lt;&lt; 1) = i Then
               cell.FreezeSubCell(i, True)
            End If
            i += 1
         Loop


         AddHandler cell.PostPaint, AddressOf medicalViewer_PostPaint

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_PostPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.SubCellFrozen(e.SubCellIndex) Then
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Left, e.ClipRectangle.Top), New Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom))
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Right, e.ClipRectangle.Top), New Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom))
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      public void MedicalViewerPaintInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         int i;

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            if (((i &gt;&gt; 1) &lt;&lt; 1) == i)
               cell.FreezeSubCell(i, true);
         }


         cell.PostPaint += new EventHandler&lt;MedicalViewerPaintInformationEventArgs&gt;(medicalViewer_PostPaint);

         myForm.ShowDialog();
      }

      void medicalViewer_PostPaint(object sender, MedicalViewerPaintInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.SubCellFrozen(e.SubCellIndex))
         {
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Left, e.ClipRectangle.Top), new Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom));
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Right, e.ClipRectangle.Top), new Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom));
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerPaintInformationEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RotateAnnotationContainer(System.Double,System.Int32)">
      <summary>
            Rotates the annotation container with the specified sub-cell index by the specified amount.
            </summary>
      <medaddon>yes</medaddon>
      <param name="angle">The amount of rotation</param>
      <param name="subCellIndex">The zero-based index of the sub-cell which is having its annotation container rotated.</param>
      <remarks>
            The allowed rotation angles are: 90, 180, 270, 0, -90, -180, -270.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ReverseAnnotationContainer(System.Int32)">
      <summary>
            Reverses the annotation container with the specified sub-cell index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell which is having its annotation container reversed.</param>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FlipAnnotationContainer(System.Int32)">
      <summary>
            Flips the annotation container with the specified sub-cell index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell which has the annotation container being flipped.</param>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetTitlebarIconState(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerIconStatus)">
      <summary>
            Checks or un-checks the specified icon.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the targeted icon.</param>
      <param name="iconIndex">Index of the icon to be checked un-checked.</param>
      <param name="status">The new status of the icon.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.Invalidate(System.Int32)">
      <summary>
            Redraws the cell and causes a paint message to be sent to the <see cref="N:Leadtools.MedicalViewer">MedicalViewer</see> control that owns this cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that will be invalidated</param>
      <remarks>
            You must add the cell to the <see cref="N:Leadtools.MedicalViewer" /> control before being able to use this method. To add the cell, call the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" /> method.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetDisplayedRectangle(System.Int32)">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the cell/sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell of the rectangle that the method will retrieve.</param>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the cell/sub-cell.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of the whole image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of displayed area of the image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetDisplayedImageRectangle(System.Int32)">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represents the image boundaries. This changes as you zoom in and out or offset the image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell of the rectangle that the method will retrieve.</param>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" />that represents the image boundaries. This changes as you zoom in and out or offset the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of displayed area of the image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of cell or the sub-cell, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetDisplayedClippedImageRectangle(System.Int32)">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Rectangle" /> that represents the part of the cell or sub-cell that is occupied by the image.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell of the rectangle that the method will retrieve.</param>
      <returns>
            A <see cref="T:System.Drawing.Rectangle" /> that represents the part of the cell or sub-cell that is occupied by the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>To get the rectangle of the whole image, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedImageRectangle" /></description>
          </item>
          <item>
            <description>To get the rectangle of cell or the sub-cell, call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedRectangle" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetDisplayedClippedImageRectangle" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RotateOrientation(System.Int32,System.Int32)">
      <summary>
            Rotates the orientation of an image in the cell with the specified parameters.
            </summary>
      <param name="subCellIndex">a zero-based index of the sub-cell that will have it's orientation rotated..</param>
      <param name="angle">angle of rotation, the values must be multiple of 90 (i.e. 270, 180, 90, 0, -90, -180, etc.).</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To rotate the orientation of a specified sub-cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.RotateOrientation(System.Int32,System.Int32)" /></description>
          </item>
          <item>
            <description>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /></description>
          </item>
          <item>
            <description>To rotate the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)" /></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FlipOrientation(System.Int32)">
      <summary>
            Flips the orientation of an image in the cell with the specified parameters.
            </summary>
      <param name="subCellIndex">A zero-based index of the sub-cell that will have it's orientation flipped.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To flip the orientation of a specified sub-cell in the cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.FlipOrientation(System.Int32)" /></description>
          </item>
          <item>
            <description>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /></description>
          </item>
          <item>
            <description>To flip the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.FlipImage" /></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ReverseOrientation(System.Int32)">
      <summary>
            Reverses the orientation of an image in the cell with the specified subCellIndex.
            </summary>
      <param name="subCellIndex">a zero-based index of the sub-cell that will have it's orientation reversed.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To reverses the orientation of the specified sub-cell, use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ReverseOrientation(System.Int32)" /></description>
          </item>
          <item>
            <description>To get or set the orientation, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /></description>
          </item>
          <item>
            <description>To reverse the image, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage" /></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32)">
      <summary>
            Saves the annotation container of the specified sub-cell index to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file to which to save the annotation container.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the annotation container being saved.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save annotations to a file. 
            To load the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerFileOperation)">
      <summary>
            Saves the annotation container(s) of a cell to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file to which to save the annotation container.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the annotation container to be saved.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one annotation container. 
            When saving a file, any value greater than the total number of pages will cause the saved annotation 
            container to be appended to the end of the file.</param>
      <param name="operation">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerFileOperation" /> value 
            that indicates the operation to be taken on the file when saving the annotation container.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save the annotations to a file. To load the annotations, use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.IO.Stream,System.Int32)">
      <summary>
            Saves the annotation container of the specified sub-cell index to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that to which to save the annotation container.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the annotation container being saved.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save annotations to a file. 
            To load the annotations, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.IO.Stream,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerFileOperation)">
      <summary>
            Saves the annotation container(s) of a cell to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that to which to save the annotation container.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the annotation container to be saved.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one annotation container. 
            When saving a file, any value greater than the total number of pages will cause the saved annotation 
            container to be appended to the end of the file.</param>
      <param name="operation">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerFileOperation" /> value 
            that indicates the operation to be taken on the file when saving the annotation container.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save the annotations to a file. To load the annotations, use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32)">
      <summary>
            Loads the annotation container to the specified sub-cell index from a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file being loaded.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell to which the annotation container will be loaded.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the annotations to a file. 
            To save the annotations, use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.String,System.Int32,System.Int32)">
      <summary>
            Loads the annotation container(s) to the specified sub-cell index from a file, starting from the specified page in the file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file with the annotation container being loaded.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell to which the annotation container will be loaded.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one annotation container.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the annotations to a file. 
            To save the annotations, use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerFileOperation)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm9 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl9() As MedicalViewerForm9
            Return New MedicalViewerForm9()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationExample()
            Dim myForm As MedicalViewerForm9 = GetMedicalControl9()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm9 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm9()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm9 GetMedicalControl9()
        {
            return new MedicalViewerForm9();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationExample()
        {
            MedicalViewerForm9 myForm = GetMedicalControl9();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.IO.Stream,System.Int32)">
      <summary>
            Loads the annotation container to the specified sub-cell index from a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file being loaded.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell to which the annotation container will be loaded.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the annotations to a file. 
            To save the annotations, use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadAnnotations(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Loads the annotation container(s) to the specified sub-cell index from a file, starting from the specified page in the file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains the file being loaded.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell to which the annotation container will be loaded.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one annotation container.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will load the annotations to a file. 
            To save the annotations, use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveAnnotations(System.String,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerFileOperation)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm16 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private LoadAnnotation As Button
            Private SaveAnnotation As Button
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Bounds = New Rectangle(0, 100, Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)
            End Sub


            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 100)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 100)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)



                LoadAnnotation = New Button()
                LoadAnnotation.Bounds = New Rectangle(10, 10, 100, 30)
                LoadAnnotation.Text = "Load Annotation"
                AddHandler LoadAnnotation.Click, AddressOf LoadAnnotation_Click

                SaveAnnotation = New Button()
                SaveAnnotation.Bounds = New Rectangle(110, 10, 100, 30)
                SaveAnnotation.Text = "Save Annotation"
                AddHandler SaveAnnotation.Click, AddressOf SaveAnnotation_Click

                Controls.AddRange(New Control() {_medicalViewer, LoadAnnotation, SaveAnnotation})

            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property

            Private Function GetFileStream() As FileStream
                Dim fs As FileStream
                If File.Exists(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann")) Then
                    fs = New FileStream(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"), FileMode.Open)
                Else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "SavedAnnotation.ann"))
                End If

                Return fs
            End Function

            Private Sub SaveAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.SaveAnnotations(fs, 0)
                fs.Close()
            End Sub

            Private Sub LoadAnnotation_Click(ByVal sender As Object, ByVal e As EventArgs)
                Dim fs As FileStream = GetFileStream()
                Dim cell As MedicalViewerMultiCell = CType(_medicalViewer.Cells(0), MedicalViewerMultiCell)

                cell.LoadAnnotations(fs, 0)
                fs.Close()
            End Sub
        End Class


        Private Function GetMedicalControl16() As MedicalViewerForm16
            Return New MedicalViewerForm16()
        End Function

        ' This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        Public Sub MedicalViewerSaveAnnotationStreamExample()
            Dim myForm As MedicalViewerForm16 = GetMedicalControl16()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm16 : Form
        {
            private MedicalViewer _medicalViewer;
            Button LoadAnnotation;
            Button SaveAnnotation;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Bounds = new Rectangle(0, 100, this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);
            }


            public MedicalViewerForm16()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 100);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 100);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
                cell.AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);



                LoadAnnotation = new Button();
                LoadAnnotation.Bounds = new Rectangle(10, 10, 100, 30);
                LoadAnnotation.Text = "Load Annotation";
                LoadAnnotation.Click += new EventHandler(LoadAnnotation_Click);

                SaveAnnotation = new Button();
                SaveAnnotation.Bounds = new Rectangle(110, 10, 100, 30);
                SaveAnnotation.Text = "Save Annotation";
                SaveAnnotation.Click += new EventHandler(SaveAnnotation_Click);

                Controls.AddRange(new Control[] { _medicalViewer, LoadAnnotation, SaveAnnotation });

            }

            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }

            FileStream GetFileStream()
            {
                FileStream fs;
                if (File.Exists(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann")))
                    fs = new FileStream(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"), FileMode.Open);
                else
                    fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir,"SavedAnnotation.ann"));

                return fs;
            }

            void SaveAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.SaveAnnotations(fs, 0);
                fs.Close();
            }

            void LoadAnnotation_Click(object sender, EventArgs e)
            {
                FileStream fs = GetFileStream();
                MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(_medicalViewer.Cells[0]);

                cell.LoadAnnotations(fs, 0);
                fs.Close();
            }
        }


        MedicalViewerForm16 GetMedicalControl16()
        {
            return new MedicalViewerForm16();
        }

        // This example copied the annotation container of the sub-cell when user right clicks on it, and paste the annotation container on the sub-cell that the user click on it using the left mouse button.

        public void MedicalViewerSaveAnnotationStreamExample()
        {
            MedicalViewerForm16 myForm = GetMedicalControl16();
            MedicalViewer medicalViewer = myForm.Viewer;

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveAnnotationStream-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.InvertImage(System.Int32)">
      <summary>
            Inverts the image in the specific sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image being inverted.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is strongly recommended to use this function to invert the image. 
            Using any external command for inversion could result in loss of the inversion if the user 
            manipulates the window level values using the window level action.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm5 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl5() As MedicalViewerForm5
            Return New MedicalViewerForm5()
        End Function

        ' This example inverts the images of the first cell.

        Public Sub MedicalViewerInvertImagesExample()
            Dim myForm As MedicalViewerForm5 = GetMedicalControl5()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.InvertImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm5 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm5()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm5 GetMedicalControl5()
        {
            return new MedicalViewerForm5();
        }

        // This example inverts the images of the first cell.

        public void MedicalViewerInvertImagesExample()
        {
            MedicalViewerForm5 myForm = GetMedicalControl5();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.InvertImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.InvertImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.IsImageInverted(System.Int32)">
      <summary>
            Retrieves a value that indicates whether the image in the specified sub-cell index has been inverted.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based Index of the sub-cell that has the image being checked.</param>
      <returns>
            true if the image is inverted; otherwise, false.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>In order to be able to retrieve the correct value from this method, 
            you should invert the images inside the medical viewer using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.InvertImage" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm5 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl5() As MedicalViewerForm5
            Return New MedicalViewerForm5()
        End Function

        ' This example inverts the images of the first cell.

        Public Sub MedicalViewerInvertImagesExample()
            Dim myForm As MedicalViewerForm5 = GetMedicalControl5()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.InvertImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm5 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm5()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm5 GetMedicalControl5()
        {
            return new MedicalViewerForm5();
        }

        // This example inverts the images of the first cell.

        public void MedicalViewerInvertImagesExample()
        {
            MedicalViewerForm5 myForm = GetMedicalControl5();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.InvertImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.InvertImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetDefaultWindowLevelValues(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the default window level values for the image with the specified sub-cell index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The default window level width value.</param>
      <param name="center">The default window level center value.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which is having its default window level values set.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method does not change the current window level values. 
            To change the current window level values use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetDefaultWindowLevelValues(System.Int32)">
      <summary>
            Retrieves the default window level values for the image with the specified sub-cell index.
            </summary>
      <medaddon>yes</medaddon>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevelValues" /> object that 
            contains the default window level values.
            </returns>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which is having 
            its default window level values retrieved.
            Pass -2 to retrieve the default window level values for the selected sub-cell image.</param>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      Public Sub MedicalViewerWindowLevelExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevelValues As MedicalViewerWindowLevelValues = cell.GetDefaultWindowLevelValues(0)

         windowLevelValues.Width -= 100

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center)

         cell.ResetWindowLevelValues(0)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevelValues windowLevelValues = cell.GetDefaultWindowLevelValues(0);

         windowLevelValues.Width -= 100;

         cell.SetDefaultWindowLevelValues(0, windowLevelValues.Width, windowLevelValues.Center);

         cell.ResetWindowLevelValues(0);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevelValues-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that will have the overlay text set.</param>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="alignment">The overlay text alignment.</param>
      <param name="type">The type of the tag.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            The tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
            <list type="bullet"><item><description>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> 
            to TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</description></item><item><description>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> 
            to BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, 
            on the right side.</description></item><item><description>If <paramref name="alignment" /> is set to TopCenter, BottomCenter, 
            CenterLeft, CenterRight, then <paramref name="row" /> will not be used.</description></item><item><description>This method will add the tag to a single frame with the specified sub-cell index. 
            To add the tag to all the cell frames use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String)" /> method.</description></item><item><description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description></item></list></description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that will have the overlay text set.</param>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="alignment">The overlay text alignment.</param>
      <param name="type">The type of tag.</param>
      <param name="userText">The user text. Ignored if the <paramref name="type" /> is not set to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" />.UserData.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            Tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
            <list type="bullet"><item><description>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> to 
            TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</description></item><item><description>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> to 
            BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, on the right side.</description></item><item><description>If <paramref name="alignment" /> is set to TopCenter, BottomCenter, 
            CenterLeft, CenterRight, then <paramref name="row" /> will not be used.</description></item></list></description>
          </item>
          <item>
            <description>This method will add the tag to a single frame with the specified sub-cell index. 
            To add the tag to all cell frames use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Adds a tag (overlay text) to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that will have the overlay text set.</param>
      <param name="row">The line at which the overlay text will be drawn.</param>
      <param name="alignment">The overlay text alignment.</param>
      <param name="type">The type of tag.</param>
      <param name="userText">The user text. Ignored if the <paramref name="type" /> is not set to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType">MedicalViewerTagType.UserData</see>.</param>
      <param name="font">The font that will be used to draw the tag over the cell.</param>
      <param name="fontColor">The color of the text.</param>
      <remarks>
        <ul>
          <li>
              Tag placement works by dividing the cell into rows (almost 30 rows) and 8 different alignments. For example:
                  <ul><li>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> to 
                          TopLeft, then the text will be placed at the 3rd row from the top of the cell, on the left side.</li><li>If <paramref name="row" /> is set to 3 and <paramref name="alignment" /> to 
                          BottomRight, then the text will be placed at the 3rd row from the bottom of the cell, on the right side.</li><li>If <paramref name="alignment" /> is set to TopCenter, BottomCenter, 
                          CenterLeft, CenterRight, then <paramref name="row" /> will not be used.</li></ul></li>
          <li>This method will add the tag to a single frame with the specified sub-cell index.
                  To add the tag to all cell frames use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType,System.String)" /> method.</li>
          <li>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</li>
        </ul>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.EditTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagInformation)">
      <summary>
            Edits the tag (overlay text) of the sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that will have the overlay text set.</param>
      <param name="row">The line at which the overlay text is placed.</param>
      <param name="alignment">The overlay text alignment.</param>
      <param name="information">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /> object 
            that contains the new data for the tag.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will edit the sub-cell tag. The sub-cell tag is a tag that 
            appears on a single frame with the specified sub-cell index. To edit the cell the tag use the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.EditTag(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagInformation)">Leadtools.MedicalViewer.MedicalViewerCell.EditTag(int, int, MedicalViewerTagAlignment, MedicalViewerTagInformation)</see> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.PointToImage(System.Int32,System.Drawing.Point)">
      <summary>
            Returns the image coordinates corresponding to the mouse coordinates specified by the user.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the image which is having its coordinates retrieved.</param>
      <param name="point">The <see cref="T:System.Drawing.Point" /> object that represents the mouse coordinates.</param>
      <returns>
            A <see cref="T:System.Drawing.Point" /> object that contains the image coordinates.
            </returns>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm6 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))


                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl6() As MedicalViewerForm6
            Return New MedicalViewerForm6()
        End Function

        ' this example draw dots on the image when clicking on it using the left mouse button.

        Public Sub MedicalViewerPointToImageExample()
            Dim myForm As MedicalViewerForm6 = GetMedicalControl6()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            AddHandler cell.CellMouseDown, AddressOf medicalViewer_CellMouseDown

            myForm.ShowDialog()
        End Sub

        Private Sub medicalViewer_CellMouseDown(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
            Dim viewer As MedicalViewer = CType(sender, MedicalViewer)
            Dim point As Point
            Dim cell As MedicalViewerMultiCell = CType(viewer.Cells(0), MedicalViewerMultiCell)

            cell.Image.Page = e.SubCellIndex + 1
            point = cell.PointToImage(New Point(e.X, e.Y))
            cell.Image.SetPixelColor(point.Y, point.X, New RasterColor(255, 255, 255))
            cell.Invalidate()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm6 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm6()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));


                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }

        MedicalViewerForm6 GetMedicalControl6()
        {
            return new MedicalViewerForm6();
        }

        // this example draw dots on the image when clicking on it using the left mouse button.

        public void MedicalViewerPointToImageExample()
        {
            MedicalViewerForm6 myForm = GetMedicalControl6();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.CellMouseDown += new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseDown);

            myForm.ShowDialog();
        }

        void medicalViewer_CellMouseDown(object sender, MedicalViewerCellMouseEventArgs e)
        {
            MedicalViewer viewer = (MedicalViewer)sender;
            Point point;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(viewer.Cells[0]);

            cell.Image.Page = e.SubCellIndex + 1;
            point = cell.PointToImage(new Point(e.X, e.Y));
            cell.Image.SetPixelColor(point.Y, point.X, new RasterColor(255, 255, 255));
            cell.Invalidate();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.PointToImage-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.PointToClient(System.Int32,System.Drawing.Point)">
      <summary>
            Returns the client coordinates (the cell coordinates) corresponding to the image coordinates specified by the user.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the image which is having its coordinates sent.</param>
      <param name="point">The <see cref="T:System.Drawing.Point" /> object that represents the image coordinates.</param>
      <returns>
            A <see cref="T:System.Drawing.Point" /> object that contains the client (the cell) coordinates.
            </returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SaveRegion(System.String,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerFileOperation)">
      <summary>
            Saves cell regions to a file.
            </summary>
      <medaddon>yes</medaddon>
      <param name="fileName">A string that contains the path to the file to which to save the region.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that contains the image which is having its regions saved.</param>
      <param name="startPage">The page number of a multi-page file, which can contain more than one region. 
            When saving a file, any value greater than the total number of pages will cause the saved region to be appended to the end of the file.</param>
      <param name="operation">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerFileOperation" /> value that 
            indicates the operation to be taken on the file when saving a region.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>This method will save the region to a file. To load the file, use the  
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.LoadRegion(System.String,System.Int32)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.CreatingABitmapRegion.html">Working With Regions</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm7 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl7() As MedicalViewerForm7
            Return New MedicalViewerForm7()
        End Function

        ' This example will create a bitmap region on the first frame of the first image and save it.

        Public Sub MedicalViewerSaveRegionExample()
            Dim myForm As MedicalViewerForm7 = GetMedicalControl7()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim width As Integer = cell.Image.Width
            Dim height As Integer = cell.Image.Height
            Dim centerX As Integer = (width \ 2)
            Dim centerY As Integer = (height \ 2)

            Dim region As Region = New Region(New Rectangle(centerX - width \ 4, centerY - height \ 4, centerX + width \ 4, centerY + height \ 4))

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, Nothing, region.GetRegionData(), RasterRegionCombineMode.Set)
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

            myForm.ShowDialog()
        End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm7 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm7()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm7 GetMedicalControl7()
        {
            return new MedicalViewerForm7();
        }

        // This example will create a bitmap region on the first frame of the first image and save it.

        public void MedicalViewerSaveRegionExample()
        {
            MedicalViewerForm7 myForm = GetMedicalControl7();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            int width = cell.Image.Width;
            int height = cell.Image.Height;
            int centerX = (width / 2);
            int centerY = (height / 2);

            Region region = new Region(new Rectangle(centerX - width / 4, centerY - height / 4, centerX + width / 4, centerY + height / 4));

            RasterRegionConverter.AddGdiPlusDataToRegion(cell.Image, null, region.GetRegionData(), RasterRegionCombineMode.Set);
            cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir,"Out_Test.rgn"));

            myForm.ShowDialog();
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.SaveRegion-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.ReverseImage(System.Int32)">
      <summary>
            Reverses the image with the specified subCellIndex in the cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which to reverse.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>It is strongly recommended to use this method to reverse the image.</description>
          </item>
          <item>
            <description>To retrieve whether the image has been reversed, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.IsImageReversed" />.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm12 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForReverseExample() As MedicalViewerForm12
            Return New MedicalViewerForm12()
        End Function
        ' 

        Public Sub MedicalViewerReverseImageExample()
            Dim myForm As MedicalViewerForm12 = GetMedicalControlForReverseExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.ReverseImage()

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm12 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm12()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

               // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm12 GetMedicalControlForReverseExample()
        {
            return new MedicalViewerForm12();
        }
        // 

        public void MedicalViewerReverseImageExample()
        {
            MedicalViewerForm12 myForm = GetMedicalControlForReverseExample();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.ReverseImage();

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.ReverseImage-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.IsImageReversed(System.Int32)">
      <summary>
            Retrieves whether the image in the specified sub-cell index has been reversed or not.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image which to retrieve if it's reversed.</param>
      <returns>
            true if the image is reversed; otherwise, false.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>in order to be able to retrieve the correct value from this method, you should reverse the images inside the medical viewer using the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.ReverseImage" />.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetRotateImagePerspectiveAngle(System.Int32)">
      <summary>
            (Read only) Gets the rotation angle for the image in the specified sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">The zero-based index of the sub-cell that has the image 
            for which the rotation angle is being retrieved. If the cell contains only 1 image, set this parameter to 0. 
            Pass -2 to retrieve the rotation angle of the selected sub-cell.</param>
      <returns>
            The image rotation angle.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>In order to get the correct value from this function, 
            you should rotate the images in the medical viewer control using the 
            <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.RotateImagePerspective(System.Int32)" /> method.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Int32)">
      <summary>
            Changes the length of the selected annotation ruler according to 
            the new unit of measure.
            </summary>
      <medaddon>yes</medaddon>
      <param name="distance">The new length of the annotation ruler.</param>
      <param name="measurementUnit">The unit of measure.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell being calibrated. 
            Pass -1 
            to calibrate all the sub-cells; pass -2 to calibrate the active sub-cell.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To calibrate one axis at a time use use the overloaded method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)" /></description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.CalibrateRuler(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.Calibrate(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Int32)">
      <summary>
            Calibrates sub-cells based on information provided by the user. This allows the user to calibrate a sub-cell without using an annotation ruler.
            </summary>
      <medaddon>yes</medaddon>
      <param name="sourceDistance">The old length to be calibrated.</param>
      <param name="sourceMeasurementUnit">The unit of measure.</param>
      <param name="targetDistance">The new length to calibrate the old length to.</param>
      <param name="targetMeasurementUnit">The unit of measure.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell being calibrated. Pass -1 to calibrate all the sub-cells; pass -2 to calibrate the active sub-cell.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ImageViewerCells.html">Image Viewer Cells</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm3 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl3() As MedicalViewerForm3
            Return New MedicalViewerForm3()
        End Function

        ' This example calibrates the x-axis only for the frames of the first cell.

        Public Sub MedicalViewerCalibrateCellExample3()
            Dim myForm As MedicalViewerForm3 = GetMedicalControl3()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            medicalViewer.Cells(0).Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, MedicalViewerCalibrationAxis.XAxis)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm3 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm3()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

               // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                _medicalViewer.Cells.Add(cell);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm3 GetMedicalControl3()
        {
            return new MedicalViewerForm3();
        }


        // This example calibrates the x-axis only for the frames of the first cell.
        public void MedicalViewerCalibrateCellExample3()
        {
            MedicalViewerForm3 myForm = GetMedicalControl3();
            MedicalViewer medicalViewer = myForm.Viewer;

            medicalViewer.Cells[0].Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, MedicalViewerCalibrationAxis.XAxis);

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCalibrateCell3-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.Calibrate(System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Double,Leadtools.MedicalViewer.MedicalViewerMeasurementUnit,System.Int32,Leadtools.MedicalViewer.MedicalViewerCalibrationAxis)">
      <summary>
            Calibrates sub-cells along the specified axis based on information provided by the user. This allows the user to calibrate a cell without using an annotation ruler.
            </summary>
      <medaddon>yes</medaddon>
      <param name="sourceDistance">The old length to be calibrated.</param>
      <param name="sourceMeasurementUnit">The unit of measure.</param>
      <param name="targetDistance">The new length.</param>
      <param name="targetMeasurementUnit">The unit of measure.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell being calibrated. Pass -1 to calibrate all the sub-cells; pass -2 to calibrate the active sub-cell.</param>
      <param name="axis">The calibration axis.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm4 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControl4() As MedicalViewerForm4
            Return New MedicalViewerForm4()
        End Function

        ' This example calibrates the x-axis only of the first frame of the first cell.

        Public Sub MedicalViewerCalibrateCellExample4()
            Dim myForm As MedicalViewerForm4 = GetMedicalControl4()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            cell.Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, 0, MedicalViewerCalibrationAxis.XAxis)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerForm4 : Form
        {
            private MedicalViewer _medicalViewer;
            void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
            {
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            }

            public MedicalViewerForm4()
            {
                RasterCodecs _codecs = new RasterCodecs();
                RasterImage _image;

                this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

                // Create the medical viewer and adjust the size and the location.
                _medicalViewer = new MedicalViewer(1, 2);
                _medicalViewer.Location = new Point(0, 0);
                _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

                // Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
                _medicalViewer.Cells.Add(cell);

                // add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel);
                cell.AddAction(MedicalViewerActionType.Alpha);
                cell.AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                // Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
                _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

                // add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
                _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

                // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
                _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

                // adjust some properties of the cell and add some tags.
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
                _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
                _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
                _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
                _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


                Controls.Add(_medicalViewer);
                _medicalViewer.Dock = DockStyle.Fill;
            }
            public MedicalViewer Viewer
            {
                get { return _medicalViewer; }
            }
        }
        MedicalViewerForm4 GetMedicalControl4()
        {
            return new MedicalViewerForm4();
        }

        // This example calibrates the x-axis only of the first frame of the first cell.

        public void MedicalViewerCalibrateCellExample4()
        {
            MedicalViewerForm4 myForm = GetMedicalControl4();
            MedicalViewer medicalViewer = myForm.Viewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

            cell.Calibrate(1, MedicalViewerMeasurementUnit.Centimeters, 2, MedicalViewerMeasurementUnit.Centimeters, 0, MedicalViewerCalibrationAxis.XAxis);

            myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCalibrateCell4-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetNoImageText(System.Int32,System.String)">
      <summary>
            Set the text that will be displayed if the image is not loaded yet. This is used only with the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" /></summary>
      <param name="subCellIndex">A zero-based index of the sub-cell getting it's no-image-text retrieved.</param>
      <param name="text"> the text that will be displayed when the image is not loaded yet. </param>
      <remarks>
        <list type="bullet">
          <item>
            <description> This feature can only be used wit the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />.</description>
          </item>
        </list>
      </remarks>
      <example>
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetNoImageText(System.Int32)">
      <summary>
            Get the text that will be displayed if the image is not loaded yet. This is used only with the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />.
            </summary>
      <param name="subCellIndex">A zero-based index of the sub-cell getting it's no-image-text retrieved.</param>
      <returns>
            A string that contains the no-image-text.
            </returns>
      <remarks>
            This feature can only be used wit the low memory usage feature, please refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.EnableLowMemoryUsage(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerImageInformation[])" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetOffset(System.Int32)">
      <summary>
            Gets the current coordinates of the image.
            </summary>
      <param name="subCellIndex">Zero-based index of sub-cell that contains the image whose position will be retrieved.</param>
      <returns>
            A <see cref="T:Leadtools.MedicalViewer.Point2D" /> object representing the current coordinates of the image.
            </returns>
      <remarks>
        <list type="bullet">
          <item>
            <description>The points are relative to the center of the cell and the center of the image. This means that it will return {0, 0} if the image is positioned at the center of the screen.</description>
          </item>
          <item>
            <description>To retrieve the offset value of the selected sub-cell, either pass its sub-cell index or pass -2.</description>
          </item>
          <item>
            <description>To change the offset using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the offset action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            for an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetWindowLevelWidth(System.Int32)">
      <summary>
            Gets the window level width value for the image.
            </summary>
      <param name="subCellIndex">Zero-based index of sub-cell that contains the image whose window level width value will be retrieved.</param>
      <remarks>
            Sending this instance is a must, otherwise, the custom annotation creation will fail.
            
            <list type="bullet"><item><description>To retrieve the window level width value of the selected sub-cell, either pass its sub-cell index or pass -2.</description></item><item><description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.GetWindowLevelCenter(System.Int32)">
      <summary>
            Gets the window level center value for the image.
            </summary>
      <param name="subCellIndex">Zero-based index of sub-cell that contains the image whose window level center value will be retrieved</param>
      <remarks>
            Sending this instance is a must, otherwise, the custom annotation creation will fail.
            
            <list type="bullet"><item><description>To retrieve the window level center value of the selected sub-cell, either pass its sub-cell index or pass -2.</description></item><item><description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetWindowLevel(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the window level width and center values for the image.
            </summary>
      <param name="subCellIndex">A zero-based index of the sub-cell that contains the image that will have its window level changed.</param>
      <param name="width">A <see cref="T:System.Int32" /> value that represents the new window level width value.</param>
      <param name="center">A <see cref="T:System.Int32" /> value that represents the new window level center value.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the cell has multiple frames, the width and center values will be applied to all of them.</description>
          </item>
          <item>
            <description>To change the window level using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the window level action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMultiCell.SetOffset(System.Int32,System.Double,System.Double)">
      <summary>
            Translates the image position according to the provided X and Y values.
            </summary>
      <param name="subCellIndex">A zero-based index of the sub-cell that contains the image that will have its offset changed.</param>
      <param name="x">The x coordinates that represents the new position of the image.</param>
      <param name="y">The y coordinates that represents the new position of the image.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The points are relative to the center of the cell and the center of the image. This means that if you set the X and Y values to {0, 0}, the image will be displayed at the center of the cell.</description>
          </item>
          <item>
            <description>If the cell has multiple frames, the offset value will be applied to all of them.</description>
          </item>
          <item>
            <description>To change the offset using the mouse button, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the action to the Medical Viewer Cell. 
            Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the offset action with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerWindowLevelAndOffsetForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private windowLevelWidth As Integer
            Private windowLevelCenter As Integer
            Private offsetX As Double
            Private offsetY As Double


            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)
                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True
                AddHandler cell.CellMouseClick, AddressOf cell_ResetCellMouseClick

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                cell.ActiveSubCell = cell.PageCount \ 2

                windowLevelWidth = cell.GetWindowLevelWidth(cell.ActiveSubCell)
                windowLevelCenter = cell.GetWindowLevelCenter(cell.ActiveSubCell)
                Dim point As Point2D = cell.GetOffset(cell.ActiveSubCell)
                offsetX = point.X
                offsetY = point.Y


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
            Private Sub cell_ResetCellMouseClick(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
                If e.Button = MouseButtons.Middle Then
                    Dim cell As MedicalViewerMultiCell = (CType(sender, MedicalViewerMultiCell))

                    cell.SetWindowLevel(cell.ActiveSubCell, windowLevelWidth, windowLevelCenter)
                    cell.SetOffset(cell.ActiveSubCell, offsetX, offsetY)
                End If
            End Sub

        End Class
        Private Function GetMedicalViewerWindowLevelAndOffsetForm() As MedicalViewerWindowLevelAndOffsetForm
            MessageBox.Show("Left click to window level. " &amp; Constants.vbLf &amp; " right click to offset " &amp; Constants.vbLf &amp; " middle click to reset")
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerWindowLevelAndOffsetForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerWindowLevelAndOffsetExample()
            Dim myForm As MedicalViewerWindowLevelAndOffsetForm = GetMedicalViewerWindowLevelAndOffsetForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerWindowLevelAndOffsetForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         private int width;
         private int center;
         private double offsetX;
         private double offsetY;


         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerWindowLevelAndOffsetForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);
            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;
            cell.CellMouseClick += new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(cell_ResetCellMouseClick);

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            cell.ScaleType = MedicalViewerScaleType.Dynamic;

            cell.ActiveSubCell = cell.PageCount / 2;

            width = cell.GetWindowLevelWidth(cell.ActiveSubCell);
            center = cell.GetWindowLevelCenter(cell.ActiveSubCell);
            Point2D point = cell.GetOffset(cell.ActiveSubCell);
            offsetX = point.X;
            offsetY = point.Y;


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
         void cell_ResetCellMouseClick(object sender, MedicalViewerCellMouseEventArgs e)
         {
            if (e.Button == MouseButtons.Middle)
            {
               MedicalViewerMultiCell cell = ((MedicalViewerMultiCell)sender);
               cell.SetWindowLevel(cell.ActiveSubCell, width, center);
               cell.SetOffset(cell.ActiveSubCell, offsetX, offsetY);
            }
         }

      }
      MedicalViewerWindowLevelAndOffsetForm GetMedicalViewerWindowLevelAndOffsetForm()
      {
         MessageBox.Show("Left click to window level. \n right click to offset \n middle click to reset");
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerWindowLevelAndOffsetForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerWindowLevelAndOffsetExample()
      {
         MedicalViewerWindowLevelAndOffsetForm myForm = GetMedicalViewerWindowLevelAndOffsetForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.WindowLevelAndOffsetSample-->
      </example>
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewerMultiCell.ActiveSubCellChanged">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user clicks on a different sub-cell or when scrolling the cell scroll.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                _medicalViewer.Cells.Add(cell)



                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 2, 2)
                _medicalViewer.Cells.Add(cell1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell1.AddAction(MedicalViewerActionType.WindowLevel)
                cell1.AddAction(MedicalViewerActionType.Alpha)
                cell1.AddAction(MedicalViewerActionType.Offset)
                cell1.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      Public Sub MedicalViewerActiveSubCellChangedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer


         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged
         AddHandler cell1.ActiveSubCellChanged, AddressOf cell1_ActiveSubCellChanged
         myForm.ShowDialog()
      End Sub

      Private Sub cell1_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         medicalViewer_ActiveSubCellChanged(sender, e)
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim index As Integer
         If (e.CellIndex = 1) Then
            index = 0
         Else
            index = 1
         End If
         Dim theOtherCell As MedicalViewerMultiCell = CType(cell.ParentViewer.Cells(index), MedicalViewerMultiCell)


         Dim stackProperties As MedicalViewerStack = CType(theOtherCell.GetActionProperties(MedicalViewerActionType.Stack), MedicalViewerStack)

         stackProperties.ActiveSubCell = e.SubCellIndex Mod (theOtherCell.Rows * theOtherCell.Columns)
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties)
         stackProperties.Dispose()

      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            _medicalViewer.Cells.Add(cell);



            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 2, 2);
            _medicalViewer.Cells.Add(cell1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);
            cell1.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      public void MedicalViewerActiveSubCellChangedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;


         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged);
         cell1.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(cell1_ActiveSubCellChanged);
         myForm.ShowDialog();
      }

      void cell1_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         medicalViewer_ActiveSubCellChanged(sender, e);
      }

      void medicalViewer_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         int index = (e.CellIndex == 1) ? 0 : 1;
         MedicalViewerMultiCell theOtherCell = (MedicalViewerMultiCell)(cell.ParentViewer.Cells[index]);


         MedicalViewerStack stackProperties = (MedicalViewerStack)theOtherCell.GetActionProperties(MedicalViewerActionType.Stack);

         stackProperties.ActiveSubCell = e.SubCellIndex % (theOtherCell.Rows * theOtherCell.Columns);
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell;
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties);
         stackProperties.Dispose();

      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMultiCell.EnableExplodeMode">
      <summary>
            Gets or sets the value that indicates whether to enable the exploded mode for the user so the cell will enter the exploded mode if the user double-clicks on any of the visible sub-cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the enable the exploded mode; otherwise, false.</value>
      <remarks>
            The exploded mode is when the cell layout is divided into multiple sub-cell, and the user want to temporarily change the layout into 1 sub-cell only. This can be achieved by either using this property, or by simply double clicking any of the visible sub-cells.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMultiCell.Exploded">
      <summary>
            Gets or sets the value that indicates whether the cell is in the exploded mode or not.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the cell is in the exploded mode, otherwise it is false.</value>
      <remarks>
            The exploded mode is when the cell layout is divided into multiple sub-cells, and the user wants to temporarily change the layout to 1 sub-cell only. This can be achieved by either using this property, or by simply double clicking any of the visible sub-cells.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMultiCell.Rows">
      <summary>
            Gets or sets the value that indicates the number of sub-cell rows.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the number of sub-cell rows. The maximum allowed is 8.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMultiCell.Columns">
      <summary>
            Gets or sets the value that indicates the number of sub-cell columns.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the number of sub-cell columns. The maximum allowed is 8.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell"></see>.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell"></see> class.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.#ctor(Leadtools.MedicalViewer.MedicalViewerMPRPolygon)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell"></see> class with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="polygon"> The polygon which will be used as a source for generating the paraxial cut frames.
            </param>
      <remarks>
            You can change which line of the polygon to attach the paraxial cell to through <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.PolygonLineIndex" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.#ctor(Leadtools.MedicalViewer.MedicalViewerMPRPolygon,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell"></see> class with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="polygon"> The polygon which will be used as a source for generating the paraxial cut frames.
            </param>
      <param name="polygonLineIndex">A zero-based index of the polygon line where this paraxial cell will be attached to.</param>
      <remarks>
            You can change which line of the polygon to attach the paraxial cell to through <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.PolygonLineIndex" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.Polygon">
      <summary>
            (Read only) Gets the polygon that is used to generate the paraxial cut frames.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that is used to generated the paraxial cut frames.
            </value>
      <remarks>
            The paraxial cuts are images generated from the lines that are perpendicular to one of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> lines.
            <para>In order to be able to connect the paraxial cut cell to a polygon, pass it in the cell constructor, then change which line of the polygon to attach the paraxial cell to through <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.PolygonLineIndex" />.</para><para>The user cannot draw the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> to:</para><list type="bullet"><item><description> Derivative Cell. </description></item><item><description> Generated MPR Cell. </description></item><item><description> Paraxial cut cell itself.</description></item><item><description>A cell with less than 3 frames.</description></item></list></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines">
      <summary>
            Gets or sets the value that determines whether to show the paraxial lines representation over the generator polygon <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> and the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>true to show the paraxial line representation, false otherwise.</value>
      <remarks>
            The paraxial cuts are images generated from the lines that are perpendicular to one of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> lines.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ActiveLineColor">
      <summary>
            Gets or sets the color of the active paraxial line.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:System.Drawing.Color" /> that that represents the color of the active paraxial line.
            </value>
      <remarks>
            The active paraxial line is the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ActiveSubCell" /> value of this paraxial cell.
            <para>To show or hide the paraxial line representation all together, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines" />.</para></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.LinesColor">
      <summary>
            Gets or sets the color of the paraxial line.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:System.Drawing.Color" /> that that represents the color of the paraxial line.
            </value>
      <remarks>
            To show or hide the paraxial line representation altogether, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ParaxialDistance">
      <summary>
            Gets or sets the distance between each paraxial line and the next.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            value that determines the distance between each paraxial line and the next.
            </value>
      <remarks>
            To show or hide the paraxial line representation altogether, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ParaxialLength">
      <summary>
            Gets or sets the length of the paraxial lines.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            Value that determines the length of the paraxial lines.
            </value>
      <remarks>
            To show or hide the paraxial line representation altogether, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines" />.
            <para>The user can manually change the length of the paraxial line by clicking and dragging on the paraxial lines handles which appears on edge of each paraxial line.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.PolygonLineIndex">
      <summary>
            Gets or sets the index of the polygon line that will be used to calculate the paraxial lines position.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            A zero-based index of the polygon line that will be used to calculate the paraxial lines position. 
            </value>
      <remarks>
            To show or hide the paraxial line representation, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.ShowLines" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell.EfficientMemoryEnabled">
      <summary>
            Enables the efficient memory usage for the paraxial cut cell.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
            true to enable the efficient memory usage for the paraxial cut cell.
            </value>
      <remarks>
            When activating efficient memory usage, the engine will only load the images that is currently displayed by the cell layout. If the user scrolls down or up, the engine will request the new images that correspond to the new location and free the images that are not visible anymore.
            <para>After you enable efficient memory you cannot disable it.</para></remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs">
      <summary>
            The <b>MedicalViewerMPRPolygonClickedEventsArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonClicked" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            This class is sent by the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonClicked" />.
            <para>This event is fired when the user clicks on the polygon handles or the polygon body.</para><para>The MPR polygon is used to render a panoramic image to be able to show a greater field of view.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerMPRPolygon,System.Int32,Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            The <b>MedicalViewerMPRPolygonClickedEventsArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonCreated" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="polygon">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that represents the clicked MPR polygon.</param>
      <param name="index"> a zero-based index of the clicked polygon line or polygon handle. To determine if this index refer to polygon line or polygon handle, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Type" />.</param>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest" /> enumeration that determines which part of the polygon has been clicked.</param>
      <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values indicating which mouse button was used to fire this event.</param>
      <param name="clicks">The number of times a mouse button was pressed.</param>
      <param name="x">The x-coordinate of the mouse click, in pixels.</param>
      <param name="y">The y-coordinate of the mouse click, in pixels.</param>
      <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Index">
      <summary>
            (Read only) Gets the index of the clicked polygon line or polygon handle.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            A zero-based index of the clicked polygon line or polygon handle. To determine if this index refer to polygon line or polygon handle, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Type" />.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Polygon">
      <summary>
            (Read only) Gets the MPR polygon that the user just clicked.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that represents the newly created polygon that the user clicked on.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Type">
      <summary>
            (Read only) Gets the enumeration that determines which part of the polygon has been clicked. (the body or the handle).
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest" /> enumeration that determines which part of the polygon has been clicked. (the body or the handle).
            </value>
      <remarks>
            To determine whether the index of the polygon part that has been clicked it is a handle or line, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonClickedEventsArgs.Index" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties">
      <summary>
            Represents the class that is used to create the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" />, and adjust to reference line properties of this cell.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            To show the reference line of this cell on the other cells correctly, the following properties will need to set by retrieving their values from the DICOM Data Set:
            <list type="bullet"><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FrameOfReferenceUID">FrameOfReferenceUID</see></description></item><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation">ImageOrientation</see></description></item><item><description><see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)">SetImagePosition</see> to set the image position for all the frames in the cell.</description></item><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.PixelSpacing">PixelSpacing</see></description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerLocalizer : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)


                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                cell = New MedicalViewerMultiCell()
                Dim ds As DicomDataSet = New DicomDataSet()
                ds.Load("\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" &amp; "\Miller James-CT Head full Study\0023\20345460", DicomDataSetLoadFlags.None)
                Dim patientElement As DicomElement = Nothing

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImagePositionPatient, True)

                Dim doubleArray As Double() = ds.GetDoubleValue(patientElement, 0, 3)

                cell.SetImagePosition(0, Point3D.FromDoubleArray(doubleArray), True)

                patientElement = ds.FindFirstElement(Nothing, DicomTag.FrameOfReferenceUID, True)

                Dim referenceUID As String = ds.GetConvertValue(patientElement)

                cell.FrameOfReferenceUID = referenceUID

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImageOrientationPatient, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 6)

                cell.ImageOrientation = New Single() {CSng(doubleArray(0)), CSng(doubleArray(1)), CSng(doubleArray(2)), CSng(doubleArray(3)), CSng(doubleArray(4)), CSng(doubleArray(5))}

                patientElement = ds.FindFirstElement(Nothing, DicomTag.PixelSpacing, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 2)
                cell.PixelSpacing = New Point2D(CSng(doubleArray(0)), CSng(doubleArray(1)))

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.LightBlue
                cell.ShowCellBoundaries = True
                cell.Image = ds.GetImage(Nothing, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.AutoApplyVoiLut Or DicomGetImageFlags.AutoApplyModalityLut Or DicomGetImageFlags.AllowRangeExpansion)
                _medicalViewer.Cells.Add(cell)
                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerLocalizerControl() As MedicalViewerLocalizer
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerLocalizer(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerLocalizerExample()
            Dim myForm As MedicalViewerLocalizer = GetMedicalViewerLocalizerControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerLocalizer : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerLocalizer(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            cell = new MedicalViewerMultiCell();
            DicomDataSet ds = new DicomDataSet();
            ds.Load(@"\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" + "\\Miller James-CT Head full Study\\0023\\20345460", DicomDataSetLoadFlags.None);
            DicomElement patientElement = null;

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.ImagePositionPatient,
                                                 true);

            double[] doubleArray = ds.GetDoubleValue(patientElement, 0, 3);

            cell.SetImagePosition(0, Point3D.FromDoubleArray(doubleArray), true);

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.FrameOfReferenceUID,
                                                true);

            string referenceUID = ds.GetConvertValue(patientElement);

            cell.FrameOfReferenceUID = referenceUID;

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.ImageOrientationPatient,
                                                true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 6);

            cell.ImageOrientation = new float[] {(float)doubleArray[0], (float)doubleArray[1], (float)doubleArray[2], (float)doubleArray[3], (float)doubleArray[4], (float)doubleArray[5]};

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.PixelSpacing,
                                                 true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 2);
            cell.PixelSpacing = new Point2D((float)doubleArray[0], (float)doubleArray[1]);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.LightBlue;
            cell.ShowCellBoundaries = true;
            cell.Image = ds.GetImage(null, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.AutoApplyVoiLut | DicomGetImageFlags.AutoApplyModalityLut | DicomGetImageFlags.AllowRangeExpansion);
            _medicalViewer.Cells.Add(cell);
            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerLocalizer GetMedicalViewerLocalizerControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerLocalizer(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerLocalizerExample()
      {
         MedicalViewerLocalizer myForm = GetMedicalViewerLocalizerControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.ReferenceLineExample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.#ctor">
      <summary>
            Initializes a new MedicalViewerReferenceLineProperties class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1" /> assigned to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1" /> assigned to the cell.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.DoubleCutLines">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1" /> assigned to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1" /> assigned to the cell.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.ShowFirstAndLast">
      <summary>
            Gets or sets a value that indicates whether to display the potential first and last reference lines of this cell on other cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            true to display the potential first and last reference line; otherwise, it is false.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.Enabled">
      <summary>
            Gets or sets the value that indicates whether to display the reference line of this cell on other cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            True to display the reference line, otherwise it is false.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.Color">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Color" /> that represents the color of the reference line.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:System.Drawing.Color" /> that represents the color of the reference line.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite">
      <summary>
            Represents the class that contains the properties of the annotation hilite action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>To set the properties of the annotation hilite action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example sets the properties for the hilite annotation action.</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationHiliteExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim hilite As MedicalViewerAnnotationHilite = New MedicalViewerAnnotationHilite()
         hilite.AnnotationColor = Color.FromArgb(0, 0, 255)
         hilite.Flags = MedicalViewerAnnotationFlags.AllObjects
         hilite.CreateFromCenter = True
         cell.SetActionProperties(MedicalViewerActionType.AnnotationHilite, hilite)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationHiliteExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationHilite hilite = new MedicalViewerAnnotationHilite();
         hilite.AnnotationColor = Color.FromArgb(0, 0, 255);
         hilite.Flags = MedicalViewerAnnotationFlags.AllObjects;
         hilite.CreateFromCenter = true;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationHilite, hilite);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationHilite1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite"></see> class, specifying how to create it.
            </summary>
      <medaddon>yes</medaddon>
      <param name="createFromCenter">true to create the hilite from the center; false to create it from the edge.</param>
      <example>
        <para>Set the properties for the hilite annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationHiliteExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim hilite As MedicalViewerAnnotationHilite = New MedicalViewerAnnotationHilite(True)
         hilite.AnnotationColor = Color.FromArgb(0, 128, 0)
         hilite.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationHilite, hilite)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationHiliteExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationHilite hilite = new MedicalViewerAnnotationHilite(true);
         hilite.AnnotationColor = Color.FromArgb(0, 128, 0);
         hilite.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationHilite, hilite);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationHilite2-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite.CreateFromCenter">
      <summary>
            Indicates whether to create the object from the center or from the edge.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to create the object from the center, false to create it from the edge.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon">
      <summary>
        <b>MedicalViewerMPRPolygon</b> class represents the MPR polygon that is used to generate a panoramic image as well as paraxial cut cells.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            To create a panoramic image do the following:
            <list type="number"><item><description>Register the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PanoramicDataRequested" />, and provide the data through the event handler.</description></item><item><description>Create a <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> to hold the panoramic image, and assign it to the polygon through the constructor.</description></item></list><para>The user can create any number of MPR polygon on the cell.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> class.
            </summary>
      <isnew>3/15/2011</isnew>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.#ctor(Leadtools.MedicalViewer.MedicalViewerCell)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> class with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="parent">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the parent cell.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Recalculate(System.Int32)">
      <summary>
            Recalculates the line position and the paraxials cut line positions.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="lineIndex"> a zero-based index of the line that the user wants to recalculate its information.
            </param>
      <remarks>
            This method is used when the user changes the polygon points programmatically through the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Points" />.
            <para>The user does not need to call this method if he moves or changes the polygon using the mouse.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Recalculate">
      <summary>
            Recalculates the line position and the paraxial cut-line positions for the whole polygon.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            This method is used when the user changes the polygon points programmatically through the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Points" />.
            <para>The user does not need to call this method if he moves or changes the polygon using the mouse.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Parent">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the parent cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the parent cell.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.ParaxialCuts">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.RasterCollection`1" /> assigned to the polygon.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.RasterCollection`1" /> assigned to the polygon.</value>
      <remarks>
            The polygon can hold as many paraxial cuts as needed. Each paraxial cut can be assigned to polygon line, and multiple paraxial cuts can be assigned to the same polygon line.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Points">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPointCollection`1" /> that represents the polygon points.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerPointCollection`1" /> that represents the polygon points.
            </value>
      <remarks>
            If the user adjust any point programmatically, then the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Recalculate(System.Int32)" /> must be called to adjust the polygon and the panromic image based on the new changes.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.Color">
      <summary>
            Gets or sets the color of the polygon.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:System.Drawing.Color" /> that represents the color of the polygon.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygon.PanoramicRepresentation">
      <summary>
            Gets or sets the cell that is used to display the panoramic image constructed using this polygon.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" /> that is used to display the panoramic image constructed using this polygon.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerStack">
      <summary>
            Represents the class that contains the properties of the stack action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the stack action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" />  method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
        <list type="bullet">
          <item>
            <description>Click and hold the mouse to start the effect. When the assigned mouse button is released the action ends. It is better to assign the mouse wheel to the stack action, so if the user wheels up or down the stack action occurs. </description>
          </item>
          <item>
            <description>Dragging the mouse down shows the next frame. </description>
          </item>
          <item>
            <description>Dragging the mouse up shows the previous frame. </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>The following examples makes the fifth frame of the image the active sub-cell.</para>
        <code lang="VB">      Public Sub MedicalViewerStackExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Rows = 2
         cell.Columns = 2

         Dim stack As MedicalViewerStack = CType(cell.GetActionProperties(MedicalViewerActionType.Stack, 0), MedicalViewerStack)
         stack.ActiveSubCell = 3
         stack.ScrollValue = 1
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0)
         stack.Dispose()
         cell.Selected = True
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerStackExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Rows = 2;
         cell.Columns = 2;

         MedicalViewerStack stack = (MedicalViewerStack)cell.GetActionProperties(MedicalViewerActionType.Stack, 0);
         stack.ActiveSubCell = 3;
         stack.ScrollValue = 1;
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0);
         stack.Dispose();
         cell.Selected = true;
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerStack1-->
      </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCommonActions">
      <summary>
            Represents the base class used for the basic actions.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            This class is a base class for the following actions:
            <list type="bullet"><item><description>WindowLevel</description></item><item><description>Scale</description></item><item><description>Offset</description></item><item><description>Stack</description></item><item><description>Alpha</description></item></list></remarks>
      <example>
        <para>This examples changes the window level properties and apply it on the first image.</para>
        <code lang="VB">        Private Class MedicalViewerForm1 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)


                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl1() As MedicalViewerForm1
            Return New MedicalViewerForm1()
        End Function


        Public Sub MedicalViewerWindowLevelExample1()
            Dim myForm As MedicalViewerForm1 = GetMedicalControl1()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim windowLevel As MedicalViewerWindowLevel = New MedicalViewerWindowLevel()
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            windowLevel.LookupTableType = MedicalViewerLookupTableType.Exponential
            windowLevel.StartColor = Color.FromArgb(0, 0, 0)
            windowLevel.EndColor = Color.FromArgb(255, 255, 0)
            windowLevel.Sensitivity = 500
            windowLevel.Width = 100
            windowLevel.Center = 200
            windowLevel.ActionCursor = System.Windows.Forms.Cursors.VSplit
            windowLevel.CircularMouseMove = False

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0)
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm1 : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm1()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm1 GetMedicalControl1()
      {
         return new MedicalViewerForm1();
      }


      public void MedicalViewerWindowLevelExample1()
      {
         MedicalViewerForm1 myForm = GetMedicalControl1();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerWindowLevel windowLevel = new MedicalViewerWindowLevel();
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         windowLevel.LookupTableType = MedicalViewerLookupTableType.Exponential;
         windowLevel.StartColor = Color.FromArgb(0, 0, 0);
         windowLevel.EndColor = Color.FromArgb(255, 255, 0);
         windowLevel.Sensitivity = 500;
         windowLevel.Width = 100;
         windowLevel.Center = 200;
         windowLevel.ActionCursor = System.Windows.Forms.Cursors.VSplit;
         windowLevel.CircularMouseMove = false;

         cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0);
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevel1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCommonActions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCommonActions.#ctor(System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions"></see> class with specified mouse sensitivity, mouse reset, and cursor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="sensitivity">Integer value that represents the mouse sensitivity, in percent. Default is 100.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false. A value of 100 indicates that the amount of change in the action is equal to the amount of movement of the mouse. For example, if the mouse is moved 1 pixel, the action changes by 1 unit. A value of 50 indicates that the amount of change in the action is 50 percent of the amount of mouse movement. For example, if the mouse is moved 2 pixels, the action only changes by one unit.</param>
      <param name="cursor">Default cursor for the action.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCommonActions.Dispose">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions"></see>.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCommonActions.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions"></see>.
            </summary>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCommonActions.ActionCursor">
      <summary>
            Gets or sets the cursor that is displayed when applying the action.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the action is being applied.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCommonActions.Sensitivity">
      <summary>
            Gets or sets the value that indicates the percentage value of the mouse sensitivity.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the percentage value of the mouse sensitivity.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCommonActions.CircularMouseMove">
      <summary>
            Indicates whether to reset the mouse when it reaches one of the screen edges.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to reset the mouse; otherwise, false.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the mouse is reset, when it is dragged to one edge of the screen, it will disappear from that edge and reappear on the opposite edge of the screen.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStack.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerStack"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <example>
        <para>The following example makes the fifth frame of the image the active sub-cell.</para>
        <code lang="VB">      Public Sub MedicalViewerStackExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Rows = 2
         cell.Columns = 2

         Dim stack As MedicalViewerStack = CType(cell.GetActionProperties(MedicalViewerActionType.Stack, 0), MedicalViewerStack)
         stack.ActiveSubCell = 3
         stack.ScrollValue = 1
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0)
         stack.Dispose()
         cell.Selected = True
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerStackExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Rows = 2;
         cell.Columns = 2;

         MedicalViewerStack stack = (MedicalViewerStack)cell.GetActionProperties(MedicalViewerActionType.Stack, 0);
         stack.ActiveSubCell = 3;
         stack.ScrollValue = 1;
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0);
         stack.Dispose();
         cell.Selected = true;
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerStack2-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStack.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerStack"></see> class with specified scroll position and active sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scrollValue">The position of the <b>cell</b> scroll.</param>
      <param name="activeSubCell">The index of the active sub-cell.</param>
      <noremarks />
      <example>
        <para>The following example makes the fifth frame of the image the active sub-cell.</para>
        <code lang="VB">      Public Sub MedicalViewerStackExample3()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Rows = 2
         cell.Columns = 2

         Dim stack As MedicalViewerStack = CType(cell.GetActionProperties(MedicalViewerActionType.Stack, 0), MedicalViewerStack)
         stack.ActiveSubCell = 3
         stack.ScrollValue = 1
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0)
         stack.Dispose()
         cell.Selected = True
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerStackExample3()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Rows = 2;
         cell.Columns = 2;

         MedicalViewerStack stack = (MedicalViewerStack)cell.GetActionProperties(MedicalViewerActionType.Stack, 0);
         stack.ActiveSubCell = 3;
         stack.ScrollValue = 1;
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0);
         stack.Dispose();
         cell.Selected = true;
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerStack3-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStack.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerStack"></see> class, with specified scroll position, active sub-cell, mouse sensitivity, mouse reset, and cursor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scrollValue">The position of the <b>cell</b> scroll.</param>
      <param name="activeSubCell">The index of the active sub-cell.</param>
      <param name="sensitivity">Integer value that represents the mouse sensitivity, in percent. Default is 100.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false.</param>
      <param name="cursor">Default cursor for the action.</param>
      <noremarks />
      <example>
        <para>The following example makes the fifth frame of the image the active sub-cell.</para>
        <code lang="VB">      Public Sub MedicalViewerStackExample4()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Rows = 2
         cell.Columns = 2

         Dim stack As MedicalViewerStack = CType(cell.GetActionProperties(MedicalViewerActionType.Stack, 0), MedicalViewerStack)
         stack.ActiveSubCell = 3
         stack.ScrollValue = 1
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0)
         stack.Dispose()
         cell.Selected = True
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerStackExample4()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Rows = 2;
         cell.Columns = 2;

         MedicalViewerStack stack = (MedicalViewerStack)cell.GetActionProperties(MedicalViewerActionType.Stack, 0);
         stack.ActiveSubCell = 3;
         stack.ScrollValue = 1;
         cell.SetActionProperties(MedicalViewerActionType.Stack, stack, 0);
         stack.Dispose();
         cell.Selected = true;
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerStack4-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerStack.ScrollValue">
      <summary>
            Gets or sets the value that indicates the position of the <b>cell</b> scroll.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the position of the <b>cell</b> scroll.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerStack.#ctor" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerStack.ActiveSubCell">
      <summary>
            Gets or sets the value that indicates the index of the active sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the active sub-cell. If there is only one sub-cell then this property is 0.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerStack.#ctor" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerLayoutPosition">
      <summary>
            Represents a layout position of a cell when the MedicalViewer is created in layout mode.
            </summary>
      <remarks>
            The position is represented by four dimensionless floating point values, in the range
            0.0 to 1.0.  The Lower left hand position represents the (0.0,0.0).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.SaveLayout(System.IO.Stream)" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerLayoutPosition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutPosition" /> class.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerLayoutPosition.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutPosition" /> class.
            </summary>
      <param name="leftTop">The left top position.</param>
      <param name="rightBottom">The right bottom position.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerLayoutPosition.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutPosition" /> class.
            </summary>
      <param name="leftTopX">The left top X position.</param>
      <param name="leftTopY">The left top Y position.</param>
      <param name="rightBottomX">The right bottom X position.</param>
      <param name="rightBottomY">The right bottom Y position.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.SaveLayout(System.IO.Stream)" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutPosition.LeftTop">
      <summary>
            Gets or sets the left top position.
            </summary>
      <value>The left top position.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutPosition.RightBottom">
      <summary>
            Gets or sets the right bottom position.
            </summary>
      <value>The right bottom position.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1">
      <summary>
            Represents a generic collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> objects.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The Generic <b>MedicalViewerCellCollection</b> class provides a generic collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerCellCollection</keywords>
      <example>
        <para>This example freezes the selected cells.</para>
        <code lang="VB">      Public Sub MedicalViewerCellCollectionExample()
         Dim index As Integer
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         medicalViewer.Cells.SelectAll(False)
         For index = 0 To medicalViewer.Cells.Count - 1
            If (index Mod 2) = 0 Then
               medicalViewer.Cells(index).Selected = True
            End If
         Next index
         medicalViewer.Cells.FreezeSelected(True)
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerCellCollectionExample()
      {
         int index;
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         medicalViewer.Cells.SelectAll(false);
         for (index = 0; index &lt; medicalViewer.Cells.Count; index++)
            if ((index % 2) == 0)
               medicalViewer.Cells[index].Selected = true;
         medicalViewer.Cells.FreezeSelected(true);
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerCellCollection-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.Remove(`0)">
      <summary>
            Removes the specified cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">Cell to remove.</param>
      <returns>true if the element was removed successfully; otherwise, false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the cell from the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.SelectAll(System.Boolean)">
      <summary>
            Selects or un-selects all of the cells in the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> control.
            </summary>
      <medaddon>yes</medaddon>
      <param name="select">true to select all cells, false to un-select all cells.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.InvertSelection">
      <summary>
            Inverts (if a cell is selected make it unselected and vice versa) the selection of the cell in the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> control.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>This example freezes the non selected cells.</para>
        <code lang="VB">      Public Sub MedicalViewerCellCollectionInvertSelectionExample()
         Dim index As Integer
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         medicalViewer.Cells.FreezeAll(False)
         For index = 0 To medicalViewer.Cells.Count - 1
            If (index Mod 2) = 0 Then
               medicalViewer.Cells(index).Selected = True
            End If
         Next index

         medicalViewer.Cells.InvertSelection()
         medicalViewer.Cells.FreezeSelected(True)
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerCellCollectionInvertSelectionExample()
      {
         int index;
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         medicalViewer.Cells.FreezeAll(false);
         for (index = 0; index &lt; medicalViewer.Cells.Count; index++)
            if ((index % 2) == 0)
               medicalViewer.Cells[index].Selected = true;

         medicalViewer.Cells.InvertSelection();
         medicalViewer.Cells.FreezeSelected(true);
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerCellCollectionInvertSelection-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.FreezeAll(System.Boolean)">
      <summary>
             Freezes or un-freezes all of the cells in the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> control.
             </summary>
      <medaddon>yes</medaddon>
      <param name="freeze">true to freeze all cells, false to unfreeze all cells.</param>
      <remarks>
        <list>
          <item>
            <description>Freezing a cell means that no actions using the mouse or the keyboard can be performed on the cell. Cell properties can still be changed.</description>
          </item>
          <item>
            <description>You can select or un-select a frozen cell.</description>
          </item>
          <item>
            <description>Use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Frozen" /> property to freeze a single cell.</description>
          </item>
        </list>
      </remarks>
      <example>
             For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.Reposition(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Repositions the cell by removing it and inserting it into another position in the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> control.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">Index of the cell to be repositioned.</param>
      <param name="targetCellIndex">The zero-based index that represents the target position for the cell.</param>
      <param name="swap">true to swap the cells with the indexes cellIndex, targetCellIndex; false to insert the cell with index of cellIndex into targetCellIndex.</param>
      <example>
        <para>This example swaps the first and the second cell.</para>
        <code lang="VB">      Public Sub MedicalViewerCellCollectionRepositionCellsExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         medicalViewer.Cells.Reposition(0, 1, True)

         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerCellCollectionRepositionCellsExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         medicalViewer.Cells.Reposition(0, 1, true);

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerCellCollectionRepositionCells-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.FreezeSelected(System.Boolean)">
      <summary>
            Freezes or un-freezes the selected cells in the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> control.
            </summary>
      <medaddon>yes</medaddon>
      <param name="freeze">true to freeze the selected cells, false to un-freeze the selected cells.</param>
      <remarks>
        <list>
          <item>
            <description>Freezing a cell means that no actions using the mouse or the keyboard can be performed on the cell. Cell properties can still be changed.</description>
          </item>
          <item>
            <description>You can select or un-select a frozen cell.</description>
          </item>
          <item>
            <description>Use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Frozen" /> property to freeze a single cell.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.InvertSelection" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.Clear">
      <summary>
            Overridden. Removes all items from the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" />.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemAdded</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemRemoved</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs">
      <summary>
            The MedicalViewerChangingWindowLevelEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ChangingWindowLevel" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm
         Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As New MedicalViewerMultiCell(_image, True, 1, 1)

            ' add window level action that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)

            _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub

         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' When the user uses the window level tool, this example displays the previous and new window level values.

      Public Sub MedicalViewerAnnotationCreatedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.ChangingWindowLevel, AddressOf medicalViewer_ChangingWindowLevel
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ChangingWindowLevel(ByVal sender As Object, ByVal e As Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs)
         Dim msg As String = String.Format(Constants.vbLf &amp; "Sub Cell Index: {0}" &amp; "Previous Window Center: {1}" &amp; Constants.vbLf &amp; "Previous Window Width: {2}" &amp; Constants.vbLf &amp; "New Window Center: {3}" &amp; Constants.vbLf &amp; "New Window Width{4}", e.SubCellIndex, e.OldCenter, e.OldWidth, e.Center, e.Width)
         Console.WriteLine(msg)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add window level action that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // When the user uses the window level tool, this example displays the previous and new window level values.

      public void MedicalViewerAnnotationCreatedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.ChangingWindowLevel += new EventHandler&lt;Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs&gt;(medicalViewer_ChangingWindowLevel);
         myForm.ShowDialog();
      }

      void medicalViewer_ChangingWindowLevel(object sender, Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs e)
      {
         string msg = string.Format("\nSub Cell Index: {0}\nPrevious Window Center: {1}\nPrevious Window Width: {2}\nNew Window Center: {3}\nNew Window Width{4}",
            e.SubCellIndex,
            e.OldCenter,
            e.OldWidth,
            e.Center,
            e.Width);
         Console.WriteLine(msg);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerChangingWindowLevelEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="subCellIndex">a Zero-based index of the sub-cell that contains the image which to be affected by the window level action.</param>
      <param name="width">The new window width.</param>
      <param name="oldWidth">The previous window width.</param>
      <param name="center">The new window center.</param>
      <param name="oldCenter">The previous window width</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of sub-cell that contains the image which to be affected by the window level action.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the sub-cell that contains the image which to be affected by the window level action.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.Center">
      <summary>
            (Read only) Gets the value that indicates the new window center.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the new window center. This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.OldCenter">
      <summary>
            (Read only) Gets the value that indicates the previous window center.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the previous window center. This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.OldWidth">
      <summary>
            (Read only) Gets the value that indicates the previous window width.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the previous window width. This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs.Width">
      <summary>
            (Read only) Gets the value that indicates the new window width.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the new window width. This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerChangingWindowLevelEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs">
      <summary>
            The MedicalViewerCellMouseEventArgs class provides data for various mouse events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseMove" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseUp" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseDown" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseClick" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CellMouseDoubleClick" /></description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)


            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      Public Sub MedicalViewerCellMouseExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.CellMouseUp, AddressOf medicalViewer_CellMouseUp

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_CellMouseUp(ByVal sender As Object, ByVal e As MedicalViewerCellMouseEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim flipCommand As FlipCommand
         Select Case e.Button
            Case MouseButtons.Left
               flipCommand = New FlipCommand()
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.FlipAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Middle
               Dim rotateCommand As RotateCommand = New RotateCommand(900, RotateCommandFlags.Bicubic, New RasterColor(0, 0, 0))
               cell.Image.Page = e.SubCellIndex + 1
               rotateCommand.Run(cell.Image)
               Dim angle As Integer = cell.GetRotateImagePerspectiveAngle(0)
               cell.RotateAnnotationContainer(angle, e.SubCellIndex)
               cell.Invalidate()
            Case MouseButtons.Right
               flipCommand = New FlipCommand(True)
               cell.Image.Page = e.SubCellIndex + 1
               flipCommand.Run(cell.Image)
               cell.ReverseAnnotationContainer(e.SubCellIndex)
               cell.Invalidate()
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);


            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.LeftCenter, MedicalViewerTagType.UserData, "Left");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.TopCenter, MedicalViewerTagType.UserData, "Top");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.RightCenter, MedicalViewerTagType.UserData, "Right");
            _medicalViewer.Cells[0].SetTag(0, MedicalViewerTagAlignment.BottomCenter, MedicalViewerTagType.UserData, "Bottom");

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will flip the image along with the annotation container if the user click on the image using the left mouse button, and will reservse on the right mouse button, and will rotate on the middle mouse button.

      public void MedicalViewerCellMouseExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.CellMouseUp +=new EventHandler&lt;MedicalViewerCellMouseEventArgs&gt;(medicalViewer_CellMouseUp);

         myForm.ShowDialog();
      }

      void medicalViewer_CellMouseUp(object sender, MedicalViewerCellMouseEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         FlipCommand flipCommand;
         switch (e.Button)
         {
            case MouseButtons.Left:
               flipCommand = new FlipCommand();
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.FlipAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.FlipLabels();
               break;
            case MouseButtons.Middle:
               RotateCommand rotateCommand = new RotateCommand(9000, RotateCommandFlags.Bicubic, new RasterColor(0, 0, 0));
               cell.Image.Page = e.SubCellIndex + 1;
               rotateCommand.Run(cell.Image);
               int angle = cell.GetRotateImagePerspectiveAngle(0);
               cell.RotateAnnotationContainer(90, e.SubCellIndex);
               cell.RotateLabels(90);
               cell.Invalidate();
               break;
            case MouseButtons.Right:
               flipCommand = new FlipCommand(true);
               cell.Image.Page = e.SubCellIndex + 1;
               flipCommand.Run(cell.Image);
               cell.ReverseAnnotationContainer(e.SubCellIndex);
               cell.Invalidate();
               cell.ReverseLabels();
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCellMouseEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The zero-based index of the cell that received the mouse event.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that received the mouse event.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the painting area of the cell or sub-cell.</param>
      <param name="imageRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the image rectangle of the cell or sub-cell.</param>
      <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values indicating which mouse button was used to fire this event. </param>
      <param name="clicks">The number of times a mouse button was pressed.</param>
      <param name="x">The x-coordinate of the mouse click, in pixels.</param>
      <param name="y">The y-coordinate of the mouse click, in pixels.</param>
      <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that received the mouse event.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell that received the mouse event.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that received the mouse event.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the sub-cell that received the mouse event.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs.Rectangle">
      <summary>
            (Read only) Gets the rectangle that represents the painting area of the cell or sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The rectangle that represents the painting area of the cell or sub-cell. This rectangle does not include the border.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs.ImageRectangle">
      <summary>
            (Read only) Gets the rectangle that represents the image rectangle of the cell or sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The rectangle that represents the image rectangle of the cell or sub-cell.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellMouseEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs">
      <summary>
            The MedicalViewerAnnotationClickedEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationClicked" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This example will convert the rectangle, ellipse or hilite annotation into region once the user clicks on them.

      Public Sub MedicalViewerAnnotationClickedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         AddHandler cell.AnnotationClicked, AddressOf medicalViewer_AnnotationClicked
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnnotationClicked(ByVal sender As Object, ByVal e As MedicalViewerAnnotationClickedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim attribute As MedicalViewerAnnotationAttributes = cell.GetSelectedAnnotationAttributes(e.SubCellIndex)
         Select Case attribute.Type
            Case MedicalViewerActionType.AnnotationRectangle, MedicalViewerActionType.AnnotationEllipse, MedicalViewerActionType.AnnotationHilite
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, True)


         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
            cell.AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This example will convert the rectangle, ellipse or hilite annotation into region once the user clicks on them.

      public void MedicalViewerAnnotationClickedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.AnnotationClicked += new EventHandler&lt;MedicalViewerAnnotationClickedEventArgs&gt;(medicalViewer_AnnotationClicked);
         myForm.ShowDialog();
      }

      void medicalViewer_AnnotationClicked(object sender, MedicalViewerAnnotationClickedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         MedicalViewerAnnotationAttributes attribute = cell.GetSelectedAnnotationAttributes(e.SubCellIndex);
         switch (attribute.Type)
         {
            case MedicalViewerActionType.AnnotationRectangle:
            case MedicalViewerActionType.AnnotationEllipse:
            case MedicalViewerActionType.AnnotationHilite:
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, true);
               break;


         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationClickedEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerMouseButtons)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that that has had its annotation clicked.</param>
      <param name="subCellIndex">The index of the sub-cell that has had its annotation clicked.</param>
      <param name="x">The pointer X position.</param>
      <param name="y">The pointer Y position.</param>
      <param name="mouseButton">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons" /> value that represents 
            the button that was used to click on the annotation object.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that has the annotation that was clicked.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell that has the annotation that was clicked.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that has the annotation that was clicked.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the sub-cell that has the annotation that was clicked.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.X">
      <summary>
            (Read only) Gets the value that indicates the X position for the pointer.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the X position for the pointer.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.Y">
      <summary>
            (Read only) Gets the value that indicates the Y position for the pointer.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the Y position for the pointer.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs.Button">
      <summary>
            (Read only) Gets an enumerated value that indicates which Mouse button was used to click on the annotation object.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons" /> value that represents the button that was used to click on the annotation object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationClickedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool">
      <summary>
            Represents the class that contains the properties of the nudge tool.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.NudgeTool)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl() As MedicalViewerForm
            Return New MedicalViewerForm()
        End Function

        ' This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

        Public Sub MedicalViewerNudgeToolExample1()
            Dim myForm As MedicalViewerForm = GetMedicalControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim nudgeProperties As MedicalViewerNudgeTool = CType(cell.GetActionProperties(MedicalViewerActionType.NudgeTool), MedicalViewerNudgeTool)
            nudgeProperties.Height = 100
            nudgeProperties.Width = 50
            nudgeProperties.Shape = MedicalViewerNudgeToolShape.Rectangle

            cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

      public void MedicalViewerNudgeToolExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerNudgeTool nudgeProperties = (MedicalViewerNudgeTool)cell.GetActionProperties(MedicalViewerActionType.NudgeTool);
         nudgeProperties.Height = 100;
         nudgeProperties.Width = 50;
         nudgeProperties.Shape = MedicalViewerNudgeToolShape.Rectangle;

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerNudgeTool-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerNudgeTool.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.NudgeTool)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl() As MedicalViewerForm
            Return New MedicalViewerForm()
        End Function

        ' This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

        Public Sub MedicalViewerNudgeToolExample1()
            Dim myForm As MedicalViewerForm = GetMedicalControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim nudgeProperties As MedicalViewerNudgeTool = CType(cell.GetActionProperties(MedicalViewerActionType.NudgeTool), MedicalViewerNudgeTool)
            nudgeProperties.Height = 100
            nudgeProperties.Width = 50
            nudgeProperties.Shape = MedicalViewerNudgeToolShape.Rectangle

            cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

      public void MedicalViewerNudgeToolExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerNudgeTool nudgeProperties = (MedicalViewerNudgeTool)cell.GetActionProperties(MedicalViewerActionType.NudgeTool);
         nudgeProperties.Height = 100;
         nudgeProperties.Width = 50;
         nudgeProperties.Shape = MedicalViewerNudgeToolShape.Rectangle;

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerNudgeTool-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerNudgeTool.#ctor(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerNudgeToolShape)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The width of the nudge tool brush.</param>
      <param name="height">The height of the nudge tool brush.</param>
      <param name="shape">An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape" /> value that indicates the shape of the nudge tool brush.</param>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm1 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.NudgeTool)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

      Private Function GetMedicalControl1() As MedicalViewerForm1
         Return New MedicalViewerForm1()
      End Function

        ' This example creates a rectangular nudge tool brush, and assigns it to the left mouse button.

      Public Sub MedicalViewerNudgeToolExample2()
         Dim myForm As MedicalViewerForm1 = GetMedicalControl1()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim nudgeProperties As MedicalViewerNudgeTool = New MedicalViewerNudgeTool(100, 50, MedicalViewerNudgeToolShape.Ellipse)

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm1 : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm1()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm1 GetMedicalControl1()
      {
         return new MedicalViewerForm1();
      }

      // This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

      public void MedicalViewerNudgeToolExample2()
      {
         MedicalViewerForm1 myForm = GetMedicalControl1();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerNudgeTool nudgeProperties = new MedicalViewerNudgeTool(100, 50, MedicalViewerNudgeToolShape.Ellipse);

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerNudgeTool2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerNudgeTool.#ctor(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerNudgeToolShape,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The width of the nudge tool brush.</param>
      <param name="height">The height of the nudge tool brush.</param>
      <param name="shape">An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape" /> value that indicates the shape of the nudge tool brush.</param>
      <param name="autoDetect">true to make nudge tool expand the region if the cursor is inside the region, and shrink if outside, false to always nudge or shrink regarding the cursor position.</param>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerForm1 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.NudgeTool)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

      Private Function GetMedicalControl1() As MedicalViewerForm1
         Return New MedicalViewerForm1()
      End Function

        ' This example creates a rectangular nudge tool brush, and assigns it to the left mouse button.

      Public Sub MedicalViewerNudgeToolExample2()
         Dim myForm As MedicalViewerForm1 = GetMedicalControl1()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim nudgeProperties As MedicalViewerNudgeTool = New MedicalViewerNudgeTool(100, 50, MedicalViewerNudgeToolShape.Ellipse)

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties)

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm1 : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm1()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm1 GetMedicalControl1()
      {
         return new MedicalViewerForm1();
      }

      // This example creates a rectangular nudge tool brush, and assign it to the left mouse button.

      public void MedicalViewerNudgeToolExample2()
      {
         MedicalViewerForm1 myForm = GetMedicalControl1();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerNudgeTool nudgeProperties = new MedicalViewerNudgeTool(100, 50, MedicalViewerNudgeToolShape.Ellipse);

         cell.SetActionProperties(MedicalViewerActionType.NudgeTool, nudgeProperties);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerNudgeTool2-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerNudgeTool.AutoDetect">
      <summary>
            Gets or sets the value that represents whether to detect the nudge modification type.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to make nudge tool expand the region if the cursor is inside the region, and shrink if outside, false to always nudge or shrink regarding the cursor position</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerNudgeTool.Width">
      <summary>
            Gets or sets the value that represents the width of the nudge tool brush.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that represents the width of the nudge tool brush, default is 20.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerNudgeTool.Height">
      <summary>
            Gets or sets the value that represents the height of the nudge tool brush.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that represents the height of the nudge tool brush, default is 20.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerNudgeTool.Shape">
      <summary>
            Gets or sets the enumerated value that indicates the shape of the nudge tool brush.
            </summary>
      <medaddon>yes</medaddon>
      <value>An Enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape" /> value that indicates the shape of the nudge tool brush. The default is MedicalViewerNudgeToolShape.Ellipse.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerNudgeTool" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCellPosition">
      <summary>
            Represents a class that is used to indicate the row and column position of the cell inside the <see cref="N:Leadtools.MedicalViewer" /> control.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>This example shows statistics about the medical viewer and the first cell.</para>
        <code lang="VB">        Private Sub GetStatisticalInformation(ByVal cell As MedicalViewerMultiCell)
            Console.WriteLine("Number of actions that have been added to the medical viewer = " &amp; cell.ActionCount)
            Console.WriteLine("The coordinates of the first cell are : " &amp; cell.Location.X &amp; ", " &amp; cell.Location.Y &amp; ", " &amp; cell.Size.Width &amp; ", " &amp; cell.Size.Height)
            Console.WriteLine("The Position in term of row / columns of the first cell is : " &amp; cell.Position.Row &amp; ", " &amp; cell.Position.Column)
        End Sub



        Public Sub MedicalViewerStatisticsExample()
            Dim form As MainForm2 = New MainForm2()
            GetStatisticalInformation((CType(form._medicalViewer.Cells(0), MedicalViewerMultiCell)))
            form.ShowDialog()
        End Sub</code>
        <code lang="CS">      void GetStatisticalInformation(MedicalViewerMultiCell cell)
      {
         Console.WriteLine("Number of actions that have been added to the medical viewer = " + cell.ActionCount);
         Console.WriteLine("The coordinates of the first cell are : " + cell.Location.X + ", " + cell.Location.Y + ", " + cell.Size.Width + ", " + cell.Size.Height);
         Console.WriteLine("The Position in term of row / columns of the first cell is : " + cell.Position.Row + ", " + cell.Position.Column);
      }



      public void MedicalViewerStatisticsExample()
      {
         MainForm2 form = new MainForm2();
         GetStatisticalInformation(((MedicalViewerMultiCell)form._medicalViewer.Cells[0]));
         form.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerStatistics-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCellPosition.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition"></see> class, specifying how to create it.
            </summary>
      <medaddon>yes</medaddon>
      <param name="row">A zero-based index value that indicates in which row of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.</param>
      <param name="column">A zero-based index value that indicates in which column of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellPosition.Row">
      <summary>
            (Read only) Gets the zero-based index value that indicates in which row of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates in which row of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCellPosition.Column">
      <summary>
            (Read only) Gets the value that indicates in which column of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates in which column of the <see cref="N:Leadtools.MedicalViewer" /> control the cell is placed.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellPosition" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs">
      <summary>
            The <b>MedicalViewerProbeToolTextChangedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ProbeToolTextChanged" /> event.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>To use the probe tool, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> to add the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.ProbeTool</see> action  to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the action with a mouse button.</description>
          </item>
          <item>
            <description>Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ProbeToolTextChanged" /> events.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs.#ctor(System.Int32,System.Single,System.Single,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs"></see> class object with explicit parameters.
            </summary>
      <param name="subCellIndex"> sub-cell index of the cell</param>
      <param name="x"> the x-coordinates of the mouse position.</param>
      <param name="y"> the x-coordinates of the mouse position.</param>
      <param name="text">the text that is displayed over the probe tool.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>To use the probe tool, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> to add the action <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.ProbeTool to the Medical Viewer Cell, then use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> to associate the with a mouse button.</description>
          </item>
          <item>
            <description>Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.ProbeToolTextChanged" /> events.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs.X">
      <summary>
            Gets the x-coordinates of the mouse position relative to the cell.
            </summary>
      <value>
            Value that indicates the x-coordinates of the mouse position relative to the cell.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs.Y">
      <summary>
            Gets the y-coordinates of the mouse position relative to the cell.
            </summary>
      <value>
            Value that indicates the y-coordinates of the mouse position relative to the cell.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs.SubCellIndex">
      <summary>
            Gets the sub-cell index where the probe tool is now over.
            </summary>
      <value>
            Value that indicates the sub-cell index where the probe tool is now over.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerProbeToolTextChangedEventArgs.Text">
      <summary>
            Gets or sets the text that is displayed over the probe tool.
            </summary>
      <value>
            A string that represents the text that is displayed over the probe tool.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDerivativeGeneratedEventArgs">
      <summary>
            The <b>MedicalViewerDerivativeGeneratedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.DerivativeGenerated" /> event.
            </summary>
      <remarks>
            Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.DerivativeGenerated" /> events.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDerivativeGeneratedEventArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerCell)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerDerivativeGeneratedEventArgs"></see> class object with explicit parameters.
            </summary>
      <param name="cell"> The cell that will hold the derivative cell.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDerivativeGeneratedEventArgs.DerivativeCell">
      <summary>
            (Read only) Gets the cell that contains the derivative image.
            </summary>
      <value>Value that indicates the cell which contains the derivative image.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs">
      <summary>
            The <b>MedicalViewerData3DRequestedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DRequested" /> event.
            </summary>
      <remarks>
            Use this class when handling <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DRequested" /> events:
            <para>This class is used to provide the requested 3D information to the 3D engine. you just need to pass it to the method cref=Leadtools.Medical3D.Medical3DEngine.Provide3DInformation.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerBaseCell,Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs"></see> class object with explicit parameters.
            </summary>
      <param name="cell"> The cell that requested the 3D information.</param>
      <param name="informationType">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType" /> the represents what the requested information is.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs.InformationType">
      <summary>
            (Read only) Gets the type of the requested 3D information from the Medical Viewer to the Medical 3D engine.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType" /> enumeration that represents what the requested information is.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs.Succeed">
      <summary>
            Gets or sets the value that indicates whether the requesting the 3D information has succeed or not.
            </summary>
      <value>
            true if the 3D information was successfully retrieved; otherwise, false.
            </value>
      <remarks>
            You must fill this value from what the method cref=Leadtools.Medical3D.Medical3DEngine.Provide3DInformation returns. otherwise, you might encounter some unexpected behavior.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs.ImageIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the requested image.
            </summary>
      <value>
            A value that indicates the index of the requested image, which the user is responsible for providing. The user should retrieve this image and place it in the property <see cref="P:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.Image" />.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs">
      <summary>
            The <b>MedicalViewer3DFrameRequestedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DFrameRequested" /> event.
            </summary>
      <remarks>
             Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DFrameRequested" /> events.
            <para>This class is used to provide the requested 3D information to the 3D engine. you just need to pass it to the method <see cref="M:Leadtools.Medical3D.Medical3DEngine.Provide3DInformation(Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs)" />.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerData3DRequestedEventArgs"></see> class object with explicit parameters.
            </summary>
      <param name="frameIndex"> the index of the frame requested. The user should retrieve this image and place it in the property <see cref="P:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.Image" /></param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.ImageIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the requested image
            </summary>
      <value>
            A value that indicates the index of the requested image, which the user is responsible for providing. The user should retrieve this image and place it in the property <see cref="P:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.Image" /></value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer3DFrameRequestedEventArgs.Image">
      <summary>
            Gets or sets the image that is requested by the Medical Viewer engine and the Medical 3D Engine.
            </summary>
      <value>
        <see cref="T:Leadtools.RasterImage" /> that represents the requested image, which is requested by the Medical Viewer engine and the Medical 3D Engine.
            </value>
      <remarks>
            The reason for requesting the image is that the MedicalViewer will need to create some internal 3D object in order to be able to extract a Derivative Image, which is an image that resulted from the Cut plane feature. For more information, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.CutLines" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerReferenceLineProperties.DoubleCutLines" />.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.Point3D">
      <summary>
            Represents the 3D point.
            </summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.Point3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.Point3D" /> struct with default parameters.
            </summary>
      <param name="x">The X value of the 3D point.</param>
      <param name="y">The Y value of the 3D point.</param>
      <param name="z">The Z value of the 3D point.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.Point3D.FromDoubleArray(System.Double[])">
      <summary>
            Converts array of double into a <see cref="T:Leadtools.MedicalViewer.Point3D" /> struct.
            </summary>
      <param name="doubleArray">Array of double values to be converted.</param>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.Point3D" /> that represents the convert double array.
            </returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point3D.X">
      <summary>
            Gets or sets the X value of the 3D point.
            </summary>
      <value>
            The X value.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point3D.Y">
      <summary>
            Gets or sets the Y value of the 3D point.
            </summary>
      <value>
            The Y value.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point3D.Z">
      <summary>
            Gets or sets the Z value of the 3D point.
            </summary>
      <value>
            The Z value.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point3D.Empty">
      <summary>
            Returns an empty Point3D struct.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.Point3D" /> that represents an empty struct.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.Point2D">
      <summary>
             Represents an ordered pair of x- and y-coordinates that defines a point on a two-dimensional plane.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
            This is a point that takes double values instead of integers.
             </remarks>
      <example>
             For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.Point2D.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.Point2D"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="x"> the x-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" /></param>
      <param name="y"> the y-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" /></param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.Point2D" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point2D.X">
      <summary>
            Gets or sets the x-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that the x-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.Point2D" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.Point2D.Y">
      <summary>
            Gets or sets the y-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that the y-coordinate of this <see cref="T:Leadtools.MedicalViewer.Point2D" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.Point2D" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerFramesLoadedEventArgs">
      <summary>
            The <b>MedicalViewerFramesLoadedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesLoaded" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesLoaded" /> event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerFramesLoadedEventArgs.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerFramesLoadedEventArgs"></see> class object with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="cellIndex"> A zero-based index of the cell that fired the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.FramesLoaded" /> event.
            </param>
      <param name="framesLoadedIndexes"> Array of integers containing the a zero-based index of each loaded page. </param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFramesLoadedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that fired the event.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            Value that indicates the zero-based index of the cell that fired the event. If the cell is not attached to a <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> the value will be 0.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFramesLoadedEventArgs.FramesLoadedIndexes">
      <summary>
            (Read only) Gets the array of integers containing the a zero-based index of each loaded page.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            Array of integers that represents a zero-based index of each loaded page.
            </value>
      <remarks>
            This event is fired after the user passes the image using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetRequestedImage(Leadtools.RasterImage,System.Int32)" />.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs">
      <summary>
            The <b>MedicalViewerPanoramicDataRequestedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PanoramicDataRequested" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PanoramicDataRequested" /> event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs"></see> class object with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="frameIndex"> Index of the requested frame.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.FrameIndex">
      <summary>
            (Read only) Gets the zero-based index of the requested frame.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
            A zero-based index of the requested frame. The user needs to provide the image with the specified index through <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.
            </value>
      <remarks>
            When the user receives the frame index, he must provide the image with the provided index, and set it to the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.
            <para>The only property that the user must set is the <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.</para><para>The user can also provide more information like <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.InstanceNumber" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.CaptureDate" />, but they are optional. If the user did not set them, then the toolkit will use the default values.</para></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.CaptureDate">
      <summary>
            Gets or sets the frame capture date
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:System.DateTime" /> object that represents the capture date of the frame with the specified <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.FrameIndex" />.
            </value>
      <remarks>
            When the user receives the frame index, he must provide the image with the provided index, and set it to the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.
            <para>The only property that the user must set is the <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.</para><para>The user can also provide more information like <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.InstanceNumber" /> and <b>CaptureDate</b>, but they are optional. If the user didn't set them, then the toolkit will use the default values.</para></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.InstanceNumber">
      <summary>
            Gets or sets the frame instance number
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:System.DateTime" /> object that represents the instance number of the frame with the specified <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.FrameIndex" />.
            </value>
      <remarks>
            When the user receives the frame index, he must provide the image with the provided index, and set it to the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.
            <para>The only property that the user must set is the <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame" />.</para><para>The user can also provide more information like <b>InstanceNumber</b> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.CaptureDate" />, but they are optional. If the user did not set them, then the toolkit will use the default values.</para></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.Frame">
      <summary>
            Gets or sets the requested frame 
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.RasterImage" /> that represents the requested frame with the specified <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.FrameIndex" />.
            </value>
      <remarks>
            When the user receives the frame index, he must provide the image with the provided index, and set it to the property <b>Frame</b>.
            <para>The only property that the user must set is the <b>Frame</b>.</para><para>The user can also provide more information like <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.InstanceNumber" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicDataRequestedEventArgs.CaptureDate" />, but they are optional. If the user did not set them, then the toolkit will use the default values.</para></remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDragEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragDrop" />, <see cref="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragOver" />, <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragDrop" />, and <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragOver" /> events.
            </summary>
      <isnew>5/8/2011</isnew>
      <remarks>
            To make the drag drop feature works, set the control property <see cref="P:System.Windows.Forms.Control.AllowDrop" /> to true, then register the event <see cref="E:System.Windows.Forms.Control.DragEnter" />.
            <para>The <see cref="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragDrop" /> and <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragDrop" /> events occur when the user completes a drag-and-drop operation by dragging an object over the control and then dropping it onto the control by releasing the mouse button.</para><para>The <see cref="E:System.Windows.Forms.Control.DragEnter" /> event occurs when the user moves the mouse pointer onto the control while dragging an object with the mouse.</para><para>The <see cref="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragOver" /> and <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CellDragOver" /> events occur when the user moves the mouse pointer over the control while dragging an object with the mouse.</para><para>A <see cref="T:System.Windows.Forms.DragEventArgs" /> object specifies any data associated with this event; the current state of the SHIFT, CTRL, and ALT keys; the location of the mouse pointer; and the drag-and-drop effects allowed by the source and target of the drag event.</para></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDragEventArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerBaseCell,System.Int32,System.Int32,System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)">
      <summary>
            Initializes a new instance of the MedicalViewerDragEventArgs class with explicit parameters.
            </summary>
      <isnew>5/8/2011</isnew>
      <param name="cell"> the cell that the drag is on.</param>
      <param name="cellIndex">the cell index that the drag is over right now.</param>
      <param name="subCellIndex">the sub-cell index that the drag is over right now.</param>
      <param name="data">IDataObject that contains the data associated with this event.</param>
      <param name="keyState">the current state of the SHIFT, CTRL, and ALT keys, as well as the state of the mouse buttons.</param>
      <param name="x">the x-coordinate of the mouse pointer, in screen coordinates.</param>
      <param name="y">the y-coordinate of the mouse pointer, in screen coordinates.</param>
      <param name="allowedEffect">the drag-and-drop operations which are allowed by the originator (or source) of the drag event.</param>
      <param name="effect">the target drop effect in a drag-and-drop operation.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDragEventArgs.CellIndex">
      <summary>
            (Read only) Gets the cell index that the drag is over right now.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
            Value that represents the cell index that the drag is over right now.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDragEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the sub-cell index that the drag is over right now.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
            Value that represents the sub-cell index that the drag is over right now.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" /> event.
            </summary>
      <remarks>
        <ul>
          <li>To use the spy glass tool, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.SpyGlass</see> action to the Medical Viewer Cell. 
             Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the action with a mouse button.</li>
          <li>To change the properties of the spy glass, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" />.</li>
          <li>The user must register the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" /> event to use the spy glass.</li>
          <li>The spy glass is similar to the Magnify glass feature, the main difference is that the spy glass works by sending a copy of the image through the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" />.
                 The user can apply any effect on the copy, the spy glass then will display the copy as the user hovers the mouse over the original image.</li>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs.#ctor(Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs"></see> class.
            </summary>
      <param name="image"> A copy of the image that will be displayed on the spy glass.</param>
      <param name="cellIndex"> A Zero-based index of the cell that contains the image.</param>
      <param name="subCellIndex"> A Zero-based index of the sub-cell that contains the image</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs.CellIndex">
      <summary>
            Gets the index of the cell that contains the spy glass image.
            </summary>
      <value>
            The zero-based index of the cell that contains the spy glass image.
            </value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs.SubCellIndex">
      <summary>
            Gets the sub-cell index of the cell that contains the spy glass image.
            </summary>
      <value>
            The zero-based index of the sub-cell that contains the spy glass image page.
            </value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlassStartedEventArgs.Image">
      <summary>
            Gets the image that will be displayed on the spy glass surface.
            </summary>
      <value>
        <see cref="T:Leadtools.RasterImage" /> that represents the image that will be displayed on the surface of the spy glass.
            </value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerActionType">
      <summary>
            Represents the action to be associated with the specified mouse button.
            </summary>
      <keywords>RotatePlane|MovePlane|Rotate3DObject|Move3DObject|Scale3DObject|MoveCamera|RotateCamera|ZoomCamera|WindowLevel</keywords>
      <remarks>
        <list type="bullet">
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.WindowLevel">
      <summary>
            Window leveling. Moving the mouse horizontally controls the window center parameter of the window level. Moving the mouse vertically controls the window width parameter of the window level.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Scale">
      <summary>
            Scaling. Moving the mouse vertically controls the scale factor of the image or the 3D object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Offset">
      <summary>
            Offset. Moving the mouse to any direction causes the image or the 3D object to move towards that direction (Zoom in or out the 3D object if you are using the Medical3DControl).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Stack">
      <summary>
            Stacking. Moving the mouse vertically scrolls through the frames.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.MagnifyGlass">
      <summary>
            Magnifying glass. Moving the mouse causes the magnify glass object to move.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Alpha">
      <summary>
            Alpha. Moving the mouse horizontally changes the alpha factor of the LUT curve.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationRuler">
      <summary>
            Ruler annotation. Clicking and dragging creates a ruler object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationAngle">
      <summary>
            Angle annotation. Clicking and dragging creates an angle object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationText">
      <summary>
            Text annotation. Clicking and dragging creates a text object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationArrow">
      <summary>
            Arrow annotation. Clicking and dragging creates an arrow object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationRectangle">
      <summary>
            Rectangle annotation. Clicking and dragging creates a rectangle object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationEllipse">
      <summary>
            Ellipse annotation. Clicking and dragging creates an ellipse object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationHilite">
      <summary>
            Highlight annotation. Clicking and dragging creates a hilite object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.RectangleRegion">
      <summary>
            Rectangular region. Clicking and dragging creates a rectangular region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.EllipseRegion">
      <summary>
            Elliptical region. Clicking and dragging creates an elliptical region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.FreeHandRegion">
      <summary>
            Free hand region. Clicking and dragging creates a free hand region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.PolygonRegion">
      <summary>
            Polygon region. Clicking defines the point of the polygon. Double clicking closes the polygon region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.MagicWandRegion">
      <summary>
            Magic wand region. Clicking defines the starting point and color. The region will grow outwards
            from the selected point to the boundaries of that color. Dragging will increase the threshold of variation allowed from the selected color.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ColorRangeRegion">
      <summary>
            Color range region. Moving the mouse horizontally controls the lower tolerance. Moving the mouse vertically controls the upper tolerance.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.CircleRegion">
      <summary>
            Circular region. Clicking and dragging creates a circular region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.SquareRegion">
      <summary>
            Square region. Clicking and dragging creates a square region.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.NudgeTool">
      <summary>
            Expand the region border using the mouse. It will serve also as a region painter.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ShrinkTool">
      <summary>
            Shrink the region border using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.CutPlane">
      <summary>
            Drawing an oblique cut line using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.DoubleCutPlane">
      <summary>
            Drawing a double oblique cut line using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Rotate3DObject">
      <summary>
            Rotate the 3D object, only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Scale3DObject">
      <summary>
            Scale the 3D object, only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Translate3DCamera">
      <summary>
            Offset the 3D Camera, only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.TranslatePlane">
      <summary>
            Offset the MPR planes or the clipping planes (for VRT, MIP and MinIP), only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.RotatePlane">
      <summary>
            Rotate the MPR planes or the clipping planes (for VRT, MIP and MinIP), only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Rotate3DCamera">
      <summary>
            Rotate the 3D camera, only works with the Medical3DControl.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationAudio">
      <summary>
            Audio Annotation. Clicking and dragging creates an audio object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationButton">
      <summary>
            Button Annotation. Clicking and dragging creates a button object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationClosedCurve">
      <summary>
            Closed Curve Annotation. Clicking and dragging creates a closed curve object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationCrossProduct">
      <summary>
            Cross Product Annotation. Clicking and dragging creates a cross product object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationCurve">
      <summary>
            Curve Annotation. Clicking and dragging creates a curve object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationEncrypt">
      <summary>
            Encrypt Annotation. Clicking and dragging creates an encrypt object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationFreeHand">
      <summary>
            Free Hand Annotation. Clicking and dragging creates a free hand object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationFreeHandHotSpot">
      <summary>
            Freehand Hot Spot Annotation. Clicking and dragging creates a freehand hot spot object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationHotSpot">
      <summary>
            Hot Spot Annotation. Clicking and dragging creates a hot spot object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationLine">
      <summary>
            Line Annotation. Clicking and dragging creates a line object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationNote">
      <summary>
            Note Annotation. Clicking and dragging creates a note object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationPoint">
      <summary>
            Point Annotation. Clicking and dragging creates a point object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationPolygon">
      <summary>
            Polygon Annotation. Clicking and dragging creates a polygon object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationPolyline">
      <summary>
            Polyline Annotation. Clicking and dragging creates a polyline object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationPolyRuler">
      <summary>
            Polyruler Annotation. Clicking and dragging creates a polyruler object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationRedaction">
      <summary>
            Redaction Annotation. Clicking and dragging creates a redaction object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationStamp">
      <summary>
            Stamp Annotation. Clicking and dragging creates a stamp object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationTextPointer">
      <summary>
            Text Pointer Annotation. Clicking and dragging creates a text pointer object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.AnnotationTextRollup">
      <summary>
            Text Rollup Annotation. Clicking and dragging creates a text rollup object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.PanoramicPolygon">
      <summary>
            Panoramic polygon. Clicking and dragging multiple times creates a polygon that used to create panoramic image, for more information please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" />.
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Logarithmic">
      <summary>
            Logarithmic. Moving the mouse horizontally changes the logarithmic factor of the LUT curve.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Exponential">
      <summary>
            Exponential. Moving the mouse horizontally changes the exponential factor of the LUT curve.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.Sigmoid">
      <summary>
            Sigmoid. Moving the mouse horizontally changes the sigmoid factor of the LUT curve.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.SpatialLocator">
      <summary>
            (For MPR Cells only) Clicking on one MPR cell will have the other cells scroll to the slice that correspond to the point clicked.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ProbeTool">
      <summary>
            Clicking on the cell will display an information window next to the cursor and move with it.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ClickZoomIn">
      <summary>
            Clicking will zoom the image in relative to the point clicked.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ClickZoomOut">
      <summary>
            Clicking will zoom the image out relative to the point clicked.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.ZoomToRectangle">
      <summary>
            Dragging will create a rectangle, releasing the button will zoom to the portion of the image highlighted by the rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionType.SpyGlass">
      <summary>
            Moving the mouse causes the spy glass object to appear over the cell and move with the mouse. For more information refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlass" />.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit">
      <summary>
            Represents the unit of measure for length.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Inches">
      <summary>
            Inches.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Feet">
      <summary>
            Feet.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Micrometers">
      <summary>
            Micrometers.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Millimeters">
      <summary>
            Millimeters.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Centimeters">
      <summary>
            Centimeters.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMeasurementUnit.Meters">
      <summary>
            Meters.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerScaleMode">
      <summary>
            Specifies the type of image scaling that will be used on the image.
            </summary>
      <noremarks />
      <medaddon>yes</medaddon>
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.Normal">
      <summary>
            No fitting.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.Fit">
      <summary>
            Fit to width or height based on the image and cell or sub-cell shape.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.FitWidth">
      <summary>
            Fit to image width.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.FitHeight">
      <summary>
            Fit to image height.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.FitIfLarger">
      <summary>
            Fit the image to the cell only if the cell is smaller than the image.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleMode.Stretch">
      <summary>
            Stretch the image to the cell.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures">
      <summary>
            Specifies which part of the cell or sub-cell besides the image to print.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.None">
      <summary>
            Nothing.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.All">
      <summary>
            Print everything.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.Regions">
      <summary>
            Include the region when printing.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.Annotations">
      <summary>
            Include any annotations when printing.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.Borders">
      <summary>
            Include borders when printing.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.Tags">
      <summary>
            Include tags when printing.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellImageFeatures.Rulers">
      <summary>
            Include the cell ruler when printing. To include the annotation ruler, use MedicalViewerCellImageFeatures.Annotation.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSetImageOptions">
      <summary>
            Specifies whether to insert the image or replace the existing one.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSetImageOptions.Insert">
      <summary>
            Insert the image.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSetImageOptions.Replace">
      <summary>
            Replaces the current image. This is useful if the user sets a thumbnail first before setting the actual image.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCalibrationAxis">
      <summary>
            Specifies whether to calibrate one axis or both axes.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCalibrationAxis.Both">
      <summary>
            Calibrate both axes.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCalibrationAxis.YAxis">
      <summary>
            Calibrate the vertical axis.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCalibrationAxis.XAxis">
      <summary>
            Calibrate the horizontal axis.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerActionStatus">
      <summary>
            Specifies the current status of the action.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionStatus.Started">
      <summary>
            The action has been started.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionStatus.Progress">
      <summary>
            The action is in progress.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionStatus.Finished">
      <summary>
            The action has just been finished.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerFileOperation">
      <summary>
            Specifies which operations are performed when saving annotations or regions.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerFileOperation.Create">
      <summary>
            Create the file when saving. If the file already exists, overwrite it.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerFileOperation.Append">
      <summary>
            Append the file when saving. If the file does not exist, create it.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerFileOperation.Replace">
      <summary>
            Replace the page when saving.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerFileOperation.Insert">
      <summary>
            Inserts a page into the file. If the file does not exist, it creates one.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape">
      <summary>
            Specifies the shape of the nudge tool brush.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape.Rectangle">
      <summary>
            Rectangular nudge tool shape.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape.Ellipse">
      <summary>
            Elliptical nudge tool shape.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape.Slash">
      <summary>
            Slash nudge tool shape.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerNudgeToolShape.BackSlash">
      <summary>
            Back Slash nudge tool shape.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRegionState">
      <summary>
            Specifies whether the region has been added, changed or removed.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRegionState.Removed">
      <summary>
            The existing region has been removed.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRegionState.Added">
      <summary>
            A new region has been added.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRegionState.Changed">
      <summary>
            The existing region has been changed.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle">
      <summary>
            Specifies the type of crosshair to be used by the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle.None">
      <summary>
            No cross-hair.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle.Fine">
      <summary>
            The cross-hair is one pixel wide and uses the color in <see cref="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.PenColor" />. (Default).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle.Invert">
      <summary>
            The cross-hair is three pixels wide. The center pixel uses the color in <see cref="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.PenColor" />. The outer pixels use the inverse of the color in <see cref="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.PenColor" />.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle.InvertScreen">
      <summary>
            The cross-hair is three pixels wide. The center pixel uses the color in <see cref="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.PenColor" />. The outer pixels use the inverse of the screen color.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTextQuality">
      <summary>
            Represents the quality of the text and whether it is anti-aliased.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTextQuality.Default">
      <summary>
            Default quality.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTextQuality.Draft">
      <summary>
            Draft quality.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTextQuality.Proof">
      <summary>
            Proof quality.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTextQuality.NonAntialiased">
      <summary>
            Forces use of draft quality.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTextQuality.Antialiased">
      <summary>
            Enables anti-aliasing for the font.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerBorderStyle">
      <summary>
            Represents the border style.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerBorderStyle.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerBorderStyle.Dash">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerBorderStyle.Dot">
      <summary>
            Dotted border. This is the default value.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerBorderStyle.DashDot">
      <summary>
            Dash and dot border.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerBorderStyle.DashDotDot">
      <summary>
            Dash and two dots border.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPaintingMethod">
      <summary>
            Represents the technique used when painting the images.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaintingMethod.Normal">
      <summary>
            Normal painting.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaintingMethod.Resample">
      <summary>
            Use bilinear interpolation (resampling) if the paint process needs to resize the image. (slower than regular resize).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaintingMethod.Bicubic">
      <summary>
            Use bicubic interpolation if the paint process needs to resize the image. (slower than Resample).
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTagAlignment">
      <summary>
            Represents the values that specify the origin point from which to count the rows specified in the <paramref name="row" /> parameter in the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetTag(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,Leadtools.MedicalViewer.MedicalViewerTagType)" /> method.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.TopLeft">
      <summary>
            Start counting rows from the top of the cell. The tag will be left-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.LeftCenter">
      <summary>
            The tag is placed in the center, based on the height of the cell, and is left-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.BottomLeft">
      <summary>
            Start counting rows from the bottom of the cell. The tag will be left-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.TopCenter">
      <summary>
            The tag is placed in the center, based on the width of the cell, and is top-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.BottomCenter">
      <summary>
            The tag is placed in the center, based on the width of the cell, and is bottom-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.TopRight">
      <summary>
            Start counting rows from the top of the cell. The tag will be right-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.RightCenter">
      <summary>
            The tag is placed in the center, based on the height of the cell, and is right-justified.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagAlignment.BottomRight">
      <summary>
            Start counting rows from the bottom of the cell. The tag will be right-justified.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTagType">
      <summary>
            Represents the type of tag to be added.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.UserData">
      <summary>
            User data tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.Scale">
      <summary>
            Scale tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.WindowLevelData">
      <summary>
            Window level tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.FieldOfView">
      <summary>
            Field of view tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.OwnerDraw">
      <summary>
            Owner draw tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.Frame">
      <summary>
            Frame tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.RulerUnit">
      <summary>
            Ruler unit tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.LeftOrientation">
      <summary>
            Left orientation tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.RightOrientation">
      <summary>
            Right orientation tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.TopOrientation">
      <summary>
            TopOrientation tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.BottomOrientation">
      <summary>
            Bottom orientation tag.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.Offset">
      <summary>
            the current position of the image in Pixels.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.Alpha">
      <summary>
            the current alpha value (which is the amount of the lookup table curvature).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTagType.MPRType">
      <summary>
            the cell type if it's an MPR cell, possible types are, Axial, Sagittal and Coronal, the user can change those names using the properties <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.AxialName" />, <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SagittalName" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.CoronalName" />.
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRulerStyle">
      <summary>
            Indicates the style for the rulers in the cells of the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulerStyle.Inverted">
      <summary>
            The ruler is drawn using an inverted pen. This is the default value.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulerStyle.Bordered">
      <summary>
            The ruler is drawn using both the pen specified in <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerInColor" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.RulerOutColor" />.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationFlags">
      <summary>
            Determines which annotation objects use the new setting.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnnotationFlags.Selected">
      <summary>
            Apply on the selected object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnnotationFlags.AllObjects">
      <summary>
            Apply on objects that have the same type. (All rulers or all arrows).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnnotationFlags.AllAnnotation">
      <summary>
            Apply on all annotation objects.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSplitterStyle">
      <summary>
            Represents the type of splitters.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSplitterStyle.None">
      <summary>
            No splitters.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSplitterStyle.Thin">
      <summary>
            One pixel width splitters. (no extra splitters will be set when this value is set).
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSplitterStyle.Thick">
      <summary>
            Normal splitter (Default).
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRulers">
      <summary>
            Represents which ruler to display. (this does not include the annotation rulers).
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulers.None">
      <summary>
            No rulers.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulers.Both">
      <summary>
            Both vertical and horizontal rulers.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulers.Vertical">
      <summary>
            Vertical ruler only.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerRulers.Horizontal">
      <summary>
            Horizontal ruler only.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMouseButtons">
      <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.None">
      <summary>
            No mouse button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Left">
      <summary>
            left mouse button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Right">
      <summary>
            Right mouse button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Middle">
      <summary>
            Middle mouse button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Wheel">
      <summary>
            Wheel.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Xbutton1">
      <summary>
            The first XButton. With Windows 2000, Microsoft is introducing support for the Microsoft IntelliMouse Explorer, which is a mouse with five buttons. The two new mouse buttons (XBUTTON1 and XBUTTON2) provide backward/forward navigation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMouseButtons.Xbutton2">
      <summary>
            The second XButton. With Windows 2000, Microsoft is introducing support for the Microsoft IntelliMouse Explorer, which is a mouse with five buttons. The two new mouse buttons (XBUTTON1 and XBUTTON2) provide backward/forward navigation.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerModifiers">
      <summary>
            Specifies constants that define which modifier(s) was/were pressed.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerModifiers.None">
      <summary>
            No modifier button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerModifiers.Shift">
      <summary>
            Left or right Shift button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerModifiers.Ctrl">
      <summary>
            Left or right Control button.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerModifiers.Alt">
      <summary>
            Left or right Alt button.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnimationFlags">
      <summary>
            Specifies constants that control the animation feature.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PaintNormal">
      <summary>
            Paint normally while playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PaintResample">
      <summary>
            Paint using resample interpolation while playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PaintBicubic">
      <summary>
            Paint using bicubic interpolation while playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.ShowAnnotations">
      <summary>
            Show the annotation object while playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.ShowRegions">
      <summary>
            Show the region object while playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PlayForward">
      <summary>
            Play forward.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PlayBackward">
      <summary>
            Play backward.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.Sequence">
      <summary>
            When the animation reaches the end frame, it will jump to the start frame and play the animation all over again.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.Loop">
      <summary>
            When the animation reaches the end frame, it will bounce back and play in reverse until it reaches the start frame and play the animation all over again.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.Shuffle">
      <summary>
            The animation engine will pick a random frame every time when playing the animation.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerAnimationFlags.PlayOnSelection">
      <summary>
            Play the animation while the cell is selected. When deselecting the cell, the animation will stop. When selecting the cell, the animation will start.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerIconStatus">
      <summary>
            Represents the icon status (whether checked or not checked).
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerIconStatus.Unchecked">
      <summary>
            Unchecked.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerIconStatus.Checked">
      <summary>
            Checked.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTags">
      <summary>
            Indicates whether to show or hide the tags.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTags.Show">
      <summary>
            Show the tags.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerTags.Hide">
      <summary>
            Hide the tags.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCellMaintenance">
      <summary>
            Specifies how splitters will move.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellMaintenance.Size">
      <summary>
            The adjacent splitters to the right and to the bottom will move the same distance when the user drags one of the splitters.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCellMaintenance.Pos">
      <summary>
            No other splitter will be moved when the user moves one of the splitters.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerUserMode">
      <summary>
            Specifies the design mode of the viewer when the viewer is created in layout mode.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerUserMode.Run">
      <summary>
            The viewer will be placed in run mode.  You will not be able to move the cells.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerUserMode.Design">
      <summary>
            The viewer will be placed in design mode.  Cells can be adjusted and moved around.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDesignTool">
      <summary>
            Specifies the design tool to uses during design mode in the viewer.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerDesignTool.Selection">
      <summary>
            The current tool in design mode is selection.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerDesignTool.Draw">
      <summary>
            The current tool in design mode is draw.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerActionFlags">
      <summary>
            Represents the cells to which the action is applied and when the action is applied.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>These flags does not work when applying an action on the cref=Leadtools.Medical3D.Medical3DControl which is part of the 3D toolkit.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.Active">
      <summary>
            Apply the effect on the active cell window only.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.Selected">
      <summary>
            Apply the effect on all the cells.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.AllCells">
      <summary>
            Apply the effect on the selected cells only.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.RealTime">
      <summary>
            Apply the action during the mouse movement. This option is only valid if either <b>AllCells</b> or <b>Selected</b> is also set.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.OnRelease">
      <summary>
            Apply the action after releasing the mouse button. This option is only valid if either <b>AllCells</b> or <b>Selected</b> is also set.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerActionFlags.KeepPreviousAssignment">
      <summary>
            This flag allows the user to assign the same action to multiple mouse buttons.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerLookupTableType">
      <summary>
            Represents the type of lookup table being used.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerLookupTableType.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerLookupTableType.Linear">
      <summary>
            Lookup table is linear.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerLookupTableType.Exponential">
      <summary>
            Lookup table is exponential. 
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerLookupTableType.Logarithmic">
      <summary>
            Lookup table is logarithmic. 
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerLookupTableType.Sigmoid">
      <summary>
            Lookup table is sigmoid. 
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType">
      <summary>
            Represents the enumeration that will be sent through the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DRequested" /> and <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.Data3DFrameRequested" /> to request some 3D information.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>the method that will provide the requested information is cref=Leadtools.Medical3D.Medical3DEngine.Provide3DInformation.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.Create3DObject">
      <summary>
            request creating a 3D object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.CrossHair">
      <summary>
            request updating the cross hair data.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.CutPlaneImage">
      <summary>
            request a new cut plane image.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.DeAttachMPR">
      <summary>
            request detaching the MPR from the 3D control.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.DeleteContainer">
      <summary>
            request deleting the container and free all the resources.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.EnableSlab">
      <summary>
            request enabling the slab feature of the 3D.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.MPRExist">
      <summary>
            request checking if a current MPR window exist or not.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.MPRImage">
      <summary>
            request a new MPR image.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.MPRWindowLevel">
      <summary>
            request applying window level on the MPR image.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.None">
      <summary>
      </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.RequestFrame">
      <summary>
            request a frame that will be used to create a 3D object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.SlabParameters">
      <summary>
            request updating the Slab parameters
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.WindowLevel">
      <summary>
            request applying a window level on the 3D object.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.RequestSpecificPage">
      <summary>
            request a specific derivative page (MPR or cut-line image).
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.RequestPanoramicForTheFirstTime">
      <summary>
            request creating a panoramic image for the first time.
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.UpdatePanoramic">
      <summary>
            request updating the current panoramic image.
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.ObjectWindowLevel">
      <summary>
            request applying a window level on the 3D object.
            </summary>
      <isnew>3/15/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewer3DRequestedInformationType.GetParaxialPages">
      <summary>
            request paraaxial page.
            </summary>
      <isnew>5/8/2011</isnew>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject">
      <summary>
            Represents the enumeration that will be sent through the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CustomAnnotationDataRequested" /> to the custom annotation object, run designer, or edit designer.
            </summary>
      <isnew>10/24/2010</isnew>
      <remarks>
        <para>The annotation as custom must be declared before registering the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CustomAnnotationDataRequested" /> event.</para>
        <para>For more information on how to create a custom annotation, refer to the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CustomAnnotationDataRequested" /> event.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCustomAnnotationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Scale)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
      Private Function GetMedicalControlForCustomAnnotationExample() As MedicalViewerCustomAnnotationForm
         Return New MedicalViewerCustomAnnotationForm()
      End Function


      Public Sub MedicalViewerCustomAnnotationExample()
         Dim myForm As MedicalViewerCustomAnnotationForm = GetMedicalControlForCustomAnnotationExample()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.AddAction(CType(101, MedicalViewerActionType))
         cell.SetAction(CType(101, MedicalViewerActionType), MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
         cell.DeclareActionAsAnnotation(CType(101, MedicalViewerActionType), GetType(MyTriangleObject))
         AddHandler cell.CustomAnnotationDataRequested, AddressOf cell_CustomAnnotationDataRequested

         myForm.ShowDialog()
      End Sub

      Private Sub cell_CustomAnnotationDataRequested(ByVal sender As Object, ByVal e As MedicalViewerCustomAnnotationArgs)
         Select Case e.RequestedObject
            Case MedicalViewerCustomAnnotationRequestedObject.AnnotationObject
               If e.AnnotationAction = CType(101, MedicalViewerActionType) Then
                  Dim triangle As MyTriangleObject = New MyTriangleObject()
                  triangle.Pen = New AnnPen(Color.Blue, New AnnLength(3, AnnUnit.Pixel))
                  e.AnnotationObject = triangle
               End If
            Case MedicalViewerCustomAnnotationRequestedObject.DrawDesigner
               If e.AnnotationAction = CType(101, MedicalViewerActionType) Then
                  e.DrawDesigner = New MyTriangleObjectDrawDesigner()
               End If
            Case MedicalViewerCustomAnnotationRequestedObject.EditDesigner
               If e.AnnotationAction = CType(101, MedicalViewerActionType) Then
                  e.EditDesigner = New MyTriangleObjectEditDesigner()
               End If
         End Select
      End Sub



      '
      ' Triangle annotation object class
      ' This class will have a 3 points for a triangle objects that can be stroked with a pen and filled with a brush
      '

      &lt;Serializable()&gt; _
      Public Class MyTriangleObject : Inherits AnnObject ' must derive from AnnObject or one of its derived classes
         '
         ' our private variables
         '

         ' the three points that define our triangle
         &lt;NonSerialized()&gt; _
         Private _firstPoint As AnnPoint
         &lt;NonSerialized()&gt; _
         Private _secondPoint As AnnPoint
         &lt;NonSerialized()&gt; _
         Private _thirdPoint As AnnPoint

         '
         ' constructor
         '

         Public Sub New()
            ' no, we do not require a font
            MyBase.New(True, True, False)
            ' initialize the points

            _firstPoint = AnnPoint.Empty
            _secondPoint = AnnPoint.Empty
            _thirdPoint = AnnPoint.Empty
         End Sub

         '
         ' ISerializable implementation
         '

         Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            ' do not forget to call the base class version
            MyBase.New(info, context)
            ' we need to deserialize our private variables here
            _firstPoint = CType(info.GetValue("FirstPointName", GetType(AnnPoint)), AnnPoint)
            _secondPoint = CType(info.GetValue("SecondPointName", GetType(AnnPoint)), AnnPoint)
            _thirdPoint = CType(info.GetValue("ThirdPointName", GetType(AnnPoint)), AnnPoint)
         End Sub

         Public Overrides Sub GetObjectData(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            ' we need to serialize our private variables here

            ' call the base class version
            MyBase.GetObjectData(info, context)

            ' serialize the points
            info.AddValue("FirstPointName", _firstPoint, GetType(AnnPoint))
            info.AddValue("SecondPointName", _secondPoint, GetType(AnnPoint))
            info.AddValue("ThirdPointName", _thirdPoint, GetType(AnnPoint))
         End Sub

         '
         ' accessors to the points
         '

         Public Property FirstPoint() As AnnPoint
            Get
               Return _firstPoint
            End Get

            Set(ByVal value As AnnPoint)
               _firstPoint = Value
            End Set
         End Property

         Public Property SecondPoint() As AnnPoint
            Get
               Return _secondPoint
            End Get

            Set(ByVal value As AnnPoint)
               _secondPoint = Value
            End Set
         End Property

         Public Property ThirdPoint() As AnnPoint
            Get
               Return _thirdPoint
            End Get

            Set(ByVal value As AnnPoint)
               _thirdPoint = Value
            End Set
         End Property

         '
         ' AnnObject overrides
         '

         Protected Overrides Function Create() As AnnObject
            ' must return a new instance of our class
            Return New MyTriangleObject()
         End Function

         Public Overrides Function Clone() As Object
            ' override the clone method

            ' first call the base implementation
            Dim obj As MyTriangleObject = TryCast(MyBase.Clone(), MyTriangleObject)

            ' next, copy the points
            obj.FirstPoint = FirstPoint
            obj.SecondPoint = SecondPoint
            obj.ThirdPoint = ThirdPoint

            Return obj
         End Function

         Public Overrides Function GetGraphicsPath(ByVal mode As AnnGetGraphicsPathMode) As GraphicsPath
            ' must a return a graphics path representation of our object
            ' Note: this object does not require us to override AnnObject.DrawObject since we can
            ' use a graphics path to represents the object completely.

            ' create a new graphics path
            Dim path As GraphicsPath = New GraphicsPath()

            ' add the triangle points as a series of lines

            ' convert the points to pixels PointF
            Dim pts As PointF() = {FirstPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF(), SecondPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF(), ThirdPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF()}

            path.AddLines(pts)
            path.CloseFigure()

            Return path
         End Function

         Public Overrides Sub ResetRotatePoints()
            ' Place the rotate center control point in the center of the triangle
            Dim CenterX As Single = (FirstPoint.X + SecondPoint.X + ThirdPoint.X) / 3
            Dim CenterY As Single = (FirstPoint.Y + SecondPoint.Y + ThirdPoint.Y) / 3
            RotateCenter = New AnnPoint(CenterX, CenterY)

            ' Place the RotateGripper along a line from the center of the triangle through a vertex
            Dim cx As Single = FirstPoint.X - RotateCenter.X
            Dim cy As Single = FirstPoint.Y - RotateCenter.Y

            Dim dist As Single = CSng(Math.Sqrt(cx * cx + cy * cy))
            Dim fract As Single = 1
            If dist &lt;&gt; 0 Then
               fract = (Math.Abs(dist) + Math.Abs(GripperDistance)) / dist
            End If
            Dim GripperX As Single = CenterX + fract * cx
            Dim GripperY As Single = CenterY + fract * cy
            RotateGripper = New AnnPoint(GripperX, GripperY)
         End Sub
      End Class



      '
      ' MyTriangleObject draw designer
      ' Will require the user to click 3 times once for each point
      '

      Public Class MyTriangleObjectDrawDesigner : Inherits AnnDrawDesigner ' must derive from AnnDrawDesigner or one of its derived classes
         '
         ' private variables
         '

         ' we need to keep track on next point to add
         Private _clickCount As Integer

         '
         ' constructor
         '
         Public Sub New()
            _clickCount = 0
         End Sub

         '
         ' AnnDrawDesigner overrides
         '

         Public Overrides Function MouseDown(ByVal e As MouseEventArgs) As Boolean
            Dim handled As Boolean = False

            ' only process left button clicks
            If e.Button = MouseButtons.Left Then
               ' check if we have not started drawing yet, DrawObject will be null
               If DrawObject Is Nothing Then
                  ' yes, create a new MyTriangleObject from ObjectTemplate
                  Dim obj As MyTriangleObject = TryCast(ObjectTemplate.Clone(), MyTriangleObject)

                  ' setup the points
                  Dim pt As AnnPoint = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit)
                  obj.FirstPoint = pt
                  obj.SecondPoint = pt
                  obj.ThirdPoint = pt

                  ' start drawing this new object
                  StartWorking(obj)
                  handled = True

                  ' we processed first click
                  _clickCount += 1
               Else
                  ' an object is already being drawn, so process next click

                  ' get our object and assign next point to it

                  Dim obj As MyTriangleObject = TryCast(DrawObject, MyTriangleObject)

                  Dim pt As AnnPoint = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit)

                  If _clickCount = 1 Then
                     ' second point
                     obj.SecondPoint = pt
                     _clickCount += 1
                     handled = True
                  ElseIf _clickCount = 2 Then
                     ' third point
                     obj.ThirdPoint = pt
                     handled = True

                     ' we are done!
                     EndWorking()
                  End If
               End If
            Else
               ' we want to cancel the drawing if any other button has been clicked
               If Not DrawObject Is Nothing Then
                  Cancel()
                  handled = True
               End If
            End If

            Return handled
         End Function

         Public Overrides Function MouseMove(ByVal e As MouseEventArgs) As Boolean
            Dim handled As Boolean = False

            ' check if we are already drawing an object
            If Not DrawObject Is Nothing Then
               ' yes, get this object and assign the next point

               ' first, save the old invalid rectangle
               Dim rcOld As Rectangle = DrawObject.InvalidRectangle

               ' get out object and assign the point
               Dim obj As MyTriangleObject = TryCast(DrawObject, MyTriangleObject)

               Dim pt As AnnPoint = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit)

               If _clickCount = 1 Then
                  obj.SecondPoint = pt
               ElseIf _clickCount = 2 Then
                  obj.ThirdPoint = pt
               End If

               ' get the new invalid rectangle
               Dim rcNew As Rectangle = DrawObject.InvalidRectangle

               ' continue drawing this object
               Working(Rectangle.Union(rcOld, rcNew))
               handled = True
            End If

            Return handled
         End Function

         Public Overrides Function MouseUp(ByVal e As MouseEventArgs) As Boolean
            ' we do not need to do anything special on mouse up.
            ' so just see if we are drawing to return true (we handled it)

            Dim handled As Boolean = False

            If DrawObject Is Nothing Then
               handled = True
            End If

            Return handled
         End Function
      End Class


      '
      ' MyTriangleObject edit designer
      ' User can click on any of the points and move them around as well as clicking and dragging the object itself.
      '

      Public Class MyTriangleObjectEditDesigner : Inherits AnnEditDesigner ' must derive from AnnEditDesigner or one of its derived classes
         '
         ' constructor
         '
         Public Sub New()
         End Sub

         '
         ' AnnEditDesigner overrides
         '

         Public Overrides ReadOnly Property ControlPointCount() As Integer
            Get
               ' return the number of control points we need
               ' in this case 3, one for each point in our triangle
               Return 3
            End Get
         End Property

         Public Overrides Function GetControlPointsLocation() As AnnPoint()
            ' return the position of these control points
            ' in this case, same as the points from our object
            Dim obj As MyTriangleObject = TryCast(EditObject, MyTriangleObject)
            Return New AnnPoint() {obj.FirstPoint, obj.SecondPoint, obj.ThirdPoint}
         End Function

         Protected Overrides Sub MoveControlPoint(ByVal controlPointIndex As Integer, ByVal pt As AnnPoint)
            ' user has clicked and moved a point.
            ' based on the index, we can tell if the user dragged the first, second or third point

            Dim obj As MyTriangleObject = TryCast(EditObject, MyTriangleObject)
            Select Case controlPointIndex
               Case 0
                  ' first point
                  obj.FirstPoint = pt.ConvertTo(Container.UnitConverter, obj.FirstPoint.Unit)

               Case 1
                  ' second point
                  obj.SecondPoint = pt.ConvertTo(Container.UnitConverter, obj.SecondPoint.Unit)

               Case 2
                  ' third point
                  obj.ThirdPoint = pt.ConvertTo(Container.UnitConverter, obj.ThirdPoint.Unit)
            End Select
         End Sub

         ' Note, we will not override Move or MoveName since the default implementation is good enough for our object
      End Class


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerCustomAnnotationForm : Form
        {
           private MedicalViewer _medicalViewer;
           void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
           {
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
           }

           public MedicalViewerCustomAnnotationForm()
           {
              RasterCodecs _codecs = new RasterCodecs();
              RasterImage _image;

              this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

              // Create the medical viewer and adjust the size and the location.
              _medicalViewer = new MedicalViewer(1, 2);
              _medicalViewer.Location = new Point(0, 0);
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

              // Load an image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
              MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
              // add some actions that will be used to change the properties of the images inside the control.
              cell.AddAction(MedicalViewerActionType.WindowLevel);
              cell.AddAction(MedicalViewerActionType.Scale);
              cell.AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              _medicalViewer.Cells.Add(cell);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              // Load another image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
              _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

              // add some actions that will be used to change the properties of the images inside the control.
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Scale);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              Controls.Add(_medicalViewer);
              _medicalViewer.Dock = DockStyle.Fill;
           }
           public MedicalViewer Viewer
           {
              get { return _medicalViewer; }
           }
        }
        MedicalViewerCustomAnnotationForm GetMedicalControlForCustomAnnotationExample()
        {
           return new MedicalViewerCustomAnnotationForm();
        }


        public void MedicalViewerCustomAnnotationExample()
        {
           MedicalViewerCustomAnnotationForm myForm = GetMedicalControlForCustomAnnotationExample();
           MedicalViewer medicalViewer = myForm.Viewer;
           MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

           cell.AddAction((MedicalViewerActionType)101);
           cell.SetAction((MedicalViewerActionType)101, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
           cell.DeclareActionAsAnnotation((MedicalViewerActionType)101, typeof(MyTriangleObject));
           cell.CustomAnnotationDataRequested += new EventHandler&lt;MedicalViewerCustomAnnotationArgs&gt;(cell_CustomAnnotationDataRequested);

           myForm.ShowDialog();
        }

        void cell_CustomAnnotationDataRequested(object sender, MedicalViewerCustomAnnotationArgs e)
        {
           switch (e.RequestedObject)
           {
              case MedicalViewerCustomAnnotationRequestedObject.AnnotationObject:
                 if (e.AnnotationAction == (MedicalViewerActionType)101)
                 {
                    MyTriangleObject triangle = new MyTriangleObject();
                    triangle.Pen = new AnnPen(Color.Blue, new AnnLength(3, AnnUnit.Pixel));
                    e.AnnotationObject = triangle;
                 }
                 break;
              case MedicalViewerCustomAnnotationRequestedObject.DrawDesigner:
                 if (e.AnnotationAction == (MedicalViewerActionType)101)
                    e.DrawDesigner = new MyTriangleObjectDrawDesigner();
                 break;
              case MedicalViewerCustomAnnotationRequestedObject.EditDesigner:
                 if (e.AnnotationAction == (MedicalViewerActionType)101)
                    e.EditDesigner = new MyTriangleObjectEditDesigner();
                 break;
           }
        }



        //
        // Triangle annotation object class
        // This class will have a 3 points for a triangle objects that can be stroked with a pen and filled with a brush
        //

        [Serializable] // our class must be serializable to play well with the annotation load/save and undo/redo features
        public class MyTriangleObject :
           AnnObject        // must derive from AnnObject or one of its derived classes
        {
           //
           // our private variables
           //

           // the three points that define our triangle
           [NonSerialized()]
           private AnnPoint _firstPoint;
           [NonSerialized()]
           private AnnPoint _secondPoint;
           [NonSerialized()]
           private AnnPoint _thirdPoint;

           //
           // constructor
           //

           public MyTriangleObject()
              :
              base(
              true,    // yes, we require a pen
              true,    // yes, we require a brush
              false)   // no, we do not require a font
           {
              // initialize the points

              _firstPoint = AnnPoint.Empty;
              _secondPoint = AnnPoint.Empty;
              _thirdPoint = AnnPoint.Empty;
           }

           //
           // ISerializable implementation
           //

           protected MyTriangleObject(SerializationInfo info, StreamingContext context)
              :
              base(info, context)  // do not forget to call the base class version
           {
              // we need to deserialize our private variables here
              _firstPoint = (AnnPoint)info.GetValue("FirstPointName", typeof(AnnPoint));
              _secondPoint = (AnnPoint)info.GetValue("SecondPointName", typeof(AnnPoint));
              _thirdPoint = (AnnPoint)info.GetValue("ThirdPointName", typeof(AnnPoint));
           }

           public override void GetObjectData(SerializationInfo info, StreamingContext context)
           {
              // we need to serialize our private variables here

              // call the base class version
              base.GetObjectData(info, context);

              // serialize the points
              info.AddValue("FirstPointName", _firstPoint, typeof(AnnPoint));
              info.AddValue("SecondPointName", _secondPoint, typeof(AnnPoint));
              info.AddValue("ThirdPointName", _thirdPoint, typeof(AnnPoint));
           }

           //
           // accessors to the points
           //

           public AnnPoint FirstPoint
           {
              get
              {
                 return _firstPoint;
              }

              set
              {
                 _firstPoint = value;
              }
           }

           public AnnPoint SecondPoint
           {
              get
              {
                 return _secondPoint;
              }

              set
              {
                 _secondPoint = value;
              }
           }

           public AnnPoint ThirdPoint
           {
              get
              {
                 return _thirdPoint;
              }

              set
              {
                 _thirdPoint = value;
              }
           }

           //
           // AnnObject overrides
           //

           protected override AnnObject Create()
           {
              // must return a new instance of our class
              return new MyTriangleObject();
           }

           public override object Clone()
           {
              // override the clone method

              // first call the base implementation
              MyTriangleObject obj = base.Clone() as MyTriangleObject;

              // next, copy the points
              obj.FirstPoint = FirstPoint;
              obj.SecondPoint = SecondPoint;
              obj.ThirdPoint = ThirdPoint;

              return obj;
           }

           public override GraphicsPath GetGraphicsPath(AnnGetGraphicsPathMode mode)
           {
              // must a return a graphics path representation of our object
              // Note: this object does not require us to override AnnObject.DrawObject since we can
              // use a graphics path to represents the object completely.

              // create a new graphics path
              GraphicsPath path = new GraphicsPath();

              // add the triangle points as a series of lines

              // convert the points to pixels PointF
              PointF[] pts =
         {
            FirstPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF(),
            SecondPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF(),
            ThirdPoint.ConvertTo(UnitConverter, AnnUnit.Pixel).ToPointF()
         };

              path.AddLines(pts);
              path.CloseFigure();

              return path;
           }

           public override void ResetRotatePoints()
           {
              // Place the rotate center control point in the center of the triangle
              float CenterX = (FirstPoint.X + SecondPoint.X + ThirdPoint.X) / 3;
              float CenterY = (FirstPoint.Y + SecondPoint.Y + ThirdPoint.Y) / 3;
              RotateCenter = new AnnPoint(CenterX, CenterY);

              // Place the RotateGripper along a line from the center of the triangle through a vertex
              float cx = FirstPoint.X - RotateCenter.X;
              float cy = FirstPoint.Y - RotateCenter.Y;

              float dist = (float)Math.Sqrt(cx * cx + cy * cy);
              float fract = 1;
              if (dist != 0)
                 fract = (Math.Abs(dist) + Math.Abs(GripperDistance)) / dist;
              float GripperX = CenterX + fract * cx;
              float GripperY = CenterY + fract * cy;
              RotateGripper = new AnnPoint(GripperX, GripperY);
           }
        }



        //
        // MyTriangleObject draw designer
        // Will require the user to click 3 times once for each point
        //

        public class MyTriangleObjectDrawDesigner :
           AnnDrawDesigner      // must derive from AnnDrawDesigner or one of its derived classes
        {
           //
           // private variables
           //

           // we need to keep track on next point to add
           private int _clickCount;

           //
           // constructor
           //
           public MyTriangleObjectDrawDesigner()
           {
              _clickCount = 0;
           }

           //
           // AnnDrawDesigner overrides
           //

           public override bool MouseDown(MouseEventArgs e)
           {
              bool handled = false;

              // only process left button clicks
              if (e.Button == MouseButtons.Left)
              {
                 // check if we have not started drawing yet, DrawObject will be null
                 if (DrawObject == null)
                 {
                    // yes, create a new MyTriangleObject from ObjectTemplate
                    MyTriangleObject obj = ObjectTemplate.Clone() as MyTriangleObject;

                    // setup the points
                    AnnPoint pt = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit);
                    obj.FirstPoint = pt;
                    obj.SecondPoint = pt;
                    obj.ThirdPoint = pt;

                    // start drawing this new object
                    StartWorking(obj);
                    handled = true;

                    // we processed first click
                    _clickCount++;
                 }
                 else
                 {
                    // an object is already being drawn, so process next click

                    // get our object and assign next point to it

                    MyTriangleObject obj = DrawObject as MyTriangleObject;

                    AnnPoint pt = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit);

                    if (_clickCount == 1)
                    {
                       // second point
                       obj.SecondPoint = pt;
                       _clickCount++;
                       handled = true;
                    }
                    else if (_clickCount == 2)
                    {
                       // third point
                       obj.ThirdPoint = pt;
                       handled = true;

                       // we are done!
                       EndWorking();
                    }
                 }
              }
              else
              {
                 // we want to cancel the drawing if any other button has been clicked
                 if (DrawObject != null)
                 {
                    Cancel();
                    handled = true;
                 }
              }

              return handled;
           }

           public override bool MouseMove(MouseEventArgs e)
           {
              bool handled = false;

              // check if we are already drawing an object
              if (DrawObject != null)
              {
                 // yes, get this object and assign the next point

                 // first, save the old invalid rectangle
                 Rectangle rcOld = DrawObject.InvalidRectangle;

                 // get out object and assign the point
                 MyTriangleObject obj = DrawObject as MyTriangleObject;

                 AnnPoint pt = GetLogicalAnnPoint(e.X, e.Y, obj.FirstPoint.Unit);

                 if (_clickCount == 1)
                    obj.SecondPoint = pt;
                 else if (_clickCount == 2)
                    obj.ThirdPoint = pt;

                 // get the new invalid rectangle
                 Rectangle rcNew = DrawObject.InvalidRectangle;

                 // continue drawing this object
                 Working(Rectangle.Union(rcOld, rcNew));
                 handled = true;
              }

              return handled;
           }

           public override bool MouseUp(MouseEventArgs e)
           {
              // we do not need to do anything special on mouse up.
              // so just see if we are drawing to return true (we handled it)

              bool handled = false;

              if (DrawObject == null)
                 handled = true;

              return handled;
           }
        }


        //
        // MyTriangleObject edit designer
        // User can click on any of the points and move them around as well as clicking and dragging the object itself.
        //

        public class MyTriangleObjectEditDesigner :
           AnnEditDesigner      // must derive from AnnEditDesigner or one of its derived classes
        {
           //
           // constructor
           //
           public MyTriangleObjectEditDesigner()
           {
           }

           //
           // AnnEditDesigner overrides
           //

           public override int ControlPointCount
           {
              get
              {
                 // return the number of control points we need
                 // in this case 3, one for each point in our triangle
                 return 3;
              }
           }

           public override AnnPoint[] GetControlPointsLocation()
           {
              // return the position of these control points
              // in this case, same as the points from our object
              MyTriangleObject obj = EditObject as MyTriangleObject;
              return new AnnPoint[]
            {
               obj.FirstPoint,
               obj.SecondPoint,
               obj.ThirdPoint
            };
           }

           protected override void MoveControlPoint(int controlPointIndex, AnnPoint pt)
           {
              // user has clicked and moved a point.
              // based on the index, we can tell if the user dragged the first, second or third point

              MyTriangleObject obj = EditObject as MyTriangleObject;
              switch (controlPointIndex)
              {
                 case 0:
                    // first point
                    obj.FirstPoint = pt.ConvertTo(Container.UnitConverter, obj.FirstPoint.Unit);
                    break;

                 case 1:
                    // second point
                    obj.SecondPoint = pt.ConvertTo(Container.UnitConverter, obj.SecondPoint.Unit);
                    break;

                 case 2:
                    // third point
                    obj.ThirdPoint = pt.ConvertTo(Container.UnitConverter, obj.ThirdPoint.Unit);
                    break;
              }
           }

           // Note, we will not override Move or MoveName since the default implementation is good enough for our object
        }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerCustomAnnotation-->
      </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject.AnnotationObject">
      <summary>
            The request is a new instance of the custom annotation object.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject.DrawDesigner">
      <summary>
            The request is a new instance of the custom annotation run designer.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject.EditDesigner">
      <summary>
            The request is a new instance of the custom annotation edit designer.
            </summary>
      <isnew>10/24/2010</isnew>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest">
      <summary>
            Represents the enumeration that will be sent through the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonClicked" />.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            The event <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonClicked" /> occurs when the user clicks on the MPR polygon. This enumeration is used by the event to determine which part of the polygon was actually clicked.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest.Body">
      <summary>
            The user clicked on the one of the polygon lines.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest.Handle">
      <summary>
            The user clicked on one of the polygon handles.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerMPRPolygonHitTest.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType">
      <summary>
            Represents the enumeration that is used to set the synchronization type for the cells in the viewer.
            </summary>
      <isnew>3/15/2011</isnew>
      <keywords>Synchronization | Alignment</keywords>
      <value>The synchronization type.</value>
      <remarks>
            Currently, only the automatic synchronization is available.
            <para>The cells must be added to the same <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> if the user want to synchronize them together. To add the cells to the Medical Viewer, use the collection <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" />.</para><para>To enable this feature, please do the following:</para><list type="number"><item><description>Set the <see cref="P:Leadtools.MedicalViewer.MedicalViewer.SynchronizationType" /> to <b>MedicalViewerSynchronizationType</b>.Automatic.</description></item><item><description>Each cell has a <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SynchronizationID" /> property that receives a string which is used to help the toolkit identify which cells to synchronize. To synchronize two cells, pass the same value to SynchronizationID in both cells. You can pass the StudyUID to synchronize the cells from the same study.</description></item><item><description>Set the image position for each frame using <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)" /> method. This is required in order the Medical Viewer be able to match the series with the same image position together.</description></item><item><description>Set the image orientation using <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /> for each cell to synchronize.</description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSyncrhonizationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private _seriesManager512 As MedicalViewerSeriesManager

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager, ByVal output512 As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output
                _seriesManager512 = output512


                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 0
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"

                ' this tag to identify the cell.





                ' Load the second cell with 512 frame

                cell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
                count = output512.Stacks(0).Items.Count
                imageInformation = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output512.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 1
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output512.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output512.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output512.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output512.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic
                DicomEngine.Shutdown()



            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                Dim output As MedicalViewerSeriesManager
                If CInt(cell.Tag) = 0 Then
                    output = _seriesManager
                Else
                    output = _seriesManager512
                End If

                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerSyncrhonizationForm() As MedicalViewerSyncrhonizationForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()
            Dim output512 As MedicalViewerSeriesManager = form.LoadJamesHead512()

            Return New MedicalViewerSyncrhonizationForm(output, output512)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerSynchronizationExample()
            Dim myForm As MedicalViewerSyncrhonizationForm = GetMedicalViewerSyncrhonizationForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerSyncrhonizationForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         private MedicalViewerSeriesManager _seriesManager512;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSyncrhonizationForm(MedicalViewerSeriesManager output, MedicalViewerSeriesManager output512)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;
            _seriesManager512 = output512;


            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 0;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";

            // this tag to identify the cell.





            // Load the second cell with 512 frame

            cell = new MedicalViewerMultiCell(null, true, 1, 1);
            count = output512.Stacks[0].Items.Count;
            imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output512.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 1;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output512.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output512.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output512.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output512.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic;
            DicomEngine.Shutdown();



         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);

            MedicalViewerSeriesManager output = (int)cell.Tag == 0 ? _seriesManager : _seriesManager512;

            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerSyncrhonizationForm GetMedicalViewerSyncrhonizationForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();
         MedicalViewerSeriesManager output512 = form.LoadJamesHead512();

         return new MedicalViewerSyncrhonizationForm(output, output512);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerSynchronizationExample()
      {
         MedicalViewerSyncrhonizationForm myForm = GetMedicalViewerSyncrhonizationForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.SyncID-->
      </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSynchronizationType.None">
      <summary>
            No synchronization.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSynchronizationType.Automatic">
      <summary>
            The cells will be synchronized if the they have the same <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SynchronizationID" /> value.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDesignerType">
      <summary>
            Represents the enumeration that determines the type of the designer.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            This enumeration with the arguments <see cref="T:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs" />.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerDesignerType.DrawDesigner">
      <summary>
            Draw designer.
            </summary>
      <isnew>6/4/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerDesignerType.EditDesigner">
      <summary>
            Edit designer.
            </summary>
      <isnew>6/4/2011</isnew>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerDesignerType.RunDesigner">
      <summary>
            Run designer.
            </summary>
      <isnew>6/4/2011</isnew>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerScaleType">
      <summary>
            Represents the enumeration that determines the type of the zoom.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            This enumeration is used for the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ScaleType" />.
            </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ScaleType" /></example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleType.Normal">
      <summary>
            The normal zoom, zooms to the part of the image that is displayed at the center of the cell.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerScaleType.Dynamic">
      <summary>
            Dynamic Zoom, zooms to the point that the user clicked to zoom to.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPaletteType">
      <summary>
            Represents the enumeration that determines the palette used to display the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description> This enumeration is used with the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.PaletteType" /></description>
          </item>
          <item>
            <description> To disable using the palette, set this enumeration to <strong>None</strong>.</description>
          </item>
          <item>
            <description> The palette works by replacing the gray intensity values stored in the image lookup table with the values stored in the palette.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerPaletteForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)
                cell.FitImageToCell = False

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                AddHandler cell.MouseWheel, AddressOf cell_MouseWheel

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                _medicalViewer.Cells.Add(cell)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID


                cell.ActiveSubCell = cell.PageCount \ 2
                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub cell_MouseWheel(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim cell As MedicalViewerMultiCell = (CType(sender, MedicalViewerMultiCell))
                Dim paletteType As Integer = CInt(cell.SubCells(cell.ActiveSubCell).PaletteType)

                paletteType += 1

                If paletteType &gt; 9 Then
                    paletteType = 0
                End If

                cell.SubCells(cell.ActiveSubCell).PaletteType = CType(paletteType, MedicalViewerPaletteType)
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerPaletteForm() As MedicalViewerPaletteForm
            MessageBox.Show("scroll the mouse wheel to switch between built-in palettes, left click to update the window level parameters")
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerPaletteForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerPaletteExample()
            Dim myForm As MedicalViewerPaletteForm = GetMedicalViewerPaletteForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerPaletteForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerPaletteForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);
            cell.FitImageToCell = false;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.MouseWheel += new MouseEventHandler(cell_MouseWheel);


            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            _medicalViewer.Cells.Add(cell);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;


            cell.ActiveSubCell = cell.PageCount / 2;
            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void cell_MouseWheel(object sender, MouseEventArgs e)
         {
            MedicalViewerMultiCell cell = ((MedicalViewerMultiCell)sender);
            int paletteType = (int)cell.SubCells[cell.ActiveSubCell].PaletteType;

            paletteType++;

            if (paletteType &gt; 9)
               paletteType = 0;

            cell.SubCells[cell.ActiveSubCell].PaletteType = (MedicalViewerPaletteType)paletteType;
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerPaletteForm GetMedicalViewerPaletteForm()
      {
         MessageBox.Show("scroll the mouse wheel to switch between built-in palettes, left click to update the window level parameters");
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerPaletteForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerPaletteExample()
      {
         MedicalViewerPaletteForm myForm = GetMedicalViewerPaletteForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.PaletteSample-->
      </example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.None">
      <summary>
            None, use the normal gray-scale lookup table.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.Cool">
      <summary>
            Cool palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.CyanHot">
      <summary>
            Cyan Hot palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.Fire">
      <summary>
            Fire palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.ICA2">
      <summary>
            ICA2 palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.Ice">
      <summary>
            Ice palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.OrangeHot">
      <summary>
            Orange hot palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.RainbowRGB">
      <summary>
            Rainbow RGB palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.RedHot">
      <summary>
            Red hot palette.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerPaletteType.Spectrum">
      <summary>
            Spectrum palette.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType">
      <summary>
            Represents an enumeration that determines whether to show a text over or under the spy glass control, and the type of text shown.
            </summary>
      <remarks>
        <ul>
          <li>The user can use this enumeration with the properties <see cref="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.PositionText" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.ZoomText" />.</li>
          <li>Setting this enumeration to <para name="None" /> in either <see cref="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.PositionText" /> or <see cref="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.ZoomText" /> means that the text will not be shown. 
             Setting this enumeration to any other value will display the text.</li>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType.Actual">
      <summary>
            Show the actual values. When used in the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.PositionText" /> property it will display the value in pixels.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType.None">
      <summary>
            Do not display the text.
            </summary>
    </member>
    <member name="F:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType.Percentage">
      <summary>
            Display the text in a percentage form.
            </summary>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs">
      <summary>
            The <b>MedicalViewerDesignerCreatedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" /> event.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            This class is sent by the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            <para>This event is fired when one of the following actions occurred:</para><list type="number"><item><description>The user starts creating a new annotation object using the Medical Viewer actions. For more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</description></item><item><description>The user starts editing an already created annotation object, by either moving, resizing or rotating it.</description></item><item><description>The user clicks on an already created annotation object in the Run mode. To enter the run mode, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.UserMode" />.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerDesignerType,Leadtools.Annotations.AnnDesigner,System.Int32,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnObject)">
      <summary>
            The <b>MedicalViewerDesignerCreatedEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" /> event.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerDesignerType" /> enumeration that represents the type of the designer that has been created.</param>
      <param name="designer">
        <see cref="T:Leadtools.Annotations.AnnDesigner" /> object that represents the designer object.</param>
      <param name="subCellIndex">the sub-cell index of the cell that has the annotation container that fired this event.</param>
      <param name="container">
        <see cref="T:Leadtools.Annotations.AnnContainer" /> the annotation container that fired this event.</param>
      <param name="annObject">the annotation object to be created, edited, or clicked under the run mode.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Container">
      <summary>
            (Read only) Gets the annotation container that contains the annotation object that is being created, clicked under the run time mode or edited.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnContainer" /> that represents the annotation container that contains the annotation object that is being created, clicked under the run time mode or edited.
            </value>
      <remarks>
            To retrieve the index of the sub-cell that uses this container, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.SubCellIndex" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Designer">
      <summary>
            (Read only) Gets the newly created designer.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnDesigner" /> that represents the newly created designer.
            </value>
      <remarks>
            To retrieve the type of the designer created, use <see cref="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Type" />.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Object">
      <summary>
            (Read only) Gets the object that is being created, clicked under the run time mode, or edited.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnObject" /> that represents the annotation container that contains the annotation object that is being created, clicked under the run time mode, or edited.
            </value>
      <remarks>
            To retrieve the container of this object, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Container" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the sub-cell index of the cell that contains the container of the object that is being created, clicked under the run time mode, or edited.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
            Value that represents the sub-cell index of the cell that contains the container of the object that is being created, clicked under the run time mode, or edited.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Type">
      <summary>
            (Read only) Gets the type of the newly created designer.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerDesignerType" /> enumeration that determines the type of the newly created designer.
            </value>
      <remarks>
            To retrieve the designer object, use <see cref="P:Leadtools.MedicalViewer.MedicalViewerDesignerCreatedEventArgs.Designer" />.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DesignerCreated" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1">
      <summary>
            Represents a generic collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /> objects.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The Generic <a href="ms-help://Leadtools.DotNet175/Leadtools.MedicalViewer/Leadtools.MedicalViewer~Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.html">MedicalViewerPlaneCutLinesCollection</a>class provides a generic collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerPlaneCutLinesCollection</keywords>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemAdded</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">A <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemRemoved</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">A <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.Remove(`0)">
      <summary>
            Removes the specified cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">Plane Cut line to remove.</param>
      <returns>true if the element was removed successfully, otherwise it is false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.Clear">
      <summary>
            Removes all items from the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1" />.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the plane cut line from the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.Add(`0)">
      <summary>
            Appends the cut line object to the collection.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /> that represents the item to be appended.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLinesCollection`1.Insert(System.Int32,`0)">
      <summary>
            Appends the cut line object to the collection using the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to insert.</param>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /> that represents the item to be inserted.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer">
      <summary>
            the <b>MedicalViewerSeriesLocalizer</b> represents the localizer image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The localizer image is a slice extracted from the 3D object with angle different than the angle of the slices that created the 3D object.</description>
          </item>
          <item>
            <description>The localizer image is used for better 3D diagnosis.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerLocalizer : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)


                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                cell = New MedicalViewerMultiCell()
                Dim ds As DicomDataSet = New DicomDataSet()
                ds.Load("\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" &amp; "\Miller James-CT Head full Study\0023\20345460", DicomDataSetLoadFlags.None)
                Dim patientElement As DicomElement = Nothing

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImagePositionPatient, True)

                Dim doubleArray As Double() = ds.GetDoubleValue(patientElement, 0, 3)

                cell.SetImagePosition(0, Point3D.FromDoubleArray(doubleArray), True)

                patientElement = ds.FindFirstElement(Nothing, DicomTag.FrameOfReferenceUID, True)

                Dim referenceUID As String = ds.GetConvertValue(patientElement)

                cell.FrameOfReferenceUID = referenceUID

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImageOrientationPatient, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 6)

                cell.ImageOrientation = New Single() {CSng(doubleArray(0)), CSng(doubleArray(1)), CSng(doubleArray(2)), CSng(doubleArray(3)), CSng(doubleArray(4)), CSng(doubleArray(5))}

                patientElement = ds.FindFirstElement(Nothing, DicomTag.PixelSpacing, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 2)
                cell.PixelSpacing = New Point2D(CSng(doubleArray(0)), CSng(doubleArray(1)))

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.LightBlue
                cell.ShowCellBoundaries = True
                cell.Image = ds.GetImage(Nothing, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.AutoApplyVoiLut Or DicomGetImageFlags.AutoApplyModalityLut Or DicomGetImageFlags.AllowRangeExpansion)
                _medicalViewer.Cells.Add(cell)
                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerLocalizerControl() As MedicalViewerLocalizer
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerLocalizer(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerLocalizerExample()
            Dim myForm As MedicalViewerLocalizer = GetMedicalViewerLocalizerControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerLocalizer : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerLocalizer(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            cell = new MedicalViewerMultiCell();
            DicomDataSet ds = new DicomDataSet();
            ds.Load(@"\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" + "\\Miller James-CT Head full Study\\0023\\20345460", DicomDataSetLoadFlags.None);
            DicomElement patientElement = null;

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.ImagePositionPatient,
                                                 true);

            double[] doubleArray = ds.GetDoubleValue(patientElement, 0, 3);

            cell.SetImagePosition(0, Point3D.FromDoubleArray(doubleArray), true);

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.FrameOfReferenceUID,
                                                true);

            string referenceUID = ds.GetConvertValue(patientElement);

            cell.FrameOfReferenceUID = referenceUID;

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.ImageOrientationPatient,
                                                true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 6);

            cell.ImageOrientation = new float[] {(float)doubleArray[0], (float)doubleArray[1], (float)doubleArray[2], (float)doubleArray[3], (float)doubleArray[4], (float)doubleArray[5]};

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.PixelSpacing,
                                                 true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 2);
            cell.PixelSpacing = new Point2D((float)doubleArray[0], (float)doubleArray[1]);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.LightBlue;
            cell.ShowCellBoundaries = true;
            cell.Image = ds.GetImage(null, 0, 0, RasterByteOrder.Gray, DicomGetImageFlags.AutoApplyVoiLut | DicomGetImageFlags.AutoApplyModalityLut | DicomGetImageFlags.AllowRangeExpansion);
            _medicalViewer.Cells.Add(cell);
            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerLocalizer GetMedicalViewerLocalizerControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerLocalizer(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerLocalizerExample()
      {
         MedicalViewerLocalizer myForm = GetMedicalViewerLocalizerControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.ReferenceLineExample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer.#ctor(Leadtools.MedicalViewer.MedicalViewerImageData)">
      <summary>
            Initializes a new <b>MedicalViewerSeriesLocalizer</b> class object with explicit parameters.
            </summary>
      <param name="localizeData">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /> that contains the Localizer image Data.
            </param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer.LocalizerData">
      <summary>
            Gets or sets the localizer image data.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /> that contains the Localizer image Data.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerOffset">
      <summary>
            Represents the class that contains the properties of the offset action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the offset action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
        <list type="bullet">
          <item>
            <description>Click and drag the mouse to start the effect. When the assigned mouse button is released the action ends. </description>
          </item>
          <item>
            <description>Dragging the mouse to the left moves the image to the left. </description>
          </item>
          <item>
            <description>Dragging the mouse to the right moves the image to the right. </description>
          </item>
          <item>
            <description>Dragging the mouse up moves the image up. </description>
          </item>
          <item>
            <description>Dragging the mouse down moves the image down. </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example changes the offset of the image of the first cell</para>
        <code lang="VB">      Public Sub MedicalViewerOffset1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim offset As MedicalViewerOffset = CType(cell.GetActionProperties(MedicalViewerActionType.Offset, 0), MedicalViewerOffset)
         offset.X += 50
         offset.Y += 50
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0)
         offset.Dispose()

         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerOffset1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerOffset offset = (MedicalViewerOffset)cell.GetActionProperties(MedicalViewerActionType.Offset, 0);
         offset.X += 50;
         offset.Y += 50;
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0);
         offset.Dispose();

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerOffset1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerOffset.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerOffset"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>This examples changes the offset of the image of the first cell</para>
        <code lang="VB">      Public Sub MedicalViewerOffset2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim offset As MedicalViewerOffset = New MedicalViewerOffset()
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         offset.X = 50
         offset.Y = 50
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0)
         offset.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerOffset2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerOffset offset = new MedicalViewerOffset();
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         offset.X = 50;
         offset.Y = 50;
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0);
         offset.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerOffset2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerOffset.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerOffset"></see> class with specified x and y offsets.
            </summary>
      <medaddon>yes</medaddon>
      <param name="x">the x offset of the image.</param>
      <param name="y">the y offset of the image.</param>
      <example>
        <para>This example changes the offset of the image of the first cell</para>
        <code lang="VB">      Public Sub MedicalViewerOffset3()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim offset As MedicalViewerOffset = New MedicalViewerOffset(50, 50)
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0)
         offset.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerOffset3()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerOffset offset = new MedicalViewerOffset(50, 50);
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0);
         offset.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerOffset3-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerOffset"></see> class with specified x and y offsets, mouse sensitivity, mouse reset, and cursor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="x">The x offset of the image.</param>
      <param name="y">The y offset of the image.</param>
      <param name="sensitivity">Integer value that represents the mouse sensitivity, in percent. Default is 100. A value of 100 indicates that the amount of change in the action is equal to the amount of movement of the mouse. For example, if the mouse is moved 1 pixel, the action changes by 1 unit. A value of 50 indicates that the amount of change in the action is 50 percent of the amount of mouse movement. For example, if the mouse is moved 2 pixels, the action only changes by one unit.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false. </param>
      <param name="cursor">Default cursor for the action.</param>
      <example>
        <para>This example changes the offset of the image of the first cell</para>
        <code lang="VB">      Public Sub MedicalViewerOffset4()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim offset As MedicalViewerOffset = New MedicalViewerOffset(50, 50, 100, True, Cursors.SizeAll)
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0)
         offset.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerOffset4()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerOffset offset = new MedicalViewerOffset(50, 50, 100, true, Cursors.SizeAll);
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.SetActionProperties(MedicalViewerActionType.Offset, offset, 0);
         offset.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerOffset4-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerOffset.X">
      <summary>
            Gets or sets the value that indicates the X offset of the image.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the X offset of the image. In other words, it is the horizontal distance between the center of the image and the center of the cell. The default value is 0.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerOffset.#ctor">MedicalViewerOffset()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerOffset.Y">
      <summary>
            Gets or sets the value that indicates the Y offset of the image.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the Y offset of the image. In other word, it's the vertical distance between the center of the image and the center of the cell. The default is 0.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerOffset.#ctor">MedicalViewerOffset()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler">
      <summary>
            Represents the class that contains the properties of the annotation ruler action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>To set the properties of the ruler action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" />  method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Change the properties for the ruler annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationRulerExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim ruler As MedicalViewerAnnotationRuler = New MedicalViewerAnnotationRuler()
         ruler.AnnotationColor = Color.FromArgb(0, 0, 255)
         ruler.Flags = MedicalViewerAnnotationFlags.AllObjects
         ruler.SimpleRuler = True
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRuler, ruler)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationRulerExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationRuler ruler = new MedicalViewerAnnotationRuler();
         ruler.AnnotationColor = Color.FromArgb(0, 0, 255);
         ruler.Flags = MedicalViewerAnnotationFlags.AllObjects;
         ruler.SimpleRuler = true;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRuler, ruler);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationRuler-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="simpleRuler">true to create a ruler without tick marks (which means that the ruler will be like a line; otherwise, false.</param>
      <example>
        <para>Change the properties for the ruler annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationRulerExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim ruler As MedicalViewerAnnotationRuler = New MedicalViewerAnnotationRuler(True)
         ruler.AnnotationColor = Color.FromArgb(0, 128, 0)
         ruler.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRuler, ruler)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationRulerExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationRuler ruler = new MedicalViewerAnnotationRuler(true);
         ruler.AnnotationColor = Color.FromArgb(0, 128, 0);
         ruler.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRuler, ruler);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationRuler2-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler.SimpleRuler">
      <summary>
            Indicates whether to draw the ruler along with the tick marks.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to draw the ruler without tick marks (which means that the ruler will simply be a line); otherwise, false.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRuler" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1">
      <summary>
            Represents a collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> objects.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            The <b>MedicalViewerSynchronizationObjectCollection</b> class implements the 
            .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerSynchronizationObjectCollection</keywords>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.IsSynchronized(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Determines if the <b>type</b> type is already synchronized.
            </summary>
      <isnew>6/4/2011</isnew>
      <returns>
            true if the <b>type</b> type is already synchronized; otherwise, false.
            </returns>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that is being 
            checked whether it is already synchronized or not.
            </param>
      <remarks>
            The engine searches inside the  
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1" /> 
            collection to determine whether a synchronization object of the specified type has already been added.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.CanSynchronize(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Determines whether the <b>type</b> type supports synchronization.
            </summary>
      <isnew>6/4/2011</isnew>
      <returns>
            true if the <b>type</b> type supports synchronization; otherwise, false.
            </returns>
      <param name="action">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that is being 
            checked as to whether it supports synchronization.
            </param>
      <remarks>
            Currently the only type that supports synchronization 
            is <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.Stack. 
            It's supported via the 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1" />
            class.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1"></see> class.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Remove(`0)">
      <summary>
            Removes the specified synchronization object.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">object to remove.</param>
      <returns>true if the synchronization object was removed successfully; otherwise, false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Add(`0)">
      <summary>
            Appends the synchronization object to the collection.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> that represents the item to be appended.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.AddRange(System.Collections.Generic.ICollection{`0})">
      <summary>
            Appends an array of synchronization objects to the collection.
            </summary>
      <param name="objectArray"> An array of <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> that represents the items to be appended.</param>
      <noremarks />
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Clear">
      <summary>
            Overridden. Removes all items from the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1" />.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Insert(System.Int32,`0)">
      <summary>
            Appends the synchronization object to the collection using the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to insert.</param>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> that represents the item to be inserted.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the synchronization object from the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Parent">
      <summary>
            (Read only) Gets the parent of the collection.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> cell that represents the parent of this synchronization collection.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1.Item(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            (Read only) An indexer definition, which allows client code to use [] notation on the class instance itself.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> that represents the object with <b>type</b> type.
            </value>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that will be used as index of the collection</param>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerScale">
      <summary>
            Represents the class that contains the properties of the scale action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the scale action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
        <list type="bullet">
          <item>
            <description>Click and hold the mouse to start the effect. When the assigned mouse button is released the action ends. </description>
          </item>
          <item>
            <description>Dragging the mouse down enlarges the image. </description>
          </item>
          <item>
            <description>Dragging the mouse up shrinks the image. </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>This example changes the Scale of an image</para>
        <code lang="VB">      Public Sub MedicalViewerScaleExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim scale As MedicalViewerScale = CType(cell.GetActionProperties(MedicalViewerActionType.Scale, 0), MedicalViewerScale)
         scale.Scale *= 2
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0)
         scale.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerScaleExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerScale scale = (MedicalViewerScale)cell.GetActionProperties(MedicalViewerActionType.Scale, 0);
         scale.Scale *= 2;
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0);
         scale.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerScale1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerScale.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerScale"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerScale.Scale" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerScale.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerScale"></see> class with a specified scaling factor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scale">The scaling factor</param>
      <example>
        <para>Change the Scale of an image</para>
        <code lang="VB">      Public Sub MedicalViewerScaleExample3()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim scale As MedicalViewerScale = New MedicalViewerScale(200)
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0)
         scale.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerScaleExample3()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerScale scale = new MedicalViewerScale(200);
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0);
         scale.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerScale3-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerScale.#ctor(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerScale"></see> class with specified scaling, mouse sensitivity, mouse reset, and cursor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="scale">An integer value that indicates the scaling factor</param>
      <param name="sensitivity">An integer value that represents the mouse sensitivity, in percent. Default is 100. A value of 100 indicates that the amount of change in the action is equal to the amount of movement of the mouse. For example, if the mouse is moved 1 pixel, the action changes by 1 unit. A value of 50 indicates that the amount of change in the action is 50 percent of the amount of mouse movement. For example, if the mouse is moved 2 pixels, the action only changes by one unit.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false.</param>
      <param name="cursor">Default cursor for the action.</param>
      <example>
        <para>This example changes the Scale of an image, and change the scale action properties.</para>
        <code lang="VB">      Public Sub MedicalViewerScaleExample4()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim scale As MedicalViewerScale = New MedicalViewerScale(200, 200, False, Cursors.SizeNS)
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0)
         scale.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerScaleExample4()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerScale scale = new MedicalViewerScale(200, 200, false, Cursors.SizeNS);
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0);
         scale.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerScale4-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerScale.Scale">
      <summary>
            Gets or sets the value that indicates the scaling factor, given as a percentage.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the scaling factor, given in percentage. Default is 100.</value>
      <example>
        <para>This example changes the Scale of an image</para>
        <code lang="VB">      Public Sub MedicalViewerScaleExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim scale As MedicalViewerScale = New MedicalViewerScale()
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         scale.Scale = 200
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0)
         scale.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerScaleExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerScale scale = new MedicalViewerScale();
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         scale.Scale = 200;
         cell.SetActionProperties(MedicalViewerActionType.Scale, scale, 0);
         scale.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerScale2-->
      </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerReferenceLine">
      <summary>
            Represents the class that contains the two points used to draw the reference line.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description> Keep in mind that in order to show the reference line of this cell on the other cells correctly, you will need to set the following properties by retrieving their values from the DICOM Data Set:
            <list type="bullet"><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.FrameOfReferenceUID">FrameOfReferenceUID</see></description></item><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation">ImageOrientation</see></description></item><item><description><see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)">SetImagePosition</see> to set the image position for all the frames in the cell.</description></item><item><description><see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.PixelSpacing">PixelSpacing</see></description></item></list></description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerReferenceLine.#ctor">
      <summary>
            Initializes a new MedicalViewerReferenceLine class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerReferenceLine.#ctor(Leadtools.MedicalViewer.Point2D,Leadtools.MedicalViewer.Point2D)">
      <summary>
            Initializes a new MedicalViewerReferenceLine class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="point1"> A <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the first point of the reference line.</param>
      <param name="point2"> A <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the second point of the reference line.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLine.Point1">
      <summary>
            Gets or sets the <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the first point of the reference line.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the first point of the reference line.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerReferenceLine.Point2">
      <summary>
            Gets or sets the <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the second point of the reference line.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the second point of the reference line.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs">
      <summary>
            The MedicalViewerRegionCreatedEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.RegionCreated" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This function will make the cell set the region handle for all the frame if the user create or updated a region on one of the frames.

      Public Sub MedicalViewerRegionExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         AddHandler (CType(medicalViewer.Cells(0), MedicalViewerMultiCell)).RegionCreated, AddressOf medicalViewer_RegionCreated
         AddHandler (CType(medicalViewer.Cells(1), MedicalViewerMultiCell)).RegionCreated, AddressOf medicalViewer_RegionCreated

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_RegionCreated(ByVal sender As Object, ByVal e As MedicalViewerRegionCreatedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim i As Integer

         cell.SaveRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"))

         i = 0
         Do While i &lt; cell.Image.PageCount
            cell.LoadRegion(Path.Combine(LEAD_VARS.ImagesDir, "Test.rgn"), i)
            i += 1
         Loop
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This function will make the cell set the region handle for all the frame if the user create or updated a region on one of the frames.

      public void MedicalViewerRegionExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         ((MedicalViewerMultiCell)medicalViewer.Cells[0]).RegionCreated += new EventHandler&lt;MedicalViewerRegionCreatedEventArgs&gt;(medicalViewer_RegionCreated);
         ((MedicalViewerMultiCell)medicalViewer.Cells[1]).RegionCreated += new EventHandler&lt;MedicalViewerRegionCreatedEventArgs&gt;(medicalViewer_RegionCreated);

         myForm.ShowDialog();
      }

      void medicalViewer_RegionCreated(object sender, MedicalViewerRegionCreatedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         int i;

         cell.SaveRegion(LeadtoolsExamples.Common.ImagesPath.Path + "Out_Test.rgn");

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            cell.LoadRegion(LeadtoolsExamples.Common.ImagesPath.Path + "Out_Test.rgn", i);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerRegionCreatedEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs.#ctor(System.Drawing.Region,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerRegionState)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="region">A <see cref="T:System.Drawing.Region" /> object that has been added or changed.</param>
      <param name="cellIndex">The zero-based index of the cell that received the region update.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that received the region update.</param>
      <param name="state">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionState" /> value that 
            represents the type of the region update made.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs.Region">
      <summary>
            (Read only) Gets the <see cref="T:System.Drawing.Region" /> object that has been added or changed.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Drawing.Region" /> object that has been added or changed.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs.CellIndex">
      <summary>
            (Read only) Gets a value that indicates the index of the cell that received the region update. This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell that received the region update. This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets a value that indicates the index of the sub-cell that received the region update.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the sub-cell that received the region update.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs.State">
      <summary>
            (Read only) Gets an enumerated value that indicates the type of the region update made.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionState" /> value that represents the type of the region update made.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegionCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPaintEventArgs">
      <summary>
            The MedicalViewerPaintEventArgs class provides information about the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the item.</param>
      <param name="clipRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle in which to paint.</param>
      <param name="cellIndex">the index of the cell that that the user tag will be drawn on.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that that the user tag will be drawn on.</param>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintEventArgs.CellIndex">
      <summary>
            Gets or sets the value that indicates the index of the cell that will be painted. This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell that will be painted.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintEventArgs.SubCellIndex">
      <summary>
            Gets or sets the value that indicates the index of the sub-cell that will be painted.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the sub-cell that will be painted.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs">
      <summary>
            The <b>MedicalViewerDrawingAnnotationsEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" /> event.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            This class is sent by the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            <para>The event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" /> is fired right before drawing the annotation object using the Medical Viewer actions. For more information on the action, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</para><para>The event <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" /> is used to set any default annotation value.</para></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.#ctor(System.Int32,Leadtools.Annotations.AnnObject,Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.Annotations.AnnContainer)">
      <summary>
            The <b>MedicalViewerDrawingAnnotationsEventArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" /> event.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="subCellIndex"> the sub-cell index of the cell that has the annotation container that fired the event.</param>
      <param name="annObject"> the annotation object to be created.</param>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that represents the type of the annotation object to be created.</param>
      <param name="container">
        <see cref="T:Leadtools.Annotations.AnnContainer" /> the annotation container that fired the event.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.Container">
      <summary>
            (Read only) Gets the annotation container that contains the annotation object to be created.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnContainer" /> that represents the annotation container that contains the annotation object to be created.
            </value>
      <remarks>
            To retrieve the index of the sub-cell that uses this container, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.SubCellIndex" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.Object">
      <summary>
            (Read only) Gets the object that is being created.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnObject" /> that represents the annotation container that contains the annotation object that is being created.
            </value>
      <remarks>
            To retrieve the container of this object, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.Container" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the sub-cell index of the cell that contains the container of the object that is being created.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
            Value that represents the sub-cell index of the cell that contains the container of the object that is being created.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDrawingAnnotationsEventArgs.Type">
      <summary>
            (Read only) Gets the enumeration value that determines the type of the object being created.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that represents the type of the annotation object that is being created.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.StartDrawingAnnotation" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel">
      <summary>
            Represents the class that contains the properties for the window level action.
            </summary>
      <medaddon>yes</medaddon>
      <keywords>WindowLevel</keywords>
      <remarks>
        <para>To set the properties of the window level action, call 
            the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method. 
            The mouse controls the actions as follows:</para>
        <list type="bullet">
          <item>
            <description>Click and hold the mouse to start the effect. When the assigned mouse button is released the action ends. </description>
          </item>
          <item>
            <description>Dragging the mouse to the left decreases the center parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse to the right increases the center parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse up decreases the width parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse down increases the width parameter. </description>
          </item>
          <item>
            <description>
            </description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>The following example changes the window level properties and applies it to the first image.</para>
        <code lang="VB">      Private Class MedicalViewerForm4 : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl4() As MedicalViewerForm4
            Return New MedicalViewerForm4()
        End Function


        Public Sub MedicalViewerWindowLevelExample4()
            Dim myForm As MedicalViewerForm4 = GetMedicalControl4()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim windowLevel As MedicalViewerWindowLevel = New MedicalViewerWindowLevel()
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            windowLevel.LookupTableType = MedicalViewerLookupTableType.Exponential
            windowLevel.StartColor = Color.FromArgb(0, 0, 0)
            windowLevel.EndColor = Color.FromArgb(255, 255, 0)
            windowLevel.Sensitivity = 500
            windowLevel.Width = 100
            windowLevel.Center = 200
            windowLevel.ActionCursor = System.Windows.Forms.Cursors.VSplit
            windowLevel.RelativeSensitivity = True
            windowLevel.CircularMouseMove = False

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0)
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm4 : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm4()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm4 GetMedicalControl4()
      {
         return new MedicalViewerForm4();
      }


      public void MedicalViewerWindowLevelExample4()
      {
         MedicalViewerForm4 myForm = GetMedicalControl4();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerWindowLevel windowLevel = new MedicalViewerWindowLevel();
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         windowLevel.LookupTableType = MedicalViewerLookupTableType.Exponential;
         windowLevel.StartColor = Color.FromArgb(0, 0, 0);
         windowLevel.EndColor = Color.FromArgb(255, 255, 0);
         windowLevel.Sensitivity = 500;
         windowLevel.Width = 100;
         windowLevel.Center = 200;
         windowLevel.ActionCursor = System.Windows.Forms.Cursors.VSplit;
         windowLevel.RelativeSensitivity = true;
         windowLevel.CircularMouseMove = false;

         cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0);
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevel4-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerLookupTableType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel"></see> class with specified starting color, ending color, width, center and Lookup table type.
            </summary>
      <medaddon>yes</medaddon>
      <param name="startColor">The color on the low end side of the Lookup table.</param>
      <param name="endColor">The color on the high end side of the Lookup table.</param>
      <param name="width">The width of the Lookup table.</param>
      <param name="center">The center of the Lookup table.</param>
      <param name="lookupTableType">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerLookupTableType">MedicalViewerLookupTableType</see>MedicalViewerLookupTableType value that represents the type of Lookup table.</param>
      <example>
        <para>The following example changes the window level properties and applies it to the first image.</para>
        <code lang="VB">        Private Class MedicalViewerForm2 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl2() As MedicalViewerForm2
            Return New MedicalViewerForm2()
        End Function


        Public Sub MedicalViewerWindowLevelExample2()
            Dim myForm As MedicalViewerForm2 = GetMedicalControl2()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim windowLevel As MedicalViewerWindowLevel = New MedicalViewerWindowLevel(Color.FromArgb(0, 0, 0), Color.FromArgb(255, 0, 0), 100, 200, MedicalViewerLookupTableType.Exponential)
            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0)
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm2 : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm2()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm2 GetMedicalControl2()
      {
         return new MedicalViewerForm2();
      }


      public void MedicalViewerWindowLevelExample2()
      {
         MedicalViewerForm2 myForm = GetMedicalControl2();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = new MedicalViewerWindowLevel(Color.FromArgb(0, 0, 0), Color.FromArgb(255, 0, 0), 100, 200, MedicalViewerLookupTableType.Exponential);
         cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0);
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevel2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerLookupTableType,System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel"></see> class with specified starting color, ending color, width, center, Lookup table type, mouse sensitivity, mouse reset, and cursor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="startColor">The color on the low end side of the Lookup table.</param>
      <param name="endColor">The color on the high end side of the Lookup table.</param>
      <param name="width">The width of the Lookup table.</param>
      <param name="center">The center of the Lookup table.</param>
      <param name="lookupTableType">The type of Lookup table.</param>
      <param name="sensitivity">Integer value that represents the mouse sensitivity, in percent. The default is 100. This means when the user moves the mouse one pixel, the values (width, center or any other factor) will change by 1 unit. If the value is set to 200 when the mouse is moved 2 pixels the values will change 1 unit.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false.</param>
      <param name="cursor">Default cursor for the action.</param>
      <example>
        <para>The following example changes the window level properties and applies it to the first image.</para>
        <code lang="VB">        Private Class MedicalViewerForm3 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

      Private Function GetMedicalControl3() As MedicalViewerForm3
         Return New MedicalViewerForm3()
      End Function


      Public Sub MedicalViewerWindowLevelExample3()
         Dim myForm As MedicalViewerForm3 = GetMedicalControl3()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevel As MedicalViewerWindowLevel = New MedicalViewerWindowLevel(Color.FromArgb(0, 0, 0), Color.FromArgb(255, 0, 0), 100, 200, MedicalViewerLookupTableType.Exponential, 200, True, Cursors.Cross)
         cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0)
         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm3 : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm3()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm3 GetMedicalControl3()
      {
         return new MedicalViewerForm3();
      }


      public void MedicalViewerWindowLevelExample3()
      {
         MedicalViewerForm3 myForm = GetMedicalControl3();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = new MedicalViewerWindowLevel(Color.FromArgb(0, 0, 0), Color.FromArgb(255, 0, 0), 100, 200, MedicalViewerLookupTableType.Exponential, 200, true, Cursors.Cross);
         cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevel, 0);
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerWindowLevel3-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.StartColor">
      <summary>
            Gets or sets the color that represents the starting color used for the Lookup table.
            </summary>
      <medaddon>yes</medaddon>
      <value>A color that represents the color on the low end side of the Lookup table.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.EndColor">
      <summary>
            Gets or sets the color that represents the ending color used for the Lookup table.
            </summary>
      <medaddon>yes</medaddon>
      <value>A color that represents the color on the high end side of the Lookup table.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.RelativeSensitivity">
      <summary>
            Gets or sets the value that determines whether to use the relative sensitivity feature.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to use the relative sensitivity feature; otherwise, false.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>The relative sensitivity is a feature that allows the control to adjust the window level action mouse sensitivity based on the image lookup table type. This raises the sensitivity level on the images with relatively large lookup tables in order to achieve smoother results.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.Width">
      <summary>
            Gets or sets the value that represents the width of the Lookup table.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that represents the width of the Lookup table.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.Center">
      <summary>
            Gets or sets the value that represents the center of the Lookup table.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that represents the center of the Lookup table.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerWindowLevel.LookupTableType">
      <summary>
            Gets or sets the enumerated value that indicates the type of Lookup table.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that indicates the type of Lookup table.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerWindowLevel.#ctor" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle">
      <summary>
             Represents the class that contains the properties of the annotation rectangle action.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the annotation rectangle action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
             Click and drag to create a rectangular annotation object. 
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para>This example changes the properties for the rectangle annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationRectangleExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim rectangle As MedicalViewerAnnotationRectangle = New MedicalViewerAnnotationRectangle()
         rectangle.AnnotationColor = Color.FromArgb(0, 0, 255)
         rectangle.Flags = MedicalViewerAnnotationFlags.AllObjects
         rectangle.CreateFromCenter = True
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRectangle, rectangle)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationRectangleExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationRectangle rectangle = new MedicalViewerAnnotationRectangle();
         rectangle.AnnotationColor = Color.FromArgb(0, 0, 255);
         rectangle.Flags = MedicalViewerAnnotationFlags.AllObjects;
         rectangle.CreateFromCenter = true;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRectangle, rectangle);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationRectangle1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="createFromCenter">true to create the ellipse from center, false to create from edge.</param>
      <example>
        <para>This example changes the properties for the rectangle annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationRectangleExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim rectangle As MedicalViewerAnnotationRectangle = New MedicalViewerAnnotationRectangle(True)
         rectangle.AnnotationColor = Color.FromArgb(0, 128, 0)
         rectangle.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRectangle, rectangle)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationRectangleExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationRectangle rectangle = new MedicalViewerAnnotationRectangle(true);
         rectangle.AnnotationColor = Color.FromArgb(0, 128, 0);
         rectangle.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationRectangle, rectangle);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationRectangle2-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationRectangle.CreateFromCenter">
      <summary>
            Indicates whether to create the object from the center or from the edge.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to create the object from the center, false to create it from the edge.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationHilite" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle">
      <summary>
            Represents the class that contains the properties of the annotation angle action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>To set the properties of the annotation angle action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" />, and to retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</description>
          </item>
          <item>
            <description>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Change the color of all the selected angle objects inside the medical viewer.</para>
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)


            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.AnnotationAngle)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.AnnotationAngle, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function


      Public Sub MedicalViewerAnnotationAngleExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim angle As MedicalViewerAnnotationAngle = New MedicalViewerAnnotationAngle()
         angle.AnnotationColor = Color.FromArgb(0, 0, 255)
         angle.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationAngle, angle)

         myForm.ShowDialog()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);


            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.AnnotationAngle);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationAngle, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }


      public void MedicalViewerAnnotationAngleExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationAngle angle = new MedicalViewerAnnotationAngle();
         angle.AnnotationColor = Color.FromArgb(0, 0, 255);
         angle.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationAngle, angle);

         myForm.ShowDialog();
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationAngle-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationAngle" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAlpha">
      <summary>
            Represents the class that contains the properties of the alpha channel.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the alpha channel, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para> Alpha is the standard name for the Factor Value that indicates the factor to be applied to the 
            lookup table. It is important to set the value of the lookup table to one of the following types: Sigmoid, 
            Logarithmic or exponential. Valid values range from -1000 to 1000.</para>
        <para>The mouse controls the actions as follows:</para>
        <list type="bullet">
          <item>
            <description>Click and hold the mouse to start the effect. When the assigned mouse button is released the action ends.</description>
          </item>
          <item>
            <description>Dragging the mouse to the left decreases the center parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse to the right increases the center parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse up decreases the width parameter. </description>
          </item>
          <item>
            <description>Dragging the mouse down increases the width parameter. </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Change the alpha factor of an image</para>
        <code lang="VB">      Public Sub MedicalViewerAlphaExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevel As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

         Select Case windowLevel.LookupTableType
            Case MedicalViewerLookupTableType.Exponential, MedicalViewerLookupTableType.Logarithmic, MedicalViewerLookupTableType.Sigmoid
               Dim alpha As MedicalViewerAlpha = CType(cell.GetActionProperties(MedicalViewerActionType.Alpha, 0), MedicalViewerAlpha)
               alpha.Alpha += 100
               cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0)
               alpha.Dispose()
            Case Else
         End Select
         windowLevel.Dispose()
         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAlphaExample1()
      {
         MedicalViewerForm myForm  = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

         switch(windowLevel.LookupTableType)
         {
            case MedicalViewerLookupTableType.Exponential:
            case MedicalViewerLookupTableType.Logarithmic:
            case MedicalViewerLookupTableType.Sigmoid:
               MedicalViewerAlpha alpha = (MedicalViewerAlpha)cell.GetActionProperties(MedicalViewerActionType.Alpha, 0);
               alpha.Alpha += 100;
               cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0);
               alpha.Dispose();
               break;
            default:
               break;
         }
         windowLevel.Dispose();
         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAlpha1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAlpha.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAlpha"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>Change the alpha factor of an image</para>
        <code lang="VB">      Public Sub MedicalViewerAlphaExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevel As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

         Select Case windowLevel.LookupTableType
            Case MedicalViewerLookupTableType.Exponential, MedicalViewerLookupTableType.Logarithmic, MedicalViewerLookupTableType.Sigmoid
               Dim alpha As MedicalViewerAlpha = New MedicalViewerAlpha()
               alpha.Alpha = 100
               If cell.IsActionAdded(MedicalViewerActionType.Alpha) Then
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0)
               End If
               alpha.Dispose()
            Case Else
         End Select
         windowLevel.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerAlphaExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

         switch (windowLevel.LookupTableType)
         {
            case MedicalViewerLookupTableType.Exponential:
            case MedicalViewerLookupTableType.Logarithmic:
            case MedicalViewerLookupTableType.Sigmoid:
               MedicalViewerAlpha alpha = new MedicalViewerAlpha();
               alpha.Alpha = 100;
               if (cell.IsActionAdded(MedicalViewerActionType.Alpha))
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0);
               alpha.Dispose();
               break;
            default:
               break;
         }
         windowLevel.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerAlpha2-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAlpha.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAlpha"></see> class with a specified alpha factor.
            </summary>
      <medaddon>yes</medaddon>
      <param name="alpha">The alpha factor.</param>
      <example>
        <para>Change the alpha factor of an image</para>
        <code lang="VB">      Public Sub MedicalViewerAlphaExample3()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevel As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

         Select Case windowLevel.LookupTableType
            Case MedicalViewerLookupTableType.Exponential, MedicalViewerLookupTableType.Logarithmic, MedicalViewerLookupTableType.Sigmoid
               Dim alpha As MedicalViewerAlpha = New MedicalViewerAlpha(100)
               If cell.IsActionAdded(MedicalViewerActionType.Alpha) Then
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0)
               End If
               alpha.Dispose()
            Case Else
         End Select
         windowLevel.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerAlphaExample3()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

         switch (windowLevel.LookupTableType)
         {
            case MedicalViewerLookupTableType.Exponential:
            case MedicalViewerLookupTableType.Logarithmic:
            case MedicalViewerLookupTableType.Sigmoid:
               MedicalViewerAlpha alpha = new MedicalViewerAlpha(100);
               if (cell.IsActionAdded(MedicalViewerActionType.Alpha))
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0);
               alpha.Dispose();
               break;
            default:
               break;
         }
         windowLevel.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerAlpha3-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAlpha.#ctor(System.Int32,System.Int32,System.Boolean,System.Windows.Forms.Cursor)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAlpha"></see> class with a specified alpha factor, mouse sensitivity, mouse behavior and cursor parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="alpha">The alpha factor.</param>
      <param name="sensitivity">An integer value that represents the mouse sensitivity, in percent. Possible values are 1 - 100. Default is 100. A value of 100 indicates that the amount of change in the action is equal to the amount of movement of the mouse. For example, if the mouse is moved 1 pixel, the action changes by 1 unit. A value of 50 indicates that the amount of change in the action is 50 percent of the amount of mouse movement. For example, if the mouse is moved 2 pixels, the action only changes by one unit.</param>
      <param name="circularMouseMove">true to make the mouse reset when it reaches the side of the container (when the mouse resets, if it is dragged to one side of the container, it will disappear from that side and reappear on the opposite side of the container); otherwise, false.</param>
      <param name="cursor">Default cursor for the action.</param>
      <example>
        <para>Change the alpha factor of an image</para>
        <code lang="VB">      Public Sub MedicalViewerAlphaExample4()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim windowLevel As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

         Select Case windowLevel.LookupTableType
            Case MedicalViewerLookupTableType.Exponential, MedicalViewerLookupTableType.Logarithmic, MedicalViewerLookupTableType.Sigmoid
               Dim alpha As MedicalViewerAlpha = New MedicalViewerAlpha(100, 100, False, Cursors.SizeWE)
               If cell.IsActionAdded(MedicalViewerActionType.Alpha) Then
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0)
               End If
               alpha.Dispose()
            Case Else
         End Select
         windowLevel.Dispose()
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerAlphaExample4()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerWindowLevel windowLevel = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

         switch (windowLevel.LookupTableType)
         {
            case MedicalViewerLookupTableType.Exponential:
            case MedicalViewerLookupTableType.Logarithmic:
            case MedicalViewerLookupTableType.Sigmoid:
               MedicalViewerAlpha alpha = new MedicalViewerAlpha(100, 100, false, Cursors.SizeWE);
               if (cell.IsActionAdded(MedicalViewerActionType.Alpha))
                  cell.SetActionProperties(MedicalViewerActionType.Alpha, alpha, 0);
               alpha.Dispose();
               break;
            default:
               break;
         }
         windowLevel.Dispose();
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerAlpha4-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAlpha.Alpha">
      <summary>
            Gets or sets the value that indicates the alpha factor.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the alpha factor in the function operation specified in the FillType property of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerWindowLevel" />. This property is used only if FillType is Exponential, Logarithmic or Sigmoid. If none of those flags are selected, the value of the Factor can be any integer (+/-). If the Logarithmic flag is selected, the Factor value should be &gt;= 0. If the Factor = 0, the lookup table will be filled linearly.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerAlpha.#ctor">Leadtools.MedicalViewer.MedicalViewerAlpha()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnimationInformationEventArgs">
      <summary>
            The MedicalViewerAnimationInformationEventArgs class provides data for various MedicalViewer events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.AnimationStarted" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.AnimationStopped" /></description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))

            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(cell1)


                ' add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel)
            cell1.AddAction(MedicalViewerActionType.Alpha)
            cell1.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      Public Sub MedicalViewerAnimationInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell1.AnimationStarted, AddressOf medicalViewer_AnimationStarted
         AddHandler cell1.AnimationStopped, AddressOf medicalViewer_AnimationStopped

         cell1.Animation.Animated = True
         cell1.Animation.Animated = False
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnimationStopped(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has stopped")
      End Sub

      Private Sub medicalViewer_AnimationStarted(ByVal sender As Object, ByVal e As MedicalViewerAnimationInformationEventArgs)
         MessageBox.Show("Animation has started")
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 1, 1);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(cell1);


            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example notifies the user when the animation has started or stopped using the AtartAnimation and StopAnimation procedures.

      public void MedicalViewerAnimationInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell1.AnimationStarted += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStarted);
         cell1.AnimationStopped += new EventHandler&lt;MedicalViewerAnimationInformationEventArgs&gt;(medicalViewer_AnimationStopped);

         cell1.Animation.Animated = true;
         cell1.Animation.Animated = false;
         myForm.ShowDialog();
      }

      void medicalViewer_AnimationStopped(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has stopped");
      }

      void medicalViewer_AnimationStarted(object sender, MedicalViewerAnimationInformationEventArgs e)
      {
         MessageBox.Show("Animation has started");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnimationInformationEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnimationInformationEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimationInformationEventArgs"></see> class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell which has its animation engine started or stopped.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimationInformationEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell which has its animation engine started or stopped. This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell which has its animation engine started or stopped.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimationInformationEventArgs" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1">
      <summary>
            Represents a generic collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine" /> objects.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The Generic <b>MedicalViewerDoublePlaneCutLinesCollection</b> class provides a generic collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerDoublePlaneCutLinesCollection</keywords>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemAdded</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">A <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Overrides the <see cref="M:Leadtools.RasterCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">Leadtools.RasterCollection.OnItemRemoved</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">A <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.Remove(`0)">
      <summary>
            Removes the specified cell.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">Plane Cut line to remove.</param>
      <returns>true if the element was removed successfully, otherwise it is false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the plane cut line from the specified index.
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.Add(`0)">
      <summary>
            Appends the double cut line object to the collection.
            </summary>
      <medaddon>yes</medaddon>
      <param name="item">The <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine" /> that represents the item to be appended.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLinesCollection`1.Insert(System.Int32,`0)">
      <summary>
            Appends the double cut line object to the collection using the specified index..
            </summary>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to insert.</param>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine" /> that represents the item to be inserted.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine">
      <summary>
            Represents the class that is used to create and adjust a double oblique cut plane.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            An oblique cut plane allows the user to view an organ from any angle (i.e. 360 degree). It creates a new cell with an image that contains the results of the clipping. The new cell is a Derivative cell.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.#ctor">
      <summary>
            Initializes a new <b>MedicalViewerDoublePlaneCutLine</b> class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.#ctor(Leadtools.MedicalViewer.MedicalViewerCell,Leadtools.MedicalViewer.MedicalViewerCell)">
      <summary>
            Initializes a new <b>MedicalViewerDoublePlaneCutLine</b> class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="firstDerivativeCell">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class that contains the derivative cell of one of the cut-planes.</param>
      <param name="secondDerivativeCell">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> class that contains the derivative cell of one of the cut-planes. </param>
      <example>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.#ctor(Leadtools.MedicalViewer.Point2D,Leadtools.MedicalViewer.Point2D)">
      <summary>
            Initializes a new <b>MedicalViewerDoublePlaneCutLine</b> class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="point1">
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> struct that contains the x and y coordinates of the first line point. </param>
      <param name="point2">
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> struct that contains the x and y coordinates of the second line point. </param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.FirstDerivativeCell">
      <summary>
            (Read only) Gets the cell that contains the derivative image of the first cut-plane.
            </summary>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the cell that contains the derivative image.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.SecondDerivativeCell">
      <summary>
            (Read only) Gets the cell that contains the derivative image of the second cut-plane.
            </summary>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the cell that  contains the derivative image.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.FirstLineColor">
      <summary>
            Gets or sets the first cut-plane color along along with it's derivative cell color.
            </summary>
      <value> A <see cref="T:System.Drawing.Color" /> that represents the first cut-plane color and it's derivative cell reference line color.</value>
      <remarks>
            This will change the color of the first cut-plane and the derivative cell color.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.SecondLineColor">
      <summary>
            Gets or sets the second cut-plane color along along with it's derivative cell color.
            </summary>
      <value>The <see cref="T:System.Drawing.Color" /> that represents the second cut-plane color and it's derivative cell reference line color.</value>
      <remarks>
            This will change the color of the second cut-plane and the derivative cell color.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.FirstSliceThickness">
      <summary>
            Gets or sets the desired thickness of the generated slice resulting from the first cut-line.
            </summary>
      <value>A value that represents the thickness of the generated slice resulted from the first cut-line.</value>
      <remarks>
            Visually the thickness is represented by a dotted line parallel to the cut-line. The user can either set the property <b>FirstSliceThickness</b> to adjust it, or by simply clicking on the dotted line handles at the edge and dragging toward the desired location.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDoublePlaneCutLine.SecondSliceThickness">
      <summary>
            Gets or sets the desired thickness of the generated slice resulted from the second cut-line.
            </summary>
      <value>A value that represents the thickness of the generated slice resulted from the second cut-line.</value>
      <remarks>
            Visually the thickness is represented by a dotted line parallel to the cut-line. the user can either set the property <b>SecondSliceThickness</b> to adjust it, or by simply clicking on the dotted line handles at the edge and dragging toward the desired location.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1">
      <summary>
            Represents a collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> objects.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            The <b>MedicalViewerSynchronizedCellCollection</b> class provides a collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerSynchronizedCellCollection</keywords>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.#ctor">
      <summary>
            Initializes a new Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection class object with default parameters.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.Remove(`0)">
      <summary>
            Removes the specified synchronized cell.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">object to remove.</param>
      <returns>true if the synchronized cell was removed successfully; otherwise, false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.Add(`0)">
      <summary>
            Appends the synchronized cell to the collection.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> that represents the item to be appended.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.AddRange(System.Collections.Generic.ICollection{`0})">
      <summary>
            Appends an array of synchronized cells to the collection.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="cellArray"> An array of <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> that represents the items to be appended.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.Clear">
      <summary>
            Overridden. Removes all items from the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1" />.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.Insert(System.Int32,`0)">
      <summary>
            Appends the synchronized cell to the collection using the specified index.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="index">index of the item to insert.</param>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> that represents the item to be inserted.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the synchronized cell from the specified index.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="index">index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizedCellCollection`1.Parent">
      <summary>
            (Read only) Gets the parent of the collection.
            </summary>
      <isnew>6/4/2011</isnew>
      <returns>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> object that represents the parent of this cell collection.
            </returns>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> cell that represents the parent of this cell collection.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle">
      <summary>
            Represents the class that is used to connect two annotation lines together and displays the angle between them. The angle between them is called the Cobb-Angle.
            </summary>
      <isnew>5/8/2011</isnew>
      <remarks>
            After creating this object, add it to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> collection of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> control.
            <para>The two lines must be from the same container.</para><para>If any line got removed from the container, this class will be removed from <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> as well.</para></remarks>
      <example>
        <para />
        <code lang="VB">        ' This example makes the color of each newly created object blue.
        Private Class MedicalViewerCobbAngleForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _image As RasterImage

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                Dim lineObject1 As AnnLineObject = New AnnLineObject()
                lineObject1.StartPoint = New AnnPoint(150, 50)
                lineObject1.EndPoint = New AnnPoint(300, 50)
                lineObject1.Pen = New AnnPen(Color.Yellow, New AnnLength(3))
                cell.SubCells(0).AnnotationContainer.Objects.Add(lineObject1)


                Dim lineObject2 As AnnLineObject = New AnnLineObject()
                lineObject2.StartPoint = New AnnPoint(100, 100)
                lineObject2.EndPoint = New AnnPoint(300, 250)
                lineObject2.Pen = New AnnPen(Color.Yellow, New AnnLength(3))
                cell.SubCells(0).AnnotationContainer.Objects.Add(lineObject2)

                cell.SubCells(0).CobbAngles.Add(New MedicalViewerCobbAngle(lineObject1, lineObject2))

                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCobbAngleForm() As MedicalViewerCobbAngleForm
            Return New MedicalViewerCobbAngleForm()
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCobbAngleExample()
            Dim myForm As MedicalViewerCobbAngleForm = GetMedicalViewerCobbAngleForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // This example makes the color of each newly created object blue.
      class MedicalViewerCobbAngleForm : Form
      {
         private MedicalViewer _medicalViewer;
         private RasterImage _image;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCobbAngleForm()
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            AnnLineObject lineObject1 = new AnnLineObject();
            lineObject1.StartPoint = new AnnPoint(150, 50);
            lineObject1.EndPoint = new AnnPoint(300, 50);
            lineObject1.Pen = new AnnPen(Color.Yellow, new AnnLength(3));
            cell.SubCells[0].AnnotationContainer.Objects.Add(lineObject1);


            AnnLineObject lineObject2 = new AnnLineObject();
            lineObject2.StartPoint = new AnnPoint(100, 100);
            lineObject2.EndPoint = new AnnPoint(300, 250);
            lineObject2.Pen = new AnnPen(Color.Yellow, new AnnLength(3));
            cell.SubCells[0].AnnotationContainer.Objects.Add(lineObject2);

            cell.SubCells[0].CobbAngles.Add(new MedicalViewerCobbAngle(lineObject1, lineObject2));

            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCobbAngleForm GetMedicalViewerCobbAngleForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         return new MedicalViewerCobbAngleForm();
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCobbAngleExample()
      {
         MedicalViewerCobbAngleForm myForm = GetMedicalViewerCobbAngleForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.CobbAngle-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCobbAngle.#ctor(Leadtools.Annotations.AnnLineObject,Leadtools.Annotations.AnnLineObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle"></see> class with explicit parameters.
            </summary>
      <isnew>5/8/2011</isnew>
      <param name="line1"> The first annotation line.</param>
      <param name="line2"> The second annotation line.</param>
      <remarks>
            To change the line later, use <see cref="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line1" /> or <see cref="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line2" />.
            <para>After creating this object, add it to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> collection of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> control.</para><para>The two lines must be from the same container.</para><para>If any line got removed from the container, this class will be removed from <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> as well.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Parent">
      <summary>
            (Read only) Gets the parent of this object.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /> cell that represents the parent of this object.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line1">
      <summary>
            Gets or sets the first line of the cobb angle.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnLineObject" /> that represents the first line of the Cobb-angle.
            </value>
      <remarks>
            The two lines must be from the same container.
            <para>The same line object cannot be added to another instance of the class <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> or added to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" />. If this happens, the new object will be added to the collection and the old object added; that contains this line; will be removed from the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> collection.</para><para>If any line got removed from the container, this class will be removed from <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> as well.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line2">
      <summary>
            Gets or sets the second line of the Cobb-Angle.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnLineObject" /> that represents the second line of the Cobb-Angle.
            </value>
      <remarks>
            The two lines must be from the same container.
            <para>The same line object cannot be added to another instance of the class <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> or added to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" />. If this happens, the new object will be added to the collection and the old object added; that contains this line; will be removed from the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> collection.</para><para>If any line got removed from the container, this class will be removed from <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles" /> as well.</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Angle">
      <summary>
            Gets the Cobb-angle value.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
            a value that represents the Cobb-angle in double precision, which is the angle between <see cref="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line1" /> and <see cref="P:Leadtools.MedicalViewer.MedicalViewerCobbAngle.Line2" />.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs">
      <summary>
            The MedicalViewerAnnotationCreatedEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.AnnotationCreated" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged
            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.AnnotationRectangle)
                cell.AddAction(MedicalViewerActionType.AnnotationEllipse)
                cell.AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationRectangle)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationEllipse)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.AnnotationHilite)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub

         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      'This example converts the annotation object (rectangle, ellipse and hilite) into a region once the user draws them

      Public Sub MedicalViewerAnnotationCreatedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         AddHandler cell.AnnotationCreated, AddressOf medicalViewer_AnnotationCreated
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_AnnotationCreated(ByVal sender As Object, ByVal e As MedicalViewerAnnotationCreatedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim attribute As MedicalViewerAnnotationAttributes = cell.GetSelectedAnnotationAttributes(e.SubCellIndex)
         Select Case attribute.Type
            Case MedicalViewerActionType.AnnotationRectangle, MedicalViewerActionType.AnnotationEllipse, MedicalViewerActionType.AnnotationHilite
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, True)
         End Select
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);
            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.AnnotationRectangle);
            cell.AddAction(MedicalViewerActionType.AnnotationEllipse);
            cell.AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationRectangle);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationEllipse);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.AnnotationHilite);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationRectangle, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationEllipse, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.AnnotationHilite, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      //This example converts the annotation object (rectangle, ellipse and hilite) into a region once the user draws them

      public void MedicalViewerAnnotationCreatedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.AnnotationCreated += new EventHandler&lt;MedicalViewerAnnotationCreatedEventArgs&gt;(medicalViewer_AnnotationCreated);
         myForm.ShowDialog();
      }

      void medicalViewer_AnnotationCreated(object sender, MedicalViewerAnnotationCreatedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         MedicalViewerAnnotationAttributes attribute = cell.GetSelectedAnnotationAttributes(e.SubCellIndex);
         switch (attribute.Type)
         {
            case MedicalViewerActionType.AnnotationRectangle:
            case MedicalViewerActionType.AnnotationEllipse:
            case MedicalViewerActionType.AnnotationHilite:
               cell.ConvertAnnotationToRegion(RasterRegionCombineMode.Or, true);
               break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationCreatedEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.#ctor(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that has the annotation that was created.</param>
      <param name="subCellIndex">The index of the sub-cell that has the annotation that was created.</param>
      <param name="annotationType">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> value that represents which annotation type was created.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.#ctor(System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.Annotations.AnnObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that has the newly created annotation.</param>
      <param name="subCellIndex">The index of the sub-cell that has the newly created annotation.</param>
      <param name="annotationType">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> value that represents the type of annotation created.</param>
      <param name="annObject">The newly created annotation object.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that has the annotation that was created. This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell that has the annotation that was created. This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.Object">
      <summary>
            (Read only) Gets the created annotation object.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.Annotations.AnnObject" /> class that represents the created annotation object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that has the annotation that was created.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the sub-cell that has the annotation that was created.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs.AnnotationType">
      <summary>
            (Read only) Gets an enumerated value that indicates which type of annotation was created.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> value that represents which type of annotation was created.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationCreatedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack">
      <summary>The <b>MedicalViewerSeriesStack</b> represents a stack of images.</summary>
      <remarks>
        <para class="xmldocbulletlist">
                    This class is used for the output of the <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> method, which holds a sorted stack.
                    Each image in the stack is sorted based on its actual real world position so it
                    is displayed correctly. This also makes it easier for the 3D toolkit to create
                    an accurate 3D object.
                </para>
      </remarks>
      <example>
        <para>///</para>
        <code lang="VB">        Private Class MedicalViewerSeriesManagerFrom : Inherits Form
            Private _studyElement As DicomElement
            Private _seriesElement As DicomElement
            Private _seriesManager As MedicalViewerSeriesManager
            Private _seriesManager512 As MedicalViewerSeriesManager
            Private _imageDataList As List(Of MedicalViewerImageData)
            Private doubleArray As Double()
            Private patientElement As DicomElement
            Private referenceUID As String
            Private imageElement As DicomElement
            Private _medicalViewer As MedicalViewer
            Public Sub New()
            End Sub

            Private Sub MedicalViewerSeriesManagerFrom_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerSeriesManagerFrom_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerSeriesManagerFrom_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)


                cell.PixelSpacing = output.Stacks(0).PixelSpacing
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop


                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.UserData, "Echo number = " &amp; output.Stacks(0).EchoNumber.ToString())

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Private Sub MedicalViewerSeriesManagerFrom_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            ' Find the study using the Study instance UID, and return it's DicomElement if the study is found
            Private Function FindStudy(ByVal ds As DicomDataSet, ByVal studyInstanceUID As String) As DicomElement
                ' get the parent element.
                Dim patientElement As DicomElement = ds.GetFirstKey(Nothing, True)
                Dim studyElement As DicomElement = Nothing
                Dim studyInformationElement As DicomElement = Nothing
                Dim studyID As String

                studyElement = ds.GetChildKey(patientElement)
                studyElement = ds.GetChildElement(studyElement, True)

                Do While Not studyElement Is Nothing
                    studyInformationElement = ds.FindFirstElement(studyElement, DicomTag.StudyInstanceUID, True)

                    If Not studyInformationElement Is Nothing Then
                        studyID = ds.GetConvertValue(studyInformationElement)

                        If studyID = studyInstanceUID Then
                            Return studyInformationElement
                        End If
                    End If

                    studyElement = ds.GetNextKey(studyElement, True)
                    studyElement = ds.GetChildElement(studyElement, True)
                Loop
                Return Nothing
            End Function

            ' Find the series using the Series instance UID, and return it's DicomElement if the series is found
            Private Function FindSeries(ByVal ds As DicomDataSet, ByVal studyElement As DicomElement, ByVal seriesInstanceUID As String) As DicomElement
                Dim seriesElement As DicomElement = Nothing
                Dim seriesInformationElement As DicomElement = Nothing
                Dim seriesID As String

                seriesElement = ds.GetChildKey(studyElement)
                seriesElement = ds.GetChildElement(seriesElement, True)

                Do While Not seriesElement Is Nothing
                    seriesInformationElement = ds.FindFirstElement(seriesElement, DicomTag.SeriesInstanceUID, True)

                    If Not seriesInformationElement Is Nothing Then
                        seriesID = ds.GetConvertValue(seriesInformationElement)

                        If seriesID = seriesInstanceUID Then
                            Return seriesInformationElement
                        End If
                    End If

                    seriesElement = ds.GetNextKey(seriesElement, True)
                    seriesElement = ds.GetChildElement(seriesElement, True)
                Loop
                Return Nothing
            End Function

            ' return the first frame file name of the series.
            Private Function GetFirstImageName(ByVal ds As DicomDataSet, ByVal seriesElement As DicomElement, ByVal directoryPath As String, &lt;System.Runtime.InteropServices.Out()&gt; ByRef imageElement As DicomElement) As String
                Dim imageIDElement As DicomElement = Nothing

                imageElement = ds.GetChildKey(seriesElement)
                imageElement = ds.GetChildElement(imageElement, True)

                Do While Not imageElement Is Nothing
                    imageIDElement = ds.FindFirstElement(imageElement, DicomTag.ReferencedFileID, True)

                    If Not imageIDElement Is Nothing Then
                        Return directoryPath &amp; "\" &amp; ds.GetConvertValue(imageIDElement)
                    End If


                Loop

                Return ""
            End Function

            ' return the next frame file name of the series.
            Private Function GetNextImageName(ByVal ds As DicomDataSet, ByVal directoryPath As String, ByRef imageElement As DicomElement) As String
                Dim nextImageElement As DicomElement = Nothing

                imageElement = ds.GetNextKey(imageElement, True)
                imageElement = ds.GetChildElement(imageElement, True)

                Do While Not imageElement Is Nothing
                    nextImageElement = ds.FindFirstElement(imageElement, DicomTag.ReferencedFileID, True)

                    If Not imageElement Is Nothing Then
                        Dim echoElement As DicomElement = ds.FindFirstElement(imageElement, DicomTag.EchoNumber, True)

                        Return directoryPath &amp; "\" &amp; ds.GetConvertValue(nextImageElement)
                    End If
                Loop

                Return ""
            End Function


            Private Function AddImageToImageArray(ByVal ds As DicomDataSet, ByVal index As Integer, ByVal imagePath As String, &lt;System.Runtime.InteropServices.Out()&gt; ByRef echoNumber As Integer) As Boolean
                echoNumber = -1

                Dim imageData As MedicalViewerImageData = New MedicalViewerImageData()

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImagePositionPatient, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 3)

                imageData.ImagePosition = Point3D.FromDoubleArray(doubleArray)
                imageData.Data = imagePath

                imageData.EchoNumber = echoNumber

                patientElement = ds.FindFirstElement(Nothing, DicomTag.FrameOfReferenceUID, True)

                referenceUID = ds.GetConvertValue(patientElement)

                imageData.FrameOfReferenceUID = referenceUID

                patientElement = ds.FindFirstElement(Nothing, DicomTag.ImageOrientationPatient, True)

                imageData.ImageOrientation = ds.GetConvertValue(patientElement)

                patientElement = ds.FindFirstElement(Nothing, DicomTag.PixelSpacing, True)

                doubleArray = ds.GetDoubleValue(patientElement, 0, 2)
                imageData.PixelSpacing = New Point2D(CSng(doubleArray(0)), CSng(doubleArray(1)))

                _imageDataList.Add(imageData)

                Return True

            End Function

            Public Function LoadJamesHead() As MedicalViewerSeriesManager
                DicomEngine.Startup()
                Dim ds As DicomDataSet = New DicomDataSet()
                'INSTANT VB NOTE: Embedded comments are not maintained by Instant VB
                'ORIGINAL LINE: ds.Load(/*LeadtoolsExamples.Common.ImagesPath.Path*/@"\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" + "\\Miller James-CT Head full Study\\DICOMDIR", DicomDataSetLoadFlags.None);
                ds.Load(Path.Combine(LEAD_VARS.ImagesDir, "Miller James-CT Head full Study\DICOMDIR"), DicomDataSetLoadFlags.None)
                'INSTANT VB NOTE: Embedded comments are not maintained by Instant VB
                'ORIGINAL LINE: string directoryPath = /*LeadtoolsExamples.Common.ImagesPath.Path*/ @"\\pc202\readwritefolder\DICOM Dataset\DICOM Volume datasets" + "\\Miller James-CT Head full Study\\";
                Dim directoryPath As String = Path.Combine(LEAD_VARS.ImagesDir, "\Miller James-CT Head full Study\")

                Dim studyInstanceUID As String = "1.3.12.2.1107.5.1.4.50772.30000009122208074910900000022"
                Dim seriesInstanceUID As String = "1.3.12.2.1107.5.1.4.50772.30000009122208215356200001997"

                _studyElement = FindStudy(ds, studyInstanceUID)
                _seriesElement = FindSeries(ds, _studyElement, seriesInstanceUID)

                Dim count As Integer = 256

                _seriesManager = New MedicalViewerSeriesManager()
                _imageDataList = New List(Of MedicalViewerImageData)()


                Dim dicomDataSet As DicomDataSet

                Dim imageIndex As Integer
                Dim imagePath As String
                Dim echoNumber As Integer = 0
                imagePath = GetFirstImageName(ds, _seriesElement, directoryPath, imageElement)
                imageIndex = 0
                Do While imageIndex &lt; count
                    Try
                        dicomDataSet = New DicomDataSet()
                        dicomDataSet.Load(imagePath, DicomDataSetLoadFlags.None)
                        AddImageToImageArray(dicomDataSet, imageIndex, imagePath, echoNumber)
                        dicomDataSet.Dispose()

                        imagePath = GetNextImageName(ds, directoryPath, imageElement)

                    Catch exception As System.Exception
                        System.Diagnostics.Debug.Assert(False, exception.Message)
                        Throw
                    End Try
                    imageIndex += 1
                Loop



                _seriesManager.Sort(_imageDataList)
                DicomEngine.Shutdown()

                Return _seriesManager
            End Function

            Public Function LoadJamesHead512() As MedicalViewerSeriesManager
                DicomEngine.Startup()
                Dim ds As DicomDataSet = New DicomDataSet()
                ds.Load(Path.Combine(LEAD_VARS.JamesCTDir, "DICOMDIR"), DicomDataSetLoadFlags.None)
                Dim directoryPath As String = LEAD_VARS.JamesCTDir

                Dim studyInstanceUID As String = "1.3.12.2.1107.5.1.4.50772.30000009122208074910900000022"
                Dim seriesInstanceUID As String = "1.3.12.2.1107.5.1.4.50772.30000009122208215356200002254"

                _studyElement = FindStudy(ds, studyInstanceUID)
                _seriesElement = FindSeries(ds, _studyElement, seriesInstanceUID)

                Dim count As Integer = 512

                _seriesManager512 = New MedicalViewerSeriesManager()
                _imageDataList = New List(Of MedicalViewerImageData)()


                Dim dicomDataSet As DicomDataSet

                Dim imageIndex As Integer
                Dim imagePath As String
                Dim echoNumber As Integer = 0
                imagePath = GetFirstImageName(ds, _seriesElement, directoryPath, imageElement)
                imageIndex = 0
                Do While imageIndex &lt; count
                    Try
                        dicomDataSet = New DicomDataSet()
                        dicomDataSet.Load(imagePath, DicomDataSetLoadFlags.None)
                        AddImageToImageArray(dicomDataSet, imageIndex, imagePath, echoNumber)
                        dicomDataSet.Dispose()

                        imagePath = GetNextImageName(ds, directoryPath, imageElement)

                    Catch exception As System.Exception
                        System.Diagnostics.Debug.Assert(False, exception.Message)
                        Throw
                    End Try
                    imageIndex += 1
                Loop



                _seriesManager512.Sort(_imageDataList)
                DicomEngine.Shutdown()

                Return _seriesManager512
            End Function
        End Class

        Private Function GetMedicalControlForReverseExample() As MedicalViewerSeriesManagerFrom
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerSeriesManagerFrom(output)
        End Function
        ' 

        Public Sub MedicalViewerSeriesManagerLoadingExample()
            Dim myForm As MedicalViewerSeriesManagerFrom = GetMedicalControlForReverseExample()
            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerSeriesManagerFrom : Form
      {
         DicomElement _studyElement;
         DicomElement _seriesElement;
         MedicalViewerSeriesManager _seriesManager;
         MedicalViewerSeriesManager _seriesManager512;
         List&lt;MedicalViewerImageData&gt; _imageDataList;
         double[] doubleArray;
         DicomElement patientElement;
         string referenceUID;
         DicomElement imageElement;
         MedicalViewer _medicalViewer;
         public MedicalViewerSeriesManagerFrom()
         {

         }

         void MedicalViewerSeriesManagerFrom_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSeriesManagerFrom(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerSeriesManagerFrom_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerSeriesManagerFrom_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);


            cell.PixelSpacing = output.Stacks[0].PixelSpacing;
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }


            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.UserData, "Echo number = " + output.Stacks[0].EchoNumber.ToString());

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         void  MedicalViewerSeriesManagerFrom_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         // Find the study using the Study instance UID, and return it's DicomElement if the study is found
         private DicomElement FindStudy(DicomDataSet ds, string studyInstanceUID)
         {
            // get the parent element.
            DicomElement patientElement = ds.GetFirstKey(null, true);
            DicomElement studyElement = null;
            DicomElement studyInformationElement = null;
            string studyID;

            studyElement = ds.GetChildKey(patientElement);
            studyElement = ds.GetChildElement(studyElement, true);

            while (studyElement != null)
            {
               studyInformationElement = ds.FindFirstElement(studyElement, DicomTag.StudyInstanceUID, true);

               if (studyInformationElement != null)
               {
                  studyID = ds.GetConvertValue(studyInformationElement);

                  if (studyID == studyInstanceUID)
                     return studyInformationElement;
               }

               studyElement = ds.GetNextKey(studyElement, true);
               studyElement = ds.GetChildElement(studyElement, true);
            }
            return null;
         }

         // Find the series using the Series instance UID, and return its DicomElement if the series is found
         private DicomElement FindSeries(DicomDataSet ds, DicomElement studyElement, string seriesInstanceUID)
         {
            DicomElement seriesElement = null;
            DicomElement seriesInformationElement = null;
            string seriesID;

            seriesElement = ds.GetChildKey(studyElement);
            seriesElement = ds.GetChildElement(seriesElement, true);

            while (seriesElement != null)
            {
               seriesInformationElement = ds.FindFirstElement(seriesElement,
                                                              DicomTag.SeriesInstanceUID,
                                                              true);

               if (seriesInformationElement != null)
               {
                  seriesID = ds.GetConvertValue(seriesInformationElement);

                  if (seriesID == seriesInstanceUID)
                     return seriesInformationElement;
               }

               seriesElement = ds.GetNextKey(seriesElement, true);
               seriesElement = ds.GetChildElement(seriesElement, true);
            }
            return null;
         }

         // return the first frame file name of the series.
         private string GetFirstImageName(DicomDataSet ds, DicomElement seriesElement, string directoryPath, out DicomElement imageElement)
         {
            DicomElement imageIDElement = null;

            imageElement = ds.GetChildKey(seriesElement);
            imageElement = ds.GetChildElement(imageElement, true);

            while (imageElement != null)
            {
               imageIDElement = ds.FindFirstElement(imageElement,
                                                  DicomTag.ReferencedFileID,
                                                  true);

               if (imageIDElement != null)
               {
                  return directoryPath + "\\" + ds.GetConvertValue(imageIDElement);
               }


            }

            return "";
         }

         // return the next frame file name of the series.
         private string GetNextImageName(DicomDataSet ds, string directoryPath, ref DicomElement imageElement)
         {
            DicomElement nextImageElement = null;

            imageElement = ds.GetNextKey(imageElement, true);
            imageElement = ds.GetChildElement(imageElement, true);

            while (imageElement != null)
            {
               nextImageElement = ds.FindFirstElement(imageElement,
                                                  DicomTag.ReferencedFileID,
                                                  true);

               if (imageElement != null)
               {
                  DicomElement echoElement = ds.FindFirstElement(imageElement,
                                                    DicomTag.EchoNumber,
                                                    true);

                  return directoryPath + "\\" + ds.GetConvertValue(nextImageElement);
               }
            }

            return "";
         }


         private bool AddImageToImageArray(DicomDataSet ds, int index, string imagePath, out int echoNumber)
         {
            echoNumber = -1;

            MedicalViewerImageData imageData = new MedicalViewerImageData();

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.ImagePositionPatient,
                                                 true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 3);

            imageData.ImagePosition = Point3D.FromDoubleArray(doubleArray);
            imageData.Data = imagePath;

            imageData.EchoNumber = echoNumber;

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.FrameOfReferenceUID,
                                                true);

            referenceUID = ds.GetConvertValue(patientElement);

            imageData.FrameOfReferenceUID = referenceUID;

            patientElement = ds.FindFirstElement(null,
                                                DicomTag.ImageOrientationPatient,
                                                true);

            imageData.ImageOrientation = ds.GetConvertValue(patientElement);

            patientElement = ds.FindFirstElement(null,
                                                 DicomTag.PixelSpacing,
                                                 true);

            doubleArray = ds.GetDoubleValue(patientElement, 0, 2);
            imageData.PixelSpacing = new Point2D((float)doubleArray[0], (float)doubleArray[1]);

            _imageDataList.Add(imageData);

            return true;

         }

         public MedicalViewerSeriesManager LoadJamesHead()
         {
            DicomEngine.Startup();
            DicomDataSet ds = new DicomDataSet();
            ds.Load(Path.Combine(LEAD_VARS.JamesCTDir , "DICOMDIR"), DicomDataSetLoadFlags.None);
            string directoryPath = LEAD_VARS.JamesCTDir;///*LeadtoolsExamples.Common.ImagesPath.Path*/ Path.Combine(LEAD_VARS.ImagesDir, @"\Miller James-CT Head full Study\");

            string studyInstanceUID = "1.3.12.2.1107.5.1.4.50772.30000009122208074910900000022";
            string seriesInstanceUID = "1.3.12.2.1107.5.1.4.50772.30000009122208215356200001997";

            _studyElement = FindStudy(ds, studyInstanceUID);
            _seriesElement = FindSeries(ds, _studyElement, seriesInstanceUID);

            int count = 256;

            _seriesManager = new MedicalViewerSeriesManager();
            _imageDataList = new List&lt;MedicalViewerImageData&gt;();


            DicomDataSet dicomDataSet;

            int imageIndex;
            string imagePath;
            int echoNumber = 0;
            imagePath = GetFirstImageName(ds, _seriesElement, directoryPath, out imageElement);
            for (imageIndex = 0; imageIndex &lt; count; imageIndex++)
            {
               try
               {
                  dicomDataSet = new DicomDataSet();
                  dicomDataSet.Load(imagePath, DicomDataSetLoadFlags.None);
                  AddImageToImageArray(dicomDataSet, imageIndex, imagePath, out echoNumber);
                  dicomDataSet.Dispose();

                  imagePath = GetNextImageName(ds, directoryPath, ref imageElement);

               }
               catch (System.Exception exception)
               {
                  System.Diagnostics.Debug.Assert(false, exception.Message);
                  throw;
               }
            }



            _seriesManager.Sort(_imageDataList);
            DicomEngine.Shutdown();

            return _seriesManager;
         }


         public MedicalViewerSeriesManager LoadJamesHead512()
         {
            DicomEngine.Startup();
            DicomDataSet ds = new DicomDataSet();
            ds.Load(Path.Combine(LEAD_VARS.JamesCTDir, "DICOMDIR"), DicomDataSetLoadFlags.None);
            string directoryPath = LEAD_VARS.JamesCTDir;

            string studyInstanceUID = "1.3.12.2.1107.5.1.4.50772.30000009122208074910900000022";
            string seriesInstanceUID = "1.3.12.2.1107.5.1.4.50772.30000009122208215356200002254";

            _studyElement = FindStudy(ds, studyInstanceUID);
            _seriesElement = FindSeries(ds, _studyElement, seriesInstanceUID);

            int count = 512;

            _seriesManager512 = new MedicalViewerSeriesManager();
            _imageDataList = new List&lt;MedicalViewerImageData&gt;();


            DicomDataSet dicomDataSet;

            int imageIndex;
            string imagePath;
            int echoNumber = 0;
            imagePath = GetFirstImageName(ds, _seriesElement, directoryPath, out imageElement);
            for (imageIndex = 0; imageIndex &lt; count; imageIndex++)
            {
               try
               {
                  dicomDataSet = new DicomDataSet();
                  dicomDataSet.Load(imagePath, DicomDataSetLoadFlags.None);
                  AddImageToImageArray(dicomDataSet, imageIndex, imagePath, out echoNumber);
                  dicomDataSet.Dispose();

                  imagePath = GetNextImageName(ds, directoryPath, ref imageElement);

               }
               catch (System.Exception exception)
               {
                  System.Diagnostics.Debug.Assert(false, exception.Message);
                  throw;
               }
            }



            _seriesManager512.Sort(_imageDataList);
            DicomEngine.Shutdown();

            return _seriesManager512;
         }

      }



      MedicalViewerSeriesManagerFrom GetMedicalControlForReverseExample()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerSeriesManagerFrom(output);
      }
      // 

      public void MedicalViewerSeriesManagerLoadingExample()
      {
         MedicalViewerSeriesManagerFrom myForm = GetMedicalControlForReverseExample();
         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerSeriesManagerFrom-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSeriesStack.#ctor">
      <summary>
            Initializes a new <b>MedicalViewerSeriesStack</b> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesStack.Items">
      <summary>
            (Read only) Gets a list of image data.
            </summary>
      <value>
            A list of <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /> objects.
            </value>
      <remarks>
            This property is null by default. To fill it call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> method, which fills this property with sorted data.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesStack.EchoNumber">
      <summary>
            Gets or sets the stack echo number.
            </summary>
      <value>
            Value that represents the stack echo number.
            </value>
      <remarks>The echo number is used to classify the series and group it based on the echo number. For more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesStack.PixelSpacing">
      <summary>
            Gets or sets the pixel spacing of the images in the stack.
            </summary>
      <value>
            A <see cref="T:Leadtools.MedicalViewer.Point3D" /> that represents the pixel spacing of the images in the stack.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesStack.SequenceName">
      <summary>
            Gets or sets the sequence name of the stack.
            </summary>
      <value>
            A string that represents the stack sequence name.
            </value>
      <remarks>
        <list type="bullet">
          <item>
          </item>
          <item>
            <description>This value can be retrieved from the
                        DicomDataSet</description>
          </item>
          <item>
            <description>
                            When sorting the image using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" />
                            method, the sort engine uses this value to group frames with similar
                            sequence name together and separate the ones with different ones. For
                            more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> and
                            <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine">
      <summary>
            Represents the class that is used to create or adjust the oblique cut plane.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The oblique cut plane allows the user to view an organ from any angle (i.e. 360 degree). It creates a new cell with an image that contains the results of the clipping.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerCutLineForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerCutLineForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerCutLineForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                ' Get the image information for each frame and send them to the low memory usage function.
                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}
                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                AddHandler cell.Data3DFrameRequested, AddressOf cell_Data3DFrameRequested
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerCutLineForm_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                ' Set the image DICOM data
                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                ' Create some cells that will hold the derivative images resulted from the cut-planes.
                Dim singleDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim firstDerivativeCell As MedicalViewerCell = New MedicalViewerCell()
                Dim secondDerivativeCell As MedicalViewerCell = New MedicalViewerCell()

                AddHandler cell.DerivativeGenerated, AddressOf cell_DerivativeGenerated

                ' create a single cut-plane and double cut-plane.
                cell.ReferenceLine.CutLines.Add(New MedicalViewerPlaneCutLine(singleDerivativeCell))
                cell.ReferenceLine.DoubleCutLines.Add(New MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell))

                _medicalViewer.Cells.Add(singleDerivativeCell)
                _medicalViewer.Cells.Add(firstDerivativeCell)
                _medicalViewer.Cells.Add(secondDerivativeCell)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub MedicalViewerCutLineForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_Data3DFrameRequested(ByVal sender As Object, ByVal e As MedicalViewer3DFrameRequestedEventArgs)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                e.Image = _codecs.Load(CStr(_seriesManager.Stacks(0).Items(e.ImageIndex).Data))
                _codecs.Dispose()
            End Sub

            Private Sub cell_DerivativeGenerated(ByVal sender As Object, ByVal e As MedicalViewerDerivativeGeneratedEventArgs)
                e.DerivativeCell.ShowCellBoundaries = True
                e.DerivativeCell.ReferenceLine.Enabled = True
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerCutLineControl() As MedicalViewerCutLineForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerCutLineForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerCutLineExample()
            Dim myForm As MedicalViewerCutLineForm = GetMedicalViewerCutLineControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerCutLineForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerCutLineForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerCutLineForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerCutLineForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            // Get the image information for each frame and send them to the low memory usage function.
            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];
            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.Data3DFrameRequested += new EventHandler&lt;MedicalViewer3DFrameRequestedEventArgs&gt;(cell_Data3DFrameRequested);
            cell.FramesRequested +=new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerCutLineForm_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Set the image DICOM data
            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            // Create some cells that will hold the derivative images resulted from the cut-planes.
            MedicalViewerCell singleDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell firstDerivativeCell = new MedicalViewerCell();
            MedicalViewerCell secondDerivativeCell = new MedicalViewerCell();

            cell.DerivativeGenerated +=new EventHandler&lt;MedicalViewerDerivativeGeneratedEventArgs&gt;(cell_DerivativeGenerated);

            // create a single cut-plane and double cut-plane.
            cell.ReferenceLine.CutLines.Add(new MedicalViewerPlaneCutLine(singleDerivativeCell));
            cell.ReferenceLine.DoubleCutLines.Add(new MedicalViewerDoublePlaneCutLine(firstDerivativeCell, secondDerivativeCell));

            _medicalViewer.Cells.Add(singleDerivativeCell);
            _medicalViewer.Cells.Add(firstDerivativeCell);
            _medicalViewer.Cells.Add(secondDerivativeCell);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void MedicalViewerCutLineForm_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_Data3DFrameRequested(object sender, MedicalViewer3DFrameRequestedEventArgs e)
         {
            RasterCodecs _codecs = new RasterCodecs();
            e.Image = _codecs.Load((string)(_seriesManager.Stacks[0].Items[e.ImageIndex].Data));
            _codecs.Dispose();
         }

         void  cell_DerivativeGenerated(object sender, MedicalViewerDerivativeGeneratedEventArgs e)
         {
            e.DerivativeCell.ShowCellBoundaries = true;
            e.DerivativeCell.ReferenceLine.Enabled = true;
         }

         void  cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerCutLineForm GetMedicalViewerCutLineControl()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerCutLineForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerCutLineExample()
      {
         MedicalViewerCutLineForm myForm = GetMedicalViewerCutLineControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.CutLine-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.#ctor">
      <summary>
            Initializes a new MedicalViewerPlaneCutLine class object with default parameters.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.#ctor(Leadtools.MedicalViewer.Point2D,Leadtools.MedicalViewer.Point2D)">
      <summary>
            Initializes a new MedicalViewerPlaneCutLine class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="point1">
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> struct that contains the x and y coordinates of the first line point. </param>
      <param name="point2">
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> struct that contains the x and y coordinates of the second line point. </param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.#ctor(Leadtools.MedicalViewer.MedicalViewerCell)">
      <summary>
            Initializes a new MedicalViewerPlaneCutLine class object with explicit parameters.
            </summary>
      <param name="derivativeCell">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that contains the derivative cell. The derivative is the cell that will hold the image generated from this cut plane.</param>
      <medaddon>yes</medaddon>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.DerivativeCell">
      <summary>
            (Read only) Gets the cell that contains the derivative image.
            </summary>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCell" /> that represents the cell which contains the derivative image.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.Color">
      <summary>
            Gets or sets the cut-plane color along along with it's derivative cell color.
            </summary>
      <value>
        <see cref="T:System.Drawing.Color" /> that represents the cut-plane color and it's derivative cell reference line color.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>This will change the color of the cut-plane and the derivative cell color.</description>
          </item>
        </list>
      </remarks>
      <example>
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPlaneCutLine.SliceThickness">
      <summary>
            Gets or sets the desired thickness of the generated slice resulted from the cut-line.
            </summary>
      <value>A value that represents the thickness of the generated slice resulted from the cut-line.</value>
      <remarks>
            Visually the thickness is represented by a dotted line parallel to the cut-line. the user can either set the property <b>SliceThickness</b> to adjust it, or by simply clicking on the dotted line handles at the edge and dragging toward the desired location.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse">
      <summary>
             Represents the class that contains the properties of the annotation ellipse action.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties of the annotation ellipse action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
             Click and drag to create an elliptical annotation object. 
            <para>For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.</para></remarks>
      <example>
        <para>This example sets the properties for the ellipse annotation action.</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationEllipseExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim ellipse As MedicalViewerAnnotationEllipse = New MedicalViewerAnnotationEllipse()
         ellipse.AnnotationColor = Color.FromArgb(0, 0, 255)
         ellipse.Flags = MedicalViewerAnnotationFlags.AllObjects
         ellipse.CreateFromCenter = True
         cell.SetActionProperties(MedicalViewerActionType.AnnotationEllipse, ellipse)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationEllipseExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationEllipse ellipse = new MedicalViewerAnnotationEllipse();
         ellipse.AnnotationColor = Color.FromArgb(0, 0, 255);
         ellipse.Flags = MedicalViewerAnnotationFlags.AllObjects;
         ellipse.CreateFromCenter = true;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationEllipse, ellipse);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationEllipse1-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse"></see> class, specifying how the ellipse is to be drawn.
            </summary>
      <medaddon>yes</medaddon>
      <param name="createFromCenter">true to create the ellipse from center, false to create from edge.</param>
      <example>
        <para>Set the properties for the ellipse annotation action</para>
        <code lang="VB">      Public Sub MedicalViewerAnnotationEllipseExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim ellipse As MedicalViewerAnnotationEllipse = New MedicalViewerAnnotationEllipse(True)
         ellipse.AnnotationColor = Color.FromArgb(0, 128, 0)
         ellipse.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationEllipse, ellipse)

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerAnnotationEllipseExample2()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationEllipse ellipse = new MedicalViewerAnnotationEllipse(true);
         ellipse.AnnotationColor = Color.FromArgb(0, 128, 0);
         ellipse.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationEllipse, ellipse);

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerAnnotationEllipse2-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse.CreateFromCenter">
      <summary>
            Indicates whether to create the object from the center or from the edge.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to create the ellipse from the center; false to create from the edge.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationEllipse" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewer">
      <summary>
            Represents a LEADTOOLS MedicalViewer control for displaying medical images.
            </summary>
      <keywords>DICOM Viewer|Medical Viewer</keywords>
      <medaddon>yes</medaddon>
      <remarks>
        <para>The <b>MedicalViewer</b> is used to display graphics from a bitmap, metafile, icon, JPEG, 
            GIF or PNG (or any other image file format supported by Leadtools) file.
            It provides support for displaying one or more images and for the real-time manipulation of one 
            or more images. This control is available only in the Medical 
            toolkits. For more information, refer to <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Edition Support and Licensing Requirements</see></para>
        <para>This control is a high-level component for building medical display applications such as 
            DICOM viewers, view stations, Teleradiology solutions, and high-end diagnostic workstations 
            found in radiology and other medical specialty departments. When building a PACS for radiology, 
            cardiology, mammography, ophthalmology, pathology, dermatology, dentistry or any other specialty, 
            this control will eliminate project complexity and provide a solid, reliable foundation. </para>
            Typical applications that can be built using this control include:
            <list type="bullet"><item><description>High-end medical diagnostic workstations.</description></item><item><description>Medical review and quality assurance stations.</description></item><item><description>DICOM viewers.</description></item><item><description>Light-weight viewers that are typically distributed on a CD with patient images. </description></item><item><description>Web-based medical viewers.</description></item></list><b>Key Features:</b><list type="bullet"><item><description>Display medical grayscale and colored images, including MRI, CT, Digital X-Ray, 
            and Ultrasound.</description></item><item><description>Adjust screen layout both manually and programmatically. </description></item><item><description>Display overlay information on images, with full control over display text 
            and its positioning inside each window. Includes built-in overlays such as window center, 
            window width values, and field of view. </description></item><item><description>
            Built-in image manipulation tools, including: 
            <list type="bullet"><item><description>Window level (brightness and contrast). </description></item><item><description>Zooming or scaling an image. </description></item><item><description>Panning or moving an image. </description></item><item><description>Image magnification. </description></item><item><description>Single-key or single-click stacking or moving from one image to another in a series.</description></item><item><description>Different annotation objects, with the ability to convert them into a region of 
            interest, or calibrate the annotation ruler.</description></item><item><description>Different ways of defining the region of interest.</description></item><item><description>Drawing cut lines (single or double)</description></item></list></description></item><item><description>
            Adjustable settings for each tool, such as:
            <list type="bullet"><item><description>Mouse button controls </description></item><item><description>Keyboard (hotkey) controls </description></item><item><description>Cursor display icon </description></item><item><description>Apply effects to a single image, or to all images in a series</description></item><item><description>Apply effects to a single series or to all series managed by the control</description></item><item><description>Apply effects programmatically or through user interaction.</description></item></list></description></item><item><description>Full control over display container properties, such as colors, cursors, and rulers.</description></item><item><description>Built-in adjustable ruler that scales to image DPI and zoom or scale factor.</description></item><item><description>Interpolated image display for higher quality.</description></item></list>
            For more information, refer 
            to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.ApplyingActions.html">Applying Actions</a> and <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.UsingTheImageViewer.html">Using the Image Viewer</a>.
            </remarks>
      <example>
        <para>This examples creates a control and adds an image</para>
        <code lang="VB">      Public Sub MedicalViewerExample()
         Dim form As MainForm1 = New MainForm1()
         form.ShowDialog()
      End Sub

      ' MainForm1 will be the owner of the medical viewer control.
      Private Class MainForm1 : Inherits Form
         Private _medicalViewer As MedicalViewer

         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ImageProcessingDemo\Image3.cmp"))

            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Scale)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' assign the added actions to a keyboard keys that will work like the mouse.
                Dim medicalKeys As MedicalViewerKeys = New MedicalViewerKeys(Keys.Down, Keys.Up, Keys.Left, Keys.Right, MedicalViewerModifiers.None)
                cell.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys)
                medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl
                cell.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys)
                medicalKeys.MouseDown = Keys.PageDown
                medicalKeys.MouseUp = Keys.PageUp
                cell.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys)
                medicalKeys.MouseDown = Keys.Subtract
                medicalKeys.MouseUp = Keys.Add
                cell.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy")
                cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445")
                cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929")
                cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999")
                cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit)
                cell.Rows = 1
                cell.Columns = 1
                cell.Frozen = False
                cell.DisplayRulers = MedicalViewerRulers.Both
                cell.ApplyOnIndividualSubCell = False
                cell.ApplyActionOnMove = True
                cell.FitImageToCell = True
                cell.Selected = True
                cell.ShowTags = True

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image2.cmp"))

                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image)
                _medicalViewer.Cells.Add(cell1)


                ' add some actions that will be used to change the properties of the images inside the control.
                cell1.AddAction(MedicalViewerActionType.WindowLevel)
                cell1.AddAction(MedicalViewerActionType.Scale)
                cell1.AddAction(MedicalViewerActionType.Offset)
                cell1.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' assign the added actions to a keyboard keys that will work like the mouse.
                medicalKeys = New MedicalViewerKeys(Keys.Down, Keys.Up, Keys.Left, Keys.Right, MedicalViewerModifiers.None)
                cell1.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys)
                medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl
                cell1.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys)
                medicalKeys.MouseDown = Keys.PageDown
                medicalKeys.MouseUp = Keys.PageUp
                cell1.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys)
                medicalKeys.MouseDown = Keys.Subtract
                medicalKeys.MouseUp = Keys.Add
                cell1.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys)

                ' adjust some properties of the cell and add some tags.
                cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                cell1.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy")
                cell1.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445")
                cell1.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929")
                cell1.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999")
                cell1.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit)
                cell1.Rows = 2
                cell1.Columns = 2
                cell1.Frozen = False
                cell1.DisplayRulers = MedicalViewerRulers.Both
                cell1.ApplyOnIndividualSubCell = False
                cell1.ApplyActionOnMove = True
                cell1.FitImageToCell = True
                cell1.Selected = True
                cell1.ShowTags = True

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MedicalViewerExample()
      {
         MainForm1 form = new MainForm1();
         form.ShowDialog();
      }

      // MainForm1 will be the owner of the medical viewer control.
      class MainForm1 : Form
      {
         private MedicalViewer _medicalViewer;

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MainForm1()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, @"ImageProcessingDemo\Image3.cmp"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // assign the added actions to a keyboard keys that will work like the mouse.
            MedicalViewerKeys medicalKeys = new MedicalViewerKeys(Keys.Down, Keys.Up, Keys.Left, Keys.Right, MedicalViewerModifiers.None);
            cell.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys);
            medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl;
            cell.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys);
            medicalKeys.MouseDown = Keys.PageDown;
            medicalKeys.MouseUp = Keys.PageUp;
            cell.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys);
            medicalKeys.MouseDown = Keys.Subtract;
            medicalKeys.MouseUp = Keys.Add;
            cell.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy");
            cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445");
            cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929");
            cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999");
            cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit);
            cell.Rows = 1;
            cell.Columns = 1;
            cell.Frozen = false;
            cell.DisplayRulers = MedicalViewerRulers.Both;
            cell.ApplyOnIndividualSubCell = false;
            cell.ApplyActionOnMove = true;
            cell.FitImageToCell = true;
            cell.Selected = true;
            cell.ShowTags = true;

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"image2.cmp"));

            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image);
            _medicalViewer.Cells.Add(cell1);


            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Scale);
            cell1.AddAction(MedicalViewerActionType.Offset);
            cell1.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // assign the added actions to a keyboard keys that will work like the mouse.
            medicalKeys = new MedicalViewerKeys(Keys.Down, Keys.Up, Keys.Left, Keys.Right, MedicalViewerModifiers.None);
            cell1.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys);
            medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl;
            cell1.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys);
            medicalKeys.MouseDown = Keys.PageDown;
            medicalKeys.MouseUp = Keys.PageUp;
            cell1.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys);
            medicalKeys.MouseDown = Keys.Subtract;
            medicalKeys.MouseUp = Keys.Add;
            cell1.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            cell1.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy");
            cell1.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445");
            cell1.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929");
            cell1.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999");
            cell1.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit);
            cell1.Rows = 2;
            cell1.Columns = 2;
            cell1.Frozen = false;
            cell1.DisplayRulers = MedicalViewerRulers.Both;
            cell1.ApplyOnIndividualSubCell = false;
            cell1.ApplyActionOnMove = true;
            cell1.FitImageToCell = true;
            cell1.Selected = true;
            cell1.ShowTags = true;

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewer-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewer"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>Create the control and add some image</para>
        <code lang="VB">        Public Sub MedicalViewerPropertiesExample()
            Dim form As MainForm2 = New MainForm2()
            form.ShowDialog()
        End Sub

        ' MainForm1 will be the owner of the medical viewer control.
        Private Class MainForm2 : Inherits Form
            Public _medicalViewer As MedicalViewer

            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust some properties.
                _medicalViewer = New MedicalViewer()
                _medicalViewer.Rows = 2
                _medicalViewer.Columns = 2
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
                _medicalViewer.ResizeBoth = System.Windows.Forms.Cursors.SizeAll
                _medicalViewer.ResizeHorizontalCursor = System.Windows.Forms.Cursors.SizeWE
                _medicalViewer.ResizeVerticalCursor = System.Windows.Forms.Cursors.SizeNS
                _medicalViewer.SplitterColor = Color.FromArgb(128, 128, 128)
                _medicalViewer.SplitterStyle = MedicalViewerSplitterStyle.Thick
                _medicalViewer.UseExtraSplitters = False
                _medicalViewer.VisibleRow = 0
                _medicalViewer.CellMaintenance = True
                _medicalViewer.CustomSplitterColor = True
                _medicalViewer.AutoScroll = True

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                cell.ActiveBorderColor = Color.FromArgb(0, 0, 255)
                cell.ActiveSubCellBorderColor = Color.FromArgb(0, 255, 0)
                cell.AnnotationDefaultCursor = System.Windows.Forms.Cursors.Cross
                cell.AnnotationMoveCursor = System.Windows.Forms.Cursors.SizeNWSE
                cell.AnnotationSelectCursor = System.Windows.Forms.Cursors.SizeAll

                cell.CellBackColor = Color.FromArgb(100, 100, 255)
                cell.BorderStyle = MedicalViewerBorderStyle.DashDotDot
                cell.BackColor = Color.FromArgb(70, 70, 180)
                cell.MeasurementUnit = MedicalViewerMeasurementUnit.Inches
                cell.NonActiveBorderColor = Color.FromArgb(0, 0, 0)
                cell.PaintingMethod = MedicalViewerPaintingMethod.Normal
                cell.RegionDefaultCursor = System.Windows.Forms.Cursors.Cross

                cell.RulerInColor = Color.FromArgb(255, 255, 0)
                cell.RulerOutColor = Color.FromArgb(255, 0, 0)
                cell.RulerStyle = MedicalViewerRulerStyle.Bordered
                cell.ShowCellScroll = False
                cell.ShowFreezeText = True
                cell.TextColor = Color.FromArgb(255, 255, 0)
                cell.TextQuality = MedicalViewerTextQuality.Draft
                cell.TextShadowColor = Color.FromArgb(0, 0, 0)
                cell.OverlayTextSize = 0
                cell.RegionBorderColor1 = Color.FromArgb(0, 0, 255)
                cell.RegionBorderColor2 = Color.FromArgb(255, 255, 255)
                cell.InteractiveInterpolation = True

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' assign the added actions to keyboard keys that will work like the mouse.
                Dim medicalKeys As MedicalViewerKeys = New MedicalViewerKeys()
                medicalKeys.MouseDown = Keys.Down
                medicalKeys.MouseUp = Keys.Up
                medicalKeys.MouseLeft = Keys.Left
                medicalKeys.MouseRight = Keys.Right
                cell.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys)
                medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl
                cell.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys)
                medicalKeys.MouseDown = Keys.PageDown
                medicalKeys.MouseUp = Keys.PageUp
                cell.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys)
                medicalKeys.MouseDown = Keys.Subtract
                medicalKeys.MouseUp = Keys.Add
                cell.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys)

                ' Go through all the built in actions and remove the actions that haven't been assigned to a mouse button, or a key.
                Dim index As Integer = 1
                Do While index &lt; 22
                    Dim actionType As MedicalViewerActionType = CType(index, MedicalViewerActionType)
                    If cell.IsActionAdded(actionType) Then
                        Dim mouseButton As MedicalViewerMouseButtons = cell.GetActionButton(actionType)
                        If mouseButton = MedicalViewerMouseButtons.None Then
                            Dim mykeys As MedicalViewerKeys = cell.GetActionKeys(actionType)
                            If mykeys.MouseLeft = Keys.None AndAlso mykeys.MouseUp = Keys.None AndAlso mykeys.MouseDown = Keys.None AndAlso mykeys.MouseRight = Keys.None Then
                                cell.RemoveAction(actionType)
                            End If
                        End If
                    End If
                    index += 1
                Loop

                ' Makes the window level apply the effect on all selected cells at the same time.
                Dim flags As MedicalViewerActionFlags = cell.GetActionFlags(MedicalViewerActionType.WindowLevel)
                flags = flags Or MedicalViewerActionFlags.Selected
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, flags)


                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image2.cmp"))
                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy")
                cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445")
                cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929")
                cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999")
                cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit)
                cell.Rows = 2
                cell.Columns = 2
                cell.Frozen = False
                cell.DisplayRulers = MedicalViewerRulers.Both
                cell.ApplyOnIndividualSubCell = False
                cell.ApplyActionOnMove = True
                cell.FitImageToCell = True
                cell.Selected = True
                cell.ShowTags = True

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image2.cmp"))
                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell()
                cell1.Image = _image
                cell1.Rows = 2
                cell1.Columns = 2
                cell1.Frozen = False
                cell1.DisplayRulers = MedicalViewerRulers.Both
                cell1.ApplyOnIndividualSubCell = False
                cell1.ApplyActionOnMove = True
                cell1.FitImageToCell = True
                cell1.Selected = True
                cell1.ShowTags = True
                _medicalViewer.Cells.Add(cell1)

                cell1.CellBackColor = Color.FromArgb(100, 100, 255)
                cell1.BorderStyle = MedicalViewerBorderStyle.DashDotDot
                cell1.BackColor = Color.FromArgb(70, 70, 180)
                cell1.MeasurementUnit = MedicalViewerMeasurementUnit.Inches
                cell1.NonActiveBorderColor = Color.FromArgb(0, 0, 0)
                cell1.PaintingMethod = MedicalViewerPaintingMethod.Normal
                cell1.RegionDefaultCursor = System.Windows.Forms.Cursors.Cross

                cell1.RulerInColor = Color.FromArgb(255, 255, 0)
                cell1.RulerOutColor = Color.FromArgb(255, 0, 0)
                cell1.RulerStyle = MedicalViewerRulerStyle.Bordered
                cell1.ShowCellScroll = False
                cell1.ShowFreezeText = True
                cell1.TextColor = Color.FromArgb(255, 255, 0)
                cell1.TextQuality = MedicalViewerTextQuality.Draft
                cell1.TextShadowColor = Color.FromArgb(0, 0, 0)
                cell1.OverlayTextSize = 0
                cell1.RegionBorderColor1 = Color.FromArgb(0, 0, 255)
                cell1.RegionBorderColor2 = Color.FromArgb(255, 255, 255)
                cell1.InteractiveInterpolation = True

                ' add some actions that will be used to change the properties of the images inside the control.
                cell1.AddAction(MedicalViewerActionType.WindowLevel)
                cell1.AddAction(MedicalViewerActionType.Alpha)
                cell1.AddAction(MedicalViewerActionType.Scale)
                cell1.AddAction(MedicalViewerActionType.Offset)
                cell1.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' assign the added actions to keyboard keys that will work like the mouse.
                medicalKeys = New MedicalViewerKeys()
                medicalKeys.MouseDown = Keys.Down
                medicalKeys.MouseUp = Keys.Up
                medicalKeys.MouseLeft = Keys.Left
                medicalKeys.MouseRight = Keys.Right
                cell1.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys)
                medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl
                cell1.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys)
                medicalKeys.MouseDown = Keys.PageDown
                medicalKeys.MouseUp = Keys.PageUp
                cell1.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys)
                medicalKeys.MouseDown = Keys.Subtract
                medicalKeys.MouseUp = Keys.Add
                cell1.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys)

                ' adjust some properties to the cell1 and add some tags.
                cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)
                cell1.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy")
                cell1.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445")
                cell1.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929")
                cell1.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999")
                cell1.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MedicalViewerPropertiesExample()
      {
         MainForm2 form = new MainForm2();
         form.ShowDialog();
      }

      // MainForm1 will be the owner of the medical viewer control.
      class MainForm2 : Form
      {
         public MedicalViewer _medicalViewer;

         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MainForm2()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust some properties.
            _medicalViewer = new MedicalViewer();
            _medicalViewer.Rows = 2;
            _medicalViewer.Columns = 2;
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
            _medicalViewer.ResizeBoth = System.Windows.Forms.Cursors.SizeAll;
            _medicalViewer.ResizeHorizontalCursor = System.Windows.Forms.Cursors.SizeWE;
            _medicalViewer.ResizeVerticalCursor = System.Windows.Forms.Cursors.SizeNS;
            _medicalViewer.SplitterColor = Color.FromArgb(128, 128, 128);
            _medicalViewer.SplitterStyle = MedicalViewerSplitterStyle.Thick;
            _medicalViewer.UseExtraSplitters = false;
            _medicalViewer.VisibleRow = 0;
            _medicalViewer.CellMaintenance = true;
            _medicalViewer.CustomSplitterColor = true;
            _medicalViewer.AutoScroll = true;

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            cell.ActiveBorderColor = Color.FromArgb(0, 0, 255);
            cell.ActiveSubCellBorderColor = Color.FromArgb(0, 255, 0);
            cell.AnnotationDefaultCursor = System.Windows.Forms.Cursors.Cross;
            cell.AnnotationMoveCursor = System.Windows.Forms.Cursors.SizeNWSE;
            cell.AnnotationSelectCursor = System.Windows.Forms.Cursors.SizeAll;

            cell.CellBackColor = Color.FromArgb(100, 100, 255);
            cell.BorderStyle = MedicalViewerBorderStyle.DashDotDot;
            cell.BackColor = Color.FromArgb(70, 70, 180);
            cell.MeasurementUnit = MedicalViewerMeasurementUnit.Inches;
            cell.NonActiveBorderColor = Color.FromArgb(0, 0, 0);
            cell.PaintingMethod = MedicalViewerPaintingMethod.Normal;
            cell.RegionDefaultCursor = System.Windows.Forms.Cursors.Cross;

            cell.RulerInColor = Color.FromArgb(255, 255, 0);
            cell.RulerOutColor = Color.FromArgb(255, 0, 0);
            cell.RulerStyle = MedicalViewerRulerStyle.Bordered;
            cell.ShowCellScroll = false;
            cell.ShowFreezeText = true;
            cell.TextColor = Color.FromArgb(255, 255, 0);
            cell.TextQuality = MedicalViewerTextQuality.Draft;
            cell.TextShadowColor = Color.FromArgb(0, 0, 0);
            cell.OverlayTextSize = 0;
            cell.RegionBorderColor1 = Color.FromArgb(0, 0, 255);
            cell.RegionBorderColor2 = Color.FromArgb(255, 255, 255);
            cell.InteractiveInterpolation = true;

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // assign the added actions to a keyboard keys that will work like the mouse.
            MedicalViewerKeys medicalKeys = new MedicalViewerKeys();
            medicalKeys.MouseDown = Keys.Down;
            medicalKeys.MouseUp = Keys.Up;
            medicalKeys.MouseLeft = Keys.Left;
            medicalKeys.MouseRight = Keys.Right;
            cell.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys);
            medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl;
            cell.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys);
            medicalKeys.MouseDown = Keys.PageDown;
            medicalKeys.MouseUp = Keys.PageUp;
            cell.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys);
            medicalKeys.MouseDown = Keys.Subtract;
            medicalKeys.MouseUp = Keys.Add;
            cell.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys);

            // Go through all the built in actions and remove the actions that have not been assigned to a mouse button, or a key.
            int index = 1;
            for (; index &lt; 22; index++)
            {
               MedicalViewerActionType actionType = (MedicalViewerActionType)index;
               if (cell.IsActionAdded(actionType))
               {
                  MedicalViewerMouseButtons mouseButton = cell.GetActionButton(actionType);
                  if (mouseButton == MedicalViewerMouseButtons.None)
                  {
                     MedicalViewerKeys keys = cell.GetActionKeys(actionType);
                     if (keys.MouseLeft == Keys.None &amp;&amp; keys.MouseUp == Keys.None &amp;&amp; keys.MouseDown == Keys.None &amp;&amp; keys.MouseRight == Keys.None)
                        cell.RemoveAction(actionType);
                  }
               }
            }

            // Makes the window level applies the effect on all selected cells at the same time.
            MedicalViewerActionFlags flags = cell.GetActionFlags(MedicalViewerActionType.WindowLevel);
            flags |= MedicalViewerActionFlags.Selected;
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, flags);


            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"image2.cmp"));
            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            cell.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy");
            cell.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445");
            cell.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929");
            cell.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999");
            cell.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit);
            cell.Rows = 2;
            cell.Columns = 2;
            cell.Frozen = false;
            cell.DisplayRulers = MedicalViewerRulers.Both;
            cell.ApplyOnIndividualSubCell = false;
            cell.ApplyActionOnMove = true;
            cell.FitImageToCell = true;
            cell.Selected = true;
            cell.ShowTags = true;

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"image2.cmp"));
            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell();
            cell1.Image = _image;
            cell1.Rows = 2;
            cell1.Columns = 2;
            cell1.Frozen = false;
            cell1.DisplayRulers = MedicalViewerRulers.Both;
            cell1.ApplyOnIndividualSubCell = false;
            cell1.ApplyActionOnMove = true;
            cell1.FitImageToCell = true;
            cell1.Selected = true;
            cell1.ShowTags = true;
            _medicalViewer.Cells.Add(cell1);

            cell1.CellBackColor = Color.FromArgb(100, 100, 255);
            cell1.BorderStyle = MedicalViewerBorderStyle.DashDotDot;
            cell1.BackColor = Color.FromArgb(70, 70, 180);
            cell1.MeasurementUnit = MedicalViewerMeasurementUnit.Inches;
            cell1.NonActiveBorderColor = Color.FromArgb(0, 0, 0);
            cell1.PaintingMethod = MedicalViewerPaintingMethod.Normal;
            cell1.RegionDefaultCursor = System.Windows.Forms.Cursors.Cross;

            cell1.RulerInColor = Color.FromArgb(255, 255, 0);
            cell1.RulerOutColor = Color.FromArgb(255, 0, 0);
            cell1.RulerStyle = MedicalViewerRulerStyle.Bordered;
            cell1.ShowCellScroll = false;
            cell1.ShowFreezeText = true;
            cell1.TextColor = Color.FromArgb(255, 255, 0);
            cell1.TextQuality = MedicalViewerTextQuality.Draft;
            cell1.TextShadowColor = Color.FromArgb(0, 0, 0);
            cell1.OverlayTextSize = 0;
            cell1.RegionBorderColor1 = Color.FromArgb(0, 0, 255);
            cell1.RegionBorderColor2 = Color.FromArgb(255, 255, 255);
            cell1.InteractiveInterpolation = true;

            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Scale);
            cell1.AddAction(MedicalViewerActionType.Offset);
            cell1.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // assign the added actions to a keyboard keys that will work like the mouse.
            medicalKeys = new MedicalViewerKeys();
            medicalKeys.MouseDown = Keys.Down;
            medicalKeys.MouseUp = Keys.Up;
            medicalKeys.MouseLeft = Keys.Left;
            medicalKeys.MouseRight = Keys.Right;
            cell1.SetActionKeys(MedicalViewerActionType.Offset, medicalKeys);
            medicalKeys.Modifiers = MedicalViewerModifiers.Ctrl;
            cell1.SetActionKeys(MedicalViewerActionType.WindowLevel, medicalKeys);
            medicalKeys.MouseDown = Keys.PageDown;
            medicalKeys.MouseUp = Keys.PageUp;
            cell1.SetActionKeys(MedicalViewerActionType.Stack, medicalKeys);
            medicalKeys.MouseDown = Keys.Subtract;
            medicalKeys.MouseUp = Keys.Add;
            cell1.SetActionKeys(MedicalViewerActionType.Scale, medicalKeys);

            // adjust some properties to the cell1 and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);
            cell1.SetTag(1, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "Good, Guy");
            cell1.SetTag(2, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "PID 125-98-445");
            cell1.SetTag(3, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "DOB 08/02/1929");
            cell1.SetTag(5, MedicalViewerTagAlignment.TopRight, MedicalViewerTagType.UserData, "03/16/1999");
            cell1.SetTag(0, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.RulerUnit);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerProperties-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewer"></see> class object with explicit parameters.
            </summary>
      <param name="gridmode">A value that represents whether to initialize the MedicalViewer with in grid mode.  If this parameter is false the
            grid will be initialized in layout mode.  Each cell will be able to be positioned at a specific location.  Otherwise it will be in row
            column mode.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of a <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="rows">The number of rows. The maximum allowed number of rows is 8.</param>
      <param name="columns">The number of columns. The maximum allowed number of columns is 8.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize">Finalize</see>.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewer"></see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.OnSizeChanged(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <returns>true if the specified key is a regular input key; otherwise, false.</returns>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.OnCreateControl">
      <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnCreateControl">Control.OnCreateControl</see>.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnCreateControl">Control.OnCreateControl.</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.Refresh">
      <summary>
            Updates and recalculates the data of all the cells in the medical viewer.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.Invalidate">
      <summary>
            Redraws all the cells in the medical viewer.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.BeginUpdate">
      <summary>
            Stops the viewer from being refreshed if changes are applied. This is useful to increase the control speed efficiency.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            This method will cause the viewer not to repaint if changes are applied. When the user calls the <see cref="M:Leadtools.MedicalViewer.MedicalViewer.EndUpdate" /> method, the viewer will repaint to show all the changes made. This is useful for better visual results and for speed efficiency.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.EndUpdate">
      <summary>
            Refreshes the control to include all the changes made after using the <see cref="M:Leadtools.MedicalViewer.MedicalViewer.BeginUpdate" /> method.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            The <see cref="M:Leadtools.MedicalViewer.MedicalViewer.BeginUpdate" /> method will cause the viewer not to repaint if changes are applied. When the user calls the <b>EndUpdate</b> method, the viewer will repaint to show all the changes made. This is useful for better visual results and for speed efficiency.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerTagInformation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.SaveLayout(System.IO.Stream)">
      <summary>
            Saves the layout to the specified stream.
            </summary>
      <keywords>Medical Web Viewer Layout|BW2|BW4|FMX18|FMX20</keywords>
      <param name="stream">The stream with the layout to be saved.</param>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub MedicorViewerLayoutExample2()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim l As Single() = {0.06F, 0.55F}
         Dim t As Single() = {0.75F, 0.75F}
         Dim r As Single() = {0.45F, 0.94F}
         Dim b As Single() = {0.25F, 0.25F}

         '
         ' Add some cells to the viewer
         '
         Dim i As Integer = 0
         Do While i &lt; l.Length
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell()

            Try
               cell.LayoutPosition = New MedicalViewerLayoutPosition(l(i), t(i), r(i), b(i))
               cell.FitImageToCell = True
               medicalViewer.Cells.Add(cell)
            Catch e As Exception
               MessageBox.Show(e.Message)
            End Try
            i += 1
         Loop

         '
         ' Save the layout
         '
         Dim f As FileInfo = New FileInfo(Path.Combine(LEAD_VARS.ImagesDir, "layout.xml"))
         Dim stream As FileStream = f.Create()

         medicalViewer.SaveLayout(stream)

         '
         ' Reload the cells
         '
         medicalViewer.Cells.Clear()
         stream.Seek(0, SeekOrigin.Begin)
         medicalViewer.LoadLayout(stream)
         '
         ' Show only if created in layout mode
         '
         If medicalViewer.GridMode = False Then
            myForm.ShowDialog()
         End If
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        public void MedicorViewerLayoutExample2()
        {
            MedicalViewerForm myForm = GetMedicalControl();
            MedicalViewer medicalViewer = myForm.Viewer;
            float[] l = { 0.06F, 0.55F };
            float[] t = { 0.75F, 0.75F };
            float[] r = { 0.45F, 0.94F };
            float[] b = { 0.25F, 0.25F };

            //
            // Add some cells to the viewer
            //
            for (int i = 0; i &lt; l.Length; i++)
            {
                MedicalViewerMultiCell cell = new MedicalViewerMultiCell();

                try
                {
                    cell.LayoutPosition = new MedicalViewerLayoutPosition(l[i], t[i], r[i], b[i]);
                    cell.FitImageToCell = true;
                    medicalViewer.Cells.Add(cell);                    
                }
                catch (Exception e)
                {
                    MessageBox.Show(e.Message);
                }
            }

            //
            // Save the layout
            //
            FileInfo f = new FileInfo("layout.xml");
            FileStream stream = f.Create();

            medicalViewer.SaveLayout(stream);            

            //
            // Reload the cells
            //
            medicalViewer.Cells.Clear();
            stream.Seek(0, SeekOrigin.Begin);
            medicalViewer.LoadLayout(stream);                                 
            //
            // Show only if created in layout mode
            //
            if (medicalViewer.GridMode == false)
                myForm.ShowDialog();
        }
</code>
        <!--MedicalViewer.MedicorViewerLayout2-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.LoadLayout(System.IO.Stream)">
      <summary>
            Loads the layout from the specified stream.
            </summary>
      <keywords>Medical Web Viewer Layout|BW2|BW4|FMX18|FMX20</keywords>
      <param name="stream">The stream.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.SaveLayout(System.IO.Stream)" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewer.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Processes Windows messages. Overrides <see cref="M:Leadtools.MedicalViewer.MedicalViewer.WndProc(System.Windows.Forms.Message@)">Finalize</see>.
            </summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" />Which represents the Windows Message to process.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.VisibleRow">
      <summary>
            Gets or sets the index of the first visible row in the MedicalViewer.
            </summary>
      <medaddon>yes</medaddon>
      <value>The index of the first visible row in the MedicalViewer.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.Cells">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" /> assigned to the control.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCellCollection`1" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.Rows">
      <summary>
            Gets or sets the number of rows.
            </summary>
      <medaddon>yes</medaddon>
      <value>The number of rows.The maximum allowed number of rows is 8.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.Columns">
      <summary>
            Gets or sets the number of columns.
            </summary>
      <medaddon>yes</medaddon>
      <value>The number of columns. The maximum allowed number of columns is 8.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>..
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.BackColor">
      <summary>
            Gets or sets the color of the control area that has not been filled with cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the control area that has not been filled with cells.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.Cursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is hovering over the medical control.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the mouse pointer is hovering over the medical control.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.ResizeVerticalCursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the vertical splitter of the medical control.
            </summary>
      <medaddon>yes</medaddon>
      <value>A Cursor object that represents the cursor to display when the mouse pointer is over the vertical splitter of the medical control.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.ResizeHorizontalCursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the horizontal splitter of the medical control.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the mouse pointer is over the horizontal splitter of the medical control.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.ResizeBoth">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the intersection between the horizontal and vertical splitters.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Cursor" /> object that represents the cursor to display when the mouse pointer is over the intersection between the horizontal and vertical splitters.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.AutoScroll">
      <summary>
            Enables or disables whether scroll bars automatically appear when the control contents are larger than the visible area.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to enable scroll bars; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.CellMaintenance">
      <summary>
            Enables or disables maintaining the cell size if the user moves a splitter, the vertical or horizontal line that separates.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to enable cell maintenance; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.UseExtraSplitters">
      <summary>
            Enables or disables showing the extra splitters at the bottom and the right of the viewer.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the splitters; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.CustomSplitterColor">
      <summary>
            Enables or disables painting the splitters with a custom color specified in <see cref="P:Leadtools.MedicalViewer.MedicalViewer.SplitterColor" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to use the color specified in <see cref="P:Leadtools.MedicalViewer.MedicalViewer.SplitterColor" />, false to use the system theme color.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.SplitterColor">
      <summary>
            Gets or sets the color of the splitter.
            </summary>
      <medaddon>yes</medaddon>
      <value>The color of the splitter. This is useful only if <see cref="P:Leadtools.MedicalViewer.MedicalViewer.CustomSplitterColor" /> is true</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.LayoutOptions">
      <summary>
            (Read only) Gets the layout options for the MedicalViewer control.
            </summary>
      <keywords>Medical Web Viewer Layout|BW2|BW4|FMX18|FMX20</keywords>
      <value>The layout options.</value>
      <remarks>The layout options are only valid when the control was created in non grid mode. The options control
            specific settings having to do with the layout and design of cells placed in the MedicalViewer.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.GridMode">
      <summary>
            (Read only) Gets a value indicating whether the MedicalViewer was created in grid mode.
            </summary>
      <value>
        <c>true</c> if created in created in grid mode; otherwise, <c>false</c>.</value>
      <remarks>
            If the control is created in grid mode the cells are laid out in row/column form.  If the control is not
            created in grid mode you can specific a layout position for the each cell in the MedicalViewer.  The position 
            is represented by four dimensionless floating point values, in the range 0.0 to 1.0.  The Lower left 
            hand position represents the (0.0,0.0).
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.CreateParams">
      <summary>
            Overrides the property <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.createparams(ide).aspx">CreateParams</a>. Encapsulates the information needed when creating a control.
            </summary>
      <medaddon>yes</medaddon>
      <value>Overrides the property <a href="http://msdn.microsoft.com/en-us/library/system.windows.forms.createparams(ide).aspx">CreateParams</a>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.SplitterStyle">
      <summary>
            Gets or sets the enumerated value that indicates the painting the style of the splitter.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated value that indicates the style of the splitter.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewer.SelectedCellsChanged">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs whenever any cell has been selected or deselected.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewer.DeleteCell">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <value>Optional delegate method for additional processing. Occurs when the user delete a cell or multiple cells.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewer.ViewerScroll">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Optional delegate method for additional processing. Occurs when the user scrolls the window.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.AllowMultipleSelection">
      <summary>
            Gets or sets the value that indicates whether multiple cells can be selected at the same time (Using the CTRL key), or through <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Selected" />.
            </summary>
      <value>
            true to allow the user to select multiple cells at the same time; otherwise, false.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.SynchronizationType">
      <summary>
            Gets or sets the synchronization type used to synchronize the cells in this viewer.
            </summary>
      <isnew>3/15/2011</isnew>
      <keywords>Synchronization | Alignment</keywords>
      <value>The synchronization type.</value>
      <remarks>
            Currently, only the automatic synchronization is available.
            <para>The cells must be added to the same <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> if the user want to synchronize them together. To add the cells to the Medical Viewer, use the collection <see cref="P:Leadtools.MedicalViewer.MedicalViewer.Cells" />.</para><para>To enable this feature, please do the following:</para><list type="number"><item><description>Set the <b>SynchronizationType</b> to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType" />.Automatic.</description></item><item><description>Each cell has a <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SynchronizationID" /> property that receives a string which is used to help the toolkit identify which cells to synchronize. To synchronize two cells, pass the same value to SynchronizationID in both cells. You can pass the StudyUID to synchronize the cells from the same study.</description></item><item><description>Set the image position for each frame using <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)" /> method. This is required in order the Medical Viewer be able to match the series with the same image position together.</description></item><item><description>Set the image orientation using <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" /> for each cell to synchronize.</description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSyncrhonizationForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private _seriesManager512 As MedicalViewerSeriesManager

            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager, ByVal output512 As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output
                _seriesManager512 = output512


                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 0
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"

                ' this tag to identify the cell.





                ' Load the second cell with 512 frame

                cell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
                count = output512.Stacks(0).Items.Count
                imageInformation = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output512.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                cell.Tag = 1
                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output512.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output512.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output512.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output512.Stacks(0).Items(0).FrameOfReferenceUID
                cell.SynchronizationID = "Test"



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic
                DicomEngine.Shutdown()



            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                Dim output As MedicalViewerSeriesManager
                If CInt(cell.Tag) = 0 Then
                    output = _seriesManager
                Else
                    output = _seriesManager512
                End If

                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(output.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerSyncrhonizationForm() As MedicalViewerSyncrhonizationForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()
            Dim output512 As MedicalViewerSeriesManager = form.LoadJamesHead512()

            Return New MedicalViewerSyncrhonizationForm(output, output512)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerSynchronizationExample()
            Dim myForm As MedicalViewerSyncrhonizationForm = GetMedicalViewerSyncrhonizationForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerSyncrhonizationForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         private MedicalViewerSeriesManager _seriesManager512;

         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSyncrhonizationForm(MedicalViewerSeriesManager output, MedicalViewerSeriesManager output512)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;
            _seriesManager512 = output512;


            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 0;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";

            // this tag to identify the cell.





            // Load the second cell with 512 frame

            cell = new MedicalViewerMultiCell(null, true, 1, 1);
            count = output512.Stacks[0].Items.Count;
            imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output512.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.Tag = 1;
            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output512.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output512.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output512.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output512.Stacks[0].Items[0].FrameOfReferenceUID;
            cell.SynchronizationID = "Test";



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            _medicalViewer.SynchronizationType = MedicalViewerSynchronizationType.Automatic;
            DicomEngine.Shutdown();



         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);

            MedicalViewerSeriesManager output = (int)cell.Tag == 0 ? _seriesManager : _seriesManager512;

            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(output.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerSyncrhonizationForm GetMedicalViewerSyncrhonizationForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();
         MedicalViewerSeriesManager output512 = form.LoadJamesHead512();

         return new MedicalViewerSyncrhonizationForm(output, output512);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerSynchronizationExample()
      {
         MedicalViewerSyncrhonizationForm myForm = GetMedicalViewerSyncrhonizationForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.SyncID-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.ShowSelectedReferenceLine">
      <summary>
            Gets or sets the value that indicates whether to show the reference line only of the selected cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            true to show only the reference line of the selected cell(s); otherwise, it is false.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragDrop">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
        <value>Optional delegate method for additional processing. Occurs when the drag-and-drop operation is completed.</value>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.MedicalViewer.MedicalViewer.ViewerDragOver">
      <summary>
            Optional delegate method for additional processing.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            Optional delegate method for additional processing. Occurs when an object is dragged over the viewer's bounds.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewer.Exploded">
      <summary>
            Gets or sets the value that determines whether the viewer is in the exploded mode or not.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
            true if the viewer is in the exploded mode, false otherwise.
            </value>
      <remarks>
            The exploded mode is a mode where the selected cell takes the whole viewer area.
            <para> This property is useful when the viewer is displaying multiple cells, and the user wants to enlarge one of them for a closer study.</para><para> To make the exploded mode work, the user must select one cell only.</para></remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSelectedCellsChangedEventArgs">
      <summary>
            The MedicalViewerSelectedCellsChangedEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewer.SelectedCellsChanged" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <see cref="E:Leadtools.MedicalViewer.MedicalViewer.SelectedCellsChanged" /></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSelectedCellsChangedEventArgs.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSelectedCellsChangedEventArgs"></see> class object with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex"> the index of the cell which has triggered the event</param>
      <param name="selectedCellsIndexes">array of integer values that represents the indexes of the selected cells.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSelectedCellsChangedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell which has triggered the event.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell which has triggered the event.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSelectedCellsChangedEventArgs.SelectedCellsIndexes">
      <summary>
            (Read only) Gets an array of integer values that represents the indexes of the selected cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>Array of integer values that represents the indexes of the selected cells.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerFusion">
      <summary>
            A class that contains the fused image along with properties that handle the fusion process.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class is used with the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.Fusion" /> property.</description>
          </item>
          <item>
            <description> Fusion is a process used to display multiple, overlapped images at the same 
            time, each having a degree of transparency. Fusion can be used to blend many different modalities 
            such as CT/MR, CT/MR/PET, CT/NM, CT/US, CT/PET...etc.</description>
          </item>
          <item>
            <description>For example, soft tissue information from a 
            PET scan can be combined with a CT scan, creating an anatomical context for 
            the soft tissue information. As a result, diagnosis and treatment of ailments are improved.  
            For more information, refer to 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />. </description>
          </item>
        </list>
        <para>
          <table>
            <tr>
              <th>Head and Neck CT/PET Data Set</th>
            </tr>
            <tr>
              <td>
                <img src="fusion1.png" alt="CT Scan Image" />
              </td>
              <td>
                <img src="fusion2.png" alt="PET Image" />
              </td>
              <td>
                <img src="fusion3.png" alt="CT/PET Fused image" />
              </td>
            </tr>
            <tr>
              <td>1. CT Scan Image</td>
              <td>2. PET Image</td>
              <td>3. CT/PET Fused Image</td>
            </tr>
          </table>
        </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerFusionForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                Dim _image As RasterImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                cell.FitImageToCell = False

                ' add some action that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user click and drag the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' Creates a new fusion object, this object will hold the image (image3.dcm) that will be fused with the original image (xa.dcm).
                Dim fusion As MedicalViewerFusion = New MedicalViewerFusion()

                ' the fused image.
                fusion.FusedImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image3.dcm"))

                ' the fusion scale.
                fusion.FusionScale = 0.5F

                ' the color palette that will be used in the fusion process.
                fusion.ColorPalette = MedicalViewerPaletteType.Cool

                ' start the fusion.
                cell.SubCells(0).Fusion.Add(fusion)


                _medicalViewer.Cells.Add(cell)
                ' adjust some properties to the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.ScaleType = MedicalViewerScaleType.Dynamic

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub


            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerFusionForm() As MedicalViewerFusionForm
            Return New MedicalViewerFusionForm()
        End Function

        ' This examples fuses the xa.dcm image with the image3.dcm image, and uses the preset palette (Cool) to do the fusion process.

        Public Sub MedicalViewerFusionExample()
            Dim myForm As MedicalViewerFusionForm = GetMedicalViewerFusionForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerFusionForm : Form
      {
          private MedicalViewer _medicalViewer;
          void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
          {
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
          }

          public MedicalViewerFusionForm()
          {
              DicomEngine.Startup();
              RasterCodecs _codecs = new RasterCodecs();

              this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

              // Create the medical viewer and adjust the size and the location.
              _medicalViewer = new MedicalViewer(1, 2);
              _medicalViewer.Location = new Point(0, 0);
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

              // Load an image and then add it to the control.
              RasterImage _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"));
              MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

              cell.FitImageToCell = false;

              // add some action that will be used to change the properties of the images inside the control.
              cell.AddAction(MedicalViewerActionType.Scale);
              cell.AddAction(MedicalViewerActionType.Offset);
              cell.AddAction(MedicalViewerActionType.WindowLevel);
              cell.AddAction(MedicalViewerActionType.Stack);

              // assign the added actions to a mouse button, meaning that when the user click and drag the mouse button, the associated action will be activated.
              cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

              // Creates a new fusion object, this object will hold the image (image3.dcm) that will be fused with the original image (xa.dcm).
              MedicalViewerFusion fusion = new MedicalViewerFusion();

              // the fused image.
              fusion.FusedImage = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image3.dcm"));
              // the fusion scale.
              fusion.FusionScale = 0.5f;
              // the color palette that will be used in the fusion process.
              fusion.ColorPalette = MedicalViewerPaletteType.Cool;

              // start the fusion.
              cell.SubCells[0].Fusion.Add(fusion);


              _medicalViewer.Cells.Add(cell);
              // adjust some properties to the cell and add some tags.
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

              cell.ScaleType = MedicalViewerScaleType.Dynamic;

              Controls.Add(_medicalViewer);
              _medicalViewer.Dock = DockStyle.Fill;
              DicomEngine.Shutdown();
          }

          void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
          {
          }


          public MedicalViewer Viewer
          {
              get { return _medicalViewer; }
          }
      }

      MedicalViewerFusionForm GetMedicalViewerFusionForm()
      {
          return new MedicalViewerFusionForm();
      }

      // This examples fuses the xa.dcm image with the image3.dcm image, and uses the preset palette (Cool) to do the fusion process.

      public void MedicalViewerFusionExample()
      {
          MedicalViewerFusionForm myForm = GetMedicalViewerFusionForm();
          MedicalViewer medicalViewer = myForm.Viewer;

          myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.FusionSample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerFusion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFusion.FusionScale">
      <summary>
            Gets or set the value that represents the amount of transparency in the fusion.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description> Valid values range from 0.0 to 1.0. A value of 0.0 means the fused 
            image is invisible. A value of 1.0 means that the image is opaque.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFusion.Center">
      <summary>
            Gets or sets the window-level center value for the fused image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description> After the user assigns the <see cref="P:Leadtools.MedicalViewer.MedicalViewerFusion.FusedImage" /> property, the 
            toolkit calculates the default center value based on the image's attributes. The image 
            can continue to be adjusted as the user sees fit.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFusion.Width">
      <summary>
            Gets or sets the window-level width value of the fused image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description> After the user assigns the <see cref="P:Leadtools.MedicalViewer.MedicalViewerFusion.FusedImage" /> property, the toolkit 
            calculates the default width value based on the image's attributes. Additional adjustments 
            can be made.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFusion.ColorPalette">
      <summary>
            Gets or sets the palette used to fuse the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description> For a list of the available preset palettes, refer to 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaletteType" />.</description>
          </item>
          <item>
            <description> Custom palettes can also be used. For more information, refer to 
            <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.CustomLookupTable" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerFusion.FusedImage">
      <summary>
            Gets or sets the image that will be fused with the original image. <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.Image" />.
            </summary>
      <remarks>
        <list>
          <item>
            <description> Fusion is a process used to display multiple, overlapped images at the same time, 
            each having a degree of transparency. It can be used to blend many different modalities such
            as CT/MR, CT/MR/PET, CT/NM, CT/US, CT/PE...etc.
            </description>
          </item>
          <item>
            <description>For example, soft tissue information from a 
            PET scan can be combined with a CT scan, creating an anatomical context for 
            the soft tissue information. As a result, diagnosis and treatment of ailments are improved.  For more information, refer to 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />. 
            </description>
          </item>
          <item>
            <description> After the user assigns the <strong>FusedImage</strong>, the <see cref="P:Leadtools.MedicalViewer.MedicalViewerFusion.Width" /> 
            and <see cref="P:Leadtools.MedicalViewer.MedicalViewerFusion.Center" /> values are calculated automatically.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass">
      <summary>
             Represents the magnifying glass.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>To set the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> mthod. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.</para>
        <para>The mouse controls the actions as follows:</para>
        <ul>
          <li>Click and hold the mouse to start enable the magnifying glass effect. </li>
          <li>Dragging the mouse causes the magnifying glass to move with the cursor. When the assigned mouse button is released the action ends.</li>
        </ul>
      </remarks>
      <example>
        <para>This example changes the appearance of the magnify glass</para>
        <code lang="VB">      Public Sub MedicalViewerMagnifyGlassExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim magnifyGlass As MedicalViewerMagnifyGlass = New MedicalViewerMagnifyGlass()
         magnifyGlass.Border3D = True
         magnifyGlass.Elliptical = False
         magnifyGlass.Height = 200
         magnifyGlass.Width = 200
         magnifyGlass.Zoom = 400
         magnifyGlass.Crosshair = MedicalViewerCrosshairStyle.Invert
         magnifyGlass.BorderSize = 3
         magnifyGlass.PenColor = Color.FromArgb(255, 0, 0)

         cell.SetActionProperties(MedicalViewerActionType.MagnifyGlass, magnifyGlass)
         myForm.ShowDialog()
      End Sub</code>
        <code lang="CS">      public void MedicalViewerMagnifyGlassExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerMagnifyGlass magnifyGlass = new MedicalViewerMagnifyGlass();
         magnifyGlass.Border3D = true;
         magnifyGlass.Elliptical = false;
         magnifyGlass.Height = 200;
         magnifyGlass.Width = 200;
         magnifyGlass.Zoom = 400;
         magnifyGlass.Crosshair = MedicalViewerCrosshairStyle.Invert;
         magnifyGlass.BorderSize = 3;
         magnifyGlass.PenColor = Color.FromArgb(255, 0, 0);

         cell.SetActionProperties(MedicalViewerActionType.MagnifyGlass, magnifyGlass);
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerMagnifyGlass-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean,System.Int32,System.Boolean,Leadtools.MedicalViewer.MedicalViewerCrosshairStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass"></see> class with specified width, height, zoom factor, border color, shape, 3d border value, and crosshair style.
            </summary>
      <medaddon>yes</medaddon>
      <param name="width">The width of the magnifying glass.</param>
      <param name="height">The height of the magnifying glass.</param>
      <param name="zoom">The zoom factor of the magnifying glass.</param>
      <param name="penColor">The color of the magnifying glass border</param>
      <param name="elliptical">true to show an elliptical magnifying glass, false to show a rectangular magnifying glass.</param>
      <param name="borderSize">The border thickness of the magnifying glass .</param>
      <param name="border3d">true to show a 3d border, false to show a flat border.</param>
      <param name="crosshair">The style of crosshair of the magnifying glass.</param>
      <example>
        <para>Change the appearance of the magnify glass</para>
        <code lang="VB">      Public Sub MedicalViewerMagnifyGlassConstructorExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim magnifyGlass As MedicalViewerMagnifyGlass = New MedicalViewerMagnifyGlass(200, 200, 400, Color.FromArgb(255, 0, 0), False, 3, True, MedicalViewerCrosshairStyle.Fine)
         cell.SetActionProperties(MedicalViewerActionType.MagnifyGlass, magnifyGlass)
         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerMagnifyGlassConstructorExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerMagnifyGlass magnifyGlass = new MedicalViewerMagnifyGlass(200, 200, 400, Color.FromArgb(255, 0, 0), false, 3, true, MedicalViewerCrosshairStyle.Fine);
         cell.SetActionProperties(MedicalViewerActionType.MagnifyGlass, magnifyGlass);
         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerMagnifyGlassConstructor-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Width">
      <summary>
            Gets or sets the value that indicates the width of the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Int32" /> value that indicates the width of the magnifying glass.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Height">
      <summary>
            Gets or sets the value that indicates the height of the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Int32" /> value that indicates the height of the magnifying glass.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Zoom">
      <summary>
            Gets or sets the value that indicates the zoom factor of the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Int32" /> value that indicates the zoom factor of the magnifying glass.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.PenColor">
      <summary>
            Gets or sets the color of the magnifying glass border.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Drawing.Color" /> object that represents the color of the magnifying glass border.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Elliptical">
      <summary>
            Indicates whether to show an elliptical magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show an elliptical magnifying glass, false to show a rectangular magnifying glass.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.BorderSize">
      <summary>
            Gets or sets the value that indicates the magnifying glass border thickness.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Int32" /> value that indicates the magnifying glass border thickness.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Border3D">
      <summary>
            Indicates whether to show the 3D border of the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the 3d border, false to show a flat border.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass.Crosshair">
      <summary>
            Gets or sets an enumerated value that indicates the style of the crosshair of the magnifying glass.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.MedicalViewer.MedicalViewerCrosshairStyle" /> enumerated value that indicates the type of the crosshair of the magnifying glass.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMagnifyGlass" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerImageData">
      <summary>
            the class <b>MedicalViewerImageData</b> contains information of a DICOM image information obtained from the data set.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The information placed in an instance of this class are used to arrange and categorize a DICOM images based on their locations.</description>
          </item>
          <item>
            <description>To do the sorting, the user should create an instance of this class for each image, fill it will DICOM information, place each in a list, then send the list to the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerImageData.#ctor">
      <summary>
            Initializes a new <b>MedicalViewerImageData</b> class object with default parameters.
            </summary>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerImageData.#ctor(System.Object,Leadtools.MedicalViewer.Point3D,System.String,Leadtools.MedicalViewer.Point2D,System.Int32,System.String,System.Int32)">
      <summary>
            Initializes a new <b>MedicalViewerImageData</b> class object with explicit parameters.
            </summary>
      <param name="data"> An object that contains data about image represented by this class.</param>
      <param name="imagePosition">The image position of the frame image.</param>
      <param name="imageOrientation">The image orientation of the frame image.</param>
      <param name="pixelSpacing">The pixel spacing of the image.</param>
      <param name="echoNumber"> The image echo number.</param>
      <param name="frameOfReferenceUID"> The image frame of reference UID.</param>
      <param name="instanceNumber"> The image instance number.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.EchoNumber">
      <summary>
            Gets or sets the image echo number.
            </summary>
      <value>
            A value that represents the image echo number.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>If no echo information available, set this value to 0.</description>
          </item>
          <item>
            <description>The echo number is used to classify the series and group it based on the echo number. For more information, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" />.</description>
          </item>
          <item>
            <description>This value can be retrieved from the DicomDataSet.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.Data">
      <summary>
             Gets or sets a user defined object that contains data about image represented by this class.
            </summary>
      <value>
            A value that indicates the user defined object that contains data about image represented by this class.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.ImagePosition">
      <summary>
            Gets or sets the image position of the image that is represented by this class.
            </summary>
      <value>
            A <see cref="T:Leadtools.MedicalViewer.Point3D" /> that represents the image position of the image that is represented by this class.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.PixelSpacing">
      <summary>
            Gets or sets the image pixel spacing.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.Point2D" /> that represents the image pixel spacing.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.Image">
      <summary>
            Gets or sets the <see cref="T:Leadtools.RasterImage" /> represented by this class.
            </summary>
      <value>
            A <see cref="T:Leadtools.RasterImage" /> that is represented by this class. This Property can be left empty when trying to sort the <b>MedicalViewerImageData</b> list using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> method. However, if the value is not set, the <see cref="P:Leadtools.MedicalViewer.MedicalViewerImageData.Data" /> property needs to be set to identify each image class from the list after sorting.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.FrameOfReferenceUID">
      <summary>
            Gets or sets the frame reference of UID.
            </summary>
      <value>
            A value that indicates the frame reference of UID information. It will be used when implementing the reference line.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.ImageOrientation">
      <summary>
            Gets or sets a string with the float values that represent the orientation of the image attached to this cell.
            </summary>
      <value>
            A string with the float values that represents the orientation of the image attached to this cell. The values are separated in this string by '\'.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>This value can be retrieved from the DicomDataSet.</description>
          </item>
          <item>
            <description>To get or set the orientation in a float array form, use the method ImageOrientationArray property.</description>
          </item>
          <item>
            <description>If the user fills this property, the property ImageOrientationArray will be filled as well.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.InstanceNumber">
      <summary>
            Gets or sets the image instance number.
            </summary>
      <value>
            A Value that represents the image instance number. This value is useful for sorting and retrieving more accurate information.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.SequenceName">
      <summary>
            Gets or sets the image sequence name.
            </summary>
      <value>
            A string that represents the image sequence name. This value is useful for classifying and grouping the images.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.ImageOrientationArray">
      <summary>
            Gets or sets the array that represents the Image orientation.
            </summary>
      <value>
            Array of float that represents the orientation of the image.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>This value can be retrieved from the DicomDataSet.</description>
          </item>
          <item>
            <description>To get or set the orientation in a string form, use the method ImageOrientation property.</description>
          </item>
          <item>
            <description>If the user fills this property, the property ImageOrientation will be filled as well.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageData.CaptureTime">
      <summary>
            Gets or sets image capture date and time.
            </summary>
      <value>
            A value that represents the image capture date and time. This value is useful for sorting and retrieving more accurate information.
            </value>
      <remarks>
            This value can be retrieved from the DicomDataSet
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerIcon">
      <summary>
            Represents the class that contains the properties of the medical viewer icons.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <example>
        <para>This example shows the titlebar on the cell and change the properties of the first icon in the title bar, then invert the check for each title bar icon of the first cell</para>
        <code lang="VB">      Public Sub MedicalViewerIconExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Titlebar.Visible = True
         cell.Titlebar.UseCustomColor = True
         cell.Titlebar.Color = Color.FromArgb(255, 128, 0)
         cell.Titlebar.Icons(0).Color = Color.FromArgb(255, 255, 0)
         cell.Titlebar.Icons(0).ColorHover = Color.FromArgb(255, 255, 255)
         cell.Titlebar.Icons(0).ColorPressed = Color.FromArgb(0, 0, 255)
         cell.Titlebar.Icons(0).ReadOnly = False
         cell.Titlebar.Icons(0).Visible = True

         Dim index As Integer
         Dim iconStatus As MedicalViewerIconStatus
         For index = 0 To 7
            iconStatus = cell.GetTitlebarIconState(0, index)
            If iconStatus = MedicalViewerIconStatus.Checked Then
               cell.SetTitlebarIconState(0, index, MedicalViewerIconStatus.Unchecked)
            Else
               cell.SetTitlebarIconState(0, index, MedicalViewerIconStatus.Checked)
            End If
         Next index

         myForm.ShowDialog()
      End Sub
</code>
        <code lang="CS">      public void MedicalViewerIconExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Titlebar.Visible = true;
         cell.Titlebar.UseCustomColor = true;
         cell.Titlebar.Color = Color.FromArgb(255, 128, 0);
         cell.Titlebar.Icons[0].Color = Color.FromArgb(255, 255, 0);
         cell.Titlebar.Icons[0].ColorHover = Color.FromArgb(255, 255, 255);
         cell.Titlebar.Icons[0].ColorPressed = Color.FromArgb(0, 0, 255);
         cell.Titlebar.Icons[0].ReadOnly = false;
         cell.Titlebar.Icons[0].Visible = true;

         int  index;
         MedicalViewerIconStatus iconStatus;
         for (index = 0; index &lt; 8; index++)
         {
            iconStatus = cell.GetTitlebarIconState(0, index);
            cell.SetTitlebarIconState(0, index, iconStatus == MedicalViewerIconStatus.Checked ? MedicalViewerIconStatus.Unchecked : MedicalViewerIconStatus.Checked);
         }

         myForm.ShowDialog();
      }
</code>
        <!--MedicalViewer.MedicalViewerIcon-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerIcon.Visible">
      <summary>
            Determines whether to display the icon.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the icon, false to hide the icon.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerIcon.ReadOnly">
      <summary>
            Determines whether to make the icon read-only (meaning that it can not be adjusted manually).
            </summary>
      <medaddon>yes</medaddon>
      <value>true to make it read-only; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerIcon.Color">
      <summary>
            Gets or sets the value that represents the color of the icon when unpressed.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the icon when unpressed.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerIcon.ColorPressed">
      <summary>
            Gets or sets the value that represents the color of the icon when pressed.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the icon when pressed.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerIcon.ColorHover">
      <summary>
            Gets or sets the value that represents the color of the icon when the mouse is hovering over it.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterColor" /> that represents the color of the icon when the mouse is hovering over it.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnnotationText">
      <summary>
             Represents the class that contains the properties of the annotation text action.
             </summary>
      <medaddon>yes</medaddon>
      <remarks>
            
             To set the properties of the annotation text action, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method. To retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method.
             For more information, refer to <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics.MedicalViewer~MV.Topics.WorkingWithAnnotations.html">Working With Annotations</a>.
             </remarks>
      <example>
        <para>This example sets the properties for the Text annotation action</para>
        <code lang="VB">        Private Class MedicalViewerForm1 : Inherits Form
            Private _medicalViewer As MedicalViewer
            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.AnnotationText)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationText, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

      Private Function GetMedicalControl1() As MedicalViewerForm1
         Return New MedicalViewerForm1()
      End Function


      Public Sub MedicalViewerAnnotationTextExample()
         Dim myForm As MedicalViewerForm1 = GetMedicalControl1()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         Dim text As MedicalViewerAnnotationText = New MedicalViewerAnnotationText()
         text.AnnotationColor = Color.FromArgb(0, 255, 0)
         text.Flags = MedicalViewerAnnotationFlags.AllObjects
         cell.SetActionProperties(MedicalViewerActionType.AnnotationText, text)

         myForm.ShowDialog()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm1 : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm1()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.AnnotationText);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationText, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm1 GetMedicalControl1()
      {
         return new MedicalViewerForm1();
      }


      public void MedicalViewerAnnotationTextExample()
      {
         MedicalViewerForm1 myForm = GetMedicalControl1();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationText text = new MedicalViewerAnnotationText();
         text.AnnotationColor = Color.FromArgb(0, 255, 0);
         text.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationText, text);

         myForm.ShowDialog();
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationText-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationText.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationText"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationText" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnnotationText.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationText"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="textColor">The color of the text.</param>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.AnnotationText)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.AnnotationText, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalControl() As MedicalViewerForm
            Return New MedicalViewerForm()
        End Function


        Public Sub MedicalViewerAnnotationTextExample1()
            Dim myForm As MedicalViewerForm = GetMedicalControl()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

            Dim text As MedicalViewerAnnotationText = New MedicalViewerAnnotationText(Color.FromArgb(0, 0, 255))
            text.Flags = MedicalViewerAnnotationFlags.AllObjects
            cell.SetActionProperties(MedicalViewerActionType.AnnotationText, text)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.AnnotationText);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.AnnotationText, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }


      public void MedicalViewerAnnotationTextExample1()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         MedicalViewerAnnotationText text = new MedicalViewerAnnotationText(Color.FromArgb(0, 0, 255));
         text.Flags = MedicalViewerAnnotationFlags.AllObjects;
         cell.SetActionProperties(MedicalViewerActionType.AnnotationText, text);

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnnotationText1-->
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnnotationText.TextColor">
      <summary>
            Gets or sets the color of the text.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:System.Drawing.Color" /> object that represents the color of the text.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnnotationText" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerUserTagEventArgs">
      <summary>
            The MedicalViewerUserTagEventArgs class provides information about the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.UserTag" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerUserTagEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerUserTagEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object used to paint the item.</param>
      <param name="clipRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle in which to paint.</param>
      <param name="cellIndex">The index of the cell on which the user tag. will be drawn.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUserTagEventArgs.CellIndex">
      <summary>
            Gets or sets the value that indicates the index of the cell on which the user tag will be drawn.  
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell on which the user tag will be drawn.  </value>
      <remarks>
            This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /> object.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject">
      <summary>
            Represents the base class that is used to synchronize multiple cells together through various action.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            The user must inherit this class and implement both <see cref="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.DoSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)" /> and <see cref="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.DoUnSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)" />.
            <para>To synchronize a series of images together (alignment), refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject" />.</para><para>To enable this feature, apply the following:</para><list type="number"><item><description>Create a new instance of <b>MedicalViewerStackSynchronizationObject</b>.</description></item><item><description>Set the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Mode" /> to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType" />.Automatic.</description></item><item><description>Add the intended cells to synchronize to the <b>MedicalViewerSynchronizationObject</b> through the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Cells" /> collection.</description></item><item><description>For each cell, make sure to set the image position for each frame using <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)" /> method. This is required in order for the Medical Viewer to be able to match the series with the same image position together.</description></item><item><description>For each cell intended to synchronize, make sure to set the image orientation using <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" />.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.#ctor">
      <summary>
            Initializes a new Leadtools.MedicalViewer.MedicalViewerSynchronizationObject class object with default parameters.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.#ctor(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" /> class.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="type">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that serves as a flag to determines the type of synchronization of this object.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.DoSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)">
      <summary>
            (Abstract) Called when the user adds any new cell to the synchronization object.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="baseCell"> The cell that is just been added to synchronization object.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.DoUnSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)">
      <summary>
            (Abstract) Called when the user removes any cell from the synchronization object.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="baseCell"> The cell that is just been removed from synchronization object.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Type">
      <summary>
            (Read only) Gets the type of the synchronization.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that represents the type of this synchronization object.
            </value>
      <remarks>
            To set the type, send it as a parameter to the constructor <see cref="M:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.#ctor(Leadtools.MedicalViewer.MedicalViewerActionType)" />.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Parent">
      <summary>
            (Read only) Gets the parent of the synchronization object.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" /> cell that represents the parent of this synchronization class.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Cells">
      <summary>
            (Read only) Gets the collection that represents the cells that will be synchronized.
            </summary>
      <isnew>6/4/2011</isnew>
      <value>
            RasterCollection that represents the cells that will be synchronized together.
            </value>
      <remarks>
            This class contains the cells collection and each cell contains a collections of Synchronization.Objects.
            <para>If the user add a synchronization object to the Synchronization.Objects, the cells collection will be updated as well.</para><para>If the user add a cell to the cells collection, the Synchronization.Objects will be updated as well.</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Mode">
      <summary>
            Gets or sets the value that enables, disables or changes the synchronization type used to synchronize the cells in this viewer.
            </summary>
      <isnew>6/4/2011</isnew>
      <keywords>Synchronization | alignment</keywords>
      <value>The synchronization type.</value>
      <remarks>
            Currently, only the automatic synchronization is available.
            <para>To disable synchronization, set the value of the property to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType" />.None.</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSpyGlass">
      <summary>
            Represents a spy glass containing properties that control the style and shape of the spy glass.
            </summary>
      <remarks>
        <ul>
          <li>To use the spy glass tool, use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method to add the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType">MedicalViewerActionType.SpyGlass</see> action to the Medical Viewer Cell. Then use the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> method to associate the action with a mouse button.</li>
          <li>To change the properties of the spy glass, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /> property.</li>
          <li>The user must register the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" /> event to use the spy glass.</li>
          <li>The spy glass is similar to the Magnify glass feature, the main difference here is that the spy glass works by sending a copy of the image through the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.SpyGlassStarted" /> event. 
            The user can apply any effect on the copy. The spy glass will then display the copy as the user hovers the mouse over the original image.</li>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSpyGlass.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlass"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSpyGlass.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Boolean,System.Int32,System.Boolean,Leadtools.MedicalViewer.MedicalViewerCrosshairStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlass"></see> class with specified width, height, zoom factor, border color, shape, 3d border value, and crosshair.
            </summary>
      <param name="width">The width of the spy glass.</param>
      <param name="height">The height of the spy glass.</param>
      <param name="zoom">The zoom factor of the spy glass.</param>
      <param name="penColor">The color of the spy glass border</param>
      <param name="elliptical">true to show an elliptical spy glass, false to show a rectangular spy glass.</param>
      <param name="borderSize">The border thickness of the spy glass .</param>
      <param name="border3d">true to show a 3d border, false to show a flat border.</param>
      <param name="crosshair">The type of crosshair of the spy glass.</param>
      <noremarks />
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.ZoomOnScroll">
      <summary>
            Gets or sets the value that indicates whether to allow the user to change the zoom of the spy glass. The zoom is adjusted by scrolling the mouse wheel up or down while spy glass is active.
            </summary>
      <value>
            true to allow the zoom to change using the mouse wheel, false to prevent the user from changing the zoom of the spy glass.
            </value>
      <remarks>
        <ul>
          <li> This feature works if the user clicks and holds the mouse down to display the spy glass. As the user holds the mouse button down, scrolling the wheel to zoom up or down will zoom the image in and out.</li>
          <item>
            <description> To fine tune the zoom, the user can hold the shift button to zoom in or out in smaller increments.
            .</description>
          </item>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.PositionText">
      <summary>
            Gets or sets the enumeration value that determine whether to show or hide the position text and the style to display.
            </summary>
      <value>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType" /> enumeration that determines whether to show or hide the position text, and what style to display.
            </value>
      <remarks>
        <ul>
          <li> The position text is a text that is placed below the glass which displays the position of the magnified area.</li>
          <li> To hide the position text, set this property to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType">MedicalViewerSpyGlassTextType.None</see>.</li>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSpyGlass.ZoomText">
      <summary>
            Gets or sets the enumeration value that determines whether to show or hide the zoom text and what style to display.
            </summary>
      <value>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType" /> enumeration that determine whether to show or hide the zoom text, and in which form.
            </value>
      <remarks>
        <ul>
          <li> The zoom text is a text that is placed below the glass, displaying the amount of zoom of the magnified area.</li>
          <li> To hide the zoom text, set this property to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSpyGlassTextType">MedicalViewerSpyGlassTextType.None</see>.</li>
        </ul>
      </remarks>
      <example>
            For an example, please refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.SpyGlass" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell">
      <summary>
            Represents the cell that will be used to display the panoramic frame resulted from adding a <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> to a another cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            In order to connect this panoramic cell to a polygon, pass it to the <see cref="P:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.Polygon" />.
            <para> The user cannot draw the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> to:</para><list type="bullet"><item><description>Derivative Cell.</description></item><item><description>Generated MPR Cell.</description></item><item><description>Paraxial cut cell itself.</description></item><item><description>A cell with less than 3 frames.</description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerMPRPolygonForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                Dim width As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Width
                Dim height As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Height



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()

                ' create a new polygon
                Dim polygon As MedicalViewerMPRPolygon = New MedicalViewerMPRPolygon()

                ' set some point, here we created a polygon that resembles a rectangle with a missing bottom line.
                polygon.Points.Add(New PointF(width * 1 \ 4, height * 3 \ 4))
                polygon.Points.Add(New PointF(width * 1 \ 4, height * 1 \ 4))
                polygon.Points.Add(New PointF(width * 3 \ 4, height * 1 \ 4))
                polygon.Points.Add(New PointF(width * 3 \ 4, height * 3 \ 4))


                ' now add this polygon you prepared to the cell.
                cell.Polygons.Add(polygon)

                ' This event is important, because it's used to request the data that is need to create the internal panoramic data.
                AddHandler cell.PanoramicDataRequested, AddressOf cell_PanoramicDataRequested

                ' This event communicate with the Medical3D dll which contains all the internal panormaic calculations.
                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested

                ' Dispose the internal data automatically if the use decided to delete the polygon.
                cell.AutoDisposeInternalData = True

                ' register the polygon click 
                AddHandler cell.MPRPolygonClicked, AddressOf cell_MPRPolygonClicked

                CreatePanoramicCell(cell, polygon)
                polygon.Recalculate()
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub CreatePanoramicCell(ByVal cellSource As MedicalViewerMultiCell, ByVal polygon As MedicalViewerMPRPolygon)
                ' create a new panoramic cell assigned to the polygon you created.
                Dim cell As MedicalViewerPanoramicCell = New MedicalViewerPanoramicCell(polygon)

                ' add some action, not necessary though.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells Or MedicalViewerActionFlags.RealTime)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)

                ' Add the panoramic cell the viewer.
                _medicalViewer.Cells.Add(cell)

                ' Create a paraxial cell, and assign it to the polygon you just created.
                Dim paraxialCell As MedicalViewerParaxialCutCell = New MedicalViewerParaxialCutCell(polygon, 0)

                ' set the distance and the length of the paraxial cuts.
                paraxialCell.ParaxialDistance = 20
                paraxialCell.ParaxialLength = 200

                ' Add the paraxial cuts to the viewer.
                _medicalViewer.Cells.Add(paraxialCell)
            End Sub

            Private Sub cell_MPRPolygonClicked(ByVal sender As Object, ByVal e As MedicalViewerMPRPolygonClickedEventsArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim paraxialCell As MedicalViewerParaxialCutCell = CType(_medicalViewer.Cells(2), MedicalViewerParaxialCutCell)

                ' if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
                If (e.Button = MouseButtons.Left) AndAlso e.Type = MedicalViewerMPRPolygonHitTest.Body Then
                    paraxialCell.PolygonLineIndex = e.Index
                End If
            End Sub


            Private Sub cell_PanoramicDataRequested(ByVal sender As Object, ByVal e As MedicalViewerPanoramicDataRequestedEventArgs)
                ' get the cell that requested the MPR data.
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                ' instantiate a new raster codecs, which will be used to load the requested image.
                Dim _codecs As RasterCodecs = New RasterCodecs()

                ' the file name of the images loaded in the original cell.
                Dim fileName As String = CStr(_seriesManager.Stacks(0).Items(e.FrameIndex).Data)

                ' load the image and set it to e.Frame.
                e.Frame = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, e.FrameIndex + 1, e.FrameIndex + 1)
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerMPRPolygonForm() As MedicalViewerMPRPolygonForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerMPRPolygonForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerMPRPolygonExample()
            Dim myForm As MedicalViewerMPRPolygonForm = GetMedicalViewerMPRPolygonForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerMPRPolygonForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerMPRPolygonForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            int width = cell.VirtualImage[cell.ActiveSubCell].Image.Width;
            int height = cell.VirtualImage[cell.ActiveSubCell].Image.Height;



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();

            // create a new polygon
            MedicalViewerMPRPolygon polygon = new MedicalViewerMPRPolygon();

            // set some point, here we created a polygon that resembles a rectangle with a missing bottom line.
            polygon.Points.Add(new PointF(width * 1 / 4, height * 3 / 4));
            polygon.Points.Add(new PointF(width * 1 / 4, height * 1 / 4));
            polygon.Points.Add(new PointF(width * 3 / 4, height * 1 / 4));
            polygon.Points.Add(new PointF(width * 3 / 4, height * 3 / 4));


            // now add this polygon you prepared to the cell.
            cell.Polygons.Add(polygon);

            // This event is important, because it's used to request the data that is need to create the internal panoramic data.
            cell.PanoramicDataRequested += new EventHandler&lt;MedicalViewerPanoramicDataRequestedEventArgs&gt;(cell_PanoramicDataRequested);

            // This event communicate with the Medical3D dll which contains all the internal panormaic calculations.
            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);

            // Dispose the internal data automatically if the use decided to delete the polygon.
            cell.AutoDisposeInternalData = true;

            // register the polygon click 
            cell.MPRPolygonClicked += new EventHandler&lt;MedicalViewerMPRPolygonClickedEventsArgs&gt;(cell_MPRPolygonClicked);

            CreatePanoramicCell(cell, polygon);
            polygon.Recalculate();
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void CreatePanoramicCell(MedicalViewerMultiCell cellSource, MedicalViewerMPRPolygon polygon)
         {
            // create a new panoramic cell assigned to the polygon you created.
            MedicalViewerPanoramicCell cell = new MedicalViewerPanoramicCell(polygon);

            // add some action, not necessary though.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells | MedicalViewerActionFlags.RealTime);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);

            // Add the panoramic cell the viewer.
            _medicalViewer.Cells.Add(cell);

            // Create a paraxial cell, and assign it to the polygon you just created.
            MedicalViewerParaxialCutCell paraxialCell = new MedicalViewerParaxialCutCell (polygon, 0);

            // set the distance and the length of the paraxial cuts.
            paraxialCell.ParaxialDistance = 20;
            paraxialCell.ParaxialLength = 200;

            // Add the paraxial cuts to the viewer.
            _medicalViewer.Cells.Add(paraxialCell);
         }

         void cell_MPRPolygonClicked(object sender, MedicalViewerMPRPolygonClickedEventsArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
            MedicalViewerParaxialCutCell paraxialCell = (MedicalViewerParaxialCutCell)_medicalViewer.Cells[2];

            // if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
            if ((e.Button == MouseButtons.Left) &amp;&amp; e.Type == MedicalViewerMPRPolygonHitTest.Body)
            {
               paraxialCell.PolygonLineIndex = e.Index;
            }
         }


         void cell_PanoramicDataRequested(object sender, MedicalViewerPanoramicDataRequestedEventArgs e)
         {
            // get the cell that requested the MPR data.
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

            // instantiate a new raster codecs, which will be used to load the requested image.
            RasterCodecs _codecs = new RasterCodecs();

            // the file name of the images loaded in the original cell.
            String fileName = (string)(_seriesManager.Stacks[0].Items[e.FrameIndex].Data);

            // load the image and set it to e.Frame.
            e.Frame = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, e.FrameIndex + 1, e.FrameIndex + 1);
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerMPRPolygonForm GetMedicalViewerMPRPolygonForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerMPRPolygonForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerMPRPolygonExample()
      {
         MedicalViewerMPRPolygonForm myForm = GetMedicalViewerMPRPolygonForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerMPRPolygon-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCommonActions"></see>.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell"></see> class.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize">Finalize</see>.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.#ctor(Leadtools.MedicalViewer.MedicalViewerMPRPolygon)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon"></see> class with explicit parameters.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="polygon"> The polygon which will be used as a source for generating the panoramic image.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPanoramicCell.Polygon">
      <summary>
            Gets or sets the polygon that will be used to generate the panoramic image for this cell.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that represents the polygon that will be used to generate the panoramic image for this cell.
            </value>
      <remarks>
            The panoramic cell can display the paraxial cut cell line if there is a paraxial cell connected to same polygon that this cell is connected to. For more information about the paraxial cut cells, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerParaxialCutCell" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPanoramicCell" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTagInformation">
            yes<summary>
            Represents the class that is used to provide information about a medical viewer overlay tag.
            </summary><medaddon>yes</medaddon><noremarks /><example><para /><code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private applyEffects As Button
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(30, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right - 30, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            applyEffects = New Button()
            applyEffects.Location = New Point(0, 0)
            applyEffects.Size = New Size(30, 15)
            applyEffects.Text = "Apply Effects"
            AddHandler applyEffects.Click, AddressOf applyEffects_Click

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
            Controls.Add(applyEffects)
         End Sub

         Private Sub applyEffects_Click(ByVal sender As Object, ByVal e As EventArgs)
            Dim medicalViewer As MedicalViewer = CType(_medicalViewer, MedicalViewer)
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
            Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

            Dim result As DialogResult = MessageBox.Show("This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo)

            If result = DialogResult.Yes Then
               medicalViewer.BeginUpdate()
            End If

            cell.SetTag(8, 0, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1")
            cell.SetTag(0, 8, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2")
            cell1.SetTag(1, 9, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3")
            cell1.SetTag(2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4")
            cell1.SetTag(3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5")

            cell.Rows = 3
            cell.Columns = 3
            cell.FitImageToCell = False



            Dim tagInformation As MedicalViewerTagInformation = New MedicalViewerTagInformation()

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft
            tagInformation.Position = 3
            tagInformation.Text = "Edit Text 1"


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation)


            tagInformation = New MedicalViewerTagInformation()
            tagInformation.Type = MedicalViewerTagType.Scale

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation)


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Position += 1

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation)

            ' Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft)

            tagInformation.Text = "Edited sub-cell Tag1"
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation)

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft)

            Dim windowLevelProperties As MedicalViewerWindowLevel = CType(cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0), MedicalViewerWindowLevel)

            windowLevelProperties.Width = 20
            windowLevelProperties.Center = 50

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties)


            Dim scale As Double = cell.GetScale(0)

            scale *= 2

            cell.SetScale(-1, scale)

            cell1.SetScale(0, scale)

            Dim scaleMode As MedicalViewerScaleMode = cell.GetScaleMode(0)

            If scaleMode = MedicalViewerScaleMode.Normal Then
               scaleMode = MedicalViewerScaleMode.Fit
            Else
               scaleMode = MedicalViewerScaleMode.Normal
            End If

            cell.SetScaleMode(scaleMode)

            If result = DialogResult.Yes Then
               medicalViewer.EndUpdate()
            End If

         End Sub

         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      Public Sub MedicalViewerTagInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         private Button applyEffects;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(30, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right - 30, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            applyEffects = new Button();
            applyEffects.Location = new Point(0, 0);
            applyEffects.Size = new Size(30, 15);
            applyEffects.Text = "Apply Effects";
            applyEffects.Click += new EventHandler(applyEffects_Click);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            Controls.Add(applyEffects);
         }

         void applyEffects_Click(object sender, EventArgs e)
         {
            MedicalViewer medicalViewer = (MedicalViewer)_medicalViewer;
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
            MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

            DialogResult result = MessageBox.Show(@"This demo will do some effects on the Medical viewer, Do you want to use the begin and update update?", "Begin Update And End Update Demo", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
               medicalViewer.BeginUpdate();

            cell.SetTag( 8, 0,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 1");
            cell.SetTag( 0, 8,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 2");
            cell1.SetTag( 1, 9,  MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 3");
            cell1.SetTag( 2, 10, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 4");
            cell1.SetTag( 3, 11, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "Sub Cell Tag 5");

            cell.Rows = 3;
            cell.Columns = 3;
            cell.FitImageToCell = false;



            MedicalViewerTagInformation tagInformation = new MedicalViewerTagInformation();

            tagInformation.Alignment = MedicalViewerTagAlignment.BottomLeft;
            tagInformation.Position = 3;
            tagInformation.Text = "Edit Text 1";


            cell.EditTag(8, 0, MedicalViewerTagAlignment.TopLeft, tagInformation);


            tagInformation = new MedicalViewerTagInformation();
            tagInformation.Type = MedicalViewerTagType.Scale;

            cell.EditTag(8, 0, MedicalViewerTagAlignment.BottomLeft, tagInformation);


            cell.DeleteTag(0, 8, MedicalViewerTagAlignment.TopLeft);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, 10, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Position += 1;

            cell.EditTag(2, 10, MedicalViewerTagAlignment.TopLeft, tagInformation);

            // Shift the second row, one row down
            tagInformation = cell.GetTag(2, MedicalViewerTagAlignment.TopLeft);

            tagInformation.Text = "Edited sub-cell Tag1";
            cell.EditTag(2, MedicalViewerTagAlignment.TopLeft, tagInformation);

            cell.DeleteTag(4, MedicalViewerTagAlignment.TopLeft);

            MedicalViewerWindowLevel windowLevelProperties = (MedicalViewerWindowLevel)cell.GetActionProperties(MedicalViewerActionType.WindowLevel, 0);

            windowLevelProperties.Width = 20;
            windowLevelProperties.Center = 50;

            cell.SetActionProperties(MedicalViewerActionType.WindowLevel, windowLevelProperties);


            double scale = cell.GetScale(0);

            scale *= 2;

            cell.SetScale(-1, scale);

            cell1.SetScale(0, scale);

            MedicalViewerScaleMode scaleMode = cell.GetScaleMode(0);

            if (scaleMode == MedicalViewerScaleMode.Normal)
               scaleMode = MedicalViewerScaleMode.Fit;
            else
               scaleMode = MedicalViewerScaleMode.Normal;

            cell.SetScaleMode(scaleMode);

            if (result == DialogResult.Yes)
               medicalViewer.EndUpdate();

         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example creates a medical viewer control and two cells. when you click on the button it will ask you whether to apply some effects on the cell with or without using BeginUpdate/EndUpdate. Run this sample twice and see the difference

      public void MedicalViewerTagInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--MedicalViewer.MedicalViewerTagInformation--></example></member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerTagInformation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerTagInformation.#ctor(System.Int32,Leadtools.MedicalViewer.MedicalViewerTagAlignment,System.String,Leadtools.MedicalViewer.MedicalViewerTagType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation"></see> class, with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="position">The line at which the overlay text will be drawn.</param>
      <param name="alignment">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagAlignment" /> value that represents the text alignment.</param>
      <param name="text">The user text.</param>
      <param name="type">An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" /> value that represents the type of tag.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTagInformation.Position">
      <summary>
            Gets or sets a value that indicates the line at which the overlay text will be drawn.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the line at which the overlay text will be drawn.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTagInformation.Alignment">
      <summary>
            Gets or sets an enumerated value that represents the text alignment.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagAlignment" /> value that represents the text alignment.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTagInformation.Text">
      <summary>
            Gets or sets the user text.
            </summary>
      <medaddon>yes</medaddon>
      <value>String that represents the user text.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTagInformation.Type">
      <summary>
            Gets or sets an enumerated value that indicates the type of tag.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagType" /> value that represents the type of tag.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerTagInformation" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSubCell">
      <summary>
            Represents the sub-cell that contains the annotation container and the properties and methods that control the annotation.
            </summary>
      <isnew>10/24/2010</isnew>
      <remarks>
        <para>For each sub-cell there is an annotation container.</para>
        <para>To change the sub-cell annotation container, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.SubCells" /> property which is a collection of annotation objects; it allows the user to add annotation, delete annotation or modify annotation. For example:</para>
        <list type="bullet">
          <item>
            <description>To add a new annotation to the annotation container, call this SubCell[index].AnnotationContainer.Objects.Add(newAnnotation).</description>
          </item>
          <item>
            <description>To remove an annotation from the annotation container, call SubCell[index].AnnotationContainer.Objects.RemoveAt(index).</description>
          </item>
          <item>
            <description>To modify an annotation in the annotation container, use the following code: SubCell[index].AnnotationContainer.Objects[objectIndex].Color = new Color(255, 0, 0).</description>
          </item>
        </list>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSubCellForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

                ' add some actions that will be used to change the properties of the images inside the control.
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
                _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub
            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class
        Private Function GetMedicalControlForSubCellExample() As MedicalViewerForm13
            Return New MedicalViewerForm13()
        End Function


        Public Sub MedicalViewerSubCellExample()
            Dim myForm As MedicalViewerForm13 = GetMedicalControlForSubCellExample()
            Dim medicalViewer As MedicalViewer = myForm.Viewer
            Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


            ' This shows the rotation handle of the annotation objects.
            cell.ShowRotationHandle = True

            cell.MaintainAnnotationObjectAspectRatio = True

            cell.MaintainAnnotationThickness = True

            Dim rectangleObject As AnnRectangleObject = New AnnRectangleObject()
            rectangleObject.Bounds = New AnnRectangle(100, 100, 200, 200)
            rectangleObject.Pen = New AnnPen(Color.Red, New AnnLength(5))
            cell.SubCells(0).AnnotationContainer.Objects.Add(rectangleObject)

            ' repaint the annotation of the first sub-cell (index = 0).
            cell.RefreshAnnotation(0)

            myForm.ShowDialog()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">        class MedicalViewerSubCellForm : Form
        {
           private MedicalViewer _medicalViewer;
           void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
           {
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
           }

           public MedicalViewerSubCellForm()
           {
              RasterCodecs _codecs = new RasterCodecs();
              RasterImage _image;

              this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

              // Create the medical viewer and adjust the size and the location.
              _medicalViewer = new MedicalViewer(1, 2);
              _medicalViewer.Location = new Point(0, 0);
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

              // Load an image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
              MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

              // add some actions that will be used to change the properties of the images inside the control.
              cell.AddAction(MedicalViewerActionType.WindowLevel);
              cell.AddAction(MedicalViewerActionType.Alpha);
              cell.AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              _medicalViewer.Cells.Add(cell);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              // Load another image and then add it to the control.
              _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
              _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

              // add some actions that will be used to change the properties of the images inside the control.
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
              _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
              _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

              // adjust some properties of the cell and add some tags.
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
              _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
              _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
              _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
              _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


              Controls.Add(_medicalViewer);
              _medicalViewer.Dock = DockStyle.Fill;
           }
           public MedicalViewer Viewer
           {
              get { return _medicalViewer; }
           }
        }
        MedicalViewerForm13 GetMedicalControlForSubCellExample()
        {
           return new MedicalViewerForm13();
        }


        public void MedicalViewerSubCellExample()
        {
           MedicalViewerForm13 myForm = GetMedicalControlForSubCellExample();
           MedicalViewer medicalViewer = myForm.Viewer;
           MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


           // This shows the rotation handle of the annotation objects.
           cell.ShowRotationHandle = true;

           cell.MaintainAnnotationObjectAspectRatio = true;

           cell.MaintainAnnotationThickness = true;

           AnnRectangleObject rectangleObject = new AnnRectangleObject();
           rectangleObject.Bounds = new AnnRectangle(100, 100, 200, 200);
           rectangleObject.Pen = new AnnPen(Color.Red, new AnnLength(5));
           cell.SubCells[0].AnnotationContainer.Objects.Add(rectangleObject);

           // repaint the annotation of the first sub-cell (index = 0).
           cell.RefreshAnnotation(0);

           myForm.ShowDialog();
        }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerSubCell-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSubCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell"></see> class object with default parameters.
            </summary>
      <isnew>10/24/2010</isnew>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSubCell.StartEditing(Leadtools.Annotations.AnnObject)">
      <summary>
            Starts the object edit mode.
            </summary>
      <isnew>10/24/2010</isnew>
      <param name="annObject">the object that will be edited.</param>
      <remarks>
        <para>This method applies only on the annotation object with contains a text (like button, text object, text pointer, note).</para>
        <para>This method is equivalent to the double click action on the text object.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSubCell.SelectObject(Leadtools.Annotations.AnnObject,System.Boolean)">
      <summary>
            Selects or deselects the object.
            </summary>
      <isnew>10/24/2010</isnew>
      <param name="annObject">the object that will be selected or deselected.</param>
      <param name="select">true to select the object, false to deselect the object.</param>
      <remarks>
        <para>Selecting the object means that the object will enter the edit mode; in the edit mode the editing handles will appear at the sides of the object, as long as the rotation handle, and rotation center.</para>
        <para>To show or hide the rotation handles, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ShowRotationHandle" /> property.</para>
        <para>To retrieve the selected object, use the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSubCell.SelectedObject" /> property.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.AnnotationContainer">
      <summary>
            (Read only) Gets the annotation container of the cell or sub-cell.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnContainer" />represents the cell or sub-cell annotation container.
            </value>
      <remarks>
        <para>When changing the value of any property in the annotation container, the user must re-draw the annotation using the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.RefreshAnnotation" /> method.</para>
      </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.SelectedObject">
      <summary>
            (Read only) Gets the annotation container selected object, if any.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnObject" />represents the selected object.
            </value>
      <remarks>
        <para>To select the object, call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerSubCell.SelectObject(Leadtools.Annotations.AnnObject,System.Boolean)" /> method.</para>
        <para>Selecting the object means that the object will enter the edit mode; in the edit mode the editing handles will appear at the sides of the object, as long as the rotation handle, and rotation center.</para>
        <para>To show or hide the rotation handles, use the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.ShowRotationHandle" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.UserMode">
      <summary>
            Gets or sets the value that indicates the current annotation mode and whether it's a run or an design mode.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerUserMode" /> that determines the current annotation mode, and whether it's a run or an edit mode.
            </value>
      <remarks>
            The edit mode is a mode where the user can click or drag the selected the annotation object(s). The run mode is where the user can click on the objects if they are not locked and then be redirected to the specified address.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.CobbAngles">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1" /> assigned to the cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.Fusion">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.RasterCollection`1" /> assigned to the cell.
            </summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1" />.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description> Fusion is a process used to display multiple, overlapped images 
            at the same time, each having a degree of transparency. 
            Fusion can be used to blend many different modalities such as 
            CT/MR, CT/MR/PET, CT/NM, CT/US, CT/PE...etc.</description>
          </item>
          <item>
            <description>For example, soft tissue information from a 
            PET scan can be combined with a CT scan, creating an anatomical context for 
            the soft tissue information. As a result, diagnosis and treatment of ailments are improved.  For more information, refer to 
            <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />. </description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerFusion" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSubCell.PaletteType">
      <summary>
            Gets or sets the value representing the type of palette used to display the image.
            </summary>
      <medaddon>yes</medaddon>
      <value>
            A <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaletteType" /> enumeration that represents the type of the palette used to display the image.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description> To disable using the palette, set this property to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaletteType">MedicalViewerPaletteType.None</see>.</description>
          </item>
          <item>
            <description> This works by replacing the gray intensity values stored in the image lookup table with the values stored in the selected palette.</description>
          </item>
        </list>
      </remarks>
      <example>
            for an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaletteType" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs">
      <summary>
            The MedicalViewerCustomAnnotationArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.CustomAnnotationDataRequested" /> event.
            </summary>
      <isnew>10/24/2010</isnew>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs" /> class with explicit parameters.
            </summary>
      <isnew>10/24/2010</isnew>
      <param name="action"> the action that determines the kind of annotation information that is needed. </param>
      <param name="requestedObject"> an enumeration that represents the type of the requested data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.DrawDesigner">
      <summary>
            Gets or sets the DrawDesigner for the requested custom annotation.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> that will be used when drawing the requested custom annotation.
            </value>
      <remarks>
            If the user did not send the draw designer of the custom annotation object, the toolkit will internally tries to find the closest built-in draw designer. If the toolkit could not find any suitable draw designer, the custom annotation will not be drawn.
            </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationAction">
      <summary>
            (Read only) Gets the custom annotation action type that will specify the type of the annotation that has its data requested.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that represents the custom annotation action type that will specify the type of the annotation that has its data requested.
            </value>
      <noremarks />
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.RequestedObject">
      <summary>
            (Read only) Gets the value that represents the requested custom annotation data.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" /> enumeration that represents the requested custom annotation data.
            </value>
      <remarks>
            Based on this property value, the user must send the corresponding data. So:
            <list type="bullet"><item><description>If this property is <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.AnnotationObject, the user must fill the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationObject" /> property that represents the action retrieved from <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationAction" />.</description></item><item><description>If this property is <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.DrawDesigner, the user must fill the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.DrawDesigner" /> property that represents the action retrieved from <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationAction" />.</description></item><item><description>If this property is <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.EditDesigner, the user must fill the <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.EditDesigner" /> property that represents the action retrieved from <see cref="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationAction" />.</description></item></list></remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.EditDesigner">
      <summary>
            Gets or sets the AnnEditDesigner for the requested custom annotation.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> that will be used when editing the requested custom annotation.
            </value>
      <remarks>
            If the user did not send the edit designer of the custom annotation object, the toolkit will internally tries to find the closest built-in edit designer. If the toolkit can not find any suitable edit designer, the custom annotation will not enter the edit mode.
            </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationArgs.AnnotationObject">
      <summary>
            Gets or sets the instance of the custom annotation object requested.
            </summary>
      <isnew>10/24/2010</isnew>
      <value>
        <see cref="T:Leadtools.Annotations.AnnObject" /> that represents the custom annotation object requested.
            </value>
      <remarks>
            Sending this instance is a must, otherwise, the custom annotation creation will fail.
            </remarks>
      <example>
            For an example, please refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerCustomAnnotationRequestedObject" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs">
      <summary>
            The MedicalViewerUIChangedEventArgs class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UIChanged" />.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Public Sub CustomRectangleExample()
            Dim form As GetDispalyedClippedImageRectangleMainForm = New GetDispalyedClippedImageRectangleMainForm()
            form.ShowDialog()
        End Sub

        ' MainForm1 will be the owner of the medical viewer control.
        Private Class CustomRectangleMainForm : Inherits Form
            Public _medicalViewer As MedicalViewer

            Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New()
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim _image As RasterImage

                ' Create the medical viewer and adjust some properties.
                _medicalViewer = New MedicalViewer()
                _medicalViewer.Rows = 2
                _medicalViewer.Columns = 1
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)


                ' Load an image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image2.cmp"))
                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell()
                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill

                AddHandler cell.PostPaint, AddressOf Viewer_PostPaint
                AddHandler cell.UIChanged, AddressOf Viewer_UIChanged
            End Sub

            Private _color As Color
            Private Sub Viewer_UIChanged(ByVal sender As Object, ByVal e As MedicalViewerUIChangedEventArgs)
                If e.ActionType = MedicalViewerActionType.Offset Then
                    If e.ActionState = MedicalViewerActionStatus.Progress Then
                        _color = Color.Blue
                    Else
                        _color = Color.Yellow
                    End If
                End If
            End Sub

            Private Sub Viewer_PostPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintInformationEventArgs)
                e.Graphics.DrawRectangle(New Pen(_color), e.ImageRectangle)
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">       public void CustomRectangleExample()
      {
          GetDispalyedClippedImageRectangleMainForm form = new GetDispalyedClippedImageRectangleMainForm();
          form.ShowDialog();
      }

      // MainForm1 will be the owner of the medical viewer control.
      class CustomRectangleMainForm : Form
      {
          public MedicalViewer _medicalViewer;

          void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
          {
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
          }

          public CustomRectangleMainForm()
          {
              RasterCodecs _codecs = new RasterCodecs();
              RasterImage _image;

              // Create the medical viewer and adjust some properties.
              _medicalViewer = new MedicalViewer();
              _medicalViewer.Rows = 2;
              _medicalViewer.Columns = 1;
              _medicalViewer.Location = new Point(0, 0);
              _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);


              // Load an image and then add it to the control.
              _image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "image2.cmp");
              MedicalViewerMultiCell cell = new MedicalViewerMultiCell();
              _medicalViewer.Cells.Add(cell);

              // add some actions that will be used to change the properties of the images inside the control.
              cell.AddAction(MedicalViewerActionType.Scale);
              cell.AddAction(MedicalViewerActionType.Offset);

              // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
              cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);
              cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);



              Controls.Add(_medicalViewer);
              _medicalViewer.Dock = DockStyle.Fill;

              cell.PostPaint += new EventHandler&lt;MedicalViewerPaintInformationEventArgs&gt;(Viewer_PostPaint);
              cell.UIChanged += new EventHandler&lt;MedicalViewerUIChangedEventArgs&gt;(Viewer_UIChanged);
          }

          Color _color;
          void Viewer_UIChanged(object sender, MedicalViewerUIChangedEventArgs e)
          {
              if (e.ActionType == MedicalViewerActionType.Offset)
              {
                  if (e.ActionState == MedicalViewerActionStatus.Progress)
                      _color = Color.Blue;
                  else
                      _color = Color.Yellow;
              }
          }

          void Viewer_PostPaint(object sender, MedicalViewerPaintInformationEventArgs e)
          {
              e.Graphics.DrawRectangle(new Pen(_color), e.ImageRectangle);
          }
      }</code>
        <!--MedicalViewer.CustomRectangleExample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerActionType,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.MedicalViewer.MedicalViewerActionStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="action">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration value that indicates the action that was applied.</param>
      <param name="cellIndex">The zero-based index of the cell which has the action applied on.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell which has the action applied on.</param>
      <param name="x">The X coordinates of the cursor.</param>
      <param name="y">The Y coordinates of the cursor.</param>
      <param name="status">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionStatus" /> enumeration value that indicates the status of the action (whether it has just begun, is in progress, or has just finished.)</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell to which the action has been applied. 
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell to which the action has been applied.</value>
      <remarks>
            This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell to which the action has been applied.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the sub-cell to which the action has been applied.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.X">
      <summary>
            (Read only) Gets the value that indicates the X coordinate of the cursor.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the X coordinate of the cursor.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.Y">
      <summary>
            (Read only) Gets the value that indicates the Y coordinate of the cursor.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the Y coordinate of the cursor.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.ActionType">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration value that indicates the action that was applied.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" /> enumeration that indicates the action that was applied.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs.ActionState">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionStatus" /> enumeration value that indicates the status of the action.
            </summary>
      <medaddon>yes</medaddon>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionStatus" /> enumeration value that indicates the status of the action (whether it has just begun, is in progress, or has just finished.)</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerUIChangedEventArgs" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygonEventsArgs">
      <summary>
            The <b>MedicalViewerMPRPolygonEventsArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonCreated" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <remarks>
            This class is sent by the event <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonCreated" />.
            <para>This event is fired when the user is done creating a polygon using the action <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.PanoramicPolygon.</para><para>The MPR polygon is used to render a panoramic image to be able to show a greater field of view.</para></remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerPolygonCreatedForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewer_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                DicomEngine.Startup()
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewer_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(1, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)

                Dim index As Integer
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim imageInformation As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

                index = 0
                Do While index &lt; count
                    codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(index).Data), True)

                    imageInformation(index) = New MedicalViewerImageInformation()
                    imageInformation(index).ImageHeight = codecsInformation.Width
                    imageInformation(index).ImageWidth = codecsInformation.Width
                    imageInformation(index).XResolution = codecsInformation.XResolution
                    imageInformation(index).YResolution = codecsInformation.YResolution
                    index += 1
                Loop

                AddHandler cell.FramesRequested, AddressOf cell_FramesRequested
                AddHandler FormClosing, AddressOf MedicalViewerLocalizer_FormClosing
                cell.EnableLowMemoryUsage(2, count, imageInformation)

                _medicalViewer.Cells.Add(cell)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Alpha)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.PanoramicPolygon)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.PanoramicPolygon, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                cell.ReferenceLine.Enabled = True
                cell.ReferenceLine.Color = Color.Yellow
                cell.ShowCellBoundaries = True

                ' adjust some properties of the cell and add some tags.
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                cell.PixelSpacing = output.Stacks(0).PixelSpacing

                index = 0
                Do While index &lt; count
                    cell.SetImagePosition(index, output.Stacks(0).Items(index).ImagePosition, (index = count - 1))
                    index += 1
                Loop
                cell.ImageOrientation = output.Stacks(0).Items(0).ImageOrientationArray
                cell.FrameOfReferenceUID = output.Stacks(0).Items(0).FrameOfReferenceUID

                Dim width As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Width
                Dim height As Integer = cell.VirtualImage(cell.ActiveSubCell).Image.Height



                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
                DicomEngine.Shutdown()

                AddHandler cell.MPRPolygonCreated, AddressOf cell_MPRPolygonCreated
                AddHandler cell.PanoramicDataRequested, AddressOf cell_PanoramicDataRequested
                AddHandler cell.MPRPolygonClicked, AddressOf cell_MPRPolygonClicked
                AddHandler cell.Data3DRequested, AddressOf cell_Data3DRequested
                cell.AutoDisposeInternalData = True

            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_MPRPolygonCreated(ByVal sender As Object, ByVal e As MedicalViewerMPRPolygonEventsArgs)
                Dim cellSource As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim cell As MedicalViewerPanoramicCell = New MedicalViewerPanoramicCell(e.Polygon)

                cell.AddAction(MedicalViewerActionType.WindowLevel)
                cell.AddAction(MedicalViewerActionType.Scale)
                cell.AddAction(MedicalViewerActionType.Offset)
                cell.AddAction(MedicalViewerActionType.Stack)

                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells Or MedicalViewerActionFlags.RealTime)
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                _medicalViewer.Cells.Add(cell)

                Dim paraxialCell As MedicalViewerParaxialCutCell = New MedicalViewerParaxialCutCell(e.Polygon, 0)
                paraxialCell.ParaxialDistance = 20
                paraxialCell.ParaxialLength = 200
                _medicalViewer.Cells.Add(paraxialCell)

                cellSource.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            End Sub

            Private Sub cell_MPRPolygonClicked(ByVal sender As Object, ByVal e As MedicalViewerMPRPolygonClickedEventsArgs)
                ' get the cell that contains the polygon clicked by the user.
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

                ' get paraxial cell.
                Dim paraxialCell As MedicalViewerParaxialCutCell = CType(_medicalViewer.Cells(2), MedicalViewerParaxialCutCell)

                ' if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
                If (e.Button = MouseButtons.Left) AndAlso e.Type = MedicalViewerMPRPolygonHitTest.Body Then
                    paraxialCell.PolygonLineIndex = e.Index
                End If
            End Sub


            Private Sub cell_PanoramicDataRequested(ByVal sender As Object, ByVal e As MedicalViewerPanoramicDataRequestedEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                Dim fileName As String = CStr(_seriesManager.Stacks(0).Items(e.FrameIndex).Data)

                e.Frame = _codecs.Load(fileName)
            End Sub

            Private Sub MedicalViewerLocalizer_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerPolygonCreatedForm() As MedicalViewerPolygonCreatedForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerPolygonCreatedForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerPolygonCreatedExample()
            Dim myForm As MedicalViewerPolygonCreatedForm = GetMedicalViewerPolygonCreatedForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            MessageBox.Show("Click to draw a polygon using the left mouse click, each click will create a new point, when done double-click")
            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerPolygonCreatedForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerLocalizer_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerPolygonCreatedForm(MedicalViewerSeriesManager output)
         {
            DicomEngine.Startup();
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerLocalizer_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);

            int index;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerImageInformation[] imageInformation = new MedicalViewerImageInformation[count];

            for (index = 0; index &lt; count; index++)
            {
               codecsInformation = _codecs.GetInformation((string)(output.Stacks[0].Items[index].Data), true);

               imageInformation[index] = new MedicalViewerImageInformation();
               imageInformation[index].ImageHeight = codecsInformation.Width;
               imageInformation[index].ImageWidth = codecsInformation.Width;
               imageInformation[index].XResolution = codecsInformation.XResolution;
               imageInformation[index].YResolution = codecsInformation.YResolution;
            }

            cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(cell_FramesRequested);
            FormClosing += new FormClosingEventHandler(MedicalViewerLocalizer_FormClosing);
            cell.EnableLowMemoryUsage(2, count, imageInformation);

            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.PanoramicPolygon);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.PanoramicPolygon, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.ReferenceLine.Enabled = true;
            cell.ReferenceLine.Color = Color.Yellow;
            cell.ShowCellBoundaries = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            cell.PixelSpacing = output.Stacks[0].PixelSpacing;

            for (index = 0; index &lt; count; index++)
            {
               cell.SetImagePosition(index, output.Stacks[0].Items[index].ImagePosition, (index == count - 1));
            }
            cell.ImageOrientation = output.Stacks[0].Items[0].ImageOrientationArray;
            cell.FrameOfReferenceUID = output.Stacks[0].Items[0].FrameOfReferenceUID;

            int width = cell.VirtualImage[cell.ActiveSubCell].Image.Width;
            int height = cell.VirtualImage[cell.ActiveSubCell].Image.Height;



            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
            DicomEngine.Shutdown();

            cell.MPRPolygonCreated += new EventHandler&lt;MedicalViewerMPRPolygonEventsArgs&gt;(cell_MPRPolygonCreated);
            cell.PanoramicDataRequested += new EventHandler&lt;MedicalViewerPanoramicDataRequestedEventArgs&gt;(cell_PanoramicDataRequested);
            cell.MPRPolygonClicked += new EventHandler&lt;MedicalViewerMPRPolygonClickedEventsArgs&gt;(cell_MPRPolygonClicked);
            cell.Data3DRequested += new EventHandler&lt;MedicalViewerData3DRequestedEventArgs&gt;(cell_Data3DRequested);
            cell.AutoDisposeInternalData = true;

         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_MPRPolygonCreated(object sender, MedicalViewerMPRPolygonEventsArgs e)
         {
            MedicalViewerMultiCell cellSource = (MedicalViewerMultiCell)sender;
            MedicalViewerPanoramicCell cell = new MedicalViewerPanoramicCell(e.Polygon);

            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Scale);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.AllCells | MedicalViewerActionFlags.RealTime);
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Scale, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells.Add(cell);

            MedicalViewerParaxialCutCell paraxialCell = new MedicalViewerParaxialCutCell(e.Polygon, 0);
            paraxialCell.ParaxialDistance = 20;
            paraxialCell.ParaxialLength = 200;
            _medicalViewer.Cells.Add(paraxialCell);

            cellSource.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
         }

         void cell_MPRPolygonClicked(object sender, MedicalViewerMPRPolygonClickedEventsArgs e)
         {
            // get the cell that contaisn the polygon clicked by the user.
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

            // get paraxial cell.
            MedicalViewerParaxialCutCell paraxialCell = (MedicalViewerParaxialCutCell)_medicalViewer.Cells[2];

            // if the user clicks on other polygon lines, the paraxial cut will be assigned to that line
            if ((e.Button == MouseButtons.Left) &amp;&amp; e.Type == MedicalViewerMPRPolygonHitTest.Body)
            {
               paraxialCell.PolygonLineIndex = e.Index;
            }
         }


         void cell_PanoramicDataRequested(object sender, MedicalViewerPanoramicDataRequestedEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
            RasterCodecs _codecs = new RasterCodecs();

            String fileName = (string)(_seriesManager.Stacks[0].Items[e.FrameIndex].Data);

            e.Frame = _codecs.Load(fileName);
         }

         void MedicalViewerLocalizer_FormClosing(object sender, FormClosingEventArgs e)
         {
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerPolygonCreatedForm GetMedicalViewerPolygonCreatedForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerPolygonCreatedForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerPolygonCreatedExample()
      {
         MedicalViewerPolygonCreatedForm myForm = GetMedicalViewerPolygonCreatedForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         MessageBox.Show("Click to draw a polygon using the left mouse click, each click will create a new point, when done double-click");
         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MedicalViewerPolygonCreated-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRPolygonEventsArgs.#ctor(Leadtools.MedicalViewer.MedicalViewerMPRPolygon)">
      <summary>
            The <b>MedicalViewerMPRPolygonEventsArgs</b> class provides data for the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.MPRPolygonCreated" /> event.
            </summary>
      <isnew>3/15/2011</isnew>
      <param name="polygon">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that represents the newly created MPR polygon.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRPolygonEventsArgs.Polygon">
      <summary>
            (Read only) Gets the MPR polygon that the user just created.
            </summary>
      <isnew>3/15/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /> that represents the newly created polygon that the user created using the action <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />.PanoramicPolygon.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1">
      <summary>
            Represents a generic collection of <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> objects.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            The Generic <b>MedicalViewerCobbAngleCollection</b> class provides a generic collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerCobbAngleCollection</keywords>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1"></see> class.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1.Add(`0)">
      <summary>
            Appends the cobb-angle object to the collection.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">The <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> that represents the item to be appended.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1.AddRange(System.Collections.Generic.ICollection{`0})">
      <summary>
            Appends an array of cobb-angle objects to the collection.
            </summary>
      <isnew>5/8/2011</isnew>
      <param name="cobbAngleArray"> An array of <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> that represents the items to be appended.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1.Insert(System.Int32,`0)">
      <summary>
            Appends the cobb-angle object to the collection using the specified index.
            </summary>
      <isnew>5/8/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to insert.</param>
      <param name="item">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerCobbAngle" /> that represents the item to be inserted.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerCobbAngleCollection`1.Parent">
      <summary>
            (Read only) Gets the parent of the collection.
            </summary>
      <isnew>5/8/2011</isnew>
      <value>
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerSubCell" /> cell that represents the parent of this collection.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerTitlebar">
      <summary>
            Represents the class that contains the properties of the title bar.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description> The title bar is a bar located at the top of each cell or sub-cell. It contains up to 8 icons that can be used according to the user's needs.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerTitlebar.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerTitlebar"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.Visible">
      <summary>
            Determines whether to display or hide the title bar. 
            </summary>
      <medaddon>yes</medaddon>
      <value>true to show the title bar, false to hide the title bar.</value>
      <remarks>
            The default is false.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.UseCustomColor">
      <summary>
            Determines whether to use the custom <see cref="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.Color" /> color to paint the title bar.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to use the custom color, false to use the system theme color.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.Color">
      <summary>
            Gets or sets the value that represents the color of the title bar.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.RasterColor" /> value that represents the color of the title bar. This property is useful only when the property <see cref="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.UseCustomColor" /> is set to true.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerTitlebar.Icons">
      <summary>
            Gets or sets the icon array that can be used to customize each icon.
            </summary>
      <medaddon>yes</medaddon>
      <value>Icon array that can be used to customize each icon. </value>
      <remarks>
            The array contains 8 members.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerIcon" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMPRCell">
      <summary>
            Represents the class that is used to create and MPR cell.
            </summary>
      <keywords>Viewer MPR|Cell MPR|MPR cell</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>The MPR cell is a cell that is used to extract an orthogonal plane out of the 3D object. This MPR cell can represents the Axial, Coronal or Sagittal frame.</description>
          </item>
          <item>
            <description>To attach the MPR cell with the 3D. Use the <see cref="P:Leadtools.Medical3D.Medical3DControl.AxialFrame" />, <see cref="P:Leadtools.Medical3D.Medical3DControl.SagittalFrame" /> and <see cref="P:Leadtools.Medical3D.Medical3DControl.CoronalFrame" /> properties.</description>
          </item>
        </list>
        <para>For more information, refer to 
            <see cref="T:MV.Topics.ImageViewerCells">Image Viewer Cells</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerMPRForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerMPRForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerMPRForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(2, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim index As Integer
                Dim image As RasterImage
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo

                Dim AxialFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim SagittalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim CoronalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()

                codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(0).Data), True)

                Dim width As Integer = codecsInformation.Width
                Dim height As Integer = codecsInformation.Height
                Dim depth As Integer = 256

                ' Create a 3D control.
                Dim _medical3DControl As Medical3DControl = New Medical3DControl()

                _medical3DControl.ObjectsContainer.VolumeType = Medical3DVolumeType.MPR
                _medical3DControl.ObjectsContainer.Objects.Add(New Medical3DObject())

                ' Create a 3D object.

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientInit(depth)

                index = 0
                Do While index &lt; depth
                    image = _codecs.Load(CStr(output.Stacks(0).Items(index).Data), 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1)
                    _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientSetFrame(image, index, True)
                    index += 1
                Loop

                Dim spearator As String = ("\")
                Dim test As String() = output.Stacks(0).Items(0).ImageOrientation.Split(spearator.ToCharArray())
                Dim orientation As Single() = New Single(5) {}
                Dim i As Integer
                For i = 0 To 5
                    orientation(i) = CSng(Convert.ToDouble(test(i)))
                Next i

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientEnd(orientation, output.Stacks(0).PixelSpacing)

                ' Create axial frame
                AxialFrame.ShowMPRCrossHair = True
                AxialFrame.DistinguishMPRByColor = True
                AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                AxialFrame.AddAction(MedicalViewerActionType.Stack)
                AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)


                ' Create Sagittal frame
                SagittalFrame.ShowMPRCrossHair = True
                SagittalFrame.DistinguishMPRByColor = True
                SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                SagittalFrame.AddAction(MedicalViewerActionType.Stack)
                SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' Create coronal frame
                CoronalFrame.ShowMPRCrossHair = True
                CoronalFrame.DistinguishMPRByColor = True
                CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                CoronalFrame.AddAction(MedicalViewerActionType.Stack)
                CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' attach the MPR cells to the 3D control
                _medical3DControl.AxialFrame = AxialFrame
                _medical3DControl.SagittalFrame = SagittalFrame
                _medical3DControl.CoronalFrame = CoronalFrame


                AxialFrame.AxialName = "Axial Cell"
                SagittalFrame.SagittalName = "Sagittal Cell"
                CoronalFrame.CoronalName = "Coronal Cell"

                AxialFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                SagittalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)
                CoronalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType)

                ' with this option, you will not be able to select more than one cell at the same time. (selecting multiple cells are done with the pressing and holding the Ctrl and clicking on cell)
                _medicalViewer.AllowMultipleSelection = False

                _medicalViewer.Cells.Add(_medical3DControl)
                _medicalViewer.Cells.Add(AxialFrame)
                _medicalViewer.Cells.Add(SagittalFrame)
                _medicalViewer.Cells.Add(CoronalFrame)

                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            ' This event handles communication between the the 3D and the MedicalViewer.
            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerMPRForm() As MedicalViewerMPRForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerMPRForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerMPRExample()
            Dim myForm As MedicalViewerMPRForm = GetMedicalViewerMPRForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerMPRForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerMPRForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerMPRForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerMPRForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(2, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            int index;
            RasterImage image;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;

            MedicalViewerMPRCell AxialFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell SagittalFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell CoronalFrame = new MedicalViewerMPRCell();

            codecsInformation = _codecs.GetInformation((string)output.Stacks[0].Items[0].Data, true);

            int width = codecsInformation.Width;
            int height = codecsInformation.Height;
            int depth = 256;

            // Create a 3D control.
            Medical3DControl _medical3DControl = new Medical3DControl();

            _medical3DControl.ObjectsContainer.VolumeType = Medical3DVolumeType.MPR;
            _medical3DControl.ObjectsContainer.Objects.Add(new Medical3DObject());

            // Create a 3D object.

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientInit(depth);

            for (index = 0; index &lt; depth; index++)
            {
               image = _codecs.Load((string)output.Stacks[0].Items[index].Data, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1);
               _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientSetFrame(image, index, true);
            }

            string spearator = ("\\");
            string[] test = output.Stacks[0].Items[0].ImageOrientation.Split(spearator.ToCharArray());
            float[] orientation = new float[6];
            int i;
            for (i = 0; i &lt; 6; i++)
            {
               orientation[i] = (float)Convert.ToDouble(test[i]);
            }

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientEnd(orientation,
                                                                             output.Stacks[0].PixelSpacing);

            // Create axial frame
            AxialFrame.ShowMPRCrossHair = true;
            AxialFrame.DistinguishMPRByColor = true;
            AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            AxialFrame.AddAction(MedicalViewerActionType.Stack);
            AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);


            // Create Sagittal frame
            SagittalFrame.ShowMPRCrossHair = true;
            SagittalFrame.DistinguishMPRByColor = true;
            SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            SagittalFrame.AddAction(MedicalViewerActionType.Stack);
            SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // Create coronal frame
            CoronalFrame.ShowMPRCrossHair = true;
            CoronalFrame.DistinguishMPRByColor = true;
            CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            CoronalFrame.AddAction(MedicalViewerActionType.Stack);
            CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // attach the MPR cells to the 3D control
            _medical3DControl.AxialFrame    = AxialFrame;
            _medical3DControl.SagittalFrame = SagittalFrame;
            _medical3DControl.CoronalFrame  = CoronalFrame;

            AxialFrame.AxialName = "Axial Cell";
            SagittalFrame.SagittalName = "Sagittal Cell";
            CoronalFrame.CoronalName = "Coronal Cell";

            AxialFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            SagittalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);
            CoronalFrame.SetTag(1, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.MPRType);

            // with this option, you will not be able to select more than one cell at the same time. (selecting multiple cells are done with the pressing and holding the Ctrl and clicking on cell)
            _medicalViewer.AllowMultipleSelection = false;

            _medicalViewer.Cells.Add(_medical3DControl);
            _medicalViewer.Cells.Add(AxialFrame);
            _medicalViewer.Cells.Add(SagittalFrame);
            _medicalViewer.Cells.Add(CoronalFrame);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         // This event handles communication between the the 3D and the MedicalViewer.
         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerMPRForm GetMedicalViewerMPRForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerMPRForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerMPRExample()
      {
         MedicalViewerMPRForm myForm = GetMedicalViewerMPRForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.MPRSample-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.OnHandleCreated(System.EventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            For more information, refer to <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by the <see cref="T:Leadtools.MedicalViewer.MedicalViewer"></see>.
            </summary>
      <medaddon>yes</medaddon>
      <param name="disposing"> true to release both managed and unmanaged resources; false to release 
            only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize">Finalize</see>.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRCell"></see> class.
            </summary>
      <example>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.CanExecuteAction(Leadtools.MedicalViewer.MedicalViewerActionType)">
      <summary>
            A method that is used to determine whether the action <b><i>actionType</i></b> can be executed in the Medical Viewer Cell.
            </summary>
      <param name="actionType">
        <see cref="T:Leadtools.MedicalViewer.MedicalViewerActionType" />that represents the action which will be tested if it can be executed in the Medical Viewer Cell.
            </param>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            Currently that action that can be executed in the Medical Viewer MPR Cell are:
            <list type="bullet"><item><description>Window Level</description></item><item><description>Scale</description></item><item><description>Offset</description></item><item><description>Stack</description></item><item><description>Magnify Glass</description></item><item><description>Annotation Ruler</description></item><item><description>Annotation Angle</description></item><item><description>Annotation Text</description></item><item><description>Annotation Arrow</description></item><item><description>Annotation Rectangle</description></item><item><description>Annotation Ellipse</description></item><item><description>Annotation Hilite</description></item></list></description>
          </item>
          <item>
            <description>To enable the Action, use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.AddAction(Leadtools.MedicalViewer.MedicalViewerActionType)" /> to add the action to the Medical Viewer Cell. Use the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetAction(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerMouseButtons,Leadtools.MedicalViewer.MedicalViewerActionFlags)" /> to associate the with a mouse button.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMPRCell.GetImage">
      <summary>
            A method that is to Get a RasterImage version of the generated MPR image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This will get a copy of the MPR image. The user is responsible for freeing the image when finished with it.</description>
          </item>
        </list>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRCell.DistinguishMPRByColor">
      <summary>
            Gets or sets the value that indicates whether to color the MPR Cross hair line.
            </summary>
      <value>
            true to color the cross hair; otherwise, false.
            </value>
      <remarks>
            The color of the cross hair in this MPR cell, will correspond to the other MPR cells.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRCell.ShowMPRCrossHair">
      <summary>
            Gets or sets the value that determine whether to show the cross hair.
            </summary>
      <keywords>MPR crosshair|crosshair</keywords>
      <value>
            true to show the cross hair, false to hide the cross hair.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>The cross hair consist of vertical and horizontal lines that show where the other two MPR cell images intersect with this cell image. if there is no other MPR cell beside this cell, no cross hair will show.</description>
          </item>
          <item>
            <description>To attach the MPR cell with the 3D. Use the <see cref="P:Leadtools.Medical3D.Medical3DControl.AxialFrame" />, <see cref="P:Leadtools.Medical3D.Medical3DControl.SagittalFrame" /> and <see cref="P:Leadtools.Medical3D.Medical3DControl.CoronalFrame" />  properties.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRCell" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMPRCell.ShowSlabBoundaries">
      <summary>
            Gets or sets the value that determine whether to show the slab boundaries on the image.
            </summary>
      <keywords>Cell slab|Interactive slab</keywords>
      <value>
            true to show the slab boundaries, false to hide the slab boundaries.
            </value>
      <remarks>
            To update the slab values manually, the user will have to update the <see cref="P:Leadtools.Medical3D.Medical3DObject.Slab" /> property using the source <see cref="T:Leadtools.Medical3D.Medical3DContainer" />.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Private Class MedicalViewerSlabForm : Inherits Form
            Private _medicalViewer As MedicalViewer
            Private _seriesManager As MedicalViewerSeriesManager
            Private Sub MedicalViewerSlabForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
            End Sub

            Public Sub New(ByVal output As MedicalViewerSeriesManager)
                Dim _codecs As RasterCodecs = New RasterCodecs()

                AddHandler SizeChanged, AddressOf MedicalViewerSlabForm_SizeChanged

                ' Create the medical viewer and adjust the size and the location.
                _medicalViewer = New MedicalViewer(2, 2)
                _medicalViewer.Location = New Point(0, 0)
                _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

                _seriesManager = output

                Dim index As Integer
                Dim image As RasterImage
                Dim count As Integer = output.Stacks(0).Items.Count
                Dim codecsInformation As CodecsImageInfo


                Dim AxialFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim SagittalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()
                Dim CoronalFrame As MedicalViewerMPRCell = New MedicalViewerMPRCell()

                codecsInformation = _codecs.GetInformation(CStr(output.Stacks(0).Items(0).Data), True)


                Dim width As Integer = codecsInformation.Width
                Dim height As Integer = codecsInformation.Height
                Dim depth As Integer = 50

                ' A create on a 3D control
                Dim _medical3DControl As Medical3DControl = New Medical3DControl()

                _medical3DControl.ObjectsContainer.Objects.Add(New Medical3DObject())
                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientInit(depth)

                index = 0
                Do While index &lt; depth

                    image = _codecs.Load(CStr(output.Stacks(0).Items(index).Data), 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1)
                    _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientSetFrame(image, index, True)
                    index += 1
                Loop

                Dim spearator As String = ("\")
                Dim test As String() = output.Stacks(0).Items(0).ImageOrientation.Split(spearator.ToCharArray())
                Dim orientation As Single() = New Single(5) {}
                Dim i As Integer
                For i = 0 To 5
                    orientation(i) = CSng(Convert.ToDouble(test(i)))
                Next i

                _medical3DControl.ObjectsContainer.Objects(0).MemoryEfficientEnd(orientation, output.Stacks(0).PixelSpacing)

                ' create axial frame.
                AxialFrame.ShowMPRCrossHair = True
                AxialFrame.DistinguishMPRByColor = True
                AxialFrame.ShowSlabBoundaries = True
                AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                AxialFrame.AddAction(MedicalViewerActionType.Stack)
                AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' create Sagittal frame.
                SagittalFrame.ShowMPRCrossHair = True
                SagittalFrame.DistinguishMPRByColor = True
                SagittalFrame.ShowSlabBoundaries = True
                SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                SagittalFrame.AddAction(MedicalViewerActionType.Stack)
                SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' create coronal frame.
                CoronalFrame.ShowMPRCrossHair = True
                CoronalFrame.DistinguishMPRByColor = True
                CoronalFrame.ShowSlabBoundaries = True
                CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                CoronalFrame.AddAction(MedicalViewerActionType.Stack)
                CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)

                ' attach the MPR cells to the 3D control.
                _medical3DControl.AxialFrame = AxialFrame
                _medical3DControl.SagittalFrame = SagittalFrame
                _medical3DControl.CoronalFrame = CoronalFrame

                _medicalViewer.AllowMultipleSelection = False

                _medicalViewer.Cells.Add(_medical3DControl)
                _medicalViewer.Cells.Add(AxialFrame)
                _medicalViewer.Cells.Add(SagittalFrame)
                _medicalViewer.Cells.Add(CoronalFrame)

                _medical3DControl.ObjectsContainer.Objects(0).Slab.Enabled = True
                _medical3DControl.ObjectsContainer.Objects(0).Slab.SetValues(-1, 0.5F, -1, 0.5F, -0.5F, 0.5F)


                Controls.Add(_medicalViewer)
                _medicalViewer.Dock = DockStyle.Fill
            End Sub

            Private Sub cell_Data3DRequested(ByVal sender As Object, ByVal e As MedicalViewerData3DRequestedEventArgs)
                e.Succeed = Medical3DEngine.Provide3DInformation(e)
            End Sub

            Private Sub cell_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
                Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
                Dim _codecs As RasterCodecs = New RasterCodecs()
                Dim i As Integer
                Dim image As RasterImage
                Dim fileName As String

                If e.RequestedFramesIndexes.Length &gt; 0 Then
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(0)).Data)
                    image = _codecs.Load(fileName)
                Else
                    Return
                End If

                i = 1
                Do While i &lt; e.RequestedFramesIndexes.Length
                    fileName = CStr(_seriesManager.Stacks(0).Items(e.RequestedFramesIndexes(i)).Data)
                    image.AddPage(_codecs.Load(fileName))
                    i += 1
                Loop

                cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
            End Sub

            Public ReadOnly Property Viewer() As MedicalViewer
                Get
                    Return _medicalViewer
                End Get
            End Property
        End Class

        Private Function GetMedicalViewerSlabForm() As MedicalViewerSlabForm
            Dim form As MedicalViewerSeriesManagerFrom = New MedicalViewerSeriesManagerFrom()
            Dim output As MedicalViewerSeriesManager = form.LoadJamesHead()

            Return New MedicalViewerSlabForm(output)
        End Function

        ' This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

        Public Sub MedicalViewerSlabExample()
            Dim myForm As MedicalViewerSlabForm = GetMedicalViewerSlabForm()
            Dim medicalViewer As MedicalViewer = myForm.Viewer

            myForm.ShowDialog()
        End Sub</code>
        <code lang="CS">      class MedicalViewerSlabForm : Form
      {
         private MedicalViewer _medicalViewer;
         private MedicalViewerSeriesManager _seriesManager;
         void MedicalViewerSlabForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerSlabForm(MedicalViewerSeriesManager output)
         {
            RasterCodecs _codecs = new RasterCodecs();

            this.SizeChanged += new EventHandler(MedicalViewerSlabForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(2, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            _seriesManager = output;

            int index;
            RasterImage image;
            int count = output.Stacks[0].Items.Count;
            CodecsImageInfo codecsInformation;


            MedicalViewerMPRCell AxialFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell SagittalFrame = new MedicalViewerMPRCell();
            MedicalViewerMPRCell CoronalFrame = new MedicalViewerMPRCell();

            codecsInformation = _codecs.GetInformation((string)output.Stacks[0].Items[0].Data, true);


            int width = codecsInformation.Width;
            int height = codecsInformation.Height;
            int depth = 50;

            // A create on a 3D control
            Medical3DControl _medical3DControl = new Medical3DControl();

            _medical3DControl.ObjectsContainer.Objects.Add(new Medical3DObject());
            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientInit(depth);

            for (index = 0; index &lt; depth; index++)
            {

               image = _codecs.Load((string)output.Stacks[0].Items[index].Data, 0, CodecsLoadByteOrder.BgrOrGrayOrRomm, 1, 1);
               _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientSetFrame(image, index, true);
            }

            string spearator = ("\\");
            string[] test = output.Stacks[0].Items[0].ImageOrientation.Split(spearator.ToCharArray());
            float[] orientation = new float[6];
            int i;
            for (i = 0; i &lt; 6; i++)
            {
               orientation[i] = (float)Convert.ToDouble(test[i]);
            }

            _medical3DControl.ObjectsContainer.Objects[0].MemoryEfficientEnd(orientation,
                                                                             output.Stacks[0].PixelSpacing);

            // create axial frame.
            AxialFrame.ShowMPRCrossHair = true;
            AxialFrame.DistinguishMPRByColor = true;
            AxialFrame.ShowSlabBoundaries = true;
            AxialFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            AxialFrame.AddAction(MedicalViewerActionType.Stack);
            AxialFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // create Sagittal frame.
            SagittalFrame.ShowMPRCrossHair = true;
            SagittalFrame.DistinguishMPRByColor = true;
            SagittalFrame.ShowSlabBoundaries = true;
            SagittalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            SagittalFrame.AddAction(MedicalViewerActionType.Stack);
            SagittalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // create coronal frame.
            CoronalFrame.ShowMPRCrossHair = true;
            CoronalFrame.DistinguishMPRByColor = true;
            CoronalFrame.ShowSlabBoundaries = true;
            CoronalFrame.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            CoronalFrame.AddAction(MedicalViewerActionType.Stack);
            CoronalFrame.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);

            // attach the MPR cells to the 3D control.
            _medical3DControl.AxialFrame = AxialFrame;
            _medical3DControl.SagittalFrame = SagittalFrame;
            _medical3DControl.CoronalFrame = CoronalFrame;

            _medicalViewer.AllowMultipleSelection = false;

            _medicalViewer.Cells.Add(_medical3DControl);
            _medicalViewer.Cells.Add(AxialFrame);
            _medicalViewer.Cells.Add(SagittalFrame);
            _medicalViewer.Cells.Add(CoronalFrame);

            _medical3DControl.ObjectsContainer.Objects[0].Slab.Enabled = true;
            _medical3DControl.ObjectsContainer.Objects[0].Slab.SetValues(-1, 0.5f, -1, 0.5f, -0.5f, 0.5f);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }

         void cell_Data3DRequested(object sender, MedicalViewerData3DRequestedEventArgs e)
         {
            e.Succeed = Medical3DEngine.Provide3DInformation(e);
         }

         void cell_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
         {
            MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
            RasterCodecs _codecs = new RasterCodecs();
            int i;
            RasterImage image;
            string fileName;

            if (e.RequestedFramesIndexes.Length &gt; 0)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[0]].Data);
               image = _codecs.Load(fileName);
            }
            else
               return;

            for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
            {
               fileName = (string)(_seriesManager.Stacks[0].Items[e.RequestedFramesIndexes[i]].Data);
               image.AddPage(_codecs.Load(fileName));
            }

            cell.SetRequestedImage(image, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
         }

         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerSlabForm GetMedicalViewerSlabForm()
      {
         MedicalViewerSeriesManagerFrom form = new MedicalViewerSeriesManagerFrom();
         MedicalViewerSeriesManager output = form.LoadJamesHead();

         return new MedicalViewerSlabForm(output);
      }

      // This example changes the default window level value by decrease the width by 100. Then resets the images based on the new value.

      public void MedicalViewerSlabExample()
      {
         MedicalViewerSlabForm myForm = GetMedicalViewerSlabForm();
         MedicalViewer medicalViewer = myForm.Viewer;

         myForm.ShowDialog();
      }</code>
        <!--MedicalViewer.SlabSample-->
      </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerMouseEventArgs">
      <summary>
            The MedicalViewerMouseEventArgs class provides data for various MedicalViewer user interaction events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseMove" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseUp" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseDown" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionMouseWheel" /></description></item></list></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerMouseEventArgs.#ctor(Leadtools.RasterImage[],System.Int32,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerMouseEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="images">Array of <see cref="T:Leadtools.RasterImage" /> that contains the images to update.</param>
      <param name="actionID">The ID of the action that raised the event.</param>
      <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons" /> values indicating which mouse button was pressed. </param>
      <param name="clicks">The number of times a mouse button was pressed.</param>
      <param name="x">The x-coordinate of the mouse click, in pixels.</param>
      <param name="y">The y-coordinate of the mouse click, in pixels.</param>
      <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMouseEventArgs.Images">
      <summary>
            Gets or sets the array of <see cref="T:Leadtools.RasterImage" /> objects that contain the images to be updated.
            </summary>
      <medaddon>yes</medaddon>
      <value>Array of <see cref="T:Leadtools.RasterImage" /> objects that contain the images to be updated.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerMouseEventArgs.ActionID">
      <summary>
            Gets or sets the ID of the action that raised the event.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the ID of the action that raised the event.</value>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSynchronization">
      <summary>
            Represents a class that holds a collection of synchronization objects.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            This class is only used as a member of <see cref="T:Leadtools.MedicalViewer.MedicalViewerBaseCell" />, which is <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            <para>For more information regarding the synchronization process, refer to the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" />.</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSynchronization.Objects">
      <summary>
            (Read only) Gets the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1" /> assigned to the control.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <value>The <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObjectCollection`1" />.</value>
      <remarks>
        <para>For more information regarding the synchronization process, refer to the <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs">
      <summary>
            The MedicalViewerPaintInformationEventArgs class provides data for various MedicalViewer painting events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PrePaint" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PostPaint" /></description></item></list></remarks>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.NudgeTool)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      Public Sub MedicalViewerPaintInformationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim i As Integer

         i = 0
         Do While i &lt; cell.Image.PageCount
            If ((i &gt;&gt; 1) &lt;&lt; 1) = i Then
               cell.FreezeSubCell(i, True)
            End If
            i += 1
         Loop


         AddHandler cell.PostPaint, AddressOf medicalViewer_PostPaint

         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_PostPaint(ByVal sender As Object, ByVal e As MedicalViewerPaintInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.SubCellFrozen(e.SubCellIndex) Then
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Left, e.ClipRectangle.Top), New Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom))
            e.Graphics.DrawLine(Pens.Red, New Point(e.ClipRectangle.Right, e.ClipRectangle.Top), New Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom))
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.NudgeTool);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.NudgeTool, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will freeze the subcell with even numbers and then type the draw X in the middle of the frozen sub-cells.

      public void MedicalViewerPaintInformationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         int i;

         for (i = 0; i &lt; cell.Image.PageCount; i++)
         {
            if (((i &gt;&gt; 1) &lt;&lt; 1) == i)
               cell.FreezeSubCell(i, true);
         }


         cell.PostPaint += new EventHandler&lt;MedicalViewerPaintInformationEventArgs&gt;(medicalViewer_PostPaint);

         myForm.ShowDialog();
      }

      void medicalViewer_PostPaint(object sender, MedicalViewerPaintInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.SubCellFrozen(e.SubCellIndex))
         {
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Left, e.ClipRectangle.Top), new Point(e.ClipRectangle.Right, e.ClipRectangle.Bottom));
            e.Graphics.DrawLine(Pens.Red, new Point(e.ClipRectangle.Right, e.ClipRectangle.Top), new Point(e.ClipRectangle.Left, e.ClipRectangle.Bottom));
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerPaintInformationEventArgs-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs"></see> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to paint the cell or the sub-cell.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle in which to paint.</param>
      <param name="imageRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the image rectangle for the cell or sub-cell.</param>
      <param name="cellIndex">The zero-based index of the cell that is to be painted.</param>
      <param name="subCellIndex">The zero-based index of the sub-cell that is to be painted.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that is to be painted.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the cell that is to be painted.  This value is only valid if the cell is add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that is to be painted.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the index of the sub-cell that is to be painted.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs.Draw">
      <summary>
            Gets or sets the value that indicates whether to make the control draw the sub-cell. 
            This is used only with the <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.PrePaint" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to make the control draw the cell or the sub-cell; otherwise, false.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs.ImageRectangle">
      <summary>
            (Read only) Gets the rectangle that represents the image rectangle for the cell or sub-cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>The rectangle that represents the image rectangle for the cell or sub-cell.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerPaintInformationEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions">
      <summary>
            Represents the class that is used to configure layout options of the Medical Viewer.
            </summary>
      <remarks>The options are only valid for a control that was created in layout mode.  For information
            on creating the control in layout mode refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor(System.Boolean)" /></remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub MedicorViewerLayoutExample1()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         ' Set the LayoutOptions
         medicalViewer.LayoutOptions.AllowOverlappingCells = False
         medicalViewer.LayoutOptions.DesignTool = MedicalViewerDesignTool.Draw
         medicalViewer.LayoutOptions.GridSize = New Size(8, 8)
         medicalViewer.LayoutOptions.RectBackColor = Color.Yellow
         medicalViewer.LayoutOptions.RectForeColor = Color.Red
         medicalViewer.LayoutOptions.ShowGrid = True
         medicalViewer.LayoutOptions.ShowPosition = True
         medicalViewer.LayoutOptions.SnapToGrid = True
         medicalViewer.LayoutOptions.UserMode = MedicalViewerUserMode.Design

         '
         ' Show only if created in layout mode
         '
         If medicalViewer.GridMode = False Then
            myForm.ShowDialog()
         End If
      End Sub
</code>
        <code lang="CS">        public void MedicorViewerLayoutExample1()
        {
            MedicalViewerForm myForm = GetMedicalControl();
            MedicalViewer medicalViewer = myForm.Viewer;

            // Set the LayoutOptions
            medicalViewer.LayoutOptions.AllowOverlappingCells = false;
            medicalViewer.LayoutOptions.DesignTool = MedicalViewerDesignTool.Draw;
            medicalViewer.LayoutOptions.GridSize = new Size(8, 8);
            medicalViewer.LayoutOptions.RectBackColor = Color.Yellow;
            medicalViewer.LayoutOptions.RectForeColor = Color.Red;
            medicalViewer.LayoutOptions.ShowGrid = true;
            medicalViewer.LayoutOptions.ShowPosition = true;
            medicalViewer.LayoutOptions.SnapToGrid = true;
            medicalViewer.LayoutOptions.UserMode = MedicalViewerUserMode.Design;

            //
            // Show only if created in layout mode
            //
            if(medicalViewer.GridMode == false)
                myForm.ShowDialog();
        }
</code>
        <!--MedicalViewer.MedicorViewerLayout1-->
      </example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.UserMode">
      <summary>
             Gets or sets the user mode.
             </summary>
      <value>The user mode.</value>
      <example>
             For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.SnapToGrid">
      <summary>
            Gets or sets a value indicating whether to snap to the grid.
            </summary>
      <value>
        <c>true</c> to snap to the grid; otherwise, <c>false</c>.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.ShowGrid">
      <summary>
            Gets or sets a value indicating whether to show the grid.
            </summary>
      <value>
        <c>true</c> to show the grid; otherwise, <c>false</c>.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.GridSize">
      <summary>
            Gets or sets the size of the grid.
            </summary>
      <value>The size of the grid.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.DesignTool">
      <summary>
            Gets or sets the design tool.
            </summary>
      <value>The design tool.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.AllowOverlappingCells">
      <summary>
            Gets or sets a value indicating whether [allow overlapping cells].
            </summary>
      <value>
        <c>true</c> to allow overlapping cells; otherwise, <c>false</c>.
            </value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.RectForeColor">
      <summary>
            Gets or sets the color of the rect fore.
            </summary>
      <value>The color of the rect fore.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.RectBackColor">
      <summary>
            Gets or sets the color of the rect back.
            </summary>
      <value>The color of the rect back.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.ShowPosition">
      <summary>
            Gets or sets a value indicating whether to show position information during design mode.
            </summary>
      <value>
        <c>True</c> to show position during layout design mode; otherwise, <c>false</c>.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerLayoutOptions" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.GridColor">
      <summary>
            Gets or sets the color of the grid.
            </summary>
      <value>The color of the grid.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerLayoutOptions.ShowLines">
      <summary>
            Gets or sets a value indicating whether to show the grid lines.
            </summary>
      <value>
        <c>true</c> if to show the grid lines; otherwise, <c>false</c>.</value>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerKeys">
      <summary>
            Represents the class that is used to set the keys for a specific action.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <list type="bullet">
          <item>
            <description>Use this method to set the keyboard keys to be used for a specific action.<see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerKeys)" />.</description>
          </item>
          <item>
            <description>Use this method to retrieve the keyboard keys being used for a specific action.<see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.GetActionKeys(Leadtools.MedicalViewer.MedicalViewerActionType)" />.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerKeys.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerKeys">MedicalViewerKeys</see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerKeys.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,Leadtools.MedicalViewer.MedicalViewerModifiers)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerKeys"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="mouseUp">A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged up.</param>
      <param name="mouseDown">A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged down.</param>
      <param name="mouseLeft">A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged left.</param>
      <param name="mouseRight">A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged right.</param>
      <param name="modifiers">A <see cref="T:Leadtools.MedicalViewer.MedicalViewerModifiers" /> enumeration value that indicates which modifier key needs to be pressed when pressing one of the emulator keys.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewer" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeys.MouseUp">
      <summary>
            Gets or sets the value that indicates the keyboard key that emulates the mouse being dragged up.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged up.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeys.MouseDown">
      <summary>
            Gets or sets the value that indicates the keyboard key that emulates the mouse being dragged down.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged down.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeys.MouseLeft">
      <summary>
            Gets or sets the value that indicates the keyboard key that emulates the mouse being dragged left.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged left.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeys.MouseRight">
      <summary>
            Gets or sets the value that indicates the keyboard key that emulates the mouse being dragged right.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> enumeration value that emulates the mouse being dragged right.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeys.Modifiers">
      <summary>
            Gets or sets the value that indicates the modifier key that needs to be pressed when one of the keys is pressed.
            </summary>
      <medaddon>yes</medaddon>
      <value>A <see cref="T:Leadtools.MedicalViewer.MedicalViewerModifiers" /> enumeration value that indicates the modifier key that needs to be pressed when one of the keys is pressed.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>The modifiers are:
            <list><item><description>No modifier key.</description></item><item><description>The left or right Control key.</description></item><item><description>The left or right Shift key.</description></item><item><description>The left or right Alt key.</description></item></list></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewer.#ctor">Leadtools.MedicalViewer.MedicalViewer()</see>.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerAnimation">
      <summary>
            Represents the class that is used to animate or change the animation properties of those cells that have more than one frame.
            </summary>
      <medaddon>yes</medaddon>
      <remarks> 
            One powerful feature of this class, is that you can adjust the images while the animation is still running. The following actions can be applied during the animation:
            <list type="bullet"><item><description>Window level action.</description></item><item><description>Alpha action.</description></item><item><description>Offset action.</description></item><item><description>Scale action.</description></item></list>
            To load and play an animation, create a cell that contains a multiple-frame image. Once it is created,
            play or stop the animation using the <see cref="P:Leadtools.MedicalViewer.MedicalViewerAnimation.Animated"></see> property.
            </remarks>
      <example>
        <para>play animation for a multiple frames cell</para>
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))

            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)
                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            _medicalViewer.Cells.Add(cell)

                ' adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function


      Public Sub MedicalViewerAnimationExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer

         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)

         cell.Animation.AnimateAllSubCells = True
         cell.Animation.Flags = MedicalViewerAnimationFlags.Loop Or MedicalViewerAnimationFlags.PaintNormal Or MedicalViewerAnimationFlags.PlayForward
         cell.Animation.FrameCount = -1
         cell.Animation.Frames = -1
         cell.Animation.Interval = 200
         cell.Animation.StartFrame = 0
         cell.Animation.Animated = True

         myForm.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));

            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);
            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            _medicalViewer.Cells.Add(cell);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }


      public void MedicalViewerAnimationExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;

         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);

         cell.Animation.AnimateAllSubCells = true;
         cell.Animation.Flags = MedicalViewerAnimationFlags.Loop | MedicalViewerAnimationFlags.PaintNormal | MedicalViewerAnimationFlags.PlayForward;
         cell.Animation.FrameCount = -1;
         cell.Animation.Frames = -1;
         cell.Animation.Interval = 200;
         cell.Animation.StartFrame = 0;
         cell.Animation.Animated = true;

         myForm.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerAnimation-->
      </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerAnimation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.Animated">
      <summary>
            Gets or sets the value that determines whether the animation is running on the specified cell.
            </summary>
      <medaddon>yes</medaddon>
      <value>true if the animation is running on that cell; false otherwise.</value>
      <remarks>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.StartFrame">
      <summary>
            Gets or sets the value that indicates the frame from which the animation will start.
            </summary>
      <medaddon>yes</medaddon>
      <value>Zero-based index value that indicates the first frame from which the animation will start. The start frame is included within the animation.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.FrameCount">
      <summary>
            Gets or sets the value that indicates the number of frames that will be included in the animation.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the number of frames that will be included in the animation.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.AnimateAllSubCells">
      <summary>
            Gets or sets the value that determines whether to animate all the sub-cells.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to animate all the sub-cell in the cell; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.Frames">
      <summary>
            Gets or sets the value that indicates which frames are included in the animation.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates which frames are included in the animation. Default is -1 (all frames).</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            The following values are possible:
            <list type="bullet"><item><description>-1 : All frames are included.</description></item><item><description> 0 : Odd frames are included.</description></item><item><description> 1 : Even frames are included.</description></item><item><description> &gt; 1 : The animation engine will use the value as the number of frames to skip inbetween each frame. For example: If Frames is 5, the animation will include the following frames: (StartFrame, StartFrame + 5, StartFrame + 10, StartFrame +....).</description></item><item><description></description></item></list></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.Interval">
      <summary>
            Gets or sets the value that indicates the amount of time to wait (in milli-seconds) before showing the next frame.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the amount of time to wait (in milliseconds) before showing the next frame. </value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerAnimation.Flags">
      <summary>
            Gets or sets the enumerated flags that describe how to play the animation.
            </summary>
      <medaddon>yes</medaddon>
      <value>An enumerated <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimationFlags" /> value that describes how to play the animation.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerAnimation" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerPointCollection`1">
      <summary>
            Represents a generic collection of <see cref="T:System.Drawing.PointF" /> objects.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <remarks>
            The Generic <b>MedicalViewerPointCollection</b> class provides a generic collection class that implements the .NET Generic IList, Generic ICollection and Generic IEnumerable interfaces.
            </remarks>
      <keywords>MedicalViewerPointCollection</keywords>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerMPRPolygon" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPointCollection`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerPointCollection`1"></see> class.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPointCollection`1.Remove(`0)">
      <summary>
            Removes the specified point.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">Point to remove.</param>
      <returns>true if the element was removed successfully; otherwise, false.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPointCollection`1.Add(`0)">
      <summary>
            Adds the specified point.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">Point to add.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPointCollection`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the specified point.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="item">Point to insert.</param>
      <param name="index">Index of insertion.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerPointCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the point from the specified index.
            </summary>
      <isnew>3/15/2011</isnew>
      <medaddon>yes</medaddon>
      <param name="index">Index of the item to remove.</param>
      <noexample />
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs">
      <summary>
            The MedicalViewerActiveSubCellChangedEventArgs class provides data about the <see cref="E:Leadtools.MedicalViewer.MedicalViewerMultiCell.ActiveSubCellChanged" /> event.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)

            ' Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm"))
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 1, 1)

                ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)
            cell.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
                cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
                cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
                cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
                cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
                cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

                _medicalViewer.Cells.Add(cell)



                ' Load another image and then add it to the control.
                _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
                Dim cell1 As MedicalViewerMultiCell = New MedicalViewerMultiCell(_image, True, 2, 2)
                _medicalViewer.Cells.Add(cell1)

                ' add some actions that will be used to change the properties of the images inside the control.
                cell1.AddAction(MedicalViewerActionType.WindowLevel)
                cell1.AddAction(MedicalViewerActionType.Alpha)
                cell1.AddAction(MedicalViewerActionType.Offset)
                cell1.AddAction(MedicalViewerActionType.Stack)

                ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
                cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
                cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

                ' adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      Public Sub MedicalViewerActiveSubCellChangedExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer


         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)
         Dim cell1 As MedicalViewerMultiCell = CType(medicalViewer.Cells(1), MedicalViewerMultiCell)

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged
         AddHandler cell1.ActiveSubCellChanged, AddressOf cell1_ActiveSubCellChanged
         myForm.ShowDialog()
      End Sub

      Private Sub cell1_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         medicalViewer_ActiveSubCellChanged(sender, e)
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim index As Integer
         If (e.CellIndex = 1) Then
            index = 0
         Else
            index = 1
         End If
         Dim theOtherCell As MedicalViewerMultiCell = CType(cell.ParentViewer.Cells(index), MedicalViewerMultiCell)


         Dim stackProperties As MedicalViewerStack = CType(theOtherCell.GetActionProperties(MedicalViewerActionType.Stack), MedicalViewerStack)

         stackProperties.ActiveSubCell = e.SubCellIndex Mod (theOtherCell.Rows * theOtherCell.Columns)
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties)
         stackProperties.Dispose()

      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);

            // Load an image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm"));
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(_image, true, 1, 1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);
            cell.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            _medicalViewer.Cells.Add(cell);



            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            MedicalViewerMultiCell cell1 = new MedicalViewerMultiCell(_image, true, 2, 2);
            _medicalViewer.Cells.Add(cell1);

            // add some actions that will be used to change the properties of the images inside the control.
            cell1.AddAction(MedicalViewerActionType.WindowLevel);
            cell1.AddAction(MedicalViewerActionType.Alpha);
            cell1.AddAction(MedicalViewerActionType.Offset);
            cell1.AddAction(MedicalViewerActionType.Stack);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell1.SetAction(MedicalViewerActionType.Stack, MedicalViewerMouseButtons.Wheel, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell1.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            cell1.SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            cell1.SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            cell1.SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            cell1.SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            cell1.SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example will link the active sub-cell of the  first cell to the second cell and vice versa.

      public void MedicalViewerActiveSubCellChangedExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;


         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);
         MedicalViewerMultiCell cell1 = (MedicalViewerMultiCell)(medicalViewer.Cells[1]);

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged);
         cell1.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(cell1_ActiveSubCellChanged);
         myForm.ShowDialog();
      }

      void cell1_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         medicalViewer_ActiveSubCellChanged(sender, e);
      }

      void medicalViewer_ActiveSubCellChanged(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;
         int index = (e.CellIndex == 1) ? 0 : 1;
         MedicalViewerMultiCell theOtherCell = (MedicalViewerMultiCell)(cell.ParentViewer.Cells[index]);


         MedicalViewerStack stackProperties = (MedicalViewerStack)theOtherCell.GetActionProperties(MedicalViewerActionType.Stack);

         stackProperties.ActiveSubCell = e.SubCellIndex % (theOtherCell.Rows * theOtherCell.Columns);
         stackProperties.ScrollValue = e.SubCellIndex - stackProperties.ActiveSubCell;
         theOtherCell.SetActionProperties(MedicalViewerActionType.Stack, stackProperties);
         stackProperties.Dispose();

      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that has its subcell changed.</param>
      <param name="subCellIndex">The index of the sub-cell that has been activated.</param>
      <param name="previousSubCellIndex">The index of the sub-cell that has lost the active state.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs.CellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the cell that has its active sub-cell changed. This value is only valid if the cell has been added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the cell that has its active sub-cell changed. This value is only valid if the cell has been add to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs.SubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that has been activated.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the sub-cell that has been activated.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs.PreviousSubCellIndex">
      <summary>
            (Read only) Gets the value that indicates the index of the sub-cell that has lost the active state.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the zero-based index of the sub-cell that has lost the active state.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerActiveSubCellChangedEventArgs" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerSeriesManager">
      <summary>
            The <b>MedicalViewerSeriesManager</b> sorts and group the given data and provides them to the user for easier and more organize access.
            </summary>
      <remarks>
            This class main job is to receive data for each frame, which is placed in <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /> and sort them, and group them based on their information.
            the output from this class is two lists: Stack list and Localizer list:
            <list type="bullet"><item><description>The stack list: is a collection of stacks of images, each image in the stack is sorted based on its actual real world position, so it's displayed correctly, and make it easier for the 3D toolkit to create an accurate 3D object.</description></item><item><description>The localizer list: is a collection of localizers, the localizer is a single slice image extracted from the 3D object with angle different than the angle of the slices that created the 3D object</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})">
      <summary>
            Sorts the input list of data based on various values stored inside them.
            </summary>
      <param name="inputList">a list of <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageData" /> that will be stored.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The method will sort the list based on
            <list type="bullet"><item><description>Image position</description></item><item><description>image orientation</description></item><item><description>echo number</description></item><item><description>instance number</description></item><item><description>frame of reference UID</description></item></list>
            so it's important for a successful sorting, to have those data properly filled in.</description>
          </item>
          <item>
            <description>if the sort failed for any reason, it will return false.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.#ctor">
      <summary>
            Initializes a new <b>MedicalViewerSeriesManager</b> class object with default parameters.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Localizers">
      <summary>
            (Read only) Gets a list of localizers.
            </summary>
      <value>
            a list of <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesLocalizer" /> which represents the localizer images filtered out.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>The localizer is a single slice image extracted from the 3D object with angle different than the angle of the slices that created the 3D object</description>
          </item>
          <item>
            <description>this property is null by default, you should call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> to fill this out.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Stacks">
      <summary>
            (Read only) Gets a list of stacks of sorted images .
            </summary>
      <value>
            a list of <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /> which represents stacks of sorted images.
            </value>
      <remarks>
        <list type="bullet">
          <item>
            <description>this property is null by default, you should call the method <see cref="M:Leadtools.MedicalViewer.MedicalViewerSeriesManager.Sort(System.Collections.Generic.List{Leadtools.MedicalViewer.MedicalViewerImageData})" /> to fill this out.</description>
          </item>
          <item>
            <description>Each image in stack is sorted based on its actual real world position, so it's displayed correctly, and make it easier for the 3D toolkit to create an accurate 3D object.</description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSeriesStack" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerRegion">
      <summary>
            Represents the class that contains the properties of the region actions.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
        <para>This class is used when setting or getting the properties of the following actions:</para>
        <list type="bullet">
          <item>
            <description>RectangleRegion</description>
          </item>
          <item>
            <description>EllipseRegion</description>
          </item>
          <item>
            <description>FreeHandRegion</description>
          </item>
          <item>
            <description>PolygonRegion</description>
          </item>
          <item>
            <description>MagicWandRegion</description>
          </item>
          <item>
            <description>ColorRangeRegion</description>
          </item>
          <item>
            <description>CircleRegion</description>
          </item>
          <item>
            <description>SquareRegion</description>
          </item>
        </list>
        <para>To set the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.SetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType,Leadtools.MedicalViewer.MedicalViewerBaseAction)" /> method, and to 
            retrieve the properties call the <see cref="M:Leadtools.MedicalViewer.MedicalViewerBaseCell.GetActionProperties(Leadtools.MedicalViewer.MedicalViewerActionType)" /> method. To create the rectangle,
            ellipse, square, circle or freehand region, click and drag the mouse. To create a 
            polygon region, click on each point and after finishing the shape 
            double-click to end the action and to complete the region. </para>
        <para>To create a 
            magic wand region, click and hold the mouse to start the effect and to 
            assign the point that will be used as the starting point and color for the magic wand. 
            When the assigned mouse button is released the action ends. Dragging the mouse 
            down increases the threshold of variation allowed from the selected color. 
            Dragging the mouse up decreases the threshold of variation allowed from the selected color.</para>
        <para>To create a color range region, click and hold the mouse to start 
            the effect. When the assigned mouse button is released the action ends. 
            Dragging the mouse left/right increases/decreases the lower tolerance. 
            Dragging the mouse up/down increases/decreases the upper tolerance.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor">MedicalViewerRegion()</see></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegion"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para>Change the properties of the region actions.</para>
        <para>
          <!--MedicalViewer.MedicalViewerRegion-->
        </para>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor(System.Boolean,Leadtools.RasterRegionCombineMode)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerRegion"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="createFromCenter">true to create a region from the center; otherwise, false.</param>
      <param name="combineMode">The action to take regarding combining the existing image region, if one is defined.</param>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor">MedicalViewerRegion()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegion.CreateFromCenter">
      <summary>
            Gets or sets a value that indicates whether to create a region from the center or from the edge.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to create a region from the center; otherwise, false.</value>
      <remarks>
        <list type="bullet">
          <item>
            <description>This works only on the symmetrical regions, namely:
            <list type="bullet"><item><description>RectangleRegion</description></item><item><description>EllipseRegion</description></item><item><description>CircleRegion</description></item><item><description>SquareRegion</description></item></list></description>
          </item>
        </list>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerRegion.Operation">
      <summary>
            Gets or sets the enumerated value that specifies what action to take regarding the existing image region.
            </summary>
      <medaddon>yes</medaddon>
      <value>Enumerated value that specifies what action to take regarding the existing image region, if one is defined.</value>
      <example>
            For an example, refer to <see cref="M:Leadtools.MedicalViewer.MedicalViewerRegion.#ctor">MedicalViewerRegion()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerImageInformation">
      <summary>
            Represents the class that is used to set or get image information.
            </summary>
      <medaddon>yes</medaddon>
      <example>
        <para />
        <code lang="VB">      Private Class MedicalViewerForm : Inherits Form
         Private _medicalViewer As MedicalViewer
         Public label As Label
         Private Sub MedicalViewerForm_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom)
         End Sub

         Public Sub New()
            Dim _codecs As RasterCodecs = New RasterCodecs()
            Dim _image As RasterImage

            AddHandler SizeChanged, AddressOf MedicalViewerForm_SizeChanged

            ' Create the medical viewer and adjust the size and the location.
            _medicalViewer = New MedicalViewer(1, 2)
            _medicalViewer.Location = New Point(0, 0)
            _medicalViewer.Size = New Size(Me.ClientRectangle.Right, Me.ClientRectangle.Bottom - 10)

            ' Load an image and then add it to the control.
            '_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            Dim cell As MedicalViewerMultiCell = New MedicalViewerMultiCell(Nothing, True, 1, 1)
            _medicalViewer.Cells.Add(cell)

            ' add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel)
            cell.AddAction(MedicalViewerActionType.Alpha)
            cell.AddAction(MedicalViewerActionType.Offset)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            cell.Rows = 1
            cell.Columns = 1
            cell.FitImageToCell = True

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(0).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(0).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(0).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(0).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)


            ' Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "mr.dcm"))
            _medicalViewer.Cells.Add(New MedicalViewerMultiCell(_image, True, 2, 2))

            ' add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.WindowLevel)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Alpha)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.Offset)
            _medicalViewer.Cells(1).AddAction(MedicalViewerActionType.RectangleRegion)

            ' assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active)
            _medicalViewer.Cells(1).SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active)

            ' adjust some properties of the cell and add some tags.
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448")
            _medicalViewer.Cells(1).SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame)
            _medicalViewer.Cells(1).SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale)
            _medicalViewer.Cells(1).SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData)
            _medicalViewer.Cells(1).SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView)

            label = New Label()
            label.Location = New Point(0, Me.ClientRectangle.Bottom - 10)
            label.Size = New Size(Me.ClientRectangle.Right, 10)
            label.Text = "Here the statistical information will appear"

            Controls.Add(_medicalViewer)
            _medicalViewer.Dock = DockStyle.Fill
         End Sub
         Public ReadOnly Property Viewer() As MedicalViewer
            Get
               Return _medicalViewer
            End Get
         End Property
      End Class

      Private Function GetMedicalControl() As MedicalViewerForm
         Return New MedicalViewerForm()
      End Function

      ' This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      Public Sub MedicalViewerLowMemoryUsageExample()
         Dim myForm As MedicalViewerForm = GetMedicalControl()
         Dim medicalViewer As MedicalViewer = myForm.Viewer
         Dim cell As MedicalViewerMultiCell = CType(medicalViewer.Cells(0), MedicalViewerMultiCell)


         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer = 0
         Dim count As Integer


         Dim info As CodecsImageInfo
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         info = codecs.GetInformation(fileName, True)
         count = info.TotalPages
         Dim a As MedicalViewerImageInformation() = New MedicalViewerImageInformation(count - 1) {}

         i = 0
         Do While i &lt; count
            info = codecs.GetInformation(fileName, True, i + 1)
            a(i) = New MedicalViewerImageInformation()
            a(i).ImageHeight = info.Height
            a(i).ImageWidth = info.Width
            a(i).XResolution = info.XResolution
            a(i).YResolution = info.YResolution
            i += 1
         Loop

         AddHandler cell.ActiveSubCellChanged, AddressOf medicalViewer_ActiveSubCellChanged1
         AddHandler cell.FramesRequested, AddressOf medicalViewer_FramesRequested
         cell.EnableLowMemoryUsage(2, count, a)
         myForm.ShowDialog()
      End Sub

      Private Sub medicalViewer_ActiveSubCellChanged1(ByVal sender As Object, ByVal e As MedicalViewerActiveSubCellChangedEventArgs)
         Dim imageInformation As String = ""
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)

         If cell.VirtualImage(e.SubCellIndex).ImageExist Then
            imageInformation = "Image bit per pixel = " &amp; cell.VirtualImage(e.SubCellIndex).Image.BitsPerPixel.ToString()
         End If

         CType(cell.ParentViewer.Parent, MedicalViewerForm).label.Text = imageInformation &amp; " HasRegion = " &amp; cell.VirtualImage(e.SubCellIndex).HasRegion
      End Sub

      Private Sub medicalViewer_FramesRequested(ByVal sender As Object, ByVal e As MedicalViewerRequestedFramesInformationEventArgs)
         Dim cell As MedicalViewerMultiCell = CType(sender, MedicalViewerMultiCell)
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "xa.dcm")
         Dim _codecs As RasterCodecs = New RasterCodecs()
         Dim i As Integer
         Dim b As RasterImage

         If e.RequestedFramesIndexes.Length &gt; 0 Then
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(0) + 1, e.RequestedFramesIndexes(0) + 1)
         Else
            Return
         End If

         i = 1
         Do While i &lt; e.RequestedFramesIndexes.Length
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes(i) + 1, e.RequestedFramesIndexes(i) + 1))
            i += 1
         Loop

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert)
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MedicalViewerForm : Form
      {
         private MedicalViewer _medicalViewer;
         public Label label;
         void MedicalViewerForm_SizeChanged(object sender, EventArgs e)
         {
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom);
         }

         public MedicalViewerForm()
         {
            RasterCodecs _codecs = new RasterCodecs();
            RasterImage _image;

            this.SizeChanged += new EventHandler(MedicalViewerForm_SizeChanged);

            // Create the medical viewer and adjust the size and the location.
            _medicalViewer = new MedicalViewer(1, 2);
            _medicalViewer.Location = new Point(0, 0);
            _medicalViewer.Size = new Size(this.ClientRectangle.Right, this.ClientRectangle.Bottom - 10);

            // Load an image and then add it to the control.
            //_image = _codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "xa.dcm");
            MedicalViewerMultiCell cell = new MedicalViewerMultiCell(null, true, 1, 1);
            _medicalViewer.Cells.Add(cell);

            // add some actions that will be used to change the properties of the images inside the control.
            cell.AddAction(MedicalViewerActionType.WindowLevel);
            cell.AddAction(MedicalViewerActionType.Alpha);
            cell.AddAction(MedicalViewerActionType.Offset);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            cell.SetAction(MedicalViewerActionType.WindowLevel, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            cell.SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            cell.Rows = 1;
            cell.Columns = 1;
            cell.FitImageToCell = true;

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[0].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[0].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[0].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[0].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);


            // Load another image and then add it to the control.
            _image = _codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"mr.dcm"));
            _medicalViewer.Cells.Add(new MedicalViewerMultiCell(_image, true, 2, 2));

            // add some actions that will be used to change the properties of the images inside the control.
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.WindowLevel);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Alpha);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.Offset);
            _medicalViewer.Cells[1].AddAction(MedicalViewerActionType.RectangleRegion);

            // assign the added actions to a mouse button, meaning that when the user clicks and drags the mouse button, the associated action will be activated.
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.RectangleRegion, MedicalViewerMouseButtons.Left, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Alpha, MedicalViewerMouseButtons.Middle, MedicalViewerActionFlags.Active);
            _medicalViewer.Cells[1].SetAction(MedicalViewerActionType.Offset, MedicalViewerMouseButtons.Right, MedicalViewerActionFlags.Active);

            // adjust some properties of the cell and add some tags.
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.UserData, "EX. ID 230-36-5448");
            _medicalViewer.Cells[1].SetTag(4, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Frame);
            _medicalViewer.Cells[1].SetTag(6, MedicalViewerTagAlignment.TopLeft, MedicalViewerTagType.Scale);
            _medicalViewer.Cells[1].SetTag(2, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.WindowLevelData);
            _medicalViewer.Cells[1].SetTag(1, MedicalViewerTagAlignment.BottomLeft, MedicalViewerTagType.FieldOfView);

            label = new Label();
            label.Location = new Point(0, this.ClientRectangle.Bottom - 10);
            label.Size = new Size(this.ClientRectangle.Right, 10);
            label.Text = "Here the statistical information will appear";

            Controls.Add(_medicalViewer);
            _medicalViewer.Dock = DockStyle.Fill;
         }
         public MedicalViewer Viewer
         {
            get { return _medicalViewer; }
         }
      }

      MedicalViewerForm GetMedicalControl()
      {
         return new MedicalViewerForm();
      }

      // This example shows how to use the low memory usage feature to display a medical image with multiple pages. it will also invert all the bitmap to show the invert function works even if the bitmap is not loaded yet.

      public void MedicalViewerLowMemoryUsageExample()
      {
         MedicalViewerForm myForm = GetMedicalControl();
         MedicalViewer medicalViewer = myForm.Viewer;
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(medicalViewer.Cells[0]);


         RasterCodecs codecs = new RasterCodecs();
         int i = 0;
         int count;


         CodecsImageInfo info;
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         info = codecs.GetInformation(fileName, true);
         count = info.TotalPages;
         MedicalViewerImageInformation[] a = new MedicalViewerImageInformation[count];

         for (i = 0; i &lt; count; i++)
         {
            info = codecs.GetInformation(fileName, true, i + 1);
            a[i] = new MedicalViewerImageInformation();
            a[i].ImageHeight = info.Height;
            a[i].ImageWidth = info.Width;
            a[i].XResolution = info.XResolution;
            a[i].YResolution = info.YResolution;
         }

         cell.ActiveSubCellChanged += new EventHandler&lt;MedicalViewerActiveSubCellChangedEventArgs&gt;(medicalViewer_ActiveSubCellChanged1);
         cell.FramesRequested += new EventHandler&lt;MedicalViewerRequestedFramesInformationEventArgs&gt;(medicalViewer_FramesRequested);
         cell.EnableLowMemoryUsage(2, count, a);
         myForm.ShowDialog();
      }

      void medicalViewer_ActiveSubCellChanged1(object sender, MedicalViewerActiveSubCellChangedEventArgs e)
      {
         string imageInformation = "";
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)sender;

         if (cell.VirtualImage[e.SubCellIndex].ImageExist)
         {
            imageInformation = "Image bit per pixel = " + cell.VirtualImage[e.SubCellIndex].Image.BitsPerPixel.ToString();
         }

         ((MedicalViewerForm)(cell.ParentViewer.Parent)).label.Text = imageInformation + " HasRegion = " + cell.VirtualImage[e.SubCellIndex].HasRegion;
      }

      void medicalViewer_FramesRequested(object sender, MedicalViewerRequestedFramesInformationEventArgs e)
      {
         MedicalViewerMultiCell cell = (MedicalViewerMultiCell)(sender);
         string fileName =Path.Combine(LEAD_VARS.ImagesDir,"xa.dcm");
         RasterCodecs _codecs = new RasterCodecs();
         int i;
         RasterImage b;

         if (e.RequestedFramesIndexes.Length &gt; 0)
         {
            b = _codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[0] + 1, e.RequestedFramesIndexes[0] + 1);
         }
         else
            return;

         for (i = 1; i &lt; e.RequestedFramesIndexes.Length; i++)
         {
            b.AddPage(_codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, e.RequestedFramesIndexes[i] + 1, e.RequestedFramesIndexes[i] + 1));
         }

         cell.SetRequestedImage(b, e.RequestedFramesIndexes, MedicalViewerSetImageOptions.Insert);
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--MedicalViewer.MedicalViewerImageInformation-->
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerImageInformation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /> class.
            </summary>
      <medaddon>yes</medaddon>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerImageInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /> class with explicit parameters.
            </summary>
      <medaddon>yes</medaddon>
      <param name="xResolution">The image horizontal resolution, in dots per inch (DPI).</param>
      <param name="yResolution">The image vertical resolution, in dots per inch (DPI).</param>
      <param name="imageWidth">The width of the image in pixels.</param>
      <param name="imageHeight">The height of the image in pixels.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageInformation.XResolution">
      <summary>
            Gets or sets the image horizontal resolution, in dots per inch (DPI).
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates horizontal resolution in dots per inch (DPI).</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageInformation.YResolution">
      <summary>
            Gets or sets the image vertical resolution, in dots per inch (DPI).
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates vertical resolution in dots per inch (DPI).</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageInformation.ImageWidth">
      <summary>
            Gets or sets the value that indicates the width of the image in pixels.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the width of the image in pixels.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerImageInformation.ImageHeight">
      <summary>
            Gets or sets the value that indicates the height of the image in pixels.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the height of the image in pixels.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.MedicalViewer.MedicalViewerImageInformation" /></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs">
      <summary>
            The MedicalViewerKeyEventArgs class provides data for various MedicalViewer user interaction events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionKeyUp" />.</description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.UserActionKeyDown" />.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs.#ctor(System.Int32,Leadtools.RasterImage[],System.Int32,System.Windows.Forms.Keys)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndex">The index of the cell that the user tag will be drawn on.</param>
      <param name="images">Array of <see cref="T:Leadtools.RasterImage" /> objects that contain the images to be updated.</param>
      <param name="actionID">The ID of the action that raised the event.</param>
      <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> value representing the key that was pressed, combined with any modifier flags that indicate which CTRL, SHIFT, or ALT key was pressed at the same time. Possible values are obtained be applying the bitwise OR (|) operator to constants from the Keys enumeration.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs.CellIndex">
      <summary>
            Gets or sets the value that indicates the index of the cell that received the action.  
            </summary>
      <value>Value that indicates the index of the cell that received the action.  This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.</value>
      <remarks>
            This value is only valid if the cell is added to the <see cref="T:Leadtools.MedicalViewer.MedicalViewer" />.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs.Images">
      <summary>
            Gets or sets the array of <see cref="T:Leadtools.RasterImage" /> objects that contain the images to be updated.
            </summary>
      <medaddon>yes</medaddon>
      <value>Array of <see cref="T:Leadtools.RasterImage" /> objects that contain the images to be updated.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerKeyEventArgs.ActionID">
      <summary>
            Gets or sets the ID of the action that raised the event.
            </summary>
      <medaddon>yes</medaddon>
      <value>Value that indicates the ID of the action that raised the event.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.MedicalViewer.MedicalViewerCell.CustomPaint" /></example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject">
      <summary>
            Represents the class that is used to synchronize multiple cells together by scrolling all the cells if the user scrolls one of them.
            </summary>
      <isnew>6/4/2011</isnew>
      <remarks>
            To enable this feature, apply the following:
            <list type="number"><item><description>Create a new instance of <b>MedicalViewerStackSynchronizationObject</b>.</description></item><item><description>Set the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Mode" /> to <see cref="T:Leadtools.MedicalViewer.MedicalViewerSynchronizationType" />.Automatic.</description></item><item><description>Add the cells intended to synchronize to the <b>MedicalViewerStackSynchronizationObject</b> through the <see cref="P:Leadtools.MedicalViewer.MedicalViewerSynchronizationObject.Cells" /> collection.</description></item><item><description>For each cell, make sure to set the image position for each frame using <see cref="M:Leadtools.MedicalViewer.MedicalViewerCell.SetImagePosition(System.Int32,Leadtools.MedicalViewer.Point3D,System.Boolean)" /> method. This is required in order for the Medical Viewer to be able to match the series with the same image position together.</description></item><item><description>For each cell intended to be synchronized, make sure to set the image orientation using <see cref="P:Leadtools.MedicalViewer.MedicalViewerCell.ImageOrientation" />.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject.#ctor">
      <summary>
            Initializes a new Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject class object with default parameters.
            </summary>
      <isnew>6/4/2011</isnew>
      <medaddon>yes</medaddon>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject.DoSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)">
      <summary>
            (Overridden) Synchronizes the cells together by scrolling all cells if the user scrolls one of them.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="baseCell"> The cell that is just been added to synchronization object.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerStackSynchronizationObject.DoUnSynchronize(Leadtools.MedicalViewer.MedicalViewerBaseCell)">
      <summary>
            (Overridden) Un-Synchronizes the cells.
            </summary>
      <isnew>6/4/2011</isnew>
      <param name="baseCell"> The cell that is just been removed to synchronization object.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.MedicalViewer.MedicalViewerBaseCell.Synchronization" />.
            </example>
    </member>
    <member name="T:Leadtools.MedicalViewer.MedicalViewerDeleteEventArgs">
      <summary>
            The MedicalViewerDeleteEventArgs class provides data for various MedicalViewer user interaction events.
            </summary>
      <medaddon>yes</medaddon>
      <remarks>
            Use this class when handling the following events:
            <list type="bullet"><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewer.DeleteCell" /></description></item><item><description><see cref="E:Leadtools.MedicalViewer.MedicalViewerBaseCell.DeleteAnnotation" /></description></item></list></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.MedicalViewer.MedicalViewerDeleteEventArgs.#ctor(System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.MedicalViewer.MedicalViewerDeleteEventArgs"></see> class.
            </summary>
      <medaddon>yes</medaddon>
      <param name="cellIndexes">Array of values that indicate the indexes of the cells that will be affected by the delete process.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDeleteEventArgs.CellIndexes">
      <summary>
            (Read only) Gets the array of values that indicate the indexes of the cells that will be affected by the deleting process.
            </summary>
      <medaddon>yes</medaddon>
      <value>Array of values that indicate the zero-based indices of the cells that will be affected by the deleting process.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.MedicalViewer.MedicalViewerDeleteEventArgs.Delete">
      <summary>
            Gets or sets the value that indicate whether to apply the delete process or not.
            </summary>
      <medaddon>yes</medaddon>
      <value>true to apply the delete process; otherwise, false.</value>
      <noremarks />
      <noexample />
    </member>
  </members>
</doc>