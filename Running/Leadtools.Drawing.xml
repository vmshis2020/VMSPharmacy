<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Drawing</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer">
      <summary>
            Encapsulates a GDI+ object used when creating a <see cref="T:System.Drawing.Graphics" /> surface of a <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <remarks>
        <para>This class holds the <see cref="T:System.Drawing.Graphics" />, 
            <see cref="T:System.Drawing.Image" /> and <see cref="T:System.Drawing.Region" /> representation of the surface of the
            <see cref="T:Leadtools.RasterImage" />.</para>
        <para>You can then use the members of the <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" /> along with GDI+ calls to draw
            on the surface of the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>You can also use the <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)">RasterImagePainter.CreateGraphics</see> method to create a GDI+
            <see cref="P:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Graphics" /> object from a <see cref="T:Leadtools.RasterImage" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterImageGdiPlusGraphicsContainerExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGdiPlusGraphics.bmp")

         ' Load the image
         Using image As RasterImage = codecs.Load(srcFileName)

            ' Create a graphics object for this image surface and draw something on it
            Using container As RasterImageGdiPlusGraphicsContainer = New RasterImageGdiPlusGraphicsContainer(image)
               Using g As Graphics = container.Graphics
                  Using b As New SolidBrush(Color.FromArgb(128, 0, 0, 0))
                     g.FillEllipse(b, New Rectangle(0, 0, image.ImageWidth, image.ImageHeight))
                  End Using
               End Using
            End Using

            ' Save the image back on disk
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageGdiPlusGraphicsContainerExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGdiPlusGraphics.bmp");

         // Load the image
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Create a graphics object for this image surface and draw something on it
            using(RasterImageGdiPlusGraphicsContainer container = new RasterImageGdiPlusGraphicsContainer(image))
            {
               using(Graphics g = container.Graphics)
               {
                  using(Brush b = new SolidBrush(Color.FromArgb(128, 0, 0, 0)))
                  {
                     g.FillEllipse(b, new Rectangle(0, 0, image.ImageWidth, image.ImageHeight));
                  }
               }
            }

            // Save the image back on disk
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageGdiPlusGraphicsContainer-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.#ctor(Leadtools.RasterImage)">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" /> class from a <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <param name="image">The source <see cref="T:Leadtools.RasterImage" />.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)">RasterImageConverter.TestCompatible</see> to determine if the image is compatible for
            creating a GDI+ <see cref="P:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Graphics" /> object.</para>
        <para>This allows you to create an infinite number of drawing capabilities such as paint, erase, color erase and brush,
            pen, spray gun, flood fill, color tube, text overlay, curve, line, rectangle, polygon, ellipse, freehand shapes, cut and paste,
            and more to use on the surface of this <see cref="T:Leadtools.RasterImage" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Dispose">
      <summary>
            Releases all the resources used by this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Dispose(System.Boolean)">
      <summary>
            Releases all the resources used by this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Graphics">
      <summary>
            Gets the <see cref="T:System.Drawing.Graphics" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.
            </summary>
      <value>The <see cref="T:System.Drawing.Graphics" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Image">
      <summary>
            Gets the <see cref="T:System.Drawing.Image" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.
            </summary>
      <value>The <see cref="T:System.Drawing.Image" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer.Region">
      <summary>
            Gets the <see cref="T:System.Drawing.Region" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.
            </summary>
      <value>The <see cref="T:System.Drawing.Region" /> object associated with this <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterImageGdiPlusGraphicsContainer" />.</example>
    </member>
    <member name="T:Leadtools.Drawing.RasterColorConverter">
      <summary>
            Converts between LEADTOOLS <see cref="T:Leadtools.RasterColor" /> and System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> objects.
            </summary>
      <remarks>
        <para>This class lets you easily convert between a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object and a System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object.</para>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterColor" /> class provides a platform independent representation of an ARGB color that can be used in any platform
            supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object to/from a
            System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterColorConverterExample()
         ' Create a GDI+ color
         Dim gdipColor As System.Drawing.Color = Color.Bisque
         ' Convert it to a LEADTOOLS RasterColor
         Dim leadColor As RasterColor = RasterColorConverter.FromColor(gdipColor)
         ' Show both colors
         Console.WriteLine("gdipColor = {0} - leadColor = {1}", gdipColor, leadColor)

         ' Make sure both colors are the same
         Debug.Assert( _
            gdipColor.A = leadColor.A AndAlso _
            gdipColor.R = leadColor.R AndAlso _
            gdipColor.G = leadColor.G AndAlso _
            gdipColor.B = leadColor.B)

         ' Create the LEAD color
         leadColor = New RasterColor(128, 24, 35, 67)
         ' Convert it to a GDI+ color
         gdipColor = RasterColorConverter.ToColor(leadColor)
         ' Show both colors
         Console.WriteLine("gdipColor = {0} - leadColor = {1}", gdipColor, leadColor)

         ' Make sure both colors are the same
         Debug.Assert( _
            gdipColor.A = leadColor.A AndAlso _
            gdipColor.R = leadColor.R AndAlso _
            gdipColor.G = leadColor.G AndAlso _
            gdipColor.B = leadColor.B)
      End Sub</code>
        <code lang="CS">      public void RasterColorConverterExample()
      {
         // Create a GDI+ color
         System.Drawing.Color gdipColor = Color.Bisque;
         // Convert it to a LEADTOOLS RasterColor
         Leadtools.RasterColor leadColor = RasterColorConverter.FromColor(gdipColor);
         // Show both colors
         Console.WriteLine("gdipColor = {0} - leadColor = {1}", gdipColor, leadColor);

         // Make sure both colors are the same
         Debug.Assert(
            gdipColor.A == leadColor.A &amp;&amp;
            gdipColor.R == leadColor.R &amp;&amp;
            gdipColor.G == leadColor.G &amp;&amp;
            gdipColor.B == leadColor.B);

         // Create the LEAD color
         leadColor = new RasterColor(128, 24, 35, 67);
         // Convert it to a GDI+ color
         gdipColor = RasterColorConverter.ToColor(leadColor);
         // Show both colors
         Console.WriteLine("gdipColor = {0} - leadColor = {1}", gdipColor, leadColor);

         // Make sure both colors are the same
         Debug.Assert(
            gdipColor.A == leadColor.A &amp;&amp;
            gdipColor.R == leadColor.R &amp;&amp;
            gdipColor.G == leadColor.G &amp;&amp;
            gdipColor.B == leadColor.B);
      }</code>
        <!--RasterColorConverter-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterColorConverter.FromColor(System.Drawing.Color)">
      <summary>
            Converts a System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object to a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object.
            </summary>
      <param name="color">The source System.Drawing (GDI+) color.</param>
      <returns>The corresponding LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterColor" /> class provides a platform independent representation of an ARGB color that can be used in any platform
            supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this method to convert a System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object to
            a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterColorConverter" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterColorConverter.ToColor(Leadtools.RasterColor)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object to a System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object.
            </summary>
      <param name="color">The source LEADTOOLS <see cref="T:Leadtools.RasterColor" /> color.</param>
      <returns>The System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterColor" /> class provides a platform independent representation of an ARGB color that can be used in any platform
            supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this method to convert a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object to a
            System.Drawing (GDI+) <see cref="T:System.Drawing.Color" /> object.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterColorConverter" />.</example>
    </member>
    <member name="T:Leadtools.Drawing.ImageIncompatibleReason">
      <summary>
            Indicates the reason that the LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object is not compatible with GDI+.
            </summary>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)">RasterImageConverter.TestCompatible</see>.</example>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.Compatible">
      <summary>
            Image is compatible
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.BitsPerPixel">
      <summary>
            Unsupported Bits/Pixel
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.Order">
      <summary>
            Unsupported color byte order
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.Palette">
      <summary>
            Unsupported palette
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.Data">
      <summary>
            Unsupported raw data
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.ViewPerspective">
      <summary>
            Unsupported view perspective
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ImageIncompatibleReason.Other">
      <summary>
            Unspecified reason
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.ChangeToImageOptions">
      <summary>
            Options to use when changing a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object to GDI+ <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see>.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Drawing.ChangeToImageOptions" /> are used as an options for the <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToImage(Leadtools.RasterImage,Leadtools.Drawing.ChangeToImageOptions)">RasterImageConverter.ChangeToImage</see> method.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToImage(Leadtools.RasterImage,Leadtools.Drawing.ChangeToImageOptions)">RasterImageConverter.ChangeToImage</see></example>
    </member>
    <member name="F:Leadtools.Drawing.ChangeToImageOptions.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ChangeToImageOptions.ForceChange">
      <summary>
            If the image is not GDI+ compatible, this flag forces the conversion.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ChangeToImageOptions.NoPalette">
      <summary>
            Fail if the image has a palette.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ChangeToImageOptions.TopLeftAlways">
      <summary>
            Force the image to have <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective.
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.ConvertToImageOptions">
      <summary>
            Options to use when converting a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object to GDI+ <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see>.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Drawing.ConvertToImageOptions" /> are used as an options for the <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)">RasterImageConverter.ConvertToImage</see> method.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)">RasterImageConverter.ConvertToImage</see></example>
    </member>
    <member name="F:Leadtools.Drawing.ConvertToImageOptions.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.ConvertToImageOptions.InitAlpha">
      <summary>
            Initialize the destination image alpha values if supported (when the result of the conversion is a 32 or 64-bit image). If this flagged is specified,
            the result image will always have an alpha value of all 1's (255 for 32-bit images or 65535 for 64-bit images) regardless of the alpha values in the
            source image. This can be useful when converting some 32-bit images that may have 0 for the alpha (such as BMP files) which translates into an GDI+ image
            that is completely transparent. If this flag is not specified, then the source image alpha values will be used as is.
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.ConvertFromImageOptions">
      <summary>
            Options to use when converting a GDI+ <see cref="T:System.Drawing.Bitmap">System.Drawing.Bitmap</see> to LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Drawing.ConvertFromImageOptions" /> are used as an options for the <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)">RasterImageConverter.ConvertFromImage</see> method.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)">RasterImageConverter.ConvertFromImage</see></example>
    </member>
    <member name="F:Leadtools.Drawing.ConvertFromImageOptions.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.Transformer">
      <summary>
            Helper class used for converting physical to logical coordinates and vise-versa based on a given matrix.
            </summary>
      <keywords>Coordinates</keywords>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Drawing.Transformer" /> class with default settings.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.#ctor(System.Drawing.Drawing2D.Matrix)">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Drawing.Transformer" /> class with specific settings.
            </summary>
      <param name="transform">The transformation matrix for this <see cref="T:Leadtools.Drawing.Transformer" />.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.PointToLogical(System.Drawing.PointF[])">
      <summary>
            Converts the specified points from physical to logical coordinates.
            </summary>
      <param name="pts">The input physical points.</param>
      <returns>The points converted from physical to logical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.PointToPhysical(System.Drawing.PointF[])">
      <summary>
            Converts the specified points from logical to physical coordinates.
            </summary>
      <param name="pts">The input logical points.</param>
      <returns>The points converted from logical to physical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.PointToLogical(System.Drawing.PointF)">
      <summary>
            Converts the specified point from physical to logical coordinates.
            </summary>
      <param name="pt">The input physical point.</param>
      <returns>The point converted from physical to logical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.PointToPhysical(System.Drawing.PointF)">
      <summary>
            Converts the specified point from logical to physical coordinates.
            </summary>
      <param name="pt">The input logical points.</param>
      <returns>The point converted from logical to physical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.RectangleToLogical(System.Drawing.RectangleF)">
      <summary>
            Converts the specified rectangle from physical to logical coordinates.
            </summary>
      <param name="rc">The input physical rectangle.</param>
      <returns>The rectangle converted from physical to logical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.RectangleToPhysical(System.Drawing.RectangleF)">
      <summary>
            Converts the specified rectangle from logical to physical coordinates.
            </summary>
      <param name="rc">The input logical rectangle.</param>
      <returns>The rectangle converted from logical to physical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.LengthToLogical(System.Single)">
      <summary>
            Converts the specified length value from physical to logical coordinates.
            </summary>
      <param name="length">The input physical length.</param>
      <returns>The length converted from physical to logical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.LengthToPhysical(System.Single)">
      <summary>
            Converts the specified length value from logical to physical coordinates.
            </summary>
      <param name="length">The input logical length.</param>
      <returns>The length converted from logical to physical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.Transformer.TransformPoints(System.Drawing.PointF[],System.Drawing.Drawing2D.Matrix)">
      <summary>
            Converts the specified points from logical to physical coordinates.
            </summary>
      <param name="pts">The input logical points</param>
      <param name="matrix">The transformation matrix to use.</param>
      <returns>The points converted from logical to physical coordinates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Drawing.Transformer.Transform">
      <summary>
            Gets and sets the transformation matrix for this <see cref="T:Leadtools.Drawing.Transformer" />.
            </summary>
      <value>The transformation matrix for this <see cref="T:Leadtools.Drawing.Transformer" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">
      <summary>
            Used to identify the callbacks in a <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class.
            </summary>
      <isnew>2/28/2009</isnew>
      <remarks>
        <para>The <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class can contain a number of callbacks used for custom painting.</para>
        <para>The number and parameter types for each callback is determined by the callback type using the values in this enumeration.</para>
        <para>The number and parameter types for each callback are indicated below.</para>
        <para>
          <h3>ConvertLineCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr pOutScan</c>
              </term>
              <description>The output buffer (pointer to an unmanaged array of bytes).</description>
            </item>
            <item>
              <term>
                <c>IntPtr pInScan</c>
              </term>
              <description>The input buffer (pointer to an unmanaged array of bytes).</description>
            </item>
            <item>
              <term>
                <c>int nLeft</c>
              </term>
              <description>Left offset of the first pixel in the input buffer to be used in conversion. (The pixels before this offset should be discarded).</description>
            </item>
            <item>
              <term>
                <c>int nRight</c>
              </term>
              <description>Right offset of the first pixel after the last pixel in the input buffer to be used in conversion. (Pixels nLeft..nRight-1 should be used in conversion).</description>
            </item>
            <item>
              <term>
                <c>RasterPaintDibInfo pDibInfo</c>
              </term>
              <description>Pointer to a <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> class returned by the <strong>GetDibInfoCallback</strong> callback. Contains information on the format of the output data. This is a read-only class, any changes made to it will be discarded.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>ExtSelectClipRgnCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>IntPtr hRgn</c>
              </term>
              <description>The region handle</description>
            </item>
            <item>
              <term>
                <c>int nMode</c>
              </term>
              <description>The selection mode</description>
            </item>
          </list>
        </para>
        <para>
          <h3>GetDeviceCapsCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nIndex</c>
              </term>
              <description>Identifies which capability to return.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>GetDibInfoCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nWidth</c>
              </term>
              <description>The width of the image data to be painted. (Might be less than the image width).</description>
            </item>
          </list>
            The return value is a <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> class. It contains information about how the image data expected by the device looks like.
            </para>
        <para>
          <h3>GetGraphicsModeCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>GetMapModeCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>GetViewportOrgExCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
            The return value is a <see cref="T:System.Drawing.Point">System.Drawing.Point</see> structure.
            </para>
        <para>
          <h3>GetWorldTransformCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
            The return value is a <see cref="T:Leadtools.RasterRegionXForm" /> structure. This structure will be converted to the standard GDI <strong>XFORM</strong> 
            structure by assigning each field from <strong>XFORM</strong> the corresponding field from <see cref="T:Leadtools.RasterRegionXForm" />. The correspondence is as follows:
             <list><listheader><term>XFORM field</term><description>RasterRegionXForm field</description></listheader><item><term><c>eM11</c></term><description><c>XScalarNumerator</c></description></item><item><term><c>eM12</c></term><description><c>XScalarDenominator</c></description></item><item><term><c>eM21</c></term><description><c>YScalarNumerator</c></description></item><item><term><c>eM22</c></term><description><c>YScalarDenominator</c></description></item><item><term><c>eDx</c></term><description><c>XOffset</c></description></item><item><term><c>eDy</c></term><description><c>YOffset</c></description></item></list></para>
        <para>
          <h3>IntersectClipRectCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nLeft</c>
              </term>
              <description>The left offset</description>
            </item>
            <item>
              <term>
                <c>int nTop</c>
              </term>
              <description>The top offset</description>
            </item>
            <item>
              <term>
                <c>int nRight </c>
              </term>
              <description>The right offset</description>
            </item>
            <item>
              <term>
                <c>int nBottom</c>
              </term>
              <description>The bottom offset</description>
            </item>
          </list>
        </para>
        <para>
          <h3>IsCompatibleDCCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>PrePaintCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>IntPtr prcDestClip</c>
              </term>
              <description>Unmanaged pointer to the destination clipping rectangle. It points to an <strong>RECT</strong> GDI structure.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>PostPaintCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>RealizePaletteCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>RestoreDCCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nSaveDC</c>
              </term>
              <description>Index of the DC to be restored.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>SaveDCCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
          </list>
        </para>
        <para>
          <h3>SelectPaletteCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>IntPtr hPal</c>
              </term>
              <description>The palette handle. This is a native GDI <strong>HPALETTE</strong> handle.</description>
            </item>
            <item>
              <term>
                <c>int bForceBackground</c>
              </term>
              <description>Set to 1 to force the palette to be a background palette and match the existing colors. Set to 0 reset the DC colors to the colors in the palette.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>SetStretchBltModeCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nStretchMode</c>
              </term>
              <description>The stretch mode.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>SetViewportOrgExCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nX</c>
              </term>
              <description>The left offset of the new viewport origin.</description>
            </item>
            <item>
              <term>
                <c>int nY</c>
              </term>
              <description>The top offset of the new viewport origin.</description>
            </item>
            <item>
              <term>
                <c>IntPtr lpPoint</c>
              </term>
              <description>Pointer to an unmanaged GDI <strong>POINT</strong> structure.</description>
            </item>
          </list>
        </para>
        <para>
          <h3>StretchDIBitsCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>int nXDest</c>
              </term>
              <description>The left offset of the destination.</description>
            </item>
            <item>
              <term>
                <c>int nYDest</c>
              </term>
              <description>The top offset of the destination.</description>
            </item>
            <item>
              <term>
                <c>int nDestWidth</c>
              </term>
              <description>The width of the destination.</description>
            </item>
            <item>
              <term>
                <c>int nDestHeight</c>
              </term>
              <description>The height of the destination</description>
            </item>
            <item>
              <term>
                <c>int nXSrc</c>
              </term>
              <description>The left offset in the source buffer</description>
            </item>
            <item>
              <term>
                <c>int nYSrc</c>
              </term>
              <description>The top offset in the source buffer.</description>
            </item>
            <item>
              <term>
                <c>int nSrcWidth</c>
              </term>
              <description>The width of the source buffer.</description>
            </item>
            <item>
              <term>
                <c>int nSrcHeight</c>
              </term>
              <description>The height of the source buffer.</description>
            </item>
            <item>
              <term>
                <c>IntPtr lpvBits</c>
              </term>
              <description>Pointer to data (unmanaged pointer to an array of bytes).</description>
            </item>
            <item>
              <term>
                <c>IntPtr lpbmi</c>
              </term>
              <description>Unmanaged pointer to a native GDI <strong>BITMAPINFO</strong> structure describing the image data.</description>
            </item>
            <item>
              <term>
                <c>int fuColorUse</c>
              </term>
              <description>Indicates how the palette colors are to be used.</description>
            </item>
            <item>
              <term>
                <c>unsigned int ulROP3Code</c>
              </term>
              <description>The ROP code</description>
            </item>
          </list>
        </para>
        <para>
          <h3>FillRectCallback</h3>
          <list type="table">
            <listheader>
              <term>Parameter</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>
                <c>IntPtr hdc</c>
              </term>
              <description>The Windows HDC</description>
            </item>
            <item>
              <term>
                <c>LPRECT lprc</c>
              </term>
              <description>The rectangle coordinates to fill.</description>
            </item>
            <item>
              <term>
                <c>COLORREF color</c>
              </term>
              <description>The color to use. You must create a solid brush for this color.</description>
            </item>
          </list>
        </para>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see>.
            </example>
      <seealso cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</seealso>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.ConvertLineCallback">
      <summary>
            This callback converts a line of data.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.ExtSelectClipRgnCallback">
      <summary>
            This callback replaces the <strong>ExtSelectClipRgn</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetDeviceCapsCallback">
      <summary>
            This callback replaces the <strong>GetDeviceCaps</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetDibInfoCallback">
      <summary>
            This callback provides information on the data expected by the device. See <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> for more details.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetGraphicsModeCallback">
      <summary>
            This callback replaces the <strong>GetGraphicsMode</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetMapModeCallback">
      <summary>
            This callback replaces the <strong>GetMapMode</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetViewportOrgExCallback">
      <summary>
            This callback replaces the <strong>GetViewportOrgEx</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.GetWorldTransformCallback">
      <summary>
            This callback replaces the <strong>GetWorldTransform</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.IntersectClipRectCallback">
      <summary>
            This callback replaces the <strong>IntersectClipRect</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.IsCompatibleDCCallback">
      <summary>
            This callback checks whether the DC is compatible with a particular <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> class.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.PrePaintCallback">
      <summary>
            This callback informs your <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class that it has been selected for painting.
            It is called before painting starts. Use it to allocate any memory needed for painting.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.PostPaintCallback">
      <summary>
            This callback gets called after painting is finished. Use it to free any memory allocated in <strong>PrePaintCallback</strong>.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.RealizePaletteCallback">
      <summary>
            This callback replaces the <strong>RealizePalette</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.RestoreDCCallback">
      <summary>
            This callback replaces the <strong>RestoreDC</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.SaveDCCallback">
      <summary>
            This callback replaces the <strong>SaveDC</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.SelectPaletteCallback">
      <summary>
            This callback replaces the <strong>SelectPalette</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.SetStretchBltModeCallback">
      <summary>
            This callback replaces the <strong>SetStretchBltMode</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.SetViewportOrgExCallback">
      <summary>
            This callback replaces the <strong>SetViewportOrgEx</strong> GDI function.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.StretchDIBitsCallback">
      <summary>
            This callback replaces the <strong>StretchDIBits</strong> GDI function. Use it to perform the actual painting.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePaintCallbackFunction.FillRectCallback">
      <summary>
            This callback replaces the <strong>FillRect</strong> GDI function.
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.PaintCallbackDelegate">
      <summary>
            The prototype for all the <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" />.
            </summary>
      <remarks>
        <para>The number and type of parameters is fixed for each callback type.</para>
        <para>For more information on the return value and parameters for each callback type, see <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction" />.</para>
        <para>These callbacks are set to a <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class using <see cref="M:Leadtools.Drawing.RasterPaintCallbacks.SetCallback(Leadtools.Drawing.RasterImagePaintCallbackFunction,Leadtools.Drawing.PaintCallbackDelegate)" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" />.
            </example>
      <param name="image">
            The <see cref="T:Leadtools.RasterImage" /> being painted.
            </param>
      <param name="args">
            The arguments for the callback.
            </param>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintDibInfoFlags">
      <summary>
            Flags that make up <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.Flags" />.
            </summary>
      <remarks>
        <para>You can combine two or more flags using a bitwise Or operator.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" />.
            </example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDibInfoFlags.None">
      <summary>
            No flags are set
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDibInfoFlags.IgnoreLut">
      <summary>
            Ignore the raster image color lookup (LUT) table when performing color conversion. This is valid only for grayscale images.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDibInfoFlags.LowHighBitValid">
      <summary>
            LowBit and HighBit members of <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> are valid. This is valid only for grayscale images.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintDibInfo">
      <summary>
             This class describes the image data expected by the custom paint callbacks. It is used
             with the <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> callbacks.
             </summary>
      <remarks>
        <para>The user will typically allocate this class and return it from the
             <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">RasterImagePaintCallbackFunction.GetDibInfoCallback</see> callback.</para>
      </remarks>
      <example>
        <para>This example will show how to indicate that the graphics device expects a 16-bit image with the image data in the low 12 bits.
             Also, this particular card expected the data to be top-down, unlike the usual GDI functions which expect the data to be upside-down.</para>
        <para>The example is in C++/CLI because this is the most useful language for implementing these classes.</para>
        <code>
             // macro that calculates the number of bytes per line, rounding up to a multiple of 4 bytes
             #define DIB_WIDTH_BYTES(pixels) ((((pixels) + 31) &amp; ~31) &gt;&gt; 3)
             
             Object^ myPaintCallbacks::GetDibInfoCallback(RasterImage^ image, array&lt;Object^&gt;^ args)
             {
                // make sure the parameters are correct
                if(args-&gt;Length != 2 || image == nullptr)
                {
                   throw gcnew RasterException(RasterExceptionCode::InvalidParameter);
                   return nullptr;
                }
                UInt32 uWidth = (UInt32)args[1];
                RasterPaintDibInfo^ pDibInfo = gcnew RasterPaintDibInfo;
                if(pDibInfo == nullptr)
                {
                   throw gcnew RasterException(RasterExceptionCode::NoMemory);
                   return nullptr;
                }
            
                pDibInfo-&gt;Default();
                pDibInfo-&gt;BitsPerPixel = 16;          // paint using 16-bit data, although there are only 12 significant bits
                pDibInfo-&gt;PlaneCount = 1;             // One plane
                pDibInfo-&gt;BytesPerLine = DIB_WIDTH_BYTES(uWidth * 16);   // bytes per line is a multiple of 4 bytes
                pDibInfo-&gt;ViewPerspective = RasterViewPerspective::TopLeft; // the data should be TOP_LEFT, not BOTTOM_LEFT like the data in the regular GDI functions
                pDibInfo-&gt;Order = RasterByteOrder::Gray;         // gray bitmap
            
                // indicate that the data should be in the low 12 bits
                pDibInfo-&gt;Flags = RasterPaintDibInfoFlags::LowHighBitValid;
                pDibInfo-&gt;LowBit = 0;
                pDibInfo-&gt;HighBit = 11;
            
                return pDibInfo;
             }
             </code>
      </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</seealso>
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.Drawing.RasterPaintDibInfo.#ctor">
      <summary>
            Constructs a new <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" /> class.
            </summary>
      <isnew>2/28/2009</isnew>
      <remarks>
        <para>After you create the class you should initialize it by setting its properties.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</seealso>
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.Drawing.RasterPaintDibInfo.Default">
      <summary>
            Fills the <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class with the default settings.
            </summary>
      <isnew>2/28/2009</isnew>
      <remarks>
        <para>The default values are:
            <list type="bullet"><item><description>ViewPerspective = RasterViewPerspective::TopLeft</description></item><item><description>BitsPerPixel = 0</description></item><item><description>PlaneCount = 0</description></item><item><description>BytesPerLine = 0</description></item><item><description>Order = RasterByteOrder::Bgr</description></item><item><description>Flags = RasterPaintDibInfoFlags::None</description></item><item><description>LowBit = 0</description></item><item><description>HighBit = 0</description></item></list><para>Note that most of these are not good default values, so you need to set each property to the correct value.</para></para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.BitsPerPixel">
      <summary>
            Set or get the default bits per pixel of the data expected by the graphics device.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            Valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48, and 64.
            </value>
      <remarks>
            The image data will need to be converted to these bits per pixel before the
            <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">RasterImagePaintCallbackFunction.StretchDIBitsCallback</see> callback.
            <para>The conversion will be performed by the built-in conversion function or the
            <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">RasterImagePaintCallbackFunction.ConvertLineCallback</see> callback</para></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.HighBit">
      <summary>
            Indicates the high bit of the image data (valid only for grayscale 12 or 16-bit data).
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            Valid values are <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.LowBit" /> through <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.BitsPerPixel" /> - 1.
            </value>
      <remarks>
        <para>Used in conjunction with <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.LowBit" /> to specify if the data does not occupy the full range</para>
        <para>This is valid only if <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.Flags" /> has <see cref="T:Leadtools.Drawing.RasterPaintDibInfoFlags">RasterPaintDibInfoFlags.LowHighBitValid</see> set.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.LowBit">
      <summary>
            Indicates the high bit of the image data (valid only for grayscale 12 or 16-bit data).
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            Valid values are 0 through <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.HighBit" /> - 1.
            </value>
      <remarks>
        <para>Used in conjunction with <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.HighBit" /> to specify if the data does not occupy the full range</para>
        <para>This is valid only if <see cref="P:Leadtools.Drawing.RasterPaintDibInfo.Flags" /> has <see cref="T:Leadtools.Drawing.RasterPaintDibInfoFlags">RasterPaintDibInfoFlags.LowHighBitValid</see> set.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.PlaneCount">
      <summary>
            Indicates whether the image data should be interleaved or planar.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            This is usually 1. If the image data is supposed to be planar, it can be the number of planes. It should be positive in any case.
            </value>
      <remarks>
        <para>This value will most likely be 1, indicating that the image data is interleaved. This is how all the know cards expect the image data.
            But, if another card will expect the data to be planar, you should set this to the number of planes (3 for 24/48-bit data, 4 for 32/64-bit data).
            LEADTOOLS does not have built-in support for converting to planar data, so you would have to do the color conversion yourself using
            the <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">RasterImagePaintCallbackFunction.ConvertLineCallback</see> callback.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.Order">
      <summary>
            Indicates the data order (grayscale, BGR, RGB, etc).
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            See the <see cref="T:Leadtools.RasterByteOrder" /> enumeration for valid values.
            </value>
      <remarks>
        <para>You will most likely use <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.Flags">
      <summary>
            Collection of flags indicating various options for the bitmap.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            See the <see cref="T:Leadtools.Drawing.RasterPaintDibInfoFlags" /> enumeration for possible values.
            </value>
      <remarks>
        <para>Use these flags to indicate whether the image data does not use the whole range (for example the low 12 bits for 16-bit image data).</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.ViewPerspective">
      <summary>
            Indicates the expected orientation of the image data.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            See the <see cref="T:Leadtools.RasterViewPerspective" /> enumeration for possible values.
            </value>
      <remarks>
        <para>You will most likely have to pass <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> or <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see> for this value.</para>
        <para>Regular GDI functions expect the data to be upside-down (<see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see>), but some cards
            want data to be in the more logical top-down order (<see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>).</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintDibInfo.BytesPerLine">
      <summary>
            Gets the expected stride (number of bytes per line).
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
            This is usually the number of bytes rounded up to a multiple of 4 bytes.
            </value>
      <remarks>
        <para>The GDI convention is the number of bytes per line is a multiple of 4 bytes and the extra padding data is unused.
            But it is possible some cards might not want padding so you can use this property to indicate that.
            You have to calculate this value from the width of the line that is passed as the second parameter to the
            <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction">RasterImagePaintCallbackFunction.GetDibInfoCallback</see> callback.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintDibInfo" />.
            </example>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintCallbacks">
      <summary>
            The <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class is used to implement custom painting. The <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see>
            property contains a list of such classes.
            </summary>
      <keywords>Paint|GrayScale Paint|Custom Paint</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class can contain one or more custom paint callbacks.</para>
        <para>The callbacks are used to 
            <list type="bullet"><item><description>Check whether the display adapter is compatible</description></item><item><description>Get information about the data expected by the display adapter</description></item><item><description>Do the actual painting</description></item><item><description>Initialize before and cleanup after the paint</description></item></list></para>
        <para>Typically, you would create a class for each display adapter you want to support
            and add them all to the <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see> list.
            The reason for needing a list is this: the computer running the application might have more
            than one monitor and more than one display adapter. The user can drag the window from one
            monitor to another so you should populate the <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see>
            list with all the custom paint objects compatible with the display adapters in the system.
            Or you can just add all the display adapters you can support since the overhead for having unnecessary
            callbacks in the list is low.</para>
        <para>Whenever the <see cref="T:Leadtools.RasterImage" /> object needs to paint, it searches through the
            <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see> list until it finds
            a compatible <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> object. If the list is empty or there is no
            compatible <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> object, the default paint functions are used.</para>
      </remarks>
      <example>
        <para>This C++ example will show the use of the <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see> property to
            implement custom callbacks.</para>
        <para>
          <b>For a full example source project that works with <a href="http://www.barco.com/">Barco</a> Display devices, please contact Technical Support.</b>
        </para>
        <code>
            /* Use GlobalAlloc instead of malloc to avoid some known errors 
               ("The string binding is invalid") when an application written in C++/CLI exits,
               These errors were supposed to be solved in Visual Studio 2005, 
               but we have encountered them during development.
            
               So we switched to using GlobalAlloc in order to avoid complicating the code 
               unnecessarily with workarounds for these Microsoft compiler problems.
            */
            
            /***************** Macros ********************/
            #define ALLOC(SIZE)           GlobalAllocPtr(GMEM_MOVEABLE, SIZE)
            #define FREE(PTR)             GlobalFreePtr(PTR)
            #define REALLOC(PTR, NEWSIZE) GlobalReAllocPtr(PTR, NEWSIZE, GMEM_MOVEABLE)
            
            #define DIB_WIDTH_BYTES(pixels) ((((pixels) + 31) &amp; ~31) &lt;&lt; 3)
            #define SAFE_FREE(PTR) { if(PTR) { FREE(PTR); (PTR) = NULL; } }
            #define GET_HIGHBIT(IMAGE, HIGHBIT) ((HIGHBIT) == -1 ? (IMAGE)-&lt;BitsPerPixel - 1 : (HIGHBIT))
            
            /* Hardcoded define that tells whether the LUT should be applied by the hardware or not.
               We are leaving it here to show you how you can choose whether to pay attention to the lookup table or not */
            #define IGNORELUT  TRUE
            
            using namespace System;
            using namespace Leadtools;
            using namespace Leadtools::Drawing;
            
            namespace GrayCallbacks
            {
               // This class will convert a grayscale bitmap to a 16-bit image which has the
               // image data in the low 12 bits.
               //
               // This type of image data can be be useful in painting to advanced 
               // medical display adapters that can display more than 256 shades of gray.
               //
               // One example of such display can be found at www.barco.com
               // 
               // This example will also show you how to implement your own function
               // for converting the image data. The built-in conversion function is capable of
               // performing this conversion, but we are implementing it as an example.
               public ref class MyRasterPaintCallbacks : public IDisposable
               {
                  public: MyRasterPaintCallbacks();
                  public: ~MyRasterPaintCallbacks();
                  public: !MyRasterPaintCallbacks();
            
                  // return a RasterPaintCallbacks class
                  public: RasterPaintCallbacks^ _rasterPaintCallbacks;
                  public: RasterPaintCallbacks^ GetRasterPaintCallbacks()
                  {
                     return _rasterPaintCallbacks;
                  };
            
                  // member variables needed for the painting operations. These are volatile and change for each paint call
                  unsigned char        *_LocalConvertBuffer;
                  unsigned int         _LocalConvertBufferSize;
            
                  // callbacks
                  public: Object^ IsCompatibleDCCallback(RasterImage^ image, array&gt;Object^&lt;^ args);
                  public: Object^ GetDibInfoCallback(RasterImage^ image, array&gt;Object^&lt;^ args);
                  public: Object^ ConvertLineCallback(RasterImage^ image, array&gt;Object^&lt;^ args);
                  public: Object^ StretchDIBitsCallback(RasterImage^ image, array&gt;Object^&lt;^ args);
                  public: Object^ PrePaintCallback(RasterImage^ image, array&gt;Object^&lt;^ args);
            
                  // internal functions
                  private: unsigned char *AllocateConvertBuffer(unsigned int uBytes);
               };
            
               MyRasterPaintCallbacks::MyRasterPaintCallbacks()
               {
                  _rasterPaintCallbacks = gcnew RasterPaintCallbacks();
            
                  PaintCallbackDelegate ^f;
                  
                  f = gcnew PaintCallbackDelegate(this, &amp;MyRasterPaintCallbacks::IsCompatibleDCCallback);
                  _rasterPaintCallbacks-&lt;SetCallback(RasterImagePaintCallbackFunction::IsCompatibleDCCallback, f);
            
                  f = gcnew PaintCallbackDelegate(this, &amp;MyRasterPaintCallbacks::GetDibInfoCallback);
                  _rasterPaintCallbacks-&lt;SetCallback(RasterImagePaintCallbackFunction::GetDibInfoCallback, f);
            
                  f = gcnew PaintCallbackDelegate(this, &amp;MyRasterPaintCallbacks::ConvertLineCallback);
                  _rasterPaintCallbacks-&lt;SetCallback(RasterImagePaintCallbackFunction::ConvertLineCallback, f);
            
                  f = gcnew PaintCallbackDelegate(this, &amp;MyRasterPaintCallbacks::StretchDIBitsCallback);
                  _rasterPaintCallbacks-&lt;SetCallback(RasterImagePaintCallbackFunction::StretchDIBitsCallback, f);
            
                  f = gcnew PaintCallbackDelegate(this, &amp;MyRasterPaintCallbacks::PrePaintCallback);
                  _rasterPaintCallbacks-&lt;SetCallback(RasterImagePaintCallbackFunction::PrePaintCallback, f);
               }
            
               // destructor - might not get called all the time
               MyRasterPaintCallbacks::~MyRasterPaintCallbacks()
               {
                  this-&lt;!MyRasterPaintCallbacks();
               }
            
               // finalizer - will always be called at some point
               MyRasterPaintCallbacks::!MyRasterPaintCallbacks()
               {
                  SAFE_FREE(_LocalConvertBuffer);
               }
            
               /* This function tells LEADTOOLS whether the HDC is for a compatible display device. 
                  If the display is not a compatible, the normal paint functions are used instead of my paint functions.
                  Since my advanced device is useful for rendering 12-bits of grayscale data, we will lie and say the 
                  device is not compatible if the image is not 12/16-bit grayscale.
            
                  Parameters:
                     Param0: HDC hdc
               */
               Object^ MyRasterPaintCallbacks::IsCompatibleDCCallback(RasterImage^ image, array&gt;Object^&lt;^ args)
               {
                  // we will reject images that are not grayscale because the regular GDI paint works for them
                  if((image-&lt;BitsPerPixel != 12 &amp;&amp; image-&lt;BitsPerPixel != 16 &amp;&amp; image-&lt;BitsPerPixel != 32) || image-&lt;Order != RasterByteOrder::Gray)
                     return false;
            
                  // also reject images that do not require at least 9-bits for painting
                  unsigned int uRequiredBits = GET_HIGHBIT(image, image-&lt;HighBit) - image-&lt;LowBit + 1;
            
                  if(uRequiredBits &gt;= 8)
                  {
                     // Console.Error.WriteLine("The image has only {0} bits, so I can use the regular paint functions", uRequiredBits);
                     return false;
                  }
            
                  // You should always receive one parameter (HDC)
                  if(args-&lt;Length != 1)
                     return false;
            
                  IntPtr hdcPtr = (IntPtr)args[0];
                  HDC   hdc = (HDC)hdcPtr.ToPointer();
                  // you need to replace this call to a check that determines whether this DC is compatible
                  if(!IsMyDevice(hdc))
                     return false;
            
                  /* Get information about your device here */
            
                  return true;
               }
            
               /* This function tells LEADTOOLS how the data expected by my displays looks like.
                  I will convert the data to 16-bits per pixel, with the image data in the low 12 bits.
                  
                  Parameters:
                     Param0: HDC hdc
                     Param1: unsigned int uWidth;
            
                  Returns
                     RasterPaintDibInfo
               */
               Object^ MyRasterPaintCallbacks::GetDibInfoCallback(RasterImage^ image, array&gt;Object^&lt;^ args)
               {
                  if(args-&lt;Length != 2 || image == nullptr)
                  {
                     throw gcnew RasterException(RasterExceptionCode::InvalidParameter);
                     return nullptr;
                  }
                  UInt32 uWidth = (UInt32)args[1];
                  RasterPaintDibInfo^ pDibInfo = gcnew RasterPaintDibInfo;
                  if(pDibInfo == nullptr)
                  {
                     throw gcnew RasterException(RasterExceptionCode::NoMemory);
                     return nullptr;
                  }
            
                  pDibInfo-&lt;Default();
                  pDibInfo-&lt;BitsPerPixel = 16;          // paint using 16-bit data, although there are only 12 significant bits
                  pDibInfo-&lt;PlaneCount = 1;             // One plane
                  pDibInfo-&lt;BytesPerLine = DIB_WIDTH_BYTES(uWidth * 16);   // bytes per line is a multiple of 4 bytes
                  // assume my display device expects the image data to be top-down, unlike the regular GDI
                  pDibInfo-&lt;ViewPerspective = RasterViewPerspective::TopLeft;
                  pDibInfo-&lt;Order = RasterByteOrder::Gray;         // gray bitmap
            
                  // indicate that the data should be in the low 12 bits
                  pDibInfo-&lt;Flags = RasterPaintDibInfoFlags::LowHighBitValid;
                  pDibInfo-&lt;LowBit = 0;
                  pDibInfo-&lt;HighBit = 11;
            
                  if(IGNORELUT)
                     pDibInfo-&lt;Flags |= RasterPaintDibInfoFlags::IgnoreLut; // Ignore the LUT during conversion if I use hardware LUT
            
                  return pDibInfo;
               }
            
               // allocate a convert buffer of at least nBytes
               unsigned char *MyRasterPaintCallbacks::AllocateConvertBuffer(unsigned int uBytes)
               {
                  if(_LocalConvertBufferSize &gt; uBytes)
                  {
                     unsigned char *pBuffer = (unsigned char *)REALLOC(_LocalConvertBuffer, uBytes);
                     if(!pBuffer)
                        return pBuffer;
                     _LocalConvertBuffer = pBuffer;
                     _LocalConvertBufferSize = uBytes;
                  }
                  return _LocalConvertBuffer;
               }
            
               /* callback function for converting data 
            
                  Parameters:
                     Param0:  L_UCHAR* pOutScan    = Buffer to be filled with the output data. The first bytes correspond to pixel 'nLeft' in the input buffer
                     Param1:  L_UCHAR* pInScan     = Buffer containing the data for a row. Data starts at pixel 0 and might have to be truncated
                     Param2:  int nLeft          = Offset of the first pixel that should be converted. (Number of pixels from pInScan that should be skipped before doing the conversion)
                     Param3:  int nRight         = Offset of the first pixel that should NOT be converted. nRight - 1 is the last pixel that should be converted
                     Param4:  RasterPaintDibInfo^ pDibInfo = structure describing the output image. This was filled by the GetDibInfoCallback delegate (GetDibInfoCallback in our case)
               */
               Object^ MyRasterPaintCallbacks::ConvertLineCallback(RasterImage^ image, array&gt;Object^&lt;^ args)
               {
                  if(args-&lt;Length != 5)
                     return RasterExceptionCode::InvalidParameter;
            
                  unsigned char *pOutScan = (unsigned char*)((safe_cast&gt;IntPtr&lt;(args[0])).ToPointer());
                  unsigned char *pInScan = (unsigned char*)((safe_cast&gt;IntPtr&lt;(args[1])).ToPointer());
                  int nLeft = (int)args[2];
                  int nRight = (int)args[3];
                  RasterPaintDibInfo^ pDibInfo = safe_cast&gt;RasterPaintDibInfo^&lt;(args[4]);
                  if(image == nullptr || pDibInfo == nullptr)
                     return RasterExceptionCode::NullPointer;
            
                  // allocate a larger buffer, just in case we need to round nLeft and nRight to a multiple of 2
                  unsigned char *pConvertBuffer = AllocateConvertBuffer(((nRight - nLeft + 2) * max(image-&lt;BitsPerPixel, 16) + 7) / 8);
                  if(pConvertBuffer == NULL)
                     return RasterExceptionCode::NoMemory;
            
                  int nLeftPixel = nLeft;
                  int nRightPixel = nRight;
                  if(image-&lt;BitsPerPixel == 12)
                  {
                     nLeftPixel &amp;= ~1; // round down to multiple of 2
                     nRightPixel = (nRightPixel + 1) &amp; ~1;
                     if(nRightPixel &lt; image-&lt;Width)
                        nRightPixel--;
                  }
                  int nRightOffset = (nRightPixel * image-&lt;BitsPerPixel + 7) &lt;&lt; 3;
                  int nLeftOffset = (nLeftPixel * image-&lt;BitsPerPixel) &lt;&lt; 3;
                  // copy all pixels to convert buffer
                  CopyMemory(pConvertBuffer, pInScan + nLeftOffset, nRightOffset - nLeftOffset);
            
                  // convert to full 16-bit gray range
                  RasterBufferConverter::Convert(IntPtr(pConvertBuffer), nRightPixel - nLeftPixel, image-&lt;BitsPerPixel, 16, image-&lt;Order, RasterByteOrder::Gray, 
                                       (pDibInfo-&lt;Flags &amp; RasterPaintDibInfoFlags::IgnoreLut) == RasterPaintDibInfoFlags::None ? image-&lt;GetLookupTable() : nullptr, nullptr,
                                       (pDibInfo-&lt;Flags &amp; RasterPaintDibInfoFlags::IgnoreLut) == RasterPaintDibInfoFlags::None ? image-&lt;GetLookupTable16() : nullptr, nullptr,
                                       image-&lt;PaintLowBit, image-&lt;PaintHighBit, 0, RasterConvertBufferFlags::SourceUseBits);
            
                  // convert the 16-bit buffer to pDibInfo-&lt;uLowBit..pDibInfo-&lt;uHighBit (if necessary)
                  if(pDibInfo-&lt;LowBit != 0 || pDibInfo-&lt;HighBit != 15)
                     RasterBufferConverter::Convert(IntPtr(pConvertBuffer), nRightPixel - nLeftPixel, 16, 16, RasterByteOrder::Gray, RasterByteOrder::Gray, 
                                       nullptr, nullptr, 
                                       pDibInfo-&lt;LowBit, pDibInfo-&lt;HighBit, 0, RasterConvertBufferFlags::DestinationUseBits);
            
                  // copy the data to the output buffer
                  CopyMemory(pOutScan, pConvertBuffer + (nLeft - nLeftPixel) * 2, (nRight - nLeft) * 2);
            
                  return RasterExceptionCode::Success;
               }
            
               /* callback function for implementing StretchDIBits. See the documentation for StretchDIBits for more info.
            
                  Parameters:
                     Param0:  HDC hdc
                     Param1:  int nXDest
                     Param2:  int nYDest
                     Param3:  int nDestWidth
                     Param4:  int nDestHeight
                     Param5:  int nXSrc
                     Param6:  int nYSrc
                     Param7:  int nSrcWidth
                     Param8:  int nSrcHeight
                     Param9:  const L_VOID* lpvBits = pointer to the DIB data (unmanaged)
                     Param10: const BITMAPINFO* lpbmi = pointer to the BITMAPINFO structure (unmanaged)
                     Param11: unsigned int fuColorUse
                     Param12: unsigned int32 ulROP3Code
               */
               Object^ MyRasterPaintCallbacks::StretchDIBitsCallback(RasterImage^ image, array&gt;Object^&lt;^ args)
               {
                  if(args-&lt;Length != 13)
                     return RasterExceptionCode::InvalidParameter;
            
                  // allocate it, since I can't put it on the stack
                  HDC                  hdc = (HDC)safe_cast&gt;IntPtr&lt;(args[0]).ToPointer();
                  int                  nXDest = (int)args[1];
                  int                  nYDest = (int)args[2];
                  int                  nDestWidth = (int)args[3];
                  int                  nDestHeight = (int)args[4];
                  int                  nXSrc = (int)args[5];
                  int                  nYSrc = (int)args[6];
                  int                  nSrcWidth = (int)args[7];
                  int                  nSrcHeight = (int)args[8];
                  const VOID*          lpvBits = (safe_cast&gt;IntPtr&lt;(args[9])).ToPointer();
                  const BITMAPINFO*    lpbmi = (BITMAPINFO *)(safe_cast&gt;IntPtr&lt;(args[10])).ToPointer();
                  unsigned int         fuColorUse = (unsigned int)args[11];
                  unsigned long        ulROP3Code = (unsigned int)args[12];
            
                  // replace this with a call to your device's StretchDIBits equivalent
                  return CallMyStretchDiBits( hdc, nXDest, nYDest, nDestWidth, nDestHeight, nXSrc, nYSrc, nSrcWidth, nSrcHeight,
                                       lpvBits, lpbmi, fuColorUse, ulROP3Code);
               }
            
               /* callback function preparing the paint
            
                  Parameters:
                     Param0:  HDC hdc
                     Param1:  LPRECT prcDestClip
               */
               Object^ MyRasterPaintCallbacks::PrePaintCallback(RasterImage^ image, array&gt;Object^&lt;^ args)
               {
                  if(args-&lt;Length != 2)
                     return RasterExceptionCode::InvalidParameter;
            
                  HDC hdc = (HDC)(safe_cast&gt;IntPtr&lt;(args[0])).ToPointer();
                  LPRECT prcDestClip = (LPRECT)(safe_cast&gt;IntPtr&lt;(args[1])).ToPointer();
            
                  /* Do any initialization needed by your device */
            
                  return RasterExceptionCode::Success;
               }
            }
            </code>
      </example>
      <seealso cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.Drawing.RasterPaintCallbacks.#ctor">
      <summary>
            Constructs a new <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> class.
            </summary>
      <remarks>
        <para>After you create the class, add your callbacks using the <see cref="M:Leadtools.Drawing.RasterPaintCallbacks.SetCallback(Leadtools.Drawing.RasterImagePaintCallbackFunction,Leadtools.Drawing.PaintCallbackDelegate)" /> method.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see>.
            </example>
      <seealso cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.Drawing.RasterPaintCallbacks.SetCallback(Leadtools.Drawing.RasterImagePaintCallbackFunction,Leadtools.Drawing.PaintCallbackDelegate)">
      <summary>
            Adds a callback to the <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see> member. 
            </summary>
      <param name="functionType">
        <para>The type of callback to add.</para>
        <para>This parameter must be one of the <see cref="T:Leadtools.Drawing.RasterImagePaintCallbackFunction" /> enumeration.</para>
      </param>
      <param name="functionPointer">
        <para>The callback function.</para>
      </param>
      <remarks>
        <para>This method sets a particular callback. If you wish to remove a callback pass null
            (Nothing in VB) as <paramref name="functionPointer" /> parameter.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">RasterPaintProperties.PaintCallbacks</see>.
            </example>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintDisplayModeFlags">
      <summary>
            Contains value that controls the speed, quality, and style of painting operations.
            </summary>
      <remarks>
        <para>Not used with GDI+ paint engine.</para>
        <para>This enumeration provides value for the
            <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintDisplayMode">RasterPaintProperties.PaintDisplayMode</see> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.OrderedDither">
      <summary>
            Enables or disables ordered dithering when painting. Ordered dithering is faster than the default dithering method,
            which uses error diffusion, but the quality of the image is not as good.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.FastPaint">
      <summary>
            Enables or disables fast painting. Fast painting should be performed only if the current video driver is good, and the
            image does not need to be dithered or resized to paint.  No safety check for a faulty driver is performed.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.IndexedPaint">
      <summary>
            Enables or disables painting that is mapped directly to the selected palette. You can this and let Windows do color 
            matching between the paint palette and the selected palette. Indexed painting uses the colors from the currently 
            selected palette. It is not used if the image is not palletized.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.DitheredPaint">
      <summary>
            Enables or disables painting that is mapped directly to the selected palette. This is enabled by default; you can set
            this flag to disable it and let Windows do color matching between the paint palette and the selected palette.
            Indexed painting uses the colors from the currently selected palette. It is not used if the image is not palletized.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.ScaleToGray">
      <summary>
            (Document/Medical  only) Enables grayscaling of 1-bit images when they are displayed. This improves the readability of
            the images when they are zoomed in or zoomed out, but it slows down the display.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.HalftonePrint">
      <summary>
            Enables use of the printing halftone (rather than the viewing halftone) when painting to a 1-bit device.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.FavorBlack">
      <summary>
            (Document/Medical  only) Enables a bias in preserving black objects when displaying zoomed-out 1-bit images. This can
            prevent the disappearance of fine lines and details, but it slows down the display.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.FixedPalette">
      <summary>
            Enables the LEAD Fixed palette when displaying 24-bit (or greater) images on 8-bit (or less) devices.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.NetscapePalette">
      <summary>
            Enables the Netscape Fixed palette when displaying 24-bit (or greater) images on 8-bit (or less) devices.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.Resample">
      <summary>
            Enables resample resize when displaying images at zoom factors other than 1:1.
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintDisplayModeFlags.Bicubic">
      <summary>
            Enables bicubic resize when displaying images at zoom factors other than 1:1.
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintEngine">
      <summary>
            Indicates the painting engine to use when rendering images using the Windows GDI or GDI+ engines..
            </summary>
      <remarks>
        <para>When the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> engine is used, the <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> method
            internally will call the Win32 API functions to paint the image.</para>
        <para>When the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> engine is used, the
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> method internally will call GDI+ <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)">Graphics.DrawImage</see> methods to paint the image. Note
            that if the <see cref="T:Leadtools.RasterImage" /> object is not fully compatible with GDI+, the framework will internally make a copy of parts of the image data (bands) and paints them
            to the destination device. The original data is not converted and no changes will be made to the original image.</para>
        <para>Choosing a paint engine depends on the <see cref="T:Leadtools.RasterImage" /> object and your specific needs:
            <list type="bullet"><item><description><see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> is generally faster than <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> since painting in Windows is faster
            using the Windows GDI is faster than using GDI+.
            </description></item><item><description>
            If you need to use GDI+ specific features (for example, if the <see cref="T:Leadtools.RasterImage" /> has a transparent color or is a 32-bit image with an alpha channel), then use
            <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see>. <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> does not support transparency nor painting the alpha channel
            values of an image.
            </description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintEngine.Gdi">
      <summary>
            Use Windows GDI when painting <see cref="T:Leadtools.RasterImage" /> objects
            </summary>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintEngine.GdiPlus">
      <summary>
            Use Windows GDI+ when painting <see cref="T:Leadtools.RasterImage" /> objects
            </summary>
    </member>
    <member name="T:Leadtools.Drawing.RasterPaintProperties">
      <summary>
            Controls the speed, quality, and style used when painting a <see cref="T:Leadtools.RasterImage" /> object using the Windows GDI or GDI+ engines.
            </summary>
      <remarks>
        <para>
            The various <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> method overloads require an instance of
            <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> to be passed.  The members of the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> controls
            the speed, quality, and style used when painting.
            </para>
      </remarks>
      <example>
        <para>
          <para>The following example creates a Windows form with various controls to show different <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> options.</para>
        </para>
        <code lang="VB">      Public Sub RasterPaintPropertiesExample()
         ' Create the form 
         Dim form As New PaintPropertiesForm()
         form.ShowDialog()
      End Sub

      Class PaintPropertiesForm
         Inherits Form
         Private index As Integer = 0
         Private rasterImage As RasterImage
         Private paintProperties As RasterPaintProperties

         Public Sub New()
            Text = "GDI paint engine - normal - Double click to show next RasterPaintProperties options"
            SetStyle(ControlStyles.ResizeRedraw, True)
            SetStyle(ControlStyles.AllPaintingInWmPaint, True)
            SetStyle(ControlStyles.OptimizedDoubleBuffer, True)
            SetStyle(ControlStyles.UserPaint, True)

            ' Load an image 
            Dim fileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"

            Using codecs As New RasterCodecs()
               codecs.ThrowExceptionsOnInvalidImages = True
               rasterImage = codecs.Load(fileName)
            End Using

            paintProperties = RasterPaintProperties.Default

            ' Start with GDI paint engine and normal paint scaling
            paintProperties.PaintEngine = RasterPaintEngine.Gdi
            paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.None
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
               If Not IsNothing(rasterImage) Then
                  rasterImage.Dispose()
               End If
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnDoubleClick(ByVal e As EventArgs)
            Select index
               Case 0
                  Text = "GDI paint engine - SourceAnd ROP - Double click to show next RasterPaintProperties options"
                  paintProperties.RasterOperation = RasterPaintProperties.SourceAnd

               Case 1
                  Text = "GDI paint engine - Scale to gray - Double click to show next RasterPaintProperties options"
                  paintProperties.RasterOperation = RasterPaintProperties.SourceCopy
                  paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.ScaleToGray

               Case 2
                  Text = "GDI+ paint engine - Double click to set the opacity"
                  paintProperties.PaintEngine = RasterPaintEngine.GdiPlus

               Case 3
                  Text = "GDI+ paint engine - Opacity set to 50% - Done"
                  paintProperties.Opacity = 128
            End Select

            index = index + 1
            Invalidate()
            MyBase.OnDoubleClick(e)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Paint the image 
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = rasterImage.CalculatePaintModeRectangle( _
               rasterImage.ImageWidth, _
               rasterImage.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            RasterImagePainter.Paint(rasterImage, e.Graphics, destRect, paintProperties)

            MyBase.OnPaint(e)
         End Sub
      End Class</code>
        <code lang="CS">      public void RasterPaintPropertiesExample()
      {
         // Create the form 
         PaintPropertiesForm form = new PaintPropertiesForm();
         form.ShowDialog();
      }

      class PaintPropertiesForm : Form
      {
         private int index = 0;
         private RasterImage rasterImage;
         private RasterPaintProperties paintProperties;

         public PaintPropertiesForm()
         {
            Text = "GDI paint engine - normal - Double click to show next RasterPaintProperties options";
            SetStyle(ControlStyles.ResizeRedraw, true);
            SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            SetStyle(ControlStyles.UserPaint, true);

            // Load an image 
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");

            using(RasterCodecs codecs = new RasterCodecs())
            {
               codecs.ThrowExceptionsOnInvalidImages = true;
               rasterImage = codecs.Load(fileName);
            }

            paintProperties = RasterPaintProperties.Default;

            // Start with GDI paint engine and normal paint scaling
            paintProperties.PaintEngine = RasterPaintEngine.Gdi;
            paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.None;
         }

         protected override void Dispose(bool disposing)
         {
            if(disposing)
            {
               if(rasterImage != null)
                  rasterImage.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnDoubleClick(EventArgs e)
         {
            switch(index)
            {
               case 0:
                  Text = "GDI paint engine - SourceAnd ROP - Double click to show next RasterPaintProperties options";
                  paintProperties.RasterOperation = RasterPaintProperties.SourceAnd;
                  break;

               case 1:
                  Text = "GDI paint engine - Scale to gray - Double click to show next RasterPaintProperties options";
                  paintProperties.RasterOperation = RasterPaintProperties.SourceCopy;
                  paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.ScaleToGray;
                  break;

               case 2:
                  Text = "GDI+ paint engine - Double click to set the opacity";
                  paintProperties.PaintEngine = RasterPaintEngine.GdiPlus;
                  break;

               case 3:
                  Text = "GDI+ paint engine - Opacity set to 50% - Done";
                  paintProperties.Opacity = 128;
                  break;

               default:
                  break;
            }

            index++;
            Invalidate();
            base.OnDoubleClick(e);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Paint the image 
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               rasterImage.ImageWidth,
               rasterImage.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            RasterImagePainter.Paint(rasterImage, e.Graphics, destRect, paintProperties);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterPaintProperties-->
      </example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.SourceCopy">
      <summary>
            Copies the source rectangle directly to the destination rectangle.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.SourcePaint">
      <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.SourceAnd">
      <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.SourceInvert">
      <summary>
            Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.SourceErase">
      <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.NotSourceCopy">
      <summary>
            Copies the inverted source rectangle to the destination.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.NotSourceErase">
      <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.MergeCopy">
      <summary>
            Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.MergePaint">
      <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.PatternCopy">
      <summary>
            Copies the brush currently selected in hdcDest, into the destination bitmap.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.PatternPaint">
      <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.PatternInvert">
      <summary>
            Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the Boolean XOR operator.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.DestinationInvert">
      <summary>
            Inverts the destination rectangle.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.Blackness">
      <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="F:Leadtools.Drawing.RasterPaintProperties.Whiteness">
      <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterPaintProperties.MakeRasterOperation(System.Int32,System.Int32)">
      <summary>
            Creates a ROP4 value from the specified foreground and background color values.
            </summary>
      <param name="fore">The foreground color.</param>
      <param name="back">The background color.</param>
      <returns>The ROP4 value.</returns>
      <remarks>
            You can use the <see cref="M:Leadtools.Drawing.RasterPaintProperties.MakeRasterOperation(System.Int32,System.Int32)" /> to create your own ROP4 values and pass them to the
            <see cref="P:Leadtools.Drawing.RasterPaintProperties.RasterOperation" /> property.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.Default">
      <summary>
            Returns a new instance of the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> structure with all members set to default values.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> structure that this property creates.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.RasterOperation">
      <summary>
            Gets or sets the ROP value.
            </summary>
      <value>An integer value that represents the ROP value.</value>
      <remarks>
        <para>Used only when <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintEngine" /> is set to <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see>.</para>
        <para>These codes define how the color data for the image is to be combined with the color data for the destination
            <see cref="T:System.Drawing.Graphics" /> to achieve the final color.</para>
        <para>The following list shows some common raster operation codes:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.SourceCopy" /></term><description>Copies the source rectangle directly to the destination rectangle</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.SourcePaint" /></term><description>Combines the colors of the source and destination rectangles by using the Boolean OR operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.SourceAnd" /></term><description>Combines the colors of the source and destination rectangles by using the Boolean AND operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.SourceInvert" /></term><description>Combines the colors of the source and destination rectangles by using the Boolean XOR operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.SourceErase" /></term><description>Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.NotSourceCopy" /></term><description>Copies the inverted source rectangle to the destination</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.NotSourceErase" /></term><description>Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.MergeCopy" /></term><description>Merges the colors of the source rectangle with the brush currently selected in hdcDest, by using the Boolean AND operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.MergePaint" /></term><description>Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.PatternCopy" /></term><description>Copies the brush currently selected in hdcDest, into the destination bitmap</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.PatternPaint" /></term><description>Combines the colors of the brush currently selected in hdcDest, with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.PatternInvert" /></term><description>Combines the colors of the brush currently selected in hdcDest, with the colors of the destination rectangle by using the Boolean XOR operator</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.DestinationInvert" /></term><description>Inverts the destination rectangle</description></item><item><term><see cref="F:Leadtools.Drawing.RasterPaintProperties.Blackness" /></term><description>Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette)</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.UsePaintPalette">
      <summary>
            Enables or disables automatically using the <see cref="T:Leadtools.RasterImage" /> object palette when displaying the image.
            </summary>
      <value>true to automatically use the <see cref="T:Leadtools.RasterImage" /> object palette, false to ignore it.</value>
      <remarks>
        <para>Used only when <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintEngine" /> is set to <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see>.</para>
        <para>Set this to true to automatically cause the paint methods to use the <see cref="T:Leadtools.RasterImage" /> palette if it has any.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.PaintEngine">
      <summary>
            Gets and sets the paint engine to use when displaying images.
            </summary>
      <value>A <see cref="T:Leadtools.Drawing.RasterPaintEngine" /> enumeration value that specifies the paint engine to use when displaying images.</value>
      <keywords>RasterPaintEngine property|GDI|GDI+|Keeping 16-bit images at 16-bits when loaded in the viewer|Converting|Converting 16-bit images to 24 bits</keywords>
      <remarks>
        <para>When the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> engine is used, the 
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> method
            calls the Win32 API functions internally to paint the image.</para>
        <para>When the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> engine is used, the
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> method calls
            GDI+ <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)">Graphics.DrawImage</see> methods internally to paint the image. Note
            that if the <see cref="T:Leadtools.RasterImage" /> object is not fully compatible with GDI+, the framework makes a copy of parts of the 
            image data (bands) internally and paints them
            to the destination device. The original data is not converted and no changes will be made to the original image.</para>
        <para>Choosing a paint engine depends on the <see cref="T:Leadtools.RasterImage" /> object and your specific needs:
            <list type="bullet"><item><description><see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> is generally faster than <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> since painting in Windows is faster
            using the Windows GDI is faster than using GDI+.
            </description></item><item><description>
            If you need to use GDI+ specific features (for example, if the <see cref="T:Leadtools.RasterImage" /> has a transparent color or is a 32-bit image with an alpha channel), then use
            <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see>. <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see> does not support transparency nor painting the alpha channel
            values of an image.
            </description></item></list></para>
        <para>When the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> engine is used,
            the following properties are ignored when painting images:
            <list type="table"><listheader><term>Property</term><description>Notes</description></listheader><item><term><see cref="P:Leadtools.Drawing.RasterPaintProperties.RasterOperation" /></term><description>Raster operations (ROP) are not supported in GDI+</description></item><item><term><see cref="P:Leadtools.Drawing.RasterPaintProperties.UsePaintPalette" /></term><description>Palette is automatically used.</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.PaintDisplayMode">
      <summary>
            Gets and sets options that control the speed, quality, and style of painting operations.
            </summary>
      <keywords>Scale To Gray|Favor Black|ScaleToGray|FavorBlack|Bitonal Scaling|Paint Scaling</keywords>
      <value>A combination of the <see cref="T:Leadtools.Drawing.RasterPaintDisplayModeFlags" /> enumeration members that control the speed,
            quality, and style of painting operations.</value>
      <remarks>
        <para>Used only when <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintEngine" /> is set to <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.Opacity">
      <summary>
            Gets or sets a value that indicates the opacity to use when painting the <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <value>A value between 0 and 255 representing the opacity level to use when painting the <see cref="T:Leadtools.RasterImage" />. Default value is 255.</value>
      <remarks>
        <para>An <see cref="P:Leadtools.Drawing.RasterPaintProperties.Opacity" /> value of 0 indicates that the image is completely transparent, while a value of 255 indicates that the image is
            completely opaque. A value of 128 indicates the image is 50 percent opaque, a value of 170 indicates the image is 72.5 percent opaque, and so on.</para>
        <para>This property is only valid when the <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.GdiPlus</see> engine is used and has no effect on the
            other engines.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks">
      <summary>
            Gets the list of <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> objects containing the custom callbacks.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>A list of <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" /> objects containing custom callbacks.</value>
      <remarks>
        <para>You add or remove custom callbacks using the members of the .NET <see cref="T:System.Collections.Generic.IList`1" />,
            <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces.</para>
        <para>If your callbacks are using unmanaged memory, it is recommended you
            clear the <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks" /> list and dispose of your class when you no longer use the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> object.</para>
        <para>The <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintCallbacks" /> list is always valid, even if the list is empty. So you do not need to check whether it is null.</para>
      </remarks>
      <example>
            For a C++ example, refer to <see cref="T:Leadtools.Drawing.RasterPaintCallbacks" />.
            </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="T:Leadtools.Drawing.RasterImageConverter">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to and from GDI and GDI+ image objects.
            </summary>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterImage">RasterImage</see> class provides platform-independent representation of an image. It serves as a working area
            for image manipulation and conversion. LEADTOOLS functions use this class for accessing the image in memory and for maintaining the characteristics of the
            image. This class contains the functionality for converting a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to and from a Windows GDI or GDI+ image objects.</para>
        <para>The <see cref="T:Leadtools.Drawing.RasterImageConverter" /> class contains the following functionality:</para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)">ConvertToImage</see>
            </term>
            <description>
              <para>Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)">ConvertFromImage</see>
            </term>
            <description>
              <para>Converts a GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see> to LEADTOOLS <see cref="T:Leadtools.RasterImage" /></para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToImage(Leadtools.RasterImage,Leadtools.Drawing.ChangeToImageOptions)">ChangeToImage</see>
            </term>
            <description>
              <para>Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see> sharing the same memory.</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.MakeCompatible(Leadtools.RasterImage,System.Drawing.Imaging.PixelFormat,System.Boolean)">MakeCompatible</see>
            </term>
            <description>
              <para>Makes a <see cref="T:Leadtools.RasterImage" /> pixel and color format compatible with GDI+</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)">TestCompatible</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.GetNearestBitsPerPixel(System.Drawing.Imaging.PixelFormat)">GetNearestBitsPerPixel</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.IsValidBitsPerPixel(System.Int32)">IsValidBitsPerPixel</see> and <see cref="M:Leadtools.Drawing.RasterImageConverter.GetNearestPixelFormat(Leadtools.RasterImage)">GetNearestPixelFormat</see></term>
            <description>
              <para>Utility methods for testing and making a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> GDI+ compatible</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)">FromHBitmap</see> and <see cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)">ToHBitmap</see></term>
            <description>
              <para>Converts a <see cref="T:Leadtools.RasterImage" /> to and from a GDI DDB (Device Dependant Bitmap)</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)">ChangeFromHBitmap</see> and <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)">ChangeToHBitmap</see></term>
            <description>
              <para>Converts a <see cref="T:Leadtools.RasterImage" /> to and from a GDI DDB (Device Dependant Bitmap) while sharing the same memory</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</see> and <see cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</see></term>
            <description>
              <para>Converts a <see cref="T:Leadtools.RasterImage" /> to and from a Windows Metafile or Enhanced Metafile</para>
            </description>
          </item>
          <item>
            <term>
              <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)">ChangeToWmf</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromWmf</see>, <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)">ChangeToEmf</see> and <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromEmf</see></term>
            <description>
              <para>Converts a <see cref="T:Leadtools.RasterImage" /> to and from a Windows Metafile or Enhanced Metafile while sharing the same memory</para>
            </description>
          </item>
        </list>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterImageConverterExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "GdiPlusImage.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "RasterImage.bmp")

         ' Load a RasterImage, convert to GDI+ image
         Using leadImage As RasterImage = codecs.Load(srcFileName)
            ' Convert to GDI+ image
            Using gdipImage As Image = RasterImageConverter.ConvertToImage(leadImage, ConvertToImageOptions.None)
               ' Save it to disk
               gdipImage.Save(destFileName1, ImageFormat.Bmp)
            End Using
         End Using

         ' Load a GDI+ image, convert to RasterImage
         Using gdipImage As Image = Image.FromFile(destFileName1)
            ' Convert to RasterImage
            Using leadImage As RasterImage = RasterImageConverter.ConvertFromImage(gdipImage, ConvertFromImageOptions.None)
               ' Save it to disk
               codecs.Save(leadImage, destFileName2, RasterImageFormat.Bmp, 0)
            End Using
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageConverterExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir,"GdiPlusImage.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "RasterImage.bmp");

         // Load a RasterImage, convert to GDI+ image
         using(RasterImage leadImage = codecs.Load(srcFileName))
         {
            // Convert to GDI+ image
            using(Image gdipImage = RasterImageConverter.ConvertToImage(leadImage, ConvertToImageOptions.None))
            {
               // Save it to disk
               gdipImage.Save(destFileName1, ImageFormat.Bmp);
            }
         }

         // Load a GDI+ image, convert to RasterImage
         using(Image gdipImage = Image.FromFile(destFileName1))
         {
            // Convert to RasterImage
            using(RasterImage leadImage = RasterImageConverter.ConvertFromImage(gdipImage, ConvertFromImageOptions.None))
            {
               // Save it to disk
               codecs.Save(leadImage, destFileName2, RasterImageFormat.Bmp, 0);
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)">
      <summary>
            Creates a new <see cref="T:Leadtools.RasterImage" /> from the specified Windows Device-Dependent Bitmap (DDB).
            </summary>
      <param name="hbitmap">Handle to the Windows DDB.</param>
      <param name="hpalette">Handle to the Windows palette. This value can be IntPtr.Zero if the DDB is dependent on
            a device that is greater than 8 bits, or if the image will use the system palette.</param>
      <returns>The newly create <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>
        <para />
        <code lang="VB">      &lt;DllImport("gdi32")&gt; _
      Private Shared Function CreatePalette(ByVal lplgpl As LOGPALETTE256) As IntPtr
      End Function
      &lt;DllImport("gdi32")&gt; _
      Private Shared Function DeleteObject(ByVal hObject As IntPtr) As Boolean
      End Function

      &lt;StructLayout(LayoutKind.Sequential, Pack:=1)&gt; _
      Private Class LOGPALETTE256
         Public palVersion As Short
         Public palNumEntries As Short
         &lt;MarshalAs(UnmanagedType.ByValArray, SizeConst:=1024)&gt; _
         Public palPalEntry() As Byte
      End Class


      Public Sub FromHBitmapExample()
         Dim codecs As New RasterCodecs()

         ' load image as 8-bit
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1)
            Dim hbitmap As IntPtr = IntPtr.Zero
            hbitmap = RasterImageConverter.ToHBitmap(image)

            Dim colors() As RasterColor

            Using btmp As New Bitmap(1, 1)
               Using g As Graphics = Graphics.FromImage(btmp)
                  colors = RasterImagePainter.GetPaintColors(image, g)
               End Using
            End Using

            Dim hPalette As IntPtr = IntPtr.Zero
            If Not IsNothing(colors) AndAlso colors.Length &lt;= 256 Then
               Dim log As New LOGPALETTE256()
               log.palVersion = &amp;H300
               log.palNumEntries = CType(colors.Length, Short)
               ReDim log.palPalEntry(1023)

               Dim index As Integer = 0
               For i As Integer = 0 To colors.Length - 1
                  log.palPalEntry(index + 0) = colors(i).R
                  log.palPalEntry(index + 1) = colors(i).G
                  log.palPalEntry(index + 2) = colors(i).B
                  log.palPalEntry(index + 3) = 0
                  index = index + 4
               Next

               hPalette = CreatePalette(log)
            End If

            Using destinationImage As RasterImage = RasterImageConverter.FromHBitmap(hbitmap, hPalette)
               codecs.Save(destinationImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromHBitmap.bmp"), RasterImageFormat.Bmp, 0)
            End Using

            If hPalette &lt;&gt; IntPtr.Zero Then
               DeleteObject(hPalette)
            End If

            DeleteObject(hbitmap)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      [DllImport("gdi32")]
      private static extern IntPtr CreatePalette(LOGPALETTE256 lplgpl);
      [DllImport("gdi32")]
      private static extern bool DeleteObject(IntPtr hObject);
      [StructLayout(LayoutKind.Sequential, Pack = 1)]
      private class LOGPALETTE256
      {
         public short palVersion;
         public short palNumEntries;
         [MarshalAs(UnmanagedType.ByValArray, SizeConst = 1024)]
         public byte[] palPalEntry;
      }


      public void FromHBitmapExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // load image as 8-bit
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1))
         {
            IntPtr hbitmap = IntPtr.Zero;
            hbitmap = RasterImageConverter.ToHBitmap(image);

            RasterColor[] colors;

            using(Bitmap btmp = new Bitmap(1, 1))
            {
               using(Graphics g = Graphics.FromImage(btmp))
               {
                  colors = RasterImagePainter.GetPaintColors(image, g);
               }
            }

            IntPtr hPalette = IntPtr.Zero;
            if(colors != null &amp;&amp; colors.Length &lt;= 256)
            {
               LOGPALETTE256 log = new LOGPALETTE256();
               log.palVersion = 0x300;
               log.palNumEntries = (short)colors.Length;
               log.palPalEntry = new byte[1024];

               int index = 0;
               for(int i = 0; i &lt; colors.Length; i++)
               {
                  log.palPalEntry[index++] = colors[i].R;
                  log.palPalEntry[index++] = colors[i].G;
                  log.palPalEntry[index++] = colors[i].B;
                  log.palPalEntry[index++] = 0;
               }

               hPalette = CreatePalette(log);
            }

            using(RasterImage destinationImage = RasterImageConverter.FromHBitmap(hbitmap, hPalette))
            {
               codecs.Save(destinationImage,Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromHBitmap.bmp"), RasterImageFormat.Bmp, 0);
            }

            if(hPalette != IntPtr.Zero)
            {
               DeleteObject(hPalette);
            }

            DeleteObject(hbitmap);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.FromHBitmap-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
            Creates a new <see cref="T:Leadtools.RasterImage" /> from the specified Windows Device-Dependent Bitmap (DDB).
            </summary>
      <param name="hdc">Handle to the Windows device context responsible for the conversion. The mapping mode of the device
            context must be MM_TEXT.</param>
      <param name="hbitmap">Handle to the Windows DDB.</param>
      <param name="hpalette">Handle to the Windows palette. This value can be IntPtr.Zero if the DDB is dependent on
            a device that is greater than 8 bits, or if the image will use the system palette.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <keywords>DDB|Windows Device-Dependent Bitmaps|Device-Dependent Bitmaps</keywords>
      <remarks>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)">
      <summary>
            Creates a Windows Device-Dependent Bitmap (DDB) from a <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <param name="image">The source image</param>
      <returns>A handle to the Windows DDB this method creates.</returns>
      <br />
      <remarks>
        <para>Converts a <see cref="T:Leadtools.RasterImage" /> object into a Windows device-dependent bitmap (DDB). When this method is
            completed, there are two copies of the image in memory: the DDB and the original <see cref="T:Leadtools.RasterImage" />. Freeing one
            does not affect the other.</para>
        <para>
          <strong>NOTE:</strong> This method returns the data in an unmanaged handle. The caller is responsible for freeing the DDB's handle when it is no longer needed using the  <strong>DeleteObject</strong> Windows API. Otherwise, your application will leak resources.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.IntroductionDIBsDDBsAndTheClipboard">Introduction: DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage,System.IntPtr)">
      <summary>
            Creates a Windows Device-Dependent Bitmap (DDB) from a <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <param name="image">The source image</param>
      <param name="hdc">Handle to the Windows device responsible for the conversion. The mapping mode of the device context
            must be MM_TEXT.</param>
      <returns>A handle to the Windows DDB this method creates.</returns>
      <keywords>DDB|Windows Device-Dependent Bitmaps|Device-Dependent Bitmaps</keywords>
      <remarks>
        <para>Converts a <see cref="T:Leadtools.RasterImage" /> object into a Windows device dependent bitmap (DDB). When this method is
            completed, there are two copies of the image in memory: the DDB and the original <see cref="T:Leadtools.RasterImage" />. Freeing one
            will not affect the other.</para>
        <para>
          <strong>NOTE:</strong> This method returns the data in an unmanaged handle. The caller is responsible for freeing the DDB's handle when it is no longer needed using the the <strong>DeleteObject</strong> Windows API, otherwise, your application will leak resources.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)">
      <summary>
            Changes a Windows Device-Dependent Bitmap (DDB) to a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <keywords>DDB|DIB|Device independent bitmap|Device dependent bitmap|Palettes|Clipboards|Copying|Pasting</keywords>
      <param name="hbitmap">Handle to the DDB to be changed.</param>
      <param name="hpalette">Handle to the palette. This value can be IntPtr.Zero if the <paramref name="hbitmap" /> parameter refers to a bitmap that is greater than 8 bits,
            or if the bitmap will use the system palette.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates the DDB (hbitmap) handle.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
            Changes a Windows Device-Dependent Bitmap (DDB) to a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="hdc">Handle to the device responsible for the conversion. The mapping mode of the device context must be MM_TEXT.</param>
      <param name="hbitmap">Handle to the DDB to be changed.</param>
      <param name="hpalette">Handle to the palette. This value can be IntPtr.Zero if the <paramref name="hdc" /> parameter refers to a device that is greater than 8 bits,
            or if the bitmap will use the system palette.</param>
      <returns>The newly create <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates the DDB (hbitmap) handle.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)">
      <summary>
            Changes a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object to a Windows Device-Dependent Bitmap (DDB).
            </summary>
      <param name="image">The source image.</param>
      <keywords>DDB|DIB|Device independent bitmap|Device dependent bitmap</keywords>
      <returns>A handle to the device dependent bitmap (DDB) this method creates.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates 
            this <see cref="T:Leadtools.RasterImage" /> object. You must call <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see>
            after calling this method.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage)" />.</example>
      <example>
        <para>
          <para>This example loads a <see cref="T:Leadtools.RasterImage" />, changes it to a DDB and then changes it back to <see cref="T:Leadtools.RasterImage" />.</para>
        </para>
        <code lang="VB">      Public Sub ChangeToHBitmapExample()
         Dim codecs As New RasterCodecs()

         Dim hbitmap As IntPtr

         ' Load an image
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Change to DDB
            hbitmap = RasterImageConverter.ChangeToHBitmap(image)

            ' Dispose the image since it is unusable now
         End Using

         ' Change the DDB to a new LEAD RasterImage
         Using image As RasterImage = RasterImageConverter.ChangeFromHBitmap(hbitmap, IntPtr.Zero)
            ' Save this image back to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeToHBitmap.bmp"), RasterImageFormat.Bmp, 24)
         End Using

         DeleteObject(hbitmap)

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangeToHBitmapExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr hbitmap;

         // Load an image
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Change to DDB
            hbitmap = RasterImageConverter.ChangeToHBitmap(image);

            // Dispose the image since it is unusable now
         }

         // Change the DDB to a new LEAD RasterImage
         using(RasterImage image = RasterImageConverter.ChangeFromHBitmap(hbitmap, IntPtr.Zero))
         {
            // Save this image back to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeToHBitmap.bmp"), RasterImageFormat.Bmp, 24);
         }

         DeleteObject(hbitmap);

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.ChangeToHBitmap-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)">
      <summary>
            Changes a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object to a Windows Device-Dependent Bitmap (DDB).
            </summary>
      <keywords>DDB|DIB|Device independent bitmap|Device dependent bitmap|Device context|DC</keywords>
      <param name="image">The source image.</param>
      <param name="hdc">Handle to the device responsible for the conversion. The mapping mode of the device context must be MM_TEXT.</param>
      <returns>A handle to the device dependent bitmap (DDB) this method creates.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates 
            this <see cref="T:Leadtools.RasterImage" /> object. You must call <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after calling this method.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)">RasterImage.FromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">RasterImage.ToDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">RasterImage.ChangeFromDib</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">RasterImage.ChangeToDib</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Changes a Windows Enhanced Metafile (EMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object and, if successful, frees the Enhanced Metafile.
            </summary>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles|WMF</keywords>
      <param name="hemf">Handle to the EMF to be changed.</param>
      <param name="width">Amount by which to scale the enhanced metafile's original width.</param>
      <param name="height">Amount by which to scale the enhanced metafile's original height.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, use
            <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">ChangeFromEmf(hemf, width, height, backColor)</see>.</para>
        <para>If this method is successful, <paramref name="hemf" /> is freed.</para>
        <para>The enhanced metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the enhanced metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">ChangeFromEmf(hemf, width, height, backColor)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example><para><para>This example loads a <see cref="T:Leadtools.RasterImage" />, converts it to a EMF, then converts the EMF back to a <see cref="T:Leadtools.RasterImage" />.</para></para><code lang="VB">      Public Sub ChangeFromEmfExample()
         Dim codecs As New RasterCodecs()

         Dim hemf As IntPtr

         ' Load an image
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Change to EMF
            hemf = RasterImageConverter.ChangeToEmf(image)
         End Using

         ' Convert the EMF back to a RasterImage preserving the size
         Using image As RasterImage = RasterImageConverter.ChangeFromEmf(hemf, 0, 0)
            ' Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeToEmf.bmp"), RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      public void ChangeFromEmfExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr hemf;

         // Load an image
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Change to EMF
            hemf = RasterImageConverter.ChangeToEmf(image);
         }

         // Convert the EMF back to a RasterImage preserving the size
         using(RasterImage image = RasterImageConverter.ChangeFromEmf(hemf, 0, 0))
         {
            // Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeToEmf.bmp"), RasterImageFormat.Bmp, 24);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterImageConverter.ChangeFromEmf--></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Changes a Windows Enhanced Metafile (EMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object and, if successful, frees the Enhanced Metafile.
            </summary>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles|WMF</keywords>
      <param name="hemf">Handle to the EMF to be changed.</param>
      <param name="width">Amount by which to scale the enhanced metafile's original width.</param>
      <param name="height">Amount by which to scale the enhanced metafile's original height.</param>
      <param name="backColor">The color to use to fill the image area before painting the metafile objects.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, set the desired background color
            in the <paramref name="backColor" /> parameter.</para>
        <para>If this method is successful, <paramref name="hemf" /> is freed.</para>
        <para>The enhanced metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the enhanced metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromEmf(hemf, width, height)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromEmf(IntPtr, int, int)</see>.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Changes a Windows Metafile (WMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object and, if successful, frees the Metafile.
            </summary>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <param name="hwmf">Handle to the WMF to be changed.</param>
      <param name="width">Amount by which to scale the metafiles original width.</param>
      <param name="height">Amount by which to scale the metafiles original height.</param>
      <returns>The newly create <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, use
            <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">ChangeFromWmf(hemf, width, height, backColor)</see>.</para>
        <para>If this method is successful, <paramref name="hwmf" /> is freed.</para>
        <para>The metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">ChangeFromWmf(hemf, width, height, backColor)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example><para><para>This example loads a <see cref="T:Leadtools.RasterImage" />, converts it to a WMF, then converts the WMF back to a <see cref="T:Leadtools.RasterImage" />.</para></para><code lang="VB">      Public Sub ChangeFromWmfExample()
         Dim codecs As New RasterCodecs()

         Dim hwmf As IntPtr

         ' Load an image
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Change to WMF
            hwmf = RasterImageConverter.ChangeToWmf(image)
         End Using

         ' Convert the WMF back to a RasterImage preserving the size
         Using image As RasterImage = RasterImageConverter.ChangeFromWmf(hwmf, 0, 0)
            ' Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeFromWmf.bmp"), RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      public void ChangeFromWmfExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr hwmf;

         // Load an image
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Change to WMF
            hwmf = RasterImageConverter.ChangeToWmf(image);
         }

         // Convert the WMF back to a RasterImage preserving the size
         using(RasterImage image = RasterImageConverter.ChangeFromWmf(hwmf, 0, 0))
         {
            // Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_ChangeFromWmf.bmp"), RasterImageFormat.Bmp, 24);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterImageConverter.ChangeFromWmf--></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Changes a Windows Metafile (WMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object and, if successful, frees the Metafile.
            </summary>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <param name="hwmf">Handle to the WMF to be changed.</param>
      <param name="width">Amount by which to scale the metafiles original width.</param>
      <param name="height">Amount by which to scale the metafiles original height.</param>
      <param name="backColor">The color to use to fill the image area before painting the metafile objects.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, set the desired background color
            in the <paramref name="backColor" /> parameter.</para>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, use
            <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">ChangeFromWmf(hemf, width, height, backColor)</see>.</para>
        <para>If this method is successful, <paramref name="hwmf" /> is freed.</para>
        <para>The metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromWmf(hemf, width, height)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)">ChangeFromWmf(IntPtr, int, int)</see>.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Converts an Enhanced Windows Metafile (EMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles</keywords>
      <param name="hemf">Handle to the EMF to be converted.</param>
      <param name="width">Amount by which to scale the enhanced metafiles original width.</param>
      <param name="height">Amount by which to scale the enhanced metafiles original height.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, use
            <see cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">FromEmf(hemf, width, height, backColor)</see>.</para>
        <para> When this method is completed, there are two copies of the drawing in memory: the new <see cref="T:Leadtools.RasterImage" /> object and the original EMF. Freeing one will not affect the other.</para>
        <para>The enhanced metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the enhanced metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">FromEmf(hemf, width, height, backColor)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example><para><para>This example loads a <see cref="T:Leadtools.RasterImage" />, converts it to a EMF, then converts the EMF back to a <see cref="T:Leadtools.RasterImage" />.</para></para><code lang="VB">      &lt;DllImport("Gdi32", CharSet:=CharSet.Auto)&gt; _
      Private Shared Function DeleteEnhMetaFile(ByVal hemf As IntPtr) As Integer
      End Function

      Public Sub FromEmfExample()
         Dim codecs As New RasterCodecs()

         Dim hemf As IntPtr

         ' Load an image
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Convert it to EMF
            hemf = RasterImageConverter.ToEmf(image)

            ' Note, since we converted to an EMF we have two copies of the image in memory and "image" is still usable
         End Using

         ' Convert the EMF back to a RasterImage preserving the size
         Using image As RasterImage = RasterImageConverter.FromEmf(hemf, 0, 0)
            ' Not since we converted from the EMF, we need to delete it ourselves
            DeleteEnhMetaFile(hemf)

            ' Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromEmf.bmp"), RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      [DllImport("Gdi32", CharSet = CharSet.Auto)]
      private static extern int DeleteEnhMetaFile(IntPtr hemf);

      public void FromEmfExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr hemf;

         // Load an image
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Convert it to EMF
            hemf = RasterImageConverter.ToEmf(image);

            // Note, since we converted to an EMF we have two copies of the image in memory and "image" is still usable
         }

         // Convert the EMF back to a RasterImage preserving the size
         using(RasterImage image = RasterImageConverter.FromEmf(hemf, 0, 0))
         {
            // Not since we converted from the EMF, we need to delete it ourselves
            DeleteEnhMetaFile(hemf);

            // Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromEmf.bmp"), RasterImageFormat.Bmp, 24);
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterImageConverter.FromEmf--></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Converts an Enhanced Windows Metafile (EMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles</keywords>
      <param name="hemf">Handle to the EMF to be converted.</param>
      <param name="width">Amount by which to scale the enhanced metafiles original width.</param>
      <param name="height">Amount by which to scale the enhanced metafiles original height.</param>
      <param name="backColor">The color to use to fill the image area before painting the metafile objects.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, set the desired background color
            in the <paramref name="backColor" /> parameter.</para>
        <para> When this method is completed, there are two copies of the drawing in memory: the new <see cref="T:Leadtools.RasterImage" /> object and the original EMF. Freeing one will not affect the other.</para>
        <para>The enhanced metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the enhanced metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the enhanced metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32)">FromEmf(hemf, width, height)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32)">FromEmf(IntPtr, int, int)</see>.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32)">
      <summary>
            Converts a Windows Metafile (WMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <param name="hwmf">Handle to the WMF to be converted.</param>
      <param name="width">Amount by which to scale the metafile's original width.</param>
      <param name="height">Amount by which to scale the metafile's original height.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, use
            <see cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">FromWmf(hemf, width, height, backColor)</see>.</para>
        <para> When this method is completed, there are two copies of the drawing in memory: the new <see cref="T:Leadtools.RasterImage" /> object and the original WMF. Freeing one will not affect the other.</para>
        <para>The metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">FromWmf(hemf, width, height, backColor)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example><para><para>This example loads a <see cref="T:Leadtools.RasterImage" />, converts it to a WMF, then converts the WMF back to a <see cref="T:Leadtools.RasterImage" />.</para></para><code lang="VB">      &lt;DllImport("Gdi32", CharSet:=CharSet.Auto)&gt; _
      Private Shared Function DeleteMetaFile(ByVal hwmf As IntPtr) As Integer
      End Function

      Public Sub FromWmfExample()
         Dim codecs As New RasterCodecs()

         Dim hwmf As IntPtr

         ' Load an image
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Convert it to WMF
            hwmf = RasterImageConverter.ToWmf(image)

            ' Note, since we converted to an WMF we have two copies of the image in memory and "image" is still usable
         End Using

         ' Convert the WMF back to a RasterImage preserving the size
         Using image As RasterImage = RasterImageConverter.FromWmf(hwmf, 0, 0)
            ' Not since we converted from the WMF, we need to delete it ourselves
            DeleteMetaFile(hwmf)

            ' Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromWmf.bmp"), RasterImageFormat.Bmp, 24)
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      [DllImport("Gdi32", CharSet = CharSet.Auto)]
      private static extern int DeleteMetaFile(IntPtr hwmf);

      public void FromWmfExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr hwmf;

         // Load an image
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Convert it to WMF
            hwmf = RasterImageConverter.ToWmf(image);

            // Note, since we converted to an WMF we have two copies of the image in memory and "image" is still usable
         }

         // Convert the WMF back to a RasterImage preserving the size
         using(RasterImage image = RasterImageConverter.FromWmf(hwmf, 0, 0))
         {
            // Not since we converted from the WMF, we need to delete it ourselves
            DeleteMetaFile(hwmf);

            // Save it to disk
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromWmf.bmp"), RasterImageFormat.Bmp, 24);

         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterImageConverter.FromWmf--></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>
            Converts a Windows Metafile (WMF) into a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <param name="hwmf">Handle to the WMF to be converted.</param>
      <param name="width">Amount by which to scale the metafile's original width.</param>
      <param name="height">Amount by which to scale the metafile's original height.</param>
      <param name="backColor">The color to use to fill the image area before painting the metafile objects.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Some metafiles do not have a background color, and hence, when the metafile is used to create a <see cref="T:Leadtools.RasterImage" /> object, the area not covered by the metafile objects
            will contain the default image background color (black). To create a raster image from a metafile like this with a specific background color, set the desired background color
            in the <paramref name="backColor" /> parameter.</para>
        <para> When this method is completed, there are two copies of the drawing in memory: the new <see cref="T:Leadtools.RasterImage" /> object and the original WMF. Freeing one will not affect the other.</para>
        <para>The metafile can be loaded at the original dimension or scaled by using the <paramref name="width" /> and <paramref name="height" /> parameters.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> == 0 - the metafile is loaded at the size present in the file.</para>
        <para>If <paramref name="width" /> == 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the height <paramref name="height" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> == 0 - the metafile is stretched so that it has the width <paramref name="width" /> (preserving the aspect ratio).</para>
        <para>If <paramref name="width" /> &gt; 0 and <paramref name="height" /> &gt; 0 - the metafile is stretched so that it has the width <paramref name="width" /> and height <paramref name="height" /> (the aspect ratio is ignored).</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32)">FromWmf(hemf, width, height)</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32)">FromWmf(IntPtr, int, int)</see>.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)">
      <summary>
            Changes a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object into a Windows Enhanced Metafile (EMF) and, if successful, frees the image data.
            </summary>
      <param name="image">The source image.</param>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles</keywords>
      <returns>A handle to the Windows enhanced metafile (EMF) this method creates.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates this <see cref="T:Leadtools.RasterImage" /> object. You must call <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after calling this method.</para>
        <para>This method allocates an enhanced metafile bitmap and copies the <see cref="T:Leadtools.RasterImage" /> object to the enhanced metafile.</para>
        <para>When you no longer need the enhanced metafile, you can free it using the Windows <strong>DeleteEnhMetaFile</strong> function.</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)">
      <summary>
            Changes a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object into a Windows Metafile (WMF) and, if successful, frees the image data.
            </summary>
      <param name="image">The source image.</param>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <returns>A handle to the Windows metafile (WMF) this method creates.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates this <see cref="T:Leadtools.RasterImage" /> object. You must call <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> after calling this method.</para>
        <para>This method allocates an metafile bitmap and copies the <see cref="T:Leadtools.RasterImage" /> object to the metafile.</para>
        <para>When you no longer need the metafile, you can free it using the Windows <strong>DeleteMetaFile</strong> function.</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.</example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ToEmf(Leadtools.RasterImage)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object into a Windows Enhanced Metafile (EMF).
            </summary>
      <param name="image">The source image.</param>
      <keywords>EMF|Windows enhanced metafiles|Enhanced metafiles</keywords>
      <returns>A handle to the Windows enhanced metafile (EMF) this method creates.</returns>
      <remarks>
        <para>When this method is completed, there are two copies of the drawing in memory: the EMF and the original <see cref="T:Leadtools.RasterImage" /> object. Freeing one will not affect the other.</para>
        <para>This method allocates an enhanced metafile bitmap and copies the <see cref="T:Leadtools.RasterImage" /> data to the enhanced Metafile.</para>
        <para>When you no longer need the enhanced metafile, you can free it using the Windows <strong>DeleteEnhMetaFile</strong> function.</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToWmf">ToWmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf(System.IntPtr,System.Int32,System.Int32)" /></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ToWmf(Leadtools.RasterImage)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> object into a Windows Metafile (WMF).
            </summary>
      <param name="image">The source image.</param>
      <keywords>Windows metafiles|Metafiles|WMF</keywords>
      <returns>A handle to the Windows metafile (WMF) this method creates.</returns>
      <remarks>
        <para>When this method is completed, there are two copies of the drawing in memory: the WMF and the original <see cref="T:Leadtools.RasterImage" /> object. Freeing one will not affect the other.</para>
        <para>This method allocates an metafile bitmap and copies the <see cref="T:Leadtools.RasterImage" /> data to the Metafile.</para>
        <para>When you no longer need the metafile, you can free it using the Windows <strong>DeleteMetaFile</strong> function.</para>
        <para>This method does not support signed images.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromEmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromWmf(System.IntPtr,System.Int32,System.Int32)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromEmf">FromEmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf">FromWmf</seealso>.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToEmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToWmf(Leadtools.RasterImage)" />.
            <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToEmf">ToEmf</seealso>.
            <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.FromWmf(System.IntPtr,System.Int32,System.Int32)" /></example></member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ImagePhysicalSize(Leadtools.RasterImage,System.Drawing.Graphics)">
      <summary>
            Gets a <see cref="T:Leadtools.RasterImage" />'s dimensions corrected for resolution (DPI).
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The reference <see cref="T:System.Drawing.Graphics" /> object.</param>
      <returns>This <see cref="T:Leadtools.RasterImage" /> dimensions corrected for resolution (DPI)</returns>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see> and <see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see> properties return the physical size of the
            <see cref="T:Leadtools.RasterImage" /> in dots per inch (DPI).  This method returns the image size in pixels if it was to be drawn
            into the given <see cref="T:System.Drawing.Graphics" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.GetNearestBitsPerPixel(System.Drawing.Imaging.PixelFormat)">
      <summary>
            Gets the nearest bits per pixel value supported by LEADTOOLS for the specified GDI+ pixel format.
            </summary>
      <param name="pixelFormat">The input pixel format.</param>
      <returns>The nearest bits per pixel value supported by LEAD for the specified image pixel format.</returns>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetNearestBitsPerPixelExample()
         ' try to open the image
         Using gdiPlusImage As Image = Image.FromFile(Path.Combine(LEAD_VARS.ImagesDir, "Cannon.jpg"))
            ' show what the bits/pixel will be if this image is converted to an IRasterImage
            Dim bitsPerPixel As Integer = RasterImageConverter.GetNearestBitsPerPixel(gdiPlusImage.PixelFormat)
            Console.WriteLine(String.Format("Nearest bits/pixel to {0} is {1}", gdiPlusImage.PixelFormat, bitsPerPixel))

            ' prove it by converting this image to an IRasterImage
            Using leadImage As RasterImage = RasterImageConverter.ConvertFromImage(gdiPlusImage, ConvertFromImageOptions.None)
               Console.WriteLine(String.Format("Created bits/pixel is {0}", leadImage.BitsPerPixel))
            End Using
         End Using
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetNearestBitsPerPixelExample()
      {
         // try to open the image
         using(Image gdiPlusImage = Image.FromFile(Path.Combine(LEAD_VARS.ImagesDir, "Cannon.jpg")))
         {
            // show what the bits/pixel will be if this image is converted to an IRasterImage
            int bitsPerPixel = RasterImageConverter.GetNearestBitsPerPixel(gdiPlusImage.PixelFormat);
            Console.WriteLine(string.Format("Nearest bits/pixel to {0} is {1}", gdiPlusImage.PixelFormat, bitsPerPixel));

            // prove it by converting this image to an IRasterImage
            using(RasterImage leadImage = RasterImageConverter.ConvertFromImage(gdiPlusImage, ConvertFromImageOptions.None))
            {
               Console.WriteLine(string.Format("Created bits/pixel is {0}", leadImage.BitsPerPixel));
            }
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.GetNearestBitsPerPixel-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.IsValidBitsPerPixel(System.Int32)">
      <summary>
            Determines whether the specified bits per pixel value supported by LEADTOOLS is compatible with GDI+.
            </summary>
      <param name="bitsPerPixel">The input bits per pixel value.</param>
      <returns>true if <paramref name="bitsPerPixel" /> is compatible with GDI+, otherwise it is false.</returns>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub IsValidBitsPerPixelExample()
         Dim codecs As New RasterCodecs()
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))
            ' check if this image has a valid gdi plus bits/pixel.  It should say true
            If RasterImageConverter.IsValidBitsPerPixel(image.BitsPerPixel) Then
               Console.WriteLine(String.Format("{0} is a valid GDI+ bits/pixel", image.BitsPerPixel))
            Else
               Console.WriteLine(String.Format("{0} is not a valid GDI+ bits/pixel", image.BitsPerPixel))
            End If

            ' change this image to grayscale 12-bit
            Dim cmd As New ColorResolutionCommand( _
               ColorResolutionCommandMode.InPlace, _
               12, _
               RasterByteOrder.Gray, _
               RasterDitheringMethod.None, _
               ColorResolutionCommandPaletteFlags.Optimized, _
               Nothing)

            cmd.Run(image)

            ' check if this image has a valid gdi plus bits/pixel.  It should say false
            If RasterImageConverter.IsValidBitsPerPixel(image.BitsPerPixel) Then
               Console.WriteLine(String.Format("{0} is a valid GDI+ bits/pixel", image.BitsPerPixel))
            Else
               Console.WriteLine(String.Format("{0} is not a valid GDI+ bits/pixel", image.BitsPerPixel))
            End If
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void IsValidBitsPerPixelExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")))
         {
            // check if this image has a valid gdi plus bits/pixel.  It should say true
            if(RasterImageConverter.IsValidBitsPerPixel(image.BitsPerPixel))
            {
               Console.WriteLine(string.Format("{0} is a valid GDI+ bits/pixel", image.BitsPerPixel));
            }
            else
            {
               Console.WriteLine(string.Format("{0} is not a valid GDI+ bits/pixel", image.BitsPerPixel));
            }

            // change this image to grayscale 12-bit
            ColorResolutionCommand cmd = new ColorResolutionCommand(
               ColorResolutionCommandMode.InPlace,
               12,
               RasterByteOrder.Gray,
               RasterDitheringMethod.None,
               ColorResolutionCommandPaletteFlags.Optimized,
               null);

            cmd.Run(image);

            // check if this image has a valid gdi plus bits/pixel.  It should say false
            if(RasterImageConverter.IsValidBitsPerPixel(image.BitsPerPixel))
            {
               Console.WriteLine(string.Format("{0} is a valid GDI+ bits/pixel", image.BitsPerPixel));
            }
            else
            {
               Console.WriteLine(string.Format("{0} is not a valid GDI+ bits/pixel", image.BitsPerPixel));
            }
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.IsValidBitsPerPixel-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.GetNearestPixelFormat(Leadtools.RasterImage)">
      <summary>
            Gets the GDI+ <see cref="T:System.Drawing.Imaging.PixelFormat" /> that is closest to a source <see cref="T:Leadtools.RasterImage" /> data.
            </summary>
      <param name="image">The source image.</param>
      <value>The GDI+ <see cref="T:System.Drawing.Imaging.PixelFormat" /> that is closest to this <see cref="T:Leadtools.RasterImage" /> data.</value>
      <remarks>
        <para>You can pass the value returned from this property to the <see cref="M:Leadtools.Drawing.RasterImageConverter.MakeCompatible(Leadtools.RasterImage,System.Drawing.Imaging.PixelFormat,System.Boolean)" /> method.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.MakeCompatible(Leadtools.RasterImage,System.Drawing.Imaging.PixelFormat,System.Boolean)" /> example.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)">
      <summary>
            Tests a <see cref="T:Leadtools.RasterImage" /> to see if it is compatible with the GDI+ Image.
            </summary>
      <param name="image">The source image.</param>
      <param name="noPalette">Fails if the image is palletized.</param>
      <returns>Value indicating the compatibility.</returns>
      <keywords>RasterPaintEngine property|GDI|GDI+|Keeping 16-bit images at 16-bits when loaded in the viewer|Converting|Converting 16-bit images to 24 bits</keywords>
      <remarks>
        <para>For a <see cref="T:Leadtools.RasterImage" /> to be compatible with a GDI+ image it needs the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.IsConventionalMemory">RasterImage.IsConventionalMemory</see> to be true (Tiled, compressed and disk-based images are not supported)
            </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> value of 1, 4, 8, 16, 24 or 32</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see> value of <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see> or
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see></description>
            </item>
            <item>
              <description>Not a gray scale image.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see> value of
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see></description>
            </item>
          </list>
        </para>
        <para>For more information, refer to 
             <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>.
            </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.MakeCompatible(Leadtools.RasterImage,System.Drawing.Imaging.PixelFormat,System.Boolean)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ChangeToImage(Leadtools.RasterImage,Leadtools.Drawing.ChangeToImageOptions)">
      <summary>
            Changes a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to a GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see>.
            </summary>
      <param name="image">The source image.</param>
      <param name="options">The conversion options.</param>
      <returns>The GDI+ image that this method creates.</returns>
      <keywords>RasterPaintEngine property|GDI|GDI+|Keeping 16-bit images at 16-bits when loaded in the viewer|Converting|Converting 16-bit images to 24 bits</keywords>
      <remarks>
        <para>This result GDI+ image and the <see cref="T:Leadtools.RasterImage" /> object will share the same image data.  You can use this
            method to pass a LEAD <see cref="T:Leadtools.RasterImage" /> object to other class library methods that expect a GDI+
            <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object. Use the <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)" /> method to obtain a GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object
            that is a copy of this <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>Calling this method may change the internal format of this <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>Use <see cref="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)" /> to determine if the image is compatible for conversion to a GDI+ image.</para>
        <para>For a <see cref="T:Leadtools.RasterImage" /> to be compatible with a GDI+ image it needs the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.IsConventionalMemory">RasterImage.IsConventionalMemory</see> to be true (Tiled, compressed and disk-based images are not supported)
            </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> value of 1, 4, 8, 16, 24 or 32</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see> value of <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see> or
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see></description>
            </item>
            <item>
              <description>Not a gray scale image.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see> value of
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see></description>
            </item>
          </list>
        </para>
        <para>To convert a GDI+ image to a LEADTOOLS <see cref="T:Leadtools.RasterImage" />, use <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)" />.</para>
        <para>For more information, refer to 
            <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>.
            </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example changes between a <see cref="T:Leadtools.RasterImage" /> and a GDI+ image.</para>
        </para>
        <code lang="VB">      Public Sub ChangeToImageExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "GdiPlusImage1.bmp")

         ' Load the image
         Using srcImage As RasterImage = codecs.Load(srcFileName)
            ' Convert to GDI+ image
            Dim reason As ImageIncompatibleReason = RasterImageConverter.TestCompatible(srcImage, True)
            Dim pf As PixelFormat = RasterImageConverter.GetNearestPixelFormat(srcImage)
            Console.WriteLine("TestCompatible: {0}", reason)
            Console.WriteLine("GetNearestPixelFormat:{0}", pf)

            If reason &lt;&gt; ImageIncompatibleReason.Compatible Then
               RasterImageConverter.MakeCompatible(srcImage, pf, True)
            End If

            Using destImage As Image = RasterImageConverter.ChangeToImage(srcImage, ChangeToImageOptions.ForceChange)
               ' Save this image to disk
               destImage.Save(destFileName, ImageFormat.Bmp)
            End Using
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangeToImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "GdiPlusImage1.bmp");

         // Load the image
         using(RasterImage srcImage = codecs.Load(srcFileName))
         {
            // Convert to GDI+ image
            ImageIncompatibleReason reason = RasterImageConverter.TestCompatible(srcImage, true);
            PixelFormat pf = RasterImageConverter.GetNearestPixelFormat(srcImage);
            Console.WriteLine("TestCompatible: {0}", reason);
            Console.WriteLine("GetNearestPixelFormat:{0}", pf);

            if(reason != ImageIncompatibleReason.Compatible)
            {
               RasterImageConverter.MakeCompatible(srcImage, pf, true);
            }

            using(Image destImage = RasterImageConverter.ChangeToImage(srcImage, ChangeToImageOptions.ForceChange))
            {
               // Save this image to disk
               destImage.Save(destFileName, ImageFormat.Bmp);
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.ChangeToImage-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to a GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see>.
            </summary>
      <param name="image">The source image.</param>
      <param name="options">The conversion options.</param>
      <returns>The GDI+ image this method creates</returns>
      <keywords>RasterPaintEngine property|GDI|GDI+|Keeping 16-bit images at 16-bits when loaded in the viewer|Converting|Converting 16-bit images to 24 bits</keywords>
      <remarks>
        <para>This result GDI+ image is a copy of this <see cref="T:Leadtools.RasterImage" /> object and do not share the same image data.  You can use this
            method to pass a LEAD <see cref="T:Leadtools.RasterImage" /> object to other class library methods that expect a GDI+
            <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object. Use the <see cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToImage(Leadtools.RasterImage,Leadtools.Drawing.ChangeToImageOptions)" /> method to obtain a GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object
            that shares its data with this <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>Use <see cref="M:Leadtools.Drawing.RasterImageConverter.TestCompatible(Leadtools.RasterImage,System.Boolean)" /> to determine if the image is compatible for conversion to a GDI+ image.</para>
        <para>To convert a GDI+ image to a LEADTOOLS <see cref="T:Leadtools.RasterImage" />, use <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)" />.</para>
        <para>For a <see cref="T:Leadtools.RasterImage" /> to be compatible with a GDI+ image it needs the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.IsConventionalMemory">RasterImage.IsConventionalMemory</see> to be true (Tiled, compressed and disk-based images are not supported)
            </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> value of 1, 4, 8, 16, 24 or 32</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see> value of <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see> or
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see></description>
            </item>
            <item>
              <description>Not a gray scale image.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see> value of
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see></description>
            </item>
          </list>
        </para>
        <para>For more information, refer to 
            <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>. 
            </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example converts between a <see cref="T:Leadtools.RasterImage" /> and a GDI+ image.</para>
        </para>
        <code lang="VB">      Public Sub ConvertToImageExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "GdiPlusImage.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromGdiPlusImage.bmp")

         ' Load the image
         Using srcImage As RasterImage = codecs.Load(srcFileName)
            ' Convert to GDI+ image
            Dim reason As ImageIncompatibleReason = RasterImageConverter.TestCompatible(srcImage, True)
            Dim pf As PixelFormat = RasterImageConverter.GetNearestPixelFormat(srcImage)
            Console.WriteLine("TestCompatible: {0}", reason)
            Console.WriteLine("GetNearestPixelFormat:{0}", pf)

            If reason &lt;&gt; ImageIncompatibleReason.Compatible Then
               RasterImageConverter.MakeCompatible(srcImage, pf, True)
            End If

            Using destImage1 As Image = RasterImageConverter.ConvertToImage(srcImage, ConvertToImageOptions.None)
               ' Save this image to disk
               destImage1.Save(destFileName1, ImageFormat.Bmp)

               ' Convert the GDI+ image back to a RasterImage
               Using destImage2 As RasterImage = RasterImageConverter.ConvertFromImage(destImage1, ConvertFromImageOptions.None)
                  ' Save it to disk
                  codecs.Save(destImage2, destFileName2, RasterImageFormat.Bmp, 24)
               End Using
            End Using
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ConvertToImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "GdiPlusImage.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromGdiPlusImage.bmp");

         // Load the image
         using(RasterImage srcImage = codecs.Load(srcFileName))
         {
            // Convert to GDI+ image
            ImageIncompatibleReason reason = RasterImageConverter.TestCompatible(srcImage, true);
            PixelFormat pf = RasterImageConverter.GetNearestPixelFormat(srcImage);
            Console.WriteLine("TestCompatible: {0}", reason);
            Console.WriteLine("GetNearestPixelFormat:{0}", pf);

            if(reason != ImageIncompatibleReason.Compatible)
            {
               RasterImageConverter.MakeCompatible(srcImage, pf, true);
            }

            using(Image destImage1 = RasterImageConverter.ConvertToImage(srcImage, ConvertToImageOptions.None))
            {
               // Save this image to disk
               destImage1.Save(destFileName1, ImageFormat.Bmp);

               // Convert the GDI+ image back to a RasterImage
               using(RasterImage destImage2 = RasterImageConverter.ConvertFromImage(destImage1, ConvertFromImageOptions.None))
               {
                  // Save it to disk
                  codecs.Save(destImage2, destFileName2, RasterImageFormat.Bmp, 24);
               }
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.ConvertToImage-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.MakeCompatible(Leadtools.RasterImage,System.Drawing.Imaging.PixelFormat,System.Boolean)">
      <summary>
            Makes a <see cref="T:Leadtools.RasterImage" /> GDI+ compatible.
            </summary>
      <param name="image">The source image.</param>
      <param name="pixelFormat">The pixel format to use.</param>
      <param name="noPalette">Fails if the image is palletized.</param>
      <keywords>RasterPaintEngine property|GDI|GDI+</keywords>
      <remarks>
        <para>Pass <see cref="T:System.Drawing.Imaging.PixelFormat">PixelFormat.DontCare</see> to the <paramref name="pixelFormat" /> parameter to have the method choose
            the appropriate pixel format.</para>
        <para>For a <see cref="T:Leadtools.RasterImage" /> to be compatible with a GDI+ image it needs the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.IsConventionalMemory">RasterImage.IsConventionalMemory</see> to be true (Tiled, compressed and disk-based images are not supported)
            </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see> value of 1, 4, 8, 16, 24 or 32</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see> value of <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see> or
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see></description>
            </item>
            <item>
              <description>Not a gray scale image.</description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see> value of
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see></description>
            </item>
          </list>
        </para>
        <para>This method will make one or more of the changes above to the <see cref="T:Leadtools.RasterImage" /> if needed.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)" /></example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImageConverter.ConvertFromImage(System.Drawing.Image,Leadtools.Drawing.ConvertFromImageOptions)">
      <summary>
            Creates a new <see cref="T:Leadtools.RasterImage" /> from the specified existing GDI+ <see cref="T:System.Drawing.Image">System.Drawing.Image</see> object.
            </summary>
      <keywords>GDI+|GDI Plus|GDIPlus|System.Drawing.Image|System.Drawing.Bitmap</keywords>
      <param name="image">The <see cref="T:System.Drawing.Image" /> from which to create the new <see cref="T:Leadtools.RasterImage" />.</param>
      <param name="options">The conversion options.</param>
      <remarks>
        <para>To convert a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> to GDI+ image, use <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example converts between a <see cref="T:Leadtools.RasterImage" /> and a GDI+ image.</para>
        </para>
        <code lang="VB">      Public Sub ConvertFromImageExample()
         Dim codecs As New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ConvertFromImage.bmp")

         ' Create a GDI+ image
         Using btmp As Bitmap = New Bitmap(320, 200)
            Using g As Graphics = Graphics.FromImage(btmp)
               g.Clear(Color.Yellow)
               g.FillEllipse(Brushes.Red, New Rectangle(0, 0, btmp.Width, btmp.Height))

               ' Convert this image to RasterImage

               Using image As RasterImage = RasterImageConverter.ConvertFromImage(btmp, ConvertFromImageOptions.None)
                  ' Save it
                  codecs.Save(image, destFileName, RasterImageFormat.Bmp, 0)
               End Using
            End Using
         End Using

         ' Clean up
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ConvertFromImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "ConvertFromImage.bmp");

         // Create a GDI+ image
         using(Bitmap btmp = new Bitmap(320, 200))
         {
            using(Graphics g = Graphics.FromImage(btmp))
            {
               g.Clear(Color.Yellow);
               g.FillEllipse(Brushes.Red, new Rectangle(0, 0, btmp.Width, btmp.Height));

               // Convert this image to RasterImage

               using(RasterImage image = RasterImageConverter.ConvertFromImage(btmp, ConvertFromImageOptions.None))
               {
                  // Save it
                  codecs.Save(image, destFileName, RasterImageFormat.Bmp, 0);
               }
            }
         }

         // Clean up
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageConverter.ConvertFromImage-->
      </example>
    </member>
    <member name="T:Leadtools.Drawing.RasterGraphics">
      <summary>
            Represents a GDI+ <see cref="T:System.Drawing.Graphics" /> object using a <see cref="T:Leadtools.RasterImage" /> as the display surface.
            </summary>
      <remarks>
        <para>An object of this class is returned from the <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)">RasterImagePainter.CreateGraphics</see>
            method that allow you to create an infinite number of drawing capabilities such as paint, erase, color erase
            and brush, pen, spray gun, flood fill, color tube, text overlay, curve, line, rectangle, polygon, ellipse, 
            freehand shapes, cut and paste, and more.</para>
        <para>All GDI+ methods can be used to draw to the image using the returned <see cref="T:System.Drawing.Graphics" /> object. The graphics object must be disposed
            after using it.</para>
        <para>If a region is defined for the image, GDI functions act only on the region, not on the entire image.</para>
        <para>The GDI+ graphics supports only 1, 4, 8, 16 and 24 bit images. If you are using an image that has some other
            number of bits per pixel, you must use <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> to change the
            image to a bits per pixel value supported by the DIB driver.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)">RasterImagePainter.CreateGraphics</see>.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterGraphics.Dispose">
      <summary>
            Releases all the resources used by this <see cref="T:Leadtools.Drawing.RasterGraphics" />.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterGraphics" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterGraphics.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterGraphics" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterGraphics.Dispose(System.Boolean)">
      <summary>
            Releases all the resources used by this <see cref="T:Leadtools.Drawing.RasterGraphics" />.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterGraphics" />.</example>
    </member>
    <member name="P:Leadtools.Drawing.RasterGraphics.Graphics">
      <summary>
            Gets the GDI+ <see cref="T:System.Drawing.Graphics" /> object that represents the display surface of the <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <value>A GDI+ <see cref="T:System.Drawing.Graphics" /> object that represents the display surface of the <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)" /> method to create an infinite number of drawing capabilities such as paint, erase, color erase
            and brush, pen, spray gun, flood fill, color tube, text overlay, curve, line, rectangle, polygon, ellipse, 
            freehand shapes, cut and paste, and more.</para>
        <para>All GDI+ methods can be used to draw to the image using the returned <see cref="T:System.Drawing.Graphics" /> object. The graphics object must be disposed
            after using it.</para>
        <para>If a region is defined for the image, GDI functions act only on the region, not on the entire image.</para>
        <para>The GDI+ graphics supports only 1, 4, 8, 16 and 24 bit images. If you are using an image that has some other
            number of bits per pixel, you must use <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> to change the
            image to a bits per pixel value supported by the DIB driver.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)">RasterImagePainter.CreateGraphics</see>.</example>
    </member>
    <member name="T:Leadtools.Drawing.RasterImagePainter">
      <summary>
            Support for painting a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> using GDI and GDI+ platforms.
            </summary>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterImage">RasterImage</see> class provides platform independent representation of an image. It serves as a working area
            for image manipulation and conversion. LEADTOOLS functions use this class for accessing the image in memory and for maintaining the characteristics of the
            image. This topic discus how to use the LEADTOOLS <see cref="T:Leadtools.RasterImage">RasterImage</see> class with the Windows GDI and GDI+
            (<see cref="N:System.Drawing">System.Drawing</see>) platforms.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.CreateLeadDC(Leadtools.RasterImage)">
      <summary>
            Creates a Windows GDI device context using this <see cref="T:Leadtools.RasterImage" /> as the display surface.
            </summary>
      <param name="image">The source image.</param>
      <returns>The Windows HDC object this method creates.</returns>
      <keywords>Device Context|Graphics Device Interface|GDI|Windows device context</keywords>
      <remarks>
        <para>This method allows you to create an infinite number of drawing capabilities such as paint, erase, color erase
            and brush, pen, spray gun, flood fill, color tube, text overlay, curve, line, rectangle, polygon, ellipse, 
            freehand shapes, cut and paste, and more.</para>
        <para>All Windows GDI functions can be used to draw to the image using the returned HDC. The HDC must be freed 
            with the <see cref="M:Leadtools.Drawing.RasterImagePainter.DeleteLeadDC(System.IntPtr)" /> method.</para>
        <para>If a region is defined for the image, GDI functions act only on the region, not on the entire image.</para>
        <para>The DIB driver supports only 1, 4, 8, 16 and 24 bit images. If you are using an image that has some other
            number of bits per pixel, you must use <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> to change the 
            image to a bits per pixel value supported by the DIB driver.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example draws an ellipse on a raster image.</para>
        </para>
        <code lang="VB">      Public Sub CreateLeadDCExample()
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         Dim point1 As New LeadPoint(image.Width \ 8, image.Height \ 8)
         Dim point2 As New LeadPoint(image.Width \ 2, image.Height \ 2)

         ' Convert the coordinates if necessary.
         If image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft Then
            point1 = image.PointToImage(RasterViewPerspective.TopLeft, point1)
            point2 = image.PointToImage(RasterViewPerspective.TopLeft, point2)
         End If

         ' Create the device context
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
         Using g As Graphics = Graphics.FromHdc(hdc)
            g.DrawEllipse(New Pen(Color.White), point1.X, point1.Y, point2.X - point1.X, point2.Y - point1.Y)
         End Using
         RasterImagePainter.DeleteLeadDC(hdc)

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Imahe1_CreateLeadDC.bmp"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateLeadDCExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));

         LeadPoint point1 = new LeadPoint(image.Width / 8, image.Height / 8);
         LeadPoint point2 = new LeadPoint(image.Width / 2, image.Height / 2);

         // Convert the coordinates if necessary.
         if(image.ViewPerspective != RasterViewPerspective.TopLeft)
         {
            point1 = image.PointToImage(RasterViewPerspective.TopLeft, point1);
            point2 = image.PointToImage(RasterViewPerspective.TopLeft, point2);
         }

         // Create the device context
         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using(Graphics g = Graphics.FromHdc(hdc))
         {
            g.DrawEllipse(new Pen(Color.White), point1.X, point1.Y, point2.X - point1.X, point2.Y - point1.Y);
         }
         RasterImagePainter.DeleteLeadDC(hdc);

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Imahe1_CreateLeadDC.bmp"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.CreateLeadDC-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.DeleteLeadDC(System.IntPtr)">
      <summary>
            Deletes the device context that was created using the <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateLeadDC(Leadtools.RasterImage)" /> method.
            </summary>
      <param name="hdc">Handle to a device context that was created using the <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateLeadDC(Leadtools.RasterImage)" /> method.</param>
      <keywords>Device Context|Graphics Device Interface|GDI|Windows device context</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateLeadDC(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.CreateGraphics(Leadtools.RasterImage)">
      <summary>
            Creates a GDI+ <see cref="T:System.Drawing.Graphics" /> object using this <see cref="T:Leadtools.RasterImage" /> as the display surface.
            </summary>
      <param name="image">The source image.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Graphics" /> object this method creates.</returns>
      <keywords>Device Context|Graphics Device Interface|GDI|GDI+|Windows device context</keywords>
      <remarks>
        <para>This method allows you to create an infinite number of drawing capabilities such as paint, erase, color erase
            and brush, pen, spray gun, flood fill, color tube, text overlay, curve, line, rectangle, polygon, ellipse, 
            freehand shapes, cut and paste, and more.</para>
        <para>All GDI+ methods can be used to draw to the image using the returned <see cref="T:System.Drawing.Graphics" /> object. The graphics object must be disposed
            after using it.</para>
        <para>If a region is defined for the image, GDI functions act only on the region, not on the entire image.</para>
        <para>The GDI+ graphics supports only 1, 4, 8, 16 and 24 bit images. If you are using an image that has some other
            number of bits per pixel, you must use <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> to change the
            image to a bits per pixel value supported by the DIB driver.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example draws an ellipse on a raster image.</para>
        </para>
        <code lang="VB">      Public Sub CreateGraphicsExample()
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         Dim point1 As New LeadPoint(image.Width \ 8, image.Height \ 8)
         Dim point2 As New LeadPoint(image.Width \ 2, image.Height \ 2)

         ' Convert the coordinates if necessary.
         If image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft Then
            point1 = image.PointToImage(RasterViewPerspective.TopLeft, point1)
            point2 = image.PointToImage(RasterViewPerspective.TopLeft, point2)
         End If

         ' Create the Graphics object
         Using rg As RasterGraphics = RasterImagePainter.CreateGraphics(image)
            rg.Graphics.DrawEllipse(New Pen(Color.White), point1.X, point1.Y, point2.X - point1.X, point2.Y - point1.Y)
         End Using

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGraphics.bmp"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateGraphicsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));

         LeadPoint point1 = new LeadPoint(image.Width / 8, image.Height / 8);
         LeadPoint point2 = new LeadPoint(image.Width / 2, image.Height / 2);

         // Convert the coordinates if necessary.
         if(image.ViewPerspective != RasterViewPerspective.TopLeft)
         {
            point1 = image.PointToImage(RasterViewPerspective.TopLeft, point1);
            point2 = image.PointToImage(RasterViewPerspective.TopLeft, point2);
         }

         // Create the Graphics object
         using(RasterGraphics rg = RasterImagePainter.CreateGraphics(image))
         {
            rg.Graphics.DrawEllipse(new Pen(Color.White), point1.X, point1.Y, point2.X - point1.X, point2.Y - point1.Y);
         }

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGraphics.bmp"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.CreateGraphics-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.GetPaintColors(Leadtools.RasterImage,System.Drawing.Graphics)">
      <summary>
            Returns a palette corresponding to this <see cref="T:Leadtools.RasterImage" /> if painted on the given graphics object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The graphics object on which this image is painted.</param>
      <returns>An array of color for the palette</returns>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetPaintColorsExample()
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1)

         Using btmp As New Bitmap(1, 1)
            Using g As Graphics = Graphics.FromImage(btmp)
               Dim colors() As RasterColor = RasterImagePainter.GetPaintColors(image, g)
               If Not IsNothing(colors) Then
                  Console.WriteLine("Paint colors:")
                  For i As Integer = 0 To colors.Length - 1
                     Console.WriteLine("{0} - {1}", i, colors(i))
                  Next
               Else
                  Console.WriteLine("There is no palette")
               End If
            End Using
         End Using

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetPaintColorsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1);

         using(Bitmap btmp = new Bitmap(1, 1))
         {
            using(Graphics g = Graphics.FromImage(btmp))
            {
               RasterColor[] colors = RasterImagePainter.GetPaintColors(image, g);
               if(colors != null)
               {
                  Console.WriteLine("Paint colors:");
                  for(int i = 0; i &lt; colors.Length; i++)
                  {
                     Console.WriteLine("{0} - {1}", i, colors[i]);
                  }
               }
               else
               {
                  Console.WriteLine("There is no palette");
               }
            }
         }

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.GetPaintColors-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.GetPaintPalette(Leadtools.RasterImage,System.Drawing.Graphics)">
      <summary>
            Returns a GDI+ palette corresponding to this <see cref="T:Leadtools.RasterImage" /> if painted on the given graphic object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The graphics object on which this <see cref="T:Leadtools.RasterImage" /> is painted.</param>
      <returns>a GDI+ palette</returns>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetPaintPaletteExample()
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1)

         Using btmp As New Bitmap(1, 1)
            Using g As Graphics = Graphics.FromImage(btmp)
               Dim palette As ColorPalette = RasterImagePainter.GetPaintPalette(image, g)
               If Not IsNothing(palette) Then
                  Console.WriteLine("Paint palette colors:")
                  For i As Integer = 0 To palette.Entries.Length - 1
                     Console.WriteLine("{0} - {1}", i, palette.Entries(i))
                  Next
               Else
                  Console.WriteLine("There is no palette")
               End If
            End Using
         End Using

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetPaintPaletteExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1);

         using(Bitmap btmp = new Bitmap(1, 1))
         {
            using(Graphics g = Graphics.FromImage(btmp))
            {
               ColorPalette palette = RasterImagePainter.GetPaintPalette(image, g);
               if(palette != null)
               {
                  Console.WriteLine("Paint palette colors:");
                  for(int i = 0; i &lt; palette.Entries.Length; i++)
                  {
                     Console.WriteLine("{0} - {1}", i, palette.Entries[i]);
                  }
               }
               else
               {
                  Console.WriteLine("There is no palette");
               }
            }
         }

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.GetPaintPalette-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.GetPaintHPalette(Leadtools.RasterImage,System.IntPtr)">
      <summary>
            Returns a Windows palette handle corresponding to this <see cref="T:Leadtools.RasterImage" /> if painted on the given device context.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The device context object on which this <see cref="T:Leadtools.RasterImage" /> is painted.</param>
      <returns>A Windows palette handle (HPALETTE). You must delete this palette with the Windows DeleteObject API after using it.</returns>
      <remarks>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      ' Windows API
      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function GetPaletteEntries(ByVal hpal As IntPtr, ByVal nStartIndex As UInt32, ByVal nNumEntries As UInt32, &lt;InAttribute(), Out()&gt; ByVal colors() As Byte) As UInt32
      End Function
      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function DeleteObject(ByVal hObject As IntPtr) As Integer
      End Function


      Public Sub GetPaintHPaletteExample()
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1)

         Dim hpalette As IntPtr = RasterImagePainter.GetPaintHPalette(image, IntPtr.Zero)
         If hpalette &lt;&gt; IntPtr.Zero Then
            ' Show the pal

            ' 4 bytes for each color
            Dim colors(256 * 4 - 1) As Byte
            GetPaletteEntries(hpalette, 0, 256, colors)
            Dim index As Integer = 0
            For i As Integer = 0 To 255
               Console.WriteLine("{0] - {1], {2], {3]", i, colors(index + 0), colors(index + 1), colors(index + 2))
               index = index + 4
            Next

            DeleteObject(hpalette)
         Else
            Console.WriteLine("There is no palette")
         End If

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // Windows API
      [DllImport("Gdi32")]
      private static extern uint GetPaletteEntries(IntPtr hpal, uint nStartIndex, uint nNumEntries, [In, Out] byte[] colors);
      [DllImport("Gdi32")]
      private static extern int DeleteObject(IntPtr hObject);


      public void GetPaintHPaletteExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 8, CodecsLoadByteOrder.Rgb, 1, 1);

         IntPtr hpalette = RasterImagePainter.GetPaintHPalette(image, IntPtr.Zero);
         if(hpalette != IntPtr.Zero)
         {
            // Show the pal

            // 4 bytes for each color
            byte[] colors = new byte[256 * 4];
            GetPaletteEntries(hpalette, 0, 256, colors);
            int index = 0;
            for(int i = 0; i &lt; 256; i++)
            {
               Console.WriteLine("{0} - {1}, {2}, {3}", i, colors[index + 0], colors[index + 1], colors[index + 2]);
               index += 4;
            }

            DeleteObject(hpalette);
         }
         else
         {
            Console.WriteLine("There is no palette");
         }

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.GetPaintHPalette-->
      </example>
    </member>
    <member name="F:Leadtools.Drawing.RasterImagePainter.MaxRegionFrameIndex">
      <summary>
            Gets the maximum region frame index.
            </summary>
      <value>The maximum region frame index.</value>
      <remarks>
        <para>When painting an image region using <see cref="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)" />, you can animate the region frame by cycling through the
            region frames for 0 to <see cref="F:Leadtools.Drawing.RasterImagePainter.MaxRegionFrameIndex" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)">
      <summary>
            Displays an outline of the image region in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">
        <see cref="T:System.Drawing.Graphics" /> object where the image is displayed and where the frame is to appear.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates
            and image coordinates.</param>
      <param name="frameIndex">Zero-index of the frame to display. Possible values are from 0 to
            <see cref="F:Leadtools.Drawing.RasterImagePainter.MaxRegionFrameIndex" />. You can animate the region frame by cycling between these values.</param>
      <keywords>Device Context|Windows device context|DC</keywords>
      <remarks>
        <para>If the region includes non-contiguous shapes, each shape is outlined. The outline, itself, is inside the region.</para>
        <para>Before calling this method, create a <see cref="T:Leadtools.RasterRegionXForm" /> object and set its values, which LEADTOOLS uses to
            translate between device context coordinates and image coordinates.</para>
        <para>This method is designed to produce an animated frame, which you can implement by calling the method with a timer
            event that cycles through the possible frame types.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see> and
            <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub FrameRegionExample()
         Dim f As New FrameRegionForm()
         f.ShowDialog()
      End Sub

      Class FrameRegionForm
         Inherits Form
         Private frameIndex As Integer
         Private image As RasterImage
         Private timer As System.Windows.Forms.Timer
         Private fillRegion As Boolean

         Public Sub New()
            ' Load the image
            Using codecs As New RasterCodecs()
               Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
               image = codecs.Load(srcFileName)
            End Using

            ' Add a region to the image
            Dim rc As New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
            Dim xform As New RasterRegionXForm()
            xform.ViewPerspective = RasterViewPerspective.TopLeft
            image.AddEllipseToRegion(xform, rc, RasterRegionCombineMode.Set)

            ' initialize the frame index
            frameIndex = 0

            fillRegion = True

            Text = "Double click to enable/disable filling the region"

            ' Create the timer
            timer = New System.Windows.Forms.Timer()
            timer.Interval = 100
            AddHandler timer.Tick, AddressOf timer_Tick
            timer.Start()
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               If Not IsNothing(timer) Then
                  timer.Dispose()
               End If

               If Not IsNothing(image) Then
                  image.Dispose()
               End If

            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnDoubleClick(ByVal e As EventArgs)
            fillRegion = Not fillRegion
            Invalidate()

            MyBase.OnDoubleClick(e)
         End Sub

         Private Function GetXForm(ByVal destRect As LeadRect) As RasterRegionXForm
            ' Calculate xform when the image is painted into 'destRect'
            Dim xform As New RasterRegionXForm()
            xform.ViewPerspective = RasterViewPerspective.TopLeft
            xform.XOffset = destRect.Left
            xform.YOffset = destRect.Top
            xform.XScalarDenominator = image.Width
            xform.XScalarNumerator = destRect.Width
            xform.YScalarDenominator = image.Height
            xform.YScalarNumerator = destRect.Height

            Return xform
         End Function

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
                image.ImageWidth, _
                image.ImageHeight, _
                destRect, _
                RasterPaintSizeMode.Fit, _
                RasterPaintAlignMode.Center, _
                RasterPaintAlignMode.Center)

            Dim clipRect As LeadRect = LeadRect.FromLTRB(e.ClipRectangle.Left, e.ClipRectangle.Top, e.ClipRectangle.Right, e.ClipRectangle.Bottom)
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, clipRect, RasterPaintProperties.Default)

            If fillRegion Then
               Dim xform As RasterRegionXForm = GetXForm(destRect)
               RasterImagePainter.FillRegion(image, e.Graphics, xform, New RasterColor(255, 0, 255))
            End If

            MyBase.OnPaint(e)
         End Sub

         Private Sub timer_Tick(ByVal sender As Object, ByVal e As EventArgs)
            ' Frame the image region
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)

            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            Dim xform As RasterRegionXForm = GetXForm(destRect)

            Using g As Graphics = CreateGraphics()
               RasterImagePainter.FrameRegion(image, g, xform, frameIndex)
            End Using

            ' advance to next frame
            frameIndex = frameIndex + 1
            If frameIndex &gt; RasterImagePainter.MaxRegionFrameIndex Then
               frameIndex = 0
            End If
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FrameRegionExample()
      {
         FrameRegionForm f = new FrameRegionForm();
         f.ShowDialog();
      }

      class FrameRegionForm : Form
      {
         private int frameIndex;
         private RasterImage image;
         private System.Windows.Forms.Timer timer;
         private bool fillRegion;

         public FrameRegionForm()
         {
            // Load the image
            using(RasterCodecs codecs = new RasterCodecs())
            {
               string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
               image = codecs.Load(srcFileName);
            }

            // Add a region to the image
            LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
            RasterRegionXForm xform = new RasterRegionXForm();
            xform.ViewPerspective = RasterViewPerspective.TopLeft;
            image.AddEllipseToRegion(xform, rc, RasterRegionCombineMode.Set);

            // initialize the frame index
            frameIndex = 0;

            fillRegion = true;

            Text = "Double click to enable/disable filling the region";

            // Create the timer
            timer = new System.Windows.Forms.Timer();
            timer.Interval = 100;
            timer.Tick += new EventHandler(timer_Tick);
            timer.Start();
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               if(timer != null)
               {
                  timer.Dispose();
               }

               if(image != null)
               {
                  image.Dispose();
               }

            }

            base.Dispose(disposing);
         }

         protected override void OnDoubleClick(EventArgs e)
         {
            fillRegion = !fillRegion;
            Invalidate();

            base.OnDoubleClick(e);
         }

         private RasterRegionXForm GetXForm(LeadRect destRect)
         {
            // Calculate xform when the image is painted into 'destRect'
            RasterRegionXForm xform = new RasterRegionXForm();
            xform.ViewPerspective = RasterViewPerspective.TopLeft;
            xform.XOffset = destRect.Left;
            xform.YOffset = destRect.Top;
            xform.XScalarDenominator = image.Width;
            xform.XScalarNumerator = destRect.Width;
            xform.YScalarDenominator = image.Height;
            xform.YScalarNumerator = destRect.Height;

            return xform;
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
                image.ImageWidth,
                image.ImageHeight,
                destRect,
                RasterPaintSizeMode.Fit,
                RasterPaintAlignMode.Center,
                RasterPaintAlignMode.Center);

            LeadRect clipRect = LeadRect.FromLTRB(e.ClipRectangle.Left, e.ClipRectangle.Top, e.ClipRectangle.Right, e.ClipRectangle.Bottom);
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, clipRect, RasterPaintProperties.Default);

            if(fillRegion)
            {
               RasterRegionXForm xform = GetXForm(destRect);
               RasterImagePainter.FillRegion(image, e.Graphics, xform, new RasterColor(255, 0, 255));
            }

            base.OnPaint(e);
         }

         private void timer_Tick(object sender, EventArgs e)
         {
            // Frame the image region
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);

            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            RasterRegionXForm xform = GetXForm(destRect);

            using(Graphics g = CreateGraphics())
            {
               RasterImagePainter.FrameRegion(image, g, xform, frameIndex);
            }

            // advance to next frame
            frameIndex++;
            if(frameIndex &gt; RasterImagePainter.MaxRegionFrameIndex)
            {
               frameIndex = 0;
            }
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.FrameRegion-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterRegionXForm,System.Int32)">
      <summary>
            Displays an outline of the image region in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">Windows device context handle where the image is displayed and where the frame is to appear.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates
            and image coordinates.</param>
      <param name="frameIndex">Zero-index of the frame to display. Possible values are from 0 to
            <see cref="F:Leadtools.Drawing.RasterImagePainter.MaxRegionFrameIndex" />. You can animate the region frame by cycling between these values.</param>
      <keywords>Device Context|Windows device context|DC</keywords>
      <remarks>
        <para>If the region includes noncontiguous shapes, each shape is outlined. The outline, itself, is inside the region.</para>
        <para>Before calling this method, create a <see cref="T:Leadtools.RasterRegionXForm" /> object and set its values, which LEADTOOLS uses to
            translate between device context coordinates and image coordinates.</para>
        <para>This method is designed to produce an animated frame, which you can implement by calling the method with a timer
            event that cycles through the possible frame types.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see> and
            <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.FillRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,Leadtools.RasterColor)">
      <summary>
            Highlights a region by displaying a filled, color representation of the region in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">Graphics object where the image is displayed and where the frame is to appear.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates
            and image coordinates.</param>
      <param name="color">The color value to be XORed with colors within a region to determine the new colors for displaying
            the region. The color corresponding to a particular part of the region is determined as follows:
            <c>Region Color Displayed = (color of pixel in region) XOR (crRgnColor)</c></param>
      <remarks>
        <para>This method is particularly useful when displaying regions with black and white images. All black pixels in a
            region are displayed with color specified by <paramref name="color" />. and all white pixels are displayed
            ~(<paramref name="color" />). For example, suppose that <paramref name="color" /> is light green (BGR 0x80FF40). All
            black pixels in the region are displayed as <paramref name="color" />. All white pixels in the region are displayed
            as 0xFFFFFF XOR 0x80FF40 = 0x7F00BF, which is purple.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.FillRegion(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterRegionXForm,Leadtools.RasterColor)">
      <summary>
            Highlights a region by displaying a filled, color representation of the region in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">Windows device context handle where the image is displayed and where the frame is to appear.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates
            and image coordinates.</param>
      <param name="color">The color value to be XORed with colors within a region to determine the new colors for displaying
            the region. The color corresponding to a particular part of the region is determined as follows:
            <c>Region Color Displayed = (color of pixel in region) XOR (crRgnColor)</c></param>
      <remarks>
        <para>This method is particularly useful when displaying regions with black and white images. All black pixels in a
            region are displayed with color specified by <paramref name="color" />. and all white pixels are displayed
            ~(<paramref name="color" />). For example, suppose that <paramref name="color" /> is light green (BGR 0x80FF40). All
            black pixels in the region are displayed as <paramref name="color" />. All white pixels in the region are displayed
            as 0xFFFFFF XOR 0x80FF40 = 0x7F00BF, which is purple.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.FrameRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.RasterRegionXForm,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <keywords>Painting|Painting an image | Device Context|Windows device context|DC</keywords>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image will be displayed.</param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="graphics" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="graphics" /> object. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>If the destination <see cref="T:System.Drawing.Graphics" /> object has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>Assuming the source rectangle is the whole image, this method lets you specify a source rectangle (with coordinates
            relative to the image) and a destination rectangle (with coordinates relative to the destination <see cref="T:System.Drawing.Graphics" />
            object). Scaling of the displayed image depends on the relationship between these two rectangles, as shown in the following
            illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination <see cref="T:System.Drawing.Graphics" /> object. In fact, it is common for the
            display rectangle to be bigger than the destination <see cref="T:System.Drawing.Graphics" /> dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
        <para>For more information, refer to 
            
            <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates of the <paramref name="srcRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="graphics" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="graphics" /> object. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <keywords>GDI|GDI+|Device Context|DC|Windows device context</keywords>
      <remarks>
        <para>If the destination <see cref="T:System.Drawing.Graphics" /> object has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>This method lets you specify a source rectangle (with coordinates relative to the image) and a destination rectangle
            (with coordinates relative to the destination <see cref="T:System.Drawing.Graphics" /> object). Scaling of the displayed image depends on
            the relationship between these two rectangles, as shown in the following illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination <see cref="T:System.Drawing.Graphics" /> object. In fact, it is common for the
            display rectangle to be bigger than the destination <see cref="T:System.Drawing.Graphics" /> dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
        <para>For more information, refer to 
            <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>.
            </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintExample()
         Dim f As New PaintForm()
         f.ShowDialog()
      End Sub

      Class PaintForm
         Inherits Form
         Private image As RasterImage
         Private props As RasterPaintProperties

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            image = codecs.Load(srcFileName)

            Text = "Normal - doubleclick to change."
            props = RasterPaintProperties.Default
            props.PaintDisplayMode = RasterPaintDisplayModeFlags.None
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnDoubleClick(ByVal e As EventArgs)
            If (props.PaintDisplayMode And RasterPaintDisplayModeFlags.ScaleToGray) = RasterPaintDisplayModeFlags.ScaleToGray Then
               Text = "Normal - doubleclick to change."
               props.PaintDisplayMode = props.PaintDisplayMode And Not RasterPaintDisplayModeFlags.ScaleToGray
            Else
               Text = "ScaleToGray - doubleclick to change."
               props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
            End If

            Invalidate()

            MyBase.OnDoubleClick(e)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, destRect, props)

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintExample()
      {
         PaintForm f = new PaintForm();
         f.ShowDialog();
      }

      class PaintForm : Form
      {
         private RasterImage image;
         private RasterPaintProperties props;

         public PaintForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            image = codecs.Load(srcFileName);

            Text = "Normal - doubleclick to change.";
            props = RasterPaintProperties.Default;
            props.PaintDisplayMode = RasterPaintDisplayModeFlags.None;
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnDoubleClick(EventArgs e)
         {
            if((props.PaintDisplayMode &amp; RasterPaintDisplayModeFlags.ScaleToGray) == RasterPaintDisplayModeFlags.ScaleToGray)
            {
               Text = "Normal - doubleclick to change.";
               props.PaintDisplayMode &amp;= ~RasterPaintDisplayModeFlags.ScaleToGray;
            }
            else
            {
               Text = "ScaleToGray - doubleclick to change.";
               props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
            }

            Invalidate();

            base.OnDoubleClick(e);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, destRect, props);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.Paint-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates of the <paramref name="srcRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="graphics" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="graphics" /> object. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is used
            for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image that
            had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <keywords>GDI|GDI+|Device context|Windows device context|DC</keywords>
      <remarks>
        <para>If the destination <see cref="T:System.Drawing.Graphics" /> object has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>This method lets you specify a source rectangle (with coordinates relative to the image) and a destination rectangle
            (with coordinates relative to the destination <see cref="T:System.Drawing.Graphics" /> object). Scaling of the displayed image depends on
            the relationship between these two rectangles, as shown in the following illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination <see cref="T:System.Drawing.Graphics" /> object. In fact, it is common for the
            display rectangle to be bigger than the destination <see cref="T:System.Drawing.Graphics" /> dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context where the image will be displayed.</param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="hdc" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="hdc" /> handle. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <keywords>Device Context|Windows device context|DC</keywords>
      <remarks>
        <para>If the destination device context handle has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>Assuming the source rectangle is the whole image, this method lets you specify a source rectangle (with coordinates
            relative to the image) and a destination rectangle (with coordinates relative to the destination device context
            object). Scaling of the displayed image depends on the relationship between these two rectangles, as shown in the following
            illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination device context. In fact, it is common for the
            display rectangle to be bigger than the destination device context dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
        <para>For more information, refer to 
            <see cref="T:Leadtools.Topics.UsingThePaintEngineProperty">Using The PaintEngine Property</see>.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context where the image will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates of the <paramref name="srcRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="hdc" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="hdc" /> handle. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <keywords>Device Context|Windows device context|DC</keywords>
      <remarks>
        <para>If the destination device context handle has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>This method lets you specify a source rectangle (with coordinates relative to the image) and a destination rectangle
            (with coordinates relative to the destination device context). Scaling of the displayed image depends on
            the relationship between these two rectangles, as shown in the following illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination device context. In fact, it is common for the
            display rectangle to be bigger than the destination device context dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintDCExample()
         Dim f As New PaintDCForm()
         f.ShowDialog()
      End Sub

      Class PaintDCForm
         Inherits Form
         Private image As RasterImage
         Private props As RasterPaintProperties

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
            image = codecs.Load(srcFileName)

            Text = "Normal - doubleclick to change."
            props = RasterPaintProperties.Default
            props.PaintDisplayMode = RasterPaintDisplayModeFlags.None
            props.UsePaintPalette = True
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnDoubleClick(ByVal e As EventArgs)
            If (props.PaintDisplayMode And RasterPaintDisplayModeFlags.ScaleToGray) = RasterPaintDisplayModeFlags.ScaleToGray Then
               Text = "Normal - doubleclick to change."
               props.PaintDisplayMode = props.PaintDisplayMode And Not RasterPaintDisplayModeFlags.ScaleToGray
            Else
               Text = "ScaleToGray - doubleclick to change."
               props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
            End If

            Invalidate()

            MyBase.OnDoubleClick(e)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            Dim hdc As IntPtr = e.Graphics.GetHdc()
            RasterImagePainter.Paint(image, hdc, LeadRect.Empty, destRect, props)
            e.Graphics.ReleaseHdc(hdc)

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintDCExample()
      {
         PaintDCForm f = new PaintDCForm();
         f.ShowDialog();
      }

      class PaintDCForm : Form
      {
         private RasterImage image;
         private RasterPaintProperties props;

         public PaintDCForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
            image = codecs.Load(srcFileName);

            Text = "Normal - doubleclick to change.";
            props = RasterPaintProperties.Default;
            props.PaintDisplayMode = RasterPaintDisplayModeFlags.None;
            props.UsePaintPalette = true;
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnDoubleClick(EventArgs e)
         {
            if((props.PaintDisplayMode &amp; RasterPaintDisplayModeFlags.ScaleToGray) == RasterPaintDisplayModeFlags.ScaleToGray)
            {
               Text = "Normal - doubleclick to change.";
               props.PaintDisplayMode &amp;= ~RasterPaintDisplayModeFlags.ScaleToGray;
            }
            else
            {
               Text = "ScaleToGray - doubleclick to change.";
               props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
            }

            Invalidate();

            base.OnDoubleClick(e);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            IntPtr hdc = e.Graphics.GetHdc();
            RasterImagePainter.Paint(image, hdc, LeadRect.Empty, destRect, props);
            e.Graphics.ReleaseHdc(hdc);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintDC-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Displays this <see cref="T:Leadtools.RasterImage" /> in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates of the <paramref name="srcRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> are relative to the image. You can pass Rectangle.Empty to use the
            default, which matches the image.</para>
      </param>
      <param name="destRect">
        <see cref="T:Leadtools.LeadRect" />
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the image is scaled and positioned in <paramref name="hdc" />.</para>
        <para>The coordinates of <paramref name="destRect" /> are relative to the <paramref name="hdc" /> handle. There is no
            default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> values.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is used
            for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image that
            had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <keywords>Device Context|Windows device context|DC</keywords>
      <remarks>
        <para>If the destination device context handle has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>This method lets you specify a source rectangle (with coordinates relative to the image) and a destination rectangle
            (with coordinates relative to the destination device context object). Scaling of the displayed image depends on
            the relationship between these two rectangles, as shown in the following illustration:</para>
        <para>Note: These illustrations are for an image with a
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective. For an explanation of
            image coordinates and view perspectives, refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>. If the image is not in 
            <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see> view perspective, refer to
            <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>
          <img src="Paint1.gif" />
        </para>
        <para>In addition, you can specify a clipping area within either rectangle to limit the area to be painted. For the
            destination rectangle, a clipping area is commonly specified to repaint part of the image that was temporarily covered up.
            For a source rectangle, you can use a clipping area to update the display when only part of the image in the source
            rectangle has changed.</para>
        <para>The following illustration shows how specifying a source clipping area affects the display. Text has been added to
            the source image (using the image as a display surface), and the source clipping area specifies the area to be repainted.</para>
        <para>
          <img src="Paint2.gif" />
        </para>
        <para>You can specify the various rectangles in any way that meets your needs. Coordinates can have negative values and they
            can extend beyond the bounds of the image or destination device context handle. In fact, it is common for the
            display rectangle to be bigger than the destination device context handle dimension, where scroll bars are used to see
            different parts of the image.</para>
        <para>In simple cases, you can use this method as follows:</para>
        <para>
          <img src="Paint3.gif" />
        </para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image data from a buffer into a <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">The buffer that contains the image data to paint</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> where the data starts.</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>If the <paramref name="graphics" /> object has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be scaled
            to fit <paramref name="destRect" />.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines 
            as a negative value (-<paramref name="row" />), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
        <para>The following properties are used from this <see cref="T:Leadtools.RasterImage" />:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.RasterImage.GetPalette">RasterImage.GetPalette</see> if the image uses a palette.</description>
            </item>
          </list>
        </para>
        <para>Except for the buffer specifications, this method uses source and destination rectangles the same as
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. For a complete explanation, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>You can call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" /> from a callback procedure to paint an image while it is being loaded.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintBufferExample()
         Dim f As New PaintBufferForm()
         f.ShowDialog()
      End Sub

      Class PaintBufferForm
         Inherits Form
         Private image As RasterImage

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
            image = codecs.Load(srcFileName)

            Text = "PaintBuffer Example"
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            Dim buffer(image.BytesPerLine - 1) As Byte

            image.Access()
            For row As Integer = 0 To image.Height - 1
               image.GetRow(row, buffer, 0, image.BytesPerLine)
               RasterImagePainter.PaintBuffer(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, buffer, 0, row, 1, RasterPaintProperties.Default)
               Thread.Sleep(10)
            Next
            image.Release()

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintBufferExample()
      {
         PaintBufferForm f = new PaintBufferForm();
         f.ShowDialog();
      }

      class PaintBufferForm : Form
      {
         private RasterImage image;

         public PaintBufferForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
            image = codecs.Load(srcFileName);

            Text = "PaintBuffer Example";
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            byte[] buffer = new byte[image.BytesPerLine];

            image.Access();
            for(int row = 0; row &lt; image.Height; row++)
            {
               image.GetRow(row, buffer, 0, image.BytesPerLine);
               RasterImagePainter.PaintBuffer(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, buffer, 0, row, 1, RasterPaintProperties.Default);
               Thread.Sleep(10);
            }
            image.Release();

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintBuffer-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.IntPtr,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image data from an unmanaged memory buffer into a <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">Pointer to the unmanaged memory buffer that contains the image data to paint</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>If the <paramref name="graphics" /> object has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be scaled
            to fit <paramref name="destRect" />.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines 
            as a negative value (-<paramref name="row" />), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
        <para>The following properties are used from this <see cref="T:Leadtools.RasterImage" />:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.RasterImage.GetPalette">RasterImage.GetPalette</see> if the image uses a palette.</description>
            </item>
          </list>
        </para>
        <para>Except for the buffer specifications, this method uses source and destination rectangles the same as
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. For a complete explanation, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>You can call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" /> from a callback procedure to paint an image while it is being loaded.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image data from a buffer into a Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">The buffer that contains the image data to paint</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> where the data starts.</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>If the <paramref name="hdc" /> handle has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be scaled
            to fit <paramref name="destRect" />.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines 
            as a negative value (-<paramref name="row" />), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
        <para>The following properties are used from this <see cref="T:Leadtools.RasterImage" />:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.RasterImage.GetPalette">RasterImage.GetPalette</see> if the image uses a palette.</description>
            </item>
          </list>
        </para>
        <para>Except for the buffer specifications, this method uses source and destination rectangles the same as
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. For a complete explanation, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>You can call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" /> from a callback procedure to paint an image while it is being loaded.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.IntPtr,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image data from an unmanaged memory buffer into a Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">Pointer to the unmanaged memory buffer that contains the image data to paint</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>If the <paramref name="hdc" /> handle has fewer colors than the image, this method dithers the output to that
            display surface without affecting the actual image data.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be scaled
            to fit <paramref name="destRect" />.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines 
            as a negative value (-<paramref name="row" />), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
        <para>The following properties are used from this <see cref="T:Leadtools.RasterImage" />:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="M:Leadtools.RasterImage.GetPalette">RasterImage.GetPalette</see> if the image uses a palette.</description>
            </item>
          </list>
        </para>
        <para>Except for the buffer specifications, this method uses source and destination rectangles the same as
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. For a complete explanation, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>You can call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" /> from a callback procedure to paint an image while it is being loaded.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints the image region to a <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image region will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works the same as <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintRegionExample()
         Dim f As New PaintRegionForm()
         f.ShowDialog()
      End Sub

      Class PaintRegionForm
         Inherits Form
         Private image As RasterImage

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
            image = codecs.Load(srcFileName)

            ' add a region to the image
            image.AddEllipseToRegion( _
               RasterRegionXForm.Default, _
               New LeadRect(image.Width \ 4, image.Height \ 4, image.Width \ 2, image.Height \ 2), _
               RasterRegionCombineMode.Set)

            Text = "PaintRegion Example"
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            RasterImagePainter.PaintRegion(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, RasterPaintProperties.Default)

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintRegionExample()
      {
         PaintRegionForm f = new PaintRegionForm();
         f.ShowDialog();
      }

      class PaintRegionForm : Form
      {
         private RasterImage image;

         public PaintRegionForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
            image = codecs.Load(srcFileName);

            // add a region to the image
            image.AddEllipseToRegion(
               RasterRegionXForm.Default,
               new LeadRect(image.Width / 4, image.Height / 4, image.Width / 2, image.Height / 2),
               RasterRegionCombineMode.Set);

            Text = "PaintRegion Example";
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            RasterImagePainter.PaintRegion(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, RasterPaintProperties.Default);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintRegion-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegion(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints the image region to a Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works the same as <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegion(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image region data from a buffer into a <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">The buffer that contains the image data to paint</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> where the data starts.</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works the same as <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintRegionBufferExample()
         Dim f As New PaintRegionBufferForm()
         f.ShowDialog()
      End Sub

      Class PaintRegionBufferForm
         Inherits Form
         Private image As RasterImage

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
            image = codecs.Load(srcFileName)

            ' add a region to the image
            image.AddEllipseToRegion( _
               RasterRegionXForm.Default, _
               New LeadRect(image.Width \ 4, image.Height \ 4, image.Width \ 2, image.Height \ 2), _
               RasterRegionCombineMode.Set)

            Text = "PaintRegionBuffer Example"
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)

            Dim buffer(image.BytesPerLine - 1) As Byte

            image.Access()
            For row As Integer = 0 To image.Height - 1
               image.GetRow(row, buffer, 0, image.BytesPerLine)
               RasterImagePainter.PaintRegionBuffer(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, buffer, 0, row, 1, RasterPaintProperties.Default)
               Thread.Sleep(20)
            Next
            image.Release()

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintRegionBufferExample()
      {
         PaintRegionBufferForm f = new PaintRegionBufferForm();
         f.ShowDialog();
      }

      class PaintRegionBufferForm : Form
      {
         private RasterImage image;

         public PaintRegionBufferForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
            image = codecs.Load(srcFileName);

            // add a region to the image
            image.AddEllipseToRegion(
               RasterRegionXForm.Default,
               new LeadRect(image.Width / 4, image.Height / 4, image.Width / 2, image.Height / 2),
               RasterRegionCombineMode.Set);

            Text = "PaintRegionBuffer Example";
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);

            byte[] buffer = new byte[image.BytesPerLine];

            image.Access();
            for(int row = 0; row &lt; image.Height; row++)
            {
               image.GetRow(row, buffer, 0, image.BytesPerLine);
               RasterImagePainter.PaintRegionBuffer(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, buffer, 0, row, 1, RasterPaintProperties.Default);
               Thread.Sleep(20);
            }
            image.Release();

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintRegionBuffer-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.IntPtr,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image region data from an unmanaged memory buffer into a <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">Pointer to the unmanaged memory buffer that contains the image data to paint</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines by using a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works like <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image region data from a buffer into a Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">The buffer that contains the image data to paint</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> where the data starts.</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works the same as <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.IntPtr,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints image region data from an unmanaged memory buffer into a Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the image data will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="buffer">Pointer to the unmanaged memory buffer that contains the image data to paint</param>
      <param name="row">The first row to paint. The painted portion of any row may be limited by the rectangle parameters.</param>
      <param name="count">
        <para>The number of rows to paint. The painted portion of any row may be limited by the rectangle parameters.</para>
        <para>If the image data in <paramref name="buffer" /> is compressed 1-bit data, you can specify the number of lines as a
            negative value (<c>-lines</c>), as explained in <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method works the same as <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />, except that only the image region is painted</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegionBuffer(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,System.Byte[],System.Int32,System.Int32,System.Int32,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintCmykPlanes(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties,System.Object)">
      <summary>
            Displays the CMYK planes stored in the image in the given <see cref="T:System.Drawing.Graphics" /> object.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination <see cref="T:System.Drawing.Graphics" /> object where the CMYK planes will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="graphics" /> object.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="graphics" /> object.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the <see cref="T:System.Drawing.Graphics" /> object. You can pass
            Rectangle.Empty to use the default, which matches the <see cref="T:System.Drawing.Graphics" /> object. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <param name="colorConverter">Optional <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object used to convert CMYK data to
            BGR during painting. Pass null (Nothing in VB) to let LEADTOOLS use the built-in color conversion functions.</param>
      <remarks>
        <para>The image must contain pages that represent each of the CMYK planes.</para>
        <para>The data is automatically converted to BGR and dithered (if necessary) without affecting the original data in the
            image.</para>
        <para>The image planes are typically created using
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.IO.Stream,System.Int32,System.Int32)">RasterCodecs.LoadCmykPlanes</see>.</para>
        <para>Windows can only paint BGR data. Therefore, we need to convert CMYK data to BGR during the painting process. You will
            notice that the painting of regular images (which are already BGR) is faster than the painting of CMYK planes.</para>
        <para>The color conversion can be performed using <see cref="T:Leadtools.Drawing.RasterColorConverter" />.</para>
        <para>These conversions are accurate, but are slower than the built-in CMYK-&gt;RGB conversion formulas. To use the accurate
            conversions, create a <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object and pass it as
            <paramref name="colorConverter" />.  To use the fast conversions, pass null (Nothing for Visual Basic) for
            <paramref name="colorConverter" />.</para>
        <para>Note that there is a visible difference between using a <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object or
            not. Also, make sure you create a correct CMYK-&gt;BGR <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be
            scaled to fit <paramref name="destRect" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintCmykPlanesExample()
         Dim f As New PaintCmykPlanesForm()
         f.ShowDialog()
      End Sub

      Class PaintCmykPlanesForm
         Inherits Form
         Private image As RasterImage

         Public Sub New()
            ' Load the cmyk planes
            Dim codecs As New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ET\src_cmyk_image.tif")
            image = codecs.LoadCmykPlanes(srcFileName, 0, 1)

            Text = "PaintCmykPlanes Example"
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)
            Dim props As RasterPaintProperties = RasterPaintProperties.Default
            props.UsePaintPalette = True
            RasterImagePainter.PaintCmykPlanes(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, props, Nothing)

            MyBase.OnPaint(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaintCmykPlanesExample()
      {
         PaintCmykPlanesForm f = new PaintCmykPlanesForm();
         f.ShowDialog();
      }

      class PaintCmykPlanesForm : Form
      {
         private RasterImage image;

         public PaintCmykPlanesForm()
         {
            // Load the cmyk planes
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, @"ET\src_cmyk_image.tif");
            image = codecs.LoadCmykPlanes(srcFileName, 0, 1);

            Text = "PaintCmykPlanes Example";
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);
            RasterPaintProperties props = RasterPaintProperties.Default;
            props.UsePaintPalette = true;
            RasterImagePainter.PaintCmykPlanes(image, e.Graphics, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, props, null);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintCmykPlanes-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintCmykPlanes(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties,System.Object)">
      <summary>
            Displays the CMYK planes stored in the image in the given Windows device context handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination Windows device context handle where the CMYK planes will be displayed.</param>
      <param name="srcRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the part of the image to use as the display source.</para>
        <para>The coordinates in the <paramref name="srcRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image.</para>
      </param>
      <param name="srcClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object specifies the portion of the display source to paint. Generally, this is used for
            updating the display when part of the source image has changed.</para>
        <para>The coordinates in the <paramref name="srcClipRect" /> rectangle are relative to the image. You can pass Rectangle.Empty to
            use the default, which matches the image</para>
      </param>
      <param name="destRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that determines how the source rectangle is scaled and how the image is positioned in
            the destination <paramref name="hdc" /> handle.</para>
        <para>The coordinates in the <paramref name="destRect" /> object are relative to the <paramref name="hdc" /> handle.
            There is no default for this parameter. You must specify the <see cref="T:Leadtools.LeadRect" /> object.</para>
      </param>
      <param name="destClipRect">
        <para>A <see cref="T:Leadtools.LeadRect" /> object that specifies the portion of the display rectangle to paint. Generally, this is
            used for updating changes in the display surface, such as when a user moves another window, uncovering a part of the image
            that had been covered up.</para>
        <para>The coordinates in the <paramref name="destClipRect" /> are relative to the device context handle. You can pass
            Rectangle.Empty to use the default, which matches the device context handle. In most cases, however, you should use
            the rectangle returned by the .NET <see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle">PaintEventArgs.ClipRectangle</see> or 
            Windows WM_PAINT message.</para>
      </param>
      <param name="properties">Options for the display.</param>
      <param name="colorConverter">Optional <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object used to convert CMYK data to
            BGR during painting. Pass null (Nothing in VB) to let LEADTOOLS use the built-in color conversion functions.</param>
      <remarks>
        <para>The image must contain pages that represent each of the CMYK planes.</para>
        <para>The data is automatically converted to BGR and dithered (if necessary) without affecting the original data in the
            image.</para>
        <para>The image planes are typically created using
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadCmykPlanes(System.IO.Stream,System.Int32,System.Int32)">RasterCodecs.LoadCmykPlanes</see>.</para>
        <para>Windows can only paint BGR data. Therefore, we need to convert CMYK data to BGR during the painting process. You will
            notice that the painting of regular images (which are already BGR) is faster than the painting of CMYK planes.</para>
        <para>The color conversion can be performed using <see cref="T:Leadtools.Drawing.RasterColorConverter" />.</para>
        <para>These conversions are accurate, but are slower than the built-in CMYK-&gt;RGB conversion formulas. To use the accurate
            conversions, create a <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object and pass it as
            <paramref name="colorConverter" />.  To use the fast conversions, pass null (Nothing for Visual Basic) for
            <paramref name="colorConverter" />.</para>
        <para>Note that there is a visible difference between using a <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object or
            not. Also, make sure you create a correct CMYK-&gt;BGR <see cref="T:Leadtools.Drawing.RasterColorConverter" /> object.</para>
        <para>If <paramref name="destRect" /> is larger or smaller than the image's actual dimensions, then the image will be
            scaled to fit <paramref name="destRect" />.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.HandlingPaletteChanges">Handling Palette Changes</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheSetDisplayModeMethod">Flags for the PaintDisplayMode Property</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintCmykPlanes(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties,System.Object)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints the overlay at the specified index. Use this method to paint overlays that are not automatically painted.
            </summary>
      <param name="image">The source image.</param>
      <param name="graphics">The destination graphics object where the image will be displayed.</param>
      <param name="index">The index of the overlay used for painting. The overlay should have an image. If the overlay
            is embedded into an image bitplane, make sure you create an overlay image prior to calling this method.  This index
            is zero-based.</param>
      <param name="srcRect">Rectangle which determines the portion of the image to paint.</param>
      <param name="srcClipRect">Rectangle which further clips the source image.</param>
      <param name="destRect">Rectangle which determines where the image is placed, and how it is scaled.</param>
      <param name="destClipRect">Rectangle which clips the image display.</param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method will paint an overlay image. For more information on the paint rectangles, see <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>
          <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> will paint all the overlays that have 
            <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> set to true. The overlays are
            painted in ascending index order: overlay 0 is painted first, then overlay 1, etc.</para>
        <para>Use this method to manually paint an overlay. For example, to change the order in which the overlays are painted,
            set the <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> property of the
            overlay to false then call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> directly.</para>
        <para>To temporarily make an overlay top-most, call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> after <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. To permanently
            make an overlay top-most, change its index and give it the highest defined index.</para>
        <para>The overlay image's 1 pixels are painted with the color set in the
            <see cref="P:Leadtools.RasterOverlayAttributes.Color">RasterOverlayAttributes.Color</see> property of the overlay. The overlay
            image's 0 pixels are considered transparent.</para>
        <para>For more information on the overlay attributes, including the
            <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> property and the
            <see cref="P:Leadtools.RasterOverlayAttributes.Color">RasterOverlayAttributes.Color</see> property, refer to
            <see cref="T:Leadtools.RasterOverlayAttributes" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaintOverlayExample()
         Dim f As New PaintOverlayForm()
         f.ShowDialog()
      End Sub

      Class PaintOverlayForm
         Inherits Form
         Private image As RasterImage
         Private props As RasterPaintProperties

         Public Sub New()
            ' Load the image
            Dim codecs As New RasterCodecs()

            image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Image2.dcm")

            Using overlay As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif")
               Dim cmd As New ResizeCommand()
               Using destImage As New RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 1, RasterByteOrder.Bgr, image.ViewPerspective, Nothing, IntPtr.Zero, 0)
                  cmd.Flags = RasterSizeFlags.FavorBlack
                  cmd.DestinationImage = destImage
                  cmd.Run(overlay)
                  image.SetOverlayImage(0, destImage, RasterGetSetOverlayImageMode.Copy)
               End Using
            End Using

            Dim attributes As RasterOverlayAttributes = image.GetOverlayAttributes(0, _
               RasterGetSetOverlayAttributesFlags.Color Or _
               RasterGetSetOverlayAttributesFlags.Flags Or _
               RasterGetSetOverlayAttributesFlags.Origin Or _
               RasterGetSetOverlayAttributesFlags.BitIndex)

            attributes.AutoPaint = False
            attributes.Color = New RasterColor(255, 0, 0)

            image.UpdateOverlayAttributes( _
               0, _
               attributes, _
               RasterGetSetOverlayAttributesFlags.Color Or _
               RasterGetSetOverlayAttributesFlags.Flags Or _
               RasterGetSetOverlayAttributesFlags.Origin Or _
               RasterGetSetOverlayAttributesFlags.BitIndex)

            Text = "PaintOverlay Example"
            props = RasterPaintProperties.Default
            props.UsePaintPalette = True
         End Sub

         Protected Overrides Sub Dispose(ByVal disposing As Boolean)
            ' Clean up
            If disposing Then
               image.Dispose()
            End If

            MyBase.Dispose(disposing)
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            ' Draw the image fit and center on this form
            Dim destRect As LeadRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom)
            destRect = RasterImage.CalculatePaintModeRectangle( _
               image.ImageWidth, _
               image.ImageHeight, _
               destRect, _
               RasterPaintSizeMode.Fit, _
               RasterPaintAlignMode.Center, _
               RasterPaintAlignMode.Center)
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, destRect, props)
            RasterImagePainter.PaintOverlay(image, e.Graphics, 0, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, props)

            MyBase.OnPaint(e)
         End Sub
      End Class</code>
        <code lang="CS">      public void PaintOverlayExample()
      {
         PaintOverlayForm f = new PaintOverlayForm();
         f.ShowDialog();
      }

      class PaintOverlayForm : Form
      {
         private RasterImage image;
         private RasterPaintProperties props;

         public PaintOverlayForm()
         {
            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image2.dcm"));

            using(RasterImage overlay = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,  "Ocr1.tif")))
            {
               ResizeCommand cmd = new ResizeCommand();
               using(RasterImage destImage = new RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 1, RasterByteOrder.Bgr, image.ViewPerspective, null, IntPtr.Zero, 0))
               {
                  cmd.Flags = RasterSizeFlags.FavorBlack;
                  cmd.DestinationImage = destImage;
                  cmd.Run(overlay);
                  image.SetOverlayImage(0, destImage, RasterGetSetOverlayImageMode.Copy);
               }
            }

            RasterOverlayAttributes attributes = image.GetOverlayAttributes(0,
               RasterGetSetOverlayAttributesFlags.Color |
               RasterGetSetOverlayAttributesFlags.Flags |
               RasterGetSetOverlayAttributesFlags.Origin |
               RasterGetSetOverlayAttributesFlags.BitIndex);

            attributes.AutoPaint = false;
            attributes.Color = new RasterColor(255, 0, 0);

            image.UpdateOverlayAttributes(
               0,
               attributes,
               RasterGetSetOverlayAttributesFlags.Color |
               RasterGetSetOverlayAttributesFlags.Flags |
               RasterGetSetOverlayAttributesFlags.Origin |
               RasterGetSetOverlayAttributesFlags.BitIndex);

            Text = "PaintOverlay Example";
            props = RasterPaintProperties.Default;
            props.UsePaintPalette = true;
         }

         protected override void Dispose(bool disposing)
         {
            // Clean up
            if(disposing)
            {
               image.Dispose();
            }

            base.Dispose(disposing);
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            // Draw the image fit and center on this form
            LeadRect destRect = LeadRect.FromLTRB(ClientRectangle.Left, ClientRectangle.Top, ClientRectangle.Right, ClientRectangle.Bottom);
            destRect = RasterImage.CalculatePaintModeRectangle(
               image.ImageWidth,
               image.ImageHeight,
               destRect,
               RasterPaintSizeMode.Fit,
               RasterPaintAlignMode.Center,
               RasterPaintAlignMode.Center);
            RasterImagePainter.Paint(image, e.Graphics, LeadRect.Empty, destRect, props);
            RasterImagePainter.PaintOverlay(image, e.Graphics, 0, LeadRect.Empty, LeadRect.Empty, destRect, LeadRect.Empty, props);

            base.OnPaint(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePainter.PaintOverlay-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.IntPtr,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">
      <summary>
            Paints the overlay at the specified index. Use this method to paint overlays that are not automatically painted.
            </summary>
      <param name="image">The source image.</param>
      <param name="hdc">The destination device context where the image will be displayed.</param>
      <param name="index">The index of the overlay used for painting. The overlay should have an image. If the overlay
            is embedded into an image bitplane, make sure you create an overlay image prior to calling this method.  This index
            is zero-based.</param>
      <param name="srcRect">Rectangle which determines the portion of the image to paint.</param>
      <param name="srcClipRect">Rectangle which further clips the source image.</param>
      <param name="destRect">Rectangle which determines where the image is placed, and how it is scaled.</param>
      <param name="destClipRect">Rectangle which clips the image display.</param>
      <param name="properties">Options for the display.</param>
      <remarks>
        <para>This method will paint an overlay image. For more information on the paint rectangles, see <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</para>
        <para>
          <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> will paint all the overlays that have 
            <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> set to true. The overlays are
            painted in ascending index order: overlay 0 is painted first, then overlay 1, etc.</para>
        <para>Use this method to manually paint an overlay. For example, to change the order in which the overlays are painted,
            set the <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> property of the
            overlay to false then call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> directly.</para>
        <para>To temporarily make an overlay top-most, call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> after <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.Drawing.Graphics,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />. To permanently
            make an overlay top-most, change its index and give it the highest defined index.</para>
        <para>The overlay image's 1 pixels are painted with the color set in the
            <see cref="P:Leadtools.RasterOverlayAttributes.Color">RasterOverlayAttributes.Color</see> property of the overlay. The overlay
            image's 0 pixels are considered transparent.</para>
        <para>For more information on the overlay attributes, including the
            <see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see> property and the
            <see cref="P:Leadtools.RasterOverlayAttributes.Color">RasterOverlayAttributes.Color</see> property, refer to
            <see cref="T:Leadtools.RasterOverlayAttributes" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintOverlay(Leadtools.RasterImage,System.Drawing.Graphics,System.Int32,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" />.</example>
    </member>
    <member name="T:Leadtools.Drawing.RasterRegionConverter">
      <summary>
            Converts between a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> and GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> objects.
            </summary>
      <remarks>
        <para>This class lets you easily convert between a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object and a GDI HRGN or System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of an area of interest in a <see cref="T:Leadtools.RasterImage" /> that can be
            used in any platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS
            <see cref="T:Leadtools.RasterRegion" /> object to/from a GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterRegionConverterExample()
         ' Load an image 
         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim dstFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_Ellipse.jpg"
         Dim dstFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_EllipseTranslated.jpg"

         Dim codecs As New RasterCodecs()

         Dim image As RasterImage = codecs.Load(srcFileName)

         ' We will add an ellipse region to the image

         ' Using GDI+, create an elliptical region
         Dim gdipRegion As Region

         Using path As New GraphicsPath()
            path.AddEllipse(100, 200, 400, 300)
            gdipRegion = New Region(path)
         End Using

         ' Create a RasterRegion from this region
         Using region As RasterRegion = RasterRegionConverter.ConvertFromRegion(gdipRegion)
            ' Add this region to the image
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
         End Using

         gdipRegion.Dispose()

         ' Fill the image with a color
         Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red))
         cmd.Run(image)

         ' Save it
         codecs.Save(image, dstFileName1, RasterImageFormat.Jpeg, 24)

         ' Now get the GDI+ region from the image
         Using region As RasterRegion = image.GetRegion(Nothing)
            ' Convert it to GDI+
            gdipRegion = RasterRegionConverter.ConvertToRegion(region, Nothing)
         End Using

         ' Move the region 100 pixels to the right and bottom
         gdipRegion.Translate(100, 100)

         ' Re-set it into the image, fill again and save
         ' Create a RasterRegion from this region
         Using region As RasterRegion = RasterRegionConverter.ConvertFromRegion(gdipRegion)
            ' Add this region to the image
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
         End Using

         gdipRegion.Dispose()

         ' Fill the image with a color
         cmd = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
         cmd.Run(image)

         ' Save it
         codecs.Save(image, dstFileName2, RasterImageFormat.Jpeg, 24)

         image.Dispose()

         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void RasterRegionConverterExample()
      {
         // Load an image 
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string dstFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Ellipse.jpg");
         string dstFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_EllipseTranslated.jpg");

         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = codecs.Load(srcFileName);

         // We will add an ellipse region to the image

         // Using GDI+, create an elliptical region
         Region gdipRegion;

         using(GraphicsPath path = new GraphicsPath())
         {
            path.AddEllipse(100, 200, 400, 300);
            gdipRegion = new Region(path);
         }

         // Create a RasterRegion from this region
         using(RasterRegion region = RasterRegionConverter.ConvertFromRegion(gdipRegion))
         {
            // Add this region to the image
            image.SetRegion(null, region, RasterRegionCombineMode.Set);
         }

         gdipRegion.Dispose();

         // Fill the image with a color
         FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red));
         cmd.Run(image);

         // Save it
         codecs.Save(image, dstFileName1, RasterImageFormat.Jpeg, 24);

         // Now get the GDI+ region from the image
         using(RasterRegion region = image.GetRegion(null))
         {
            // Convert it to GDI+
            gdipRegion = RasterRegionConverter.ConvertToRegion(region, null);
         }

         // Move the region 100 pixels to the right and bottom
         gdipRegion.Translate(100, 100);

         // Re-set it into the image, fill again and save
         // Create a RasterRegion from this region
         using(RasterRegion region = RasterRegionConverter.ConvertFromRegion(gdipRegion))
         {
            // Add this region to the image
            image.SetRegion(null, region, RasterRegionCombineMode.Set);
         }

         gdipRegion.Dispose();

         // Fill the image with a color
         cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
         cmd.Run(image);

         // Save it
         codecs.Save(image, dstFileName2, RasterImageFormat.Jpeg, 24);

         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterRegionConverter.Gdip-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.ConvertToRegion(Leadtools.RasterRegion,Leadtools.RasterRegionXForm)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> to a System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.
            </summary>
      <param name="region">The source LEADTOOLS region. This parameter cannot be null (Nothing in Visual Basic).</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates.</param>
      <returns>The <see cref="T:System.Drawing.Region">System.Drawing.Region</see> object this method creates. You must dispose this object after using it.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of an area of interest in a <see cref="T:Leadtools.RasterImage" /> that can be
            used in any platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS
            <see cref="T:Leadtools.RasterRegion" /> object to/from a GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterRegionConverter" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.ConvertToRegionHandle(Leadtools.RasterRegion,Leadtools.RasterRegionXForm)">
      <summary>
            Converts a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> to a GDI HRGN object.
            </summary>
      <param name="region">The source LEADTOOLS region. This parameter cannot be null (Nothing in Visual Basic).</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates.</param>
      <returns>The GDI HRGN object this method creates. You must delete this object after using it using the Windows DeleteObject API.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of an area of interest in a <see cref="T:Leadtools.RasterImage" /> that can be
            used in any platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS
            <see cref="T:Leadtools.RasterRegion" /> object to/from a GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      ' Windows API to use in this example
      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function CreateEllipticRgn(ByVal nLeftRect As Integer, ByVal nTopRect As Integer, ByVal nRightRect As Integer, ByVal nBottomRect As Integer) As IntPtr
      End Function
      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function DeleteObject(ByVal hObject As IntPtr) As Integer
      End Function
      &lt;DllImport("Gdi32")&gt; _
      Private Shared Function OffsetRgn(ByVal hrgn As IntPtr, ByVal nXOffset As Integer, ByVal nYOffset As Integer) As Integer
      End Function

      Public Sub RasterRegionHandleExample()
         ' Load an image 
         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim dstFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_Ellipse.jpg"
         Dim dstFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_EllipseTranslated.jpg"

         Dim codecs As New RasterCodecs()

         Dim image As RasterImage = codecs.Load(srcFileName)

         ' We will add an ellipse region to the image

         ' Using GDI, create an elliptical region
         Dim gdiRegion As IntPtr = CreateEllipticRgn(100, 200, 100 + 400, 200 + 300)

         ' Create a RasterRegion from this region
         Using region As RasterRegion = RasterRegionConverter.ConvertFromRegionHandle(gdiRegion)
            ' Add this region to the image
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
         End Using

         DeleteObject(gdiRegion)

         ' Fill the image with a color
         Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red))
         cmd.Run(image)

         ' Save it
         codecs.Save(image, dstFileName1, RasterImageFormat.Jpeg, 24)

         ' Now get the GDI+ region from the image
         Using region As RasterRegion = image.GetRegion(Nothing)
            ' Convert it to GDI+
            gdiRegion = RasterRegionConverter.ConvertToRegionHandle(region, Nothing)
         End Using

         ' Move the region 100 pixels to the right and bottom
         OffsetRgn(gdiRegion, 100, 100)

         ' Re-set it into the image, fill again and save
         ' Create a RasterRegion from this region
         Using region As RasterRegion = RasterRegionConverter.ConvertFromRegionHandle(gdiRegion)
            ' Add this region to the image
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
         End Using

         DeleteObject(gdiRegion)

         ' Fill the image with a color
         cmd = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
         cmd.Run(image)

         ' Save it
         codecs.Save(image, dstFileName2, RasterImageFormat.Jpeg, 24)

         image.Dispose()

         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      // Windows API to use in this example
      [DllImport("Gdi32")]
      private static extern IntPtr CreateEllipticRgn(int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
      [DllImport("Gdi32")]
      private static extern int DeleteObject(IntPtr hObject);
      [DllImport("Gdi32")]
      private static extern int OffsetRgn(IntPtr hrgn, int nXOffset, int nYOffset);

      public void RasterRegionHandleExample()
      {
         // Load an image 
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string dstFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Ellipse.jpg");
         string dstFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_EllipseTranslated.jpg");

         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = codecs.Load(srcFileName);

         // We will add an ellipse region to the image

         // Using GDI, create an elliptical region
         IntPtr gdiRegion = CreateEllipticRgn(100, 200, 100 + 400, 200 + 300);

         // Create a RasterRegion from this region
         using(RasterRegion region = RasterRegionConverter.ConvertFromRegionHandle(gdiRegion))
         {
            // Add this region to the image
            image.SetRegion(null, region, RasterRegionCombineMode.Set);
         }

         DeleteObject(gdiRegion);

         // Fill the image with a color
         FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red));
         cmd.Run(image);

         // Save it
         codecs.Save(image, dstFileName1, RasterImageFormat.Jpeg, 24);

         // Now get the GDI+ region from the image
         using(RasterRegion region = image.GetRegion(null))
         {
            // Convert it to GDI+
            gdiRegion = RasterRegionConverter.ConvertToRegionHandle(region, null);
         }

         // Move the region 100 pixels to the right and bottom
         OffsetRgn(gdiRegion, 100, 100);

         // Re-set it into the image, fill again and save
         // Create a RasterRegion from this region
         using(RasterRegion region = RasterRegionConverter.ConvertFromRegionHandle(gdiRegion))
         {
            // Add this region to the image
            image.SetRegion(null, region, RasterRegionCombineMode.Set);
         }

         DeleteObject(gdiRegion);

         // Fill the image with a color
         cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
         cmd.Run(image);

         // Save it
         codecs.Save(image, dstFileName2, RasterImageFormat.Jpeg, 24);

         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterRegionConverter.Gdi-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.ConvertFromRegion(System.Drawing.Region)">
      <summary>
            Converts a System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object to a LEADTOOLS <see cref="T:Leadtools.RasterRegion" />.
            </summary>
      <param name="region">The source GDI+ region. This parameter cannot be null (Nothing in Visual Basic).</param>
      <returns>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object this method creates. You must dispose this object after using it.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of an area of interest in a <see cref="T:Leadtools.RasterImage" /> that can be
            used in any platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS
            <see cref="T:Leadtools.RasterRegion" /> object to/from a GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Drawing.RasterRegionConverter" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.ConvertFromRegionHandle(System.IntPtr)">
      <summary>
            Converts a GDI HRGN object to a LEADTOOLS <see cref="T:Leadtools.RasterRegion" />.
            </summary>
      <param name="hrgn">The source GDI HRGN object. This parameter cannot be IntPtr.Zero.</param>
      <returns>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object this method creates. You must dispose this object after using it.</returns>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of an area of interest in a <see cref="T:Leadtools.RasterImage" /> that can be
            used in any platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. Use this class To convert a LEADTOOLS
            <see cref="T:Leadtools.RasterRegion" /> object to/from a GDI HRGN and System.Drawing (GDI+) <see cref="T:System.Drawing.Region" /> object.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterRegionConverter.ConvertToRegionHandle(Leadtools.RasterRegion,Leadtools.RasterRegionXForm)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.AddRegionToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.IntPtr,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates a LEADTOOLS image region by adding the specified Windows region handle.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="region">The Windows region handle to add.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AddRegionToRegionGdi_Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim destFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_AddRegionToRegion.bmp"

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Create a GDI+ region
         Dim region As Region

         Using path As New GraphicsPath()
            path.AddRectangle(New Rectangle(100, 100, 200, 200))
            path.AddEllipse(New Rectangle(150, 150, 200, 200))
            region = New Region(path)
         End Using

         ' Get the Windows GDI handle for this region
         Dim hrgn As IntPtr

         Using btmp As New Bitmap(1, 1)
            Using graphics As Graphics = graphics.FromImage(btmp)
               hrgn = region.GetHrgn(graphics)
            End Using
         End Using

         ' Add this region to the raster image
         RasterRegionConverter.AddRegionToRegion(image, Nothing, hrgn, RasterRegionCombineMode.Set)

         region.ReleaseHrgn(hrgn)
         region.Dispose()

         ' Draw something on the image
         Dim command As New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void AddRegionToRegionGdi_Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRegionToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Create a GDI+ region
         Region region;

         using(GraphicsPath path = new GraphicsPath())
         {
            path.AddRectangle(new Rectangle(100, 100, 200, 200));
            path.AddEllipse(new Rectangle(150, 150, 200, 200));
            region = new Region(path);
         }

         // Get the Windows GDI handle for this region
         IntPtr hrgn;

         using(Bitmap btmp = new Bitmap(1, 1))
         {
            using(Graphics graphics = Graphics.FromImage(btmp))
            {
               hrgn = region.GetHrgn(graphics);
            }
         }

         // Add this region to the raster image
         RasterRegionConverter.AddRegionToRegion(image, null, hrgn, RasterRegionCombineMode.Set);

         region.ReleaseHrgn(hrgn);
         region.Dispose();

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterRegionConverter.AddRegionToRegionGdi-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.AddRegionToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Region,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates a LEADTOOLS image region by adding the specified GDI+ region.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="region">The GDI+ region to add.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AddRegionToRegionGdip_Example()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim destFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_ConvertToRegion.bmp"
         Dim destFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_AddRegionToRegion.bmp"

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add an ellipse inside a rectangle region to the image

         Dim rc As New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Create a GDI+ image from this raster image, then obtain a Graphics
         ' object to the GDI+ image, apply the region to it then fill it with red color
         Dim region As Region

         Using gdiPlusImage As Image = RasterImageConverter.ConvertToImage(image, ConvertToImageOptions.None)
            Using graphics As Graphics = graphics.FromImage(gdiPlusImage)
               Using rasterRegion As RasterRegion = image.GetRegion(Nothing)
                  region = RasterRegionConverter.ConvertToRegion(rasterRegion, Nothing)
                  graphics.Clip = region

                  ' This call should only fill the ellipse
                  graphics.FillRectangle(Brushes.Red, 0, 0, image.Width, image.Height)
               End Using
            End Using

            gdiPlusImage.Save(destFileName1, ImageFormat.Bmp)
         End Using

         ' Empty the region in the raster image and re-add it through the
         ' region object we got with AddRegionToRegion
         image.MakeRegionEmpty()

         RasterRegionConverter.AddRegionToRegion(image, Nothing, region, RasterRegionCombineMode.Set)
         Dim command As New FillCommand()
         command.Color = RasterColor.FromKnownColor(RasterKnownColor.Red)
         command.Run(image)
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24)

         region.Dispose()
         image.Dispose()
         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void AddRegionToRegionGdip_Example()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_ConvertToRegion.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRegionToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add an ellipse inside a rectangle region to the image

         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // Create a GDI+ image from this raster image, then obtain a Graphics
         // object to the GDI+ image, apply the region to it then fill it with red color
         Region region;

         using(Image gdiPlusImage = RasterImageConverter.ConvertToImage(image, ConvertToImageOptions.None))
         {
            using(Graphics graphics = Graphics.FromImage(gdiPlusImage))
            {
               using(RasterRegion rasterRegion = image.GetRegion(null))
               {
                  region = RasterRegionConverter.ConvertToRegion(rasterRegion, null);
                  graphics.Clip = region;

                  // This call should only fill the ellipse
                  graphics.FillRectangle(Brushes.Red, 0, 0, image.Width, image.Height);
               }
            }

            gdiPlusImage.Save(destFileName1, ImageFormat.Bmp);
         }

         // Empty the region in the raster image and re-add it through the
         // region object we got with AddRegionToRegion
         image.MakeRegionEmpty();

         RasterRegionConverter.AddRegionToRegion(image, null, region, RasterRegionCombineMode.Set);
         FillCommand command = new FillCommand();
         command.Color = RasterColor.FromKnownColor(RasterKnownColor.Red);
         command.Run(image);
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24);

         region.Dispose();
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterRegionConverter.AddRegionToRegionGdip-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.GetGdiPlusRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)">
      <summary>
            Gets the GDI+ data that describes the image region.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you
            specify <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and
            the view perspective defaults to the image view perspective.</param>
      <returns>A <see cref="T:System.Drawing.Drawing2D.RegionData" /> object that contains the information that describes the region in this <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)" /> to load or save an image region.</para>
        <para>The data returned by this method is the equivalent of the data returned using the GDI+ <see cref="M:System.Drawing.Region.GetRegionData">System.Drawing.Region.GetRegionData</see> method.</para>
        <para>To get the region data as Windows API HRGN data, use <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)" />.</para>
        <para>To get the region data as platform independent byte array, use <see cref="M:Leadtools.RasterRegion.GetData">RasterRegion.GetData</see> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])">RasterRegion.SetData</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates a LEADTOOLS image region using the specified GDI+ region data.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you specify
            <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and the view
            perspective defaults to the image view perspective.</param>
      <param name="data">A <see cref="T:System.Drawing.Drawing2D.RegionData" /> object that defines the region to add.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, specify how the new region is to be combined with the existing one using the <paramref name="combineMode" /> parameter.
            For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>This method can be used to copy the region data from one RasterImage to another, using the <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiPlusRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> method.</para>
        <para>To get the region data as Windows API HRGN data, use <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)" />.</para>
        <para>To get the region data as platform independent byte array, use <see cref="M:Leadtools.RasterRegion.GetData">RasterRegion.GetData</see> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])">RasterRegion.SetData</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example will use <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiPlusRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> to add an elliptical region to a <see cref="T:Leadtools.RasterImage" />, gets
            the region as a GDI+ RegionData object then re-sets it in another image.</para>
        </para>
        <code lang="VB">      Public Sub GdiPlusRegionDataExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim destFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_GdiPlusData.bmp"

         Dim gdipRegionData As RegionData = Nothing

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Add a polygon region to it

            ' Add a polygon region to the image
            Dim x1 As Integer = image.ImageWidth \ 4
            Dim y1 As Integer = image.ImageHeight \ 4
            Dim x2 As Integer = image.ImageWidth \ 3
            Dim y2 As Integer = image.ImageHeight \ 3

            Dim pts() As LeadPoint = _
            { _
               New LeadPoint(x1, y1), _
               New LeadPoint(x2, y1), _
               New LeadPoint(x1, y2), _
               New LeadPoint(x2, y2) _
            }

            image.AddPolygonToRegion(Nothing, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set)

            ' Save the region as a GDI+ RegionData object
            gdipRegionData = RasterRegionConverter.GetGdiPlusRegionData(image, Nothing)
         End Using

         ' Re-load the source image
         Using image As RasterImage = codecs.Load(srcFileName)
            ' Add the GDI+ region data we saved to it
            RasterRegionConverter.AddGdiPlusDataToRegion(image, Nothing, gdipRegionData, RasterRegionCombineMode.Set)

            ' Fill this region with Yellow
            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            ' Save this image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub</code>
        <code lang="CS">      public void GdiPlusRegionDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GdiPlusData.bmp");

         RegionData gdipRegionData = null;

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Add a polygon region to it

            // Add a polygon region to the image
            int x1 = image.ImageWidth / 4;
            int y1 = image.ImageHeight / 4;
            int x2 = image.ImageWidth / 3;
            int y2 = image.ImageHeight / 3;

            LeadPoint[] pts =
            {
               new LeadPoint(x1, y1),
               new LeadPoint(x2, y1),
               new LeadPoint(x1, y2),
               new LeadPoint(x2, y2)
            };

            image.AddPolygonToRegion(null, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set);

            // Save the region as a GDI+ RegionData object
            gdipRegionData = RasterRegionConverter.GetGdiPlusRegionData(image, null);
         }

         // Re-load the source image
         using(RasterImage image = codecs.Load(srcFileName))
         {
            // Add the GDI+ region data we saved to it
            RasterRegionConverter.AddGdiPlusDataToRegion(image, null, gdipRegionData, RasterRegionCombineMode.Set);

            // Fill this region with Yellow
            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            // Save this image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterRegionConverter.AddGdiPlusDataToRegion-->
      </example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.GetGdiRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)">
      <summary>
            Gets the GDI data that describes the image region.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you
            specify <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and
            the view perspective defaults to the image view perspective.</param>
      <returns>An array of <see cref="T:System.Byte" /> that contains the information that describes the region in this <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>Used with <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)" /> to load or save an image region.</para>
        <para>The data returned by this method is the equivalent of the data returned using the Windows GetRegionData API.</para>
        <para>To get the region data as GDI+ <see cref="T:System.Drawing.Drawing2D.RegionData" /> object, use <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiPlusRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)" />.</para>
        <para>To get the region data as platform independent byte array, use <see cref="M:Leadtools.RasterRegion.GetData">RasterRegion.GetData</see> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])">RasterRegion.SetData</see>.</para>
        <para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)" />.</example>
    </member>
    <member name="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates a LEADTOOLS image region using the specified GDI+ region data.
            </summary>
      <param name="image">The source image.</param>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you specify
            <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and the view
            perspective defaults to the image view perspective.</param>
      <param name="data">An array of <see cref="T:System.Byte" /> that defines the region to add.</param>
      <param name="dataOffset">Byte offset into <paramref name="data" /> where the data starts.</param>.
            <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param><remarks><para>To update an existing region, specify how the new region is to be combined with the existing one using the <paramref name="combineMode" /> parameter.
            For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para><para>This method can be used to copy the region data from one RasterImage to another, using the <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> method.</para><para>To get the region data as GDI+ <see cref="T:System.Drawing.Drawing2D.RegionData" /> object, use <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiPlusRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiPlusDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Drawing.Drawing2D.RegionData,Leadtools.RasterRegionCombineMode)" />.</para><para>To get the region data as platform independent byte array, use <see cref="M:Leadtools.RasterRegion.GetData">RasterRegion.GetData</see> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])">RasterRegion.SetData</see>.</para><para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para><para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para><para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para><para>For more information refer to <see cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</see>.</para></remarks><example><para><para>This example will use <see cref="M:Leadtools.Drawing.RasterRegionConverter.AddGdiDataToRegion(Leadtools.RasterImage,Leadtools.RasterRegionXForm,System.Byte[],System.Int32,Leadtools.RasterRegionCombineMode)" /> and <see cref="M:Leadtools.Drawing.RasterRegionConverter.GetGdiRegionData(Leadtools.RasterImage,Leadtools.RasterRegionXForm)" /> to add an elliptical region to a <see cref="T:Leadtools.RasterImage" />, gets
            the region as a GDI byte array object then re-sets it in another image.</para></para><code lang="VB">      Public Sub GdiRegionDataExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1.cmp"
         Dim destFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_GdiRegionDataOriginal.bmp"
         Dim regionFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_GdiRegionData.bin"
         Dim destFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Image1_GdiRegionDataLoaded.bmp"

         RegionDataBefore(codecs, srcFileName, destFileName1, regionFileName)
         RegionDataAfter(codecs, srcFileName, destFileName2, regionFileName)

         codecs.Dispose()
      End Sub

      Private Sub RegionDataBefore(ByVal codecs As RasterCodecs, ByVal imageFileName As String, ByVal destFileName As String, ByVal regionFileName As String)
         ' Load the image
         Using image As RasterImage = codecs.Load(imageFileName)
            ' Add a polygon region to the image
            Dim x1 As Integer = image.ImageWidth \ 4
            Dim y1 As Integer = image.ImageHeight \ 4
            Dim x2 As Integer = image.ImageWidth \ 3
            Dim y2 As Integer = image.ImageHeight \ 3

            Dim pts() As LeadPoint = _
            { _
               New LeadPoint(x1, y1), _
               New LeadPoint(x2, y1), _
               New LeadPoint(x1, y2), _
               New LeadPoint(x2, y2) _
            }

            image.AddPolygonToRegion(Nothing, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set)

            ' Draw something on the image
            Dim command As New InvertCommand()
            command.Run(image)

            ' Save the region and the image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

            Dim data() As Byte = RasterRegionConverter.GetGdiRegionData(image, Nothing)
            Using fs As FileStream = File.Create(regionFileName)
               fs.Write(data, 0, data.Length)
            End Using
         End Using
      End Sub

      Private Sub RegionDataAfter(ByVal codecs As RasterCodecs, ByVal imageFileName As String, ByVal destFileName As String, ByVal regionFileName As String)
         ' Load the image
         Using image As RasterImage = codecs.Load(imageFileName)
            ' Load the region from the file and apply it to the image
            Dim data() As Byte

            Using fs As FileStream = File.OpenRead(regionFileName)
               ReDim data(CType(fs.Length, Integer) - 1)
               fs.Read(data, 0, data.Length)
            End Using

            RasterRegionConverter.AddGdiDataToRegion(image, Nothing, data, 0, RasterRegionCombineMode.Set)

            ' Draw something on the image
            Dim command As New InvertCommand()
            command.Run(image)

            ' Save the image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using
      End Sub</code><code lang="CS">      public void GdiRegionDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GdiRegionDataOriginal.bmp");
         string regionFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GdiRegionData.bin");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GdiRegionDataLoaded.bmp");

         RegionDataBefore(codecs, srcFileName, destFileName1, regionFileName);
         RegionDataAfter(codecs, srcFileName, destFileName2, regionFileName);

         codecs.Dispose();
      }

      private void RegionDataBefore(RasterCodecs codecs, string imageFileName, string destFileName, string regionFileName)
      {
         // Load the image
         using(RasterImage image = codecs.Load(imageFileName))
         {
            // Add a polygon region to the image
            int x1 = image.ImageWidth / 4;
            int y1 = image.ImageHeight / 4;
            int x2 = image.ImageWidth / 3;
            int y2 = image.ImageHeight / 3;

            LeadPoint[] pts =
            {
               new LeadPoint(x1, y1),
               new LeadPoint(x2, y1),
               new LeadPoint(x1, y2),
               new LeadPoint(x2, y2)
            };

            image.AddPolygonToRegion(null, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set);

            // Draw something on the image
            InvertCommand command = new InvertCommand();
            command.Run(image);

            // Save the region and the image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

            byte[] data = RasterRegionConverter.GetGdiRegionData(image, null);
            using(FileStream fs = File.Create(regionFileName))
            {
               fs.Write(data, 0, data.Length);
            }
         }
      }

      private void RegionDataAfter(RasterCodecs codecs, string imageFileName, string destFileName, string regionFileName)
      {
         // Load the image
         using(RasterImage image = codecs.Load(imageFileName))
         {
            // Load the region from the file and apply it to the image
            byte[] data;

            using(FileStream fs = File.OpenRead(regionFileName))
            {
               data = new byte[fs.Length];
               fs.Read(data, 0, data.Length);
            }

            RasterRegionConverter.AddGdiDataToRegion(image, null, data, 0, RasterRegionCombineMode.Set);

            // Draw something on the image
            InvertCommand command = new InvertCommand();
            command.Run(image);

            // Save the image
            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterRegionConverter.AddGdiDataToRegion--></example></member>
  </members>
</doc>