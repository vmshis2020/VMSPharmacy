<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Annotations</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Annotations.AnnRubberStampType">
      <summary>
            Represents the types of rubber stamps available for the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> annotation object.
            </summary>
      <remarks>For information regarding default values for the different rubber stamps used in automated mode, including information on how to override these values, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see><p>Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetDefaultPicture(Leadtools.Annotations.AnnRubberStampType,Leadtools.Annotations.AnnPicture)" /> method to change the default picture used by the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects.  Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /> and <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /> methods to control whether an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> will use the default or original picture for a certain type.</p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Approved">
      <summary>
            The text "Approved" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Assigned">
      <summary>
            The text "Assigned" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Checked">
      <summary>
            The text "Checked" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Client">
      <summary>
            The text "Client Attorney Privilege" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Copy">
      <summary>
            The text "Copy" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Draft">
      <summary>
            The text "Draft" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Extended">
      <summary>
            The text "Extended" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Fax">
      <summary>
            The text "Fax" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Faxed">
      <summary>
            The text "Faxed" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Important">
      <summary>
            The text "Important" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Invoice">
      <summary>
            The text "Invoice" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Notice">
      <summary>
            The text "Notice" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Official">
      <summary>
            The text "Official" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.OnFile">
      <summary>
            The text "On File" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Paid">
      <summary>
            The text "Paid" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Passed">
      <summary>
            The text "Passed" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Pending">
      <summary>
            The text "Pending" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Processed">
      <summary>
            The text "Processed" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Received">
      <summary>
            The text "Received" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Rejected">
      <summary>
            The text "Rejected" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Release">
      <summary>
            The text "Release" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Sent">
      <summary>
            The text "Sent" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Shipped">
      <summary>
            The text "Shipped" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.TopSecret">
      <summary>
            The text "Top Secret" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Urgent">
      <summary>
            The text "Urgent" in a metafile
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnRubberStampType.Void">
      <summary>
            The text "Void" in a metafile
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnRubberStampObject">
      <summary>
            Defines an annotation stamp object.
            </summary>
      <remarks>
            The rubber stamp annotation object is an image that has a predefined metafile.
            <p>For information regarding default text strings used throughout the user interface in the automated mode, including information on how to override them, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see></p><para>
            For more information about the rubber stamp annotation object refer to 
            <see cref="T:AN.Topics.AnnRubberStampObject">AnnRubberStampObject</see>. 
            For more information about the automated rubber stamp annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsStampPictureTab">Automated Annotations - Stamp Picture Tab</see>. 
            </para></remarks>
      <example>
        <para>This example creates a new rubber stamp, and then addes it to the container.</para>
        <code lang="VB">      Private Sub AnnRubberStampObject_AnnRubberStampObject(ByVal container As AnnContainer)
         Dim rubberStamp As AnnRubberStampObject = New AnnRubberStampObject()
         rubberStamp.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         rubberStamp.Type = AnnRubberStampType.Approved
         container.Objects.Add(rubberStamp)
      End Sub</code>
        <code lang="CS">      private void AnnRubberStampObject_AnnRubberStampObject(AnnContainer container)
      {
         AnnRubberStampObject rubberStamp = new AnnRubberStampObject();
         rubberStamp.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         rubberStamp.Type = AnnRubberStampType.Approved;
         container.Objects.Add(rubberStamp);
      }</code>
        <!--AnnRubberStampObject.AnnRubberStampObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRectangleObject">
      <summary>
            Defines an annotation rectangle object.
            </summary>
      <remarks>
        <para>
            The rectangle annotation object is a simple rectangle that has a bounding rectangle, a pen and a brush.
            For more information about the rectangle annotation object refer to 
            <see cref="T:AN.Topics.AnnRectangleObject">AnnRectangleObject</see>. 
            For more information about the automated rectangle annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example creates a new rectangle object with top, left at 100, 200, width, height of 400, 600 pixels, a red pen and a white brush and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnRectangleObject_AnnRectangleObject(ByVal container As AnnContainer)
         Dim rect As AnnRectangleObject = New AnnRectangleObject()
         rect.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         rect.Brush = New AnnSolidBrush(Color.White)
         rect.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(rect)
      End Sub</code>
        <code lang="CS">      private void AnnRectangleObject_AnnRectangleObject(AnnContainer container)
      {
         AnnRectangleObject rect = new AnnRectangleObject();
         rect.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         rect.Brush = new AnnSolidBrush(Color.White);
         rect.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(rect);
      }</code>
        <!--AnnRectangleObject.AnnRectangleObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnObject">
      <summary>
            This is the base class for all annotation objects.
            </summary>
      <keywords>Annotation|Annotations</keywords>
      <remarks>
        <p>The <see cref="T:Leadtools.Annotations.AnnObject" /> class provides all the basic functionality common to all LEADTOOLS annotation objects.</p>
        <p>The AnnObject is an abstract class, you cannot instantiate objects of this class directly.</p>
      </remarks>
      <example>
        <para>This example displays the rotate angle of an <see cref="T:Leadtools.Annotations.AnnObject" />.</para>
        <code lang="VB">      Public Sub AnnObject_AnnObject(ByVal container As AnnContainer)
         For Each obj As AnnObject In container.Objects
            Dim s As String = String.Format("Type: {0}, Name: {1}, Hyperlink: {2}", obj.GetType().Name, obj.Name, obj.Hyperlink)
            MessageBox.Show(s)
         Next obj
      End Sub</code>
        <code lang="CS">      public void AnnObject_AnnObject(AnnContainer container)
      {
         foreach(AnnObject obj in container.Objects)
         {
            string s = string.Format("Type: {0}, Name: {1}, Hyperlink: {2}", obj.GetType().Name, obj.Name, obj.Hyperlink);
            MessageBox.Show(s);
         }
      }</code>
        <!--AnnObject.AnnObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDrawable">
      <summary>
            This is the base class for all annotation objects used in the Annotations class library.
            </summary>
      <remarks>
        <p>This class holds common drawing information shared by all annotation objects in the Annotations class library.</p>
        <p>You can query the properties of this class to easily figure out if a certain class supports pen, brush or font and quickly change them.  For example the properties dialogs used in the automation mode do just that to test whether to display the pen options.</p>
      </remarks>
      <example>
        <para>This example changes all the objects in an annotation container so they use a red pen, a white brush and an Arial font.</para>
        <code lang="VB">      Public Sub AnnDrawable_AnnDrawable(ByVal container As AnnContainer)
         For Each drawable As AnnDrawable In container.Objects
            If drawable.SupportsPen Then
               drawable.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            End If
            If drawable.SupportsBrush Then
               drawable.Brush = New AnnSolidBrush(Color.White)
            End If

            If drawable.SupportsFont Then
               drawable.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
               drawable.TextColor = Color.Red
            End If
         Next drawable
      End Sub
</code>
        <code lang="CS">      public void AnnDrawable_AnnDrawable(AnnContainer container)
      {
         foreach(AnnDrawable drawable in container.Objects)
         {
            if(drawable.SupportsPen)
               drawable.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
            if(drawable.SupportsBrush)
               drawable.Brush = new AnnSolidBrush(Color.White);

            if(drawable.SupportsFont)
            {
               drawable.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
               drawable.TextColor = Color.Red;
            }
         }
      }
</code>
        <!--AnnDrawable.AnnDrawable-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnDrawable" /> class.
            </summary>
      <remarks>
            This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawable.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnDrawable" /> class.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            Derived classes use this constructor to specify whether they support the various drawing objects.  For example, a line object would pass false for <i>supportsBrush</i> and <i>supportsFont</i> since they are not needed.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.SupportsPen">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a pen.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a pen; false otherwise.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.HasPen">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a pen.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a pen; false otherwise.</value>
      <remarks>
            (Read only) An <see cref="T:Leadtools.Annotations.AnnDrawable" /> has a pen if the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> property is true and the <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" /> property is not null (Nothing in Visual Basic).
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.Pen">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPen" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPen" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.</value>
      <remarks>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support pens (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> value is false), this property will always return null (Nothing in Visual Basic).</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support pens (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> value is false), setting this property to any value will be ignoreed.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.SupportsBrush">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a brush.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a brush; false otherwise.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.HasBrush">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a brush.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a brush; false otherwise.</value>
      <remarks>
            (Read only) An <see cref="T:Leadtools.Annotations.AnnDrawable" /> has a brush if the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> property is true and the <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> property is not null (Nothing in Visual Basic).
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.Brush">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnBrush" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnBrush" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.</value>
      <remarks>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support brushes (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> value is false), this property will always return null (Nothing in Visual Basic).</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support brushes (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> value is false), setting this property to any value will be ignoreed.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.SupportsFont">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a font.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object supports a font; false otherwise.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.HasFont">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a font.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object has a font; false otherwise.</value>
      <remarks>
            (Read only) An <see cref="T:Leadtools.Annotations.AnnDrawable" /> has a font if the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> property is true and the <see cref="P:Leadtools.Annotations.AnnDrawable.Font" /> property is not null (Nothing in Visual Basic).
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.Font">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnFont" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnFont" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.</value>
      <remarks>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support fonts (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value is false), this property will always return null (Nothing in Visual Basic).</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support fonts (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value is false), setting this property to any value will be ignoreed.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.TextColor">
      <summary>
            Gets or sets the text <see cref="T:System.Drawing.Color" /> structure associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.
            </summary>
      <value>The text <see cref="T:System.Drawing.Color" /> structure associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.</value>
      <remarks>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support fonts (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value is false), this property will always return the default black color.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnDrawable" /> does not support fonts (<see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value is false), setting this property to any value will be ignored.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDrawable" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawable.TextColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> associated with this <see cref="T:Leadtools.Annotations.AnnDrawable" /> object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnObject.DefaultHitTestValue">
      <summary>
            The default hit test value for the <see cref="T:Leadtools.Annotations.AnnObject" /> object.
            </summary>
      <remarks>
            (Read only) By default, all annotation objects use this value as the return value from <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" />.  The value of this string is "Body".
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnObject.NameHitTestValue">
      <summary>
            The default hit test value for the <see cref="T:Leadtools.Annotations.AnnObject" /> name area.
            </summary>
      <remarks>
            (Read only) By default, all annotation objects use this value as the return value from <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> if the hit test point was on the object name area.  The value of this string is "Name".
            For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnObject" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnObject" /> object that this class creates.</returns>
      <example>
        <para>This example copies the objects from one container to another.</para>
        <code lang="VB">      Public Sub AnnObject_Clone(ByVal srcContainer As AnnContainer, ByVal destContainer As AnnContainer)
         ' first remove all objects from the destination container
         destContainer.Objects.Clear()
         ' copy the objects from the src to the destination container
         For Each srcObj As AnnObject In srcContainer.Objects
            ' we want to keep the original object intact, so create an exact copy by cloning the object
            Dim destObj As AnnObject = CType(IIf(TypeOf srcObj.Clone() Is AnnObject, srcObj.Clone(), Nothing), AnnObject)
            destContainer.Objects.Add(destObj)
         Next srcObj
      End Sub</code>
        <code lang="CS">      public void AnnObject_Clone(AnnContainer srcContainer, AnnContainer destContainer)
      {
         // first remove all objects from the destination container
         destContainer.Objects.Clear();
         // copy the objects from the src to the destination container
         foreach(AnnObject srcObj in srcContainer.Objects)
         {
            // we want to keep the original object intact, so create an exact copy by cloning the object
            AnnObject destObj = srcObj.Clone() as AnnObject;
            destContainer.Objects.Add(destObj);
         }
      }</code>
        <!--AnnObject.Clone-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Dispose">
      <summary>
            Releases the resources used by the <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <example>
        <para>This example frees all container resources.</para>
        <code lang="VB">      Public Sub AnnObject_Dispose(ByVal container As AnnContainer)
         Do While container.Objects.Count &gt; 0
            Dim obj As AnnObject = container.Objects(0)
            container.Objects.RemoveAt(0)
            obj.Dispose()
         Loop
      End Sub</code>
        <code lang="CS">      public void AnnObject_Dispose(AnnContainer container)
      {
         while(container.Objects.Count &gt; 0)
         {
            AnnObject obj = container.Objects[0];
            container.Objects.RemoveAt(0);
            obj.Dispose();
         }
      }</code>
        <!--AnnObject.Dispose-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.Object.Finalize" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnObject.Dispose" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived annotation objects should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnObject" /> this method creates.</returns>
      <remarks>
            Derived annotation objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnObject" />.</returns>
      <remarks>
            Derived annotation objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            Derived annotation objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.RestrictName">
      <summary>
            Restricts the name to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnObject.Container" /> of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <remarks>
            This method works only if the <see cref="P:Leadtools.Annotations.AnnObject.NameRestrict" /> value of this <see cref="T:Leadtools.Annotations.AnnObject" /> is set to true.  Calling this method will move the name (by changing the <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" /> property so the name will be restricted to appear fully within the <see cref="P:Leadtools.Annotations.AnnContainer.Bounds" /> property of the <see cref="T:Leadtools.Annotations.AnnContainer" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />). For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Lock(System.String)">
      <summary>
            Locks this <see cref="T:Leadtools.Annotations.AnnObject" /> with the specified password.
            </summary>
      <param name="password">String containing the password used to lock the annotation object.</param>
      <remarks>
        <p>Only unlocked objects can be locked.  If an object is already locked, it will stay locked with its original password.  You must pass the same password to <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" /> to unlock this <see cref="T:Leadtools.Annotations.AnnObject" />.</p>
        <p>If this method succeeds, <i>password</i> will be stored inside the object and can be retreived with the <see cref="P:Leadtools.Annotations.AnnObject.Password" /> property.</p>
        <p>An object must be unlocked in order to change that object in automated mode.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
        <para>This method changes the 'lock' state of an object.</para>
        <code lang="VB">      Public Sub AnnObject_Lock(ByVal obj As AnnObject, ByVal password As String)
         If obj.IsLocked Then
            MessageBox.Show("Object is locked. It will be unlocked.")
            If String.Compare(password, obj.Password, False) &lt;&gt; 0 Then
               MessageBox.Show("Invalid password!!")
            Else
               obj.Unlock(password)
            End If
         Else
            MessageBox.Show("Object was not locked. It will be locked now.")
            obj.Lock(password)
         End If
      End Sub</code>
        <code lang="CS">      public void AnnObject_Lock(AnnObject obj, string password)
      {
         if(obj.IsLocked)
         {
            MessageBox.Show("Object is locked. It will be unlocked.");
            if(string.Compare(password, obj.Password, false) != 0)
               MessageBox.Show("Invalid password!!");
            else
               obj.Unlock(password);
         }
         else
         {
            MessageBox.Show("Object was not locked. It will be locked now.");
            obj.Lock(password);
         }
      }</code>
        <!--AnnObject.Lock-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Unlock(System.String)">
      <summary>
            Unlocks this <see cref="T:Leadtools.Annotations.AnnObject" /> with the specified password.
            </summary>
      <param name="password">String containing the password used to unlock the annotation object.</param>
      <remarks>
        <p>Only objects locked with the same password can be unlocked.  If you pass the wrong password, this method will do nothing and the object remains unlocked.  You can call <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" /> after calling this method to determine whether unlocking the object succeeded.</p>
        <p>If this method succeeds, the <see cref="P:Leadtools.Annotations.AnnObject.Password" /> value will be reset to an empty string.</p>
        <p>An object must be unlocked in order to change that object in automated mode.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
            Derived objects that override <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> to return a value other than <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Auto</see> should also override this method and <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> to get/set the points to be transformed.  Derived objects can examine <i>operation</i> to determine what points to get/set.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method to call.</param>
      <remarks>
            Derived objects that override <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> to return a value other than <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Auto</see> should also override this method and <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> to get/set the points to be transformed.  Derived objects can examine <i>operation</i> to determine what points to get/set.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ResetTransform">
      <summary>
            Resets the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <remarks>
            After calling this method, the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix value of this <see cref="T:Leadtools.Annotations.AnnObject" /> will be set back to an identity matrix.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.TransformRotatePoints(Leadtools.Annotations.AnnTransformer)">
      <summary>
            Applies the transformer to the rotate control points.
            </summary>
      <param name="transformer">The <see cref="T:Leadtools.Annotations.AnnTransformer" /> that is applied to the rotate control points. </param>
      <remarks>
            This method is called internally when using a <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> of 
            <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.PointsAndRotate</see>. 
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="T:Leadtools.Annotations.AnnTransformObjectMode" /></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.CreateTranslateMatrix(System.Single,System.Single)">
      <summary>
            A helper method that creates a standard translation matrix with the specified values.
            </summary>
      <param name="dx">The x value of the translation.</param>
      <param name="dy">The y value of the translation.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.Matrix" /> that this method creates.</returns>
      <remarks>
            This method is intended to be used by derived annotation objects that implement non-automatic transformation.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)">
      <summary>
            Translates the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnObject" /> by the specified values.
            </summary>
      <param name="dx">The x value by which to translate the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix.</param>
      <param name="dy">The y value by which to translate the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix.</param>
      <remarks>
        <p>If the object implements auto transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Auto</see>), the logical coordinates of the object do not change when this method is called. Instead, the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix is updated and the effect is only applied when transforming the object to physical space (e.g. when drawing or hit-testing the object).</p>
        <p>If the object implements point transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>), the logical coordinates of the object <i>might</i> change when this method is called.  The exact behavior depends upon the object's implementation of the <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.CreateScaleMatrix(System.Single,System.Single,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            A helper method that creates a standard scale matrix with the specified values.
            </summary>
      <param name="sx">The value by which to scale in the x-axis direction.</param>
      <param name="sy">The value by which to scale in the y-axis direction.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the scale operation</param>
      <param name="unitConverter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object that can be used to convert the <i>origin</i> point from one unit to another (usually to pixels).</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.Matrix" /> that this method creates.</returns>
      <remarks>
            This method is intended to be used by derived annotation objects that implement non-automatic transformation.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)">
      <summary>
            Scales the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnObject" /> by the specified ratios.
            </summary>
      <param name="sx">The ratio by which to scale the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix in the x-axis direction.</param>
      <param name="sy">The ratio by which to scale the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix in the y-axis direction.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the scale operation.</param>
      <remarks>
        <p>If the object implements auto transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode">.Auto</see>), the logical coordinates of the object do not change when this method is called. Instead, the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix is updated and the effect is only applied when transforming the object to physical space (e.g. when drawing or hit-testing the object).</p>
        <p>If the object implements point transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode">.Points</see>), the logical coordinates of the object <i>might</i> change when this method is called.  The exact behavior depends upon the object's implementation of the <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and the <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.CreateRotateMatrix(System.Single,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            A helper method that creates a standard rotation matrix with the specified values.
            </summary>
      <param name="angle">The angle (extent) of the rotation in degrees.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the rotation.</param>
      <param name="unitConverter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object that can be used to convert the <i>origin</i> point from one unit to another (usually to pixels).</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.Matrix" /> that this method creates.</returns>
      <remarks>
            This method is intended to be used by derived annotation objects that implement non-automatic transformation.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)">
      <summary>
            Rotates the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnObject" /> around a point.
            </summary>
      <param name="angle">The angle (extent) of the rotation in degrees.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the rotation.</param>
      <remarks>
        <p>If the object implements auto transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode">.Auto</see>), the logical coordinates of the object do not change when this method is called. Instead, the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix is updated and the effect is only applied when transforming the object to physical space (e.g. when drawing or hit-testing the object).</p>
        <p>If the object implements point transformation (<see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> returns <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode">.Points</see>), the logical coordinates of the object <i>might</i> change when this method is called.  The exact behavior depends upon the object's implementation of the <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and the <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ToString">
      <summary>
            Overridden. Converts the attributes of this <see cref="T:Leadtools.Annotations.AnnObject" /> to a human-readable string.
            </summary>
      <returns>A string that represents the attributes of this object.</returns>
      <remarks>
            This method will return the value of the <see cref="P:Leadtools.Annotations.AnnObject.Name" /> property of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" />.</param>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnContainer.Draw(System.Drawing.Graphics)" /> of the owner container of this <see cref="T:Leadtools.Annotations.AnnObject" /> is called.  You do not need to call this method directly.</p>
        <p>If an object is invisible (<see cref="P:Leadtools.Annotations.AnnObject.Visible" /> is set to false), it will not draw itself.</p>
        <p>This method will call <see cref="M:Leadtools.Annotations.AnnObject.DrawObject(System.Drawing.Graphics)" /> first to draw the object itself, <see cref="M:Leadtools.Annotations.AnnObject.DrawName(System.Drawing.Graphics)" /> to draw the name of the object and then finally <see cref="M:Leadtools.Annotations.AnnObject.DrawLocked(System.Drawing.Graphics)" /> to draw the locked object (if the object is currently locked).</p>
        <p>Derived annotation objects are not encouraged to override this method directly. Instead override <see cref="M:Leadtools.Annotations.AnnObject.DrawObject(System.Drawing.Graphics)" />, <see cref="M:Leadtools.Annotations.AnnObject.DrawName(System.Drawing.Graphics)" /> and <see cref="M:Leadtools.Annotations.AnnObject.DrawLocked(System.Drawing.Graphics)" /> individually.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" />.</param>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.</p>
        <p>If an object is invisible (<see cref="P:Leadtools.Annotations.AnnObject.Visible" /> is set to false), it will not draw itself.</p>
        <p>By default, this method will draw the same graphics path returned from the <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> method when the <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> is set to <b>DrawObject</b>.  For simple objects such as lines and rectangles, this is sufficient.  More complex objects that contain elements that either cannot be expressed by a graphics path (such as images) or elements that are too expensive to be expressed by a path (such as text) override this method to draw the object directly.</p>
        <p>
            This method has the following logic:
            <list type="number"><item><description>Calls the <see cref="M:Leadtools.Annotations.AnnObject.BeginDraw(System.Drawing.Graphics)" /> method that determines if the object is visible and sets up the object's <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" /> matrix into the <i>g</i> graphics</description></item><item><description>Calls <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> with <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> set to <b>DrawObject</b> to get the graphics path that represents this object</description></item><item><description>Uses the <see cref="P:Leadtools.Annotations.AnnDrawable.HasBrush" /> method to check if this object implements a brush and if so, fills the interior of the graphics path with the <see cref="T:System.Drawing.Brush" /></description></item><item><description>Uses the <see cref="P:Leadtools.Annotations.AnnDrawable.HasPen" /> method to check if this object implements a pen and if so, draws the outside of the graphics path with the <see cref="T:System.Drawing.Pen" /></description></item><item><description>Calls <see cref="M:Leadtools.Annotations.AnnObject.EndDraw(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsState)" /> to reset the <i>g</i> transformation</description></item></list></p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.DrawLocked(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnObject" /> locked picture on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" /> locked picture.</param>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.</p>
        <p>If an object not locked, this method will not be called.</p>
        <p>By default, this method will draw the picture stored at the owner <see cref="P:Leadtools.Annotations.AnnObject.Container" />.<see cref="P:Leadtools.Annotations.AnnContainer.LockPicture" /> property.  This picture will be drawn at the upper-left edge of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.DrawName(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnObject" /> name on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" /> name.</param>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.</p>
        <p>If the <see cref="P:Leadtools.Annotations.AnnObject.NameVisible" /> property is set to false, this method will not be called.</p>
        <p>By default, this method will draw the <see cref="P:Leadtools.Annotations.AnnObject.Name" /> text using the <see cref="P:Leadtools.Annotations.AnnObject.NameFont" /> with the <see cref="P:Leadtools.Annotations.AnnObject.NameForeColor" /> as the text color and <see cref="P:Leadtools.Annotations.AnnObject.NameBackColor" /> as a solid brush fill the bounding rectangle of the name text.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.BeginDraw(System.Drawing.Graphics)">
      <summary>
            Called by the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method to set up the object's <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" /> matrix into the <i>g</i> graphics surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" />.</param>
      <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> object if this <see cref="T:Leadtools.Annotations.AnnObject" /> is visible; null (Nothing in Visual Basic) otherwise.</returns>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.</p>
        <p>Derived classes that call this method must call <see cref="M:Leadtools.Annotations.AnnObject.EndDraw(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsState)" /> after all drawing operation is over passing the <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> value returned from this method.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.EndDraw(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsState)">
      <summary>
            Called by the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method to reset the graphics transformation.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnObject" />.</param>
      <param name="gstate">The <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> obtained from <see cref="M:Leadtools.Annotations.AnnObject.BeginDraw(System.Drawing.Graphics)" />.</param>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.</p>
        <p>Derived classes that call this method must call this method after all drawing operation is over passing the <see cref="T:System.Drawing.Drawing2D.GraphicsState" /> value returned from <see cref="M:Leadtools.Annotations.AnnObject.BeginDraw(System.Drawing.Graphics)" />.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.NameHitTest(Leadtools.Annotations.AnnPoint,System.Int32)">
      <summary>
            Performs hit-testing on this <see cref="T:Leadtools.Annotations.AnnObject" /> name.
            </summary>
      <param name="testPoint">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be tested.</param>
      <param name="buffer">Threshold buffer value, in pixels.</param>
      <returns>A value that represents the hit-test value; or null (Nothing in Visual Basic) if the test point is not on top of this <see cref="T:Leadtools.Annotations.AnnObject" /> name.</returns>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method is called.  You do not need to call this property directly.</p>
        <p>
          <i>testPoint</i> should be in physical coordinates.</p>
        <p>
          <i>buffer</i> is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if <i>buffer</i> is 2, a square with a length of 4 pixels around <i>testPoint</i> will be used to perform the hit-testing.</p>
        <p>If the name of this object is invisible (<see cref="P:Leadtools.Annotations.AnnObject.NameVisible" /> is set to false), this method will not be called.</p>
        <p>By default, an annotation object will return <see cref="F:Leadtools.Annotations.AnnObject.NameHitTestValue" /> if hit-testing the name was satisfied</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)">
      <summary>
            Performs hit-testing on this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <param name="testPoint">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be tested.</param>
      <param name="buffer">Threshold buffer value, in pixels.</param>
      <returns>A value that represents the hit-test value; or null (Nothing in Visual Basic) if the test point is not on top of this <see cref="T:Leadtools.Annotations.AnnObject" />.</returns>
      <remarks>
        <p>This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnContainer.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method is called.  You can call this method on the annotation object returned from <see cref="M:Leadtools.Annotations.AnnContainer.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> to fine tune the hit-test value if applicable.</p>
        <p>
          <i>testPoint</i> should be in physical coordinates.</p>
        <p>
          <i>buffer</i> is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if <i>buffer</i> is 2, a square with a length of 4 pixels around <i>testPoint</i> will be used to perform the hit-testing.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnObject" /> is invisible (<see cref="P:Leadtools.Annotations.AnnObject.Visible" /> is set to false), this method will return null (Nothing in Visual Basic).</p>
        <p>By default, an annotation object will return <see cref="F:Leadtools.Annotations.AnnObject.DefaultHitTestValue" /> if hit-testing was satisfied.  Derived objects can override this method to fine tune the return value.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ResetRotatePoints">
      <summary>
            Resets the <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /> and <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> control points to a default location.
            </summary>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnObject" /> is selected with an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />,
            two rotate control points appear:
            <list type="number"><item><description>Rotate center control point</description></item><item><description>Rotate gripper control point</description></item></list>
            This method resets the <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /> and <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> control points to a default location
            relative to the <see cref="T:Leadtools.Annotations.AnnObject" />.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /><see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.GripperDistance" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation">
      <summary>
            Saves location information for an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <remarks>
        <p>
            Saves location information for an <see cref="T:Leadtools.Annotations.AnnObject" /> including <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" />
            location and <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> location. The information can be restored using
            <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </p>
        <p>
            Notes to overriders: save any actual points that define your object.  
            For more information and an example, refer to the
            <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations"> Implement User Defined Objects with LEADTOOLS Annotations</see> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </p>
        <seealso cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />
      </remarks>
      <example>
        <para>This example shows the use of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.</para>
        <code lang="VB">      Public Sub AnnObject_SaveOriginalLocation(ByVal obj As AnnObject)
         ' Save the original location
         obj.SaveOriginalLocation()
         ' Make some changes 
         ' i.e. shift to right 100 pixels
         obj.Translate(100, 0)

         ' Restore original location
         ' Comment out the line below, to see the object shifts
         ' Leave the line below to see the object reverts to original location
         obj.RestoreOriginalLocation()
      End Sub</code>
        <code lang="CS">      public void AnnObject_SaveOriginalLocation(AnnObject obj)
      {
         // Save the original location
         obj.SaveOriginalLocation();
         // Make some changes 
         // i.e. shift to right 100 pixels
         obj.Translate(100, 0);

         // Restore original location
         // Comment out the line below, to see the object shifts
         // Leave the line below to see the object reverts to original location
         obj.RestoreOriginalLocation();
      }</code>
        <!--AnnObject.SaveOriginalLocation-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation">
      <summary>
            Restores location information for an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <remarks>
        <p>
            Restores location information for an <see cref="T:Leadtools.Annotations.AnnObject" /> including <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" />
            location and <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> location. 
            </p>
        <p>
            Notes to overriders: save any actual points that define your object.  
            For more information and an example, refer to the
            <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations"> Implement User Defined Objects with LEADTOOLS Annotations</see> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </p>
        <p>
          <seealso cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />
        </p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle">
      <summary>
            Returns the rotate angle of an <see cref="T:Leadtools.Annotations.AnnObject" /> in degrees.
            </summary>
      <returns>The rotate angle of the <see cref="T:Leadtools.Annotations.AnnObject" /> in degrees.</returns>
      <remarks>
            The rotate angle returned is formed by the object and the horizontal.  
            A positive value represents a clockwise rotation, and  
            a negative value represents a counter-clockwise rotation.
            Many objects do not have a rotate angle (i.e. <see cref="T:Leadtools.Annotations.AnnPolylineObject" />) and will therefore
            return 0 degrees.  For rectangular objects (objects derived from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />),
            the angle computed is formed by the top edge of the object and the horizontal.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
        <para>This example displays the rotate angle of an <see cref="T:Leadtools.Annotations.AnnObject" />.</para>
        <code lang="VB">      Public Sub AnnObject_CalculateRotateAngle(ByVal obj As AnnObject)
         Dim angle As Single = obj.CalculateRotateAngle()
         Dim s As String = String.Format("The selected {0} has a rotate angle of {1}", obj.GetType().ToString(), angle)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnObject_CalculateRotateAngle(AnnObject obj)
      {
         float angle = obj.CalculateRotateAngle();
         string s = string.Format("The selected {0} has a rotate angle of {1}", obj.GetType().ToString(), angle);
         MessageBox.Show(s);
      }</code>
        <!--AnnObject.CalculateRotateAngle-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.GetFixedState">
      <summary>
            Determines if this <see cref="T:Leadtools.Annotations.AnnObject" /> is in a <b>fixed</b> state.
            </summary>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnObject" /> is in a <b>fixed</b> state if it is fixed, 
            even if the fixed state has been temporarily disabled by calling <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            </remarks>
      <returns>true if <see cref="T:Leadtools.Annotations.AnnObject" /> is in a fixed state; false otherwise</returns>
      <example>
        <para>This sample examines the fixed state of all objects in a container and sets the fixed state to false.</para>
        <code lang="VB">      Private Sub AnnotationObject_GetFixedState(ByVal annContainer As AnnContainer)
         Dim fixedStateChanged As Boolean = False
         For Each obj As AnnObject In annContainer.Objects
            If obj.GetFixedState() Then
               obj.SetFixedState(False, True)
               fixedStateChanged = True
            End If
         Next obj
         Dim s As String = String.Format("Some objects in the container had 'fixed' changed to 'unfixed' : {0}", fixedStateChanged)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      void AnnotationObject_GetFixedState(AnnContainer annContainer)
      {
         bool fixedStateChanged = false;
         foreach (AnnObject obj in annContainer.Objects)
         {
            if (obj.GetFixedState())
            {
               obj.SetFixedState(false, true);
               fixedStateChanged = true;
            }
         }
         string s = string.Format("Some objects in the container had 'fixed' changed to 'unfixed' : {0}", fixedStateChanged);
         MessageBox.Show(s);
      }</code>
        <!--AnnObject.GetFixedState-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)">
      <summary>
            Sets the  <b>fixed</b> state of an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <param name="fixedState">true to make the AnnObject fixed; false to allow it to move freely </param>
      <param name="adjust">true to automatically adjust the AnnObject when changing the fixed state; false to have no adjusting performed.</param>
      <remarks>
            A fixed annotation does not move or change size when the annotation container scalars and offsets are changed. 
            The effect is that the annotation does not move or change size when the underlying image is scrolled or zoomed.
            <para>
            Passing <b>true</b> for the 'bAdjust' parameter automatically adjusts size and location of the AnnObject before fixing or un-fixing the annotation object. 
            The result is the annotation object will not jump around as you change its fixed state.
            </para><para>
            If you pass <b>false</b> for the 'bAdjust' parameter, the AnnObject can move or resize if the 
            <see cref="T:Leadtools.Annotations.AnnContainer" /> has a <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> other than the identity matrix.
            </para><para>To fix an annotation object where the size of the font of its text or the width of all pens used to draw it is fixed, use
            <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.</para></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.PushFixedState">
      <summary>
            Temporarily disables the <b>fixed</b> state of an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <returns>size of the <b>fixed state stack</b> before the call to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.</returns>
      <remarks>
            This temporarily disables the fixed state of one or more annotations.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            <para>
            In some instances, however, it is necessary to display a fixed annotation at a larger or smaller size than 
            its fixed size. For example, when printing a fixed annotation, the annotation may need to be painted larger or smaller than normal. 
            To accommodate, call <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" /> on the fixed AnnObject before the call to print.
            After the print, call <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" /> to restore the fixed state of the annotation object.
            </para><para>
            Typically, you would call PushFixedState/PopFixedState on the root <see cref="T:Leadtools.Annotations.AnnContainer" /> to 
            temporarily disable the fixed state of ALL <see cref="T:Leadtools.Annotations.AnnObject" />.
            Calls to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" /> and <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" /> are maintained internally as a stack. 
            This means that nested calls will behave properly. For Example,
            <code>
            PushFixedState();    // Fixed state is temporarily disabled
            PushFixedState();    // Fixed state is temporarily disabled
            PopFixedState();     // Fixed state is still disabled
            PopFixedState();     // Fixed state is enabled
            </code></para><para>
            Note that PushFixedState and PopFixedState should always be called in pairs.
            </para><para>
            The following annotations cannot be fixed:
            <list type="bullet"><item><see cref="T:Leadtools.Annotations.AnnRedactionObject" /></item><item><see cref="T:Leadtools.Annotations.AnnEncryptObject" /></item></list>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" />.
            </para><para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.PopFixedState">
      <summary>
            Re-enables the <b>fixed</b> state of an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <remarks>
            This function re-enables the <b>fixed state</b> of one or more <see cref="T:Leadtools.Annotations.AnnObject" />. 
            It is to be called after the <b>fixed</b> state as been temporarily disabled by a call to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />, <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" /> and <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.
            </remarks>
      <returns>size of the <b>fixed state stack</b> before the call to <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" /></returns>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.GetArea">
      <summary>
            Gets the pixel count of the annotation object
            </summary>
      <returns>
            the pixel count of the annotation object
            </returns>
      <remarks>
            The pixel count is the number of pixels contained in a region extracted from the annotation object, without resizing.
            </remarks>
      <example>
        <para>This sample creates a rectangle with dimensions 100 x 100 and then displays the area.</para>
        <code lang="VB">      Public Sub AnnObject_GetArea()
         Dim annRectangleObject As AnnRectangleObject = New AnnRectangleObject()
         annRectangleObject.Bounds = New AnnRectangle(0, 0, 100, 100)
         Dim s As String = String.Format("Area of Rectangle: {0}", annRectangleObject.GetArea().ToString())
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnObject_GetArea()
      {
         AnnRectangleObject annRectangleObject = new AnnRectangleObject();
         annRectangleObject.Bounds = new AnnRectangle(0, 0, 100, 100);
         string s = String.Format("Area of Rectangle: {0}", annRectangleObject.GetArea().ToString());
         MessageBox.Show(s);
      }</code>
        <!--AnnObject.GetArea-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])">
      <summary>
            Converts an array of points from object to logical coordinates.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="points">A an array points in object coordinates.</param>
      <returns>An array of points containing the result in logical coordinates.</returns>
      <remarks>
        <para>An <see cref="T:Leadtools.Annotations.AnnObject" /> may contain various points, lines, curves and rectangles that denote the object coordinates and where it should be drawn on an image. Also, the <see cref="T:Leadtools.Annotations.AnnObject" /> contains
            a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that may be updated with a transformation when the object is moved, rotated or sized. This transformation as well as the container own transformation are used to translate
            an object point to image coordinates and then to the screen.</para>
        <para>The coordinates stored in the object (for example, <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> or <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds">AnnRectangleObject.Bounds</see> are called
            object coordinates. These coordinates do not translate 1 to 1 to pixel values on the image used in the annotations because of the transformation matrices involved.</para>
        <para>The values corresponding to the object coordinates in pixels are called logical coordinates. For example, a logical coordinate of <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> is its
            pixel value (in top left-position) in the image its annotating. Converting from object to logical coordinates is what happens when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize">AnnAutomation.Realize</see>
            method.</para>
        <para>To manipulate an object position and size manually from outside the annotation framework, you need to first convert its coordinates to logical values, perform your own transformations, convert them back
            to object coordinates before setting them back to the object.</para>
        <para>To convert a point or a group of points from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a point or a group of points from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a rectangle from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>To convert a rectangle from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>For an example on converting object to logical and back to object coordinates, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" />.</para>
      </remarks>
      <example>
        <para>
          <para>This example will burn all lines and rectangle objects to the image in an automation mode</para>
        </para>
        <code lang="VB">      Private Sub BurnAllLinesAndRectanglesToImage(ByVal automation As AnnAutomation)
         ' Create a Graphics object from the RasterImage we are annotating
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(automation.Viewer.Image)
         Using g As Graphics = Graphics.FromHdc(hdc)
            ' Loop through all the objects in the annotation container
            For Each annObj As AnnObject In automation.Container.Objects
               If (TypeOf annObj Is AnnLineObject) Then
                  Dim lineObj As AnnLineObject = DirectCast(annObj, AnnLineObject)

                  ' Burn this line object in RED

                  ' Convert the line points to logical (image coordinates)
                  Dim pts() As AnnPoint = {lineObj.StartPoint, lineObj.EndPoint}

                  pts = lineObj.ConvertObjectToLogicalPoints(pts)

                  ' Convert the points to pixels
                  Dim pt1Pixels As PointF = pts(0).ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF()
                  Dim pt2Pixels As PointF = pts(1).ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF()

                  ' Draw it on the image
                  g.DrawLine(Pens.Red, pt1Pixels, pt2Pixels)

               ElseIf (TypeOf annObj Is AnnRectangleObject) Then
                  Dim rectObj As AnnRectangleObject = DirectCast(annObj, AnnRectangleObject)

                  ' Burn this rectangle object in BLUE

                  ' Convert the rectangle bounds to logical (image coordinates)
                  Dim bounds As AnnRectangle = rectObj.ConvertObjectToLogicalRectangle(rectObj.Bounds)

                  ' Convert the bounds to pixels
                  Dim boundsPixels As RectangleF = bounds.ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToRectangleF()

                  ' Draw it on the image
                  g.DrawRectangle(Pens.Blue, boundsPixels.X, boundsPixels.Y, boundsPixels.Width - 1, boundsPixels.Height - 1)
               End If
            Next
         End Using

         RasterImagePainter.DeleteLeadDC(hdc)

         ' Invalidate
         automation.Viewer.Invalidate()
      End Sub</code>
        <code lang="CS">      private void BurnAllLinesAndRectanglesToImage(AnnAutomation automation)
      {
         // Create a Graphics object from the RasterImage we are annotating
         IntPtr hdc = RasterImagePainter.CreateLeadDC(automation.Viewer.Image);
         using (Graphics g = Graphics.FromHdc(hdc))
         {
            // Loop through all the objects in the annotation container
            foreach(AnnObject annObj in automation.Container.Objects)
            {
               if(annObj is AnnLineObject)
               {
                  AnnLineObject lineObj = annObj as AnnLineObject;

                  // Burn this line object in RED

                  // Convert the line points to logical (image coordinates)
                  AnnPoint[] pts = { lineObj.StartPoint, lineObj.EndPoint };

                  pts = lineObj.ConvertObjectToLogicalPoints(pts);

                  // Convert the points to pixels
                  PointF pt1Pixels = pts[0].ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF();
                  PointF pt2Pixels = pts[1].ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF();

                  // Draw it on the image
                  g.DrawLine(Pens.Red, pt1Pixels, pt2Pixels);
               }
               else if(annObj is AnnRectangleObject)
               {
                  AnnRectangleObject rectObj = annObj as AnnRectangleObject;

                  // Burn this rectangle object in BLUE

                  // Convert the rectangle bounds to logical (image coordinates)
                  AnnRectangle bounds = rectObj.ConvertObjectToLogicalRectangle(rectObj.Bounds);

                  // Convert the bounds to pixels
                  RectangleF boundsPixels = bounds.ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToRectangleF();

                  // Draw it on the image
                  g.DrawRectangle(Pens.Blue, boundsPixels.X, boundsPixels.Y, boundsPixels.Width - 1, boundsPixels.Height - 1);
               }
            }
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         // Invalidate
         automation.Viewer.Invalidate();
      }</code>
        <!--AnnObject.ConvertObjectToLogicalPoints-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalRectangle(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Converts a rectangle from object to logical coordinates.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="rect">A rectangle in object coordinates.</param>
      <returns>A rectangle object containing the result in logical coordinates.</returns>
      <remarks>
        <para>An <see cref="T:Leadtools.Annotations.AnnObject" /> may contain various points, lines, curves and rectangles that denote the object coordinates and where it should be drawn on an image. Also, the <see cref="T:Leadtools.Annotations.AnnObject" /> contains
            a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that may be updated with a transformation when the object is moved, rotated or sized. This transformation as well as the container own transformation are used to translate
            an object point to image coordinates and then to the screen.</para>
        <para>The coordinates stored in the object (for example, <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> or <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds">AnnRectangleObject.Bounds</see> are called
            object coordinates. These coordinates do not translate 1 to 1 to pixel values on the image used in the annotations because of the transformation matrices involved.</para>
        <para>The values corresponding to the object coordinates in pixels are called logical coordinates. For example, a logical coordinate of <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> is its
            pixel value (in top left-position) in the image it is annotating. Converting from object to logical coordinates is what happens when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize">AnnAutomation.Realize</see>
            method.</para>
        <para>To manipulate an object position and size manually from outside the annotation framework, you need to first convert its coordinates to logical values, perform your own transformations, and convert them back
            to object coordinates before setting them back to the object.</para>
        <para>To convert a point or a group of points from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a point or a group of points from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a rectangle from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>To convert a rectangle from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>For an example on converting object to logical and back to object coordinates, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" />.</example>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])">
      <summary>
            Converts an array of points from logical to object coordinates.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="points">An array points in logical coordinates.</param>
      <returns>An array of points representing the original array but in object coordinates.</returns>
      <remarks>
        <para>An <see cref="T:Leadtools.Annotations.AnnObject" /> may contain various points, lines, curves and rectangles that denote the object coordinates and where it should be drawn on an image. Also, the <see cref="T:Leadtools.Annotations.AnnObject" /> contains
            a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that may be updated with a transformation when the object is moved, rotated or sized. This transformation as well as the container's own transformation are used to translate
            an object point to image coordinates and then to the screen.</para>
        <para>The coordinates stored in the object (for example, <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> or <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds">AnnRectangleObject.Bounds</see> are called
            object coordinates. These coordinates do not translate 1 to 1 to pixel values on the image used in the annotations because of the transformation matrices involved.</para>
        <para>The values corresponding to the object coordinates in pixels are called logical coordinates. For example, a logical coordinate of <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> is its
            pixel value (in top left-position) in the image it is annotating. Converting from object to logical coordinates is what happens when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize">AnnAutomation.Realize</see>
            method.</para>
        <para>To manipulate an object's position and size manually from outside the annotation framework, you need to first convert its coordinates to logical values, perform your own transformations, convert them back
            to object coordinates before setting them back to the object.</para>
        <para>To convert a point or a group of points from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a point or a group of points from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a rectangle from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>To convert a rectangle from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>For an example on converting object to logical coordinates, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" />.</para>
      </remarks>
      <example>
        <para>
          <para>This example will offset all the line and rectangle objects to the left by 5 pixels</para>
        </para>
        <code lang="VB">      Private Sub OffsetLinesAndRectangles(ByVal automation As AnnAutomation)
         ' Loop through all the objects in the annotation container
         For Each annObj As AnnObject In automation.Container.Objects
            If (TypeOf annObj Is AnnLineObject) Then
               Dim lineObj As AnnLineObject = DirectCast(annObj, AnnLineObject)
               ' Move this line object to the left by 5 logical pixels

               ' Convert the line points to logical (image coordinates)
               Dim pts() As AnnPoint = {lineObj.StartPoint, lineObj.EndPoint}

               pts = lineObj.ConvertObjectToLogicalPoints(pts)

               ' Convert the points to pixels
               Dim pt1Pixels As PointF = pts(0).ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF()
               Dim pt2Pixels As PointF = pts(1).ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF()

               ' Move them to the right
               pt1Pixels.X -= 5
               pt2Pixels.Y -= 5

               ' Set it back to the line
               pts(0) = New AnnPoint(pt1Pixels, AnnUnit.Pixel)
               pts(1) = New AnnPoint(pt2Pixels, AnnUnit.Pixel)
               pts = lineObj.ConvertLogicalToObjectPoints(pts)
               lineObj.StartPoint = pts(0)
               lineObj.EndPoint = pts(1)
            ElseIf (TypeOf annObj Is AnnRectangleObject) Then
               Dim rectObj As AnnRectangleObject = DirectCast(annObj, AnnRectangleObject)

               ' Yes, get the bounds in pixels

               ' Convert the rectangle bounds to logical (image coordinates)
               Dim bounds As AnnRectangle = rectObj.ConvertObjectToLogicalRectangle(rectObj.Bounds)

               ' Convert the bounds to pixels
               Dim boundsPixels As RectangleF = bounds.ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToRectangleF()

               ' Move it to the right
               boundsPixels.Offset(-5, 0)

               ' Re-set to bounds
               bounds = rectObj.ConvertLogicalToObjectRectangle(New AnnRectangle(boundsPixels, AnnUnit.Pixel))
               rectObj.Bounds = bounds
            End If
         Next

         ' Invalidate
         automation.Viewer.Invalidate()
      End Sub</code>
        <code lang="CS">      private void OffsetLinesAndRectangles(AnnAutomation automation)
      {
         // Loop through all the objects in the annotation container
         foreach(AnnObject annObj in automation.Container.Objects)
         {
            if(annObj is AnnLineObject)
            {
               AnnLineObject lineObj = annObj as AnnLineObject;
               // Move this line object to the left by 5 logical pixels

               // Convert the line points to logical (image coordinates)
               AnnPoint[] pts = { lineObj.StartPoint, lineObj.EndPoint };

               pts = lineObj.ConvertObjectToLogicalPoints(pts);

               // Convert the points to pixels
               PointF pt1Pixels = pts[0].ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF();
               PointF pt2Pixels = pts[1].ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToPointF();

               // Move them to the right
               pt1Pixels.X -= 5;
               pt2Pixels.Y -= 5;

               // Set it back to the line
               pts[0] = new AnnPoint(pt1Pixels, AnnUnit.Pixel);
               pts[1] = new AnnPoint(pt2Pixels, AnnUnit.Pixel);
               pts = lineObj.ConvertLogicalToObjectPoints(pts);
               lineObj.StartPoint = pts[0];
               lineObj.EndPoint = pts[1];
            }
            else if(annObj is AnnRectangleObject)
            {
               AnnRectangleObject rectObj = annObj as AnnRectangleObject;

               // Yes, get the bounds in pixels

               // Convert the rectangle bounds to logical (image coordinates)
               AnnRectangle bounds = rectObj.ConvertObjectToLogicalRectangle(rectObj.Bounds);

               // Convert the bounds to pixels
               RectangleF boundsPixels = bounds.ConvertTo(automation.Container.UnitConverter, AnnUnit.Pixel).ToRectangleF();

               // Move it to the right
               boundsPixels.Offset(-5, 0);

               // Re-set to bounds
               bounds = rectObj.ConvertLogicalToObjectRectangle(new AnnRectangle(boundsPixels, AnnUnit.Pixel));
               rectObj.Bounds = bounds;
            }
         }

         // Invalidate
         automation.Viewer.Invalidate();
      }</code>
        <!--AnnObject.ConvertLogicalToObjectPoints-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectRectangle(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Converts a rectangle from logical to object coordinates.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="rect">A rectangle in logical coordinates.</param>
      <returns>A rectangle representing the original rectangle but in object coordinates.</returns>
      <remarks>
        <para>An <see cref="T:Leadtools.Annotations.AnnObject" /> may contain various points, lines, curves and rectangles that denote the object coordinates and where it should be drawn on an image. Also, the <see cref="T:Leadtools.Annotations.AnnObject" /> contains
            a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that may be updated with a transformation when the object is moved, rotated or sized. This transformation as well as the container's own transformation are used to translate
            an object point to image coordinates and then to the screen.</para>
        <para>The coordinates stored in the object (for example, <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> or <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds">AnnRectangleObject.Bounds</see> are called
            object coordinates. These coordinates do not translate 1 to 1 to pixel values on the image used in the annotations because of the transformation matrices involved.</para>
        <para>The values corresponding to the object coordinates in pixels are called logical coordinates. For example, a logical coordinate of <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint">AnnLineObject.StartPoint</see> is its
            pixel value (in top left-position) in the image it is annotating. Converting from object to logical coordinates is what happens when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize">AnnAutomation.Realize</see>
            method.</para>
        <para>To manipulate an object's position and size manually from outside the annotation framework, you need to first convert its coordinates to logical values, perform your own transformations, convert them back
            to object coordinates before setting them back to the object.</para>
        <para>To convert a point or a group of points from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a point or a group of points from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" /> method.</para>
        <para>To convert a rectangle from object to logical coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>To convert a rectangle from logical to object coordinates, use the <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectRectangle(Leadtools.Annotations.AnnRectangle)" /> method.</para>
        <para>For an example on converting object to logical coordinates, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertObjectToLogicalPoints(Leadtools.Annotations.AnnPoint[])" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.ConvertLogicalToObjectPoints(Leadtools.Annotations.AnnPoint[])" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.GripperDistance">
      <summary>
            The distance in pixels that the <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> control point is originally
            placed from the bounds of the <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The distance in pixels that the <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> control point is originally
            placed from the bounds of the <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnObject" /> is first selected, two rotate handles appear: 
            the <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /> and the <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" />.
            This property is the pixel distance that the <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> is initially 
            placed from the bounds of the <see cref="T:Leadtools.Annotations.AnnObject" />.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" /></remarks>
      <example>
        <para>This example does the following:
            <list type="number"><item><description>displays the <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /> and <see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> location (in object coordinates)</description></item><item><description>changes the gripper distance to 60 pixels</description></item><item><description>resets the rotate points to a new location (using the new gripper distance)</description></item></list></para>
        <code lang="VB">      Public Sub AnnObject_GripperDistance(ByVal obj As AnnObject)
         Dim s As String = String.Format("RotateCenter: ({0},{1})  RotateGripper: ({2},{3})", obj.RotateCenter.X, obj.RotateCenter.Y, obj.RotateGripper.X, obj.RotateGripper.Y)
         MessageBox.Show(s)
         obj.GripperDistance = 60
         obj.ResetRotatePoints()
      End Sub</code>
        <code lang="CS">      public void AnnObject_GripperDistance(AnnObject obj)
      {
         string s = String.Format("RotateCenter: ({0},{1})  RotateGripper: ({2},{3})",
            obj.RotateCenter.X, obj.RotateCenter.Y,
            obj.RotateGripper.X, obj.RotateGripper.Y);
         MessageBox.Show(s);
         obj.GripperDistance = 60;
         obj.ResetRotatePoints();
      }</code>
        <!--AnnObject.GripperDistance-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Container">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnContainer" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnContainer" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>An <see cref="T:Leadtools.Annotations.AnnObject" /> can be part of one <see cref="T:Leadtools.Annotations.AnnContainer" /> only at any given time.</p>
        <p>When adding or removing objects to or from a container, you do not need to manually set this property to the container value: this operation is performed internally by the LEADTOOLS annotation toolkit.  However, you can check the value of this property to determine the container to which a certain object currently belongs.</p>
      </remarks>
      <example>
        <para>This example creates two containers, adds an object to the first container then moves it to the second while checking the <see cref="P:Leadtools.Annotations.AnnObject.Container" /> property of the object.</para>
        <code lang="VB">      Public Sub AnnObject_Container()
         ' create 2 containers
         Dim firstContainer As AnnContainer = New AnnContainer()
         firstContainer.Name = "First Container"
         Dim secondContainer As AnnContainer = New AnnContainer()
         secondContainer.Name = "Second Container"
         ' add an object to the first container
         Dim line As AnnLineObject = New AnnLineObject()
         line.Name = "Line1"

         ' add the object to the first container
         firstContainer.Objects.Add(line)
         Dim s As String = String.Format("Container: {0}", line.Container.Name)
         MessageBox.Show(s)

         ' move the object to the second container
         firstContainer.Objects.Remove(line)
         secondContainer.Objects.Add(line)
         s = String.Format("Container: {0}", line.Container.Name)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnObject_Container()
      {
         // create 2 containers
         AnnContainer firstContainer = new AnnContainer();
         firstContainer.Name = "First Container";
         AnnContainer secondContainer = new AnnContainer();
         secondContainer.Name = "Second Container";
         // add an object to the first container
         AnnLineObject line = new AnnLineObject();
         line.Name = "Line1";

         // add the object to the first container
         firstContainer.Objects.Add(line);
         string s = string.Format("Container: {0}", line.Container.Name);
         MessageBox.Show(s);

         // move the object to the second container
         firstContainer.Objects.Remove(line);
         secondContainer.Objects.Add(line);
         s = string.Format("Container: {0}", line.Container.Name);
         MessageBox.Show(s);
      }</code>
        <!--AnnObject.Container-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Group">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>An <see cref="T:Leadtools.Annotations.AnnObject" /> can be part of one <see cref="T:Leadtools.Annotations.AnnGroupObject" /> only at any given time.</p>
        <p>When adding or removing objects to or from a group, you do not need to manually set this property to the container value: this operation is performed internally by the LEADTOOLS annotation toolkit.  However, you can check the value of this property to determine the group (if any) to which a certain object currently belongs.</p>
      </remarks>
      <example>
        <para>This example creates a line, adds it to a group then adds the group to a container while checking the <see cref="P:Leadtools.Annotations.AnnObject.Container" /> and <see cref="P:Leadtools.Annotations.AnnObject.Group" /> property of the object.</para>
        <code lang="VB">      Public Sub AnnObject_Group()
         ' add an object to the first container
         Dim line As AnnLineObject = New AnnLineObject()
         line.Name = "Line1"
         ShowGroupAndContainer(line)

         ' add it to a group
         Dim group As AnnGroupObject = New AnnGroupObject()
         group.Name = "Group1"
         group.Objects.Add(line)

         ShowGroupAndContainer(line)

         ' add the group to a container
         Dim container As AnnContainer = New AnnContainer()
         container.Name = "Container1"
         container.Objects.Add(group)

         ShowGroupAndContainer(line)
      End Sub

      Private Sub ShowGroupAndContainer(ByVal obj As AnnObject)
         Console.Write("Container: ")
         If Not obj.Container Is Nothing Then
            Console.Write(obj.Container.Name)
         Else
            Console.Write("none")
         End If

         Console.Write(", Group: ")
         If Not obj.Group Is Nothing Then
            Console.Write(obj.Group.Name)
         Else
            Console.Write("none")
         End If

         Console.WriteLine()
      End Sub</code>
        <code lang="CS">      public void AnnObject_Group()
      {
         // add an object to the first container
         AnnLineObject line = new AnnLineObject();
         line.Name = "Line1";
         ShowGroupAndContainer(line);

         // add it to a group
         AnnGroupObject group = new AnnGroupObject();
         group.Name = "Group1";
         group.Objects.Add(line);

         ShowGroupAndContainer(line);

         // add the group to a container
         AnnContainer container = new AnnContainer();
         container.Name = "Container1";
         container.Objects.Add(group);

         ShowGroupAndContainer(line);
      }

      private void ShowGroupAndContainer(AnnObject obj)
      {
         Console.Write("Container: ");
         if(obj.Container != null)
            Console.Write(obj.Container.Name);
         else
            Console.Write("none");

         Console.Write(", Group: ");
         if(obj.Group != null)
            Console.Write(obj.Group.Name);
         else
            Console.Write("none");

         Console.WriteLine();
      }</code>
        <!--AnnObject.Group-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Name">
      <summary>
            Gets or sets the name of the <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The name of the <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            An object name is one way of differentiating between multiple objects in a container.  LEADTOOLS does not use the object name in any special way and the value has no special meaning. 
            For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see>. 
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameOffset">
      <summary>
            Gets or sets the name offset relative to the upper left corner of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The name offset relative to the upper left corner of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            The automation mode uses this property when you click and drag the name of an object around.  Setting this property to an empty point, puts the name back at the upper left corner of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />. 
            For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <example>
        <para>This example sets the names of all objects in a container to be visible, at the upper-left corner of the image, and to have white text over a blue background with an Arial 11-point font.</para>
        <code lang="VB">      Public Sub AnnObject_NameOffset(ByVal container As AnnContainer)
         Dim font As AnnFont = New AnnFont("Arial", New AnnLength(11, AnnUnit.Point), FontStyle.Regular)
         For Each obj As AnnObject In container.Objects
            obj.NameVisible = True
            obj.NameOffset = AnnPoint.Empty
            obj.NameForeColor = Color.White
            obj.NameBackColor = Color.Blue
            obj.NameFont = font
         Next obj
      End Sub</code>
        <code lang="CS">      public void AnnObject_NameOffset(AnnContainer container)
      {
         AnnFont font = new AnnFont("Arial", new AnnLength(11, AnnUnit.Point), FontStyle.Regular);
         foreach(AnnObject obj in container.Objects)
         {
            obj.NameVisible = true;
            obj.NameOffset = AnnPoint.Empty;
            obj.NameForeColor = Color.White;
            obj.NameBackColor = Color.Blue;
            obj.NameFont = font;
         }
      }</code>
        <!--AnnObject.NameOffset-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameForeColor">
      <summary>
            Gets or sets the color used to draw the text of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color used to draw the text of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameForeColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> used to draw the text of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameBackColor">
      <summary>
            Gets or sets the color used to fill the background of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color used to fill the background of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameBackColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> used to fill the background of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameFont">
      <summary>
            Gets or sets the font used to draw the text of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The font used to draw the text of the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameVisible">
      <summary>
            Gets or sets a value to determine whether to draw the name of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>true if the name of this <see cref="T:Leadtools.Annotations.AnnObject" /> is to be drawn whenever the object is drawn; false otherwise.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.NameRestrict">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnObject" /> name is restricted to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnObject.Container" />.
            </summary>
      <value>true to restrict the name to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnObject.Container" />; otherwise, false.</value>
      <remarks>
            When the <b>NameRestrict</b> value of an <see cref="T:Leadtools.Annotations.AnnObject" /> is set to true, calling the <see cref="M:Leadtools.Annotations.AnnObject.RestrictName" /> method will move the name (by changing the <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" /> property so the name will be restricted to appear fully within the <see cref="P:Leadtools.Annotations.AnnContainer.Bounds" /> property of the <see cref="T:Leadtools.Annotations.AnnContainer" /> that contains this <see cref="T:Leadtools.Annotations.AnnObject" />). For more information, refer to <see cref="T:AN.Topics.AnnotationObjectNames">Annotation Object Names.</see></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Hyperlink">
      <summary>
            Gets or sets a string which represents the hyperlink for this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The hyperlink for this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>The hyperlink of an object can be any string value or null (Nothing in Visual Basic).  It is up to the user application to determine how to use this value.</p>
        <p>In automation mode, if the object has a hyperlink and is clicked on at runtime user mode, the automation framework will try to externally execute the hyperlink value.  For example, if the hyperlink is an address to a website, a new instance of your internet browser will be created with this hyperlink as the target address.  If the hyperlink is a movie file, the default movie player application in your machine will start with this hyperlink value as the movie name and so on.</p>
      </remarks>
      <example>
        <para>This method will "run" the object hypelink manually.</para>
        <code lang="VB">      Public Sub AnnObject_Hyperlink(ByVal obj As AnnObject)
         If Not obj.Hyperlink Is Nothing AndAlso obj.Hyperlink &lt;&gt; String.Empty Then
            Try
               System.Diagnostics.Process.Start(obj.Hyperlink)
            Catch ex As Exception
               MessageBox.Show(ex.Message)
            End Try
         End If
      End Sub</code>
        <code lang="CS">      public void AnnObject_Hyperlink(AnnObject obj)
      {
         if(obj.Hyperlink != null &amp;&amp; obj.Hyperlink != string.Empty)
         {
            try
            {
               System.Diagnostics.Process.Start(obj.Hyperlink);
            }
            catch(Exception ex)
            {
               MessageBox.Show(ex.Message);
            }
         }
      }</code>
        <!--AnnObject.Hyperlink-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Visible">
      <summary>
            Gets or sets a value indicating whether the <see cref="T:Leadtools.Annotations.AnnObject" /> is visible.
            </summary>
      <value>true if the annotation object is visible; otherwise, false.<br />The default is true.</value>
      <remarks>
            When an object is visible, it is drawn whenever its parent container (or group) is drawn.  If the object is invisible, it will not be drawn.
            </remarks>
      <example>
        <para>This method makes all objects visible.</para>
        <code lang="VB">      Public Sub AnnObject_Visible(ByVal container As AnnContainer)
         For Each obj As AnnObject In container.Objects
            If (Not obj.Visible) Then
               obj.Visible = True
            End If
         Next obj
      End Sub</code>
        <code lang="CS">      public void AnnObject_Visible(AnnContainer container)
      {
         foreach(AnnObject obj in container.Objects)
         {
            if(!obj.Visible)
               obj.Visible = true;
         }
      }</code>
        <!--AnnObject.Visible-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.IsLocked">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnObject" /> is locked.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnObject" /> is currently locked; false otherwise.</value>
      <remarks>
        <p>(Read only) Only unlocked objects can be locked.  If an object is already locked, it will stay locked with its original password.  You must pass the same password to <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" /> to unlock this <see cref="T:Leadtools.Annotations.AnnObject" />.</p>
        <p>An object must be unlocked in order to change that object in automated mode.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Password">
      <summary>
            Gets the password used in the last successful lock operation of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The password used in the last successful lock operation of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>(Read only) If the object is locked, the password passed to the <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" /> is stored in this property.</p>
        <p>When the object is unlocked successfully with <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" />, the password is cleared (the value will be an empty string).</p>
        <p>An object must be unlocked in order to change that object in automated mode.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.SerializePassword">
      <summary>
            Gets or sets a value indicating whether the password is saved when this <see cref="T:Leadtools.Annotations.AnnObject" /> is serialized.
            </summary>
      <value>true if this password is saved when this <see cref="T:Leadtools.Annotations.AnnObject" /> is serialized; false otherwise.</value>
      <remarks>
            Serialization is used throughout the annotation toolkit to save object states.  For example, the annotation mode uses serialization to implement undo/redo buffers, copying/pasting objects to/from the clipboard as well as loading/saving objects to files or memory.  Setting this property to false will not store the password field of a locked object when the object is serialized.  This is not necessary in some situations such as implementing undo/redo buffers, but is very important to applications that do not want to save the password when objects are saved to disk files.
            </remarks>
      <example>
        <para>This example will implement copying/pasting all objects from a container to the clipboard.</para>
        <code lang="VB">      ''' 
      Private Shared ReadOnly clipboardFormatName As String = "LeadtoolsAnnotations"
      Public Sub AnnObject_SerializePassword(ByVal container As AnnContainer)
         ' first create a temporary object collection and copy all objects in the container into it
         Dim destObjects As RasterCollection(Of AnnObject) = New RasterCollection(Of AnnObject)()
         For Each srcObj As AnnObject In container.Objects
            Dim destObj As AnnObject = CType(IIf(TypeOf srcObj.Clone() Is AnnObject, srcObj.Clone(), Nothing), AnnObject)
            ' we do not want to save the password of locked objects to the clipbaord
            destObj.SerializePassword = False
            destObjects.Add(destObj)
         Next srcObj
         ' copy this object collection to the clipboard
         Dim format As DataFormats.Format = DataFormats.GetFormat(clipboardFormatName)
         Dim dataObj As DataObject = New DataObject(clipboardFormatName, destObjects)
         Clipboard.SetDataObject(dataObj)
      End Sub

      Private Sub PasteObjectsFromClipboard(ByVal container As AnnContainer)
         ' check if the clipboard has LEADTOOLS annotations objects
         Dim data As IDataObject = Clipboard.GetDataObject()
         If Not data Is Nothing Then
            Dim format As DataFormats.Format = DataFormats.GetFormat(clipboardFormatName)
            If data.GetDataPresent(clipboardFormatName) Then
               ' get the object collection from the clipboard
               Dim objects As RasterCollection(Of AnnObject) = CType(IIf(TypeOf data.GetData(clipboardFormatName) Is RasterCollection(Of AnnObject), data.GetData(clipboardFormatName), Nothing), RasterCollection(Of AnnObject))

               ' move the objects from this collection to the container
               Do While objects.Count &gt; 0
                  Dim obj As AnnObject = objects(0)
                  objects.RemoveAt(0)
                  container.Objects.Add(obj)
               Loop
            End If
         End If
      End Sub</code>
        <code lang="CS">      /// 
      private static readonly string clipboardFormatName = "LeadtoolsAnnotations";
      public void AnnObject_SerializePassword(AnnContainer container)
      {
         // first create a temporary object collection and copy all objects in the container into it
         RasterCollection&lt;AnnObject&gt; destObjects = new RasterCollection&lt;AnnObject&gt;();
         foreach(AnnObject srcObj in container.Objects)
         {
            AnnObject destObj = srcObj.Clone() as AnnObject;
            // we do not want to save the password of locked objects to the clipbaord
            destObj.SerializePassword = false;
            destObjects.Add(destObj);
         }
         // copy this object collection to the clipboard
         DataFormats.Format format = DataFormats.GetFormat(clipboardFormatName);
         DataObject dataObj = new DataObject(clipboardFormatName, destObjects);
         Clipboard.SetDataObject(dataObj);
      }

      private void PasteObjectsFromClipboard(AnnContainer container)
      {
         // check if the clipboard has LEADTOOLS annotations objects
         IDataObject data = Clipboard.GetDataObject();
         if(data != null)
         {
            DataFormats.Format format = DataFormats.GetFormat(clipboardFormatName);
            if(data.GetDataPresent(clipboardFormatName))
            {
               // get the object collection from the clipboard
               RasterCollection&lt;AnnObject&gt; objects = data.GetData(clipboardFormatName) as RasterCollection&lt;AnnObject&gt;;

               // move the objects from this collection to the container
               while(objects.Count &gt; 0)
               {
                  AnnObject obj = objects[0];
                  objects.RemoveAt(0);
                  container.Objects.Add(obj);
               }
            }
         }
      }</code>
        <!--AnnObject.SerializePassword-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Tag">
      <summary>
            Gets or sets the tag of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>And integer value that specifies the tag of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            The tag is an integer value that is not used by the LEADTOOLS Annotation toolkit.  However, you can use the tag value to store any integer value you want.  For example, you can use it store an index that links this <see cref="T:Leadtools.Annotations.AnnObject" /> to other collections in your program.
            </remarks>
      <example>
        <para>This sample adds a tag to each AnnObject added to the container</para>
        <code lang="VB">      Private tagCount As Integer
      Public Sub AnnObject_Tag()
         tagCount = 0
         ' create a container and subclass to its Objects.ItemAdded event
         Dim container As AnnContainer = New AnnContainer()
         AddHandler container.Objects.ItemAdded, AddressOf AnObjectAddedToContainer

         ' add a few objects to the container
         Dim lineObj As AnnLineObject = New AnnLineObject()
         container.Objects.Add(lineObj)

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         container.Objects.Add(rectObj)

         Dim ellipseObj As AnnEllipseObject = New AnnEllipseObject()
         container.Objects.Add(ellipseObj)

         ' enumerate the objects in the container and show their tag
         For Each obj As AnnObject In container.Objects
            MessageBox.Show(String.Format("Object type: {0}, Tag: {1}", obj.GetType().Name, obj.Tag))
         Next obj
      End Sub

      Private Sub AnObjectAddedToContainer(ByVal sender As Object, ByVal e As RasterCollectionEventArgs(Of AnnObject))
         ' get the object
         Dim obj As AnnObject = e.Item

         ' update its tag
         obj.Tag = tagCount
         tagCount += 1
      End Sub</code>
        <code lang="CS">      private int tagCount;
      public void AnnObject_Tag()
      {
         tagCount = 0;
         // create a container and subclass to its Objects.ItemAdded event
         AnnContainer container = new AnnContainer();
         container.Objects.ItemAdded += new EventHandler&lt;RasterCollectionEventArgs&lt;AnnObject&gt;&gt;(AnObjectAddedToContainer);

         // add a few objects to the container
         AnnLineObject lineObj = new AnnLineObject();
         container.Objects.Add(lineObj);

         AnnRectangleObject rectObj = new AnnRectangleObject();
         container.Objects.Add(rectObj);

         AnnEllipseObject ellipseObj = new AnnEllipseObject();
         container.Objects.Add(ellipseObj);

         // enumerate the objects in the container and show their tag
         foreach(AnnObject obj in container.Objects)
            MessageBox.Show(String.Format("Object type: {0}, Tag: {1}", obj.GetType().Name, obj.Tag));
      }

      private void AnObjectAddedToContainer(object sender, RasterCollectionEventArgs&lt;AnnObject&gt; e)
      {
         // get the object
         AnnObject obj = e.Item;

         // update its tag
         obj.Tag = tagCount;
         tagCount++;
      }</code>
        <!--AnnObject.Tag-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.UserData">
      <summary>
            Gets or sets the user-defined data of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The user-defined data of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            You can use this property to store any extra data with this <see cref="T:Leadtools.Annotations.AnnObject" />.  However, to allow functionality that depends on serialization (such as loading/saving from file or memory, copy/paste to/from clipboard, undo/redo buffers, etc), you must make sure the data type you use with this property is serializable.  For more information on serialization, refer to the <see cref="T:System.SerializableAttribute" /> and <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.
            </remarks>
      <example>
        <para>This example will use a user-defined class to store extra information with each annotation object.</para>
        <code lang="VB">      ' This is the main method in your application to create a container
      Private Function AnnObject_UserData() As AnnContainer
         ' create the container and subclass to its Objects.ItemAdded event
         Dim container As AnnContainer = New AnnContainer()
         AddHandler container.Objects.ItemAdded, AddressOf Objects_ItemAdded

         ' Add an item to the container
         Dim ellipse As AnnEllipseObject = New AnnEllipseObject()
         ellipse.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         ellipse.Pen = New AnnPen(Color.Green, New AnnLength(2, AnnUnit.Pixel))
         ellipse.Brush = New AnnSolidBrush(Color.Yellow)
         ellipse.Name = "Ellipse"
         container.Objects.Add(ellipse)


         Return container
      End Function

      ' A private class in your application to store the user name as well as the date/time an annotation object was created.
      Public Class MyUserData
         Public Sub New(ByVal userName_Renamed As String)
            _userName = userName_Renamed
            _dateCreated = DateTime.Now
         End Sub

         Private _userName As String
         Public Property UserName() As String
            Get
               Return _userName
            End Get
            Set(ByVal value As String)
               _userName = Value
            End Set
         End Property

         Private _dateCreated As DateTime
         Public Property DateCreated() As DateTime
            Get
               Return _dateCreated
            End Get
            Set(ByVal value As DateTime)
               _dateCreated = Value
            End Set
         End Property
      End Class

      Private Sub Objects_ItemAdded(ByVal sender As Object, ByVal e As RasterCollectionEventArgs(Of AnnObject))
         ' get the object
         Dim obj As AnnObject = CType(IIf(TypeOf e.Item Is AnnObject, e.Item, Nothing), AnnObject)

         ' store the current user name and date/time this object was created in the object
         Dim userData As MyUserData = New MyUserData("MyUserName")
         obj.UserData = userData
      End Sub
</code>
        <code lang="CS">      // This is the main method in your application to create a container
      private AnnContainer AnnObject_UserData()
      {
         // create the container and subclass to its Objects.ItemAdded event
         AnnContainer container = new AnnContainer();
         container.Objects.ItemAdded += new EventHandler&lt;RasterCollectionEventArgs&lt;AnnObject&gt;&gt;(Objects_ItemAdded);

         // Add an item to the container
         AnnEllipseObject ellipse = new AnnEllipseObject();
         ellipse.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         ellipse.Pen = new AnnPen(Color.Green, new AnnLength(2, AnnUnit.Pixel));
         ellipse.Brush = new AnnSolidBrush(Color.Yellow);
         ellipse.Name = "Ellipse";
         container.Objects.Add(ellipse);


         return container;
      }

      // A private class in your application to store the user name as well as the date/time an annotation object was created.
      public class MyUserData
      {
         public MyUserData(string userName)
         {
            _userName = userName;
            _dateCreated = DateTime.Now;
         }

         private string _userName;
         public string UserName
         {
            get
            {
               return _userName;
            }
            set
            {
               _userName = value;
            }
         }

         private DateTime _dateCreated;
         public DateTime DateCreated
         {
            get
            {
               return _dateCreated;
            }
            set
            {
               _dateCreated = value;
            }
         }
      }

      void Objects_ItemAdded(object sender, RasterCollectionEventArgs&lt;AnnObject&gt; e)
      {
         // get the object
         AnnObject obj = e.Item as AnnObject;

         // store the current user name and date/time this object was created in the object
         MyUserData userData = new MyUserData("MyUserName");
         obj.UserData = userData;
      }
</code>
        <!--AnnObject.UserData-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Transform">
      <summary>
            Returns the current transformation <see cref="T:System.Drawing.Drawing2D.Matrix" /> of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The current transformation <see cref="T:System.Drawing.Drawing2D.Matrix" /> of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>(Read only) Each annotation object has a transformation matrix associated with it.  You can perform various operations on this matrix by calling <see cref="M:Leadtools.Annotations.AnnObject.ResetTransform" />, <see cref="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)" />, <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" /> and <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" />.</p>
        <p>Derived annotation objects can control the transformation operation by overriding the <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> property.</p>
      </remarks>
      <example>
        <para>This example will perform various transformation on an annotation object then shows its transformation matrix.</para>
        <code lang="VB">      Private Sub AnnObject_Transform(ByVal obj As AnnObject)
         ' show the matrix
         ShowMatrix(obj.Transform)
         obj.Translate(2, 3)
         ShowMatrix(obj.Transform)
         obj.Scale(1.5F, 1.5F, obj.Origin)
         ShowMatrix(obj.Transform)
         obj.Rotate(45, obj.Origin)
         ShowMatrix(obj.Transform)
         obj.ResetTransform()
         ShowMatrix(obj.Transform)
      End Sub

      Private Sub ShowMatrix(ByVal mat As Matrix)
         Dim index As Integer = 0
         For i As Integer = 0 To 2
            For j As Integer = 0 To 1
               Console.Write("{0}, ", mat.Elements(index))
               index += 1
            Next j

            If i = 2 Then
               Console.WriteLine("{0}", "1")
            Else
               Console.WriteLine("{0}", "0")
            End If
            Console.WriteLine("---------")
         Next i
      End Sub</code>
        <code lang="CS">      private void AnnObject_Transform(AnnObject obj)
      {
         // show the matrix
         ShowMatrix(obj.Transform);
         obj.Translate(2, 3);
         ShowMatrix(obj.Transform);
         obj.Scale(1.5F, 1.5F, obj.Origin);
         ShowMatrix(obj.Transform);
         obj.Rotate(45, obj.Origin);
         ShowMatrix(obj.Transform);
         obj.ResetTransform();
         ShowMatrix(obj.Transform);
      }

      private void ShowMatrix(Matrix mat)
      {
         int index = 0;
         for(int i = 0; i &lt; 3; i++)
         {
            for(int j = 0; j &lt; 2; j++)
               Console.Write("{0}, ", mat.Elements[index++]);

            Console.WriteLine("{0}", i == 2 ? "1" : "0");
            Console.WriteLine("---------");
         }
      }</code>
        <!--AnnObject.Transform-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.PhysicalTransform">
      <summary>
            Returns the current physical transformation <see cref="T:System.Drawing.Drawing2D.Matrix" /> of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The current physical transformation matrix of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
        <p>(Read only) The physical transformation <see cref="T:System.Drawing.Drawing2D.Matrix" /> of an <see cref="T:Leadtools.Annotations.AnnObject" /> is the result of multiplying the object <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix by the <see cref="P:Leadtools.Annotations.AnnObject.Container" /><see cref="P:Leadtools.Annotations.AnnContainer.Transform" /> matrix.</p>
        <p>This matrix can be used to transform points from logical (in the object coordinate) coordinates to physical coordinates.  For example, the annotation toolkit uses this matrix during hit-testing.</p>
      </remarks>
      <example>
        <para>This example will perform various transformation on an annotation object then shows its transformation matrix.</para>
        <code lang="VB">      Private Sub AnnObject_PhysicalTransform(ByVal obj As AnnObject)
         ' this example only works with line objects
         If TypeOf obj Is AnnLineObject Then
            Dim line As AnnLineObject = CType(IIf(TypeOf obj Is AnnLineObject, obj, Nothing), AnnLineObject)
            ' show the logical coordinates of this line

            Dim pts As PointF() = {line.StartPoint.ConvertTo(line.Container.UnitConverter, AnnUnit.Pixel).ToPointF(), line.EndPoint.ConvertTo(line.Container.UnitConverter, AnnUnit.Pixel).ToPointF()}

            Console.WriteLine("Logical coordinates: {0}, {1}", pts(0), pts(1))

            ' show the physical coordinates of this line
            Dim mat As Matrix = line.PhysicalTransform
            Try
               Dim transformer As AnnTransformer = New AnnTransformer(line.Container.UnitConverter, mat)
               pts = transformer.PointToPhysical(pts)
               Console.WriteLine("Physical coordinates: {0}, {1}", pts(0), pts(1))
            Finally
               CType(mat, IDisposable).Dispose()
            End Try
         Else
            Console.WriteLine("Not an annotation line object!")
         End If
      End Sub</code>
        <code lang="CS">      private void AnnObject_PhysicalTransform(AnnObject obj)
      {
         // this example only works with line objects
         if(obj is AnnLineObject)
         {
            AnnLineObject line = obj as AnnLineObject;
            // show the logical coordinates of this line

            PointF[] pts = 
             {
                line.StartPoint.ConvertTo(line.Container.UnitConverter, AnnUnit.Pixel).ToPointF(),
                line.EndPoint.ConvertTo(line.Container.UnitConverter, AnnUnit.Pixel).ToPointF()
             };

            Console.WriteLine("Logical coordinates: {0}, {1}", pts[0], pts[1]);

            // show the physical coordinates of this line
            using(Matrix mat = line.PhysicalTransform)
            {
               AnnTransformer transformer = new AnnTransformer(line.Container.UnitConverter, mat);
               pts = transformer.PointToPhysical(pts);
               Console.WriteLine("Physical coordinates: {0}, {1}", pts[0], pts[1]);
            }
         }
         else
            Console.WriteLine("Not an annotation line object!");
      }</code>
        <!--AnnObject.PhysicalTransform-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnObject" /> when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that specifies how to transform this <see cref="T:Leadtools.Annotations.AnnObject" /> when any object transformation method is called.</value>
      <remarks>
            (Read only) Derived annotation objects can control how the various transformation operations are handled for this <see cref="T:Leadtools.Annotations.AnnObject" />.  Most objects use <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Auto</see> for automatic transformation.  In this mode, the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix is changed whenever any transformation method is called.  If a derived object does not support a certain transformation (for example, the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> does not support rotation), it can override this property to return <b>AnnTransformObjectMode.Points</b>.  In this case the annotation toolkit will call <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> to transform the points individually and keep the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix an identity matrix at all times.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.UnitConverter">
      <summary>
            Gets the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> that will be used in this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> setting for this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            (Read only) This method returns the same <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> contained in the <see cref="P:Leadtools.Annotations.AnnObject.Container" />. If this object has not been added to a container yet, this method will return null (Nothing in Visual Basic).
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.InvalidRectangle">
      <summary>
            Gets the physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            (Read only) This method returns the physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.  This bounding rectangle consists of the union of the following rectangles:
            <list type="bullet"><item><description>The bounding rectangle of the graphics path returned from the <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> method with a <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value of <b>Bound</b>.  This rectangle is then transformed using the <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" /> matrix to convert the rectangle to physical coordinates.  Finally this rectangle is adjusted by the physical width of the pen used to draw this object.</description></item><item><description>The physical bounding rectangle of the locked picture if this object is locked.  Refer to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />, <see cref="P:Leadtools.Annotations.AnnContainer.LockPicture" />.</description></item><item><description>The physical bounding rectangle of the name text if the name of this <see cref="T:Leadtools.Annotations.AnnObject" /> is visible. Refer to <see cref="P:Leadtools.Annotations.AnnObject.Name" />, <see cref="P:Leadtools.Annotations.AnnObject.NameFont" />, <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" /> and <see cref="P:Leadtools.Annotations.AnnObject.NameVisible" />.</description></item></list>
            This rectangle can be used to calculate the invalid region needed to re-paint this object inside its container.  The annotation automation toolkit uses this value to speed up re-painting the owner control when an object changes position or appearance.
            </remarks>
      <example>
        <para>This example will change an object's name and then re-paint it inside its container.</para>
        <code lang="VB">      Private Sub AnnObject_InvalidRectangle(ByVal obj As AnnObject, ByVal name As String, ByVal viewer As RasterImageViewer)
         ' first save the old invalid rectangle
         Dim rcOld As Rectangle = obj.InvalidRectangle
         ' set the name
         obj.Name = name
         obj.NameVisible = True
         obj.NameFont = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Bold Or FontStyle.Italic)

         ' get the new invalid rectangle
         Dim rcNew As Rectangle = obj.InvalidRectangle

         ' re-paint this object by invalidating the union of both rectangles
         viewer.Invalidate(Rectangle.Union(rcOld, rcNew))
      End Sub</code>
        <code lang="CS">      private void AnnObject_InvalidRectangle(AnnObject obj, string name, RasterImageViewer viewer)
      {
         // first save the old invalid rectangle
         Rectangle rcOld = obj.InvalidRectangle;
         // set the name
         obj.Name = name;
         obj.NameVisible = true;
         obj.NameFont = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Bold | FontStyle.Italic);

         // get the new invalid rectangle
         Rectangle rcNew = obj.InvalidRectangle;

         // re-paint this object by invalidating the union of both rectangles
         viewer.Invalidate(Rectangle.Union(rcOld, rcNew));
      }</code>
        <!--AnnObject.InvalidRectangle-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            (Read only) This method returns the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnObject" />.  This rectangle is the bounding rectangle of the graphics path returned from the <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> method with a <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value of <b>Bound</b>.  This bounding rectangle is also used to calculate the logical <see cref="P:Leadtools.Annotations.AnnObject.Origin" /> of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </remarks>
      <example>
        <para>This example will add a new annotation rectangle object at the bounding rectangle of another annotation object, offeset by 20.</para>
        <code lang="VB">      Public Sub AnnObject_BoundingRectangle(ByVal obj As AnnObject)
         Dim rc As AnnRectangle = obj.BoundingRectangle
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rc.Offset(20, 20)
         rectObj.Bounds = rc
         rectObj.Pen = New AnnPen(Color.Red, New AnnLength(3, AnnUnit.Pixel))
         rectObj.Name = "New Rectangle"
         obj.Container.Objects.Add(rectObj)
      End Sub</code>
        <code lang="CS">      public void AnnObject_BoundingRectangle(AnnObject obj)
      {
         AnnRectangle rc = obj.BoundingRectangle;
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rc.Offset(20, 20);
         rectObj.Bounds = rc;
         rectObj.Pen = new AnnPen(Color.Red, new AnnLength(3, AnnUnit.Pixel));
         rectObj.Name = "New Rectangle";
         obj.Container.Objects.Add(rectObj);
      }</code>
        <!--AnnObject.BoundingRectangle-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Origin">
      <summary>
            Gets the logical origin of this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>The logical origin of this <see cref="T:Leadtools.Annotations.AnnObject" />.</value>
      <remarks>
            (Read only) This method returns the logical origin of this <see cref="T:Leadtools.Annotations.AnnObject" />.  This value is calculated by returning the origin of the <see cref="P:Leadtools.Annotations.AnnObject.BoundingRectangle" /> value.  You can use this origin to <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" /> or <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" /> this object around itself.
            <p>For more information, refer to <see cref="T:AN.Topics.LowLevelCoordinateSystemForAnnotations">Low-Level Coordinate System for Annotations.</see></p></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnObject" />; false otherwise.</value>
      <remarks>
        <p>(Read only) This property is checked internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method is called.  You do not need to call this property directly.</p>
        <p>By default, if an object implements a brush, this value will be true if the brush is present and is not transparent.  Derived objects that does not implement a brush (such as the <see cref="T:Leadtools.Annotations.AnnImageObject" /> will override this property to return true if a picture is available.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.RotateCenter">
      <summary>
            The location of the rotate center control point.
            </summary>
      <value>
            The location of the rotate center control point.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnObject" /> is selected with an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />,
            two rotate control points appear:
            <list type="number"><item><description>Rotate center control point</description></item><item><description>Rotate gripper control point</description></item></list>
            This property returns the location of the rotate center control point.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /><seealso cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.GripperDistance" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.RotateGripper">
      <summary>
            The location of the rotate gripper control point.
            </summary>
      <value>
            The location of the rotate gripper control point.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnObject" /> is selected with an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />,
            two rotate control points appear:
            <list type="number"><item><description>Rotate center control point</description></item><item><description>Rotate gripper control point</description></item></list>
            This property returns the location of the rotate gripper control point.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /><seealso cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.GripperDistance" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.SupportsFixed">
      <summary>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </value>
      <remarks>
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />, <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" /> and <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.
            <para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para></remarks>
      <example>
        <para>This sample examines all objects in a container and looks for objects that do not support the state.</para>
        <code lang="VB">      Public Sub AnnotationObject_SupportsFixed(ByVal annContainer As AnnContainer)
         Dim supportsFixed As Boolean = True
         For Each obj As AnnObject In annContainer.Objects
            supportsFixed = supportsFixed AndAlso obj.SupportsFixed
         Next obj
         Dim s As String = String.Format("All Objects in AnnContainer support fixed: {0}", supportsFixed)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnotationObject_SupportsFixed(AnnContainer annContainer)
      {
         bool supportsFixed = true;
         foreach (AnnObject obj in annContainer.Objects)
         {
            supportsFixed = supportsFixed &amp;&amp; obj.SupportsFixed;
         }
         string s = String.Format("All Objects in AnnContainer support fixed: {0}", supportsFixed);
         MessageBox.Show(s);
      }</code>
        <!--AnnObject.SupportsFixed-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.IsFixedStateStackEmpty">
      <summary>
            true if the <b>fixed</b> stack is empty; false otherwise.
            </summary>
      <value>
            true if the <b>fixed</b> stack is empty; false otherwise.
            </value>
      <remarks>
            (Read only) Returns a value that indicates whether the fixed state has been temporarily disabled for an <see cref="T:Leadtools.Annotations.AnnObject" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnObject.FixedState">
      <summary>
            Gets or sets the font and pen fixed state of this object.
            </summary>
      <value>One or more combination of the <see cref="T:Leadtools.Annotations.AnnFixedStateOperations" /> enumeration members indicating the font and pen
            fixed state of the object. Default value is <see cref="T:Leadtools.Annotations.AnnFixedStateOperations">AnnFixedStateOperations.None</see>.</value>
      <remarks>
        <para>Use this property to fix an annotation object where any text or pen used to draw it will have a fixed value and will not change
            when the container is zoomed in or out.</para>
        <para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para>
      </remarks>
      <document>yes</document>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnFixedStateOperations" /></example>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.CalculateRotateAngle">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> overrides this member to return an array of the current points in the object to be transformed.<br /></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> overrides this member to copy the new transformed values back to the points.<br /></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangleObject.Bounds">
      <summary>
            Gets or sets the bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <noremarks />
      <value>The bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangleObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)">
      <summary>
            Gets the default picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture for the <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> specified by <i>type</i>.</returns>
      <remarks>
            Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetDefaultPicture(Leadtools.Annotations.AnnRubberStampType,Leadtools.Annotations.AnnPicture)" /> method to change the default picture used by the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects.  Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /> and <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /> methods to control whether an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> will use the default or original picture for a certain type.
            </remarks>
      <example>
        <para>This sample does the following:
            <list type="number"><item><description>displays the default rubberstamp picture (old style)</description></item><item><description>displays the default rubberstamp picture and displays it</description></item><item><description>restores original rubberstamp picture and displays</description></item><item><description>changes to new style and displays</description></item></list></para>
        <code lang="VB">      Public Sub AnnRubberStampObject_GetDefaultPicture(ByVal graphics As Graphics, ByVal filenameNewPicture As String)
         Dim useNewPicture As Boolean = AnnRubberStampObject.GetUseNewPicture(AnnRubberStampType.Important)
         Dim type As AnnRubberStampType = AnnRubberStampType.Important
         ' first draw the original picture for the Important rubber stamp
         Dim rc As Rectangle = New Rectangle(0, 0, 240, 120)
         DrawRubberStampPicture(graphics, rc, type)
         ' now change the picture to one of our own and redraw it
         Dim img As Image = Image.FromFile(filenameNewPicture)
         Dim picture As AnnPicture = New AnnPicture(img)
         picture.TransparentMode = AnnPictureTransparentMode.None
         AnnRubberStampObject.SetDefaultPicture(type, picture)

         ' at this point, all new AnnRubberStampObject with Type = Important will use this new picture
         rc.Offset(0, rc.Height + 10)
         DrawRubberStampPicture(graphics, rc, type)

         ' finally, set the picture back to the original value and redraw it
         AnnRubberStampObject.SetUseOriginalPicture(type, True)
         rc.Offset(0, rc.Height + 10)
         DrawRubberStampPicture(graphics, rc, type)

         '
         AnnRubberStampObject.SetUseNewPicture(AnnRubberStampType.Important, (Not useNewPicture))
         rc.Offset(0, rc.Height + 10)
         DrawRubberStampPicture(graphics, rc, type)
      End Sub

      Private Sub DrawRubberStampPicture(ByVal graphics As Graphics, ByVal rc As Rectangle, ByVal type As AnnRubberStampType)
         ' get the default picture for the rubber stamp
         Dim pic As AnnPicture = AnnRubberStampObject.GetDefaultPicture(type)

         ' draw it
         If Not pic.Image Is Nothing Then
            Dim ia As ImageAttributes = pic.ImageAttributes
            If Not ia Is Nothing Then
               graphics.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia)
               ia.Dispose()
            Else
               If rc.Width &gt; 1 AndAlso rc.Height &gt; 1 Then
                  graphics.DrawImage(pic.Image, rc)
               End If
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void AnnRubberStampObject_GetDefaultPicture(Graphics graphics, string filenameNewPicture)
      {
         bool useNewPicture = AnnRubberStampObject.GetUseNewPicture(AnnRubberStampType.Important);
         AnnRubberStampType type = AnnRubberStampType.Important;
         // first draw the original picture for the Important rubber stamp
         Rectangle rc = new Rectangle(0, 0, 240, 120);
         DrawRubberStampPicture(graphics, rc, type);
         // now change the picture to one of our own and redraw it
         Image img = Image.FromFile(filenameNewPicture);
         AnnPicture picture = new AnnPicture(img);
         picture.TransparentMode = AnnPictureTransparentMode.None;
         AnnRubberStampObject.SetDefaultPicture(type, picture);

         // at this point, all new AnnRubberStampObject with Type = Important will use this new picture
         rc.Offset(0, rc.Height + 10);
         DrawRubberStampPicture(graphics, rc, type);

         // finally, set the picture back to the original value and redraw it
         AnnRubberStampObject.SetUseOriginalPicture(type, true);
         rc.Offset(0, rc.Height + 10);
         DrawRubberStampPicture(graphics, rc, type);

         //
         AnnRubberStampObject.SetUseNewPicture(AnnRubberStampType.Important, !useNewPicture);
         rc.Offset(0, rc.Height + 10);
         DrawRubberStampPicture(graphics, rc, type);
      }

      private void DrawRubberStampPicture(Graphics graphics, Rectangle rc, AnnRubberStampType type)
      {
         // get the default picture for the rubber stamp
         AnnPicture pic = AnnRubberStampObject.GetDefaultPicture(type);

         // draw it
         if(pic.Image != null)
         {
            ImageAttributes ia = pic.ImageAttributes;
            if(ia != null)
            {
               graphics.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia);
               ia.Dispose();
            }
            else
            {
               if(rc.Width &gt; 1 &amp;&amp; rc.Height &gt;1)
                  graphics.DrawImage(pic.Image, rc);
            }
         }
      }</code>
        <!--AnnRubberStampObject.GetDefaultPicture-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.SetDefaultPicture(Leadtools.Annotations.AnnRubberStampType,Leadtools.Annotations.AnnPicture)">
      <summary>
            Sets the default picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <param name="picture">An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture for the <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> specified by <i>type</i>.</param>
      <remarks>
            Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" /> to get the default picture used by the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects.  Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /> and <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /> to control whether an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> will use the default or original picture for a certain type.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)">
      <summary>
            Sets a value to indicate whether to revert back to the original picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <param name="value">true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects with <see cref="P:Leadtools.Annotations.AnnRubberStampObject.Type" /> set to <i>type</i>; otherwise, false to use the new picture if any.</param>
      <remarks>
            Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" /> to get the current default picture used by the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects.  Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetDefaultPicture(Leadtools.Annotations.AnnRubberStampType,Leadtools.Annotations.AnnPicture)" /> to change the default picture.  Use <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /> to check whether the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> of a certain type is currently using the default picture.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)">
      <summary>
            Gets a value indicating whether to revert back to the original picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <returns>true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects with <see cref="P:Leadtools.Annotations.AnnRubberStampObject.Type" /> set to <i>type</i>; otherwise, false to use the new picture if any.</returns>
      <remarks>
            Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" /> to get the current default picture used by the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects.  Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetDefaultPicture(Leadtools.Annotations.AnnRubberStampType,Leadtools.Annotations.AnnPicture)" /> to change the default picture.  Use <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /> to change whether the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> of a certain type uses the default picture.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.SetUseNewPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)">
      <summary>
            Sets a value to indicate whether to use the new default picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <param name="value">true to use the new default picture for all <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> objects with <see cref="P:Leadtools.Annotations.AnnRubberStampObject.Type" /> set to <i>type</i>; otherwise, false to use the orginal default picture.</param>
      <remarks>
            LEADTOOLS has developed new default images for the predefined rubber stamp annotations. Use the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseNewPicture(Leadtools.Annotations.AnnRubberStampType)" /> function to get a value that indicates whether the new default pictures are being used. Set this function to true to use the new default picture. For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseNewPicture(Leadtools.Annotations.AnnRubberStampType)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" /></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRubberStampObject.GetUseNewPicture(Leadtools.Annotations.AnnRubberStampType)">
      <summary>
            Gets a value to indicate whether to use the new default picture for an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type. 
            </summary>
      <param name="type">An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that represents the type of the rubber stamp.</param>
      <remarks>
            Beginning with Version 14.5, LEADTOOLS developed new default images for the predefined 
            rubber stamp annotations. This function gets a value that indicates whether the new default 
            pictures are being used. 
            Set the <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseNewPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /> function 
            to true to use the new default picture. For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseNewPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.GetUseOriginalPicture(Leadtools.Annotations.AnnRubberStampType)" /><seealso cref="M:Leadtools.Annotations.AnnRubberStampObject.GetDefaultPicture(Leadtools.Annotations.AnnRubberStampType)" /></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRubberStampObject.SetUseNewPicture(Leadtools.Annotations.AnnRubberStampType,System.Boolean)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRubberStampObject.Type">
      <summary>
            Gets or sets this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.
            </summary>
      <value>A <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that specifies this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> type.</value>
      <remarks>For information regarding the default rubber stamps used in the automated mode, including information on how to override these default values, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRubberStampObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPolylineDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnPolylineDrawDesigner</b> class to draw an <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> or any other object that derives from it.  For example, this designer is used to draw <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> objects as well.
            </remarks>
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDesigner" /> class to provide standard functionality for drawing Annotation objects on an annotation container.
            </summary>
      <remarks>
            Other specific annotation object classes such as <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" /> and <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> derive from this base class.<br /></remarks>
      <example>
        <p>For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></p>
        <p>For an example of using existing draw designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</p>
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDesigner">
      <summary>
            The base class for all the designers in the annotation toolkit.
            </summary>
      <remarks>
        <para>An <see cref="T:Leadtools.Annotations.AnnDesigner" /> derived class controls the user interface functionality involved in drawing, editing or running an object.  This
            class provides the basic functionality common to all the designers such as hooking into a container, clipping the mouse cursor, etc.</para>
        <para>You must assign an <see cref="T:Leadtools.Annotations.AnnContainer" /> object to the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> member and either a
            <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object to the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" />, or
            an <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> to the <see cref="P:Leadtools.Annotations.AnnDesigner.AutomationControl" /> members of the designer.
            Then based on the exact designer functionality, it will hook into the various mouse events to draw a new, edit an existing
            (by moving, resizing, etc.) or run (if the container is in run user mode) an <see cref="T:Leadtools.Annotations.AnnObject" />.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      ''' Shows how to use designers to create and select annotation objects
      Private Class MyForm1 : Inherits Form
         Private myAnnContainer As AnnContainer
         'AnnAutomationManager manager;
         Private viewer As RasterImageViewer
         Private codecs As RasterCodecs
         Private currentDesigner As AnnDesigner
         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(500, 200)

            viewer = New RasterImageViewer()
            AddHandler viewer.TransformChanged, AddressOf viewer_TransformChanged
            AddHandler viewer.PostImagePaint, AddressOf viewer_PostImagePaint
            AddHandler viewer.MouseDown, AddressOf viewer_MouseDown
            AddHandler viewer.MouseMove, AddressOf viewer_MouseMove
            AddHandler viewer.MouseUp, AddressOf viewer_MouseUp
            AddHandler viewer.LostFocus, AddressOf viewer_LostFocus

            ' load an image into the viewer
            codecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")) ' fix this path to an existing image file on your system

            ' create and set up the container
            myAnnContainer = New AnnContainer()
            myAnnContainer.Bounds = New AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height)
            myAnnContainer.UnitConverter = New AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY)

            ' Create a panel with three buttons
            Dim panel As Panel = New Panel()
            panel.Dock = DockStyle.Left
            Controls.Add(panel)
            panel.BringToFront()

            ' Create three buttons
            Dim buttonLine As Button = New Button()
            AddHandler buttonLine.Click, AddressOf buttonLine_Click
            buttonLine.Text = "Line"
            buttonLine.Dock = DockStyle.Top
            panel.Controls.Add(buttonLine)
            buttonLine.BringToFront()

            Dim buttonRectangle As Button = New Button()
            AddHandler buttonRectangle.Click, AddressOf buttonRectangle_Click
            buttonRectangle.Text = "Rectangle"
            buttonRectangle.Dock = DockStyle.Bottom
            panel.Controls.Add(buttonRectangle)
            buttonRectangle.BringToFront()

            Dim buttonSelect As Button = New Button()
            AddHandler buttonSelect.Click, AddressOf buttonSelect_Click
            buttonSelect.Text = "Select"
            buttonSelect.Dock = DockStyle.Left
            panel.Controls.Add(buttonSelect)
            buttonSelect.BringToFront()

            ' Add the viewer
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.BringToFront()

         End Sub

         Private Sub viewer_TransformChanged(ByVal sender As Object, ByVal e As EventArgs)
            ' set up the container transformation
            If Not viewer.Image Is Nothing AndAlso Not myAnnContainer Is Nothing Then
               myAnnContainer.Transform = viewer.Transform.Clone()
            End If
         End Sub

         Private Sub viewer_PostImagePaint(ByVal sender As Object, ByVal e As PaintEventArgs)
            ' draw the container and its objects on this viewer
            If Not viewer.Image Is Nothing AndAlso Not myAnnContainer Is Nothing Then
               myAnnContainer.Draw(e.Graphics)
            End If
         End Sub

         Private Sub buttonSelect_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            ' Select button is clicked
            ' cancel any draw designer running
            If Not currentDesigner Is Nothing AndAlso TypeOf currentDesigner Is AnnDrawDesigner Then
               Dim drawDesigner As AnnDrawDesigner = CType(IIf(TypeOf currentDesigner Is AnnDrawDesigner, currentDesigner, Nothing), AnnDrawDesigner)
               drawDesigner.Cancel()
               currentDesigner = Nothing
            End If
         End Sub

         Private Sub buttonLine_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            ' Line button is clicked

            ' first end any current designer (if any)
            EndDesigner()

            ' start a new Line draw designer
            Dim lineDrawDesigner As AnnLineDrawDesigner = New AnnLineDrawDesigner()

            ' set up the object template (a 2 pixels-wide pen)
            Dim lineObject As AnnLineObject = New AnnLineObject()
            lineObject.Pen = New AnnPen(Color.Red, New AnnLength(2, AnnUnit.Pixel))
            lineDrawDesigner.ObjectTemplate = lineObject

            StartDrawDesigner(lineDrawDesigner)
         End Sub


         Private Sub buttonRectangle_Click(ByVal sender As Object, ByVal e As System.EventArgs)
            ' Rectangle button is clicked

            ' first end any current designer (if any)
            EndDesigner()

            ' start a new Rectangle draw designer
            Dim rectangleDrawDesigner As AnnRectangleDrawDesigner = New AnnRectangleDrawDesigner()

            ' set up the object template (a 2 pixels-wide pen)
            Dim rectangleObject As AnnRectangleObject = New AnnRectangleObject()
            rectangleObject.Pen = New AnnPen(Color.Red, New AnnLength(2, AnnUnit.Pixel))
            rectangleObject.Brush = New AnnSolidBrush(Color.Yellow)
            rectangleDrawDesigner.ObjectTemplate = rectangleObject

            StartDrawDesigner(rectangleDrawDesigner)
         End Sub

         Private Sub EndDesigner()
            ' ends any running designer
            If Not currentDesigner Is Nothing Then
               If TypeOf currentDesigner Is AnnEditDesigner Then
                  Dim editDesigner As AnnEditDesigner = CType(IIf(TypeOf currentDesigner Is AnnEditDesigner, currentDesigner, Nothing), AnnEditDesigner)
                  editDesigner.End()
               ElseIf TypeOf currentDesigner Is AnnDrawDesigner Then
                  Dim drawDesigner As AnnDrawDesigner = CType(IIf(TypeOf currentDesigner Is AnnDrawDesigner, currentDesigner, Nothing), AnnDrawDesigner)
                  drawDesigner.Cancel()
               End If
            End If
         End Sub

         Private Sub StartDrawDesigner(ByVal drawDesigner As AnnDrawDesigner)
            ' set up the current designer
            AddHandler drawDesigner.Draw, AddressOf OnDesignerDraw
            drawDesigner.Owner = viewer
            drawDesigner.ClipCursor = True
            drawDesigner.Container = myAnnContainer
            currentDesigner = drawDesigner
         End Sub

         Private Sub OnDesignerDraw(ByVal sender As Object, ByVal e As AnnDrawDesignerEventArgs)
            ' show information on the current draw operation
            Console.Write("Status: {0}, Object: {1}, Coordinates:", e.OperationStatus, e.Object.GetType().Name)
            If TypeOf e.Object Is AnnLineObject Then
               Dim lineObject As AnnLineObject = CType(IIf(TypeOf e.Object Is AnnLineObject, e.Object, Nothing), AnnLineObject)
               Console.WriteLine("Start Point: {0}, EndPoint: {1}", lineObject.StartPoint, lineObject.EndPoint)
            ElseIf TypeOf e.Object Is AnnRectangleObject Then
               Dim rectangleObject As AnnRectangleObject = CType(IIf(TypeOf e.Object Is AnnRectangleObject, e.Object, Nothing), AnnRectangleObject)
               Console.WriteLine("Bounds: {0}", rectangleObject.Bounds)
            End If
         End Sub

         Private Sub viewer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseDown(e)
            End If

            If (Not handled) Then
               ' the mouse click was ! handled by a designer
               ' check if the click was on top of an existing object that we can start editing
               Dim pt As AnnPoint = New AnnPoint(e.X, e.Y)
               Dim obj As AnnObject = myAnnContainer.HitTest(pt, 2)
               If Not obj Is Nothing Then
                  ' yes, start the edit designer for this object
                  If TypeOf obj Is AnnLineObject Then
                     Dim lineEditDesigner As AnnLineEditDesigner = New AnnLineEditDesigner()
                     StartEditing(lineEditDesigner, obj, pt)
                     lineEditDesigner.MouseDown(e)
                  ElseIf TypeOf obj Is AnnRectangleObject Then
                     Dim rectangleEditDesigner As AnnRectangleEditDesigner = New AnnRectangleEditDesigner()
                     StartEditing(rectangleEditDesigner, obj, pt)
                     rectangleEditDesigner.MouseDown(e)
                  End If
               End If
            End If
         End Sub

         Private Sub StartEditing(ByVal editDesigner As AnnEditDesigner, ByVal obj As AnnObject, ByVal pt As AnnPoint)
            ' first end any running designers
            EndDesigner()

            ' set up the current designer
            AddHandler editDesigner.Edit, AddressOf OnDesignerEdit
            editDesigner.Owner = viewer
            editDesigner.Container = myAnnContainer
            editDesigner.ClipCursor = True
            editDesigner.EditObject = obj
            editDesigner.HitTestBuffer = 2
            editDesigner.ControlPointsHitTestBuffer = 2
            editDesigner.RotateModifierKey = Keys.Shift
            editDesigner.HitTestObject = obj.HitTest(pt, 2)

            ' set up the edit designer control points
            Dim rectangleControlPoint As AnnRectangleControlPoint = New AnnRectangleControlPoint()
            rectangleControlPoint.Size = New AnnSize(10, 10, AnnUnit.Pixel)
            rectangleControlPoint.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rectangleControlPoint.Brush = New AnnSolidBrush(Color.White)

            Dim i As Integer = 0
            Do While i &lt; editDesigner.ControlPointCount
               editDesigner.ControlPoints(i) = rectangleControlPoint
               i += 1
            Loop

            editDesigner.Start()
            currentDesigner = editDesigner
         End Sub

         Private Sub OnDesignerEdit(ByVal sender As Object, ByVal e As AnnEditDesignerEventArgs)
            ' show information on the current draw operation
            Console.Write("Object: {0}, Operation: {1}, Status: {2}, ", e.Object.GetType().Name, e.Operation, e.OperationStatus)
            If e.Operation = AnnEditDesignerOperation.MoveControlPoint Then
               Console.WriteLine("Control Point index: {0}", e.MoveControlPointIndex)
            Else
               Console.WriteLine("HitTestObject: {0}", e.HitTestObject)
            End If
         End Sub

         Private Sub viewer_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseMove(e)
            End If
         End Sub

         Private Sub viewer_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseUp(e)
            End If
         End Sub

         Private Sub viewer_LostFocus(ByVal sender As Object, ByVal e As EventArgs)
            ' see if a designer is currently running, if so, cancel it
            If Not currentDesigner Is Nothing Then
               currentDesigner.Cancel()
            End If
         End Sub

      End Class

      Public Sub AnnDesigner_AnnDesigner(ByVal title As String)
         Dim form As MyForm1 = New MyForm1(title)
         form.ShowDialog()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      /// Shows how to use designers to create and select annotation objects
      class MyForm1 : Form
      {
         AnnContainer container;
         //AnnAutomationManager manager;
         RasterImageViewer viewer;
         RasterCodecs codecs;
         AnnDesigner currentDesigner;
         public MyForm1(string title)
         {
            Text = title;
            Size = new Size(500, 200);

            viewer = new RasterImageViewer();
            viewer.TransformChanged += new EventHandler(viewer_TransformChanged);
            viewer.PostImagePaint += new PaintEventHandler(viewer_PostImagePaint);
            viewer.MouseDown += new MouseEventHandler(viewer_MouseDown);
            viewer.MouseMove += new MouseEventHandler(viewer_MouseMove);
            viewer.MouseUp += new MouseEventHandler(viewer_MouseUp);
            viewer.LostFocus += new EventHandler(viewer_LostFocus);

            // load an image into the viewer
            codecs = new RasterCodecs();
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");
            viewer.Image = codecs.Load(fileName);

            // create and set up the container
            container = new AnnContainer();
            container.Bounds = new AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height);
            container.UnitConverter = new AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY);

            // Create a panel with three buttons
            Panel panel = new Panel();
            panel.Dock = DockStyle.Left;
            Controls.Add(panel);
            panel.BringToFront();

            // Create three buttons
            Button buttonLine = new Button();
            buttonLine.Click +=new EventHandler(buttonLine_Click);
            buttonLine.Text = "Line";
            buttonLine.Dock = DockStyle.Top;
            panel.Controls.Add(buttonLine);
            buttonLine.BringToFront();

            Button buttonRectangle = new Button();
            buttonRectangle.Click +=new EventHandler(buttonRectangle_Click);
            buttonRectangle.Text = "Rectangle";
            buttonRectangle.Dock = DockStyle.Bottom;
            panel.Controls.Add(buttonRectangle);
            buttonRectangle.BringToFront();

            Button buttonSelect = new Button();
            buttonSelect.Click += new EventHandler(buttonSelect_Click);
            buttonSelect.Text = "Select";
            buttonSelect.Dock = DockStyle.Left;
            panel.Controls.Add(buttonSelect);
            buttonSelect.BringToFront();

            // Add the viewer
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.BringToFront();

         }

         private void viewer_TransformChanged(object sender, EventArgs e)
         {
            // set up the container transformation
            if(viewer.Image != null &amp;&amp; container != null)
               container.Transform = viewer.Transform.Clone();
         }

         private void viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // draw the container and its objects on this viewer
            if(viewer.Image != null &amp;&amp; container != null)
               container.Draw(e.Graphics);
         }

         private void buttonSelect_Click(object sender, System.EventArgs e)
         {
            // Select button is clicked
            // cancel any draw designer running
            if(currentDesigner != null &amp;&amp; currentDesigner is AnnDrawDesigner)
            {
               AnnDrawDesigner drawDesigner = currentDesigner as AnnDrawDesigner;
               drawDesigner.Cancel();
               currentDesigner = null;
            }
         }

         private void buttonLine_Click(object sender, System.EventArgs e)
         {
            // Line button is clicked

            // first end any current designer (if any)
            EndDesigner();

            // start a new Line draw designer
            AnnLineDrawDesigner lineDrawDesigner = new AnnLineDrawDesigner();

            // set up the object template (a 2 pixels-wide pen)
            AnnLineObject lineObject = new AnnLineObject();
            lineObject.Pen = new AnnPen(Color.Red, new AnnLength(2, AnnUnit.Pixel));
            lineDrawDesigner.ObjectTemplate = lineObject;

            StartDrawDesigner(lineDrawDesigner);
         }


          private void buttonRectangle_Click(object sender, System.EventArgs e)
          {
             // Rectangle button is clicked

             // first end any current designer (if any)
             EndDesigner();

             // start a new Rectangle draw designer
             AnnRectangleDrawDesigner rectangleDrawDesigner = new AnnRectangleDrawDesigner();

             // set up the object template (a 2 pixels-wide pen)
             AnnRectangleObject rectangleObject = new AnnRectangleObject();
             rectangleObject.Pen = new AnnPen(Color.Red, new AnnLength(2, AnnUnit.Pixel));
             rectangleObject.Brush = new AnnSolidBrush(Color.Yellow);
             rectangleDrawDesigner.ObjectTemplate = rectangleObject;

             StartDrawDesigner(rectangleDrawDesigner);
          }

          private void EndDesigner()
          {
             // ends any running designer
             if(currentDesigner != null)
             {
                if(currentDesigner is AnnEditDesigner)
                {
                   AnnEditDesigner editDesigner = currentDesigner as AnnEditDesigner;
                   editDesigner.End();
                }
                else if(currentDesigner is AnnDrawDesigner)
                {
                   AnnDrawDesigner drawDesigner = currentDesigner as AnnDrawDesigner;
                   drawDesigner.Cancel();
                }
             }
          }

          private void StartDrawDesigner(AnnDrawDesigner drawDesigner)
          {
             // set up the current designer
             drawDesigner.Draw += new EventHandler&lt;AnnDrawDesignerEventArgs&gt;(OnDesignerDraw);
             drawDesigner.Owner = viewer;
             drawDesigner.ClipCursor = true;
             drawDesigner.Container = container;
             currentDesigner = drawDesigner;
          }

          private void OnDesignerDraw(object sender, AnnDrawDesignerEventArgs e)
          {
             // show information on the current draw operation
             Console.Write("Status: {0}, Object: {1}, Coordinates:", e.OperationStatus, e.Object.GetType().Name);
             if(e.Object is AnnLineObject)
             {
                AnnLineObject lineObject = e.Object as AnnLineObject;
                Console.WriteLine("Start Point: {0}, EndPoint: {1}", lineObject.StartPoint, lineObject.EndPoint);
             }
             else if(e.Object is AnnRectangleObject)
             {
                AnnRectangleObject rectangleObject = e.Object as AnnRectangleObject;
                Console.WriteLine("Bounds: {0}", rectangleObject.Bounds);
             }
          }

          private void viewer_MouseDown(object sender, MouseEventArgs e)
          {
             bool handled = false;

             // see if a designer is currently running, if so, let it handle this event
             if(currentDesigner != null)
                handled = currentDesigner.MouseDown(e);

             if(!handled)
             {
                // the mouse click was ! handled by a designer
                // check if the click was on top of an existing object that we can start editing
                AnnPoint pt = new AnnPoint(e.X, e.Y);
                AnnObject obj = container.HitTest(pt, 2);
                if(obj != null)
                {
                   // yes, start the edit designer for this object
                   if(obj is AnnLineObject)
                   {
                      AnnLineEditDesigner lineEditDesigner = new AnnLineEditDesigner();
                      StartEditing(lineEditDesigner, obj, pt);
                      lineEditDesigner.MouseDown(e);
                   }
                   else if(obj is AnnRectangleObject)
                   {
                      AnnRectangleEditDesigner rectangleEditDesigner = new AnnRectangleEditDesigner();
                      StartEditing(rectangleEditDesigner, obj, pt);
                      rectangleEditDesigner.MouseDown(e);
                   }
                }
             }
          }

          private void StartEditing(AnnEditDesigner editDesigner, AnnObject obj, AnnPoint pt)
          {
             // first end any running designers
             EndDesigner();

             // set up the current designer
             editDesigner.Edit += new EventHandler&lt;AnnEditDesignerEventArgs&gt;(OnDesignerEdit);
             editDesigner.Owner = viewer;
             editDesigner.Container = container;
             editDesigner.ClipCursor = true;
             editDesigner.EditObject = obj;
             editDesigner.HitTestBuffer = 2;
             editDesigner.ControlPointsHitTestBuffer = 2;
             editDesigner.RotateModifierKey = Keys.Shift;
             editDesigner.HitTestObject = obj.HitTest(pt, 2);

             // set up the edit designer control points
             AnnRectangleControlPoint rectangleControlPoint = new AnnRectangleControlPoint();
             rectangleControlPoint.Size = new AnnSize(10, 10, AnnUnit.Pixel);
             rectangleControlPoint.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
             rectangleControlPoint.Brush = new AnnSolidBrush(Color.White);

             for(int i = 0; i &lt; editDesigner.ControlPointCount; i++)
                editDesigner.ControlPoints[i] = rectangleControlPoint;

             editDesigner.Start();
             currentDesigner = editDesigner;
          }

          private void OnDesignerEdit(object sender, AnnEditDesignerEventArgs e)
          {
             // show information on the current draw operation
             Console.Write("Object: {0}, Operation: {1}, Status: {2}, ", e.Object.GetType().Name, e.Operation, e.OperationStatus);
             if(e.Operation == AnnEditDesignerOperation.MoveControlPoint)
                Console.WriteLine("Control Point index: {0}", e.MoveControlPointIndex);
             else
                Console.WriteLine("HitTestObject: {0}", e.HitTestObject);
          }

          private void viewer_MouseMove(object sender, MouseEventArgs e)
          {
             bool handled = false;

             // see if a designer is currently running, if so, let it handle this event
             if(currentDesigner != null)
                handled = currentDesigner.MouseMove(e);
          }

          private void viewer_MouseUp(object sender, MouseEventArgs e)
          {
             bool handled = false;

             // see if a designer is currently running, if so, let it handle this event
             if(currentDesigner != null)
                handled = currentDesigner.MouseUp(e);
          }

          private void viewer_LostFocus(object sender, EventArgs e)
          {
             // see if a designer is currently running, if so, cancel it
             if(currentDesigner != null)
                currentDesigner.Cancel();
          }

      }

      public void AnnDesigner_AnnDesigner(string title)
      {
         MyForm1 form = new MyForm1(title);
         form.ShowDialog();
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnDesigner.AnnDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnDesigner" /> class.
            </summary>
      <remarks>
            Derived classes must call this constructor to initialize the <see cref="T:Leadtools.Annotations.AnnDesigner" /> object.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Handles mouse down events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> object that contains the mouse event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse down events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Handles mouse move events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> object that contains the mouse event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse move events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Handles mouse up events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> object that contains the mouse event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse up events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.DoubleClick(System.EventArgs)">
      <summary>
            Handles mouse double-click events on the designer.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse double-click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.KeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            Handles key down events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> object that contains data related to this event.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process key down click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.Cancel">
      <summary>
            Cancels the current designer operation.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.HookContainer(System.Boolean)">
      <summary>
            Hooks or unhooks the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" />.
            </summary>
      <param name="hook">true to hook the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" />; false to unhook it.</param>
      <remarks>
            Derived classes should call this method to hook the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> object if needed.  Hooking the container provides support for derived classes to do extra drawing whenever the container is painted.  <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes use this method to draw the control points of the object currently being edited.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)">
      <summary>
            Provides support for extra drawing whenever the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> is painted.
            </summary>
      <param name="sender">The source of the sender.</param>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnPaintEventArgs" /> object that contains the event data.</param>
      <remarks>
            Derived classes can override this method to provide extra drawing whenever the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> object is painted.  <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes use this method to draw the control points of the object currently being edited.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.StartClipCursor(System.Drawing.Rectangle)">
      <summary>
            Starts clipping the mouse cursor inside the given rectangle.
            </summary>
      <param name="rc">The rectangle in which the cursor will be shown.</param>
      <remarks>
            Derived classes usually call this method upon starting the design operation.  You can use <see cref="P:Leadtools.Annotations.AnnDesigner.ClipCursorRectangle" /> as the value for <i>rc</i> in most cases.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.EndClipCursor">
      <summary>
            Ends clipping the mouse cursor.
            </summary>
      <remarks>
            Derived classes usually call this method upon ending or canceling the design operation.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDesigner.GetLogicalAnnPoint(System.Int32,System.Int32,Leadtools.Annotations.AnnUnit)">
      <summary>
            Gets the logical <see cref="T:Leadtools.Annotations.AnnPoint" /> for the specified x, y and unit for this designer.
            </summary>
      <param name="x">The X position to be converted.</param>
      <param name="y">The Y position to be converted.</param>
      <param name="unit">The unit that will be used in converting x and y values to <see cref="T:Leadtools.Annotations.AnnPoint" />.</param>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPoint" /> which contains the converted x and y values using the specified unit for this designer.</returns>
      <remarks>
            This is a helper method that can be used by derived classes to convert a physical point (obtained usually through the mouse events) to a logical point on the current <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDesigner.Owner">
      <summary>
            Gets or sets the owner control for this <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </summary>
      <value>The owner <see cref="T:System.Windows.Forms.Control" /> object for this <see cref="T:Leadtools.Annotations.AnnDesigner" />.</value>
      <remarks>
        <para>The owner control is the control object which the <see cref="T:Leadtools.Annotations.AnnDesigner" /> will use during the designing of the
            <see cref="T:Leadtools.Annotations.AnnObject" />. The LEADTOOLS annotation framework uses an <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object for this value.</para>
        <para>To annotate your own control that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />, you must assign your control to the
            <see cref="P:Leadtools.Annotations.AnnDesigner.AutomationControl" /> property and leave the value of <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> to be the default of null.</para>
        <para>Note: In LEADTOOLS v17 and later, the framework uses an internal class that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> even when
            the automation is using the standard LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" /> class, so the value of
            <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> will always be null, instead, obtain the control being automated using the <see cref="P:Leadtools.Annotations.AnnDesigner.AutomationControl" />
            property.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDesigner.AutomationControl">
      <summary>
            Gets or sets the owner automation control for this <see cref="T:Leadtools.Annotations.AnnDesigner" /></summary>
      <value>The owner <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> object for this <see cref="T:Leadtools.Annotations.AnnDesigner" />.</value>
      <remarks>
        <para>This property is used To annotate your own control that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />, you must assign your control to the
            <see cref="P:Leadtools.Annotations.AnnDesigner.AutomationControl" /> property and leave the value of <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> to be the default of null.</para>
        <para>Note: In LEADTOOLS v17 and later, the framework uses an internal class that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> even when
            the automation is using the standard LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" /> class, so the value of
            <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> will always be null, instead, obtain the control being automated using the <see cref="P:Leadtools.Annotations.AnnDesigner.AutomationControl" />
            property.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDesigner.Container">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnContainer" /> object for this <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </summary>
      <noremarks />
      <value>The <see cref="T:Leadtools.Annotations.AnnContainer" /> object for this <see cref="T:Leadtools.Annotations.AnnDesigner" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDesigner.ClipCursor">
      <summary>
            Enables and disables clipping the cursor.
            </summary>
      <noremarks />
      <value>true to clip the cursor to the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" />; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDesigner.ClipCursorRectangle">
      <summary>
            Gets the rectangle used to clip the cursor when <see cref="P:Leadtools.Annotations.AnnDesigner.ClipCursor" /> is true.
            </summary>
      <value>
            The <see cref="T:System.Drawing.Rectangle" /> structure used to clip the cursor when <see cref="P:Leadtools.Annotations.AnnDesigner.ClipCursor" /> is true.
            </value>
      <remarks>
            (Read only) This rectangle is calculated based on the <see cref="P:Leadtools.Annotations.AnnDesigner.Container" /> object's <see cref="P:Leadtools.Annotations.AnnContainer.Bounds" /> and <see cref="P:Leadtools.Annotations.AnnContainer.Transform" /> values.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.#ctor">
      <summary>
            Initializes a new <b>AnnDrawDesigner</b> object.
            </summary>
      <noremarks />
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)" />.
            </summary>
      <param name="sender">The source of the sender.</param>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnPaintEventArgs" /> object that contains the event data.</param>
      <remarks>For more information refer to <see cref="M:Leadtools.Annotations.AnnDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.StartWorking(Leadtools.Annotations.AnnObject)">
      <summary>
            Starts the drawing of the <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> that will be drawn.</param>
      <returns>true when drawing the specified annotation object is started correctly; otherwise, false.</returns>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.Working(System.Drawing.Rectangle)">
      <summary>
            Continues the drawing of the <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <param name="rcInvalid">A <see cref="T:System.Drawing.Rectangle" /> structure that represents the invalid rectangle to paint.</param>
      <returns>true if the drawing process is continued successfully; otherwise false.</returns>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.EndWorking">
      <summary>
            Ends the annotation drawing process.
            </summary>
      <noremarks />
      <returns>true if the drawing process has ended successfully; otherwise, false.</returns>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.DoubleClick(System.EventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.DoubleClick(System.EventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse double-click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesigner.OnDraw(Leadtools.Annotations.AnnDrawDesignerEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnDrawDesigner.Draw" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnDrawDesignerEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnDraw</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnDraw</b> in a derived class, be sure to call the base class's <b>OnDraw</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnDrawDesigner.Draw">
      <summary>
            Occurs when this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> object is drawing an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnDrawDesignerEventArgs" />.</event>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.ObjectTemplate">
      <summary>
            Gets or sets the annotation template object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> that acts as the template for new annotation objects drawn by this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" />.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> will call the <see cref="M:Leadtools.Annotations.AnnObject.Clone" /> method of this <b>ObjectTemplate</b> when it is ready to add a new object to the container.  You should set this value with drawing attributes (pen, brush, font, etc) desired for new objects to be drawn with this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.DrawObject">
      <summary>
            Gets the <see cref="T:Leadtools.Annotations.AnnObject" /> that is currently being drawn.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnObject" /> that is currently being drawn.</value>
      <remarks>(Read only)</remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedMode">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is currently in extended mode.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is currently in extended mode; otherwise, false.</value>
      <remarks>
        <p>The base <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> does not use extended mode.  However, derived <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> classes can provide extra functionality and alter the way they function depending on the value of this property.  The following table shows what the standard draw designers of LEADTOOLS will do if the value of <b>ExtendedMode</b> is set to true:</p>
        <p>
          <list type="table">
            <listheader>
              <term>Designer</term>
              <description>When ExtendedMode is set to true</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" />
              </term>
              <description>The line will be drawn at 45 degrees.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" />
              </term>
              <description>The lines will be drawn at 45 degrees.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" />
              </term>
              <description>The rulers will be drawn at 45 degrees.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" />
              </term>
              <description>The rulers will be drawn at 45 degrees.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" />
              </term>
              <description>Will be forced to draw a square.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" />
              </term>
              <description>Will be forced to draw a square for the bounding box.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" />
              </term>
              <description>Will be forced to draw a square for the bounding box.</description>
            </item>
          </list>
        </p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedModeModifierKey">
      <summary>
            Gets or sets a value indicating the current extended mode key.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> value that specifies the current extended mode key.</value>
      <remarks>
            When this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is drawing an object and the user holds down the key specified by this property, the <see cref="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedMode" /> is activated.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.IsExtendedMode">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is currently in extended mode.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is currently in extended mode; otherwise, false.</value>
      <remarks>
            This property will check if either the value of the <see cref="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedMode" /> is set to true or the key specified by <see cref="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedModeModifierKey" /> is currently being pressed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesigner.UseNewMultilineBehavior">
      <summary>
            Gets or sets a value that indicate whether to cancel the drawing of a multi-point object if the mouse cursor was clicked and released in the same position.
            </summary>
      <value>
        <strong>true</strong> to cancel the drawing of a multi-point object if the mouse cursor was clicked and released in the same position.
            <strong>false</strong> otherwise. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This property is used when drawing any annotation object that derives from <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> such as
            <see cref="T:Leadtools.Annotations.AnnPolygonObject" />, <see cref="T:Leadtools.Annotations.AnnCurveObject" /> and <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />. When drawing a multi-line object, the user
            moves the mouse cursor to the desired position of the first point and clicks the left button. The user then moves to the location of the second
            point and releases the cursor to draw the second point. If the position of the two points is equal (in other words, the user clicks and releases
            the cursor over the same position) then the two points will have the same value and might not be the desired behavior.</para>
        <para>When the value of <see cref="P:Leadtools.Annotations.AnnDrawDesigner.UseNewMultilineBehavior" /> is <strong>true</strong> (the default value), then when the user clicks and releases
            the mouse cursor when drawing the first point of the polyline object, the drawing object will be canceled.</para>
        <para>When the value of <see cref="P:Leadtools.Annotations.AnnDrawDesigner.UseNewMultilineBehavior" /> is <strong>false</strong>, then when the user clicks and releases
            the mouse cursor when drawing the first point of the polyline object, a new polyline object with idnetical two points in the same position will be
            added.</para>
        <para>The <see cref="P:Leadtools.Annotations.AnnAutomationManager.UseNewMultilineBehavior">AnnAutomationManager.UseNewMultilineBehavior</see> property can be used to
            automatically set the value of <see cref="P:Leadtools.Annotations.AnnDrawDesigner.UseNewMultilineBehavior">AnnDrawDesigner.UseNewMultilineBehavior</see> when using
            the automation mode.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineDrawDesigner.DoubleClick(System.EventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.DoubleClick(System.EventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse double-click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnLineDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnLineObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnLineDrawDesigner</b> class to draw an <see cref="T:Leadtools.Annotations.AnnLineObject" /> or any other object that derives from it.  For example, this designer is used to draw <see cref="T:Leadtools.Annotations.AnnRulerObject" /> objects as well.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDesignerOperationStatus">
      <summary>
            Indicates the status of the current <see cref="T:Leadtools.Annotations.AnnDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnDesignerOperationStatus.Start">
      <summary>
            The designer operation has started.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnDesignerOperationStatus.Working">
      <summary>
            The designer operation is currently working.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnDesignerOperationStatus.End">
      <summary>
            The designer operation has ended successfully.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnDesignerOperationStatus.Canceled">
      <summary>
            The designer operation has been canceled.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnLength">
      <summary>
            A single-precision floating point number that represents a length.
            </summary>
      <noremarks />
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnLength" /> in inches, then converts it to pixels.</para>
        <code lang="VB">      Private Sub AnnLength_AnnLength()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation length with 1.5 inches

         Dim ln As AnnLength = New AnnLength(1.5F, AnnUnit.Inch)

         ' show the length
         Dim s As String = String.Format("{0}", ln)
         MessageBox.Show(s)

         ' convert the length to pixels;
         ln.Convert(converter, AnnUnit.Pixel)

         ' show
         s = String.Format("{0}", ln)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnLength_AnnLength()
      {
          // set up a new unit converter with 96 DPI
          AnnUnitConverter converter = new AnnUnitConverter(96, 96);
          // create a new annotation length with 1.5 inches

          AnnLength ln = new AnnLength(1.5F, AnnUnit.Inch);

          // show the length
          string s = string.Format("{0}", ln);
          MessageBox.Show(s);

          // convert the length to pixels;
          ln.Convert(converter, AnnUnit.Pixel);

          // show
          s = string.Format("{0}", ln);
          MessageBox.Show(s);
      }</code>
        <!--AnnLength.AnnLength-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnLength" /> structure with the specified value.
            </summary>
      <param name="value">A single-precision floating point number that represents the length value.</param>
      <remarks>Unit will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.#ctor(System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnLength" /> structure with the specified value and unit of measure.
            </summary>
      <noremarks />
      <param name="value">A single-precision floating point number that represents the length value.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> structure specifying the unit of measure for this length.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnLength.Empty">
      <summary>
            Represents a new instance of the <see cref="T:Leadtools.Annotations.AnnLength" /> structure with member data left uninitialized.
            </summary>
      <remarks>(Read only) An uninitialized length has an X, Y value of 0,0 and a unit of Pixel.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.Converted(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of this <see cref="T:Leadtools.Annotations.AnnLength" /> structure converted to one using the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</param>
      <returns>A value of this <see cref="T:Leadtools.Annotations.AnnLength" /> structure, converted to one using the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnLength" /> in inches then displays the value in pixels.</para>
        <code lang="VB">      Public Sub AnnLength_Converted()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation length of 1.5 inches
         Dim ln As AnnLength = New AnnLength(1.5F, AnnUnit.Inch)

         ' show the length
         MessageBox.Show(ln.ToString())

         ' show the value converted to pixels
         Dim s As String = String.Format("Is {0} Pixels", ln.Converted(converter, AnnUnit.Pixel))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnLength_Converted()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation length of 1.5 inches
         AnnLength ln = new AnnLength(1.5f, AnnUnit.Inch);

         // show the length
         MessageBox.Show(ln.ToString());

         // show the value converted to pixels
         string s = string.Format("Is {0} Pixels", ln.Converted(converter, AnnUnit.Pixel));
         MessageBox.Show(s);
      }</code>
        <!--AnnLength.Converted-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.ToString">
      <summary>
            Overridden. Converts this <see cref="T:Leadtools.Annotations.AnnLength" /> to a human-readable string.
            </summary>
      <noremarks />
      <returns>A string that represents the attributes of this <see cref="T:Leadtools.Annotations.AnnLength" />.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnLength" /> structure.<br />
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.Equals(System.Object)">
      <summary>
            Specifies whether this <see cref="T:Leadtools.Annotations.AnnLength" /> contains the same coordinates as the specified Object.<br /></summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.op_Addition(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Adds the length of one <see cref="T:Leadtools.Annotations.AnnLength" /> structure to another <see cref="T:Leadtools.Annotations.AnnLength" /> structure.
            </summary>
      <noremarks />
      <param name="l1">The first <see cref="T:Leadtools.Annotations.AnnLength" /> being added.</param>
      <param name="l2">The second <see cref="T:Leadtools.Annotations.AnnLength" /> structure being added.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that is the result of the addition.</returns>
      <example>
        <para>This example adds two lengths together.</para>
        <code lang="VB">      Public Sub AnnLength_OperatorPlus()
         Dim ln1 As AnnLength = New AnnLength(1.5F, AnnUnit.Inch)
         Dim ln2 As AnnLength = New AnnLength(2.0F, AnnUnit.Inch)
         Dim s As String = String.Format("ln1 + ln2 = {0}", ln1 + ln2)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnLength_OperatorPlus()
      {
         AnnLength ln1 = new AnnLength(1.5F, AnnUnit.Inch);
         AnnLength ln2 = new AnnLength(2.0F, AnnUnit.Inch);
         string s = string.Format("ln1 + ln2 = {0}", ln1 + ln2);
         MessageBox.Show(s);
      }</code>
        <!--AnnLength.OperatorPlus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.Add(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Adds the length of one <see cref="T:Leadtools.Annotations.AnnLength" /> structure to another <see cref="T:Leadtools.Annotations.AnnLength" /> structure.
            </summary>
      <noremarks />
      <param name="l1">The first <see cref="T:Leadtools.Annotations.AnnLength" /> being added.</param>
      <param name="l2">The second <see cref="T:Leadtools.Annotations.AnnLength" /> structure being added.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that is the result of the addition.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.op_Subtraction(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Subtracts the length of one <see cref="T:Leadtools.Annotations.AnnLength" /> structure from the length of another <see cref="T:Leadtools.Annotations.AnnLength" /> structure.
            </summary>
      <noremarks />
      <param name="l1">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the left side of the subtraction operator.</param>
      <param name="l2">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the right side of the subtraction operator.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that is the result of the subtraction operation.</returns>
      <example>
        <para>This method subtracts one length from another.</para>
        <code lang="VB">      Public Sub AnnLength_OperatorMinus()
         Dim ln1 As AnnLength = New AnnLength(2.0F, AnnUnit.Inch)
         Dim ln2 As AnnLength = New AnnLength(1.5F, AnnUnit.Inch)
         Dim s As String = String.Format("ln1 - ln2 = {0}", ln1 - ln2)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnLength_OperatorMinus()
      {
        AnnLength ln1 = new AnnLength(2.0F, AnnUnit.Inch);
        AnnLength ln2 = new AnnLength(1.5F, AnnUnit.Inch);
        string s = string.Format("ln1 - ln2 = {0}", ln1 - ln2);
        MessageBox.Show(s);
      }</code>
        <!--AnnLength.OperatorMinus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.Subtract(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Subtracts the length of one <see cref="T:Leadtools.Annotations.AnnLength" /> structure from the length of another <see cref="T:Leadtools.Annotations.AnnLength" /> structure.
            </summary>
      <noremarks />
      <param name="l1">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the left side of the subtraction operator.</param>
      <param name="l2">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the right side of the subtraction operator.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that is the result of the subtraction operation.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.op_Equality(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnLength" /> structures are equal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the left side of the equality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the right side of the equality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have equal lengths; otherwise false.</returns>
      <remarks>
            If the two lengths have different units, comparison will be done after temporarily converted both to a common unit.
            </remarks>
      <example>
        <para>This example creates a length in inches, converts it to pixels then makes sure the 2 lengths are still equal.</para>
        <code lang="VB">      Public Sub AnnLength_OperatorEquals()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         Dim inches As AnnLength = New AnnLength(1.5F, AnnUnit.Inch)
         Dim pixels As AnnLength = New AnnLength(inches.Converted(converter, AnnUnit.Pixel), AnnUnit.Pixel)

         Dim s As String
         ' should say true
         s = String.Format("This should be true: inches == pixels is {0}", AnnLength.op_Equality(inches, pixels))
         MessageBox.Show(s)

         ' should say false
         s = String.Format("This should be false: inches != pixels is {0}", AnnLength.op_Inequality(inches, pixels))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnLength_OperatorEquals()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         AnnLength inches = new AnnLength(1.5F, AnnUnit.Inch);
         AnnLength pixels = new AnnLength(inches.Converted(converter, AnnUnit.Pixel), AnnUnit.Pixel);

         string s;
         // should say true
         s = string.Format("This should be true: inches == pixels is {0}", inches == pixels);
         MessageBox.Show(s);

         // should say false
         s = string.Format("This should be false: inches != pixels is {0}", inches != pixels);
         MessageBox.Show(s);
      }</code>
        <!--AnnLength.OperatorEquals-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.op_Inequality(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnLength" /> structures are unequal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the left side of the inequality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnLength" /> structure on the right side of the inequality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have unequal values; otherwise false.</returns>
      <remarks>
            If the two lengths have different units, comparison will be done after temporarily converted both to a common unit.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnLength.op_Equality(Leadtools.Annotations.AnnLength,Leadtools.Annotations.AnnLength)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLength.Convert(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnLength" /> structure to the specified unit of measure.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">Specifies the destination <see cref="T:Leadtools.Annotations.AnnUnit" /> for the conversion.</param>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to the <see cref="T:Leadtools.Annotations.AnnLength" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLength.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnLength" /> structure is empty.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnLength" /> structure is empty; false, otherwise.</value>
      <remarks>(Read only) An empty AnnLength has a length value of 0,0.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLength.Unit">
      <summary>
            Gets or sets a value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnLength" />.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that represents the unit of of measure for this <see cref="T:Leadtools.Annotations.AnnLength" />.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLength.Value">
      <summary>
            Gets or sets the value of this <see cref="T:Leadtools.Annotations.AnnLength" />.
            </summary>
      <noremarks />
      <value>The value of this <see cref="T:Leadtools.Annotations.AnnLength" />.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnStampObject">
      <summary>
            Defines an annotation stamp object.
            </summary>
      <remarks>
            The stamp annotation object can be a picture or a text string in a rectangular frame.   If the stamp object has a picture, it will be scaled to fit the bounding rectangle and drawn.  If the stamp does not have a picture, the text will be drawn.
            <p>This class implements the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> interface and accesses the <see cref="P:Leadtools.Annotations.IAnnPictureObject.Picture" /> property that handles the picture associated with the annotation object.</p><p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p><para>
            For more information about the stamp annotation object refer to 
            <see cref="T:AN.Topics.AnnStampObject">AnnStampObject</see>. 
            For more information about the automated stamp annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsStampPictureTab">Automated Annotations - Stamp Picture Tab</see>. 
            </para></remarks>
      <example>
        <para>This example creates a new stamp object.</para>
        <code lang="VB">      Private Sub AnnStampObject_AnnStampObject(ByVal container As AnnContainer, ByVal imageFileName As String)
         Dim stamp As AnnStampObject = New AnnStampObject()
         Dim pic As AnnPicture = New AnnPicture(Image.FromFile(imageFileName))
         pic.TransparentMode = AnnPictureTransparentMode.None
         pic.TransparentColor = Color.Black
         stamp.Picture = pic
         stamp.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(stamp)
      End Sub</code>
        <code lang="CS">      private void AnnStampObject_AnnStampObject(AnnContainer container, string imageFileName)
      {
         AnnStampObject stamp = new AnnStampObject();
         AnnPicture pic = new AnnPicture(Image.FromFile(imageFileName));
         pic.TransparentMode = AnnPictureTransparentMode.None;
         pic.TransparentColor = Color.Black;
         stamp.Picture = pic;
         stamp.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(stamp);
      }</code>
        <!--AnnStampObject.AnnStampObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextObject">
      <summary>
            This class provides support for creating and managing Text annotation objects
            </summary>
      <remarks>
        <para>
            The text annotation object is a text string within a bounding rectangle. 
            This class supports a pen and brush, that may be used on the bounding 
            rectangle, if needed.<br />
            For more information, refer to 
            <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see>
            For more information about the text annotation object refer to 
            <see cref="T:AN.Topics.AnnTextObject">AnnTextObject</see>. 
            For more information about the automated text annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example creates a new text object.</para>
        <code lang="VB">      Private Sub AnnTextObject_AnnTextObject(ByVal container As AnnContainer, ByVal textString As String)
         Dim text As AnnTextObject = New AnnTextObject()
         text.Pen = New AnnPen(Color.Red, New AnnLength(3))
         text.Text = textString
         text.Brush = Nothing
         text.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         text.EdgeMargin = AnnLength.Empty
         text.Alignment = StringAlignment.Center
         text.LineAlignment = StringAlignment.Center
         text.TextRotate = AnnTextRotate.Rotate0
         text.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         container.Objects.Add(text)
      End Sub</code>
        <code lang="CS">      private void AnnTextObject_AnnTextObject(AnnContainer container, string textString)
      {
         AnnTextObject text = new AnnTextObject();
         text.Pen = new AnnPen(Color.Red, new AnnLength(3));
         text.Text = textString;
         text.Brush = null;
         text.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         text.EdgeMargin = AnnLength.Empty;
         text.Alignment = StringAlignment.Center;
         text.LineAlignment = StringAlignment.Center;
         text.TextRotate = AnnTextRotate.Rotate0;
         text.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         container.Objects.Add(text);
      }</code>
        <!--AnnTextObject.AnnTextObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnTextObject">
      <summary>
            Supports standard text properties used by annotation objects that implement this interface.
            </summary>
      <remarks>
        <p>The <b>IAnnTextObject</b> interface is used by the annotation framework to draw a text string.</p>
        <p>In automation mode the annotation framework uses this interface to display a dialog, 
            with the appropriate tabs, for annotation objects that have implemented this interface.</p>
        <p> The following classes implement the IAnnTextObject interface:</p>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnButtonObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnGroupObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnNoteObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnStampObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnTextObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> Class</description>
          </item>
        </list>
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.TextImplemented">
      <summary>
            Gets a value that indicates whether the annotation object's class implements the IAnnTextObject interface.  
            </summary>
      <value>true if the annotation object's class implements this interface, false otherwise.</value>
      <remarks>
            (Read only) 
            This is used internally by the annotation framework. User-defined classes that are derived from the AnnObject 
            class and include text should implement this property to always return true. <br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.Text">
      <summary>
            Gets or sets the text string associated with the annotation object.
            </summary>
      <value>The text string associated with the annotation object</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.Alignment">
      <summary>
            Gets or sets a value that indicates the text alignment.
            </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the text alignment.</value>
      <remarks>This is the horizontal alignment of the text inside the bounding rectangle. To 
            set the vertical alignment of the text inside the bounding rectangle, use the 
            <see cref="P:Leadtools.Annotations.IAnnTextObject.LineAlignment" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.LineAlignment">
      <summary>
             Gets or sets a value that indicates the line alignment.
             </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the line alignment.</value>
      <remarks>This is the vertical alignment of the text inside the bounding rectangle. To 
             set the horizontal alignment of the text inside the bounding rectangle, use the 
             <see cref="P:Leadtools.Annotations.IAnnTextObject.Alignment" /> property.<br />
             For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.EdgeMargin">
      <summary>
            Gets or sets the margin between the text and the bounding rectangle.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the margin between the text and the bounding rectangle.</value>
      <remarks>Setting this length to a positive value temporarily makes the bounding rectangle smaller, by the amount of this property, when the text position is calculated.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.TextRotate">
      <summary>
            Gets or sets the rotation value.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnTextRotate" /> value that specifies the degree to rotate this <see cref="T:Leadtools.Annotations.IAnnTextObject" />.</value>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.IAnnTextObject.UseBrushAsTextBackground">
      <summary>
            Gets or sets a value that indicates whether to use the brush to fill only the text area or all of the object.
            </summary>
      <value>
        <strong>true</strong> to use the brush to fill only the text area of the object, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextObject" /> class object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that are used to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnTextObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextObject" /> class object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.Create">
      <summary>
            Creates a new instance of an <see cref="T:Leadtools.Annotations.AnnTextObject" /> class object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextObject" /> class object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see><br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnTextObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnTextObject" /> to the newly created one.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnTextObject" /> object will return the same exact path for this method no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextObject.AutoSize">
      <summary>
            Adjusts this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object to where its bounds closely fit its contents.
            </summary>
      <remarks>
        <para>Call this method to change the bounds (<see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds">AnnTextObject.Bounds</see>) value to closely fit its contents. The control will automatically
            add the correct space around the text for the current font style and size leading and takes into consideration the border size.</para>
        <para>When using automation, setting the value of the <see cref="P:Leadtools.Annotations.AnnTextEditDesigner.AutoSizeAfterEdit">AnnTextEditDesigner.AutoSizeAfterEdit</see>
            property to <strong>true</strong> will result in the toolkit calling the <see cref="M:Leadtools.Annotations.AnnTextObject.AutoSize">AnnTextObject.AutoSize</see> to
            adjust the object.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnTextObject_AutoSize(ByVal container As AnnContainer, ByVal viewer As RasterImageViewer)
         ' first add a new text object
         Dim text As New AnnTextObject()
         text.Pen = New AnnPen(Color.Red, New AnnLength(3))
         text.Text = "Hello World!"
         text.Brush = Nothing
         text.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         text.EdgeMargin = AnnLength.Empty
         text.Alignment = StringAlignment.Center
         text.LineAlignment = StringAlignment.Center
         text.TextRotate = AnnTextRotate.Rotate0
         text.Bounds = New AnnRectangle(100, 100, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(text)
         viewer.Invalidate()
         MessageBox.Show("A text object with the original bounding rectangle")

         ' now make the object firts the content (its text)
         text.AutoSize()
         viewer.Invalidate()

         MessageBox.Show("Same text object after AutoSize")
      End Sub</code>
        <code lang="CS">      public void AnnTextObject_AutoSize(AnnContainer container, RasterImageViewer viewer)
      {
         // first add a new text object
         AnnTextObject text = new AnnTextObject();
         text.Pen = new AnnPen(Color.Red, new AnnLength(3));
         text.Text = "Hello World!";
         text.Brush = null;
         text.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         text.EdgeMargin = AnnLength.Empty;
         text.Alignment = StringAlignment.Center;
         text.LineAlignment = StringAlignment.Center;
         text.TextRotate = AnnTextRotate.Rotate0;
         text.Bounds = new AnnRectangle(100, 100, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(text);
         viewer.Invalidate();
         MessageBox.Show("A text object with the original bounding rectangle");

         // now make the object firts the content (its text)
         text.AutoSize();
         viewer.Invalidate();

         MessageBox.Show("Same text object after AutoSize");
      }</code>
        <!--AnnTextObject.AutoSize-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.TextImplemented">
      <summary>
            Gets a value that indicates whether this object implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  
            </summary>
      <value>This property will always be true for an <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.</value>
      <remarks>
            (Read only) 
            This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include text must implement 
            this property to always return true.
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see> and 
            <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User-Defined Objects with LEADTOOLS Annotations</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.Alignment">
      <summary>
            Gets or sets a value that indicates the text alignment.
            </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the text alignment.</value>
      <remarks>This is the horizontal alignment of the text inside the <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds" /> bounding rectangle. 
            To set the vertical alignment or the text inside the bounding rectangle, use the <see cref="P:Leadtools.Annotations.AnnTextObject.LineAlignment" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.LineAlignment">
      <summary>
            Gets or sets the line alignment information.
            </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the line alignment.</value>
      <remarks>This is the vertical alignment of the text inside the <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds" /> bounding rectangle. 
            To set the horizontal alignment of the text inside the bounding rectangle, use the <see cref="P:Leadtools.Annotations.AnnTextObject.Alignment" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.Text">
      <summary>
            Gets or sets the text string associated with this <see cref="T:Leadtools.Annotations.AnnTextObject" /> class object.
            </summary>
      <value>The text string associated with this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.EdgeMargin">
      <summary>
            Gets or sets the margin between the text and the <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds" /> bounding rectangle.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the margin between the text and the <see cref="P:Leadtools.Annotations.AnnRectangleObject.Bounds" /> bounding rectangle.</value>
      <remarks>Setting this length to a positive value temporarily makes the bounding rectangle smaller by the amount of this property when the text position is calculated.<br /><p>Please note that using a negative value can cause unexpected behavior.</p><p>
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></p></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.TextRotate">
      <summary>
            Gets or sets the rotation value.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnTextRotate" /> value that specifies the degree to rotate this <see cref="T:Leadtools.Annotations.IAnnTextObject" />.</value>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.UseBrushAsTextBackground">
      <summary>
            Gets or sets a value that indicates whether to use the brush to fill only the text area or all of the object.
            </summary>
      <value>
        <strong>true</strong> to use the brush to fill only the text area of the object, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnTextObject" /> object; false otherwise.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnTextObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnPictureObject">
      <summary>
            Supports standard picture properties used by annotation objects from classes that implement this interface.
            </summary>
      <remarks>
        <p>In automation mode the annotation framework uses this interface to display a dialog, with the appropriate tabs, 
            for annotation objects from classes that implement this interface.</p>
        <p> The following classes implement the IAnnPictureObject interface:</p>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnAudioObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnImageObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnPointObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnStampObject" /> Class</description>
          </item>
        </list>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnPictureObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the annotation object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the annotation object.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnStampObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnStampObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnStampObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnStampObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnStampObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnStampObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify what path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnStampObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnStampObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnStampObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnStampObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnStampObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnStampObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnStampObject" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnStampObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnStampObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnStampObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnStampObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnSolidBrush">
      <summary>
            Defines an annotation brush of a single color.
            </summary>
      <remarks>
        <p>Annotation brushes are used to fill the interiors of annotation objects like rectangles, ellipses, polygons, etc.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ChangingAnnotationAutomationBackgroundColors">Changing Annotation Automation Background Colors.</see></p>
      </remarks>
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> to red rectangle.</para>
        <code lang="VB">      Public Sub AnnSolidBrush_AnnSolidBrush(ByVal graphics As Graphics, ByVal converter As AnnUnitConverter, ByVal rc As AnnRectangle)
         Dim annBrush As AnnSolidBrush = New AnnSolidBrush(Color.Red)
         Dim gdiBrush As Brush = annBrush.Create(converter, rc)
         Try
            Dim rect As RectangleF = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF()
            graphics.FillRectangle(gdiBrush, rect)
         Finally
            CType(gdiBrush, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnSolidBrush_AnnSolidBrush(Graphics graphics, AnnUnitConverter converter, AnnRectangle rc)
      {
         AnnSolidBrush annBrush = new AnnSolidBrush(Color.Red);
         using(Brush gdiBrush = annBrush.Create(converter, rc))
         {
            RectangleF rect = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF();
            graphics.FillRectangle(gdiBrush, rect);
         }
      }</code>
        <!--AnnSolidBrush.AnnSolidBrush-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnBrush">
      <summary>
            Classes derived from this abstract base class define objects used to fill the interiors of annotation objects like rectangles, ellipses, polygons, etc.
            </summary>
      <noremarks />
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnBrush" /> to fill a rectangle.</para>
        <code lang="VB">      Public Sub AnnBrush_AnnBrush(ByVal graphics As Graphics, ByVal br As AnnBrush, ByVal converter As AnnUnitConverter, ByVal rc As AnnRectangle)
         Dim gdiBrush As Brush = br.Create(converter, rc)
         Try
            Dim rect As RectangleF = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF()
            graphics.FillRectangle(gdiBrush, rect)
         Finally
            CType(gdiBrush, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnBrush_AnnBrush(Graphics graphics, AnnBrush br, AnnUnitConverter converter, AnnRectangle rc)
      {
         using(Brush gdiBrush = br.Create(converter, rc))
         {
            RectangleF rect = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF();
            graphics.FillRectangle(gdiBrush, rect);
         }
      }</code>
        <!--AnnBrush.AnnBrush-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnBrush.Create(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Creates a new GDI+ brush object using this <see cref="T:Leadtools.Annotations.AnnBrush" />.
            </summary>
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting any annotation lengths, points, etc. this brush might have.</param>
      <param name="rect">Specifies an <see cref="T:Leadtools.Annotations.AnnRectangle" /> object defining the bounding rectangle to be used with this brush.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Brush" /> object created from this <see cref="T:Leadtools.Annotations.AnnBrush" />.</returns>
      <remarks>
            The bounding rectangle is used by some derived classes such as the <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> to define the area to be filled.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnBrush.Clone">
      <summary>
            When overridden in a derived class, creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnBrush" /> object.
            </summary>
      <noremarks />
      <returns>The new <see cref="T:Leadtools.Annotations.AnnBrush" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.#ctor(System.Drawing.Color)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> object with the specified color.
            </summary>
      <noremarks />
      <param name="color">A <see cref="P:Leadtools.Annotations.AnnSolidBrush.Color" /> structure that represents the color of this brush.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.Create(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Creates a new GDI+ brush object using this <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.
            </summary>
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting any annotation lengths, points, etc. this brush might have.</param>
      <param name="rect">Specifies an <see cref="T:Leadtools.Annotations.AnnRectangle" /> object defining the bounding rectangle to be used with this brush.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Brush" /> object created from this <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.</returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> does not use the <i>rect</i> parameter.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnSolidBrush" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>/&gt;.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSolidBrush.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSolidBrush.Color">
      <summary>
            Gets or sets the color of this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color of this brush.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSolidBrush.ColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" />  the color of this brush.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.Annotations.AnnTextEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnTextObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnTextEditDesigner</b> class to edit an <see cref="T:Leadtools.Annotations.AnnTextObject" /> or any other object that derives from it.  For example, this designer is used to edit <see cref="T:Leadtools.Annotations.AnnNoteObject" /> objects as well.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRectangleEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnRectangleEditDesigner</b> class to edit an <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> or any other object that derives from it.  For example, this designer is used to edit <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> objects as well.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnDesigner" /> to provide standard functionality for editing Annotation objects on an annotation container.
            </summary>
      <remarks>
            Other specific annotation object classes such as <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> and <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> derive from this base class.
            </remarks>
      <example>
        <p>For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></p>
        <p>For an example of using existing draw designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</p>
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> with default values.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)" />.
            </summary>
      <param name="sender">The source of the sender.</param>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnPaintEventArgs" /> object that contains the event data.</param>
      <remarks>For more information refer to <see cref="M:Leadtools.Annotations.AnnDesigner.OnAfterDrawingObjects(System.Object,Leadtools.Annotations.AnnPaintEventArgs)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.Start">
      <summary>
            Starts editing <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" /></summary>
      <remarks>
            Call this method after you set up all the other properties of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to start the editing process.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.End">
      <summary>
            Ends editing <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" /></summary>
      <remarks>
            Call this method to end the editing process of <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)">
      <summary>
            Starts the editing process.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" /> value which represents the current operation.</param>
      <param name="controlPointIndex">An integer that represents the Index of the edited control point (or -1 if no control point is being edited).</param>
      <param name="clipCursor">true to clip the mouse cursor; otherwise false.</param>
      <param name="hittestObject">An <see cref="T:System.Object" /> that represents the hit test object obtained from the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method.</param>
      <remarks>
            Derived classes should call this method upon starting the edit operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.Working(System.Drawing.Rectangle)">
      <summary>
            Continues the editing process.
            </summary>
      <param name="rcInvalid"> A <see cref="T:System.Drawing.Rectangle" /> structure that represents the invalid rectangle to re-paint.</param>
      <remarks>
            Derived classes should call this method upon continuing the edit operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.EndWorking">
      <summary>
            Ends the editing process.
            </summary>
      <remarks>
            Derived classes should call this method upon ending the edit operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.OnEdit(Leadtools.Annotations.AnnEditDesignerEventArgs)">
      <summary>
             Raises the <see cref="E:Leadtools.Annotations.AnnEditDesigner.Edit" /> event.
             </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnEditDesignerEventArgs" /> that contains the event data.</param>
      <remarks>
             Raising an event invokes the event handler through a delegate.
             The <b>OnEdit</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
             <b>Notes to Inheritors:</b> When overriding <b>OnEdit</b> in a derived class, be sure to call the base class's <b>OnEdit</b> method so that registered delegates receive the event.
             </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
             </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation">
      <summary>
            Gets the location of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /></summary>
      <value>An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures that represents the location of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /></value>
      <remarks>
            (Read only) Derived classes should override this property to return the location of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> required.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
            Moves a control point.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move.</param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.Move(Leadtools.Annotations.AnnSize)">
      <summary>
            Moves the object.
            </summary>
      <param name="size">An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that represents the offset to be used when moving the object.</param>
      <remarks>
            This method is called when the user clicks and drags on the object itself of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes may override this method and provide the necessary functionality to update the edited object coordinates.  The default implementation calls the <see cref="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)" /> method.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.MoveName(Leadtools.Annotations.AnnSize)">
      <summary>
            Moves the object's name.
            </summary>
      <param name="size">An <see cref="T:Leadtools.Annotations.AnnSize" /> structure which represents the offset to be used when moving the object's name.</param>
      <remarks>
            This method is called when the user clicks and drags on the name of the object of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes may override this method and provide the necessary functionality to update the edited object name coordinates.  The default implementation modifies the value of the <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" /> property.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesigner.DoubleClick(System.EventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.DoubleClick(System.EventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse double-click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnEditDesigner.Edit">
      <summary>
            Occurs when this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is editing an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnEditDesignerEventArgs" />.</event>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.MaintainAspectRatio">
      <summary>
            Gets or sets a value that indicates whether to preserve the aspect ratio when moving a corner control point.
            </summary>
      <value>true to maintain the aspect ratio; otherwise, false.</value>
      <remarks>
            When selecting an <see cref="T:Leadtools.Annotations.AnnRectangleObject" />, or
            any annotation object that derives from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />, 
            or an <see cref="T:Leadtools.Annotations.AnnGroupObject" />,
            eight control points appear.  If <see cref="P:Leadtools.Annotations.AnnEditDesigner.MaintainAspectRatio" /> is true (default), 
            dragging one of the four corner control points
            will change the size of the annotation object while maintaining its aspect ratio.  
            If false, the aspect ratio is not preserved.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
        <para>This example toggles the <see cref="P:Leadtools.Annotations.AnnEditDesigner.MaintainAspectRatio" /> state of the <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" />. To see the effect of this example, perform the following actions:
            <list type="number"><item><description>Select a rectangular AnnObject</description></item><item><description>Run the example</description></item><item><description>Drag one of the corner control points</description></item><item><description>Run the example again</description></item><item><description>Drag one of the corner control points</description></item></list></para>
        <code lang="VB">      Public Sub AnnEditDesigner_MaintainAspectRatio(ByVal editDesigner As AnnRectangleEditDesigner)
         editDesigner.MaintainAspectRatio = Not editDesigner.MaintainAspectRatio
      End Sub</code>
        <code lang="CS">      public void AnnEditDesigner_MaintainAspectRatio(AnnRectangleEditDesigner editDesigner)
      {
         editDesigner.MaintainAspectRatio = !editDesigner.MaintainAspectRatio;
      }</code>
        <!--AnnEditDesigner.MaintainAspectRatio-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.ControlPoints">
      <summary>
            Collection of <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /></summary>
      <value>An <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnControlPoint&gt;</see> that contains the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>
            (Read only) You should fill this collection with the control points needed for this particular <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  You can query the <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" /> to find out the number of <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> requires.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateCenterControlPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object for the rotate center control point
            for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for displaying the rotate center control point
            for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPoint" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object for the rotate gripper control point
            for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for displaying the rotate gripper 
            control point for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</remarks>
      <example>
        <para>This example changes the look of the rotate user interface by performing the following actions:
            <list type="number"><item><description>Sets the rotate line pen to be solid red</description></item><item><description>Changes the rotate center control point to be a black circle filled with red</description></item><item><description>Changes the rotate gripper control point to be a blue rectangle filled with yellow</description></item></list></para>
        <code lang="VB">      Public Sub AnnEditDesigner_RotateGripperControlPoint(ByVal editDesigner As AnnEditDesigner)
         Dim annPen As AnnPen = New AnnPen(System.Drawing.Color.Red, New AnnLength(4, AnnUnit.Pixel))
         editDesigner.RotateLinePen = annPen
         Dim cpCenter As AnnEllipseControlPoint = New AnnEllipseControlPoint()
         cpCenter.Pen = New AnnPen(Color.Black, New AnnLength(1, AnnUnit.Pixel))
         cpCenter.Brush = New AnnSolidBrush(Color.FromArgb(128, 255, 0, 0))
         cpCenter.Size = New AnnSize(12, 12, AnnUnit.Pixel)
         editDesigner.RotateCenterControlPoint = cpCenter

         Dim cpGripper As AnnRectangleControlPoint = New AnnRectangleControlPoint()
         cpGripper.Pen = New AnnPen(Color.Blue, New AnnLength(3, AnnUnit.Pixel))
         cpGripper.Brush = New AnnSolidBrush(Color.Yellow)
         cpGripper.Size = New AnnSize(8, 8, AnnUnit.Pixel)
         editDesigner.RotateGripperControlPoint = cpGripper
      End Sub
</code>
        <code lang="CS">      public void AnnEditDesigner_RotateGripperControlPoint(AnnEditDesigner editDesigner)
      {
         AnnPen annPen = new AnnPen(System.Drawing.Color.Red, new AnnLength(4, AnnUnit.Pixel));
         editDesigner.RotateLinePen = annPen;
         AnnEllipseControlPoint cpCenter = new AnnEllipseControlPoint();
         cpCenter.Pen = new AnnPen(Color.Black, new AnnLength(1, AnnUnit.Pixel));
         cpCenter.Brush = new AnnSolidBrush(Color.FromArgb(128, 255, 0, 0));
         cpCenter.Size = new AnnSize(12, 12, AnnUnit.Pixel);
         editDesigner.RotateCenterControlPoint = cpCenter;

         AnnRectangleControlPoint cpGripper = new AnnRectangleControlPoint();
         cpGripper.Pen = new AnnPen(Color.Blue, new AnnLength(3, AnnUnit.Pixel));
         cpGripper.Brush = new AnnSolidBrush(Color.Yellow);
         cpGripper.Size = new AnnSize(8, 8, AnnUnit.Pixel);
         editDesigner.RotateGripperControlPoint = cpGripper;
      }
</code>
        <!--AnnEditDesigner.RotateGripperControlPoint-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints">
      <summary>
            Gets or sets the use of rotate control points of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>true if using rotate control points for <see cref="T:Leadtools.Annotations.AnnObject" /> rotation; false otherwise.</value>
      <remarks>
            For more control over rotating an <see cref="T:Leadtools.Annotations.AnnObject" /> or a <see cref="T:Leadtools.Annotations.AnnGroupObject" /> in design mode with an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />, 
            set this property to true.
            This allows the user to precisely control the rotate center, 
            as well as the rotate angle, by moving the
            rotate control points.  Setting this property to false uses the older rotate user interface.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
        <para>This example toggles the use of the rotate control points.</para>
        <code lang="VB">      Public Sub AnnEditDesigner_UseRotateControlPoints(ByVal editDesigner As AnnEditDesigner)
         editDesigner.UseRotateControlPoints = Not editDesigner.UseRotateControlPoints
         Dim s As String = String.Format("UseRotateControlPoints changed to {0}", editDesigner.UseRotateControlPoints)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnEditDesigner_UseRotateControlPoints(AnnEditDesigner editDesigner)
      {
         editDesigner.UseRotateControlPoints = !editDesigner.UseRotateControlPoints;
         string s = String.Format("UseRotateControlPoints changed to {0}", editDesigner.UseRotateControlPoints);
         MessageBox.Show(s);
      }</code>
        <!--AnnEditDesigner.UseRotateControlPoints-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.MoveObjectWithName">
      <summary>
            Gets or sets a value indicating whether to move the object when the name moves.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
        <strong>true</strong> if the object should move when the user moves the name; otherwise, <strong>false</strong>.</value>
      <remarks>
        <para>When an <see cref="T:Leadtools.Annotations.AnnObject" /> with a visible name is being edited, the user can move the name by clicking and dragging with the mouse. This movement is independant on the object
            if the value of <see cref="P:Leadtools.Annotations.AnnEditDesigner.MoveObjectWithName" /> is set to the default value of <strong>false</strong>. If <see cref="P:Leadtools.Annotations.AnnEditDesigner.MoveObjectWithName" /> to <strong>true</strong>, the object
            will move along with the name.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.ControlPointsHitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>The hit test buffer, in pixels, for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>
            The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with sides 4 pixels long will be used around the test point to perform the hit-testing.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.HitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>The hit test buffer, in pixels, for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>
            The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with sides 4 pixels long will be used around the test point to perform the hit-testing.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.FramePen">
      <summary>
            Gets or sets the pen used with this <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPen" /> object that specifies the pen used with this <see cref="T:Leadtools.Annotations.AnnDesigner" /></value>
      <remarks>
            When this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is editing an object, it will use the value of this property to re-draw the object again on top of its original place.  This clearly indicates to the user which object(s) are currently being edited.  A good pen to use in this case is a dotted pen.  A value of null (Nothing in Visual Basic) will not cause the object to be redrawn again on top of itself while being edited.  Instead, the control points will be the only indication of what object(s) are being edited.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateLinePen">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPen" /> used to draw a line between the rotate control points
            for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived objects.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPen" /> used to draw a line between the rotate control points. </value>
      <remarks>
            For more information, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.RotateLinePen" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPoint" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.EditObject">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnObject" /> to be edited.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> object specifying the object currently being edited.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.ControlPointIndex">
      <summary>
            Gets the index of the current control point.
            </summary>
      <value>An integer that represents the index of the current <see cref="T:Leadtools.Annotations.AnnControlPoint" /> being edited.  If no control point is being edited, the value of this property is -1.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.Operation">
      <summary>
            Gets a value that indicates the current edit operation.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" />  value that represents the current edit operation (status) of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.HitTestObject">
      <summary>
            Gets or sets the hit test object for the <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" />.
            </summary>
      <value>The hit test object for the <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" />.</value>
      <remarks>
            You usually set this property to the return value of the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method that you used to start this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.Rotate">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in rotate mode.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in rotate mode; otherwise false.</value>
      <remarks>
            When the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in a rotate mode, clicking and dragging on the <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" /> will cause it to rotate around its origin.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateModifierKey">
      <summary>
            Gets or sets a value indicating the current auto-rotate key.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.Keys" /> value that specifies the current auto-rotate key.</value>
      <remarks>
            When this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is editing an object and the user holds down the key specified by this property while clicking and dragging on the object, the object will rotate around its origin.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.HasStarted">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> has started.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> has started editing <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" />; otherwise, false.</value>
      <remarks>
            (Read only) <see cref="M:Leadtools.Annotations.AnnEditDesigner.Start" /> will start editing <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" /> and <see cref="M:Leadtools.Annotations.AnnEditDesigner.End" /> will end it.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.EditObjectInvalidRectangle">
      <summary>
            Gets the invalid rectangle of <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" /></summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> structure that represents the current invalid rectangle of <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObject" />.</value>
      <remarks>
            (Read only) This invalid rectangle contains the boundaries of the control points as well.  It is more accurate to use this property instead of <see cref="P:Leadtools.Annotations.AnnObject.InvalidRectangle" /> when calculating the invalid rectangle of an object that is being edited.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount">
      <summary>
            Gets the number of control points required for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <value>An integer that represents the number of control points required for this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.</value>
      <remarks>
            (Read only) Use this value to determine how many <see cref="T:Leadtools.Annotations.AnnControlPoint" /> objects to insert into the <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPoints" /> collection.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateCenterControlPointLocation">
      <summary>
            Gets the rotate center control point location of the selected object in object coordinates.
            </summary>
      <value>
            The rotate center control point location of the selected object in object coordinates.
            </value>
      <remarks>
            (Read only) The selected object has two rotate control points:
            <list type="bullet"><item><description>Rotate center control point</description></item><item><description>Rotate gripper control point</description></item></list>
            This property returns the location of the rotate center control point in object coordinates.
            To convert to container coordinates, multiply by the <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" />.
            <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p><seealso cref="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPointLocation" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPointLocation" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesigner.RotateGripperControlPointLocation">
      <summary>
            Gets the rotate gripper control point location of the selected object in object coordinates.
            </summary>
      <value>
            The rotate gripper control point location of the selected object in object coordinates.
            </value>
      <remarks>
            (Read only) The selected object has two rotate control points:
            <list type="bullet"><item><description>Rotate center control point</description></item><item><description>Rotate gripper control point</description></item></list>
            This returns the location of the rotate gripper control point in object coordinates.
            To convert to container coordinates, multiply by the <see cref="P:Leadtools.Annotations.AnnObject.PhysicalTransform" />.
            <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p><seealso cref="P:Leadtools.Annotations.AnnEditDesigner.RotateCenterControlPointLocation" /></remarks>
      <example>
        <para>This example displays the location of the rotate control points in container coordinates.</para>
        <code lang="VB">      Public Sub AnnEditDesigner_RotateGripperControlPointLocation(ByVal editDesigner As AnnEditDesigner)
         Dim m As System.Drawing.Drawing2D.Matrix = editDesigner.EditObject.PhysicalTransform
         Dim ptC As AnnPoint = editDesigner.RotateCenterControlPointLocation
         Dim ptG As AnnPoint = editDesigner.RotateGripperControlPointLocation
         ' Transform the points by the AnnObject physical transform
         Dim pts As PointF() = New PointF() {New PointF(ptC.X, ptC.Y), New PointF(ptG.X, ptG.Y)}
         m.TransformPoints(pts)
         m.Dispose()

         Dim s As String = String.Format("RotateCenterControlPoint({0},{1}), RotateGripperControlPoint({2},{3})", pts(0).X, pts(0).Y, pts(1).X, pts(1).Y)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnEditDesigner_RotateGripperControlPointLocation(AnnEditDesigner editDesigner)
      {
         System.Drawing.Drawing2D.Matrix m = editDesigner.EditObject.PhysicalTransform;
         AnnPoint ptC = editDesigner.RotateCenterControlPointLocation;
         AnnPoint ptG = editDesigner.RotateGripperControlPointLocation;
         // Transform the points by the AnnObject physical transform
         PointF[] pts =  new PointF[] {new PointF(ptC.X, ptC.Y),  new PointF(ptG.X, ptG.Y)};
         m.TransformPoints(pts);
         m.Dispose();

         string s = String.Format("RotateCenterControlPoint({0},{1}), RotateGripperControlPoint({2},{3})",
            pts[0].X,
            pts[0].Y,
            pts[1].X,
            pts[1].Y);
         MessageBox.Show(s);
      }</code>
        <!--AnnEditDesigner.RotateGripperControlPointLocation-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)" />.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" /> value which represents the current operation.</param>
      <param name="controlPointIndex">An integer that represents the Index of the edited control point (or -1 if no control point is being edited).</param>
      <param name="clipCursor">true to clip the mouse cursor; otherwise false.</param>
      <param name="hittestObject">An <see cref="T:System.Object" /> that represents the hit test object obtained from the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method.</param>
      <remarks>
            Derived classes should call this method upon starting the edit operation of an object.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" /></summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangleEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnTextEditDesigner" /> object.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextEditDesigner.DoubleClick(System.EventArgs)">
      <summary>
            Handles double click events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.EventArgs" />object that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>The default behavior for this event is to display a text window on top of the text annotation.</p>
        <p>Derived classes should override this method in order to process double click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextEditDesigner.AutoSizeAfterEdit">
      <summary>
            Gets or sets a value indicating whether the designer will automatically resize the <see cref="T:Leadtools.Annotations.AnnTextObject" /> beging edited after the user finish
            editing it.
            </summary>
      <value>
        <strong>true</strong> for the designer to automatically resize the <see cref="T:Leadtools.Annotations.AnnTextObject" /> beging edited after the user finish
            editing it, <strong>false</strong>; otherwise. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When the value of this property is set to <strong>true</strong>, the designer will call the <see cref="M:Leadtools.Annotations.AnnTextObject.AutoSize">AnnTextObject.AutoSize</see>
            method when it has finished editing the object.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnTextEditDesigner_AutoSizeAfterEditExample(ByVal automation As AnnAutomation)
         ' We will hook to the Automation designer changed event,
         ' if the designer is a Text edit designer, we will set
         ' its AutoSizeAfterEdit value to true
         AddHandler automation.CurrentDesignerChanged, AddressOf automation_CurrentDesignerChanged
      End Sub

      Private Sub automation_CurrentDesignerChanged(ByVal sender As Object, ByVal e As EventArgs)
         ' Check if current designer is AnnTextEditDesigner
         Dim automation As AnnAutomation = CType(sender, AnnAutomation)
         If Not automation.CurrentDesigner Is Nothing Then
            If TypeOf automation.CurrentDesigner Is AnnTextEditDesigner Then
               ' Yes, set its AutoSizeAfterEdit value to true
               Dim textEditDesigner As AnnTextEditDesigner = CType(automation.CurrentDesigner, AnnTextEditDesigner)
               textEditDesigner.AutoSizeAfterEdit = True
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void AnnTextEditDesigner_AutoSizeAfterEditExample(AnnAutomation automation)
      {
         // We will hook to the Automation designer changed event,
         // if the designer is a Text edit designer, we will set
         // its AutoSizeAfterEdit value to true
         automation.CurrentDesignerChanged += new EventHandler(automation_CurrentDesignerChanged);
      }

      private void automation_CurrentDesignerChanged(object sender, EventArgs e)
      {
         // Check if current designer is AnnTextEditDesigner
         AnnAutomation automation = sender as AnnAutomation;
         if(automation.CurrentDesigner != null)
         {
            AnnTextEditDesigner textEditDesigner = automation.CurrentDesigner as AnnTextEditDesigner;
            if(textEditDesigner != null)
            {
               // Yes, set its AutoSizeAfterEdit value to true
               textEditDesigner.AutoSizeAfterEdit = true;
            }
         }
      }</code>
        <!--AnnTextEditDesigner.AutoSizeAfterEdit-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextEditDesigner.AcceptsReturn">
      <summary>
            Gets or sets a value indicating whether pressing ENTER creates a new line of text in the control or activates the default button for the form.
            </summary>
      <value>
        <strong>true</strong> if the ENTER key creates a new line of text in a multiline version of the control; <strong>false</strong> if the ENTER key activates the
            default button for the form. The default is <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Annotations.AnnTextEditDesigner" /> class creates a standard <see cref="T:System.Windows.Forms.TextBox">System.Windows.Forms.TextBox</see> control when activated. It will
            automatically set the value <see cref="P:System.Windows.Forms.TextBox.Multiline">System.Windows.Forms.TextBox.Multiline</see> to <strong>true</strong> to support multiple-lines
            in the text box. The <see cref="P:Leadtools.Annotations.AnnTextEditDesigner.AcceptsReturn" /> property will be set in the
            <see cref="P:System.Windows.Forms.TextBox.AcceptsReturn">System.Windows.Forms.TextBox.AcceptsReturn</see> of the created text box control to control how ENTER key strockes
            are handled.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnUnit">
      <summary>
            Represents the unit of measurement for lengths and positions.
            </summary>
      <remarks>For information regarding text strings used throughout the user interface in the automated mode, including default abbreviations for these units, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Display">
      <summary>
            Specifies 1/75 inch as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Document">
      <summary>
            Specifies 1/300 inch as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.SmartEnglish">
      <summary>
            Specifies that measurement is in "smart" English. A "smart" unit is a unit that can be automatically promoted to the next higher unit. The length displayed will be in the most appropriate unit.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.SmartMetric">
      <summary>
            Specifies that measurement is in "smart" metric. A "smart" unit is a unit that can be automatically promoted to the next higher unit. The length displayed will be in the most appropriate unit.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Inch">
      <summary>
            Specifies the inch as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Millimeter">
      <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Pixel">
      <summary>
            Specifies a device pixel as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Point">
      <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Feet">
      <summary>
            Specifies feet as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Yard">
      <summary>
            Specifies the yard as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Micrometer">
      <summary>
            Specifies the micrometer (1/1000 millimeter) as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Centimeter">
      <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Meter">
      <summary>
            Specifies the meter as the unit of measure.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUnit.Twip">
      <summary>
            Specifies the twip (TWentIeth of a Point) as the unit of measure.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnAngularUnit">
      <summary>
            Represents the unit of measurement to be used for angles.
            </summary>
      <remarks>For information regarding text strings used throughout the user interface in the automated mode, including default abbreviations for these units, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnAngularUnit.Radian">
      <summary>
            Angle is in radians.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAngularUnit.Degree">
      <summary>
            Angle is in degrees.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnUnitConverter">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> class contains methods and properties for converting between different units of measurement.
            </summary>
      <noremarks />
      <example>
        <para>This example shows how to convert between <see cref="T:Leadtools.Annotations.AnnUnit" /> and <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> in several ways.</para>
        <code lang="VB">      Private Sub AnnUnitConverter_AnnUnitConverter()
         ' set up the unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' 200 pixels
         Dim pixels As Single = 200

         ' convert to inches
         Dim inches As Single = converter.ConvertHorizontal(pixels, AnnUnit.Pixel, AnnUnit.Inch)

         ' show
         Dim s As String = String.Format("{0} {1} is {2} {3} at {4} DPI", pixels, AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Pixel), inches, AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Inch), converter.DpiX)
         MessageBox.Show(s)

         ' 45 degrees
         Dim degrees As Single = 45

         ' convert to radians
         Dim radians As Single = AnnUnitConverter.Convert(degrees, AnnAngularUnit.Degree, AnnAngularUnit.Radian)

         ' show
         s = String.Format("{0}{1} is {2} {3}", degrees, AnnUnitConverter.GetAngularUnitAbbreviation(AnnAngularUnit.Degree), radians, AnnUnitConverter.GetAngularUnitAbbreviation(AnnAngularUnit.Radian))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnUnitConverter_AnnUnitConverter()
      {
         // set up the unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // 200 pixels
         float pixels = 200;

         // convert to inches
         float inches = converter.ConvertHorizontal(pixels, AnnUnit.Pixel, AnnUnit.Inch);

         // show
         string s = string.Format("{0} {1} is {2} {3} at {4} DPI",
            pixels,
            AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Pixel),
            inches,
            AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Inch),
            converter.DpiX);
         MessageBox.Show(s);

         // 45 degrees
         float degrees = 45;

         // convert to radians
         float radians = AnnUnitConverter.Convert(degrees, AnnAngularUnit.Degree, AnnAngularUnit.Radian);

         // show
         s = string.Format("{0}{1} is {2} {3}",
            degrees,
            AnnUnitConverter.GetAngularUnitAbbreviation(AnnAngularUnit.Degree),
            radians,
            AnnUnitConverter.GetAngularUnitAbbreviation(AnnAngularUnit.Radian));
            MessageBox.Show(s);
      }</code>
        <!--AnnUnitConverter.AnnUnitConverter-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.#ctor">
      <summary>
            Constructs and initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> class with default (96) horizontal and vertical DPI.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.#ctor(System.Single,System.Single)">
      <summary>
            Constructs and initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> class using specific horizontal and vertical DPI values.
            </summary>
      <noremarks />
      <param name="dpiX">Horizontal DPI value</param>
      <param name="dpiY">Vertical DPI value</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)">
      <summary>
            Gets the abbreviation for a given unit of measure.
            </summary>
      <param name="unit">The unit of measure for which the abbreviation is being sought.</param>
      <returns>String containing the abbreviation.</returns>
      <remarks>For information regarding text strings used throughout the user interface in the automated mode, including default abbreviations for different units, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnUnitConverter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.GetAngularUnitAbbreviation(Leadtools.Annotations.AnnAngularUnit)">
      <summary>
            Gets the abbreviation that corresponds to a given angular unit of measure.
            </summary>
      <param name="unit">The angular unit of measure for which the abbreviation is being sought.</param>
      <returns>String containing the abbreviation.</returns>
      <remarks>For information regarding text strings used throughout the user interface in the automated mode, including default abbreviations for different units, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnUnitConverter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.Convert(System.Single,Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts a value from one unit to another.
            </summary>
      <param name="value">Value to be converted.  This is in <i>srcUnit</i> units.</param>
      <param name="srcUnit">Source <see cref="T:Leadtools.Annotations.AnnUnit" /> unit.</param>
      <param name="destUnit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> unit.</param>
      <returns>The converted value.</returns>
      <remarks>This method uses the default DPI value of 96.</remarks>
      <example>
        <para>This example converts a value of 200 pixels to inches at 96 DPI.</para>
        <code lang="VB">      Public Sub AnnUnitConverter_Convert()
         Dim result As Single = AnnUnitConverter.Convert(200.0F, AnnUnit.Pixel, AnnUnit.Inch)
      End Sub</code>
        <code lang="CS">      public void AnnUnitConverter_Convert()
      {
         float result = AnnUnitConverter.Convert(200.0F, AnnUnit.Pixel, AnnUnit.Inch);
      }</code>
        <!--AnnUnitConverter.Convert-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.Convert(System.Single,Leadtools.Annotations.AnnAngularUnit,Leadtools.Annotations.AnnAngularUnit)">
      <summary>
            Converts an angular value from one unit to another.
            </summary>
      <noremarks />
      <param name="value">Value to be converted.  This is in <i>srcUnit</i> units.</param>
      <param name="srcUnit">An <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> value that represents the angular unit of measure used by the Source.</param>
      <param name="destUnit">An <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> value that represents the angular unit of measure used by the Destination.</param>
      <returns>The converted value.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnUnitConverter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.ConvertHorizontal(System.Single,Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts a value from one unit to another using the horizontal DPI value.
            </summary>
      <noremarks />
      <param name="value">Value to be converted.  This is in <i>srcUnit</i> units.</param>
      <param name="srcUnit">Source <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <param name="destUnit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <returns>The converted value.</returns>
      <example>
        <para>This example sets up a unit converter class with different horizontal and vertical DPI values and then converts horizontal and vertical values from pixels to inches.</para>
        <code lang="VB">      Public Sub AnnUnitConverter_ConvertHorizontal()
         ' set up a new unit converter with 96 horizontal and 192 vertical DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 192)
         Dim pixels As Single = 200

         ' convert using the horizontal DPI
         Dim horzInches As Single = converter.ConvertHorizontal(200, AnnUnit.Pixel, AnnUnit.Inch)

         ' convert using the vertical DPI
         Dim vertInches As Single = converter.ConvertVertical(200, AnnUnit.Pixel, AnnUnit.Inch)

         ' show
         Dim s As String = String.Format("{0} {1} is {2} {3} at {4} X DPI{5}{0} {1} is {6} {3} at {7} Y DPI", pixels, AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Pixel), horzInches, AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Inch), converter.DpiX, Environment.NewLine, vertInches, converter.DpiY)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnUnitConverter_ConvertHorizontal()
      {
         // set up a new unit converter with 96 horizontal and 192 vertical DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 192);
         float pixels = 200;

         // convert using the horizontal DPI
         float horzInches = converter.ConvertHorizontal(200, AnnUnit.Pixel, AnnUnit.Inch);

         // convert using the vertical DPI
         float vertInches = converter.ConvertVertical(200, AnnUnit.Pixel, AnnUnit.Inch);

         // show
         string s = string.Format(
         "{0} {1} is {2} {3} at {4} X DPI{5}{0} {1} is {6} {3} at {7} Y DPI",
         pixels,
         AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Pixel),
         horzInches,
         AnnUnitConverter.GetUnitAbbreviation(AnnUnit.Inch),
         converter.DpiX,
         Environment.NewLine,
         vertInches,
         converter.DpiY);
         MessageBox.Show(s);
      }</code>
        <!--AnnUnitConverter.ConvertHorizontal-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.ConvertVertical(System.Single,Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts a value from one unit to another using the vertical DPI value of this class.
            </summary>
      <noremarks />
      <param name="value">Value to be converted.  This is in <i>srcUnit</i> units.</param>
      <param name="srcUnit">Source <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <param name="destUnit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <returns>The converted value.</returns>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnUnitConverter.ConvertHorizontal(System.Single,Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnUnitConverter.SetUnitAbbreviation(Leadtools.Annotations.AnnUnit,System.String)">
      <summary>
            Modifies the default string abbreviation to be used with a specific unit.
            </summary>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> value to change its abbreviation.</param>
      <param name="newValue">A string value that specifies the abbreviation to be used with <paramref name="unit" />.</param>
      <returns>A <see cref="T:System.String" /> that specifes the previous default value.</returns>
      <remarks>
        <para>You can use this method to globally change the abbreviation used with any unit during the life of your program.</para>
      </remarks>
      <example>
        <para>
          <para>This example will change the abbreviation of SmartEnglish from the default of "in" to "inch":</para>
        </para>
        <code lang="VB">      Private Sub AnnUnitConverter_SetUnitAbbreviation()
         Dim ruler1 As New AnnRulerObject()
         ruler1.MeasurementUnit = AnnUnit.SmartEnglish
         ' Should be the default of "in"
         Console.WriteLine("UnitAbbreviation: {0}", ruler1.UnitAbbreviation)
         ' Change the default abbreviation of SmartEnglish to "inches"
         AnnUnitConverter.SetUnitAbbreviation(AnnUnit.SmartEnglish, "inches")

         ' Create another ruler with SmartEnglish measurement units
         Dim ruler2 As New AnnRulerObject()
         ruler2.MeasurementUnit = AnnUnit.SmartEnglish
         ' Should be the new value of "inches"
         Console.WriteLine("UnitAbbreviation: {0}", ruler2.UnitAbbreviation)
      End Sub</code>
        <code lang="CS">      private void AnnUnitConverter_SetUnitAbbreviation()
      {
         AnnRulerObject ruler1 = new AnnRulerObject();
         ruler1.MeasurementUnit = AnnUnit.SmartEnglish;
         // Should be the default of "in"
         Console.WriteLine("UnitAbbreviation: {0}", ruler1.UnitAbbreviation);
         // Change the default abbreviation of SmartEnglish to "inches"
         AnnUnitConverter.SetUnitAbbreviation(AnnUnit.SmartEnglish, "inches");

         // Create another ruler with SmartEnglish measurement units
         AnnRulerObject ruler2 = new AnnRulerObject();
         ruler2.MeasurementUnit = AnnUnit.SmartEnglish;
         // Should be the new value of "inches"
         Console.WriteLine("UnitAbbreviation: {0}", ruler2.UnitAbbreviation);
      }</code>
        <!--AnnUnitConverter.SetUnitAbbreviation-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnUnitConverter.DpiX">
      <summary>
            Gets or sets the horizontal DPI value.
            </summary>
      <noremarks />
      <value>The horizontal DPI value.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnUnitConverter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnUnitConverter.DpiY">
      <summary>
            Gets or sets the vertical DPI value.
            </summary>
      <noremarks />
      <value>The vertical DPI value.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnUnitConverter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnVideoObject">
      <summary>
            Defines a video annotation object.
            </summary>
      <keywords>Video object|Annotation objects</keywords>
      <remarks>
        <para>The video annotation object is a scaled image that can be activated to play a video clip.  The video file path is stored in the
            <see cref="P:Leadtools.Annotations.AnnVideoObject.FileName" /> property, so the video data itself is not stored in this object, only the physical path.  In run mode, when
            this video object is clicked, the framework will try to locate and then play the video file stored in <see cref="P:Leadtools.Annotations.AnnVideoObject.FileName" />.  This object will
            use the default image of a video icon. To change this default image, change the <see cref="P:Leadtools.Annotations.AnnVideoObject.Picture" /> value.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnVideoObject" /> class inherits the the <see cref="T:Leadtools.Annotations.AnnImageObject" /> class and accesses the common
            <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> property mentioned above through this inheritance.</para>
        <para>LEADTOOLS Annotations uses the LEADTOOLS Multimedia for .NET toolkit to render video files and Leadtools.Multimedia must be present on the
            machine. For more information, refer to 
            <a href="http://www.leadtools.com/help/leadtools/v175/dh/multimedia/to/leadtools.topics.multimedia_introduction.html">Introduction to LEADTOOLS Multimedia for .NET</a>.</para>
        <para>For more information about the video annotation object refer to 
            <see cref="T:AN.Topics.AnnVideoObject">AnnVideoObject</see>.</para>
        <para>For more information about the automated annotation video object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsVideoTab">Automated Annotations - Video Tab</see>.</para>
      </remarks>
      <example>
        <para>This example creates a new video object at location 100, 200 and with dimensions of 400 x 600 and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnVideoObject_AnnVideoObject(ByVal container As AnnContainer, ByVal videoFileName As String)
         Dim video As New AnnVideoObject()
         video.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         video.FileName = videoFileName
         container.Objects.Add(video)
      End Sub</code>
        <code lang="CS">      private void AnnVideoObject_AnnVideoObject(AnnContainer container, string videoFileName)
      {
         AnnVideoObject video = new AnnVideoObject();
         video.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         video.FileName = videoFileName;
         container.Objects.Add(video);
      }</code>
        <!--AnnVideoObject.AnnVideoObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnImageObject">
      <summary>
            Defines an annotation image object.
            </summary>
      <remarks>
            The image annotation object is a raster image defined by a bounding rectangle.  This object does not support pens or brushes.
            <p>The <see cref="T:Leadtools.Annotations.AnnAudioObject" /> and the <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> classes inherit the <see cref="T:Leadtools.Annotations.AnnImageObject" /> class and 
            access the common <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> property through this inheritance. For more information, refer 
            to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p></remarks>
      <example>
        <para>This example creates a new image object with top, left at 100, 200, width, height of 400, 600 pixels and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnImageObject_AnnImageObject(ByVal container As AnnContainer, ByVal imageFileName As String)
         Dim img As AnnImageObject = New AnnImageObject()
         Dim pic As AnnPicture = New AnnPicture(Image.FromFile(imageFileName))
         pic.TransparentMode = AnnPictureTransparentMode.None
         pic.TransparentColor = Color.Black
         img.Picture = pic
         img.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(img)
      End Sub</code>
        <code lang="CS">      private void AnnImageObject_AnnImageObject(AnnContainer container, string imageFileName)
      {
         AnnImageObject img = new AnnImageObject();
         AnnPicture pic = new AnnPicture(Image.FromFile(imageFileName));
         pic.TransparentMode = AnnPictureTransparentMode.None;
         pic.TransparentColor = Color.Black;
         img.Picture = pic;
         img.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(img);
      }</code>
        <!--AnnImageObject.AnnImageObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnImageObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnImageObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnImageObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnImageObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnImageObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnImageObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnImageObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnImageObject" /> will return the same exact path no matter what the value of <i>mode</i> is.  However, <see cref="T:Leadtools.Annotations.AnnImageObject" /> overrides the <see cref="M:Leadtools.Annotations.AnnObject.DrawObject(System.Drawing.Graphics)" /> method to manually draw the <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> value itself since it cannot be described by a graphics path.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnImageObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnImageObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnImageObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnImageObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnImageObject" />.</value>
      <remarks>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnImageObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnImageObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnImageObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnImageObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; false otherwise.</param>
      <param name="supportsBrush">true if this object will support a brush; false otherwise.</param>
      <param name="supportsFont">true if this object will support a font; false otherwise.</param>
      <remarks>
            This constructor is intended for derived classes that are used to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnVideoObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnVideoObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnVideoObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnVideoObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.</value>
      <remarks>
        <para>The picture is used by this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> while in design mode, in run mode, the video object will play the video file set in
            <see cref="P:Leadtools.Annotations.AnnVideoObject.FileName" />.</para>
        <para>If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnVideoObject" /> will use the picture defined in the <see cref="P:Leadtools.Annotations.AnnVideoObject.DefaultPicture" /> property.</para>
        <para>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnVideoObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.FileName">
      <summary>
            Gets or sets the video file name of this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.
            </summary>
      <value>A string value that specifies the video file name of this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.</value>
      <remarks>
        <para>LEADTOOLS Annotations uses the LEADTOOLS Multimedia for .NET toolkit to render video files and Leadtools.Multimedia must be present on the
            machine. For more information, refer to 
            <a href="http://www.leadtools.com/help/leadtools/v175/dh/multimedia/to/leadtools.topics.multimedia_introduction.html">Introduction to LEADTOOLS Multimedia for .NET</a>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnVideoObject" /></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnVideoObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnVideoObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnVideoObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true if this <see cref="P:Leadtools.Annotations.AnnVideoObject.Picture" /> property has a valid image.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.DefaultPicture">
      <summary>
            Gets or sets the default picture used by all <see cref="T:Leadtools.Annotations.AnnVideoObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture used by the <see cref="T:Leadtools.Annotations.AnnVideoObject" />.</value>
      <remarks>
            Set the <see cref="P:Leadtools.Annotations.AnnVideoObject.UseOriginalPicture" /> property to true to revert back to the original picture.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnVideoObject_DefaultPicture(ByVal container As AnnContainer, ByVal viewer As RasterImageViewer, ByVal newVideoPicture As String)
         ' first add a new AnnVideoObject with the original picture
         Dim obj As New AnnVideoObject()
         obj.Bounds = New AnnRectangle(100, 100, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()
         MessageBox.Show("A video object with the original picture")

         ' now change the picture to one of our own
         Dim img As Image = Image.FromFile(newVideoPicture)
         Dim picture As New AnnPicture(img)
         AnnVideoObject.DefaultPicture = picture

         ' at this point, all new AnnVideoObject objects will use this new picture

         ' add another video object
         obj = New AnnVideoObject()
         obj.Bounds = New AnnRectangle(100, 210, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()

         MessageBox.Show("A video object with the new picture")

         ' set the picture back to the original value
         AnnVideoObject.UseOriginalPicture = True

         ' add another video object
         obj = New AnnVideoObject()
         obj.Bounds = New AnnRectangle(100, 320, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()

         MessageBox.Show("A video object with the original picture")
      End Sub</code>
        <code lang="CS">      public void AnnVideoObject_DefaultPicture(AnnContainer container, RasterImageViewer viewer, string newVideoPicture)
      {
         // first add a new AnnVideoObject with the original picture
         AnnVideoObject obj = new AnnVideoObject();
         obj.Bounds = new AnnRectangle(100, 100, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();
         MessageBox.Show("A video object with the original picture");

         // now change the picture to one of our own
         Image img = Image.FromFile(newVideoPicture);
         AnnPicture picture = new AnnPicture(img);
         AnnVideoObject.DefaultPicture = picture;

         // at this point, all new AnnVideoObject objects will use this new picture

         // add another video object
         obj = new AnnVideoObject();
         obj.Bounds = new AnnRectangle(100, 210, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();

         MessageBox.Show("A video object with the new picture");

         // set the picture back to the original value
         AnnVideoObject.UseOriginalPicture = true;

         // add another video object
         obj = new AnnVideoObject();
         obj.Bounds = new AnnRectangle(100, 320, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();

         MessageBox.Show("A video object with the original picture");
      }</code>
        <!--AnnVideoObject.DefaultPicture-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnVideoObject.UseOriginalPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnVideoObject" /> objects.
            </summary>
      <value>true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnVideoObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use the <see cref="P:Leadtools.Annotations.AnnVideoObject.DefaultPicture" /> property to get or set the current default picture used by the <see cref="T:Leadtools.Annotations.AnnVideoObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnVideoObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRichTextObject">
      <summary>
            This class provides support for creating and managing Rich Text annotation objects
            </summary>
      <remarks>
        <para>The rich text annotation object (<see cref="T:Leadtools.Annotations.AnnRichTextObject" />) is a rectangle containing text that supports the Rich Text Format (RTF)
            file format.</para>
        <para>This class supports a pen and brush, that may be used on the bounding rectangle, if needed.</para>
        <para>For more information, refer to
            <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object</see>.</para>
        <para>For more information about the rich text annotation object refer to 
            <see cref="T:AN.Topics.AnnRichTextObject">AnnRichTextObject</see>.</para>
        <para>For more information about the automated rich text annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>.</para>
        <para>
          <strong>Note:</strong> the <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> does not support <see cref="T:Leadtools.Annotations.AnnFixedStateOperations">AnnFixedStateOperations.FontSize</see>.</para>
      </remarks>
      <example>
        <para>This example creates a new rich text object.</para>
        <code lang="VB">      Private Sub AnnRichTextObject_AnnRichTextObject(ByVal container As AnnContainer, ByVal rtfText As String)
         Dim richText As New AnnRichTextObject()
         richText.Pen = New AnnPen(Color.Red, New AnnLength(3))
         richText.Rtf = rtfText
         richText.Brush = Nothing
         richText.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         container.Objects.Add(richText)
      End Sub</code>
        <code lang="CS">      private void AnnRichTextObject_AnnRichTextObject(AnnContainer container, string rtfText)
      {
         AnnRichTextObject richText = new AnnRichTextObject();
         richText.Pen = new AnnPen(Color.Red, new AnnLength(3));
         richText.Rtf = rtfText;
         richText.Brush = null;
         richText.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         container.Objects.Add(richText);
      }</code>
        <!--AnnRichTextObject.AnnRichTextObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> class object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that are used to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> class object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRichTextObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.Create">
      <summary>
            Creates a new instance of an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> class object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> class object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see><br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> to the newly created one.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnRichTextObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnRichTextObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">AnnObject.GetTransformPoints</see>.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies the transformation method called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">AnnObject.SetTransformPoints</see>.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies the transformation method called.</param>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRichTextObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object; false otherwise.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRichTextObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object when any object transformation method is called.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRichTextObject.Rtf">
      <summary>
            Gets or sets the text of the <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object, including all rich text format (RTF) codes.
            </summary>
      <value>The text of the control in RTF format. Default value is null reference (Nothing in Visual Basic) for no text.</value>
      <remarks>
        <para>You can use this property to place RTF formatted text into the object or to extract the text of the control with the specified RTF formatting defined in the text of the object. This property is typically
            used when you are assigning RTF text from another RTF source, such as Microsoft Word or Windows WordPad, to the object.</para>
        <para>For the RTF codes, see "rich text format (RTF) Specification, version 1.6" in the MSDN library at <a href="http://msdn.microsoft.com/library" />.</para>
        <para>For more information, refer to
            <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object</see>.</para>
        <para>For more information about the rich text annotation object refer to 
            <see cref="T:AN.Topics.AnnRichTextObject">AnnRichTextObject</see>.</para>
        <para>For more information about the automated rich text annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnRichTextObject" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnRichTextObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRedactionObject">
      <summary>
            Defines an annotation redaction object.
            </summary>
      <remarks>
        <para>The redaction annotation object is a rectangle with default properties that 
            are appropriate for blacking out an area.   The <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)" /> method lets 
            you block the area on the image with the current object brush value. 
            The <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)" /> method lets you restore the area back. 
            For more information about the redaction annotation object refer to 
            <see cref="T:AN.Topics.AnnRedactionObject">AnnRedactionObject</see>. 
            For more information about the automated redaction annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
        <p>If you are interested in locking an object, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
        <para>This example creates a new redaction object, and then addes it to the container.</para>
        <code lang="VB">      Private Sub AnnRedactionObject_AnnRedactionObject(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer)
         Dim redaction As AnnRedactionObject = New AnnRedactionObject()
         redaction.Bounds = New AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel)
         container.Objects.Add(redaction)
         viewer.Invalidate(redaction.InvalidRectangle)
         MessageBox.Show(String.Format("Added. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count))

         ' realize the redaction object
         redaction.Realize(viewer)

         viewer.Invalidate(redaction.InvalidRectangle)
         MessageBox.Show(String.Format("Realized. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count))

         ' remove the redaction object from the container
         container.Objects.Remove(redaction)
         viewer.Invalidate()
         MessageBox.Show(String.Format("Removed. Objects in container: {0}", container.Objects.Count))

         ' add the redaction object back
         container.Objects.Add(redaction)
         viewer.Invalidate(redaction.InvalidRectangle)
         MessageBox.Show(String.Format("Added back. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count))

         ' restore the redaction object
         redaction.Restore(viewer)
         viewer.Invalidate(redaction.InvalidRectangle)
         MessageBox.Show(String.Format("Restored. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count))

         ' remove the redaction again from the container
         container.Objects.Remove(redaction)
         viewer.Invalidate()
         MessageBox.Show(String.Format("Removed. Objects in container: {0}", container.Objects.Count))
      End Sub</code>
        <code lang="CS">      private void AnnRedactionObject_AnnRedactionObject(RasterImageViewer viewer, AnnContainer container)
      {
         AnnRedactionObject redaction = new AnnRedactionObject();
         redaction.Bounds = new AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel);
         container.Objects.Add(redaction);
         viewer.Invalidate(redaction.InvalidRectangle);
         MessageBox.Show(String.Format("Added. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count));

         // realize the redaction object
         redaction.Realize(viewer);

         viewer.Invalidate(redaction.InvalidRectangle);
         MessageBox.Show(String.Format("Realized. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count));

         // remove the redaction object from the container
         container.Objects.Remove(redaction);
         viewer.Invalidate();
         MessageBox.Show(String.Format("Removed. Objects in container: {0}", container.Objects.Count));

         // add the redaction object back
         container.Objects.Add(redaction);
         viewer.Invalidate(redaction.InvalidRectangle);
         MessageBox.Show(String.Format("Added back. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count));

         // restore the redaction object
         redaction.Restore(viewer);
         viewer.Invalidate(redaction.InvalidRectangle);
         MessageBox.Show(String.Format("Restored. IsRealized: {0}, Objects in container: {1}", redaction.IsRealized, container.Objects.Count));

         // remove the redaction again from the container
         container.Objects.Remove(redaction);
         viewer.Invalidate();
         MessageBox.Show(String.Format("Removed. Objects in container: {0}", container.Objects.Count));
      }</code>
        <!--AnnRedactionObject.AnnRedactionObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)">
      <summary>
            Realizes this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> to the image inside a given viewer.
            </summary>
      <param name="viewer">The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> containing the <see cref="T:Leadtools.RasterImage" /> to realize this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> onto.</param>
      <remarks>
        <p>When this method is called, the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is saved in the object, and then the area behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is filled with the value in <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" />.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is already realized, this method will do nothing.  You can determine if this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is realized by calling the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> property.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has no brush, this method will do nothing.</p>
        <para>To realize the object to an image, use <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.RasterImage)">Realize(RasterImage)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)">
      <summary>
            Restores the background behind the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> to the image inside a given viewer.
            </summary>
      <param name="viewer">The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> containing the <see cref="T:Leadtools.RasterImage" /> onto which the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> will be restored.</param>
      <remarks>
        <p>When this method is called, the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is restored back onto the image.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has not been realized, this method will do nothing.  You can determine if this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is realized by calling the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> property.</p>
        <para>To restore the object to an image, use <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.RasterImage)">Restore(RasterImage)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.RasterImage)">
      <summary>
            Realizes this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> to the image inside a given image.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> to realize this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> onto.</param>
      <remarks>
        <p>When this method is called, the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is saved in the object, and then the area behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is filled with the value in <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" />.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is already realized, this method will do nothing.  You can determine if this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is realized by calling the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> property.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has no brush, this method will do nothing.</p>
        <para>To realize the object to an image inside a viewer, use <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)">Realize(RasterImageViewer)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.RasterImage)">
      <summary>
            Restores the background behind the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> to the image inside a given image.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> onto which the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> will be restored.</param>
      <remarks>
        <p>When this method is called, the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is restored back onto the image.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has not been realized, this method will do nothing.  You can determine if this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is realized by calling the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> property.</p>
        <para>To restore the object to an image inside a viewer, use <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)">Restore(RasterImageViewer)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRedactionObject.IsRealized">
      <summary>
            Returns a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has been realized.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> has been realized; false, otherwise.</value>
      <remarks>
            (Read only) You can realize this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> by calling the <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)" /> method.  Call the <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)" /> method to restore the background behind this <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> back onto the image.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRedactionObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnRedactionObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRedactionObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRedactionObject.SupportsFixed">
      <summary>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" /> property to return false.<br />
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />, <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" /> and <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.
            </remarks>
      <para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPointObject">
      <summary>
            Defines an annotation point object.
            </summary>
      <remarks>
            The point object is a single point.  This object works in two ways: If the value of <see cref="P:Leadtools.Annotations.AnnPointObject.ShowPicture" /> is true; this
            object will draw the picture in <see cref="P:Leadtools.Annotations.AnnPointObject.Picture" /> with <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" /> as the center point.  
            <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />, <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> and <see cref="P:Leadtools.Annotations.AnnPointObject.Radius" /> will be ignored.  If 
            <see cref="P:Leadtools.Annotations.AnnPointObject.ShowPicture" /> is false; this object will draw an ellipse using <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />, 
            <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> and <see cref="P:Leadtools.Annotations.AnnPointObject.Radius" /> around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.
            <p>This class implements the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> interface and accesses the <see cref="P:Leadtools.Annotations.IAnnPictureObject.Picture" /> 
            property that handles the picture associated with the annotation object.</p><p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p><para>
            For more information about the point annotation object refer to 
            <see cref="T:AN.Topics.AnnPointObject">AnnPointObject</see>. 
            For more information about the automated point annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsPointTab">Automated Annotations - Point Tab</see>. 
            </para></remarks>
      <example>
        <para>This example adds a new point object to a container.</para>
        <code lang="VB">      Private Sub AnnPointObject_AnnPointObject(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer)
         Dim point As AnnPointObject = New AnnPointObject()
         point.CenterPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         point.ShowPicture = True
         ' default picture, no need to change anything
         container.Objects.Add(point)
         viewer.Invalidate(point.InvalidRectangle)
         MessageBox.Show("Picture")

         ' show with a radius
         point.Radius = New AnnLength(16, AnnUnit.Pixel)
         point.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         point.ShowPicture = False
         viewer.Invalidate(point.InvalidRectangle)
         MessageBox.Show("No picture")
      End Sub</code>
        <code lang="CS">      private void AnnPointObject_AnnPointObject(RasterImageViewer viewer, AnnContainer container)
      {
         AnnPointObject point = new AnnPointObject();
         point.CenterPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         point.ShowPicture = true;
         // default picture, no need to change anything
         container.Objects.Add(point);
         viewer.Invalidate(point.InvalidRectangle);
         MessageBox.Show("Picture");

         // show with a radius
         point.Radius = new AnnLength(16, AnnUnit.Pixel);
         point.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         point.ShowPicture = false;
         viewer.Invalidate(point.InvalidRectangle);
         MessageBox.Show("No picture");
      }</code>
        <!--AnnPointObject.AnnPointObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnPointObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPointObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPointObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPointObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnPointObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnPointObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnPointObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnPointObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method to call.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures that contains the points to be transformed.
            </returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> class overrides this member to return an array of 1 point, the center of the point.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies which transformation method was called.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> class overrides this member .
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and
            <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and
            <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnPointObject" />.</value>
      <remarks>
        <p>If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnPointObject" /> will use the picture define in <see cref="P:Leadtools.Annotations.AnnPointObject.DefaultPicture" />.</p>
        <p>If this property has a valid image, the <see cref="T:Leadtools.Annotations.AnnPointObject" /> will draw this picture around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.</p>
        <p>If this property does not have a valid image, the <see cref="T:Leadtools.Annotations.AnnPointObject" /> will use <see cref="P:Leadtools.Annotations.AnnPointObject.Radius" /> to draw an ellipse around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.CenterPoint">
      <summary>
            Gets or sets the center point of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <noremarks />
      <value>The center point of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.Radius">
      <summary>
            Gets or sets the radius of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <value>The radius of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.</value>
      <remarks>
        <p>When you create a new <see cref="T:Leadtools.Annotations.AnnPointObject" />, a default picture will be set in this property.</p>
        <p>If the value of <see cref="P:Leadtools.Annotations.AnnPointObject.ShowPicture" /> is true, the <see cref="T:Leadtools.Annotations.AnnPointObject" /> will draw this picture around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.</p>
        <p>If the value of <see cref="P:Leadtools.Annotations.AnnPointObject.ShowPicture" />is false, the <see cref="T:Leadtools.Annotations.AnnPointObject" /> will use <b>Radius</b> to draw an ellipse around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.ShowPicture">
      <summary>
            Gets or sets a value indicating whether to show the picture.
            </summary>
      <value>true to show the picture in <see cref="P:Leadtools.Annotations.AnnPointObject.Picture" />; otherwise, draw the ellipse.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPointObject" /> works in two ways: If the value of <b>ShowPicture</b> is true; this object will draw the picture in <see cref="P:Leadtools.Annotations.AnnPointObject.Picture" /> with <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" /> as the center point.  <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />, <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> and <see cref="P:Leadtools.Annotations.AnnPointObject.Radius" /> will be ignored.  If <b>ShowPicture</b> is false; this object will draw an ellipse using <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />, <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> and <see cref="P:Leadtools.Annotations.AnnPointObject.Radius" /> around <see cref="P:Leadtools.Annotations.AnnPointObject.CenterPoint" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnPointObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnPointObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true if this <see cref="P:Leadtools.Annotations.AnnPointObject.Picture" /> property has a valid image.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.DefaultPicture">
      <summary>
            Gets or sets the default picture used by all <see cref="T:Leadtools.Annotations.AnnPointObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture used by the <see cref="T:Leadtools.Annotations.AnnPointObject" />.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnPointObject.UseOriginalPicture" /> to revert back to the original picture.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" /></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.UseOriginalPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnPointObject" /> objects.
            </summary>
      <value>true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnPointObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnPointObject.DefaultPicture" /> to get or set the current default picture used by the <see cref="T:Leadtools.Annotations.AnnPointObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnPointObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnPointObject" /> class overrides this property to return <b>AnnTransformObjectMode.Points</b>.  This property, along with the <see cref="M:Leadtools.Annotations.AnnPointObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnPointObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that the encrypt object physically transforms the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Bounds" /> value whenever the encrypt object is transformed.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnProtractorEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnProtractorEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnProtractorEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnControlPoint">
      <summary>
            Represents the shape of a control point (handle) used by the <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </summary>
      <remarks>
        <p>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> class is used by <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> object to show handles that the user can click and drag.</p>
        <p>Other classes derive from this class to provide certain shapes for control points such as the <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" /> and <see cref="T:Leadtools.Annotations.AnnEllipseControlPoint" />.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> this method creates.</returns>
      <remarks>
            Derived annotation control point objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</returns>
      <remarks>
            Derived annotation control point objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            Derived annotation objects must implement this method to enable the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object that this class creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.GetInvalidRectangle(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Gets the physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <value>The physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</value>
      <remarks>
            This rectangle can be used to calculate the invalid region needed to re-paint this control point.  The annotation automation toolkit uses this value to speed up re-painting the owner control.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.ToString">
      <summary>
            Overridden. Converts the attributes of this <see cref="T:Leadtools.Annotations.AnnControlPoint" /> to a human-readable string.
            </summary>
      <returns>A string that represents the attributes of this control point.</returns>
      <remarks>
            This method will return the value of the <see cref="P:Leadtools.Annotations.AnnControlPoint.Name" /> property of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.Draw(System.Drawing.Graphics,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnControlPoint" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</param>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <remarks>
            This method is called internally by the <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnControlPoint.HitTest(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter,System.Int32)">
      <summary>
            Performs hit-testing on this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <param name="testPoint">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be tested.</param>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <param name="buffer">Threshold buffer value.</param>
      <returns>true if hit-test is satisfied; otherwise, false.</returns>
      <remarks>
            This method is called internally by the <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnControlPoint.Name">
      <summary>
            Gets or sets the name of the <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <value>The name of the <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</value>
      <remarks>
            A control point name is one way of differentiating between multiple control points.  LEADTOOLS does not use the control point name in any special way and the value has no special meaning.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnSize">
      <summary>
            Stores an ordered pair of floating-point numbers and a unit of measurement, typically the width and height of a rectangle.
            </summary>
      <noremarks />
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnSize" /> structure in inches then converts it to pixels.</para>
        <code lang="VB">      Private Sub AnnSize_AnnSize()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation size that is 1.5 and 2 inches
         Dim sz As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)

         ' show the size
         Dim s As String = String.Format("{0}", sz)
         MessageBox.Show(s)

         ' convert the size to pixels
         sz.Convert(converter, AnnUnit.Pixel)

         ' show
         s = String.Format("{0}", sz)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnSize_AnnSize()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation size that is 1.5 and 2 inches
         AnnSize sz = new AnnSize(1.5f, 2f, AnnUnit.Inch);

         // show the size
         string s = string.Format("{0}", sz);
         MessageBox.Show(s);

         // convert the size to pixels
         sz.Convert(converter, AnnUnit.Pixel);

         // show
         s = string.Format("{0}", sz);
         MessageBox.Show(s);
      }</code>
        <!--AnnSize.AnnSize-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSize" /> structure from the specified dimension.
            </summary>
      <noremarks />
      <param name="width">The width component of the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <param name="height">The height component of the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <remarks>The Unit property will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.#ctor(System.Single,System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSize" /> structure from the specified dimensions and unit.
            </summary>
      <noremarks />
      <param name="width">The width component of the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <param name="height">The height component of the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> structure specifying the unit of measure.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.#ctor(System.Drawing.SizeF)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSize" /> structure from a SizeF structure.
            </summary>
      <param name="sz">A SizeF structure that specifies the dimensions for the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <remarks>The Unit property will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.#ctor(System.Drawing.SizeF,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSize" /> structure from a SizeF structure and a unit value.
            </summary>
      <noremarks />
      <param name="sz">A SizeF structure that specifies the dimension for the new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> value specifying the unit of measure for the values in this structure.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.#ctor(Leadtools.Annotations.AnnPoint)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSize" /> structure from an <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.
            </summary>
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure from which to initialize this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</param>
      <remarks>The Unit property will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnSize.Empty">
      <summary>
            Represents a new instance of an <see cref="T:Leadtools.Annotations.AnnSize" /> structure with member data left uninitialized.
            </summary>
      <remarks>(Read only) An uninitialized AnnSize structure has a width, height value of 0,0 and a unit of measure of pixels.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ConvertedWidth(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the width or horizontal component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure, in the units specified in the <i>unit</i> parameter.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object used in converting the width.</param>
      <param name="unit">
        <see cref="T:Leadtools.Annotations.AnnUnit" /> value that indicates the units to which to convert the width.</param>
      <returns>The width or horizontal component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure, in the specified units.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object specified in <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used, and the conversion will be done using 96 DPI.
            </remarks>
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnSize" /> structure in inches and then displays the width and height in pixels.</para>
        <code lang="VB">      Public Sub AnnSize_ConvertedWidth()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation size with dimension of 1.5, 2 in inches
         Dim sz As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)

         Dim s As String
         ' show the size
         s = String.Format("Size is {0}", sz)
         MessageBox.Show(s)

         ' show the width and height components converted to pixels
         s = String.Format("width and height is {0}, {1} Pixels", sz.ConvertedWidth(converter, AnnUnit.Pixel), sz.ConvertedHeight(converter, AnnUnit.Pixel))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnSize_ConvertedWidth()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation size with dimension of 1.5, 2 in inches
         AnnSize sz = new AnnSize(1.5f, 2f, AnnUnit.Inch);

         string s;
         // show the size
         s = string.Format("Size is {0}", sz);
         MessageBox.Show(s);

         // show the width and height components converted to pixels
         s = string.Format("width and height is {0}, {1} Pixels", sz.ConvertedWidth(converter, AnnUnit.Pixel), sz.ConvertedHeight(converter, AnnUnit.Pixel));
         MessageBox.Show(s);
      }</code>
        <!--AnnSize.ConvertedWidth-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ConvertedHeight(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the vertical component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structrue, in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the x-coordinate.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <returns>The vertical component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure, in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnSize.ConvertedWidth(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ToString">
      <summary>
            Overridden. Converts this <see cref="T:Leadtools.Annotations.AnnSize" /> structure to a human-readable string.
            </summary>
      <noremarks />
      <returns>A string that represents the attributes of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.  For more information about this method, refer to <see cref="M:System.Object.GetHashCode" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.Equals(System.Object)">
      <summary>
            Determines whether this <see cref="T:Leadtools.Annotations.AnnSize" /> structure contains the same dimensions as the specified Object.
            </summary>
      <param name="obj">The object to which to compare this AnnSize structure.</param>
      <returns>true if this AnnSize structure contains the same dimensions as the specified object; false, otherwise.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.op_Equality(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Determines whether two <see cref="T:Leadtools.Annotations.AnnSize" /> structures are equal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the left side of the equality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the right side of the equality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have equal Width and Height values; otherwise false.</returns>
      <remarks>
            If the two sizes have different units, comparison will be done after temporarily converting both to a common unit.
            </remarks>
      <example>
        <para>This example creates a size in inches, converts it to pixels, then makes sure the two sizes are still equal.</para>
        <code lang="VB">      Public Sub AnnSize_OperatorEquals()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         Dim inches As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim pixels As AnnSize = New AnnSize(inches.ConvertTo(converter, AnnUnit.Pixel).ToSizeF(), AnnUnit.Pixel)

         Dim s As String

         ' should say true
         s = String.Format("Should say True: inches == pixels is {0}", AnnSize.op_Equality(inches, pixels))
         MessageBox.Show(s)

         ' should say false
         s = String.Format("Should say False: inches != pixels is {0}", AnnSize.op_Inequality(inches, pixels))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnSize_OperatorEquals()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         AnnSize inches = new AnnSize(1.5F, 2f, AnnUnit.Inch);
         AnnSize pixels = new AnnSize(inches.ConvertTo(converter, AnnUnit.Pixel).ToSizeF(), AnnUnit.Pixel);

         string s;

         // should say true
         s = string.Format("Should say True: inches == pixels is {0}", inches == pixels);
         MessageBox.Show(s);

         // should say false
         s = string.Format("Should say False: inches != pixels is {0}", inches != pixels);
         MessageBox.Show(s);
      }</code>
        <!--AnnSize.OperatorEquals-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.op_Inequality(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Determines whether two <see cref="T:Leadtools.Annotations.AnnSize" /> structures are unequal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the left side of the inequality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the right side of the inequality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have unequal Width and Height values; otherwise false.</returns>
      <remarks>
            If the two sizes have different units, comparison will be done after temporarily converting both to a common unit.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnSize.op_Equality(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.op_Addition(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Adds the width and height of one <see cref="T:Leadtools.Annotations.AnnSize" /> structure to the width and height of another <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <param name="sz1">The first <see cref="T:Leadtools.Annotations.AnnSize" /> structure  being added.</param>
      <param name="sz2">The second <see cref="T:Leadtools.Annotations.AnnSize" /> structure being added.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that is the result of the addition operation.</returns>
      <example>
        <para>This example adds two size structures.</para>
        <code lang="VB">      Public Sub AnnSize_OperatorPlus()
         Dim sz1 As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim sz2 As AnnSize = New AnnSize(200, 300, AnnUnit.Pixel)
         Dim s As String = String.Format("sz1 + sz2 = {0}", sz1 + sz2)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnSize_OperatorPlus()
      {
         AnnSize sz1 = new AnnSize(1.5F, 2f, AnnUnit.Inch);
         AnnSize sz2 = new AnnSize(200, 300, AnnUnit.Pixel);
         string s = string.Format("sz1 + sz2 = {0}", sz1 + sz2);
         MessageBox.Show(s);
      }</code>
        <!--AnnSize.OperatorPlus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.Add(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Adds the width and height of one <see cref="T:Leadtools.Annotations.AnnSize" /> structure to the width and height of another <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <param name="sz1">The first <see cref="T:Leadtools.Annotations.AnnSize" /> structure  being added.</param>
      <param name="sz2">The second <see cref="T:Leadtools.Annotations.AnnSize" /> structure being added.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that is the result of the addition operation.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.op_Subtraction(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Subtracts the width and height of one <see cref="T:Leadtools.Annotations.AnnSize" /> structure from the width and height of another <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <param name="sz1">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the left side of the subtraction operator.</param>
      <param name="sz2">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the right side of the subtraction operator.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that is the result of the subtraction operation.</returns>
      <example>
        <para>This example subtracts two size structures.</para>
        <code lang="VB">      Public Sub AnnSize_OperatorMinus()
         Dim sz1 As AnnSize = New AnnSize(200, 300, AnnUnit.Pixel)
         Dim sz2 As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim s As String = String.Format("sz1 - sz2 = {0}", sz1 + sz2)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnSize_OperatorMinus()
      {
         AnnSize sz1 = new AnnSize(200, 300, AnnUnit.Pixel);
         AnnSize sz2 = new AnnSize(1.5F, 2f, AnnUnit.Inch);
         string s = string.Format("sz1 - sz2 = {0}", sz1 + sz2);
         MessageBox.Show(s);
      }</code>
        <!--AnnSize.OperatorMinus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.Subtract(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)">
      <summary>
            Subtracts the width and height of one <see cref="T:Leadtools.Annotations.AnnSize" /> structure from the width and height of another <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <param name="sz1">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the left side of the subtraction operator.</param>
      <param name="sz2">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure on the right side of the subtraction operator.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that is the result of the subtraction operation.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.op_Explicit(Leadtools.Annotations.AnnSize)~Leadtools.Annotations.AnnPoint">
      <summary>
            Converts the specified <see cref="T:Leadtools.Annotations.AnnSize" /> structure to an <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.
            </summary>
      <noremarks />
      <param name="size">The <see cref="T:Leadtools.Annotations.AnnSize" /> structure to be converted</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure containing the converted <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</returns>
      <example>
        <para>This example converts an <see cref="T:Leadtools.Annotations.AnnSize" /> structure to an AnnPoint structure.</para>
        <code lang="VB">      Public Sub AnnSize_OperatorAnnPoint()
         Dim sz As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim pt As AnnPoint = CType(sz, AnnPoint)
      End Sub</code>
        <code lang="CS">      public void AnnSize_OperatorAnnPoint()
      {
         AnnSize sz = new AnnSize(1.5F, 2F, AnnUnit.Inch);
         AnnPoint pt = (AnnPoint)sz;
      }</code>
        <!--AnnSize.OperatorAnnPoint-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ToAnnPoint">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnSize" /> structure to an <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.
            </summary>
      <noremarks />
      <returns>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure containing the converted <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ToSizeF">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnSize" /> structure to a SizeF structure.
            </summary>
      <noremarks />
      <returns>A SizeF structure containing the converted <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.Convert(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnSize" /> structure to the specified unit.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">
        <see cref="T:Leadtools.Annotations.AnnUnit" /> value that indicates the units to which to convert this AnnSize structure.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object specified in <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> performs the conversion, using 96 DPI.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnSize" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSize.ConvertTo(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnSize" /> structure to the specified units, and returns a new <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">
        <see cref="T:Leadtools.Annotations.AnnUnit" /> value that indicates the units to which to convert this AnnSize structure.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnSize" /> structure containing the converted value of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object specified in <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> performs the conversion, using 96 DPI.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnSize.op_Equality(Leadtools.Annotations.AnnSize,Leadtools.Annotations.AnnSize)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSize.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnSize" /> structure is empty.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnSize" /> structure is empty; false, otherwise.</value>
      <remarks>(Read only) An empty AnnSize structure has a (width, height) value of 0,0.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSize.Width">
      <summary>
            Gets or sets the width or horizontal component this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <value>The width or horizontal component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSize.Height">
      <summary>
            Gets or sets the height or vertical component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <value>The height or vertical component of this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSize.Unit">
      <summary>
            Gets or sets the unit of measure for this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnSize" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPolyRulerObject">
      <summary>
            Defines an annotation polyruler object.
            </summary>
      <remarks>
            The polyruler annotation object is an array of points that create a sequence of joined rulers.  The polyruler can be used to measure the distance of an irregularly shaped object.  As ruler segments are added, removed, or changed in length, a running total of the total distance is displayed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see><para>
            For more information about the polyruler annotation object refer to 
            <see cref="T:AN.Topics.AnnPolyRulerObject">AnnPolyrulerObject</see>. 
            For more information about the automated polyruler annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsRulerTab">Automated Annotations - Ruler Tab</see>. 
            <para>To get the total length of a poly ruler object, use the <see cref="M:Leadtools.Annotations.AnnPolyRulerObject.GetPolyRulerLength(Leadtools.RasterCollection{Leadtools.Annotations.AnnPoint},Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnitConverter)" /> helper method.</para></para></remarks>
      <example>
        <para>This example creates a new polyruler.</para>
        <code lang="VB">      Private Sub AnnPolyRulerObject_AnnPolyRulerObject(ByVal container As AnnContainer)
         Dim polyruler As AnnPolyRulerObject = New AnnPolyRulerObject()
         polyruler.MeasurementUnit = AnnUnit.SmartEnglish
         polyruler.TickMarksLength = New AnnLength(0.5F, AnnUnit.Inch)
         polyruler.ShowTickMarks = True
         polyruler.GaugeLength = New AnnLength(1.0F, AnnUnit.Inch)
         polyruler.ShowGauge = True
         polyruler.ShowLength = True
         polyruler.Precision = 2
         polyruler.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         polyruler.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         polyruler.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         polyruler.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         polyruler.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(polyruler)
      End Sub</code>
        <code lang="CS">      private void AnnPolyRulerObject_AnnPolyRulerObject(AnnContainer container)
      {
         AnnPolyRulerObject polyruler = new AnnPolyRulerObject();
         polyruler.MeasurementUnit = AnnUnit.SmartEnglish;
         polyruler.TickMarksLength = new AnnLength(0.5F, AnnUnit.Inch);
         polyruler.ShowTickMarks = true;
         polyruler.GaugeLength = new AnnLength(1.0F, AnnUnit.Inch);
         polyruler.ShowGauge = true;
         polyruler.ShowLength = true;
         polyruler.Precision = 2;
         polyruler.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         polyruler.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         polyruler.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         polyruler.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         polyruler.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(polyruler);
      }</code>
        <!--AnnPolyRulerObject.AnnPolyRulerObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPolylineObject">
      <summary>
            Defines an annotation polyline object.
            </summary>
      <remarks>
        <para>
            The polyline object is a simple polyline that contains a collection of <see cref="T:Leadtools.Annotations.AnnPoint" /> points and a pen.
            For more information about the polyline annotation object refer to 
            <see cref="T:AN.Topics.AnnPolylineObject">AnnPolylineObject</see>. 
            For more information about the automated polyline annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example creates a new polyline object with 4 points.</para>
        <code lang="VB">      Private Sub AnnPolylineObject_AnnPolylineObject(ByVal container As AnnContainer)
         Dim polyline As AnnPolylineObject = New AnnPolylineObject()
         polyline.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         polyline.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         polyline.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         polyline.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         polyline.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(polyline)
      End Sub</code>
        <code lang="CS">      private void AnnPolylineObject_AnnPolylineObject(AnnContainer container)
      {
         AnnPolylineObject polyline = new AnnPolylineObject();
         polyline.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         polyline.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         polyline.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         polyline.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         polyline.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(polyline);
      }</code>
        <!--AnnPolylineObject.AnnPolylineObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.ResetRotatePoints">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolylineObject.Points">
      <summary>
            Gets the collection of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures assigned to this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <value>The collection of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures assigned to this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.</value>
      <remarks>
            (Read only) The <b>Points</b> property is a zero-based indexed collection used to hold all the 
            <see cref="T:Leadtools.Annotations.AnnPoint" /> structures assigned to this <see cref="T:Leadtools.Annotations.AnnPolylineObject" />. 
            Since the property is read-only, it can not be assigned a collection of points directly. 
            Points can be added or removed by using the methods inherited from the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnPoint&gt;</see> class. 
            Use the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnPoint&gt;.Add</see> method to add individual points 
            and the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnPoint&gt;.Remove</see> method to delete a point. 
            Call the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnPoint&gt;.Add</see> method to remove all the points from the collection.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnPolylineObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnRulerObject">
      <summary>
            Supports standard ruler properties used by annotation objects from classes that implement this interface.
            </summary>
      <remarks>
        <p>The <b>IAnnRulerObject</b> interface is used by the annotation framework to draw a ruler.</p>
        <p>In automation mode the annotation framework uses this interface to display a dialog, 
            with the appropriate tabs, for annotation objects from classes that implement this interface.</p>
        <p> The following classes implement the IAnnRulerObject interface:</p>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnGroupObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnRulerObject" /> Class</description>
          </item>
        </list>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.RulerImplemented">
      <summary>
            Gets a value that indicates whether the annotation object's class implements the 
            IAnnRulerObject interface.  
            </summary>
      <value>true if the annotation object's class implements this interface, false otherwise.</value>
      <remarks>(Read only) This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include a ruler should 
            implement this property to always return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit">
      <summary>
            Gets or sets a value that represents the unit of measure for this ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this ruler.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" /> property value.
            </summary>
      <value>A string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" /> property value.</value>
      <remarks>
            The <b>UnitAbbreviation</b> member resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" /> property.  
            To get the default abbreviation string, call the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)" /> method.
            This property is used only if the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.TickMarksLength">
      <summary>
            Gets or sets the length of the tick marks for the ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the current tick marks for the ruler.</value>
      <remarks>
            To display the tick marks, set the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowTickMarks" /> property to true.   
            This property is used only if the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowTickMarks" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for the ruler are visible.
            </summary>
      <value>true if the tick marks are visible; false otherwise.</value>
      <remarks>
            To set the length of the tick marks, set the <see cref="P:Leadtools.Annotations.IAnnRulerObject.TickMarksLength" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the ruler) for the ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the gauge (the perpendicular lines at the ends of the ruler) for the ruler.</value>
      <remarks>
            To display the gauge, set the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowGauge" /> property to true.   
            This property is used only if the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowGauge" /> property is true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the ruler) for the ruler is visible.
            </summary>
      <value>true if the gauge (the perpendicular lines at the ends of the ruler) for the ruler is visible; false otherwise.</value>
      <remarks>
            To set the length of the gauge, set the <see cref="P:Leadtools.Annotations.IAnnRulerObject.GaugeLength" /> property.   
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.ShowLength">
      <summary>
            Gets or sets a value that indicates whether to display the length of the ruler.
            </summary>
      <value>true to show the length of the ruler; false otherwise.</value>
      <remarks>
            If this property is true, the <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" /> property
            contains the unit of measure for the ruler; the <see cref="P:Leadtools.Annotations.IAnnRulerObject.UnitAbbreviation" /> property
            contains the abbreviation for the unit of measure displayed with the length and the <see cref="P:Leadtools.Annotations.IAnnRulerObject.Precision" /> 
            property contains the number of digits to display to the right of the decimal point in the length.   
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.Precision">
      <summary>
            Gets or sets the number of digits to the right of the decimal point when displaying the 
            length of the ruler.
            </summary>
      <value>The number of digits to the right of the decimal point.</value>
      <remarks>
        <p>If the ruler length is 135.683 and the precision is 2, the value 135.68 will be displayed.</p>
        <p>This property is used only if the <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" /> 
            property is true.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.annRulerInternal">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.IAnnRulerObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the length text of this object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the length text to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>To show the length of a ruler, use <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" />.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this member to return an array of the current points in the poly ruler to be transformed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this member to copy the new transformed values back to the points.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolyRulerObject.GetPolyRulerLength(Leadtools.RasterCollection{Leadtools.Annotations.AnnPoint},Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Helper method to get the total length of a poly ruler.
            </summary>
      <param name="points">Poly ruler points.</param>
      <param name="measurementUnit">The desired measurement unit.</param>
      <param name="converter">Unit converter to use.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnLength" /> object that contains the total length of the poly ruler in the desired measurement units.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Annotations.AnnPolyRulerObject.GetPolyRulerLength(Leadtools.RasterCollection{Leadtools.Annotations.AnnPoint},Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnitConverter)" /> is a helper method that can be used to obtain the total length of a poly ruler object.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub GetPolyRulerLengthExample(ByVal container As AnnContainer, ByVal polyRuler As AnnPolyRulerObject)
         ' Get the total length in inches
         Dim totalLength As AnnLength = AnnPolyRulerObject.GetPolyRulerLength( _
            polyRuler.Points, _
            AnnUnit.Inch, _
            container.UnitConverter)
         MessageBox.Show("Total length is " + totalLength.ToString())
      End Sub</code>
        <code lang="CS">      private void GetPolyRulerLengthExample(AnnContainer container, AnnPolyRulerObject polyRuler)
      {
         // Get the total length in inches
         AnnLength totalLength = AnnPolyRulerObject.GetPolyRulerLength(
            polyRuler.Points,
            AnnUnit.Inch,
            container.UnitConverter);
         MessageBox.Show("Total length is " + totalLength.ToString());
      }</code>
        <!--AnnPolyRulerObject.GetPolyRulerLength-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.RulerImplemented">
      <summary>
            Gets a value that indicates whether this object's class implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  This is used internally by the annotation framework. Objects that implement this inteface should provide an implementation of this property that returns true.
            </summary>
      <value>This property will always return true for <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</value>
      <remarks>
            (Read only) For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.MeasurementUnit">
      <summary>
            Gets or sets the unit of measure for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnPolyRulerObject.MeasurementUnit" /> value.
            </summary>
      <value>A string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnPolyRulerObject.MeasurementUnit" /> value.</value>
      <remarks>
            The <b>UnitAbbreviation</b> property resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.AnnPolyRulerObject.MeasurementUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.AnnPolyRulerObject.MeasurementUnit" /> property.  
            The default abbreviation value is obtained by calling the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)" /> method.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.TickMarksLength">
      <summary>
            Gets or sets the length of the tick marks for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <noremarks />
      <value>A <see cref="T:Leadtools.Annotations.AnnLength" /> value that specifies the current length of the tick marks for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> are visible.
            </summary>
      <noremarks />
      <value>true if the tick marks for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> are visible; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> is visible.
            </summary>
      <noremarks />
      <value>true if the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> is visible; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.ShowLength">
      <summary>
            Enables or disables the display of text showing the length of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <noremarks />
      <value>true to display text showing the length of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.Precision">
      <summary>
            Gets or sets the precision value used for the length of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <value>The precision value used for the length of ruler.</value>
      <remarks>
            The precision value is the number of digits that should appear to the right of the floating point when showing this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> length.  For example, if the ruler length is 135.683 and the precision is 2, the value 135.68 will show.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that specifies how to transform this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> when any object transformation method is called.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  This and the <see cref="M:Leadtools.Annotations.AnnPolyRulerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnPolyRulerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that the ruler object physically transforms all the points that belong to this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.  This ensures correct values for the poly ruler length at all times.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />; false otherwise.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this member to return the logical bounding rectangle of the ruler.  This bounding rectangle contains all the rulers with the gauge and tick marks as well as the length text (if any is visible).<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.annRulerInternal">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnPolyRulerObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the text representing the length of this <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the text representing the length to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>To show the length of a ruler, use <see cref="P:Leadtools.Annotations.AnnPolyRulerObject.ShowLength" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCrossProductDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
        <para>
          <para>For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</para>
            This example initializes a new designer to draw cross-product objects</para>
        <code lang="VB">      Public Function AnnCrossProductDrawDesigner_AnnCrossProductDrawDesigner(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer) As AnnCrossProductDrawDesigner
         ' start a new cross-product draw designer
         Dim crossProductDrawDesigner As AnnCrossProductDrawDesigner = New AnnCrossProductDrawDesigner()

         ' set up the object template (the cross product)
         Dim crossProduct As AnnCrossProductObject = New AnnCrossProductObject()
         crossProduct.MeasurementUnit = AnnUnit.Inch
         crossProduct.TickMarksLength = New AnnLength(0.25F, AnnUnit.Inch)
         crossProduct.ShowTickMarks = True
         crossProduct.GaugeLength = New AnnLength(1.0F, AnnUnit.Inch)
         crossProduct.ShowGauge = True
         crossProduct.ShowLength = True
         crossProduct.Precision = 2

         ' initialize the rest of the designer
         crossProductDrawDesigner.ObjectTemplate = crossProduct
         crossProductDrawDesigner.Owner = viewer
         crossProductDrawDesigner.ClipCursor = True
         crossProductDrawDesigner.Container = container

         Return crossProductDrawDesigner
      End Function</code>
        <code lang="CS">      public AnnCrossProductDrawDesigner AnnCrossProductDrawDesigner_AnnCrossProductDrawDesigner(RasterImageViewer viewer, AnnContainer container)
      {
         // start a new cross-product draw designer
         AnnCrossProductDrawDesigner crossProductDrawDesigner = new AnnCrossProductDrawDesigner();

         // set up the object template (the cross product)
         AnnCrossProductObject crossProduct = new AnnCrossProductObject();
         crossProduct.MeasurementUnit = AnnUnit.Inch;
         crossProduct.TickMarksLength = new AnnLength(0.25F, AnnUnit.Inch);
         crossProduct.ShowTickMarks = true;
         crossProduct.GaugeLength = new AnnLength(1.0F, AnnUnit.Inch);
         crossProduct.ShowGauge = true;
         crossProduct.ShowLength = true;
         crossProduct.Precision = 2;

         // initialize the rest of the designer
         crossProductDrawDesigner.ObjectTemplate = crossProduct;
         crossProductDrawDesigner.Owner = viewer;
         crossProductDrawDesigner.ClipCursor = true;
         crossProductDrawDesigner.Container = container;

         return crossProductDrawDesigner;
      }</code>
        <!--AnnCrossProductDrawDesigner.AnnCrossProductDrawDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnCrossProductDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductDrawDesigner" />.
            </example>
      <document>yes</document>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnFixedStateOperations">
      <summary>
            Indicates the type of fixed width and font size state of the annotation object.
            </summary>
      <remarks>
        <para>This enumeration is used as value for the <see cref="P:Leadtools.Annotations.AnnObject.FixedState">AnnObject.FixedState</see> property. For more information on
            fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para>
        <para>You can combine members of this enumeration together using a logical or operation (| in C# or OR in Visual Basic).</para>
      </remarks>
      <seealso cref="P:Leadtools.Annotations.AnnObject.FixedState">AnnObject.FixedState</seealso>.
            <seealso cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)">AnnObject.SetFixedState</seealso>.
            <document>yes</document><example><para /><code lang="VB">      Public Sub AnnFixedStateOperationsExample(ByVal container As AnnContainer, ByVal viewer As RasterImageViewer, ByVal newVideoPicture As String)
         ' Create two text objects, one with fixed font and one without
         Dim textObject1 As New AnnTextObject()
         textObject1.Pen = New AnnPen(Color.Red, New AnnLength(1))
         textObject1.Text = "AnnFixedStateOperations.None"
         textObject1.FixedState = AnnFixedStateOperations.None
         textObject1.Brush = Nothing
         textObject1.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         textObject1.EdgeMargin = AnnLength.Empty
         textObject1.Alignment = StringAlignment.Center
         textObject1.LineAlignment = StringAlignment.Center
         textObject1.TextRotate = AnnTextRotate.Rotate0
         textObject1.Bounds = New AnnRectangle(100, 100, 100, 100)
         container.Objects.Add(textObject1)

         Dim textObject2 As AnnTextObject = CType(textObject1.Clone(), AnnTextObject)
         textObject2.Text = "AnnFixedStateOperations.FontSize"
         textObject2.FixedState = AnnFixedStateOperations.FontSize
         textObject2.Bounds = New AnnRectangle(400, 100, 100, 100)
         container.Objects.Add(textObject2)

         ' Create two line objects, one with fixed pen size and one without
         Dim lineObject1 As New AnnLineObject()
         lineObject1.Pen = New AnnPen(Color.Blue, New AnnLength(1))
         lineObject1.NameVisible = True
         lineObject1.NameOffset = AnnPoint.Empty
         lineObject1.NameForeColor = Color.White
         lineObject1.NameBackColor = Color.Blue
         lineObject1.NameFont = New AnnFont("Arial", New AnnLength(11, AnnUnit.Point), FontStyle.Regular)
         lineObject1.StartPoint = New AnnPoint(100, 400)
         lineObject1.EndPoint = New AnnPoint(100, 800)
         lineObject1.Name = "AnnFixedStateOperations.None"
         lineObject1.FixedState = AnnFixedStateOperations.None
         container.Objects.Add(lineObject1)

         Dim lineObject2 As AnnLineObject = CType(lineObject1.Clone(), AnnLineObject)
         lineObject2.StartPoint = New AnnPoint(400, 400)
         lineObject2.EndPoint = New AnnPoint(400, 800)
         lineObject2.Name = "AnnFixedStateOperations.PenWidth"
         lineObject2.FixedState = AnnFixedStateOperations.PenWidth
         container.Objects.Add(lineObject2)

         viewer.Invalidate()
      End Sub</code><code lang="CS">      public void AnnFixedStateOperationsExample(AnnContainer container, RasterImageViewer viewer, string newVideoPicture)
      {
         // Create two text objects, one with fixed font and one without
         AnnTextObject textObject1 = new AnnTextObject();
         textObject1.Pen = new AnnPen(Color.Red, new AnnLength(1));
         textObject1.Text = "AnnFixedStateOperations.None";
         textObject1.FixedState = AnnFixedStateOperations.None;
         textObject1.Brush = null;
         textObject1.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         textObject1.EdgeMargin = AnnLength.Empty;
         textObject1.Alignment = StringAlignment.Center;
         textObject1.LineAlignment = StringAlignment.Center;
         textObject1.TextRotate = AnnTextRotate.Rotate0;
         textObject1.Bounds = new AnnRectangle(100, 100, 100, 100);
         container.Objects.Add(textObject1);

         AnnTextObject textObject2 = textObject1.Clone() as AnnTextObject;
         textObject2.Text = "AnnFixedStateOperations.FontSize";
         textObject2.FixedState = AnnFixedStateOperations.FontSize;
         textObject2.Bounds = new AnnRectangle(400, 100, 100, 100);
         container.Objects.Add(textObject2);

         // Create two line objects, one with fixed pen size and one without
         AnnLineObject lineObject1 = new AnnLineObject();
         lineObject1.Pen = new AnnPen(Color.Blue, new AnnLength(1));
         lineObject1.NameVisible = true;
         lineObject1.NameOffset = AnnPoint.Empty;
         lineObject1.NameForeColor = Color.White;
         lineObject1.NameBackColor = Color.Blue;
         lineObject1.NameFont = new AnnFont("Arial", new AnnLength(11, AnnUnit.Point), FontStyle.Regular);
         lineObject1.StartPoint = new AnnPoint(100, 400);
         lineObject1.EndPoint = new AnnPoint(100, 800);
         lineObject1.Name = "AnnFixedStateOperations.None";
         lineObject1.FixedState = AnnFixedStateOperations.None;
         container.Objects.Add(lineObject1);

         AnnLineObject lineObject2 = lineObject1.Clone() as AnnLineObject;
         lineObject2.StartPoint = new AnnPoint(400, 400);
         lineObject2.EndPoint = new AnnPoint(400, 800);
         lineObject2.Name = "AnnFixedStateOperations.PenWidth";
         lineObject2.FixedState = AnnFixedStateOperations.PenWidth;
         container.Objects.Add(lineObject2);

         viewer.Invalidate();
      }</code><!--AnnFixedStateOperations--></example></member>
    <member name="F:Leadtools.Annotations.AnnFixedStateOperations.None">
      <summary>
        <para>Annotation object is not fixed.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnFixedStateOperations.FontSize">
      <summary>
        <para>Fix the font size of the annotation object. Any text that is part of this object will be drawn using its original point value regardless of the
            current container scale value.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnFixedStateOperations.PenWidth">
      <summary>
        <para>Fix the pen size of the annotation object. Any line that is part of this object will be drawn using its original pixel size regardless of the
            current container scale value.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnGetGraphicsPathMode">
      <summary>
            Indicates which type of graphics path to return. Used with the <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> method. 
            </summary>
      <noremarks />
      <example>
            For more information and an example, refer to <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see>.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnGetGraphicsPathMode.DrawObject">
      <summary>
        <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> is called to draw the object.  An <see cref="T:Leadtools.Annotations.AnnObject" /> derived object should return the path as it is to be displayed on the screen.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnGetGraphicsPathMode.HitTest">
      <summary>
        <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> is called to perform hit-testing on the object.  An <see cref="T:Leadtools.Annotations.AnnObject" /> derived object can optimize the path returned to speed up hit-testing.  For example, an object that has text in it can return a path that contains the bounding rectangle of this text instead of the vectorized text.  This will greatly enhance the performance of the hit-testing operation.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnGetGraphicsPathMode.Bound">
      <summary>
        <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> is called to determine the bounding rectangle of the object.  An <see cref="T:Leadtools.Annotations.AnnObject" /> derived object can optimize the path returned to speed up calculating the bounding rectangle.  For example, an object that has text in it can return a path that contains the bounding rectangle of this text instead of the vectorized text to greatly enhance the performance.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnGetGraphicsPathMode.RunMode">
      <summary>
        <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> is called when the object is drawn in run mode.  An <see cref="T:Leadtools.Annotations.AnnObject" /> derived object can use this mode to draw the object in a special way during run mode.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnGetGraphicsPathMode.BackgroundBrush">
      <summary>
        <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" /> is called when the background of the object is being drawnmode.  An <see cref="T:Leadtools.Annotations.AnnObject" /> derived object can use this mode to draw the background of the object in a special way.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnTransformObjectMode">
      <summary>
            Used with <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> to determine how to transform the object when any of the object transformation methods (<see cref="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)" />, <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" /> and <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" />) is called.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectMode.Auto">
      <summary>
            Use the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix.  This is the default mode used by most objects.  Objects that have their <see cref="P:Leadtools.Annotations.AnnObject.TransformObjectMode" /> property set to <b>Auto</b> will support all transformations.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectMode.Points">
      <summary>
            Do not use the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix.  This is used by some objects that do not support all transformation operations.  For example, the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> does not support rotation, so it uses this mode to directly transform its bounding points.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectMode.PointsAndRotate">
      <summary>
        <para>This is similar to <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Auto</see>, 
            but the rotate control points (<see cref="P:Leadtools.Annotations.AnnObject.RotateGripper" /> and
            <see cref="P:Leadtools.Annotations.AnnObject.RotateCenter" /> are also transformed by the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> matrix.
            This mode is used by ruler objects (<see cref="T:Leadtools.Annotations.AnnRulerObject" />, <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />, 
            <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />, and <see cref="T:Leadtools.Annotations.AnnProtractorObject" />).</para>
        <para>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnTransformObjectOperation">
      <summary>
            Used with <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods to determine what transformation operation is to be performed on the points.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectOperation.Translate">
      <summary>
            The <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> or <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method is called as a result of calling <see cref="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)" /> method.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectOperation.Scale">
      <summary>
            The <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> or <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method is called as a result of calling <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" /> method.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTransformObjectOperation.Rotate">
      <summary>
            The <see cref="M:Leadtools.Annotations.AnnObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> or <see cref="M:Leadtools.Annotations.AnnObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method is called as a result of calling <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" /> method.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnButtonObject">
      <summary>
            Defines an annotation push button object.
            </summary>
      <remarks>
            The push button annotation object is an image of a standard Windows button that can be activated.
            <p>The <b>AnnButtonObject</b> class inherits the the <see cref="T:Leadtools.Annotations.AnnTextObject" /> 
            class, which implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> 
            interface. For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Objects.</see></p><para>
            For more information about the button annotation object refer to 
            <see cref="T:AN.Topics.AnnButtonObject">AnnButtonObject</see>. 
            For more information about the automated annotation button object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para></remarks>
      <example>
        <para>This example creates a new button object located at (100, 200) and with dimensions 400 X 600 pixels.</para>
        <code lang="VB">      Private Sub AnnButtonObject_AnnButtonObject(ByVal container As AnnContainer, ByVal textString As String)
         Dim button As AnnButtonObject = New AnnButtonObject()
         button.Text = textString
         button.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         button.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         button.Pushed = False
         container.Objects.Add(button)
      End Sub</code>
        <code lang="CS">      private void AnnButtonObject_AnnButtonObject(AnnContainer container, string textString)
      {
         AnnButtonObject button = new AnnButtonObject();
         button.Text = textString;
         button.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         button.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         button.Pushed = false;
         container.Objects.Add(button);
      }</code>
        <!--AnnButtonObject.AnnButtonObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; false otherwise.</param>
      <param name="supportsBrush">true if this object will support a brush; false otherwise.</param>
      <param name="supportsFont">true if this object will support a font; false otherwise.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnButtonObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnButtonObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnButtonObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnButtonObject.Pushed">
      <summary>
            Gets or sets the state of this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object.
            </summary>
      <noremarks />
      <value>true if this <see cref="T:Leadtools.Annotations.AnnButtonObject" /> object is in the pushed state; false otherwise.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnButtonObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnEllipseControlPoint">
      <summary>
            Represents an ellipse shaped <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRectangleControlPoint">
      <summary>
            Represents a rectangular <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.Create">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnControlPoint.Create" />.
            </summary>
      <noremarks />
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.Clone">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnControlPoint.Clone" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)" />.
            </summary>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</returns>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)" />. 
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangleControlPoint.Size">
      <summary>
            Gets or sets a value specifying the size of this <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" />.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnSize" /> value specifying the size of this <see cref="T:Leadtools.Annotations.AnnRectangleControlPoint" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnEllipseControlPoint" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.Create">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnRectangleControlPoint.Create" />.
            </summary>
      <noremarks />
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.Clone">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnRectangleControlPoint.Clone" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnRectangleControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)" />.
            </summary>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</returns>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnControlPoint.GetGraphicsPath(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)" />. 
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnTextObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
        <para>
          <para>For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</para>
            This example initializes a new designer to draw text objects.</para>
        <code lang="VB">      Public Function AnnTextDrawDesigner_AnnTextDrawDesigner(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer) As AnnTextDrawDesigner
         ' start a new text draw designer
         Dim textDrawDesigner As AnnTextDrawDesigner = New AnnTextDrawDesigner()
         ' set up the object template (the text object)
         Dim textObject As AnnTextObject = New AnnTextObject()
         textObject.Pen = Nothing
         textObject.Brush = Nothing
         textObject.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         textObject.EdgeMargin = AnnLength.Empty
         textObject.Alignment = StringAlignment.Center
         textObject.LineAlignment = StringAlignment.Center

         ' set up the default text to be used
         textDrawDesigner.DefaultText = "Leadtools"

         ' initialize the rest of the designer
         textDrawDesigner.ObjectTemplate = textObject
         textDrawDesigner.Owner = viewer
         textDrawDesigner.ClipCursor = True
         textDrawDesigner.Container = container

         Return textDrawDesigner
      End Function</code>
        <code lang="CS">      public AnnTextDrawDesigner AnnTextDrawDesigner_AnnTextDrawDesigner(RasterImageViewer viewer, AnnContainer container)
      {
         // start a new text draw designer
         AnnTextDrawDesigner textDrawDesigner = new AnnTextDrawDesigner();
         // set up the object template (the text object)
         AnnTextObject textObject = new AnnTextObject();
         textObject.Pen = null;
         textObject.Brush = null;
         textObject.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         textObject.EdgeMargin = AnnLength.Empty;
         textObject.Alignment = StringAlignment.Center;
         textObject.LineAlignment = StringAlignment.Center;

         // set up the default text to be used
         textDrawDesigner.DefaultText = "Leadtools";

         // initialize the rest of the designer
         textDrawDesigner.ObjectTemplate = textObject;
         textDrawDesigner.Owner = viewer;
         textDrawDesigner.ClipCursor = true;
         textDrawDesigner.Container = container;

         return textDrawDesigner;
      }</code>
        <!--AnnTextDrawDesigner.AnnTextDrawDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRectangleDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnRectangleDrawDesigner</b> class to draw an <see cref="T:Leadtools.Annotations.AnnRectangleObject" /> or any other object that derives from it.  For example, this designer is used to draw <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> objects as well.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangleDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextDrawDesigner.StartWorking(Leadtools.Annotations.AnnObject)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.StartWorking(Leadtools.Annotations.AnnObject)" />.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> that will be drawn.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextDrawDesigner.EndWorking">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.EndWorking" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextDrawDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextDrawDesigner.DefaultText">
      <summary>
            Gets or sets the default text to be used with new <see cref="T:Leadtools.Annotations.AnnTextObject" /> objects.
            </summary>
      <noremarks />
      <value>A String that represents the default text.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextDrawDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnObjectChangedType">
      <summary>
            Indicates the type of change to the <see cref="T:Leadtools.Annotations.AnnObject" /></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" /> or <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.None">
      <summary>
            No change
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.BringToFront">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.BringToFront(System.Boolean)" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.SendToBack">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.SendToBack(System.Boolean)" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Delete">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Lock">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Lock" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Unlock">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Unlock" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Paste">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Paste" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Flip">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Flip(System.Boolean)" /> method manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.RealizeRedaction">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" /> methods manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.RestoreRedaction">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.RestoreAllRedactions" /> methods manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.ApplyEncryptor">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" /> methods manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.ApplyDecryptor">
      <summary>
            As a result from either calling the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyDecryptor" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllDecryptors" /> methods manually or from the user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Name">
      <summary>
            As a result from changing the <see cref="T:Leadtools.Annotations.AnnObject" /> Name properties from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Hyperlink">
      <summary>
            As a result from changing the <see cref="T:Leadtools.Annotations.AnnObject" />.<see cref="P:Leadtools.Annotations.AnnObject.Hyperlink" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Text">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.IAnnTextObject" /> derived object property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Picture">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> derived object property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Pictures">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject" /> derived object property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Ruler">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> derived object property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Pen">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnDrawable" /> derived object <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Brush">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnDrawable" /> derived object <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Font">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnDrawable" /> derived object <see cref="P:Leadtools.Annotations.AnnDrawable.Font" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Encrypt">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Polygon">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> or <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Curve">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnCurveObject" /> or <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Protractor">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.RubberStamp">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Point">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnPointObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Audio">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.ControlPoints">
      <summary>
            As a result from changing the control points and gap properties from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Hilite">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.DesignerDraw">
      <summary>
            As a result from the user interface drawing a new object via the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.DesignerEdit">
      <summary>
            As a result from the user interface editing an existing object via the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.ResetRotatePoints">
      <summary>
        <para>As a result from  resetting the rotate control points of an existing object via the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> user interface.</para>
        <para>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Fixed">
      <summary>
            As a result from changing the 'fixed' state of an existing object via the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> user interface.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnObjectChangedType.Video">
      <summary>
            As a result from changing an <see cref="T:Leadtools.Annotations.AnnVideoObject" /> property from the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> user interface.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" /> event.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.#ctor(Leadtools.RasterCollection{Leadtools.Annotations.AnnObject},Leadtools.Annotations.AnnObjectChangedType,Leadtools.Annotations.AnnDesigner)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs" /> class.
            </summary>
      <param name="objects">An <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> that has a collection of the objects that is about to be changed.</param>
      <param name="changeType">An <see cref="T:Leadtools.Annotations.AnnObjectChangedType" /> value specifying what is to be changed.</param>
      <param name="designer">The <see cref="T:Leadtools.Annotations.AnnDesigner" /> object responsible for the change.</param>
      <remarks>
            The <i>designer</i> should be null (Nothing in Visual Basic) unless the <i>changeType</i> is <b>AnnObjectChangedType.DesignerDraw</b> or <b>AnnObjectChangedType.DesignerEdit</b>.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.Objects">
      <summary>
            Gets the objects that have been changed.
            </summary>
      <value>A <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> that has a collection of the objects that has been changed.</value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.ChangeType">
      <summary>
            Gets the type of change.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObjectChangedType" /> value specifying what is to be changed.</value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.Designer">
      <summary>
            Gets the designer responsible for the change.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnDesigner" /> responsible for the change.</value>
      <remarks>
            (Read only) This value is null (Nothing in Visual Basic) unless <see cref="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.ChangeType" /> is <b>AnnObjectChangedType.DesignerDraw</b> or <b>AnnObjectChangedType.DesignerEdit</b></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the change should be canceled.
            </summary>
      <value>true if the change should be canceled; otherwise, false.</value>
      <remarks>
            You should set this property to true to cancel the <see cref="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.ChangeType" /> operation to the objects in <see cref="P:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs.Objects" />.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnAfterObjectChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" /> event.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAfterObjectChangedEventArgs.#ctor(Leadtools.RasterCollection{Leadtools.Annotations.AnnObject},Leadtools.Annotations.AnnObjectChangedType,Leadtools.Annotations.AnnDesigner)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnAfterObjectChangedEventArgs" /> class.
            </summary>
      <param name="objects">An <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> that has a collection of the objects that has been changed.</param>
      <param name="changeType">An <see cref="T:Leadtools.Annotations.AnnObjectChangedType" /> value specifying what has changed.</param>
      <param name="designer">The <see cref="T:Leadtools.Annotations.AnnDesigner" /> responsible for the change.</param>
      <remarks>
            The <i>designer</i> should be null (Nothing in Visual Basic) unless the <i>changeType</i> is <b>AnnObjectChangedType.DesignerDraw</b> or <b>AnnObjectChangedType.DesignerEdit</b>.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAfterObjectChangedEventArgs.Objects">
      <summary>
            Gets the objects that have been changed.
            </summary>
      <value>An <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> that has a collection of the objects that has been changed.</value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAfterObjectChangedEventArgs.ChangeType">
      <summary>
            Gets the type of change.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObjectChangedType" /> value specifying what has changed.</value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAfterObjectChangedEventArgs.Designer">
      <summary>
            Gets the designer responsible for the change.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnDesigner" /> responsible for the change.</value>
      <remarks>
            (Read only) This value is null (Nothing in Visual Basic) unless <see cref="P:Leadtools.Annotations.AnnAfterObjectChangedEventArgs.ChangeType" /> is <b>AnnObjectChangedType.DesignerDraw</b> or <b>AnnObjectChangedType.DesignerEdit</b></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnAutomationControl">
      <summary>
             Support for user controls with the LEADTOOLS Annotation Automation.
             </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> lets you easily use any control you choose with LEADTOOLS Annotation Automation. By default,
             the automation framework provides supports for using a LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control as the surface where the automation is used.
             This is accomplished by creating the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object using the
             <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">AnnAutomation(AnnAutomationManager, RasterImageViewer)</see> method and optionally,
             using <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)">AnnAutomation.AttachViewer</see> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer">AnnAutomation.DetachViewer</see>.
             </para>
        <para>To perform automation, the toolkit must interact with the control in different ways, for example, obtain information about the control size and
             resolution, subscribe to the various mouse and keyboard events for user-interface integration, invalidate all or portions of the control surface
             for re-painting to draw the annotation objects and translate values between annotation and client coordinates.</para>
        <para>When the above mode is used, LEADTOOLS will create an internal helper class that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> and provides
             translation between the methods/properties/events of the interface and those of <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</para>
        <para>To instead use automation on your own custom control, you must create a class that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> and pass an
             instance of this class to
             <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation(AnnAutomationManager, IAnnAutomationControl)</see> and optionally
             to <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation.Attach</see> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach">AnnAutomation.Detach</see> if more advantage
             functionality is required.</para>
        <para>
          <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> is designed so that you can easily use it to create an automation control from a class derived from the
             standard <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> class. The names of the methods/properties/events are such that
             in alot of cases, you do not need to provide an impelementation to them, instead, they will be wired in automatically as described in the table below.
             The other members that are not usually defined by <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> have the prefex "Automation"
             in their names to easily destinguish them from the standard members.</para>
        <para>To use <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />, you must implement all of the following members:</para>
        <table>
          <tr>
            <th>Member</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>
              <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationControl">IAnnAutomationControl.AutomationControl</see>
            </td>
            <td>
                      (Read only) The <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> to use for automation. This value cannot
                      be a null reference (Nothing in Visual Basic). The automation object will use this value to add/remove child controls, invalidate its surface and use
                      it many other ways.
                  </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled">IAnnAutomationControl.AutomationEnabled</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) Value that indicates whether the automation is enabled. When the value of this property is <strong>true</strong>, automation is enabled and
             when the user clicks and drags with the mouse or press keys on the keyboard, the automation object will process these events and perform the necessary
             actions (such as drawing new annotations objects or moving existing ones). If the value of this property is <strong>false</strong>, automation is
             disabled and the automation object will not process these events. You can use this property to easily enable/disable automation on this object
             from your user interface. If you decide to always enable automation, simply return <strong>true</strong>. You must trigger the
             <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabledChanged">IAnnAutomationControl.AutomationEnabledChanged</see> event when the value
             of this property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabledChanged">IAnnAutomationControl.AutomationEnabledChanged</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled" /> is changed.
             If your implementation does require enabling/disabling the automation, then you do not have to trigger this event from your code. When this event
             triggers, the automation object will query the <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled">IAnnAutomationControl.AutomationEnabled</see>
             property and consequently starts or stops hooking the mouse and keyboard events.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">IAnnAutomationControl.AutomationRasterImage</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The <see cref="T:Leadtools.RasterImage" /> instance this automation will use when the user performs actions that will change the image being
             annotated. This is only used when the following methods are called: <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)">AnnEncryptObject.Apply</see>, 
             <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)">AnnRedactionObject.Realize</see> and <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)">AnnRedactionObject.Restore</see>. If you
             do not need to support these methods (By not supported encrypt and redaction objects, for example if you are implementing a system where only rectangles,
             rulers, images, audio and other objects like that are supported), then you can safely return a null reference (Nothing in Visual Basic) from your
             implementation of <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth">IAnnAutomationControl.AutomationImageWidth</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The width of the image being annotated in pixels. Usually you will return the width of the image you are using in
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.ImageWidth">RasterImage.ImageWidth</see>), however, since you do not need to implement
             that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth" />
             to return the image width in pixels. In this case, the width of the virtual image you will be using in automation. You must trigger
             the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
             property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight">IAnnAutomationControl.AutomationImageHeight</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The height of the image being annotated in pixels. Usually you will return the height of the image you are using in
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.ImageHeight">RasterImage.ImageHeight</see>), however, since you do not need to implement
             that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight" />
             to return the image height in pixels. In this case, the height of the virtual image you will be using in automation. You must trigger
             the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
             property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX">IAnnAutomationControl.AutomationImageDpiX</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The horizontal resolution of the image being annotated in dots per inch. Usually you will return the resolution of the image you are using in
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see>), however, since you do not need to implement
             that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX" />
             to return the resolution in dots per inch. In this case, the resolution of the virtual image you will be using in automation or simply 0 to use
             the current screen resolution. You must trigger
             the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
             property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY">IAnnAutomationControl.AutomationImageDpiY</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The vertical resolution of the image being annotated in dots per inch. Usually you will return the resolution of the image you are using in
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see>), however, since you do not need to implement
             that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY" />
             to return the resolution in dots per inch. In this case, the resolution of the virtual image you will be using in automation or simply 0 to use
             the current screen resolution. You must trigger
             the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
             property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the properties of the image being automated is changed. If you are using
             a <see cref="T:Leadtools.RasterImage" /> object, then you trigger this event whenever the <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see> event occures.
             Note that this event should occur when the image physical properties has changed, for example, its width/height or resolution or when a new image
             is set in your control (if supported) and not when the pixel data of the image has changed which only requires a re-paint. For these changes, use
             the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">IAnnAutomationControl.AutomationPaint</see> event. If your requirement does not have an image
             that will be changed while being automated, then you do not have to trigger this event. When this event triggers, the automation object will query
             the <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth">IAnnAutomationControl.AutomationImageWidth</see>,
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight">IAnnAutomationControl.AutomationImageHeight</see><see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX">IAnnAutomationControl.AutomationImageDpiX</see> and
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY">IAnnAutomationControl.AutomationImageDpiY</see> properties to recalculate the size of the container.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpi">IAnnAutomationControl.AutomationUseDpi</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) a value indicating whether the automation object should pay consideration to the image and control resolution when drawing annotation objects. The automation
             uses the resolution when translation values to pixels, for example, when calculating point size of a font. Also, objects such as rulres will use the
             resolution to correctly display the value in device independant coordinates such as inches and millimeters. If the value of this property is
             <strong>true</strong>, then the automation will use <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX" />, <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY" />,
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiX" /> and <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiY" /> to when calculating these values and ensure
             the result value on screen is accurate. If the value of this property is <strong>false</strong>, then the automation will not use any of these values
             and the calculations will be done using a default value of 96 dots per inch. You must trigger the
             <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpiChanged">IAnnAutomationControl.AutomationUseDpiChanged</see> event when the value of this property is
             changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpiChanged">IAnnAutomationControl.AutomationUseDpiChanged</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpi">IAnnAutomationControl.AutomationUseDpi</see> is changed. When this event triggers, the automation
             object will query this property to re-calculate the values needed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiX">IAnnAutomationControl.AutomationDpiX</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The horizontal resolution of the control being annotated in dots per inch. Usually you will return the resolution of the control you are using in
             <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> by obtaining it in a standard way in Windows.Forms. For example, using
             <see cref="M:System.Windows.Forms.Control.CreateGraphics">System.Windows.Forms.Control.CreateGraphics</see> and returning
             <see cref="P:System.Drawing.Graphics.DpiX">Graphics.DpiX</see> of the result object or simply 0 to use the current screen resolution.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiY">IAnnAutomationControl.AutomationDpiY</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) The vertical resolution of the control being annotated in dots per inch. Usually you will return the resolution of the control you are using in
             <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> by obtaining it in a standard way in Windows.Forms. For example, using
             <see cref="M:System.Windows.Forms.Control.CreateGraphics">System.Windows.Forms.Control.CreateGraphics</see> and returning
             <see cref="P:System.Drawing.Graphics.DpiY">Graphics.DpiY</see> of the result object or simply 0 to use the current screen resolution.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationTransform">IAnnAutomationControl.AutomationTransform</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) A <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that represents the current transformation for the annotations objects. This value cannot be a null
             reference (Nothing in Visual Basic) and the object returned will be owned by the automation object and will be disposed internally when it is
             no longer needed. You must set this matrix with the current scroll and zoom values of your control and set up your application to either create or
             return a new instance of this matrix on demand whenever this property is called. For more explanation, refer to the example source code of this
             class. If you will not support scrolling or zooming in your application, then simply return an identity matrix (a new <see cref="T:System.Drawing.Drawing2D.Matrix" /> object).
             You must trigger the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see> when
             the value of this property is changed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of
             <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationTransform">IAnnAutomationControl.AutomationTransform</see> is changed - that is, when your control is
             scrolled or zoomed in or out. When this event is triggered, the automation control will query the value of this property and might re-paint
             the annotations objects. Notice that you must trigger this event with the size of the control is changed so the automation object will use the new value
             of <see cref="P:Leadtools.Annotations.IAnnAutomationControl.ClientRectangle">IAnnAutomationControl.ClientRectangle</see>.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">IAnnAutomationControl.AutomationPaint</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.Windows.Forms.PaintEventArgs" /> that must trigger whenever the surface of the control is invalidated. The automation control will then
             automatically use the values of the event arguments to draw the annotations objects. In most cases, you simply have to trigger this event in your
             control <see cref="E:System.Windows.Forms.Control.Paint">System.Windows.Forms.Control.Paint</see> event or 
             <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">System.Windows.Forms.Control.OnPaint</see> method and pass the same arguments (of type
             <see cref="T:System.Windows.Forms.PaintEventArgs" />) to <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">IAnnAutomationControl.AutomationPaint</see>.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.AutomationAttach">IAnnAutomationControl.AutomationAttach</see>
              </para>
            </td>
            <td>
              <para>
             A method that will be called whenever <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation.Attach</see> is called. You can add code to this
             method to handle any necessary code needed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.AutomationDetach">IAnnAutomationControl.AutomationDetach</see>
              </para>
            </td>
            <td>
              <para>
             A method that will be called whenever <see cref="M:Leadtools.Annotations.AnnAutomation.Detach">AnnAutomation.Detach</see> is called. You can add code to this
             method to handle any necessary code needed.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.Invalidate(System.Drawing.Rectangle)">IAnnAutomationControl.Invalidate</see>
              </para>
            </td>
            <td>
              <para>
             A mathod that will be called when the automation needs to re-paint the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
             the default <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">System.Windows.Forms.Control.Invalidate</see> will be used). If you have custom implementation, then simply invalidate your control surface when
             this method is called.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.PointToClient(System.Drawing.Point)">IAnnAutomationControl.PointToClient</see>
              </para>
            </td>
            <td>
              <para>
             A method that will be called when the automation needs to transform a point from screen to client coordinates. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
             the default <see cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">System.Windows.Forms.Control.PointToClient</see> will be used).
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.PointToScreen(System.Drawing.Point)">IAnnAutomationControl.PointToScreen</see>
              </para>
            </td>
            <td>
              <para>
             A method that will be called when the automation needs to transform a point from client to screen bcoordinates. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
             the default <see cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">System.Windows.Forms.Control.PointToScreen</see> will be used).
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="M:Leadtools.Annotations.IAnnAutomationControl.RectangleToScreen(System.Drawing.Rectangle)">IAnnAutomationControl.RectangleToScreen</see>
              </para>
            </td>
            <td>
              <para>
             A method that will be called when the automation needs to transform a rectangle from client to screen bcoordinates. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
             the default <see cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">System.Windows.Forms.Control.RectangleToScreen</see> will be used).
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.ClientRectangle">IAnnAutomationControl.ClientRectangle</see>
              </para>
            </td>
            <td>
              <para>
             (Read only) A rectangle that represents the client area of the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this property (since
             the default <see cref="P:System.Windows.Forms.Control.ClientRectangle">System.Windows.Forms.Control.ClientRectangle</see> will be used). However,
             you must trigger the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see> event with the value
             of the client rectangle is changed, in most cases, by calling <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see>
             from your <see cref="E:System.Windows.Forms.Control.SizeChanged">System.Windows.Forms.Control.SizeChanged</see> event or
             <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">System.Windows.Forms.Control.OnSizeChanged</see> method.
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="P:Leadtools.Annotations.IAnnAutomationControl.Cursor">IAnnAutomationControl.Cursor</see>
              </para>
            </td>
            <td>
              <para>
             Gets or sets the cursor to be used in the control. The automation will use many different cursors depending on current operation (drawing new annotations,
             moving existing annotations, etc). If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this property (since
             the default <see cref="P:System.Windows.Forms.Control.Cursor">System.Windows.Forms.Control.Cursor</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.MouseDown">IAnnAutomationControl.MouseDown</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is pressed on the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.MouseDown">System.Windows.Forms.Control.MouseDown</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.MouseMove">IAnnAutomationControl.MouseMove</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is moved on the surface of the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.MouseMove">System.Windows.Forms.Control.MouseMove</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.MouseUp">IAnnAutomationControl.MouseUp</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is depressed on the surface of the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.MouseUp">System.Windows.Forms.Control.MouseUp</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.DoubleClick">IAnnAutomationControl.DoubleClick</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger when the mouse is double clicked on the surface of the control. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.DoubleClick">System.Windows.Forms.Control.DoubleClick</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.KeyDown">IAnnAutomationControl.KeyDown</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.Windows.Forms.KeyEventHandler" /> that must trigger when a key is pressed when your control has focus. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.KeyDown">System.Windows.Forms.Control.KeyDown</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.GotFocus">IAnnAutomationControl.GotFocus</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger when your control receives the focus. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.GotFocus">System.Windows.Forms.Control.GotFocus</see> will be used)
             </para>
            </td>
          </tr>
          <tr>
            <td>
              <para>
                <see cref="E:Leadtools.Annotations.IAnnAutomationControl.LostFocus">IAnnAutomationControl.LostFocus</see>
              </para>
            </td>
            <td>
              <para>
             An event of type <see cref="T:System.EventHandler" /> that must trigger when your control loses the focus. If your control is derived from the standard
             <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
             the default <see cref="E:System.Windows.Forms.Control.LostFocus">System.Windows.Forms.Control.LostFocus</see> will be used)
             </para>
            </td>
          </tr>
        </table>
      </remarks>
      <example>
        <para>
          <para>This example will use <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> to use LEADTOOLS Annotations Automation on a custom control
             that uses standard <see cref="T:System.Drawing.Image">System.Drawing.Image</see> with scrolling and zooming.</para>
        </para>
        <code lang="VB">   ' Our custom image viewer. It can view a System.Drawing.Image with
   ' the following options:
   ' 1. Scrolling
   ' 2. Zoom in/out
   ' 3. Let the user draw annotation objects on the image surface using
   '   LEADTOOLS annotations in automation mode
   Public Class MyImageViewer
      Inherits ScrollableControl
      Implements IAnnAutomationControl
      ' The LEADTOOLS automation manager object
      Private _automationManager As AnnAutomationManager
      ' The LEADTOOLS automation object for this control
      Private _automation As AnnAutomation
      ' The image we are viewing
      Private _image As Image
      ' Scale factor (for zooming)
      Private _scaleFactor As Single = 100.0F

      Public Sub New()
         ' Enable double buffering for smooth paint
         SetStyle( _
            ControlStyles.AllPaintingInWmPaint Or _
            ControlStyles.UserPaint Or _
            ControlStyles.ResizeRedraw Or _
            ControlStyles.UserPaint Or _
            ControlStyles.DoubleBuffer, True)

         ' Initialize LEADTOOLS annotations automation
         ' Default everything
         _automationManager = New AnnAutomationManager()
         _automationManager.RedactionRealizePassword = ""
         _automationManager.UseXPStyleToolBar = True
         _automationManager.CreateDefaultObjects()
         _automationManager.CreateToolBar()
         _automationManager.ToolBar.Dock = DockStyle.Right
         _automationManager.ToolBar.BringToFront()
         _automationManager.ToolBar.AutoSize = False
         _automationManager.ToolBar.Appearance = ToolBarAppearance.Flat

         ' Create the automation object for this viewer
         _automation = New AnnAutomation(_automationManager, Me)
         ' We are the only and only active automation in this demo
         _automation.Active = True
         ' Add it to the automation manager
         _automationManager.Automations.Add(_automation)
      End Sub

      Protected Overrides Sub Dispose(ByVal disposing As Boolean)
         If disposing Then
            ' Clean up
            If Not _automation Is Nothing Then
               _automation.Dispose()
            End If

            If Not _automationManager Is Nothing Then
               _automationManager.Dispose()
            End If

            If Not _image Is Nothing Then
               _image.Dispose()
            End If
         End If

         MyBase.Dispose(disposing)
      End Sub

      ' Access to the annotations toolbar
      &lt;Browsable(False)&gt; _
      Public ReadOnly Property AutomationToolbar() As ToolBar
         Get
            Return _automationManager.ToolBar
         End Get
      End Property

      ' The image to view
      &lt;Description("The image to view"), Category("Appearance"), DefaultValue(CType(Nothing, Image))&gt; _
      Public Property Image() As Image
         Get
            Return _image
         End Get
         Set(ByVal value As Image)
            If Not _image Is value Then
               If Not _image Is Nothing Then
                  _image.Dispose()
               End If

               _image = value

               ' Re-set the scale factor
               _scaleFactor = 100.0F
               ' Re-calculate scrollbar sizes
               RecalculateScrollbars()
               ' Inform automation that the image has changed
               RaiseEvent AutomationImageChanged(Me, EventArgs.Empty)
               ' Re-paint
               Invalidate()
            End If
         End Set
      End Property

      ' Scale factor (zooming)
      &lt;Description("Scale factor used for zooming."), Category("Appearance"), DefaultValue(100.0F)&gt; _
      Public Property ScaleFactor() As Single
         Get
            Return _scaleFactor
         End Get
         Set(ByVal value As Single)
            If _scaleFactor &lt;&gt; value Then
               If _scaleFactor &lt;= 0 Then Throw New ArgumentOutOfRangeException("ScaleFactor", "Must be a value greater than zero")

               _scaleFactor = value

               ' Re-calculate scrollbar sizes
               RecalculateScrollbars()
               ' Inform automation that transformation has changed
               RaiseEvent AutomationTransformChanged(Me, Nothing)
               ' Re-paint
               Invalidate()
            End If
         End Set
      End Property

      ' Calculate the scrollbar sizes
      Private Sub RecalculateScrollbars()
         Dim scrollSize As SizeF

         If Not _image Is Nothing Then
            Dim scale As Single = _scaleFactor / 100.0F
            scrollSize = New SizeF(_image.Width * scale, _image.Height * scale)
         Else
            scrollSize = SizeF.Empty
         End If

         AutoScrollMargin = Size
         AutoScrollMinSize = New Size(CType(scrollSize.Width + 0.5F, Integer), CType(scrollSize.Height + 0.5F, Integer))
      End Sub

      Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
         If Not _image Is Nothing Then
            ' Paint the image
            Dim graphics As Graphics = e.Graphics
            Dim x As Single = AutoScrollPosition.X
            Dim y As Single = AutoScrollPosition.Y
            Dim width As Single = _image.Width * _scaleFactor / 100.0F
            Dim height As Single = _image.Height * _scaleFactor / 100.0F
            graphics.DrawImage(_image, x, y, width, height)

            ' Paint annotations
            RaiseEvent AutomationPaint(Me, e)
         End If
         MyBase.OnPaint(e)
      End Sub

      Const WM_HSCROLL As Integer = &amp;H114
      Const WM_VSCROLL As Integer = &amp;H115
      Const WM_MOUSEWHEEL As Integer = &amp;H20A

      Protected Overrides Sub WndProc(ByRef m As Message)
         If m.Msg = WM_HSCROLL OrElse m.Msg = WM_VSCROLL OrElse m.Msg = WM_MOUSEWHEEL Then
            ' Inform automation that transformation has changed
            RaiseEvent AutomationTransformChanged(Me, Nothing)

            ' And paint
            Invalidate()
         End If

         MyBase.WndProc(m)
      End Sub

      ' IAnnAutomationControl Members

      Public ReadOnly Property AutomationRasterImage() As RasterImage Implements IAnnAutomationControl.AutomationRasterImage
         Get
            Return Nothing
         End Get
      End Property

      Public ReadOnly Property AutomationImageWidth() As Single Implements IAnnAutomationControl.AutomationImageWidth
         Get
            If Not _image Is Nothing Then
               Return _image.Width
            Else
               Return 0
            End If
         End Get
      End Property

      Public ReadOnly Property AutomationImageHeight() As Single Implements IAnnAutomationControl.AutomationImageHeight
         Get
            If Not _image Is Nothing Then
               Return _image.Height
            Else
               Return 0
            End If
         End Get
      End Property

      Public ReadOnly Property AutomationDpiX() As Single Implements IAnnAutomationControl.AutomationDpiX
         Get
            Return 96
         End Get
      End Property

      Public ReadOnly Property AutomationDpiY() As Single Implements IAnnAutomationControl.AutomationDpiY
         Get
            Return 96
         End Get
      End Property

      Public ReadOnly Property AutomationImageDpiX() As Single Implements IAnnAutomationControl.AutomationImageDpiX
         Get
            Return 96
         End Get
      End Property

      Public ReadOnly Property AutomationImageDpiY() As Single Implements IAnnAutomationControl.AutomationImageDpiY
         Get
            Return 96
         End Get
      End Property

      Public ReadOnly Property AutomationTransform() As Matrix Implements IAnnAutomationControl.AutomationTransform
         Get
            Dim m As New Matrix()

            If Not _image Is Nothing Then
               ' Create a Matrix for our transform (scroll position and current scale)
               m.Translate(AutoScrollPosition.X, AutoScrollPosition.Y)
               Dim scale As Single = _scaleFactor / 100.0F
               m.Scale(scale, scale)
            End If

            Return m
         End Get
      End Property

      Public ReadOnly Property AutomationUseDpi() As Boolean Implements IAnnAutomationControl.AutomationUseDpi
         Get
            Return False
         End Get
      End Property

      Public ReadOnly Property AutomationControl() As Control Implements IAnnAutomationControl.AutomationControl
         Get
            Return Me
         End Get
      End Property

      Public ReadOnly Property AutomationEnabled() As Boolean Implements IAnnAutomationControl.AutomationEnabled
         Get
            Return Me.Enabled
         End Get
      End Property

      Public Event AutomationImageChanged(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.AutomationImageChanged
      Public Event AutomationTransformChanged(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.AutomationTransformChanged
      Public Event AutomationUseDpiChanged(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.AutomationUseDpiChanged
      Public Event AutomationEnabledChanged(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.AutomationEnabledChanged
      Public Event AutomationPaint(ByVal sender As Object, ByVal e As PaintEventArgs) Implements IAnnAutomationControl.AutomationPaint

      Public Sub AutomationAttach() Implements IAnnAutomationControl.AutomationAttach
      End Sub

      Public Sub AutomationDetach() Implements IAnnAutomationControl.AutomationDetach
      End Sub

      Protected Overrides Sub OnEnabledChanged(ByVal e As System.EventArgs)
         RaiseEvent AutomationEnabledChanged(Me, e)
         MyBase.OnEnabledChanged(e)
      End Sub

      Public Sub Invalidate_Impl(ByVal rc As Rectangle) Implements IAnnAutomationControl.Invalidate
         Me.Invalidate()
      End Sub

      Public Function PointToClient_Impl(ByVal point As Point) As Point Implements IAnnAutomationControl.PointToClient
         Return Me.PointToClient(point)
      End Function

      Public Function PointToScreen_Impl(ByVal point As Point) As Point Implements IAnnAutomationControl.PointToScreen
         Return Me.PointToScreen(point)
      End Function

      Public Function RectangleToScreen_Impl(ByVal rect As Rectangle) As Rectangle Implements IAnnAutomationControl.RectangleToScreen
         Return Me.RectangleToScreen(rect)
      End Function

      Public ReadOnly Property ClientRectangle_Impl() As Rectangle Implements IAnnAutomationControl.ClientRectangle
         Get
            Return Me.ClientRectangle
         End Get
      End Property

      Public Property Cursor_Impl() As Cursor Implements IAnnAutomationControl.Cursor
         Get
            Return Me.Cursor
         End Get
         Set(ByVal value As Cursor)
            Me.Cursor = value
         End Set
      End Property

      Public Event MouseDown_Impl(ByVal sender As Object, ByVal e As MouseEventArgs) Implements IAnnAutomationControl.MouseDown
      Protected Overrides Sub OnMouseDown(ByVal e As System.Windows.Forms.MouseEventArgs)
         RaiseEvent MouseDown_Impl(Me, e)
         MyBase.OnMouseDown(e)
      End Sub

      Public Event MouseUp_Impl(ByVal sender As Object, ByVal e As MouseEventArgs) Implements IAnnAutomationControl.MouseUp
      Protected Overrides Sub OnMouseUp(ByVal e As System.Windows.Forms.MouseEventArgs)
         RaiseEvent MouseUp_Impl(Me, e)
         MyBase.OnMouseUp(e)
      End Sub

      Public Event MouseMove_Impl(ByVal sender As Object, ByVal e As MouseEventArgs) Implements IAnnAutomationControl.MouseMove
      Protected Overrides Sub OnMouseMove(ByVal e As System.Windows.Forms.MouseEventArgs)
         RaiseEvent MouseMove_Impl(Me, e)
         MyBase.OnMouseMove(e)
      End Sub

      Public Event DoubleClick_Impl(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.DoubleClick
      Protected Overrides Sub OnDoubleClick(ByVal e As System.EventArgs)
         RaiseEvent DoubleClick_Impl(Me, e)
         MyBase.OnDoubleClick(e)
      End Sub

      Public Event KeyDown_Impl(ByVal sender As Object, ByVal e As KeyEventArgs) Implements IAnnAutomationControl.KeyDown
      Protected Overrides Sub OnKeyDown(ByVal e As System.Windows.Forms.KeyEventArgs)
         RaiseEvent KeyDown_Impl(Me, e)
         MyBase.OnKeyDown(e)
      End Sub

      Public Event GotFocus_Impl(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.GotFocus
      Protected Overrides Sub OnGotFocus(ByVal e As System.EventArgs)
         RaiseEvent GotFocus_Impl(Me, e)
         MyBase.OnGotFocus(e)
      End Sub

      Public Event LostFocus_Impl(ByVal sender As Object, ByVal e As System.EventArgs) Implements IAnnAutomationControl.LostFocus
      Protected Overrides Sub OnLostFocus(ByVal e As System.EventArgs)
         RaiseEvent LostFocus_Impl(Me, e)
         MyBase.OnLostFocus(e)
      End Sub
   End Class</code>
        <code lang="CS">   // Our custom image viewer. It can view a System.Drawing.Image with
   // the following options:
   // 1. Scrolling
   // 2. Zoom in/out
   // 3. Let the user draw annotation objects on the image surface using
   //   LEADTOOLS annotations in automation mode
   public class MyImageViewer : ScrollableControl, IAnnAutomationControl
   {
      // The LEADTOOLS automation manager object
      private AnnAutomationManager _automationManager;
      // The LEADTOOLS automation object for this control
      private AnnAutomation _automation;
      // The image we are viewing
      private Image _image;
      // Scale factor (for zooming)
      private float _scaleFactor = 100.0f;
      public MyImageViewer()
      {
         // Enable double buffering for smooth paint
         SetStyle(
            ControlStyles.AllPaintingInWmPaint |
            ControlStyles.UserPaint |
            ControlStyles.ResizeRedraw |
            ControlStyles.UserPaint |
            ControlStyles.DoubleBuffer, true);

         // Initialize LEADTOOLS annotations automation
         // Default everything
         _automationManager = new AnnAutomationManager();
         _automationManager.RedactionRealizePassword = "";
         _automationManager.UseXPStyleToolBar = true;
         _automationManager.CreateDefaultObjects();
         _automationManager.CreateToolBar();
         _automationManager.ToolBar.Dock = DockStyle.Right;
         _automationManager.ToolBar.BringToFront();
         _automationManager.ToolBar.AutoSize = false;
         _automationManager.ToolBar.Appearance = ToolBarAppearance.Flat;

         // Create the automation object for this viewer
         _automation = new AnnAutomation(_automationManager, this);
         // We are the only and only active automation in this demo
         _automation.Active = true;
         // Add it to the automation manager
         _automationManager.Automations.Add(_automation);

         // To get rid of a warning (not used)
         if(AutomationUseDpiChanged != null)
         {
            AutomationUseDpiChanged(this, EventArgs.Empty);
         }
      }

      protected override void Dispose(bool disposing)
      {
         if(disposing)
         {
            // Clean up
            if(_automation != null)
               _automation.Dispose();

            if(_automationManager != null)
               _automationManager.Dispose();

            if(_image != null)
               _image.Dispose();
         }

         base.Dispose(disposing);
      }

      // Access to the annotations toolbar
      [Browsable(false)]
      public ToolBar AutomationToolbar
      {
         get
         {
            return _automationManager.ToolBar;
         }
      }

      // The image to view
      [Description("The image to view"),
      Category("Appearance"),
      DefaultValue(null)]
      public Image Image
      {
         get
         {
            return _image;
         }
         set
         {
            if(_image != value)
            {
               if(_image != null)
                  _image.Dispose();

               _image = value;

               // Re-set the scale factor
               _scaleFactor = 100.0f;
               // Re-calculate scrollbar sizes
               RecalculateScrollbars();
               // Inform automation that the image has changed
               if(AutomationImageChanged != null)
                  AutomationImageChanged(this, EventArgs.Empty);
               // Re-paint
               Invalidate();
            }
         }
      }

      // Scale factor (zooming)
      [Description("Scale factor used for zooming."),
      Category("Appearance"),
      DefaultValue(100.0f)]
      public float ScaleFactor
      {
         get
         {
            return _scaleFactor;
         }
         set
         {
            if(_scaleFactor != value)
            {
               if(_scaleFactor &lt;= 0)
                  throw new ArgumentOutOfRangeException("ScaleFactor", "Must be a value greater than zero");

               _scaleFactor = value;

               // Re-calculate scrollbar sizes
               RecalculateScrollbars();
               // Inform automation that transformation has changed
               if(AutomationTransformChanged != null)
                  AutomationTransformChanged(this, null);
               // Re-paint
               Invalidate();
            }
         }
      }

      // Calculate the scrollbar sizes
      private void RecalculateScrollbars()
      {
         SizeF scrollSize;

         if(_image != null)
         {
            float scale = _scaleFactor / 100.0f;
            scrollSize = new SizeF(_image.Width * scale, _image.Height * scale);
         }
         else
         {
            scrollSize = SizeF.Empty;
         }

         AutoScrollMargin = Size;
         AutoScrollMinSize = new Size((int)(scrollSize.Width + 0.5f), (int)(scrollSize.Height + 0.5F));
      }

      protected override void OnPaint(PaintEventArgs e)
      {
         if(_image != null)
         {
            // Paint the image
            Graphics graphics = e.Graphics;
            float x = AutoScrollPosition.X;
            float y = AutoScrollPosition.Y;
            float width = _image.Width * _scaleFactor / 100.0f;
            float height = _image.Height * _scaleFactor / 100.0f;
            graphics.DrawImage(_image, x, y, width, height);

            // Paint annotations
            if(AutomationPaint != null)
               AutomationPaint(this, e);
         }

         base.OnPaint(e);
      }

      private const int WM_HSCROLL = 0x0114;
      private const int WM_VSCROLL = 0x0115;
      private const int WM_MOUSEWHEEL = 0x020A;

      protected override void WndProc(ref Message m)
      {
         if(m.Msg == WM_HSCROLL || m.Msg == WM_VSCROLL || m.Msg == WM_MOUSEWHEEL)
         {
            // Inform automation that transformation has changed
            if(AutomationTransformChanged != null)
               AutomationTransformChanged(this, null);

            // And paint
            Invalidate();
         }

         base.WndProc(ref m);
      }

      #region IAnnAutomationControl Members

      RasterImage IAnnAutomationControl.AutomationRasterImage
      {
         get { return null; }
      }

      float IAnnAutomationControl.AutomationImageWidth
      {
         get { return (_image != null) ? _image.Width : 0; }
      }

      float IAnnAutomationControl.AutomationImageHeight
      {
         get { return (_image != null) ? _image.Height : 0; }
      }

      float IAnnAutomationControl.AutomationDpiX
      {
         get { return 96; }
      }

      float IAnnAutomationControl.AutomationDpiY
      {
         get { return 96; }
      }

      float IAnnAutomationControl.AutomationImageDpiX
      {
         get { return 96; }
      }

      float IAnnAutomationControl.AutomationImageDpiY
      {
         get { return 96; }
      }

      Matrix IAnnAutomationControl.AutomationTransform
      {
         get
         {
            Matrix m = new Matrix();

            if(_image != null)
            {
               // Create a Matrix for our transform (scroll position and current scale)
               m.Translate(AutoScrollPosition.X, AutoScrollPosition.Y);
               float scale = _scaleFactor / 100.0f;
               m.Scale(scale, scale);
            }

            return m;
         }
      }

      bool IAnnAutomationControl.AutomationUseDpi
      {
         get { return false; }
      }

      Control IAnnAutomationControl.AutomationControl
      {
         get { return this; }
      }

      bool IAnnAutomationControl.AutomationEnabled
      {
         get { return Enabled; }
      }

      public event EventHandler AutomationImageChanged;
      public event EventHandler AutomationTransformChanged;
      public event EventHandler AutomationUseDpiChanged;
      public event EventHandler AutomationEnabledChanged;
      public event PaintEventHandler AutomationPaint;

      void IAnnAutomationControl.AutomationAttach()
      {
      }

      void IAnnAutomationControl.AutomationDetach()
      {
      }

      protected override void OnEnabledChanged(EventArgs e)
      {
         if(AutomationEnabledChanged != null)
            AutomationEnabledChanged(this, e);

         base.OnEnabledChanged(e);
      }

      // The following members of IAnnAutomationControl
      // Must be provided by the implementer. Since the implementer
      // in our example derives from Control, these properties/methods/events
      // are already implemented by the base Control class. We do not have special
      // code to perform in this case, otherwise, we could have overridden
      // the base class implementation with ours.
      /*
      void Invalidate(Rectangle rc);
      Point PointToClient(Point point);
      Rectangle RectangleToScreen(Rectangle rect);
      Point PointToScreen(Point pt);
      Rectangle ClientRectangle { get; }
      Cursor Cursor { get; set; }
      event MouseEventHandler MouseDown;
      event MouseEventHandler MouseMove;
      event MouseEventHandler MouseUp;
      event EventHandler DoubleClick;
      event KeyEventHandler KeyDown;
      event EventHandler LostFocus;
      event EventHandler GotFocus;
      */

      #endregion IAnnAutomationControl Members
   }</code>
        <!--IAnnAutomationControl-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.AutomationAttach">
      <summary>
            A method that will be called whenever <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation.Attach</see> is called.
            </summary>
      <remarks>
        <para>You can add code to this method to handle any necessary code needed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.AutomationDetach">
      <summary>
            A method that will be called whenever <see cref="M:Leadtools.Annotations.AnnAutomation.Detach">AnnAutomation.Detach</see> is called.
            </summary>
      <remarks>
        <para>You can add code to this method to handle any necessary code needed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.Invalidate(System.Drawing.Rectangle)">
      <summary>
            A mathod that will be called when the automation needs to re-paint the control
            </summary>
      <param name="rc">The invalid rectangle to paint.</param>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
            the default <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)">System.Windows.Forms.Control.Invalidate</see> will be used). If you have custom implementation, then simply invalidate your control surface when
            this method is called.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.PointToClient(System.Drawing.Point)">
      <summary>
            A method that will be called when the automation needs to transform a point from screen to client coordinates.
            </summary>
      <param name="point">The source point in screen coordinates.</param>
      <returns>The result point in client coordinates.</returns>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
            the default <see cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)">System.Windows.Forms.Control.PointToClient</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.RectangleToScreen(System.Drawing.Rectangle)">
      <summary>
            A method that will be called when the automation needs to transform a rectangle from client to screen bcoordinates.
            </summary>
      <param name="rect">The source rectangle in client coordinates.</param>
      <returns>The result rectangle in screen coordinates.</returns>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
            the default <see cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)">System.Windows.Forms.Control.RectangleToScreen</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.IAnnAutomationControl.PointToScreen(System.Drawing.Point)">
      <summary>
            A method that will be called when the automation needs to transform a point from client to screen bcoordinates.
            </summary>
      <param name="point">The source point in client coordinates.</param>
      <returns>The result point in screen coordinates.</returns>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this method (since
            the default <see cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)">System.Windows.Forms.Control.PointToScreen</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">
      <summary>
            Gets the <see cref="T:Leadtools.RasterImage" /> instance this automation will use when the user performs actions that will change the image being
            annotated.
            </summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that indicates the instance this automation will use when the user performs actions that will change the image being
            annotated.</value>
      <remarks>
        <para>(Read only) The <see cref="T:Leadtools.RasterImage" /> instance this automation will use when the user performs actions that will change the image being
            annotated. This is only used when the following methods are called: <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)">AnnEncryptObject.Apply</see>,
            <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)">AnnRedactionObject.Realize</see><see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)">AnnRedactionObject.Restore</see>. If you
            do not need to support these methods (By not supported encrypt and redaction objects, for example if you are implementing a system where only rectangles,
            rulers, images, audio and other objects like that are supported), then you can safely return a null reference (Nothing in Visual Basic) from your
            implementation of <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth">
      <summary>
            Gets the width of the image being annotated in pixels.
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the the width of the image being annotated in pixels.</value>
      <remarks>
        <para>(Read only) The width of the image being annotated in pixels. Usually you will return the width of the image you are using in
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.ImageWidth">RasterImage.ImageWidth</see>), however, since you do not need to implement
            that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth" />
            to return the image width in pixels. In this case, the width of the virtual image you will be using in automation. You must trigger
            the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
            property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight">
      <summary>
            Gets the height of the image being annotated in pixels.
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the the height of the image being annotated in pixels.</value>
      <remarks>
        <para>(Read only) The height of the image being annotated in pixels. Usually you will return the height of the image you are using in
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.ImageHeight">RasterImage.ImageHeight</see>), however, since you do not need to implement
            that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight" />
            to return the image height in pixels. In this case, the height of the virtual image you will be using in automation. You must trigger
            the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
            property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiX">
      <summary>
            Gets the horizontal resolution of the control being annotated in dots per inch
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the horizontal resolution of the control being annotated in dots per inch.</value>
      <remarks>
        <para>(Read only) The horizontal resolution of the control being annotated in dots per inch. Usually you will return the resolution of the control you are using in
            <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> by obtaining it in a standard way in Windows.Forms. For example, using
            <see cref="M:System.Windows.Forms.Control.CreateGraphics">System.Windows.Forms.Control.CreateGraphics</see> and returning
            <see cref="P:System.Drawing.Graphics.DpiX">Graphics.DpiX</see> of the result object or simply 0 to use the current screen resolution.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiY">
      <summary>
            Gets the vertical resolution of the control being annotated in dots per inch.
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the vertical resolution of the control being annotated in dots per inch.</value>
      <remarks>
        <para>(Read only) The vertical resolution of the control being annotated in dots per inch. Usually you will return the resolution of the control you are using in
            <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> by obtaining it in a standard way in Windows.Forms. For example, using
            <see cref="M:System.Windows.Forms.Control.CreateGraphics">System.Windows.Forms.Control.CreateGraphics</see> and returning
            <see cref="P:System.Drawing.Graphics.DpiY">Graphics.DpiY</see> of the result object or simply 0 to use the current screen resolution.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX">
      <summary>
            Gets the horizontal resolution of the image being annotated in dots per inch
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the horizontal resolution of the image being annotated in dots per inch.</value>
      <remarks>
        <para>(Read only) The horizontal resolution of the image being annotated in dots per inch. Usually you will return the resolution of the image you are using in
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.XResolution">RasterImage.XResolution</see>), however, since you do not need to implement
            that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX" />
            to return the resolution in dots per inch. In this case, the resolution of the virtual image you will be using in automation or simply 0 to use
            the current screen resolution. You must trigger
            the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
            property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY">
      <summary>
            Gets the vertical resolution of the image being annotated in dots per inch.
            </summary>
      <value>A <see cref="T:System.Single" /> that represents the vertical resolution of the image being annotated in dots per inch.</value>
      <remarks>
        <para>(Read only) The vertical resolution of the image being annotated in dots per inch. Usually you will return the resolution of the image you are using in
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage" /> (<see cref="P:Leadtools.RasterImage.YResolution">RasterImage.YResolution</see>), however, since you do not need to implement
            that property and can safely return null in some case, you must always manually implement <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY" />
            to return the resolution in dots per inch. In this case, the resolution of the virtual image you will be using in automation or simply 0 to use
            the current screen resolution. You must trigger
            the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">IAnnAutomationControl.AutomationImageChanged</see> event when the value of this
            property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationTransform">
      <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that represents the current transformation for the annotations objects.
            </summary>
      <value>A <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that represents the current transformation for the annotations objects.</value>
      <remarks>
        <para>(Read only) A <see cref="T:System.Drawing.Drawing2D.Matrix" /> object that represents the current transformation for the annotations objects. This value cannot be a null
            reference (Nothing in Visual Basic) and the object returned will be owned by the automation object and will be disposed internally when it is
            no longer needed. You must set this matrix with the current scroll and zoom values of your control and set up your application to either create or
            return a new instance of this matrix on demand whenever this property is called. For more explanation, refer to the example source code of this
            class. If you will not support scrolling or zooming in your application, then simply return an identity matrix (a new <see cref="T:System.Drawing.Drawing2D.Matrix" /> object).
            You must trigger the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see> when
            the value of this property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpi">
      <summary>
            Gets a value indicating whether the automation object should pay consideration to the image and control resolution when drawing annotation objects.
            </summary>
      <value>
        <strong>true</strong> if the automation object should pay consideration to the image and control resolution when drawing annotation objects,
            otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>(Read only) a value indicating whether to use pay consideration to the image and control resolution when drawing annotation objects. The automation
            uses the resolution when translation values to pixels, for example, when calculating point size of a font. Also, objects such as rulres will use the
            resolution to correctly display the value in device independant coordinates such as inches and millimeters. If the value of this property is
            <strong>true</strong>, then the automation will use <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX" />, <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY" />,
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiX" /> and <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationDpiY" /> to when calculating these values and ensure
            the result value on screen is accurate. If the value of this property is <strong>false</strong>, then the automation will not use any of these values
            and the calculations will be done using a default value of 96 dots per inch. You must trigger the
            <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpiChanged">IAnnAutomationControl.AutomationUseDpiChanged</see> event when the value of this property is
            changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled">
      <summary>
            Gets a value that indicates whether the automation is enabled
            </summary>
      <value>
        <strong>true</strong> if the automation is enabled, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>(Read only) Value that indicates whether the automation is enabled. When the value of this property is <strong>true</strong>, automation is enabled and
            when the user clicks and drags with the mouse or press keys on the keyboard, the automation object will process these events and perform the necessary
            actions (such as drawing new annotations objects or moving existing ones). If the value of this property is <strong>false</strong>, automation is
            disabled and the automation object will not process these events. You can use this property to easily enable/disable automation on this object
            from your user interface. If you decide to always enable automation, simply return <strong>true</strong>. You must trigger the
            <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabledChanged">IAnnAutomationControl.AutomationEnabledChanged</see> event when the value
            of this property is changed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.AutomationControl">
      <summary>
            Gets the <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> to use for automation.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> object indicating the control to use for automation.</value>
      <remarks>
        <para>(Read only) The <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see> to use for automation. This value cannot
            be a null reference (Nothing in Visual Basic). The automation object will use this value to add/remove child controls, invalidate its surface and use
            it many other ways.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabledChanged">
      <summary>
            An event that triggers whenever the value of <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled" /> is changed
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled" /> is changed.</event>
      <remarks>
        <para>If your implementation does require enabling/disabling the automation, then you do not have to trigger this event from your code. When this event
            triggers, the automation object will query the <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationEnabled">IAnnAutomationControl.AutomationEnabled</see>
            property and consequently starts or stops hooking the mouse and keyboard events.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.AutomationImageChanged">
      <summary>
            An event that triggers whenever the properties of the image being automated is changed.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the properties of the image being automated is changed</event>.
            <remarks><para>If you are using
            a <see cref="T:Leadtools.RasterImage" /> object, then you trigger this event whenever the <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see> event occures.
            Note that this event should occur when the image physical properties has changed, for example, its width/height or resolution or when a new image
            is set in your control (if supported) and not when the pixel data of the image has changed which only requires a re-paint. For these changes, use
            the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">IAnnAutomationControl.AutomationPaint</see> event. If your requirement does not have an image
            that will be changed while being automated, then you do not have to trigger this event. When this event triggers, the automation object will query
            the <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageWidth">IAnnAutomationControl.AutomationImageWidth</see>,
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageHeight">IAnnAutomationControl.AutomationImageHeight</see><see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiX">IAnnAutomationControl.AutomationImageDpiX</see> and
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationImageDpiY">IAnnAutomationControl.AutomationImageDpiY</see> properties to recalculate the size of the container.</para></remarks><example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example><document>yes</document></member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">
      <summary>
            An event that must triggers whenever the value of
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationTransform">IAnnAutomationControl.AutomationTransform</see> is changed.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationTransform">IAnnAutomationControl.AutomationTransform</see> is changed.</event>
      <remarks>
        <para>When transformation is changed is when your control is
            scrolled or zoomed in or out. When this event is triggered, the automation control will query the value of this property and might re-paint
            the annotations objects. Notice that you must trigger this event with the size of the control is changed so the automation object will use the new value
            of <see cref="P:Leadtools.Annotations.IAnnAutomationControl.ClientRectangle">IAnnAutomationControl.ClientRectangle</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpiChanged">
      <summary>
            An event that triggers whenever the value of
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpi">IAnnAutomationControl.AutomationUseDpi</see> is changed.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger whenever the value of
            <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationUseDpi">IAnnAutomationControl.AutomationUseDpi</see> is changed.</event>
      <remarks>
        <para>When this event triggers, the automation object will query this property to re-calculate the values needed.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">
      <summary>
            An event that triggers whenever the surface of the control is invalidated
            </summary>
      <event>An event of type <see cref="T:System.Windows.Forms.PaintEventArgs" /> that must trigger whenever the surface of the control is invalidated.</event>
      <remarks>
        <para>The automation control will then
            automatically use the values of the event arguments to draw the annotations objects. In most cases, you simply have to trigger this event in your
            control <see cref="E:System.Windows.Forms.Control.Paint">System.Windows.Forms.Control.Paint</see> event or 
            <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">System.Windows.Forms.Control.OnPaint</see> method and pass the same arguments (of type
            <see cref="T:System.Windows.Forms.PaintEventArgs" />) to <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationPaint">IAnnAutomationControl.AutomationPaint</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.ClientRectangle">
      <summary>
            Gets a rectangle that represents the client area of the control.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</value>
      <remarks>
        <para>(Read only) A rectangle that represents the client area of the control. If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this property (since
            the default <see cref="P:System.Windows.Forms.Control.ClientRectangle">System.Windows.Forms.Control.ClientRectangle</see> will be used). However,
            you must trigger the <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see> event with the value
            of the client rectangle is changed, in most cases, by calling <see cref="E:Leadtools.Annotations.IAnnAutomationControl.AutomationTransformChanged">IAnnAutomationControl.AutomationTransformChanged</see>
            from your <see cref="E:System.Windows.Forms.Control.SizeChanged">System.Windows.Forms.Control.SizeChanged</see> event or
            <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">System.Windows.Forms.Control.OnSizeChanged</see> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnAutomationControl.Cursor">
      <summary>
            Gets or sets the cursor to be used in the control.
            </summary>
      <value>A <see cref="P:Leadtools.Annotations.IAnnAutomationControl.Cursor" /> that specifies the cursor to be used in the control.</value>
      <remarks>
        <para>The automation will use many different cursors depending on current operation (drawing new annotations,
            moving existing annotations, etc). If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this property (since
            the default <see cref="P:System.Windows.Forms.Control.Cursor">System.Windows.Forms.Control.Cursor</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.MouseDown">
      <summary>
            An event of that triggers when the mouse is pressed on the control.
            </summary>
      <event>An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is pressed on the control.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.MouseDown">System.Windows.Forms.Control.MouseDown</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.MouseMove">
      <summary>
            An event of that triggers when the mouse is moved on the surface of the control.
            </summary>
      <event>An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is moved on the surface of the control.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.MouseMove">System.Windows.Forms.Control.MouseMove</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.MouseUp">
      <summary>
            An event of that triggers when the mouse is depressed on the control.
            </summary>
      <event>An event of type <see cref="T:System.Windows.Forms.MouseEventHandler" /> that must trigger when the mouse is depressed on the control.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.MouseUp">System.Windows.Forms.Control.MouseUp</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.DoubleClick">
      <summary>
            An event of that triggers when the mouse is double clicked on the surface of the control.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger when the mouse is double clicked on the surface of the control.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.DoubleClick">System.Windows.Forms.Control.DoubleClick</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.KeyDown">
      <summary>
            An event that triggers when a key is pressed when your control has focus.
            </summary>
      <event>An event of type <see cref="T:System.Windows.Forms.KeyEventHandler" /> that must trigger when a key is pressed when your control has focus.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.KeyDown">System.Windows.Forms.Control.KeyDown</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.LostFocus">
      <summary>
            An event that triggers when your control loses the focus.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger when your control loses the focus.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.LostFocus">System.Windows.Forms.Control.LostFocus</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.IAnnAutomationControl.GotFocus">
      <summary>
            An event that triggers when your control receives the focus.
            </summary>
      <event>An event of type <see cref="T:System.EventHandler" /> that must trigger when your control receives the focus.</event>
      <remarks>
        <para>If your control is derived from the standard
            <see cref="T:System.Windows.Forms.Control">System.Windows.Forms.Control</see>, then you do not need to implement this event (since
            the default <see cref="E:System.Windows.Forms.Control.LostFocus">System.Windows.Forms.Control.LostFocus</see> will be used).</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnAudioObject">
      <summary>
            Defines an audio annotation object.
            </summary>
      <remarks>
            The audio annotation object is a scaled image that can be activated to play an audio (WAV) clip.  The WAV file path is stored in the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> property, so the WAV data itself is not stored in this object, only the physical path.  In automation mode, when this audio object is clicked, the framework will try to locate and then play the WAV file stored in <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" />.  This object will use the default image of an audio speaker. To change this default image, change the <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> value.
            <p>The <b>AnnAudioObject</b> class inherits the the <see cref="T:Leadtools.Annotations.AnnImageObject" /> class and accesses the common <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> property mentioned above through this inheritance.</p><para>
            For more information about the audio annotation object refer to 
            <see cref="T:AN.Topics.AnnAudioObject">AnnAudioObject</see>. 
            For more information about the automated annotation audio object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsAudioTab">Automated Annotations - Audio Tab</see>. 
            </para></remarks>
      <example>
        <para>This example creates a new audio object at location 100, 200 and with dimensions of 400 x 600 and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnAudioObject_AnnAudioObject(ByVal container As AnnContainer, ByVal waveFileName As String)
         Dim audio As AnnAudioObject = New AnnAudioObject()
         audio.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         audio.FileName = waveFileName
         container.Objects.Add(audio)
         ' play the audio to test it
         If (audio.CanPlay) Then
            audio.Play()
         End If
      End Sub</code>
        <code lang="CS">      private void AnnAudioObject_AnnAudioObject(AnnContainer container, string waveFileName)
      {
         AnnAudioObject audio = new AnnAudioObject();
         audio.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         audio.FileName = waveFileName;
         container.Objects.Add(audio);
         // play the audio to test it
         if((audio.CanPlay))
            audio.Play();
      }</code>
        <!--AnnAudioObject.AnnAudioObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; false otherwise.</param>
      <param name="supportsBrush">true if this object will support a brush; false otherwise.</param>
      <param name="supportsFont">true if this object will support a font; false otherwise.</param>
      <remarks>
            This constructor is intended for derived classes that are used to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.Stop">
      <summary>
            Stops the play of the WAV file stored in the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> property of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <remarks>
            This method will stop audio play if the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> is currently playing its associated WAV file <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" />,
            If the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> is not playing its WAV file, this method does nothing.
            </remarks>
      <example>
            For an example refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.Play">
      <summary>
            Attempts to play the WAV file stored in the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> property of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <remarks>
            This method will call <see cref="P:Leadtools.Annotations.AnnAudioObject.CanPlay" /> first to verify that it can play the WAV file.  If the return value from <see cref="P:Leadtools.Annotations.AnnAudioObject.CanPlay" /> is false this method will do nothing.
            </remarks>
      <example>
            For an example refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.</value>
      <remarks>
            If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> will use the picture defined in the <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" /> property.
            <p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.FileName">
      <summary>
            Gets or sets the WAV file name of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <value>A string value that specifies the WAV file name of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.</value>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAudioObject.CanPlay" /> method to determine if this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> has a value WAV audio file in the <b>FileName</b> property.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAudioObject.Play" /> method to play the WAV audio file strored in the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> property.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" /></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.IsPlaying">
      <summary>
            Gets a value indicating whether the WAV file stored in the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> property 
            of this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> is playing.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> is playing its WAV file; false otherwise.</value>
      <remarks>
            (Read only) This property will determine if this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> is playing its WAV file.
            If the WAV file is playing, it can be stopped by calling the <seealso cref="M:Leadtools.Annotations.AnnAudioObject.Stop" /> method.
            </remarks>
      <example>
            For an example refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.CanPlay">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object can play its WAV file.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAudioObject" /> can play its WAV file; false otherwise.</value>
      <remarks>
            (Read only) This property will determine:
            <list type="bullet"><item><description>Whether the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> value is not null (Nothing in Visual Basic) or an empty string</description></item><item><description>Whether the <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> contains a valid path in the system</description></item></list>
            This property will not determine whether the path specified by <see cref="P:Leadtools.Annotations.AnnAudioObject.FileName" /> contains a valid WAV file.
            </remarks>
      <example>
            For an example refer to <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnAudioObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnAudioObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true if this <see cref="P:Leadtools.Annotations.AnnAudioObject.Picture" /> property has a valid image.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture">
      <summary>
            Gets or sets the default picture used by all <see cref="T:Leadtools.Annotations.AnnAudioObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture used by the <see cref="T:Leadtools.Annotations.AnnAudioObject" />.</value>
      <remarks>
            Set the <see cref="P:Leadtools.Annotations.AnnAudioObject.UseOriginalPicture" /> property to true to revert back to the original picture.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAudioObject_DefaultPicture(ByVal container As AnnContainer, ByVal viewer As RasterImageViewer, ByVal newAudioPicture As String)
         ' first add a new AnnAudioObject with the original picture
         Dim obj As AnnAudioObject = New AnnAudioObject()
         obj.Bounds = New AnnRectangle(100, 100, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()
         MessageBox.Show("An audio object with the original picture")

         ' now change the picture to one of our own
         Dim img As Image = Image.FromFile(newAudioPicture)
         Dim picture As AnnPicture = New AnnPicture(img)
         AnnAudioObject.DefaultPicture = picture

         ' at this point, all new AnnAudioObject objects will use this new picture

         ' add another audio object
         obj = New AnnAudioObject()
         obj.Bounds = New AnnRectangle(100, 210, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()

         MessageBox.Show("An audio object with the new picture")

         ' set the picture back to the original value
         AnnAudioObject.UseOriginalPicture = True

         ' add another audio object
         obj = New AnnAudioObject()
         obj.Bounds = New AnnRectangle(100, 320, 100, 100)
         container.Objects.Add(obj)
         viewer.Invalidate()

         MessageBox.Show("An audio object with the original picture")
      End Sub</code>
        <code lang="CS">      public void AnnAudioObject_DefaultPicture(AnnContainer container, RasterImageViewer viewer, string newAudioPicture)
      {
         // first add a new AnnAudioObject with the original picture
         AnnAudioObject obj = new AnnAudioObject();
         obj.Bounds = new AnnRectangle(100, 100, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();
         MessageBox.Show("An audio object with the original picture");

         // now change the picture to one of our own
         Image img = Image.FromFile(newAudioPicture);
         AnnPicture picture = new AnnPicture(img);
         AnnAudioObject.DefaultPicture = picture;

         // at this point, all new AnnAudioObject objects will use this new picture

         // add another audio object
         obj = new AnnAudioObject();
         obj.Bounds = new AnnRectangle(100, 210, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();

         MessageBox.Show("An audio object with the new picture");

         // set the picture back to the original value
         AnnAudioObject.UseOriginalPicture = true;

         // add another audio object
         obj = new AnnAudioObject();
         obj.Bounds = new AnnRectangle(100, 320, 100, 100);
         container.Objects.Add(obj);
         viewer.Invalidate();

         MessageBox.Show("An audio object with the original picture");
      }</code>
        <!--AnnAudioObject.DefaultPicture-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAudioObject.UseOriginalPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnAudioObject" /> objects.
            </summary>
      <value>true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnAudioObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use the <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" /> property to get or set the current default picture used by the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnHatchBrush">
      <summary>
            Defines an annotation brush with a hatch style, a foreground color, and a background color.
            </summary>
      <remarks>
        <p>Annotation brushes are used to fill the interiors of annotation objects like rectangles, ellipses, polygons, etc.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ChangingAnnotationAutomationBackgroundColors">Changing Annotation Automation Background Colors.</see></p>
      </remarks>
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> to draw hatch pattern.</para>
        <code lang="VB">      Public Sub AnnHatchBrush_AnnHatchBrush(ByVal graphics As Graphics, ByVal converter As AnnUnitConverter, ByVal rc As AnnRectangle)
         Dim annBrush As AnnHatchBrush = New AnnHatchBrush(HatchStyle.Cross, Color.Red, Color.White)
         Dim gdiBrush As Brush = annBrush.Create(converter, rc)
         Try
            Dim rect As RectangleF = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF()
            graphics.FillRectangle(gdiBrush, rect)
         Finally
            CType(gdiBrush, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnHatchBrush_AnnHatchBrush(Graphics graphics, AnnUnitConverter converter, AnnRectangle rc)
      {
         AnnHatchBrush annBrush = new AnnHatchBrush(HatchStyle.Cross, Color.Red, Color.White);
         using(Brush gdiBrush = annBrush.Create(converter, rc))
         {
            RectangleF rect = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF();
            graphics.FillRectangle(gdiBrush, rect);
         }
      }</code>
        <!--AnnHatchBrush.AnnHatchBrush-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object with the specified hatch style, foreground color and background color.
            </summary>
      <noremarks />
      <param name="style">The <see cref="P:Leadtools.Annotations.AnnHatchBrush.HatchStyle" /> value that represents the pattern drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.</param>
      <param name="foreColor">The <see cref="T:System.Drawing.Color" /> structure that represents the color of lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.</param>
      <param name="backColor">The <see cref="T:System.Drawing.Color" /> structure that represents the color of spaces between the lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.Create(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Creates a new GDI+ brush object using this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </summary>
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting any annotation lengths, points, etc. this brush might have.</param>
      <param name="rect">Specifies an <see cref="T:Leadtools.Annotations.AnnRectangle" /> object defining the bounding rectangle to be used with this brush.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Brush" /> object created from this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.</returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> does not use the <i>rect</i> parameter.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnHatchBrush" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHatchBrush.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHatchBrush.ForeColor">
      <summary>
            Gets or sets the color of hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color of the hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHatchBrush.ForeColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> of the hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnHatchBrush.BackColor">
      <summary>
            Gets or sets the color of the spaces between the hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color of the spaces between the hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHatchBrush.BackColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> of the spaces between the hatch lines drawn by this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnHatchBrush.HatchStyle">
      <summary>
            Gets or sets the hatch style of this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.
            </summary>
      <noremarks />
      <value>The <see cref="T:System.Drawing.Drawing2D.HatchStyle" /> value of this <see cref="T:Leadtools.Annotations.AnnHatchBrush" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHatchBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRichTextEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnRichTextEditDesigner</b> class to edit an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> object. The designer will provide
            feature rich user interface with a toolbar to perform all the functions necessary to edit a rich text.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnRichTextEditDesigner" /> object.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextEditDesigner.DoubleClick(System.EventArgs)">
      <summary>
            Handles double click events on the designer.
            </summary>
      <param name="e">A <see cref="T:System.EventArgs" />object that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>The default behavior for this event is to display a rich text box on top of the object.</p>
        <p>Derived classes should override this method in order to process double click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnProtractorObject">
      <summary>
            Supports standard protractor properties used by annotation objects from classes that implement this interface.
            </summary>
      <remarks>
        <p>The <b>IAnnProtractorObject</b> interface is used by the annotation framework to draw a protractor.  
            The protractor annotation object consists of two rulers joined at a point to create an angle.</p>
        <p>In automation mode the annotation framework uses this interface to display a dialog, with the appropriate tabs, 
            for annotation objects from classes that implement this interface.</p>
        <p> The following classes implement the IAnnProtractorObject interface:</p>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnGroupObject" /> Class</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> Class</description>
          </item>
        </list>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.ProtractorImplemented">
      <summary>
            Gets a value that indicates whether the annotation object implements the IAnnProtractorObject interface.  
            </summary>
      <value>true if the annotation object's class implements this interface, false otherwise.</value>
      <remarks>(Read only) This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include a protractor should 
            implement this property to always return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.Acute">
      <summary>
            Gets or sets a value that indicates whether the inside (acute) or outside (obtuse) angle of the protractor should be marked.
            </summary>
      <value>true to mark the inside (acute) angle; otherwise, false.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit">
      <summary>
            Gets or sets a value that indicates the unit of measure for the angle of the protractor.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> value that specifies the unit of measure for the angle of the protractor.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" /> property value.
            </summary>
      <value>A string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" /> property value.</value>
      <remarks>
        <p>The <b>AngularUnitAbbreviation</b> property resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" /> property.  
            To get the default abbreviation value, call the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetAngularUnitAbbreviation(Leadtools.Annotations.AnnAngularUnit)" /> method.</p>
        <p>This property is used only if the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ShowAngle" /> 
            property is true.</p>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.ShowAngle">
      <summary>
            Gets or sets a value that indicates whether to display the angle of the protractor.
            </summary>
      <value>true to display the angle of the protractor; false otherwise.</value>
      <remarks>
            If this property is true, the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnitAbbreviation" /> property
            contains the abbreviation for the unit of measure displayed with the angle and the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AnglePrecision" /> 
            property contains the number of digits to display to the right of the decimal point in the angle.  <br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.AnglePrecision">
      <summary>
            Gets or sets the number of digits to the right of the decimal point when displaying the angle of the protractor.
            </summary>
      <value>The number of digits to display to the right of the decimal point.</value>
      <remarks>
        <p>If the angle is 135.683 degrees and the precision is 2, the value 135.68 will be displayed.</p>
        <p>This property is used only if the <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ShowAngle" /> 
            property is true.</p>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnProtractorObject.ArcRadius">
      <summary>
            Gets or sets the arc radius of the protractor.
            </summary>
      <value>The arc radius of the protractor.</value>
      <remarks>
            The center of the arc is the point at which the two rulers of the protractor join.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnGroupObject">
      <summary>
            This class provides support for creating and managing annotation group objects.
            </summary>
      <remarks>
            The annotation group object contains a collection of annotation objects from any class that is derived from the<see cref="T:Leadtools.Annotations.AnnObject" /> class.  
            This collection of objects can be treated as one while they are in a group.  An annotation object 
            can be in either a container or a group but not both at the same time.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
        <para>This example moves all the objects from a container into a new group object.</para>
        <code lang="VB">      Private Sub AnnGroupObject_AnnGroupObject(ByVal container As AnnContainer)
         Dim group As AnnGroupObject = New AnnGroupObject()
         ' move the objects to the group
         Do While container.Objects.Count &gt; 0
            Dim obj As AnnObject = container.Objects(0)
            container.Objects.RemoveAt(0)
            group.Objects.Add(obj)
         Loop

         ' add the group to the container
         container.Objects.Add(group)
      End Sub</code>
        <code lang="CS">      private void AnnGroupObject_AnnGroupObject(AnnContainer container)
      {
         AnnGroupObject group = new AnnGroupObject();
         // move the objects to the group
         while(container.Objects.Count &gt; 0)
         {
            AnnObject obj = container.Objects[0];
            container.Objects.RemoveAt(0);
            group.Objects.Add(obj);
         }

         // add the group to the container
         container.Objects.Add(group);
      }</code>
        <!--AnnGroupObject.AnnGroupObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Create">
      <summary>
            Creates a new instance of an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> to the newly created one.  The objects inside this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will be cloned before copied to the new group object.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Dispose(System.Boolean)">
      <summary>
            Releases the resources used by this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnGroupObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will dispose of all the objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Dispose" />.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies the path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will return a union of the graphics paths of all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)" />.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)">
      <summary>
            Performs hit-testing on this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <param name="testPoint">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that contains the point to test.</param>
      <param name="buffer">Value that represents the size of the test point. This value makes the test point a square with an edge lenght of "buffer" * 2. This square is used to hit test.</param>
      <returns>The <see cref="F:Leadtools.Annotations.AnnObject.DefaultHitTestValue" /> if any annotation object within the group satisfies 
            the hit test; or null (Nothing in Visual Basic) if the test point does not hit an annotation object in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will perform hit-testing on all the objects in the group.  
            If any annotation object within the group satisfies the hit test, the return value will be <see cref="F:Leadtools.Annotations.AnnObject.DefaultHitTestValue" />.  
            To find the object inside the group that satisfies the hit-test, enumerate all of the objects in the group and call <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> manually.  
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Draw(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> overrides the AnnObject.Draw method to draw all visible objects inside the group.  
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Ungroup">
      <summary>
            Ungroups this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <remarks>
            Ungrouping an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object moves all the objects in 
            this group to the group's <see cref="P:Leadtools.Annotations.AnnGroupObject.Container" />.  After ungrouping is done, the group's <see cref="P:Leadtools.Annotations.AnnGroupObject.Objects" /> 
            collection will be empty.  This method does not remove this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object from the <see cref="P:Leadtools.Annotations.AnnGroupObject.Container" />.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
        <para>This example groups/ungroups objects.</para>
        <code lang="VB">      Private Sub AnnGroupObject_Ungroup()
         Dim container As AnnContainer = New AnnContainer()
         ' adds a few objects to the container
         Dim line As AnnLineObject = New AnnLineObject()
         container.Objects.Add(line)

         Dim rect As AnnRectangleObject = New AnnRectangleObject()
         container.Objects.Add(rect)

         ' show the number of objects in this container (should be 2: line and rectangle)
         Dim s As String = String.Format("There are {0} objects in the container", container.Objects.Count)

         MessageBox.Show(s)

         ' move all objects from the container to a group
         Dim group As AnnGroupObject = New AnnGroupObject()

         Do While container.Objects.Count &gt; 0
            Dim obj As AnnObject = container.Objects(0)
            container.Objects.Remove(obj)
            group.Objects.Add(obj)
         Loop

         ' show the number of objects in this container (should be 0)
         s = String.Format("There are {0} objects in the container", container.Objects.Count)
         MessageBox.Show(s)

         ' add the group to the container
         container.Objects.Add(group)

         ' show the number of objects in this container (should be 1: group)
         s = String.Format("There are {0} objects in the container", container.Objects.Count)
         MessageBox.Show(s)

         ' ungroup the group object
         group.Ungroup()

         ' show the number of objects in this container (should be 3: group, line and rectangle)
         s = String.Format("There are {0} objects in the container", container.Objects.Count)
         MessageBox.Show(s)

         ' remove the group from the container
         container.Objects.Remove(group)

         ' show the number of objects in this container (should be 2: line and rectangle)
         s = String.Format("There are {0} objects in the container", container.Objects.Count)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnGroupObject_Ungroup()
      {
         AnnContainer container = new AnnContainer();
         // adds a few objects to the container
         AnnLineObject line = new AnnLineObject();
         container.Objects.Add(line);

         AnnRectangleObject rect = new AnnRectangleObject();
         container.Objects.Add(rect);

         // show the number of objects in this container (should be 2: line and rectangle)
         string s = string.Format("There are {0} objects in the container", container.Objects.Count); ;
         MessageBox.Show(s);

         // move all objects from the container to a group
         AnnGroupObject group = new AnnGroupObject();

         while(container.Objects.Count &gt; 0)
         {
            AnnObject obj = container.Objects[0];
            container.Objects.Remove(obj);
            group.Objects.Add(obj);
         }

         // show the number of objects in this container (should be 0)
         s = string.Format("There are {0} objects in the container", container.Objects.Count);
         MessageBox.Show(s);

         // add the group to the container
         container.Objects.Add(group);

         // show the number of objects in this container (should be 1: group)
         s = string.Format("There are {0} objects in the container", container.Objects.Count);
         MessageBox.Show(s);

         // ungroup the group object
         group.Ungroup();

         // show the number of objects in this container (should be 3: group, line and rectangle)
         s = string.Format("There are {0} objects in the container", container.Objects.Count);
         MessageBox.Show(s);

         // remove the group from the container
         container.Objects.Remove(group);

         // show the number of objects in this container (should be 2: line and rectangle)
         s = string.Format("There are {0} objects in the container", container.Objects.Count);
         MessageBox.Show(s);
      }</code>
        <!--AnnGroupObject.Ungroup-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.ResetTransform">
      <summary>
            Resets the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will reset the transform of all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetTransform" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Translate(System.Single,System.Single)">
      <summary>
            Translates the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object using the specified values.
            </summary>
      <param name="dx">The x value by which to translate the matrix in the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> property.</param>
      <param name="dy">The y value by which to translate the matrix in the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> property.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> class overrides the AnnObject.Translate method to translate all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Translate(System.Single,System.Single)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)">
      <summary>
            Scales the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object using the specified values.
            </summary>
      <param name="sx">The value by which to scale the matrix in the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> property in the x-axis direction.</param>
      <param name="sy">The value by which to scale the matrix in the <see cref="P:Leadtools.Annotations.AnnObject.Transform" /> property in the y-axis direction.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the scaling operation.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will scale all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)">
      <summary>
            Rotates the transformation matrix of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object around a point.
            </summary>
      <param name="angle">The angle of rotation in degrees.</param>
      <param name="origin">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the center of the rotation.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will rotate all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Lock(System.String)">
      <summary>
            Locks this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object with the specified password.
            </summary>
      <param name="password">String containing the password used to lock the annotation objects in this group object.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> class overrides the AnnObject.Lock method to lock all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />.
            An object must be unlocked in order to change that object in automation mode.
            Redact objects must be unlocked to be restored(unrealized).
            For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.Unlock(System.String)">
      <summary>
            Unlocks this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object with the specified password.
            </summary>
      <param name="password">String containing the password used to unlock the annotation objects in this group object.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> class overrides the AnnObject.Unlock method to unlock all objects in the group.  For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" />.
            For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.RestrictName">
      <summary>
            Restricts the name to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnGroupObject.Container" /> of this <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            </summary>
      <remarks>
            This method will enumerate all of the objects inside this <see cref="T:Leadtools.Annotations.AnnGroupObject" />, calling the <see cref="M:Leadtools.Annotations.AnnObject.RestrictName" /> method on each one.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.ResetRotatePoints">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.CalculateRotateAngle">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" />.
            </summary>
      <remarks>
            Gets the rotate angle of all rectangular objects in a group.
            This is used to determine the angle of the first bounding rectangle drawn by the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.GetFixedState">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.GetFixedState" />.
            </summary>
      <remarks>
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetFixedState" />.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.SetFixedState(System.Boolean,System.Boolean)">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" />.
            </summary>
      <param name="fixedState">true to make the AnnObject fixed; false to allow it to move freely </param>
      <param name="adjust">true to automatically adjust the AnnObject when changing the fixed state; false to have no adjusting performed.</param>
      <remarks>
            Sets the fixed state of every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" />.
            <para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnObject.GetFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.PushFixedState">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            </summary>
      <remarks>
            Temporarily disables the <b>fixed</b> state of every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupObject.PopFixedState">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" />.
            </summary>
      <remarks>
            Re-enables the <b>fixed</b> state of every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" />.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Objects">
      <summary>
            Gets the collection of annotation objects (of various classes derived from <see cref="T:Leadtools.Annotations.AnnObject" />) contained in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The collection of <see cref="T:Leadtools.Annotations.AnnObject" /> objects assigned to this <see cref="T:Leadtools.Annotations.AnnGroupObject" />.</value>
      <remarks>
            (Read only) The <b>Objects</b> property is a zero-based indexed collection used to hold all the <see cref="T:Leadtools.Annotations.AnnObject" /> objects assigned 
            to this <see cref="T:Leadtools.Annotations.AnnGroupObject" />. Since the property is read-only, it cannot be assigned a collection of objects directly. 
            Objects can be added or removed by using the methods inherited from the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> class. 
            Use the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;.Add</see> method to add individual objects and the <see cref="M:Leadtools.RasterCollection`1.Remove(`0)" /> method to remove an object. 
            Call the <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;.Clear</see> method to remove all the objects from the collection.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Container">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnContainer" /> object that contains this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnContainer" /> object that contains this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the container for all objects in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.Container" />.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.InvalidRectangle">
      <summary>
            Gets the physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The physical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            (Read only) This property is updated with a union of the invalid rectangles of all objects inside the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.InvalidRectangle" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will return the union of annotation bounding rectangles of all objects inside the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.BoundingRectangle" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Temporary">
      <summary>
            Gets or sets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is a temporary group.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is a temporary group; false otherwise.</value>
      <remarks>
            The automation mode makes extensive use of temporary group objects when multiple objects are selected but not grouped permanently.  
            This property is intended for use by the annotation framework and should not be called directly by the user.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.SerializePassword">
      <summary>
            Gets or sets a value indicating whether the password is saved when this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is serialized.
            </summary>
      <value>true if this password is saved when this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is serialized; false otherwise.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> class overrides the AnnObject.SerializePassword to set the <see cref="P:Leadtools.Annotations.AnnObject.SerializePassword" /> property of all objects in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.SerializePassword" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.SupportsPen">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a pen.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a pen; false otherwise.</value>
      <remarks>
            (Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> property is true. If the AnnDrawable.SupportsPen property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.HasPen">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a pen.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a pen; false otherwise.</value>
      <remarks>
        <p>(Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.HasPen" /> property is true. If the AnnDrawable.HasPen property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.HasPen" />.</p>
        <p>If this group object has a pen, information about that pen is contained in the <see cref="P:Leadtools.Annotations.AnnGroupObject.Pen" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Pen">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPen" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPen" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all 
            objects in the group and return the pen of the first object that has its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> 
            value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all 
            objects in the group and set the <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" /> value for each object that has 
            its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsPen" /> value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Pen" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.SupportsBrush">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a brush.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a brush; false otherwise.</value>
      <remarks>
        <p>(Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> property is true. If the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.HasBrush">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a brush.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a brush; false otherwise.</value>
      <remarks>
        <p>(Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.HasBrush" /> property is true. If the AnnDrawable.HasBrush property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.HasBrush" />.</p>
        <p>If this group object has a brush, information about that brush is contained in the <see cref="P:Leadtools.Annotations.AnnGroupObject.Brush" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Brush">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnBrush" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnBrush" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all 
            objects in the group and return the brush of the first object that has its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> 
            value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all 
            objects in the group and set the <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" /> value for each object that has 
            its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsBrush" /> value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Brush" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.SupportsFont">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a font.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object supports a font; false otherwise.</value>
      <remarks>
        <p>(Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> property is true. If the <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.HasFont">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a font.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object has a font; false otherwise.</value>
      <remarks>
        <p>(Read only) Internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will check each annotation object in the group to see if 
            the <see cref="P:Leadtools.Annotations.AnnDrawable.HasFont" /> property is true. If the AnnDrawable.HasFont property is true 
            for any annotation object in the group, then this property returns true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.HasFont" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Font">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnFont" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnFont" /> object associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all 
            objects in the group and return the font of the first object that has its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> 
            value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Font" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all 
            objects in the group and set the <see cref="P:Leadtools.Annotations.AnnDrawable.Font" /> value for each object that has 
            its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.Font" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.TextColor">
      <summary>
            Gets or sets the text color associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The text color associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all 
            objects in the group and return the text color of the first object that has its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> 
            value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.TextColor" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all 
            objects in the group and set the <see cref="P:Leadtools.Annotations.AnnDrawable.TextColor" /> value for each object that has 
            its <see cref="P:Leadtools.Annotations.AnnDrawable.SupportsFont" /> value set to true.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnDrawable.TextColor" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Hyperlink">
      <summary>
            Gets or sets a string which represents the hyperlink for this <see cref="T:Leadtools.Annotations.AnnObject" /> object.
            </summary>
      <value>The hyperlink for this <see cref="T:Leadtools.Annotations.AnnObject" /> object.</value>
      <remarks>
            If the value of <see cref="P:Leadtools.Annotations.AnnGroupObject.Temporary" /> is true, this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.Hyperlink" /> property of all objects in the group.  
            For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.Hyperlink" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.TextImplemented">
      <summary>
            Gets a value that indicates whether any annotation object in this group object implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  
            This is used internally by the annotation framework. 
            User-defined classes that implement this interface should provide an implementation of this property that returns true.
            </summary>
      <value>true if any object in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface; false otherwise.</value>
      <remarks>(Read only)</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Text">
      <summary>
            Gets or sets the text string associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The text string associated with this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the text of the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.Text" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the text for each object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.Text" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Alignment">
      <summary>
            Gets or sets a value that indicates the text alignment.
            </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the text alignment.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the alignment of the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.Alignment" />.</p>
        <p>When "setting this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the alignment for each object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.Alignment" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.LineAlignment">
      <summary>
            Gets or sets a value that represents the line alignment.
            </summary>
      <value>A <see cref="T:System.Drawing.StringAlignment" /> value that specifies the line alignment.</value>
      <remarks>
        <p>This is the vertical alignment of the text inside the bounding rectangle.</p>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the line alignment of the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.LineAlignment" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the line alignment for each object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.LineAlignment" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.EdgeMargin">
      <summary>
            Gets or sets the margin between the text and the bounding rectangle.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the margin between the text and the bounding rectangle.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the margin of the first annotation object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.EdgeMargin" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the margin for each object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.EdgeMargin" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.TextRotate">
      <summary>
            Gets or sets the rotation value.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTextRotate" /> value that represents how much this <see cref="T:Leadtools.Annotations.IAnnTextObject" /> object should be rotated.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the rotation value for the first annotation object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.TextRotate" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the rotation value for ecah object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.TextRotate" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.UseBrushAsTextBackground">
      <summary>
            Gets or sets a value that indicates whether to use the brush to fill only the text area or all of the object.
            </summary>
      <value>
        <strong>true</strong> to use the brush to fill only the text area of the object, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the value for the first annotation object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.TextRotate" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the value for ecah object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnTextObject.TextRotate" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.RulerImplemented">
      <summary>
            Gets a value that indicates whether any annotation object in this group object implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  
            This is used internally by the annotation framework. 
            User-defined classes that implement this interface should provide an implementation of this property that returns true.
            </summary>
      <value>true if any object in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface; false otherwise.</value>
      <remarks>(Read only) </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.MeasurementUnit">
      <summary>
            Gets or sets a value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and return the the unit of measure for rulers for the first annotation object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the unit of measure for rulers for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.MeasurementUnit" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.AnnGroupObject.MeasurementUnit" /> property value used by the object.
            </summary>
      <value>A string value that specifies the abbreviation to be used for the <see cref="P:Leadtools.Annotations.AnnGroupObject.MeasurementUnit" /> property value.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the UnitAbbreviation property value of the first annotation object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.UnitAbbreviation" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the unit UnitAbbreviation property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.UnitAbbreviation" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.TickMarksLength">
      <summary>
            Gets or sets the length of the tick marks for rulers in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> value that specifies the length of the tick marks for rulers in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the <b>TickMarksLength</b> property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.TickMarksLength" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will enumerate all objects in the group and set the <b>TickMarksLength</b> property for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.TickMarksLength" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object are visible.
            </summary>
      <value>true if the tick marks for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object are visible; false otherwise.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the ShowTickMarks property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowTickMarks" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the ShowTickMarks property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowTickMarks" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the GaugeLength property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.GaugeLength" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the GaugeLength property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.GaugeLength" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is visible.
            </summary>
      <value>true if the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is visible; false otherwise.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the ShowGauge property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowGauge" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the ShowGauge property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowGauge" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ShowLength">
      <summary>
            Gets or sets a value that indicates whether to display the length of rulers in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>true to show the length of rulers in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object; false otherwise.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the ShowLength property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the gorup and set the ShowLength property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the text representing the length of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the text representing the length to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the <see cref="P:Leadtools.Annotations.AnnGroupObject.RestrictLength" /> property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the gorup and set the <see cref="P:Leadtools.Annotations.AnnGroupObject.RestrictLength" /> property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.ShowLength" />.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Precision">
      <summary>
            Gets or sets the number of digits to the right of the decimal point when displaying the ruler's length in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The number of digits to the right of the decimal point. Possible values are from 0 to 6. </value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the Precision property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.Precision" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the Precision property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.Precision" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the DpiX property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.DpiX" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the DpiX property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.DpiX" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the DpiY property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.DpiY" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the DpiY property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnRulerObject.DpiY" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ProtractorImplemented">
      <summary>
            Gets a value that indicates whether any annotation object in this group object implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  
            This is used internally by the annotation framework. 
            User-defined classes that implement this interface should provide an implementation of this property that returns true.
            </summary>
      <value>true if any object in this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface; false otherwise.</value>
      <remarks>(Read only) </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Acute">
      <summary>
            Gets or sets a value that indicates whether to mark the inside (acute) or outside (obtuse) angle for this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>true if the inside (acute) angle is to be marked; otherwise, false.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the Acute property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface. For more information refer to <see cref="P:Leadtools.Annotations.AnnProtractorObject.Acute" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the Acute property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface. For more information refer to <see cref="P:Leadtools.Annotations.AnnProtractorObject.Acute" />.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.AngularUnit">
      <summary>
            Gets or sets the unit of measure used for any angles in this group.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> value that specifies the unit of measure to be used for any angles in this group.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the AngularUnit property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the AngularUnit property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnit" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.AngularUnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation to be used for the <see cref="P:Leadtools.Annotations.AnnGroupObject.AngularUnit" /> property value.
            </summary>
      <value>A string value that specifies the abbreviation to be used for the <see cref="P:Leadtools.Annotations.AnnGroupObject.AngularUnit" /> property value.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the AngularUnitAbbreviation property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnitAbbreviation" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the AngularUnitAbbreviation property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AngularUnitAbbreviation" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ShowAngle">
      <summary>
            Gets or sets a value indicating whether the angle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is visible.
            </summary>
      <value>true if the angle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is visible; false otherwise.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the ShowAngle property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ShowAngle" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the ShowAngle property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ShowAngle" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.AnglePrecision">
      <summary>
            Gets or sets the number of digits to display to the right of the decimal point in the angle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The number of digits to the right of the decimal point. Possible values are from 0 to 6.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the AnglePrecision property value for the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AnglePrecision" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the AnglePrecision property value for each object that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.AnglePrecision" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ArcRadius">
      <summary>
            Gets or sets the arc radius of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The arc radius of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
        <p>When "getting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and return the arc radius of the first object in the group that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ArcRadius" />.</p>
        <p>When "setting" this property, internally this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will enumerate all objects in the group and set the arc radius for each object that implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  For more information refer to <see cref="P:Leadtools.Annotations.IAnnProtractorObject.ArcRadius" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameForeColor">
      <summary>
            Gets or sets the color used to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color used to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.NameForeColor" /> property for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameForeColor" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameBackColor">
      <summary>
            Gets or sets the color used to fill the background of the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the color used to fill the background of the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.NameBackColor" /> property for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameBackColor" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameFont">
      <summary>
            Gets or sets the font used to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The font used to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.NameFont" /> property for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameFont" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameVisible">
      <summary>
            Gets or sets a value that indicates whether to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>true to draw the name of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object when the object is drawn; false otherwise.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.NameVisible" /> value for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameVisible" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameRestrict">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> name is restricted to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnGroupObject.Container" />.
            </summary>
      <value>true to restrict the name to appear fully within the bounding rectangle of the <see cref="P:Leadtools.Annotations.AnnGroupObject.Container" />; otherwise, false.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object will set the <see cref="P:Leadtools.Annotations.AnnObject.NameRestrict" /> value for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameRestrict" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.NameOffset">
      <summary>
            Gets or sets the name offset relative to the upper left corner of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.
            </summary>
      <value>The name offset relative to the upper left corner of the bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will set the <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" /> value for each object in the group.  For more information, refer to <see cref="P:Leadtools.Annotations.AnnObject.NameOffset" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen">
      <summary>
            Gets or sets the background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </summary>
      <value>
            The background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnGroupObject.ObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnGroupObject.FrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnGroupObject.ObjectPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></remarks>
      <example>
        <para>This example changes the following properties of the <see cref="T:Leadtools.Annotations.AnnGroupObject" />:
            <list type="bullet"><item><description>the Outline forecolor to white</description></item><item><description>the Outline backcolor to black</description></item><item><description>the Pen used to outline selected objects to purple</description></item></list>
            These show when drawing a group outline with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /></para>
        <code lang="VB">      Public Sub AnnGroupObject_FrameBackPen(ByVal obj As AnnGroupObject)
         Dim back As AnnPen = obj.FrameBackPen
         Dim fore As AnnPen = obj.FrameForePen
         obj.FrameBackPen = New AnnPen(System.Drawing.Color.Black, New AnnLength(3, AnnUnit.Pixel))
         obj.FrameForePen = New AnnPen(System.Drawing.Color.White, New AnnLength(3, AnnUnit.Pixel))
         obj.FrameForePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
         obj.ObjectPen = New AnnPen(System.Drawing.Color.MediumPurple, New AnnLength(4, AnnUnit.Pixel))
      End Sub</code>
        <code lang="CS">      public void AnnGroupObject_FrameBackPen(AnnGroupObject obj)
      {
         AnnPen back = obj.FrameBackPen;
         AnnPen fore = obj.FrameForePen;
         obj.FrameBackPen = new AnnPen(System.Drawing.Color.Black, new AnnLength(3, AnnUnit.Pixel));
         obj.FrameForePen = new AnnPen(System.Drawing.Color.White, new AnnLength(3, AnnUnit.Pixel));
         obj.FrameForePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
         obj.ObjectPen = new AnnPen(System.Drawing.Color.MediumPurple, new AnnLength(4, AnnUnit.Pixel));
      }</code>
        <!--AnnGroupObject.FrameBackPen-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.FrameForePen">
      <summary>
            Gets or sets the background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </summary>
      <value>
            The background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnGroupObject.ObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnGroupObject.ObjectPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.ObjectPen">
      <summary>
            Gets or sets the background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </summary>
      <value>
            The background <see cref="T:Leadtools.Annotations.AnnPen" /> uses when drawing the group outline for <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnGroupObject.FrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnGroupObject.ObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnGroupObject.FrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnGroupObject.FrameBackPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.SupportsFixed">
      <summary>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" /> property. It:
            <para>
            Returns true if any of the objects in group support the <b>fixed</b> state.</para><para>Returns false if no object in the group supports the <b>fixed</b> state.</para><para>
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />, <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" /> and <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.</para><para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupObject.annRulerInternal">
      <exclude />
    </member>
    <member name="T:Leadtools.Annotations.AnnPrinter">
      <summary>
            Supports printing of an <see cref="T:Leadtools.RasterImage" /> and a <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <remarks>
        <p>The <b>AnnPrinter</b> class derives from <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> to make the process of printing an <see cref="T:Leadtools.Annotations.AnnContainer" /> on top of an <see cref="T:Leadtools.RasterImage" /> easier.</p>
        <p>Printing using the .NET framework involves adding a handler to the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event.  In that event handler, you set up a new instance of the <b>AnnPrinter</b> class, set up its properties as desired, and then call the <see cref="M:Leadtools.Annotations.AnnPrinter.Print(Leadtools.RasterImage,System.Int32,Leadtools.Annotations.AnnContainer,System.Drawing.Printing.PrintPageEventArgs)" /> method passing it the <see cref="T:Leadtools.RasterImage" /> to print, the image page number, the <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the annotation objects to be printed and the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object obtained through your <see cref="T:System.Drawing.Printing.PrintPageEventHandler" />.</p>
      </remarks>
      <example>
        <para>This example loads an image, creates annotations, and prints.</para>
        <code lang="VB">      Private myImage As RasterImage
      Private myContainer As AnnContainer
      Private Sub AnnPrinter_AnnPrinter()
         ' load an image
         Dim codecs As RasterCodecs = New RasterCodecs()
         myImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))
         ' create a new container and add a few objects
         myContainer = New AnnContainer()
         myContainer.Bounds = New AnnRectangle(0, 0, myImage.Width, myImage.Height)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 300, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(4, AnnUnit.Pixel))
         myContainer.Objects.Add(lineObj)

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.Yellow)
         myContainer.Objects.Add(rectObj)

         ' intitialize a new PrintDocument object
         If Not PrinterSettings.InstalledPrinters Is Nothing AndAlso PrinterSettings.InstalledPrinters.Count &gt; 0 Then
            Dim printDocument As PrintDocument = New PrintDocument()
            AddHandler printDocument.PrintPage, AddressOf PrintDocument_PrintPage
            printDocument.Print()
         End If

         ' dispose the image
         myImage.Dispose()
      End Sub

      Private Sub PrintDocument_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
         Dim printer As AnnPrinter = New AnnPrinter()

         ' We want normal size (not zoomed) but centered
         printer.SizeMode = RasterPaintSizeMode.Fit
         printer.HorizontalAlignMode = RasterPaintAlignMode.Center
         printer.VerticalAlignMode = RasterPaintAlignMode.Center

         ' print the whole image
         printer.ImageRectangle = Rectangle.Empty

         ' use maximum page
         printer.PageRectangle = RectangleF.Empty

         ' Win32 GDI printing and scale to gray
         Dim props As RasterPaintProperties = RasterPaintProperties.Default
         props.PaintEngine = RasterPaintEngine.Gdi
         props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
         printer.PaintProperties = props
         printer.Print(myImage, myImage.Page, myContainer, e)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      RasterImage myImage;
      AnnContainer myContainer;
      private void AnnPrinter_AnnPrinter()
      {
         // load an image
         RasterCodecs codecs = new RasterCodecs();
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp");
         myImage = codecs.Load(fileName);
         // create a new container and add a few objects
         myContainer = new AnnContainer();
         myContainer.Bounds = new AnnRectangle(0, 0, myImage.Width, myImage.Height);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 300, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(4, AnnUnit.Pixel));
         myContainer.Objects.Add(lineObj);

         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.Yellow);
         myContainer.Objects.Add(rectObj);

         // intitialize a new PrintDocument object
         if(PrinterSettings.InstalledPrinters != null &amp;&amp; PrinterSettings.InstalledPrinters.Count &gt; 0)
         {
            PrintDocument printDocument = new PrintDocument();
            printDocument.PrintPage += new PrintPageEventHandler(PrintDocument_PrintPage);
            printDocument.Print();
         }

         // dispose the image
         myImage.Dispose();
      }

      private void PrintDocument_PrintPage(object sender, PrintPageEventArgs e)
      {
         AnnPrinter printer = new AnnPrinter();

         // We want normal size (not zoomed) but centered
         printer.SizeMode = RasterPaintSizeMode.Fit;
         printer.HorizontalAlignMode = RasterPaintAlignMode.Center;
         printer.VerticalAlignMode = RasterPaintAlignMode.Center;

         // print the whole image
         printer.ImageRectangle = Rectangle.Empty;

         // use maximum page
         printer.PageRectangle = RectangleF.Empty;

         // Win32 GDI printing and scale to gray
         RasterPaintProperties props = RasterPaintProperties.Default;
         props.PaintEngine = RasterPaintEngine.Gdi;
         props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
         printer.PaintProperties = props;
         printer.Print(myImage, myImage.Page, myContainer,e);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnPrinter.AnnPrinter-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPrinter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPrinter" /> class.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.Annotations.AnnPrinter" /> example.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPrinter.Print(Leadtools.RasterImage,System.Int32,Leadtools.Annotations.AnnContainer,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
            Prints the specified <see cref="T:Leadtools.RasterImage" /> and <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> to be printed.</param>
      <param name="page">The page number to be printed.</param>
      <param name="container">The <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the annotation objects to be printed.</param>
      <param name="e">An <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object that contains print data.</param>
      <remarks>
        <p>The <i>page</i> parameter is 1-based.</p>
        <p>You usually call this method from the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event handler of a <see cref="T:System.Drawing.Printing.PrintDocument" /> object.  You must pass the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> obtained in the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event handler to this method as the <i>e</i> parameter.</p>
        <p>You can pass null (Nothing) for either <i>image</i> or <i>container</i> to not print the specified object.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPrinter" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextPointerObject">
      <summary>
            This class provides support for creating and managing text pointer objects.
            </summary>
      <remarks>
        <para>
            The text pointer annotation object extends the <see cref="T:Leadtools.Annotations.AnnTextObject" /> class by providing 
            an extra line that starts from one of the four corners of the bounding rectangle, around 
            the text. The other endpoint of the line can be moved to point to anything on the underlying 
            image. This extra endpoint may or may not be fixed, depending on the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.FixedPointer" /> value. 
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see>
            For more information about the text pointer annotation object refer to 
            <see cref="T:AN.Topics.AnnTextPointerObject">AnnTextPointerObject</see>. 
            For more information about the automated text pointer annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example creates a new text pointer object.</para>
        <code lang="VB">      Private Sub AnnTextPointerObject_AnnTextPointerObject(ByVal container As AnnContainer, ByVal textString As String)
         Dim textPointer As AnnTextPointerObject = New AnnTextPointerObject()
         textPointer.Text = textString
         textPointer.Pen = New AnnPen(Color.Green, New AnnLength(5))
         textPointer.Brush = New AnnSolidBrush(Color.White)
         textPointer.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         textPointer.EdgeMargin = AnnLength.Empty
         textPointer.Alignment = StringAlignment.Center
         textPointer.LineAlignment = StringAlignment.Center
         textPointer.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         textPointer.PointerPosition = New AnnPoint(800, 800, AnnUnit.Pixel)
         textPointer.FixedPointer = True
         container.Objects.Add(textPointer)
      End Sub</code>
        <code lang="CS">      private void AnnTextPointerObject_AnnTextPointerObject(AnnContainer container, string textString)
      {
         AnnTextPointerObject textPointer = new AnnTextPointerObject();
         textPointer.Text = textString;
         textPointer.Pen = new AnnPen(Color.Green, new AnnLength(5));
         textPointer.Brush = new AnnSolidBrush(Color.White);
         textPointer.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         textPointer.EdgeMargin = AnnLength.Empty;
         textPointer.Alignment = StringAlignment.Center;
         textPointer.LineAlignment = StringAlignment.Center;
         textPointer.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         textPointer.PointerPosition = new AnnPoint(800, 800, AnnUnit.Pixel);
         textPointer.FixedPointer = true;
         container.Objects.Add(textPointer);
      }</code>
        <!--AnnTextPointerObject.AnnTextPointerObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies the path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class overrides this property, the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.TransformObjectMode" /> property and 
            the <see cref="M:Leadtools.Annotations.AnnTextPointerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method to ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object will 
            not transform the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> value when the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.FixedPointer" /> value 
            is true.  Also, it will ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object will not allow the bounding 
            rectangle of the text to be rotated itself; instead, the bounding rectangle will rotate around the origin point 
            keeping the rectangle intact.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the 
            transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify 
            which transformation method was called.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class overrides this property, the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.TransformObjectMode" /> property and the <see cref="M:Leadtools.Annotations.AnnTextPointerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method
            to ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object will not transform the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> 
            value when the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.FixedPointer" /> value is true.  Also, it will ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object 
            will not allow the bounding rectangle of the text to be rotated itself; instead, the bounding rectangle will rotate 
            around the origin point keeping the rectangle shape intact.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition">
      <summary>
            Gets or sets the position of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object's pointer.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the position of the pointer</value>
      <remarks>
            The pointer will be drawn as the shortest straight line between any of the 4 corners 
            of the bounding rectangle and this position.  The annotation framework will update 
            this line automatically when this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object is transformed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerObject.FixedPointer">
      <summary>
            Gets or sets a value that indicates whether the pointer of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object is fixed.
            </summary>
      <value>true if the pointer of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object is fixed; false otherwise.</value>
      <remarks>
            The position of the pointer is given in the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> property. The
            FixedPointer property determines what happens to the pointer when this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object 
            is transformed.  For example, if the FixedPointer property is false, and this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object 
            gets translated by 10 pixels in  both the X and Y directions, the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> value will be translated
            by 10 pixels in each direction as well.  
            If the FixedPointer property is true however, any transformation on the object itself 
            will not affect the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> value.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> 
            when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that specifies how to transform 
            this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object when any object transformation method 
            is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class overrides this property to 
            return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  This and the <see cref="M:Leadtools.Annotations.AnnTextPointerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> 
            and <see cref="M:Leadtools.Annotations.AnnTextPointerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> 
            object will not transform the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.PointerPosition" /> value when the <see cref="P:Leadtools.Annotations.AnnTextPointerObject.FixedPointer" /> 
            value is true.  Also, it will ensure that this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object will not 
            allow the bounding rectangle of the text to be rotated itself: instead, the bounding rectangle will 
            rotate around the origin point keeping the rectangle intact.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> object.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> class overrides this member to return 
            the logical bounding rectangle of the object.  This bounding rectangle contains the  
            bounding rectangle of the text, as well as the pointer line.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPointerObject">
      <summary>
            Defines an annotation pointer object.
            </summary>
      <remarks>
        <para>
            The pointer annotation object is defined by two points, with an arrow at the first point. 
            For more information about the pointer annotation object refer to 
            <see cref="T:AN.Topics.AnnPointerObject">AnnPointerObject</see>. 
            For more information about the automated pointer annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example adds a new pointer object to a container.</para>
        <code lang="VB">      Private Sub AnnPointerObject_AnnPointerObject(ByVal container As AnnContainer)
         Dim pointer As AnnPointerObject = New AnnPointerObject()
         pointer.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         pointer.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         pointer.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         container.Objects.Add(pointer)
      End Sub</code>
        <code lang="CS">      private void AnnPointerObject_AnnPointerObject(AnnContainer container)
      {
         AnnPointerObject pointer = new AnnPointerObject();
         pointer.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         pointer.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         pointer.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         container.Objects.Add(pointer);
      }</code>
        <!--AnnPointerObject.AnnPointerObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnLineObject">
      <summary>
            Defines an annotation line object.
            </summary>
      <remarks>
        <para>The line annotation object is a simple line that has a start point, an end point and a pen. 
            For more information about the line annotation object refer to 
            <see cref="T:AN.Topics.AnnLineObject">AnnLineObject</see>. 
            For more information about the automated line annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
            </para>
      </remarks>
      <example>
        <para>This example creates a new line object from 100, 200 to 400, 600 pixels with red pen and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnLineObject_AnnLineObject(ByVal container As AnnContainer)
         Dim line As AnnLineObject = New AnnLineObject()
         line.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         line.StartPoint = New AnnPoint(100, 200, AnnUnit.Pixel)
         line.EndPoint = New AnnPoint(400, 600, AnnUnit.Pixel)
         container.Objects.Add(line)
      End Sub</code>
        <code lang="CS">      private void AnnLineObject_AnnLineObject(AnnContainer container)
      {
         AnnLineObject line = new AnnLineObject();
         line.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         line.StartPoint = new AnnPoint(100, 200, AnnUnit.Pixel);
         line.EndPoint = new AnnPoint(400, 600, AnnUnit.Pixel);
         container.Objects.Add(line);
      }</code>
        <!--AnnLineObject.AnnLineObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnLineObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnLineObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnLineObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnLineObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnLineObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnLineObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnLineObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.ResetRotatePoints">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnLineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnLineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnLineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineObject.CalculateRotateAngle">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnLineObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLineObject.StartPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPoint" /> that specifies the starting point for this <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <noremarks />
      <value>The <see cref="T:Leadtools.Annotations.AnnPoint" /> that specifies the starting point for this <see cref="T:Leadtools.Annotations.AnnLineObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLineObject.EndPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the ending point for this <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <noremarks />
      <value>The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the ending point for this <see cref="T:Leadtools.Annotations.AnnLineObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLineObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPointerObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPointerObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPointerObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnPointerObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnPointerObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointerObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPointerObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPointerObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointerObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRulerInternal">
      <exclude />
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerInternal.#ctor(System.Single,System.Single,System.Single)">
      <exclude />
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerInternal.SaveCalibrateValues(System.Single,System.Single,System.Single)">
      <exclude />
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerInternal.NeverCalibrated">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerInternal.PrevPixelLengthX">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerInternal.PrevDistInches">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerInternal.PrevPixelLengthY">
      <exclude />
    </member>
    <member name="T:Leadtools.Annotations.AnnNewGroupEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> on an annotation container.
            This class has improved rotate functionality over the <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" />.
            </summary>
      <remarks>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNewGroupEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> object.
            </summary>
      <remarks>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNewGroupEditDesigner.Start">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.Start" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnEditDesigner.Start" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNewGroupEditDesigner.End">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.End" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnEditDesigner.End" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNewGroupEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)" />.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" /> value which represents the current operation.</param>
      <param name="controlPointIndex">An integer that represents the Index of the edited control point (or -1 if no control point is being edited).</param>
      <param name="clipCursor">true to clip the mouse cursor; otherwise false.</param>
      <param name="hittestObject">An <see cref="T:System.Object" /> that represents the hit test object obtained from the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method.</param>
      <returns>
      </returns>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnEditDesigner.StartWorking(Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Boolean,System.Object)" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnNewGroupEditDesigner.EditObjectInvalidRectangle">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObjectInvalidRectangle" />.
            </summary>
      <value>
            The <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObjectInvalidRectangle" />.
            </value>
      <remarks>
            (Read only) For more information, refer to <see cref="P:Leadtools.Annotations.AnnEditDesigner.EditObjectInvalidRectangle" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDrawDesignerEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnDrawDesigner.Draw" /> event.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDrawDesignerEventArgs.#ctor(Leadtools.Annotations.AnnObject,Leadtools.Annotations.AnnDesignerOperationStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnDrawDesignerEventArgs" /> class.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> currently being drawn.</param>
      <param name="operationStatus">An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the current status of the drawing operation.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesignerEventArgs.Object">
      <summary>
            Gets the <see cref="T:Leadtools.Annotations.AnnObject" /> object currently being drawn.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> object that represents the object currently being drawn by the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesignerEventArgs.OperationStatus">
      <summary>
            Gets the current draw operation status.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the status of the current drawing operation of the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnDrawDesignerEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the drawing operation should be canceled.
            </summary>
      <value>true to cancel the current drawing operation; otherwise, false.</value>
      <remarks>
            You should set this property to true to cancel the current drawing operation of the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> that raised this event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnSnapToGridOptions">
      <summary>
            Options for annotation snap to grid behavior in annotation automation design mode.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> class is used with the <see cref="P:Leadtools.Annotations.AnnContainer.SnapToGridOptions">AnnContainer.SnapToGridOptions</see> property
            to get or set the annotation snap to grid behavior in annotation automation design mode. You can then enable or disable snapping to grid by using
            the <see cref="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid">AnnContainer.EnableSnapToGrid</see> property.</para>
        <para>The snap-to-grid feature is used in annotation automation design mode to allow the user to precisely draw, locate, and align annotation objects.
            When snap-to-grid is enabled (<see cref="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid">AnnContainer.EnableSnapToGrid</see> is set to <strong>true</strong>), a grid
            pattern consisting of dots and lines is overlayed on the image beging annotated. When creating annotations in design mode, each point snaps to the
            nearest grid point. This beavior holds for creating any annotation object except the freehand annotation. When creating a freehand annotation, the
            individual points do not snap to the nearest grid point because this would adversely affect the behavior of the freehand. The snap-to-grid feature
            affects the moving of all annotations object types in design mode, in that the bounding box of the annotation object snaps to the nearest grid point.</para>
        <para>The grid that is overlayed can be customized by color (<see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridColor" />), grid spacing (<see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridLength" />), and line
            frequency (<see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.LineSpacing" />). For example, to display a red grid that has a dot pattern every 20 pixels, and solid lines every 100 pixels,
            you would set:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <c>GridColor = Color.Red</c>
              </description>
            </item>
            <item>
              <description>
                <c>LineSpacing = 20</c>
              </description>
            </item>
            <item>
              <description>
                <c>LineStyle = DashStyle.Solid</c>
              </description>
            </item>
          </list>
        </para>
        <para>The lines of the grid can be removed completely by setting <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridColor" /> to be <see cref="T:System.Drawing.Color">Color.Transparent</see>. The lines
            of the grid can be drawn in any style (<see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.LineStyle" />). The grid itself can be hidden by setting <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.ShowGrid" /> to <strong>false</strong>
            so that the snap-to-grid feature is still on without the grid being overlaid on the image. Conversely, the grid can be displayed
            by setting <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.ShowGrid" /> to <strong>true</strong> while disabling the snap-to-grid-behavior by setting
            <see cref="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid">AnnContainer.EnableSnapToGrid</see> to <strong>true</strong>.</para>
        <para>Setting <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.AutoChangeGridLength" /> to <strong>true</strong> affects the grid density when zooming. The effect is that when zooming to
            200<![CDATA[&#37;]]>, the density of the dot pattern doubles. When zooming to 400<![CDATA[&#37;]]>, the density doubles again  The density doubles at 200<![CDATA[&#37;]]>, 400<![CDATA[&#37;]]>, 800<![CDATA[&#37;]]>, 1600<![CDATA[&#37;]]> and so
            on as long as it is meaningful to double the density. In other words, if doubling the dot density would create a dot where no pixel exists when
            viewing at 100<![CDATA[&#37;]]>, then the dot density will not change.  The following examples illustrate this.</para>
        <h3>Example 1: <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridLength" /> is 10</h3>
        <para>The dot density doubles at 200<![CDATA[&#37;]]> because 10 is evenly divisible by 2.</para>
        <para>The dot density does not double again at 400<![CDATA[&#37;]]> because 10 do not evenly divide 4.</para>
        <h3>Example 2:  <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridLength" /> is 20</h3>
        <para>The dot density doubles at 200<![CDATA[&#37;]]>, and doubles again at 400<![CDATA[&#37;]]>.</para>
        <para>The dot density does not double again at 800<![CDATA[&#37;]]> because 20 does not divide 8 evenly.</para>
        <h3> Example 3: <see cref="P:Leadtools.Annotations.AnnSnapToGridOptions.GridLength" /> is 21 </h3>
        <para>The dot density doubles at 200<![CDATA[&#37;]]>, and doubles again at 400<![CDATA[&#37;]]>.</para>
        <para>The dot density never changes because 21 is a prime number.</para>
        <para>The snap-to-grid behavior can be turned on our off in annotation automation mode by right-clicking on a part of the image that does not
            contain an annotation, and selecting the <strong>Snap To Grid</strong> option from the context menu. The snap-to-grid behavior can be
            customized in annotation automation mode by:</para>
        <list type="number">
          <item>
            <description>
              <para>Right-clicking on a part of the image that does not contain an annotation</para>
            </description>
          </item>
          <item>
            <description>
              <para>Selecting Default Properties</para>
            </description>
          </item>
          <item>
            <description>
              <para>Clicking on the "Snap to Grid..." menu option</para>
            </description>
          </item>
        </list>
      </remarks>
      <example>
        <para>
          <para>This example:</para>
          <list type="bullet">
            <item>
              <description>
                <para>Gets the current state of the snap-to-grid</para>
              </description>
            </item>
            <item>
              <description>
                <para>Changes the snap to grid to grid size of 10, lines every ten row of dots, solid red lines</para>
              </description>
            </item>
            <item>
              <description>
                <para>Enables the snap to grid</para>
              </description>
            </item>
          </list>
        </para>
        <code lang="VB">      Private Shared Sub SnapToGridExample(ByVal automation As AnnAutomation)
         ' First use default
         automation.Container.EnableSnapToGrid = True
         automation.EnableSnapToGrid = True
         DisplaySnapToGrid(automation, "Original settings")
         ' Change snap-to-grid to grid size of 10, lines every ten row of dots, solid red lines, and enable it
         Dim options As New AnnSnapToGridOptions()
         options.AutoChangeGridLength = True
         options.EnableSnap = True
         options.ShowGrid = True
         options.GridColor = Color.Red
         options.GridLength = 10
         options.LineSpacing = 10
         options.LineStyle = DashStyle.Solid

         automation.Container.SnapToGridOptions = options
         DisplaySnapToGrid(automation, "New settings")
      End Sub

      Private Shared Sub DisplaySnapToGrid(ByVal automation As AnnAutomation, ByVal title As String)
         Dim options As AnnSnapToGridOptions = automation.Container.SnapToGridOptions

         Dim sb As New StringBuilder()
         sb.AppendLine("Grid color: " + options.GridColor.ToString())
         sb.AppendLine("Grid length: " + options.GridLength.ToString())
         sb.AppendLine("Line spacing: " + options.LineSpacing.ToString())
         sb.AppendLine("Line style: " + options.LineStyle.ToString())
         sb.AppendLine("Enable snap: " + options.EnableSnap.ToString())
         sb.AppendLine("Show grid: " + options.ShowGrid.ToString())
         sb.AppendLine("Auto-change grid length: " + options.AutoChangeGridLength.ToString())

         System.Windows.Forms.MessageBox.Show(sb.ToString(), title)
      End Sub</code>
        <code lang="CS">      private static void SnapToGridExample(AnnAutomation automation)
      {
         // First use default
         automation.Container.EnableSnapToGrid = true;
         automation.EnableSnapToGrid = true;
         DisplaySnapToGrid(automation, "Original settings");
         // Change snap-to-grid to grid size of 10, lines every ten row of dots, solid red lines, and enable it
         AnnSnapToGridOptions options = new AnnSnapToGridOptions();
         options.AutoChangeGridLength = true;
         options.EnableSnap = true;
         options.ShowGrid = true;
         options.GridColor = Color.Red;
         options.GridLength = 10;
         options.LineSpacing = 10;
         options.LineStyle = DashStyle.Solid;

         automation.Container.SnapToGridOptions = options;
         DisplaySnapToGrid(automation, "New settings");
      }

      private static void DisplaySnapToGrid(AnnAutomation automation, string title)
      {
         AnnSnapToGridOptions options = automation.Container.SnapToGridOptions;

         StringBuilder sb = new StringBuilder();
         sb.AppendLine("Grid color: " + options.GridColor);
         sb.AppendLine("Grid length: " + options.GridLength);
         sb.AppendLine("Line spacing: " + options.LineSpacing);
         sb.AppendLine("Line style: " + options.LineStyle);
         sb.AppendLine("Enable snap: " + options.EnableSnap);
         sb.AppendLine("Show grid: " + options.ShowGrid);
         sb.AppendLine("Auto-change grid length: " + options.AutoChangeGridLength);

         System.Windows.Forms.MessageBox.Show(sb.ToString(), title);
      }</code>
        <!--AnnSnapToGridOptions-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnSnapToGridOptions.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> class.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSnapToGridOptions.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> object that this class creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSnapToGridOptions.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnSnapToGridOptions.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.GridColor">
      <summary>
            Gets or sets a value indicating the color to use for the overlayed grid.
            </summary>
      <value>A <see cref="T:System.Drawing.Color" /> that indicates the value to use for the overlayed grid. Default value is <see cref="T:System.Drawing.Color">Color.Blue</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.GridLength">
      <summary>
            Gets or sets a value indicating the length of the grid (in pixels viewed at 100<![CDATA[&#37;]]>).
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the length of the grid in pixels (in pixels viewed at 100<![CDATA[&#37;]]>). Default value is 20.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.LineSpacing">
      <summary>
            Gets or sets a value indicating the frequency that lines are drawn over the grid dot-pattern.
            </summary>
      <value>An <see cref="T:System.Int32" /> that indicates the frequency that lines are drawn over the grid dot-pattern. Default value is 5.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.LineStyle">
      <summary>
            Gets or sets a value indicating the line style used to draw the grid.
            </summary>
      <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> enumeration member that indicates the line style used to draw the grid. Default value is <see cref="T:System.Drawing.Drawing2D.DashStyle">DashStyle.Solid.</see>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.EnableSnap">
      <summary>
            Gets or sets a value that indicates the 'snap' behavior when drawing or moving annotation objects in design mode.
            </summary>
      <value>
        <strong>true</strong> to enfore moving or drawing annotation objects snap to the nearest grid point, <strong>false</strong> to 
            not enforce moving or drawing annotation objects do not snap to nearest grid point. Default value is <strong>true</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.ShowGrid">
      <summary>
            Gets or sets a value that indicates whether do display the grid in design mode.
            </summary>
      <value>
        <strong>true</strong> to display the grid in design mode, otherwise; <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnSnapToGridOptions.AutoChangeGridLength">
      <summary>
            Gets or sets a value indicates whether to atomically increase the resolution of the grid when zooming in by 100<![CDATA[&#37;]]>, 200<![CDATA[&#37;]]>, 400<![CDATA[&#37;]]> and so on.
            </summary>
      <value>
        <strong>true</strong> to automatically increas the resolution of the grid when zooming if possible, otherwise; <strong>false</strong>.
            Default value is <strong>true</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRectangle">
      <summary>
            Stores a set of four floating-point numbers and a unit of measure that represents the location and size of a rectangle.
            </summary>
      <noremarks />
      <example>
        <para>This example creates an <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure and determines if it contains a CheckPoint.</para>
        <code lang="VB">      Private Sub AnnRectangle_AnnRectangle()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation rectangle that is located at 1.5 and 2 inches and has a width, height of 3 and 4 inches.
         Dim rc As AnnRectangle = New AnnRectangle(1.5F, 2.0F, 3.0F, 4.0F, AnnUnit.Inch)

         ' show the rectangle
         Dim s As String = String.Format("{0}", rc)
         MessageBox.Show(s)

         ' convert the rectangle to pixels
         rc.Convert(converter, AnnUnit.Pixel)

         ' show
         s = String.Format("{0}", rc)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnRectangle_AnnRectangle()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation rectangle that is located at 1.5 and 2 inches and has a width, height of 3 and 4 inches.
         AnnRectangle rc = new AnnRectangle(1.5f, 2f, 3f, 4f, AnnUnit.Inch);

         // show the rectangle
         string s = string.Format("{0}",rc);
         MessageBox.Show(s);

         // convert the rectangle to pixels
         rc.Convert(converter, AnnUnit.Pixel);

         // show
         s = string.Format("{0}", rc);
         MessageBox.Show(s);
      }</code>
        <!--AnnRectangle.AnnRectangle-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure using the specified dimensions.
            </summary>
      <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <remarks>The unit of measure will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.#ctor(System.Single,System.Single,System.Single,System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure at a specific location using specified dimensions and <see cref="T:Leadtools.Annotations.AnnUnit" /> value.
            </summary>
      <noremarks />
      <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="unit">The <see cref="T:Leadtools.Annotations.AnnUnit" /> value for the unit of measure</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.#ctor(System.Drawing.RectangleF)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure from a RectangleF.
            </summary>
      <noremarks />
      <param name="rect">A RectangleF structure that uses floating-point numbers that represents the location and size of the new <see cref="T:Leadtools.Annotations.AnnRectangle" />.</param>
      <remarks>The unit of measure will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.#ctor(System.Drawing.RectangleF,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure from a RectangleF structure and a unit of measure.
            </summary>
      <noremarks />
      <param name="rect">A RectangleF structure that uses floating-point numbers that represents the location and size of the new <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> value specifying the unit of measure to be used.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.#ctor(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnSize)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure at the specified location and of the specified size.
            </summary>
      <param name="location">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that represents the upper-left corner of the rectangular region.</param>
      <param name="size">An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that represents the width and height of the rectangular region.</param>
      <remarks>The new rectangle will have the same units as <i>location</i>.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnRectangle.Empty">
      <summary>
            Represents a new instance of the <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure with member data left uninitialized.
            </summary>
      <remarks>(Read only) An uninitialized rectangle has Left, Top, Width and Height values of 0 and a unit of measure of Pixel.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Contains(Leadtools.Annotations.AnnPoint)">
      <summary>
            Determines if the specified point is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure to be tested.</param>
      <returns>This method returns true if the point represented by the <i>pt</i> parameter is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure; otherwise false.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Contains(System.Single,System.Single)">
      <summary>
            Determines if the specified point is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <param name="x">The x-coordinate of the point to test.</param>
      <param name="y">The y-coordinate of the point to test.</param>
      <returns>This method returns true if the point defined by <i>x</i> and <i>y</i> is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure; otherwise false.</returns>
      <remarks>The point is treated as if its in the same unit as the AnnRectangle.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Contains(System.Single,System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Determines if the specified point with the specified unit of measure is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <param name="x">The x-coordinate of the point to test.</param>
      <param name="y">The y-coordinate of the point to test.</param>
      <param name="unit">The unit of measure for the specified coordinates.</param>
      <returns>This method returns true if the point defined by <i>x</i> and <i>y</i> is contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure; otherwise false.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Contains(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Determines if the rectangular region represented by <i>rect</i> is entirely contained within this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <param name="rect">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure to be tested.</param>
      <returns>This method returns true if the rectangular region represented by <i>rect</i> is entirely contained within the rectangular region represented by this <see cref="T:Leadtools.Annotations.AnnRectangle" />; otherwise false.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ToString">
      <summary>
            Overridden. Converts this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure to a human-readable string.
            </summary>
      <noremarks />
      <returns>A string that represents the attributes of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the left edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>A value for the left edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnRectangle" /> in inches and then shows the X, Y, Left, Top, Right, Bottom, Width and Height values in pixels.</para>
        <code lang="VB">      Public Sub AnnRectangle_ConvertedLeft()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation rectangle at 1.5F, 2.0F with width, height of 3.0F, and 4.0F in inches
         Dim rc As AnnRectangle = New AnnRectangle(1.5F, 2.0F, 3.0F, 4.0F, AnnUnit.Inch)

         Dim s As String

         ' show the rectangle
         s = String.Format("Rectangle is {0}" &amp; Constants.vbLf, rc)

         ' show the Left, Top, Right, Bottom, Width and Height of this rectangle in pixels
         s = s &amp; String.Format("Left is {0} Pixels" &amp; Constants.vbLf, rc.ConvertedLeft(converter, AnnUnit.Pixel))
         s = s &amp; String.Format("Top is {0} Pixels" &amp; Constants.vbLf, rc.ConvertedTop(converter, AnnUnit.Pixel))
         s = s &amp; String.Format("Right is {0} Pixels" &amp; Constants.vbLf, rc.ConvertedRight(converter, AnnUnit.Pixel))
         s = s &amp; String.Format("Bottom is {0} Pixels" &amp; Constants.vbLf, rc.ConvertedBottom(converter, AnnUnit.Pixel))
         s = s &amp; String.Format("Width is {0} Pixels" &amp; Constants.vbLf, rc.ConvertedWidth(converter, AnnUnit.Pixel))
         s = s &amp; String.Format("Height is {0} Pixels", rc.ConvertedHeight(converter, AnnUnit.Pixel))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnRectangle_ConvertedLeft()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation rectangle at 1.5F, 2.0F with width, height of 3.0F, and 4.0F in inches
         AnnRectangle rc = new AnnRectangle(1.5F, 2F, 3F, 4F, AnnUnit.Inch);

         string s;

         // show the rectangle
         s = string.Format("Rectangle is {0}\n", rc);

         // show the Left, Top, Right, Bottom, Width and Height of this rectangle in pixels
         s = s + string.Format("Left is {0} Pixels\n", rc.ConvertedLeft(converter, AnnUnit.Pixel));
         s = s + string.Format("Top is {0} Pixels\n", rc.ConvertedTop(converter, AnnUnit.Pixel));
         s = s + string.Format("Right is {0} Pixels\n", rc.ConvertedRight(converter, AnnUnit.Pixel));
         s = s + string.Format("Bottom is {0} Pixels\n", rc.ConvertedBottom(converter, AnnUnit.Pixel));
         s = s + string.Format("Width is {0} Pixels\n", rc.ConvertedWidth(converter, AnnUnit.Pixel));
         s = s + string.Format("Height is {0} Pixels", rc.ConvertedHeight(converter, AnnUnit.Pixel));
         MessageBox.Show(s);
      }</code>
        <!--AnnRectangle.ConvertedLeft-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedTop(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the top edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>A value for the top edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure .</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedRight(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the right edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>A value for the right edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedBottom(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the bottom edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>A value for the bottom edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedWidth(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value for the width of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>A value for the width of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertedHeight(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value for the height of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the value.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure.</param>
      <returns>The height of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
            The <i>converter</i> is used to do the actual conversion. If the <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.ConvertedLeft(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.FromLTRB(System.Single,System.Single,System.Single,System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Creates a <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure with the specified upper-left corner and lower-right corner and the specified unit of measure.
            </summary>
      <noremarks />
      <param name="left">The x-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="top">The y-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="right">The x-coordinate of the lower-right corner of the rectangular region.</param>
      <param name="bottom">The y-coordinate of the lower-right corner of the rectangular region.</param>
      <param name="unit">The <see cref="T:Leadtools.Annotations.AnnUnit" /> value indicating the unit of measure for the rectangle.</param>
      <returns>The new <see cref="T:Leadtools.Annotations.AnnRectangle" /> that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.FromLTRB(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Creates a <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure with the upper-left corner and the lower-right corner at the specified locations.
            </summary>
      <param name="left">The x-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="top">The y-coordinate of the upper-left corner of the rectangular region.</param>
      <param name="right">The x-coordinate of the lower-right corner of the rectangular region.</param>
      <param name="bottom">The y-coordinate of the lower-right corner of the rectangular region.</param>
      <returns>The new <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that this method creates.</returns>
      <remarks>The unit of measure will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.<br />
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Equals(System.Object)">
      <summary>
            Specifies whether this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure contains the same dimensions as the specified Object.<br />
            For more information about this method, see <see cref="M:System.Object.Equals(System.Object)" />.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if obj is <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnRectangle" />; otherwise, false. </returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.op_Equality(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnRectangle" /> structures are equal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure on the left side of the equality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure on the right side of the equality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have equal Width and Height values; otherwise false.</returns>
      <remarks>
            If the two rectangles have different units, the comparison will be done after temporarily converting both rectangles to a common unit.
            </remarks>
      <example>
        <para>This example creates a rectangle in inches, converts it to pixels then makes sure the 2 rectangles are still equal.</para>
        <code lang="VB">      Public Sub AnnRectangle_OperatorEquals()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         Dim inches As AnnRectangle = New AnnRectangle(1.5F, 2.0F, 3.0F, 4.0F, AnnUnit.Inch)
         Dim pixels As AnnRectangle = New AnnRectangle(inches.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF(), AnnUnit.Pixel)

         Dim s As String
         ' should say true
         s = String.Format("Should say True: inches == pixels is {0}", AnnRectangle.op_Equality(inches, pixels))

         MessageBox.Show(s)

         ' should say false
         s = String.Format("Should say False: inches != pixels is {0}", AnnRectangle.op_Inequality(inches, pixels))
         MessageBox.Show(s)

      End Sub

</code>
        <code lang="CS">      public void AnnRectangle_OperatorEquals()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         AnnRectangle inches = new AnnRectangle(1.5F, 2F, 3F, 4F, AnnUnit.Inch);
         AnnRectangle pixels = new AnnRectangle(inches.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF(), AnnUnit.Pixel);

         string s;
         // should say true
         s = string.Format("Should say True: inches == pixels is {0}", inches == pixels);
         MessageBox.Show(s);

         // should say false
         s = string.Format("Should say False: inches != pixels is {0}", inches != pixels);
         MessageBox.Show(s);

      }

</code>
        <!--AnnRectangle.OperatorEquals-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.op_Inequality(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnRectangle" /> structures are unequal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure on the left side of the inequality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure on the right side of the inequality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have unequal Width and Height values; otherwise false.</returns>
      <remarks>
            If the two rectangles have different units, comparison will be done after temporarily converted both to a common unit.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.op_Equality(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ToRectangleF">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure to a RectangleF structure.
            </summary>
      <noremarks />
      <returns>A RectangleF structure containing the converted <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Convert(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure to one with the specified unit of measure.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">Specifies the destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value for the unit of measure for the conversion.</param>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to the <see cref="T:Leadtools.Annotations.AnnRectangle" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.ConvertTo(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure with the specified unit of measure to another <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">Specifies the destination <see cref="T:Leadtools.Annotations.AnnUnit" /> value for the unit of measure for the conversion.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure containing the converted values of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnRectangle.op_Equality(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Inflate(System.Single,System.Single)">
      <summary>
            Inflates this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure by the specified amounts.
            </summary>
      <param name="dx">The amount to inflate this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure horizontally.</param>
      <param name="dy">The amount to inflate this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure vertically.</param>
      <remarks>
        <p>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 150 units long (the original 50, plus the 50 in the minus direction, and plus the 50 in the plus direction). The rectangle's geometric center is maintained.</p>
        <p>If either x or y is negative, the <see cref="T:Leadtools.Annotations.AnnRectangle" /> is deflated in the corresponding direction.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Inflate(Leadtools.Annotations.AnnSize)">
      <summary>
            Inflates this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure by the specified amount.
            </summary>
      <param name="size">The amount to inflate this rectangle.</param>
      <remarks>
        <p>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 150 units long (the original 50, plus the 50 in the minus direction, and plus the 50 in the plus direction). The rectangle's geometric center is maintained.</p>
        <p>If either size.Width or size.Height is negative, the <see cref="T:Leadtools.Annotations.AnnRectangle" /> is deflated in the corresponding direction.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Inflate(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnSize)">
      <summary>
            Creates and returns an inflated copy of the specified <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure. The copy is inflated by the specified amount. The original rectangle remains unmodified.
            </summary>
      <param name="rc">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> to be copied.  This rectangle is not modified.</param>
      <param name="size">The amount to inflate the copy of the rectangle.</param>
      <returns>The inflated <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</returns>
      <remarks>
        <p>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 150 units long (the original 50, plus the 50 in the minus direction, and plus the 50 in the plus direction). The rectangle's geometric center is maintained.</p>
        <p>If either size.Width or size.Height is negative, the <see cref="T:Leadtools.Annotations.AnnRectangle" /> is deflated in the corresponding direction.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Intersect(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Replaces this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure with the intersection of itself and the specified <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <param name="rc">The rectangle to intersect.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Intersect(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Returns an <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the intersection of two rectangles. If there is no intersection, an empty rectangle is returned.
            </summary>
      <noremarks />
      <param name="a">A rectangle to intersect.</param>
      <param name="b">A rectangle to intersect</param>
      <returns>A third <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure the size of which represents the overlapped area of the two specified rectangles.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.IntersectsWith(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Determines if this rectangle intersects with a test rectangle.
            </summary>
      <noremarks />
      <param name="rect">The rectangle to test.</param>
      <returns>This method returns true if there is any intersection; false otherwise.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Offset(System.Single,System.Single)">
      <summary>
            Adjusts the location of this rectangle by the specified amounts.
            </summary>
      <noremarks />
      <param name="x">The amount to offset the location horizontally.</param>
      <param name="y">The amount to offset the location vertically.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Offset(Leadtools.Annotations.AnnPoint)">
      <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
      <noremarks />
      <param name="pt">The amount to offset the location.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRectangle.Union(Leadtools.Annotations.AnnRectangle,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
      <noremarks />
      <param name="a">A rectangle to union.</param>
      <param name="b">A rectangle to union.</param>
      <returns>A  third <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that contains both of the two rectangles that form the union.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Unit">
      <summary>
            Gets or sets a value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.X">
      <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>The x-coordinate of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Y">
      <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>The y-coordinate of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Width">
      <summary>
            Gets or sets the width of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>The width of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Height">
      <summary>
            Gets or sets the height of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>The height of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Left">
      <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <value>The x-coordinate of the left edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <remarks>(Read only)</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Top">
      <summary>
            Gets the y-coordinate of the top of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <value>The y-coordinate of the top of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <remarks>(Read only)</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Right">
      <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <value>The x-coordinate of the right edge of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <remarks>(Read only)</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Bottom">
      <summary>
            Gets the y-coordinate of the bottom of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <value>The y-coordinate of the bottom of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <remarks>(Read only)</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Location">
      <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>The coordinates of the upper-left corner of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.Size">
      <summary>
            Gets or sets the size of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnSize" /> value specifying the size of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRectangle.IsEmpty">
      <summary>
            Gets a value indicating whether all numeric properties of this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure have values of zero.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure is empty; false, otherwise.</value>
      <remarks>(Read only)</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject">
      <summary>
            Supports standard primary and secondary picture properties used by annotation objects from classes that implement 
            this interface.
            </summary>
      <remarks>
            In automation mode the annotation framework uses this interface to display a dialog, with the 
            appropriate tabs, for annotation objects from classes that implement this interface.
            <p> The following classes implement the IAnnPrimarySecondaryPictureObject interface:</p><list type="bullet"><item><description><see cref="T:Leadtools.Annotations.AnnEncryptObject" /> Class</description></item></list><br />
            For more information, refer to <see cref="T:AN.Topics.UsingPrimaryAndSecondaryPicturesInAnnotationObjects">Using Primary and Secondary Pictures in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject.PrimaryPicture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the primary picture of the annotation object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the primary picture of the annotation object.</value>
      <remarks>
            The secondary picture can be found in the <see cref="P:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject.SecondaryPicture" /> property. <br />
            For more information, refer to <see cref="T:AN.Topics.UsingPrimaryAndSecondaryPicturesInAnnotationObjects">Using Primary and Secondary Pictures in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject.SecondaryPicture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the secondary picture of the annotation object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with the secondary picture of the annotation object.</value>
      <remarks>
            The primary picture can be found in the <see cref="P:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject.PrimaryPicture" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingPrimaryAndSecondaryPicturesInAnnotationObjects">Using Primary and Secondary Pictures in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnEllipseObject">
      <summary>
             Defines an annotation ellipse object.
             </summary>
      <remarks>
        <para> The ellipse annotation object is a simple ellipse defined by a bounding rectangle, a pen and a brush.</para>
        <para>
             For more information about the ellipse annotation object refer to 
             <see cref="T:AN.Topics.AnnEllipseObject">AnnEllipseObject</see>. 
             For more information about the automated ellipse annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates an ellipse object.</para>
        <code lang="VB">      Private Sub AnnEllipseObject_AnnEllipseObject(ByVal container As AnnContainer)
         Dim ellipse As AnnEllipseObject = New AnnEllipseObject()
         ellipse.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         ellipse.Brush = New AnnSolidBrush(Color.White)
         ellipse.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(ellipse)
      End Sub</code>
        <code lang="CS">      private void AnnEllipseObject_AnnEllipseObject(AnnContainer container)
      {
         AnnEllipseObject ellipse = new AnnEllipseObject();
         ellipse.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         ellipse.Brush = new AnnSolidBrush(Color.White);
         ellipse.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(ellipse);
      }      </code>
        <!--AnnEllipseObject.AnnEllipseObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEllipseObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnEllipseObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEllipseObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnEllipseObject" /> object will return the same exact path for this method no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnEllipseObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnFont">
      <summary>
            Defines a particular format for text, including font face, size, and style attributes using to draw annotation strings.
            </summary>
      <noremarks />
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnFont" /> to draw text.</para>
        <code lang="VB">      Public Sub AnnFont_AnnFont(ByVal graphics As Graphics, ByVal converter As AnnUnitConverter, ByVal str As String, ByVal x As Integer, ByVal y As Integer)
         Dim annBrush As AnnSolidBrush = New AnnSolidBrush(Color.Red)
         Dim annFont As AnnFont = New AnnFont(FontFamily.GenericMonospace, New AnnLength(15, AnnUnit.Point), FontStyle.Bold Or FontStyle.Italic)
         Dim gdiBrush As Brush = annBrush.Create(converter, AnnRectangle.Empty)
         Try
            Dim gdiFont As Font = annFont.Create(graphics, converter)
            Try
               graphics.DrawString(str, gdiFont, gdiBrush, x, y)
            Finally
               CType(gdiFont, IDisposable).Dispose()
            End Try
         Finally
            CType(gdiBrush, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnFont_AnnFont(Graphics graphics, AnnUnitConverter converter, string str, int x, int y)
      {
         AnnSolidBrush annBrush = new AnnSolidBrush(Color.Red);
         AnnFont annFont = new AnnFont(FontFamily.GenericMonospace, new AnnLength(15, AnnUnit.Point), FontStyle.Bold | FontStyle.Italic);
         using(Brush gdiBrush = annBrush.Create(converter, AnnRectangle.Empty))
         {
            using(Font gdiFont = annFont.Create(graphics, converter))
            {
               graphics.DrawString(str, gdiFont, gdiBrush, x, y);
            }
         }
      }</code>
        <!--AnnFont.AnnFont-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnFont" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.#ctor(System.Drawing.FontFamily,Leadtools.Annotations.AnnLength,System.Drawing.FontStyle)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnFont" /> object with the specified family, size and style.
            </summary>
      <noremarks />
      <param name="family">The <see cref="T:System.Drawing.FontFamily" /> object of the new <see cref="T:Leadtools.Annotations.AnnFont" /> object.</param>
      <param name="size">The em-size of the new font.</param>
      <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.#ctor(System.String,Leadtools.Annotations.AnnLength,System.Drawing.FontStyle)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnFont" /> object with the specified family, size and style.
            </summary>
      <noremarks />
      <param name="familyName">A string representation of the <see cref="T:System.Drawing.FontFamily" /> object for the new <see cref="T:Leadtools.Annotations.AnnFont" /> object.</param>
      <param name="size">The em-size of the new font.</param>
      <param name="style">The <see cref="T:System.Drawing.FontStyle" /> of the new font.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnFont" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnFont" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.Create(System.Drawing.Graphics,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Creates a new GDI+ font object using this <see cref="T:Leadtools.Annotations.AnnFont" />.
            </summary>
      <noremarks />
      <param name="graphics">Specifies the <see cref="T:System.Drawing.Graphics" /> object this font will be used into.</param>
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting the <see cref="P:Leadtools.Annotations.AnnFont.Size" /> member of this font.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Font" /> object created from this <see cref="T:Leadtools.Annotations.AnnFont" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnFont" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnFont" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnFont" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnFont" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFont.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnFont" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnFont" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFont.Style">
      <summary>
            Gets or sets the style information for this <see cref="T:Leadtools.Annotations.AnnFont" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.FontStyle" /> value that contains the style information for this <see cref="T:Leadtools.Annotations.AnnFont" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFont.FamilyName">
      <summary>
            Gets or sets a string representation of the font family associated with this <see cref="T:Leadtools.Annotations.AnnFont" /> object.
            </summary>
      <noremarks />
      <value>a string representation of the font family associated with this <see cref="T:Leadtools.Annotations.AnnFont" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFont.Size">
      <summary>
            Gets or sets the em-size of the new font for this <see cref="T:Leadtools.Annotations.AnnFont" /> object.
            </summary>
      <noremarks />
      <value>The em-size of the new font for this <see cref="T:Leadtools.Annotations.AnnFont" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFont" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnUserMode">
      <summary>
            Specifies the user mode for all objects in this container.  Design mode is for creating objects; run mode is for viewing them.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnContainer.UserMode" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnUserMode.Design">
      <summary>
            Design mode. Used for creating objects.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnUserMode.Run">
      <summary>
            Run mode. Used for viewing or activating objects.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnPaintEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> and <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> events.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPaintEventArgs.#ctor(System.Drawing.Graphics)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnPaintEventArgs" /> class object and includes a graphics object.
            </summary>
      <noremarks />
      <param name="graphics">The graphics used to paint.</param>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPaintEventArgs.Graphics">
      <summary>
            Gets the graphics used to paint.
            </summary>
      <value>
            The <see cref="T:System.Drawing.Graphics" /> object used to paint.
            </value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnContainer">
      <summary>
            Represents an Annotation container.
            </summary>
      <remarks>
            The annotation container is a rectangular area that holds annotation objects.  The container is responsible for maintaining these objects as well as drawing them upon request.
            </remarks>
      <example>
        <para>This example creates a new AnnContainer object, links it to a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object, adds a few objects and then draws the container on top of the viewer.
            Moving the mouse over an object displays the object type in the title bar.</para>
        <code lang="VB">      Private Class MyForm1 : Inherits Form
         Private myAnnContainer As AnnContainer
         'AnnAutomationManager manager;
         Private viewer As RasterImageViewer
         Private codecs As RasterCodecs
         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(500, 200)

            viewer = New RasterImageViewer()
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.BringToFront()

            ' load an image into the viewer
            codecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")) ' fix this path to an existing image file on your system

            ' create and set up the container
            myAnnContainer = New AnnContainer()
            myAnnContainer.Bounds = New AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height)
            myAnnContainer.UnitConverter = New AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY)

            ' subscribe to the view PostTransformPaint and TransformChanged events to be able to correctly draw the container
            AddHandler viewer.PostImagePaint, AddressOf viewer_PostImagePaint
            AddHandler viewer.TransformChanged, AddressOf viewer_TransformChanged
            AddHandler viewer.MouseMove, AddressOf viewer_MouseMove

            ' add a few objects to the container
            Dim line As AnnLineObject = New AnnLineObject()
            line.Name = "Line1"
            line.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            line.StartPoint = New AnnPoint(0, 0, AnnUnit.Pixel)
            line.EndPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
            myAnnContainer.Objects.Add(line)

            Dim rect As AnnRectangleObject = New AnnRectangleObject()
            rect.Name = "Rectangle1"
            rect.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rect.Brush = New AnnSolidBrush(Color.White)
            rect.Bounds = New AnnRectangle(25, 25, 50, 50, AnnUnit.Pixel)
            myAnnContainer.Objects.Add(rect)

            ' repaint the viewer
            viewer.Invalidate(myAnnContainer.InvalidRectangle)
         End Sub

         Private Sub viewer_PostImagePaint(ByVal sender As Object, ByVal e As PaintEventArgs)
            ' draw the container on top of the viewer
            myAnnContainer.Draw(e.Graphics)
         End Sub

         Private Sub viewer_TransformChanged(ByVal sender As Object, ByVal e As EventArgs)
            ' keep the container transform in synch with current viewer transformation (zoom, scroll, etc)
            myAnnContainer.Transform = viewer.Transform.Clone()
         End Sub

         Private Sub viewer_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
            ' perform hit-testing and update the status bar
            Dim pt As AnnPoint = New AnnPoint(e.X, e.Y, AnnUnit.Pixel)
            Dim obj As AnnObject = myAnnContainer.HitTest(pt, 2)
            If Not obj Is Nothing Then
               Text = String.Format("Type: {0}, Name: {1}, Value: {2}", obj.GetType().Name, obj.Name, obj.HitTest(pt, 2))
            Else
               Text = String.Empty
            End If
         End Sub
      End Class




      Private Sub AnnContainer_AnnContainer(ByVal title As String)
         Dim form As MyForm1 = New MyForm1(title)
         form.ShowDialog()
      End Sub


   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm1 : Form
      {
         AnnContainer container;
         //AnnAutomationManager manager;
         RasterImageViewer viewer;
         RasterCodecs codecs;
         public MyForm1(string title)
         {
            Text = title;
            Size = new Size(500, 200);

            viewer = new RasterImageViewer();
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.BringToFront();

            // load an image into the viewer
            codecs = new RasterCodecs();
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");
            viewer.Image = codecs.Load(fileName);

            // create and set up the container
            container = new AnnContainer();
            container.Bounds = new AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height);
            container.UnitConverter = new AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY);

            // subscribe to the view PostTransformPaint and TransformChanged events to be able to correctly draw the container
            viewer.PostImagePaint += new PaintEventHandler(viewer_PostImagePaint);
            viewer.TransformChanged += new EventHandler(viewer_TransformChanged);
            viewer.MouseMove += new MouseEventHandler(viewer_MouseMove);

            // add a few objects to the container
            AnnLineObject line = new AnnLineObject();
            line.Name = "Line1";
            line.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
            line.StartPoint = new AnnPoint(0, 0, AnnUnit.Pixel);
            line.EndPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
            container.Objects.Add(line);

            AnnRectangleObject rect = new AnnRectangleObject();
            rect.Name = "Rectangle1";
            rect.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
            rect.Brush = new AnnSolidBrush(Color.White);
            rect.Bounds = new AnnRectangle(25, 25, 50, 50, AnnUnit.Pixel);
            container.Objects.Add(rect);

            // repaint the viewer
            viewer.Invalidate(container.InvalidRectangle);
         }

         private void viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // draw the container on top of the viewer
            container.Draw(e.Graphics);
         }

         private void viewer_TransformChanged(object sender, EventArgs e)
         {
            // keep the container transform in synch with current viewer transformation (zoom, scroll, etc)
            container.Transform = viewer.Transform.Clone();
         }

         private void viewer_MouseMove(Object sender, MouseEventArgs e)
         {
            // perform hit-testing and update the status bar
            AnnPoint pt = new AnnPoint(e.X, e.Y, AnnUnit.Pixel);
            AnnObject obj = container.HitTest(pt, 2);
            if(obj != null)
               Text = string.Format("Type: {0}, Name: {1}, Value: {2}", obj.GetType().Name, obj.Name, obj.HitTest(pt, 2));
            else
               Text = string.Empty;
         }
      }




      private void AnnContainer_AnnContainer(string title)
      {
         MyForm1 form = new MyForm1(title);
         form.ShowDialog();
      }


   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnContainer.AnnContainer-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Dispose">
      <summary>
            Releases all resources used by this object.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.IDisposable.Dispose" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.Object.Finalize" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnContainer.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnContainer" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.DisableDrawObjectEvents">
      <summary>
            Stops this <see cref="T:Leadtools.Annotations.AnnContainer" /> from raising the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> and <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> events.
            </summary>
      <remarks>
        <p>When you want to re-enable the raising of the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> and <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> events, you must call the <see cref="M:Leadtools.Annotations.AnnContainer.EnableDrawObjectEvents" /> method.</p>
        <p>Disabling these events is useful when you do not want the automation framework to draw the handles on the objects currently being edited (selected), as for example when realizing or printing the container.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.EnableDrawObjectEvents">
      <summary>
            Enables this <see cref="T:Leadtools.Annotations.AnnContainer" /> from raising the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> and <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> events.
            </summary>
      <remarks>
        <p>When you want to disable the raising of the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> and <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> events, you must call the <see cref="M:Leadtools.Annotations.AnnContainer.DisableDrawObjectEvents" /> method.</p>
        <p>Disabling these events is useful when you do not want the automation framework to draw the handles on the objects currently being edited (selected), as for example when realizing or printing the container.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.ToString">
      <summary>
            Overridden. Converts the attributes of this <see cref="T:Leadtools.Annotations.AnnContainer" /> to a human-readable string.
            </summary>
      <returns>A string that represents the attributes of this object.</returns>
      <remarks>
            This method will return the value of the <see cref="P:Leadtools.Annotations.AnnContainer.Name" /> property of this <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.OnBeforeDrawingObjects(Leadtools.Annotations.AnnPaintEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventHandler`1">RasterCollection&lt;AnnPaintEventArgs&gt;</see> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnBeforeDrawingObjects</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnBeforeDrawingObjects</b> in a derived class, be sure to call the base class's <b>OnBeforeDrawingObjects</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.OnAfterDrawingObjects(Leadtools.Annotations.AnnPaintEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventHandler`1">EventHandler&lt;AnnPaintEventArgs&gt;</see> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAfterDrawingObjects</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAfterDrawingObjects</b> in a derived class, be sure to call the base class's <b>OnAfterDrawingObjects</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Draw(System.Drawing.Graphics)">
      <summary>
            Draws the container on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw the <see cref="T:Leadtools.Annotations.AnnContainer" />.</param>
      <remarks>All visible objects in this container will be drawn into the specified graphics.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)">
      <summary>
            Retrieves the object at the specified coordinates.
            </summary>
      <param name="testPoint">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be tested.</param>
      <param name="buffer">Threshold buffer value.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnObject" /> that represents the object at the given screen coordinates; or null (Nothing in Visual Basic) if no object is at the tested location.</returns>
      <remarks>
        <p>
          <i>testPoint</i> should be in physical coordinates.</p>
        <p>
          <i>buffer</i> is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if <i>buffer</i> is 2, a square with a length of 4 pixels around <i>testPoint</i> will be used to perform the hit-testing.</p>
        <p>If more than one object overlaps underneath the test point, the method will return the object on top of the Z-order.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnContainer" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnContainer" /> object that this class creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.PushFixedState">
      <summary>
            Temporarily disables the <b>fixed</b> state of every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <returns>size of the <b>fixed state stack</b> before the call to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" /></returns>
      <remarks>
            Calls <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" /> on all <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />.
            </remarks>
      <example>
        <para />
        <code lang="VB">      ' This sample paints annotations (both 'fixed' and non'fixed) at a zoom factor of 2
      ' on the Graphics object g
      Private Sub AnnContainer_PushFixedState(ByVal graphics As Graphics, ByVal annContainer As AnnContainer)
         Dim transformContainer As Matrix = annContainer.Transform
         Dim transformOriginal As Matrix = annContainer.Transform.Clone()
         ' Temporarily disable 'fixed' annotations for painting
         annContainer.PushFixedState()

         ' Paint the container at 2x
         Dim transformZoom2x As Matrix = New Matrix(2, 0, 0, 2, 0, 0)
         transformContainer.Multiply(transformZoom2x)
         annContainer.Draw(graphics)

         ' Restore original container transform
         annContainer.Transform = transformOriginal

         ' Enable 'fixed' annotions
         annContainer.PopFixedState()
      End Sub</code>
        <code lang="CS">      // This sample paints annotations (both 'fixed' and non'fixed) at a zoom factor of 2
      // on the Graphics object g
      private void AnnContainer_PushFixedState(Graphics graphics, AnnContainer annContainer)
      {
         Matrix transformContainer = annContainer.Transform;
         Matrix transformOriginal = annContainer.Transform.Clone();
         // Temporarily disable 'fixed' annotations for painting
         annContainer.PushFixedState();

         // Paint the container at 2x
         Matrix transformZoom2x = new Matrix(2, 0, 0, 2, 0, 0);
         transformContainer.Multiply(transformZoom2x);
         annContainer.Draw(graphics);

         // Restore original container transform
         annContainer.Transform = transformOriginal;

         // Enable 'fixed' annotions
         annContainer.PopFixedState();
      }</code>
        <!--AnnContainer.PushFixedState-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.PopFixedState">
      <summary>
            Re-enables the <b>fixed</b> state of every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <returns>size of the <b>fixed state stack</b> before the call to <see cref="M:Leadtools.Annotations.AnnContainer.PopFixedState" /></returns>
      <remarks>
            Calls <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" /> on every <see cref="T:Leadtools.Annotations.AnnObject" /> in the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.PopFixedState" />.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnContainer.PushFixedState" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>
            Draws the container on the specified graphics object and destination rectangle.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="graphics">The Graphics surface on which to draw the <see cref="T:Leadtools.Annotations.AnnContainer" />.</param>
      <param name="rect">The destination rectangle.</param>
      <remarks>
        <para>All visible objects in this container will be drawn into the specified graphics.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnContainer.Draw(Leadtools.RasterImage)">
      <summary>
            Draws the container on the surface of the specified <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object on which to draw this <see cref="T:Leadtools.Annotations.AnnContainer" />.</param>
      <remarks>
        <para>All visible objects in this container will be drawn into the specified image.</para>
        <para>The container objects might be scaled to fit into the image dimension. This method is the equivalent of calling
            <see cref="M:Leadtools.Annotations.AnnContainer.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">Draw(Graphics, Rectangle)</see> with the rectangle values set to 0, 0, <see cref="P:Leadtools.RasterImage.ImageWidth">image.ImageWidth</see>,
            <see cref="P:Leadtools.RasterImage.ImageHeight">image.ImageHeight</see>/&gt;.</para>
        <para>Internally this method will call <see cref="M:Leadtools.Drawing.RasterImagePainter.CreateLeadDC(Leadtools.RasterImage)">RasterImage.CreateLeadDC</see>, so the image must satisfy the requirement for that method.</para>
      </remarks>
      <example>
        <para>
          <para>This example will create a container, adds a few annotations objects then burn them on the surface of a <see cref="T:Leadtools.RasterImage" /> object.</para>
        </para>
        <code lang="VB">      Private Sub ContainerDrawRasterImageExample()
         ' Load the image
         Dim codecs As New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"))
         ' Create and set up the container
         Dim container As New AnnContainer()
         container.Bounds = New AnnRectangle(0, 0, image.ImageWidth, image.ImageHeight)
         container.UnitConverter = New AnnUnitConverter(image.XResolution, image.YResolution)

         ' add a few objects to the container
         Dim line As New AnnLineObject()
         line.Name = "Line1"
         line.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         line.StartPoint = New AnnPoint(10, 10, AnnUnit.Pixel)
         line.EndPoint = New AnnPoint(container.Bounds.Right - 10, container.Bounds.Bottom - 10, AnnUnit.Pixel)
         container.Objects.Add(line)

         Dim rect As New AnnRectangleObject()
         rect.Name = "Rectangle1"
         rect.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rect.Brush = New AnnSolidBrush(Color.White)
         rect.Bounds = New AnnRectangle(25, 25, 50, 50, AnnUnit.Pixel)
         container.Objects.Add(rect)

         ' Now paint the annotation onto the image surface
         container.Draw(image)

         ' Save the image to the output file
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_CotainerDraw.tif"), RasterImageFormat.Tif, image.BitsPerPixel)

         ' Clean up
         container.Dispose()
         image.Dispose()
         codecs.Dispose()

      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void ContainerDrawRasterImageExample()
      {
         // Load the image
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Ocr1.tif"));
         // Create and set up the container
         AnnContainer container = new AnnContainer();
         container.Bounds = new AnnRectangle(0, 0, image.ImageWidth, image.ImageHeight);
         container.UnitConverter = new AnnUnitConverter(image.XResolution, image.YResolution);

         // add a few objects to the container
         AnnLineObject line = new AnnLineObject();
         line.Name = "Line1";
         line.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         line.StartPoint = new AnnPoint(10, 10, AnnUnit.Pixel);
         line.EndPoint = new AnnPoint(container.Bounds.Right - 10, container.Bounds.Bottom - 10, AnnUnit.Pixel);
         container.Objects.Add(line);

         AnnRectangleObject rect = new AnnRectangleObject();
         rect.Name = "Rectangle1";
         rect.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rect.Brush = new AnnSolidBrush(Color.White);
         rect.Bounds = new AnnRectangle(25, 25, 50, 50, AnnUnit.Pixel);
         container.Objects.Add(rect);

         // Now paint the annotation onto the image surface
         container.Draw(image);

         // Save the image to the output file
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir,"Ocr1_CotainerDraw.tif"), RasterImageFormat.Tif, image.BitsPerPixel);

         // Clean up
         container.Dispose();
         image.Dispose();
         codecs.Dispose();

      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnContainer.DrawRasterImage-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.Objects">
      <summary>
            Gets the collection of objects in this <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;</see> representing the objects in the <see cref="T:Leadtools.Annotations.AnnContainer" />.</value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.Bounds">
      <summary>
            Gets or sets the rectangle that represents the bounds of the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <noremarks />
      <value>The <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the bounds of the <see cref="T:Leadtools.Annotations.AnnContainer" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.Name">
      <summary>
            Gets or sets the name of the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <value>A string that represents the name of the <see cref="T:Leadtools.Annotations.AnnContainer" />.</value>
      <remarks>
            If you have multiple containers in your annotation application, you can give each container a unique name and use the container names as a way of differentiating between these containers.  LEADTOOLS does not use the container name in any way and the value has no special meaning.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.Transform">
      <summary>
            Gets or sets the transform Matrix of <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <value>A <see cref="T:System.Drawing.Drawing2D.Matrix" /> matrix that represents the transform Matrix of <see cref="T:Leadtools.Annotations.AnnContainer" />.</value>
      <remarks>
            This member controls how the various objects inside the container are painted.  Usually, this member is
            linked directly to the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform" /> property to link an annotation container
            with a raster image viewer and provide seamless scrolling and zooming.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnContainer" /> is visible.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnContainer" /> is visible; otherwise, false.</value>
      <remarks>
            When the container is invisible, no objects will be drawn when the <see cref="M:Leadtools.Annotations.AnnContainer.Draw(System.Drawing.Graphics)" /> method is called.  Also, calling <see cref="M:Leadtools.Annotations.AnnContainer.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> will never return any objects.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.UnitConverter">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> that will be used in the <see cref="T:Leadtools.Annotations.AnnContainer" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> setting for this <see cref="T:Leadtools.Annotations.AnnContainer" /> object.</value>
      <remarks>
            All objects inside this container will use this unit converter when converting points, lengths, sizes, etc. from one unit to another.  It is recommended that you set the DPI for this <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> to the same DPI as the surface to which you are drawing the container.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.LockPicture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> used when drawing the locked symbol for locked objects.
            </summary>
      <keywords>LockPicture</keywords>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> used when drawing the locked symbol for locked objects.</value>
      <remarks>
        <p>All objects inside the container will use this picture when drawing the object if the object is locked.</p>
        <p>The container uses a picture of a "lock" that is created by default.  You can change this default picture by using this property.</p>
        <p>This property can be set to <see cref="P:Leadtools.Annotations.AnnPicture.Empty" /> to remove the lock picture.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnContainer_LockPicture(ByVal container As AnnContainer)
         ' we are going to create a new lock image that is 20 by 20 red ellipse with a blue cross inside it.
         Dim btmp As Bitmap = New Bitmap(20, 20, PixelFormat.Format32bppArgb)
         Dim g As Graphics = Graphics.FromImage(btmp)
         Try
            ' fill the image with a white color
            g.FillRectangle(Brushes.White, New Rectangle(0, 0, 20, 20))
            g.FillEllipse(Brushes.Red, New Rectangle(0, 0, 20, 20))
            g.DrawLine(Pens.Blue, 0, 0, 20, 20)
            g.DrawLine(Pens.Blue, 20, 0, 0, 20)
         Finally
            CType(g, IDisposable).Dispose()
         End Try
         ' create an annotation picture for this image, use white as the transparent color
         Dim pic As AnnPicture = New AnnPicture(btmp)
         pic.TransparentMode = AnnPictureTransparentMode.UseColor
         pic.TransparentColor = Color.White

         ' use this picture to draw all locked objects in this container
         container.LockPicture = pic
      End Sub</code>
        <code lang="CS">      public void AnnContainer_LockPicture(AnnContainer container)
      {
         // we are going to create a new lock image that is 20 by 20 red ellipse with a blue cross inside it.
         Bitmap btmp = new Bitmap(20, 20, PixelFormat.Format32bppArgb);
         using (Graphics graphics = Graphics.FromImage(btmp))
         {
            // fill the image with a white color
            graphics.FillRectangle(Brushes.White, new Rectangle(0, 0, 20, 20));
            graphics.FillEllipse(Brushes.Red, new Rectangle(0, 0, 20, 20));
            graphics.DrawLine(Pens.Blue, 0, 0, 20, 20);
            graphics.DrawLine(Pens.Blue, 20, 0, 0, 20);
         }
         // create an annotation picture for this image, use white as the transparent color
         AnnPicture pic = new AnnPicture(btmp);
         pic.TransparentMode = AnnPictureTransparentMode.UseColor;
         pic.TransparentColor = Color.White;

         // use this picture to draw all locked objects in this container
         container.LockPicture = pic;
      }</code>
        <!--AnnContainer.LockPicture-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.UserMode">
      <summary>
            Gets or sets the current annotation user mode.
            </summary>
      <value>
            An <see cref="T:Leadtools.Annotations.AnnUserMode" /> value that represents the annotation user mode.
            </value>
      <remarks>
        <p>Design mode is for creating objects; Run mode is for viewing them.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.DrawLockedInRunMode">
      <summary>
            Gets or sets a value indicating whether to draw locked objects with the lock symbol when the container is in the run mode.
            </summary>
      <value>
            true if the container will draw the <see cref="P:Leadtools.Annotations.AnnContainer.LockPicture" /> picture on top of locked objects when the container is in run mode; false otherwise.
            </value>
      <remarks>
            The <see cref="P:Leadtools.Annotations.AnnContainer.LockPicture" /> is always drawn when the container is in design mode. For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.Annotations.AnnContainer.BeforeDrawingObjects">
      <summary>
            Occurs during drawing before the objects are drawn.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnPaintEventArgs" />.</event>
      <remarks>
            You can prevent the <see cref="T:Leadtools.Annotations.AnnContainer" /> from raising this event by calling <see cref="M:Leadtools.Annotations.AnnContainer.DisableDrawObjectEvents" />.  You can re-enable the raising of this event by calling <see cref="M:Leadtools.Annotations.AnnContainer.EnableDrawObjectEvents" />.
            </remarks>
      <example>
        <para>This example will draw a grid 100 pixels apart on the surface of the viewer before the container is drawn.</para>
        <code lang="VB">      Public theContainer As AnnContainer
      Public Sub AnnContainer_BeforeDrawingObjects(ByVal container As AnnContainer)
         ' theContainer is set so that it can be accessed in the container_BeforeDrawingObjects event
         theContainer = container
         AddHandler container.BeforeDrawingObjects, AddressOf container_BeforeDrawingObjects
      End Sub
      Private Sub container_BeforeDrawingObjects(ByVal sender As Object, ByVal e As AnnPaintEventArgs)
         ' draw a grid, 100 pixels apart

         Dim graphics As Graphics = e.Graphics

         ' set the current transform from the container
         graphics.MultiplyTransform(theContainer.Transform)

         ' get the bounds in pixels
         Dim rc As AnnRectangle = theContainer.Bounds.ConvertTo(theContainer.UnitConverter, AnnUnit.Pixel)

         Dim p As Pen = New Pen(Color.FromArgb(128, 255, 255, 255))
         Try
            ' draw the grid
            Dim x As Single = rc.Left
            Do While x &lt;= rc.Right
               graphics.DrawLine(p, x, 0, x, rc.Bottom)
               x += 100
            Loop

            Dim y As Single = rc.Top
            Do While y &lt;= rc.Bottom
               graphics.DrawLine(p, 0, y, rc.Right, y)
               y += 100
            Loop
         Finally
            CType(p, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public AnnContainer theContainer;
      public void AnnContainer_BeforeDrawingObjects(AnnContainer container)
      {
         // theContainer is set so that it can be accessed in the container_BeforeDrawingObjects event
         theContainer = container;
         container.BeforeDrawingObjects += new EventHandler&lt;AnnPaintEventArgs&gt;(container_BeforeDrawingObjects);
      }
      private void container_BeforeDrawingObjects(object sender, AnnPaintEventArgs e)
      {
         // draw a grid, 100 pixels apart

         Graphics graphics = e.Graphics;

         // set the current transform from the container
         graphics.MultiplyTransform(theContainer.Transform);

         // get the bounds in pixels
         AnnRectangle rc = theContainer.Bounds.ConvertTo(theContainer.UnitConverter, AnnUnit.Pixel);

         using (Pen p = new Pen(Color.FromArgb(128, 255, 255, 255)))
         {
            // draw the grid
            for (float x = rc.Left; x &lt;= rc.Right; x += 100)
               graphics.DrawLine(p, x, 0, x, rc.Bottom);

            for (float y = rc.Top; y &lt;= rc.Bottom; y += 100)
               graphics.DrawLine(p, 0, y, rc.Right, y);
         }
      }</code>
        <!--AnnContainer.BeforeDrawingObjects-->
      </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnContainer.AfterDrawingObjects">
      <summary>
            Occurs during drawing after the objects are drawn.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventHandler`1">EventHandler&lt;AnnPaintEventArgs&gt;</see>.</event>
      <remarks>
            You can prevent the <see cref="T:Leadtools.Annotations.AnnContainer" /> from raising this event by calling <see cref="M:Leadtools.Annotations.AnnContainer.DisableDrawObjectEvents" />.  You can re-enable the raising of this event by calling <see cref="M:Leadtools.Annotations.AnnContainer.EnableDrawObjectEvents" />.
            </remarks>
      <example>
        <para>This example will draw a hatch brush on top of every object in the container.</para>
        <code lang="VB">      Public Sub AnnContainer_AfterDrawingObjects(ByVal container As AnnContainer)
         ' theContainer is set so that it can be accessed in the container_BeforeDrawingObjects event
         theContainer = container
         AddHandler container.AfterDrawingObjects, AddressOf container_AfterDrawingObjects
      End Sub
      Private Sub container_AfterDrawingObjects(ByVal sender As Object, ByVal e As AnnPaintEventArgs)
         Dim graphics As Graphics = e.Graphics

         ' set the current transform from the container
         graphics.MultiplyTransform(theContainer.Transform)

         Dim br As Brush = New HatchBrush(HatchStyle.DiagonalCross, Color.Black, Color.Transparent)
         Try
            ' enum the objects in the container
            For Each obj As AnnObject In theContainer.Objects
               graphics.FillRectangle(br, obj.BoundingRectangle.ConvertTo(theContainer.UnitConverter, AnnUnit.Pixel).ToRectangleF())
            Next obj
         Finally
            CType(br, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnContainer_AfterDrawingObjects(AnnContainer container)
      {
         // theContainer is set so that it can be accessed in the container_BeforeDrawingObjects event
         theContainer = container;
         container.AfterDrawingObjects += new EventHandler&lt;AnnPaintEventArgs&gt;(container_AfterDrawingObjects);
      }
      private void container_AfterDrawingObjects(object sender, AnnPaintEventArgs e)
      {
         Graphics graphics = e.Graphics;

         // set the current transform from the container
         graphics.MultiplyTransform(theContainer.Transform);

         using(Brush br = new HatchBrush(HatchStyle.DiagonalCross, Color.Black, Color.Transparent))
         {
            // enum the objects in the container
            foreach(AnnObject obj in theContainer.Objects)
               graphics.FillRectangle(br, obj.BoundingRectangle.ConvertTo(theContainer.UnitConverter, AnnUnit.Pixel).ToRectangleF());
         }
      }</code>
        <!--AnnContainer.AfterDrawingObjects-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.InvalidRectangle">
      <summary>
            Gets the rectangle that represents the area that should be invalidated whenever the viewer is asked to repaint its <see cref="T:Leadtools.Annotations.AnnContainer" /> object.
            </summary>
      <value>The <see cref="T:System.Drawing.Rectangle" /> structure that represents the area that should be invalidated whenever the viewer is asked to repaint its <see cref="T:Leadtools.Annotations.AnnContainer" /> object.</value>
      <remarks>
            (Read only) This rectangle is in the viewer client coordinates.  It is calculated based on the <see cref="P:Leadtools.Annotations.AnnContainer.Bounds" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid">
      <summary>
            Gets or sets a value to determine whether snapping to grid is enabled for this <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <value>
        <strong>true</strong> if snap to grid option is enabled for this <see cref="T:Leadtools.Annotations.AnnContainer" />, otherwise; <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>This property will enable or disable the snap to grid options set in the <see cref="P:Leadtools.Annotations.AnnContainer.SnapToGridOptions" /> property of this <see cref="T:Leadtools.Annotations.AnnContainer" />. 
            It allows you to quickly enable/disable this feature by just changing this one property, by binding it to a user interface menu or check box item for
            instance.</para>
        <para>For more information on snap to grid, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnContainer.SnapToGridOptions">
      <summary>
            Gets or sets the snap to grid options for this <see cref="T:Leadtools.Annotations.AnnContainer" />.
            </summary>
      <value>An object of type <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> that specifies the current snap to grid options for this
            <see cref="T:Leadtools.Annotations.AnnContainer" /> object. Default value is a new <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" /> object with default values.</value>
      <remarks>
        <para>Use this property to change current snap to grid options for this container. To enable the container to use snap to grid, you must
            also set the value of the <see cref="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid" /> property to <strong>true</strong>.</para>
        <para>For more information on snap to grid, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecsFormat">
      <summary>
            Represents supported annotation file formats.
            </summary>
      <remarks>
        <p>Use this enumeration with the <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)">AnnCodecs.Save</see> method to specify the format to be used when saving the annotation objects to a file or stream.</p>
        <p>Also, the <see cref="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.String,Leadtools.Annotations.AnnCodecsInformation)">AnnCodecs.GetInformation</see> method will return a member of this enumeration in the <see cref="P:Leadtools.Annotations.AnnCodecsInformation.Format" /> property specifying the annotation format in the file or stream.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Unknown">
      <summary>
            Format is an Unknown (invalid) format.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Serialize">
      <summary>
            Format is a .NET Serialize format (not compatible with LEADTOOLS Win32 annotations).  Note that this is the only format that will support saving custom annotations.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Native">
      <summary>
            This format has been replaced by AnnCodecsFormat.Xml and is no longer supported.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Wmf">
      <summary>
            Use the Windows WMF format (LEADTOOLS Win32 compatible).  Note that this format is Save only.  LEADTOOLS for .NET annotations library will not load or get information for a WMF file.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Encoded">
      <summary>
            This format has been replaced by AnnCodecsFormat.Xml and is no longer supported.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Xml">
      <summary>
            Format is XML. This is a text-based format for storing LEAD annotations that follows the XML (Extensible Markup Language) format. This is upward compatible and LEADTOOLS Win32 compatible.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsFormat.Emf">
      <summary>
            Use the Windows EMF format (LEADTOOLS Win32 compatible).  Note that this format is Save only.  LEADTOOLS for .NET annotations library will not load or get information for a EMF file.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecsSavePageMode">
      <summary>
            Indicates which operation to perform when saving multi-page annotation files.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsSavePageMode.Insert">
      <summary>
            Insert the page at the specified index.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsSavePageMode.Overwrite">
      <summary>
            Overwrite the entire file.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsSavePageMode.Replace">
      <summary>
            Replace the page at the specified index.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecsTagFormat">
      <summary>
            Supported annotation tag formats.
            </summary>
      <remarks>
            Use this enumeration with the <see cref="M:Leadtools.Annotations.AnnCodecs.SaveToTag(Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsTagFormat)" /> method to specify the format to be used when saving the annotation objects to a TIFF tag.
            <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see></p></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.SaveToTag(Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsTagFormat)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsTagFormat.Tiff">
      <summary>
            Save the object in WANG format, along with all LEAD properties not supported by the Wang specification.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsTagFormat.Wang">
      <summary>
            Save only the properties supported by the Wang specification.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnCodecsTagFormat.Serialize">
      <summary>
            .NET Serialize format (not compatible with Win32 or WANG annotations).
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecs">
      <summary>
            Provides support for loading and saving objects to annotation files.
            </summary>
      <remarks>
        <p>This class supports loading and saving annotation objects from and to disk files and to memory stream as well as getting information on information objects saved in a disk file or a memory stream.</p>
        <p>This class also supports saving and loading multi-page annotation files or streams.</p>
      </remarks>
      <example>
        <para>This example saves the objects from an existing container to a disk file and loads them back.</para>
        <code lang="VB">      Public Sub AnnCodecs_AnnCodecs(ByVal fileName As String)
         ' create a new annotation container
         Dim container As AnnContainer = New AnnContainer()
         ' add a few objects into the container

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = Nothing
         container.Objects.Add(rectObj)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(lineObj)

         ' create a new AnnCodecs class
         Dim codecs As AnnCodecs = New AnnCodecs()

         ' save this container into a file
         ' save the objects in this container
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite)

         ' get information about the file
         Dim information As AnnCodecsInformation = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))

         ' save the objects again (as a second page)
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 2, AnnCodecsSavePageMode.Insert)

         ' get information about the file
         information = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))

         ' delete the first page
         codecs.DeletePage(fileName, 1)

         ' get information about the file
         information = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))
      End Sub</code>
        <code lang="CS">      public void AnnCodecs_AnnCodecs(string fileName)
      {
         // create a new annotation container
         AnnContainer container = new AnnContainer();
         // add a few objects into the container

         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         container.Objects.Add(rectObj);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(lineObj);

         // create a new AnnCodecs class
         AnnCodecs codecs = new AnnCodecs();

         // save this container into a file
         // save the objects in this container
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite);

         // get information about the file
         AnnCodecsInformation information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));

         // save the objects again (as a second page)
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 2, AnnCodecsSavePageMode.Insert);

         // get information about the file
         information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));

         // delete the first page
         codecs.DeletePage(fileName, 1);

         // get information about the file
         information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));
      }</code>
        <!--AnnCodecs.AnnCodecs-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnCodecs" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.String,Leadtools.Annotations.AnnCodecsInformation)">
      <summary>
            Gets information about the specified annotation file.
            </summary>
      <noremarks />
      <param name="fileName">
        <see cref="T:System.String" /> containing the file name to query.</param>
      <param name="info">An <see cref="T:Leadtools.Annotations.AnnCodecsInformation" /> class that will be updated with information about the specified annotation file.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.IO.Stream,Leadtools.Annotations.AnnCodecsInformation)">
      <summary>
            Gets information about the annotation objects saved to a specified stream.
            </summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> containing the input annotation file data.</param>
      <param name="info">An <see cref="T:Leadtools.Annotations.AnnCodecsInformation" /> class that will be updated with information about the specified annotation stream.</param>
      <remarks>
        <p>This method will position the stream back to its original position before it returns.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)">AnnCodecs.Save</see>.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)">
      <summary>
            Saves the annotation objects to a disk file.
            </summary>
      <param name="fileName">The output file name.</param>
      <param name="container">An <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the objects to be saved.</param>
      <param name="format">An <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> value that specifies the annotation format to use when saving.</param>
      <param name="page">1-based index of the page to be saved.</param>
      <param name="pageMode">A value that indicates how to handle the page when saving to a multi-page file.</param>
      <remarks>
        <p>
          <i>pageMode</i> can be one of the following:
            <list type="table"><listheader><term>Mode</term><description>Description</description></listheader><item><term><b>AnnCodecsSavePageMode.Overwrite</b></term><description><i>fileName</i> will be overwritten if it exists and all previous information will be lost.  Value of <i>page</i> must be 1 or -1 (for appending the objects as last page).</description></item><item><term><b>AnnCodecsSavePageMode.Insert</b></term><description><i>fileName</i> must be a valid file with valid annotation pages.  Value of <i>page</i> must be between 1 and total number of pages in the file.  A value of -1 will append the objects as last page.</description></item><item><term><b>AnnCodecsSavePageMode.Replace</b></term><description><i>fileName</i> must be a valid file with valid annotation pages.  Value of <i>page</i> must be between 1 and total number of pages in the file.</description></item></list></p>
        <para>To save mutliple containers to a multi-page file using one method, use <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)">Save(string, AnnContainer[], AnnCodecsFormat)</see>.</para>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Save(System.IO.Stream,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)">
      <summary>
            Saves the annotation objects to a stream.
            </summary>
      <param name="stream">The stream to which to save the objects.</param>
      <param name="container">An <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the objects to be saved.</param>
      <param name="format">An <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> value that specifies the annotation format to use when saving.</param>
      <param name="page">1-based index of the page to be saved.</param>
      <param name="pageMode">A value that indicates how to handle the page when saving to a multi-page stream.</param>
      <remarks>
        <p>
          <i>pageMode</i> can be one of the following:
            <list type="table"><listheader><term>Mode</term><description>Description</description></listheader><item><term><b>AnnCodecsSavePageMode.Overwrite</b></term><description>The <i>stream</i> will be overwritten and all previous information will be lost.  The value of <i>page</i> must be 1 or -1 (if appending the objects as the last page).</description></item><item><term><b>AnnCodecsSavePageMode.Insert</b></term><description>The <i>stream</i> must have valid annotation objects saved to it.  The value of <i>page</i> must be between 1 and the total number of pages in the stream.  A value of -1 will append the objects as the last page.</description></item><item><term><b>AnnCodecsSavePageMode.Replace</b></term><description>The <i>stream</i> must have valid annotation objects saved to it.  The value of <i>page</i> must be between 1 and total number of pages in the stream.</description></item></list></p>
        <p>
            This method will not position the stream back to its original position before it returns.  It is your responsibility to position the stream back before you can load objects from this stream.
            </p>
        <para>To save mutliple containers to a multi-page stream using one method, use <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.IO.Stream,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)">Save(Stream, AnnContainer[], AnnCodecsFormat)</see>.</para>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnCodecs_Save()
         ' create a new annotation container
         Dim container As AnnContainer = New AnnContainer()
         ' add a few objects into the container

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = Nothing
         container.Objects.Add(rectObj)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(lineObj)

         MessageBox.Show(String.Format("Before Save: Container has {0} objects", container.Objects.Count))

         ' create a memory stream to save the objects into
         Dim ms As MemoryStream = New MemoryStream()
         Try
            ' create a new AnnCodecs class
            Dim codecs As AnnCodecs = New AnnCodecs()

            ' save the objects in this container
            codecs.Save(ms, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite)

            ' clear the container
            container.Objects.Clear()
            MessageBox.Show(String.Format("After Save and Clear: Container has {0} objects, Stream size: {1}", container.Objects.Count, ms.Length))

            ' get information about the stream
            ' note, the Save method does not seek the stream back to its original position, so do that now
            ms.Position = 0
            Dim information As AnnCodecsInformation = New AnnCodecsInformation()
            codecs.GetInformation(ms, information)
            MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))

            ' load the objects back from the stream
            codecs.Load(ms, container, 1)

            MessageBox.Show(String.Format("After Load: Container has {0} objects", container.Objects.Count))
         Finally
            CType(ms, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      public void AnnCodecs_Save()
      {
         // create a new annotation container
         AnnContainer container = new AnnContainer();
         // add a few objects into the container

         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         container.Objects.Add(rectObj);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(lineObj);

         MessageBox.Show(string.Format("Before Save: Container has {0} objects", container.Objects.Count));

         // create a memory stream to save the objects into
         using (MemoryStream ms = new MemoryStream())
         {
            // create a new AnnCodecs class
            AnnCodecs codecs = new AnnCodecs();

            // save the objects in this container
            codecs.Save(ms, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite);

            // clear the container
            container.Objects.Clear();
            MessageBox.Show(string.Format("After Save and Clear: Container has {0} objects, Stream size: {1}", container.Objects.Count, ms.Length));

            // get information about the stream
            // note, the Save method does not seek the stream back to its original position, so do that now
            ms.Position = 0;
            AnnCodecsInformation information = new AnnCodecsInformation();
            codecs.GetInformation(ms, information);
            MessageBox.Show(string.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));

            // load the objects back from the stream
            codecs.Load(ms, container, 1);

            MessageBox.Show(String.Format("After Load: Container has {0} objects", container.Objects.Count));
         }
      }</code>
        <!--AnnCodecs.Save-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Load(System.String,Leadtools.Annotations.AnnContainer,System.Int32)">
      <summary>
            Loads the annotation objects from a disk file.
            </summary>
      <param name="fileName">Name of the annotation file to load.</param>
      <param name="container">An <see cref="T:Leadtools.Annotations.AnnContainer" /> into which to load the objects.</param>
      <param name="page">1-based page number to load.</param>
      <remarks>
        <para>This method will not remove any existing objects in the <i>container</i>, 
            so if you are re-using an existing collection to load the annotation objects into, 
            make sure to call <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;.Clear</see> on the collection before you call this method.</para>
        <para>To load mutliple containers from a multi-page file using one method, use <see cref="M:Leadtools.Annotations.AnnCodecs.Load(System.String)">Load(string)</see>.</para>
        <para>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Load(System.IO.Stream,Leadtools.Annotations.AnnContainer,System.Int32)">
      <summary>
            Loads the annotation objects from a stream.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to load the objects.</param>
      <param name="container">An <see cref="T:Leadtools.Annotations.AnnContainer" /> into which to load the objects.</param>
      <param name="page">1-based page number to load.</param>
      <remarks>
        <p>This method will not remove any existing objects in the <i>container</i>, so if you are re-using an existing collection to load the annotation objects into, make sure to call <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnObject&gt;.Clear</see> on the collection before you call this method.</p>
        <p>This method will not position the stream back to its original position before it returns.  It is your responsibility to position the stream back before you can load another page from this stream.</p>
        <para>To load mutliple containers from a multi-page stream using one method, use <see cref="M:Leadtools.Annotations.AnnCodecs.Load(System.IO.Stream)">Load(Stream)</see>.</para>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.SaveToTag(Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsTagFormat)">
      <summary>
            Saves the annotation objects in a container to a TIFF tag.
            </summary>
      <param name="container">The <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the objects to be saved.</param>
      <param name="format">An <see cref="T:Leadtools.Annotations.AnnCodecsTagFormat" /> value that specifies the format used when creating the tag.</param>
      <returns>An <see cref="T:Leadtools.RasterTagMetadata" /> object that can be saved into a TIFF file.</returns>
      <remarks>
        <p>This method will return a tag with ID = <see cref="T:Leadtools.RasterTagMetadata">.AnnotationTiff</see> (the value 80A4 in hexadecimal).</p>
        <p>After calling this method, you can save the <see cref="T:Leadtools.RasterTagMetadata" /> object returned into an existing TIFF file by calling the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)" /> method or 
            one of the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTags(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">RasterCodecs.WriteTags(Stream, int, RasterCollection&lt;RasterTagMetadata&gt;)</see> methods.</p>
        <p>This method can return null (Nothing in Visual Basic) if you try to save unsupported objects to certain formats (for example, if you try to save an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> to a Wang format).</p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnCodecs_SaveToTag(ByVal tifFileName As String)
         ' first create a container and add a few objects
         Dim container As AnnContainer = New AnnContainer()
         container.Bounds = New AnnRectangle(0, 0, 400, 400, AnnUnit.Pixel)
         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(lineObj)

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.White)
         container.Objects.Add(rectObj)

         ' create a new instance of the AnnCodecs object
         Dim ann As AnnCodecs = New AnnCodecs()

         ' save this container as a TIFF tag
         Dim tag As RasterTagMetadata = ann.SaveToTag(container, AnnCodecsTagFormat.Serialize)
         Dim tagId As Integer = tag.Id

         Dim raster As RasterCodecs = New RasterCodecs()
         raster.WriteTag(tifFileName, 1, tag)

         ' clear the container and the tag
         container.Objects.Clear()
         tag = Nothing

         ' re-load the tag
         tag = raster.ReadTag(tifFileName, 1, tagId)

         ' load the container
         ann.LoadFromTag(tag, container)
      End Sub</code>
        <code lang="CS">      public void AnnCodecs_SaveToTag(string tifFileName)
      {
         // first create a container and add a few objects
         AnnContainer container = new AnnContainer();
         container.Bounds = new AnnRectangle(0, 0, 400, 400, AnnUnit.Pixel);
         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(lineObj);

         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.White);
         container.Objects.Add(rectObj);

         // create a new instance of the AnnCodecs object
         AnnCodecs ann = new AnnCodecs();

         // save this container as a TIFF tag
         RasterTagMetadata tag = ann.SaveToTag(container, AnnCodecsTagFormat.Serialize);
         int tagId = tag.Id;

         RasterCodecs raster = new RasterCodecs();
         raster.WriteTag(tifFileName, 1, tag);

         // clear the container and the tag
         container.Objects.Clear();
         tag = null;

         // re-load the tag
         tag = raster.ReadTag(tifFileName, 1, tagId);

         // load the container
         ann.LoadFromTag(tag, container);
      }</code>
        <!--AnnCodecs.SaveToTag-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.LoadFromTag(Leadtools.RasterTagMetadata,Leadtools.Annotations.AnnContainer)">
      <summary>
            Loads the annotation objects stored in a TIFF tag.
            </summary>
      <param name="tag">An <see cref="T:Leadtools.RasterTagMetadata" /> object containing the annotation objects being loaded.</param>
      <param name="container">An <see cref="T:Leadtools.Annotations.AnnContainer" /> into which to load the objects.</param>
      <remarks>
        <p>The <i>tag</i> should have an ID = <see cref="T:Leadtools.RasterTagMetadata">.AnnotationTiff</see> (the value 80A4 in hexadecimal).</p>
        <p>You can use the <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.IO.Stream,System.Int32,System.Int32)" /> method to load tag objects from a TIFF file.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.SaveToTag(Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsTagFormat)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.DeletePage(System.String,System.Int32)">
      <summary>
            Deletes a page from an annotation file containing multiple pages.
            </summary>
      <param name="fileName">Name of the annotation file.</param>
      <param name="page">Number of the page to delete. The page number is 1-based. Therefore, the first page is page 1, the second page is page 2, etc.</param>
      <remarks>
        <p>This method can be used to remove annotation pages from a multi-page annotation file. The page number is 1-based. Therefore, the first page is page 1, the second page is page 2, and so on. This method can be used for all LEAD annotation file formats. To determine the format for a particular LEAD annotation file, use <see cref="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.String,Leadtools.Annotations.AnnCodecsInformation)" />.</p>
        <p>Note, you cannot delete a page from an annotation file that has only 1 page.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnCodecs_DeletePage(ByVal fileName As String)
         ' create a new annotation container
         Dim container As AnnContainer = New AnnContainer()
         ' add a few objects into the container

         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = Nothing
         container.Objects.Add(rectObj)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         container.Objects.Add(lineObj)

         ' create a new AnnCodecs class
         Dim codecs As AnnCodecs = New AnnCodecs()

         ' save this container into a file
         ' save the objects in this container
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite)

         ' get information about the file
         Dim information As AnnCodecsInformation = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))

         ' save the objects again (as a second page)
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 2, AnnCodecsSavePageMode.Insert)

         ' get information about the file
         information = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))

         ' delete the first page
         codecs.DeletePage(fileName, 1)

         ' get information about the file
         information = New AnnCodecsInformation()
         codecs.GetInformation(fileName, information)
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages))
      End Sub</code>
        <code lang="CS">      public void AnnCodecs_DeletePage(string fileName)
      {
         // create a new annotation container
         AnnContainer container = new AnnContainer();
         // add a few objects into the container

         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         container.Objects.Add(rectObj);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container.Objects.Add(lineObj);

         // create a new AnnCodecs class
         AnnCodecs codecs = new AnnCodecs();

         // save this container into a file
         // save the objects in this container
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 1, AnnCodecsSavePageMode.Overwrite);

         // get information about the file
         AnnCodecsInformation information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));

         // save the objects again (as a second page)
         codecs.Save(fileName, container, AnnCodecsFormat.Serialize, 2, AnnCodecsSavePageMode.Insert);

         // get information about the file
         information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));

         // delete the first page
         codecs.DeletePage(fileName, 1);

         // get information about the file
         information = new AnnCodecsInformation();
         codecs.GetInformation(fileName, information);
         MessageBox.Show(String.Format("Format: {0}, Number of pages: {1}", information.Format, information.Pages));
      }</code>
        <!--AnnCodecs.DeletePage-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.DeletePage(System.IO.Stream,System.Int32)">
      <summary>
            Deletes a page from an annotation stream containing multiple pages.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to delete the page.</param>
      <param name="page">Number of the page to delete. The page number is 1-based. Therefore, the first page is page 1, the second page is page 2, etc.</param>
      <remarks>
        <p>This method can be used to remove annotation pages from a multi-page annotation stream. The page number is 1-based. Therefore, the first page is page 1, the second page is page 2, and so on. This method can be used for all LEAD annotation file formats. To determine the format for a particular LEAD annotation file, use <see cref="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.String,Leadtools.Annotations.AnnCodecsInformation)" />.</p>
        <p>Note, you cannot delete a page from an annotation file that has only 1 page.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.DeletePage(System.String,System.Int32)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)">
      <summary>
            Saves an array of <see cref="T:Leadtools.Annotations.AnnContainer" /> to a multipage annotation disk file
            </summary>
      <param name="fileName">The output file name.</param>
      <param name="containers">An array of <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the objects to be saved.</param>
      <param name="format">An <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> value that specifies the annotation format to use when saving.</param>
      <remarks>
        <p>
            This method saves the entire array of <see cref="T:Leadtools.Annotations.AnnContainer" /> as a multipage annotation file, with each page corresponding to one of the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            If <paramref name="fileName" /> already exists, it will be overwritten.  If <paramref name="containers" /> contain many <see cref="T:Leadtools.Annotations.AnnContainer" />, 
            then this method will create the multipage annotation file much faster than repeated calls to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)"></see></p>
        <p>
            This method only supports the <see cref="T:Leadtools.Annotations.AnnCodecsFormat">AnnCodecsFormat.Xml</see> format.  All other <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> are not supported.
            </p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub AnnCodecs_Save2()
            ' create three  annotation containers
            ' The first container contains a rectangle object
            Dim container0 As New AnnContainer()
            Dim rectObj As New AnnRectangleObject()
            rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
            rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rectObj.Brush = Nothing
            container0.Objects.Add(rectObj)

            ' The second container contains a line object
            Dim container1 As New AnnContainer()
            Dim lineObj As New AnnLineObject()
            lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
            lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
            lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            container1.Objects.Add(lineObj)

            ' The third container contains a ellipse object
            Dim container2 As New AnnContainer()
            Dim ellipseObj As New AnnEllipseObject()
            ellipseObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
            ellipseObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            ellipseObj.Brush = Nothing
            container2.Objects.Add(ellipseObj)

            ' create a file to save both annotation containers
            Dim annFileName As String = Path.GetTempFileName()

            ' create a new AnnCodecs class
            Dim codecs As New AnnCodecs()

            ' save both AnnContainers into the stream
            codecs.Save(annFileName, container0, AnnCodecsFormat.Xml, 1, AnnCodecsSavePageMode.Overwrite)
            codecs.Save(annFileName, container1, AnnCodecsFormat.Xml, 2, AnnCodecsSavePageMode.Insert)

            ' Now load both containers from the stream, and verify that there are two containers
            Dim containersTwo() As AnnContainer = codecs.Load(annFileName)
            MessageBox.Show(String.Format("After Load: there should be 2 containers.  Total number of containers: {0}", containersTwo.Length))

            ' Add another container, and save to the stream
            Dim containersNew(containersTwo.Length) As AnnContainer
            Array.Copy(containersTwo, containersNew, containersTwo.Length)
            containersNew(2) = container2

            codecs.Save(annFileName, containersNew, AnnCodecsFormat.Xml)

            ' Load and verify that there are three containers
            Dim containersThree() As AnnContainer = codecs.Load(annFileName)
            MessageBox.Show(String.Format("After Load: there should be 3 containers.  Total number of containers: {0}", containersThree.Length))
        End Sub</code>
        <code lang="CS">      public void AnnCodecs_Save2()
      {
         // create three  annotation containers
         // The first container contains a rectangle object
         AnnContainer container0 = new AnnContainer();
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         container0.Objects.Add(rectObj);

         // The second container contains a line object
         AnnContainer container1 = new AnnContainer();
         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container1.Objects.Add(lineObj);

         // The third container contains a ellipse object
         AnnContainer container2 = new AnnContainer();
         AnnEllipseObject ellipseObj = new AnnEllipseObject();
         ellipseObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         ellipseObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         ellipseObj.Brush = null;
         container2.Objects.Add(ellipseObj);

         // create a file to save both annotation containers
         string annFileName = Path.GetTempFileName();

         // create a new AnnCodecs class
         AnnCodecs codecs = new AnnCodecs();

         // save both AnnContainers into the stream
         codecs.Save(annFileName, container0, AnnCodecsFormat.Xml, 1, AnnCodecsSavePageMode.Overwrite);
         codecs.Save(annFileName, container1, AnnCodecsFormat.Xml, 2, AnnCodecsSavePageMode.Insert);

         // Now load both containers from the stream, and verify that there are two containers
         AnnContainer[] containersTwo = codecs.Load(annFileName);
         MessageBox.Show(String.Format("After Load: there should be 2 containers.  Total number of containers: {0}", containersTwo.Length));

         // Add another container, and save to the stream
         AnnContainer[] containersNew = new AnnContainer[containersTwo.Length + 1];
         Array.Copy(containersTwo, containersNew, containersTwo.Length);
         containersNew[2] = container2;

         codecs.Save(annFileName, containersNew, AnnCodecsFormat.Xml);

         // Load and verify that there are three containers
         AnnContainer[] containersThree = codecs.Load(annFileName);
         MessageBox.Show(String.Format("After Load: there should be 3 containers.  Total number of containers: {0}", containersThree.Length));
      }</code>
        <!--AnnCodecs.Save2-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Save(System.IO.Stream,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)">
      <summary>
            Saves an array of <see cref="T:Leadtools.Annotations.AnnContainer" /> to a stream.
            </summary>
      <param name="stream">The stream to which to save the array of <see cref="T:Leadtools.Annotations.AnnContainer" />.</param>
      <param name="containers">An array of <see cref="T:Leadtools.Annotations.AnnContainer" /> containing the objects to be saved.</param>
      <param name="format">An <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> value that specifies the annotation format to use when saving.</param>
      <remarks>
        <p>
            This method saves the entire array of <see cref="T:Leadtools.Annotations.AnnContainer" /> to a stream that will contain multipage pages, with each page corresponding to one of the <see cref="T:Leadtools.Annotations.AnnContainer" />.
            If <paramref name="stream" /> contains any data, it will be overwritten.  If <paramref name="containers" /> contain many <see cref="T:Leadtools.Annotations.AnnContainer" />, 
            then this method will create the multipage annotation stream much faster than repeated calls to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.IO.Stream,Leadtools.Annotations.AnnContainer,Leadtools.Annotations.AnnCodecsFormat,System.Int32,Leadtools.Annotations.AnnCodecsSavePageMode)"></see></p>
        <p>
            This method only supports the <see cref="T:Leadtools.Annotations.AnnCodecsFormat">AnnCodecsFormat.Xml</see> format.  All other <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> are not supported.
            </p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub AnnCodecs_SaveStream2()
            ' create three  annotation containers
            ' The first container contains a rectangle object
            Dim container0 As New AnnContainer()
            Dim rectObj As New AnnRectangleObject()
            rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
            rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rectObj.Brush = Nothing
            container0.Objects.Add(rectObj)

            ' The second container contains a line object
            Dim container1 As New AnnContainer()
            Dim lineObj As New AnnLineObject()
            lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
            lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
            lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            container1.Objects.Add(lineObj)

            ' The third container contains a ellipse object
            Dim container2 As New AnnContainer()
            Dim ellipseObj As New AnnEllipseObject()
            ellipseObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
            ellipseObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            ellipseObj.Brush = Nothing
            container2.Objects.Add(ellipseObj)

            ' create a memory stream to save both annotation containers
            Using ms As New MemoryStream()
                ' create a new AnnCodecs class
                Dim codecs As New AnnCodecs()

                ' save both AnnContainers into the stream
                codecs.Save(ms, container0, AnnCodecsFormat.Xml, 1, AnnCodecsSavePageMode.Overwrite)
                ms.Seek(0, SeekOrigin.Begin)

                codecs.Save(ms, container1, AnnCodecsFormat.Xml, 2, AnnCodecsSavePageMode.Insert)
                ms.Seek(0, SeekOrigin.Begin)

                ' Now load both containers from the stream, and verify that there are two containers
                Dim containersTwo() As AnnContainer = codecs.Load(ms)
                MessageBox.Show(String.Format("After Load: there should be 2 containers.  Total number of containers: {0}", containersTwo.Length))

                ' Add another container, and save to the stream
                Dim containersNew(containersTwo.Length) As AnnContainer
                Array.Copy(containersTwo, containersNew, containersTwo.Length)
                containersNew(2) = container2
                ms.Seek(0, SeekOrigin.Begin)

                codecs.Save(ms, containersNew, AnnCodecsFormat.Xml)
                ms.Seek(0, SeekOrigin.Begin)

                ' Load and verify that there are three containers
                Dim containersThree() As AnnContainer = codecs.Load(ms)
                MessageBox.Show(String.Format("After Load: there should be 3 containers.  Total number of containers: {0}", containersThree.Length))
            End Using
        End Sub</code>
        <code lang="CS">      public void AnnCodecs_SaveStream2()
      {
         // create three  annotation containers
         // The first container contains a rectangle object
         AnnContainer container0 = new AnnContainer();
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         container0.Objects.Add(rectObj);

         // The second container contains a line object
         AnnContainer container1 = new AnnContainer();
         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         container1.Objects.Add(lineObj);

         // The third container contains a ellipse object
         AnnContainer container2 = new AnnContainer();
         AnnEllipseObject ellipseObj = new AnnEllipseObject();
         ellipseObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         ellipseObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         ellipseObj.Brush = null;
         container2.Objects.Add(ellipseObj);

         // create a memory stream to save both annotation containers
         using (MemoryStream ms = new MemoryStream())
         {
            // create a new AnnCodecs class
            AnnCodecs codecs = new AnnCodecs();

            // save both AnnContainers into the stream
            codecs.Save(ms, container0, AnnCodecsFormat.Xml, 1, AnnCodecsSavePageMode.Overwrite);
            ms.Seek(0, SeekOrigin.Begin);

            codecs.Save(ms, container1, AnnCodecsFormat.Xml, 2, AnnCodecsSavePageMode.Insert);
            ms.Seek(0, SeekOrigin.Begin);

            // Now load both containers from the stream, and verify that there are two containers
            AnnContainer[] containersTwo = codecs.Load(ms);
            MessageBox.Show(String.Format("After Load: there should be 2 containers.  Total number of containers: {0}", containersTwo.Length));

            // Add another container, and save to the stream
            AnnContainer[] containersNew = new AnnContainer[containersTwo.Length + 1];
            Array.Copy(containersTwo, containersNew, containersTwo.Length);
            containersNew[2] = container2;
            ms.Seek(0, SeekOrigin.Begin);

            codecs.Save(ms, containersNew, AnnCodecsFormat.Xml);
            ms.Seek(0, SeekOrigin.Begin);

            // Load and verify that there are three containers
            AnnContainer[] containersThree = codecs.Load(ms);
            MessageBox.Show(String.Format("After Load: there should be 3 containers.  Total number of containers: {0}", containersThree.Length));
         }
      }</code>
        <!--AnnCodecs.SaveStream2-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Load(System.String)">
      <summary>
            Loads all pages from an annotation disk file.
            </summary>
      <param name="fileName">Name of the annotation file to load.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnContainer" /> where each item in the array corresponds to each page in the annotation file <paramref name="fileName" />.
            </returns>
      <remarks>
        <p>
            Use the method to load all pages of a annotation file at once.
            If the annotation file contains many pages, then this method will load the pages much faster than 
            calling <see cref="M:Leadtools.Annotations.AnnCodecs.Load(System.String,Leadtools.Annotations.AnnContainer,System.Int32)"></see> multiple times (once for each page in the annotation file).
            </p>
        <p>
            This method only supports the <see cref="T:Leadtools.Annotations.AnnCodecsFormat">AnnCodecsFormat.Xml</see> format.  All other <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> are not supported.
            </p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.String,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)" />.
            </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecs.Load(System.IO.Stream)">
      <summary>
            Loads all pages from an annotation disk file.
            </summary>
      <param name="stream">The stream from which to load all pages of the multipage annotation stream.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnContainer" /> where each item in the array corresponds to each page in the annotation file <paramref name="stream" />.
            </returns>
      <remarks>
        <p>
            Use the method to load all pages of a stream containing one or more annotation pages..
            If the annotation stream contains many pages, then this method will load the pages much faster than 
            calling <see cref="M:Leadtools.Annotations.AnnCodecs.Load(System.IO.Stream,Leadtools.Annotations.AnnContainer,System.Int32)"></see> multiple times (once for each page in the annotation stream).
            </p>
        <p>
            This method only supports the <see cref="T:Leadtools.Annotations.AnnCodecsFormat">AnnCodecsFormat.Xml</see> format.  All other <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> are not supported.
            </p>
        <p>For more information, refer to <see cref="T:AN.Topics.AnnotationFiles">Annotation Files</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnCodecs.Save(System.IO.Stream,Leadtools.Annotations.AnnContainer[],Leadtools.Annotations.AnnCodecsFormat)" />.
            </example>
    </member>
    <member name="T:Leadtools.Annotations.AnnAutomationObject">
      <summary>
            Defines all the properties needed to automate an annotation object.
            </summary>
      <remarks>
        <p>You create an instance of this class and fill it up with the properties you want and then you add it to the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> collection.  At any time, you can enumerate the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> collection and add/remove/modify any properties you want.</p>
        <p>The <see cref="M:Leadtools.Annotations.AnnAutomationManager.CreateDefaultObjects" /> method creates the default <b>AnnAutomationObject</b> objects for the default annotation objects.</p>
        <p>LEADTOOLS will create the automation properties for the default annotation objects. You can change any property behavior by overriding members of this class or deriving your own.  For more information on creating user automation objects, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></p>
        <p>For information regarding default text strings used throughout the user interface in the automated mode, including information on how to override them, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.Id">
      <summary>
            Gets or sets the id of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The id of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.Name">
      <summary>
            Gets or sets the name of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>A string value that represents the name of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            This is the name of the annotation object with which this automation object is associated.  This value is used by the automation framework to display the name of the object in places such as the property page and the context menu.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.Object">
      <summary>
            Gets or sets the initial annotation object of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The initial annotation object of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The automation framework will use <see cref="M:Leadtools.Annotations.AnnObject.Clone" /> to create new instances of the annotation object whenever the framework is instructed to draw a new object of this type.  You should set the default properties (pen, brush, font, etc) of the object here.  You should set this property to a valid object, the only automation object that has this value set to null (Nothing in Visual Basic) is the <see cref="F:Leadtools.Annotations.AnnAutomationManager.SelectObjectId" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.DrawDesignerType">
      <summary>
            Gets or sets the type of the draw designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the draw designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The automation framework will use reflection and this type to create the draw designer whenever an object of this type is to be drawn.  You should set this value to the type of one of the derived classes of <see cref="T:Leadtools.Annotations.AnnDrawDesigner" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType">
      <summary>
            Gets or sets the type of the edit designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the edit designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The automation framework will use reflection and this type to create the edit designer whenever an object of this type is to be edited.  You should set this value to the type of one of the derived classes of <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Setting this value to null (Nothing in Visual Basic) will disable the UI editing (moving, resizing, etc) of this object in design mode.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.RunDesignerType">
      <summary>
            Gets or sets the type of the run designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the run designer of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The automation framework will use reflection and this type to create the run designer whenever an object of this type is to be run.  You should set this value to type of <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> or one of its derived classes.  Setting this value to null (Nothing in Visual Basic) will disable the automation of this object in run mode.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.ToolBarImage">
      <summary>
            Gets or sets the image to be used on this <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> toolbar button.
            </summary>
      <value>The <see cref="T:System.Drawing.Image" /> that appears on this <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> toolbar button.</value>
      <remarks>
            The image can have any size and any bits/pixel. However, it is advised to use the same size
            and bits/pixel for all toolbar button images for all automation objects. A recommended toolbar
            button image has a size of 16 by 16 or 24 by 24 with 4 bits/pixel. Note that the automation framework 
            will use the top-left pixel of the first automation object toolbar button image found in the
             <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> as the transparent color for the toolbar.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.ToolBarToolTipText">
      <summary>
            Gets or sets the text that appears as a ToolTip for this <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> toolbar button.
            </summary>
      <value>The text that appears as a ToolTip for this <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> toolbar button.</value>
      <remarks>
            This text is displayed when the mouse pointer moves over the toolbar button.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.ToolBarButton">
      <summary>
            Gets the toolbar button of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.ToolBarButton" /> which represents the toolbar button of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            (Read only) Calling <see cref="M:Leadtools.Annotations.AnnAutomationManager.CreateToolBar" /> will create the toolbar and all the buttons for all the automation objects in <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" />.  After that, you can use this property to edit the toolbar button control if needed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.DrawCursor">
      <summary>
            Gets or sets the draw designer mouse cursor of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The draw designer mouse <see cref="T:System.Windows.Forms.Cursor" /> of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The draw designer mouse cursor is displayed in design mode when drawing a new annotation object associated with this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.ContextMenu">
      <summary>
            Gets or sets the context menu of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>The context menu of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</value>
      <remarks>
            The Context Menu is displayed whenever an annotation object associated with this automation object is right-clicked by the mouse in design mode.  You can use this context menu directly or you can derive your own classes from the <see cref="T:System.Windows.Forms.ContextMenu" />  class and assign it to this value.  Setting this value to null (Nothing in Visual Basic) disables showing the context menu for this object in design mode.
            <p>For information regarding default context menus used throughout the user interface in the automated mode, including information on how to override the default values, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>.</p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationObject.UseRotateControlPoints">
      <summary>
            Gets or sets the use of rotate control points of this <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.
            </summary>
      <value>true if using rotate control points for <see cref="T:Leadtools.Annotations.AnnObject" /> rotation; false otherwise.</value>
      <remarks>
            For more control over rotating an <see cref="T:Leadtools.Annotations.AnnObject" /> or a <see cref="T:Leadtools.Annotations.AnnGroupObject" /> in design mode with an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />, 
            set this property to true.
            This allows the user to precisely control the rotate center, 
            as well as the rotate angle, by moving the
            rotate control points.  Setting this to false uses the older rotate user interface.
            <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p><seealso cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" /><seealso cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPoint" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRulerObject">
      <summary>
             This class provides support for creating and managing Ruler annotation objects.
             </summary>
      <remarks>
             The annotation ruler object is characterized by starting and ending points, a bounding rectangle, a pen, a length, 
             tick marks, and a gauge. The pen is inherited from the <see cref="T:Leadtools.Annotations.AnnDrawable" /> class.<br />
             For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see><para>
             For more information about the ruler annotation object refer to 
             <see cref="T:AN.Topics.AnnRulerObject">AnnRulerObject</see>. 
             For more information about the automated ruler annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
              and 
             <see cref="T:AN.Topics.AutomatedAnnotationsRulerTab">Automated Annotations - Ruler Tab</see>. 
             </para></remarks>
      <example>
        <para>This method creates a new ruler object that extends from 10.0, 4.5 to 20.56, 40.3 and is measured in inches.</para>
        <code lang="VB">      Private Sub AnnRulerObject_AnnRulerObject(ByVal container As AnnContainer)
         Dim ruler As AnnRulerObject = New AnnRulerObject()
         ruler.StartPoint = New AnnPoint(10.0F, 4.5F, AnnUnit.Inch)
         ruler.EndPoint = New AnnPoint(20.56F, 40.3F, AnnUnit.Inch)
         ruler.MeasurementUnit = AnnUnit.SmartEnglish
         ruler.TickMarksLength = New AnnLength(0.5F, AnnUnit.Inch)
         ruler.ShowTickMarks = True
         ruler.GaugeLength = New AnnLength(1.0F, AnnUnit.Inch)
         ruler.ShowGauge = True
         ruler.ShowLength = True
         ruler.Precision = 2
         ruler.Pen = New AnnPen(Color.Red, New AnnLength(4))
         container.Objects.Add(ruler)
      End Sub</code>
        <code lang="CS">      private void AnnRulerObject_AnnRulerObject(AnnContainer container)
      {
         AnnRulerObject ruler = new AnnRulerObject();
         ruler.StartPoint = new AnnPoint(10.0F, 4.5F, AnnUnit.Inch);
         ruler.EndPoint = new AnnPoint(20.56F, 40.3F, AnnUnit.Inch);
         ruler.MeasurementUnit = AnnUnit.SmartEnglish;
         ruler.TickMarksLength = new AnnLength(0.5F, AnnUnit.Inch);
         ruler.ShowTickMarks = true;
         ruler.GaugeLength = new AnnLength(1.0F, AnnUnit.Inch);
         ruler.ShowGauge = true;
         ruler.ShowLength = true;
         ruler.Precision = 2;
         ruler.Pen = new AnnPen(Color.Red, new AnnLength(4));
         container.Objects.Add(ruler);
      }</code>
        <!--AnnRulerObject.AnnRulerObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class object to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that are used to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.Create">
      <summary>
            Creates a new instance of an <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnRulerObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies the path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnRulerObject" />.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnRulerObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> objects that contain the points to be transformed.
            </returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnRulerObject" /> overrides this member to return an array of 2 points, the <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint" /> and <see cref="P:Leadtools.Annotations.AnnLineObject.EndPoint" /> to be transformed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> objects specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify the transformation method.</param>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnRulerObject" /> overrides this member to copy the new transformed values to the <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint" /> and <see cref="P:Leadtools.Annotations.AnnLineObject.EndPoint" /> values.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRulerObject.GetRulerLength(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnit,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Gets the length of the ruler between two points.
            </summary>
      <noremarks />
      <param name="startPoint">Starting point of the ruler.</param>
      <param name="endPoint">Ending point of the ruler.</param>
      <param name="measurementUnit">Unit of measurement to use.</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to use when converting the units if necessary.</param>
      <returns>The length of the ruler in <i>measurementUnit</i> units</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.RulerImplemented">
      <summary>
            Gets a value that indicates whether this object implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  
            </summary>
      <value>This property will always be true for an <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</value>
      <remarks>(Read only)  This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include a ruler should 
            implement this property to always return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit">
      <summary>
            Gets or sets a value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation used for the <see cref="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit" /> property value.
            </summary>
      <value>A string value that specifies the abbreviation used for the <see cref="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit" /> property value.</value>
      <remarks>
            The <b>UnitAbbreviation</b> property resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the value for the <see cref="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit" /> property.  
            To get the default abbreviation value, call the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)" /> method.
            This property is used only if the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowLength" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.TickMarksLength">
      <summary>
            Gets or sets the length of the tick marks for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the current tick marks for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</value>
      <remarks>
            To display the tick marks, set the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowTickMarks" /> property to true.  
            This property is used only if the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowTickMarks" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object are visible.
            </summary>
      <value>true if the tick marks for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object are visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</value>
      <remarks>
            To display the gauge, set the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowGauge" /> property to true.  
            This property is used only if the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowGauge" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object is visible.
            </summary>
      <value>true if the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object is visible; false otherwise.</value>
      <remarks>
            To set the length of the gauge, set the <see cref="P:Leadtools.Annotations.AnnRulerObject.GaugeLength" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.ShowLength">
      <summary>
            Gets or sets a value that indicates whether to display the length of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>true to show the length of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object; false otherwise.</value>
      <remarks>
            If this property is true, the <see cref="P:Leadtools.Annotations.AnnRulerObject.MeasurementUnit" /> property
            contains the unit of measure for this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object; the <see cref="P:Leadtools.Annotations.AnnRulerObject.UnitAbbreviation" /> property
            contains the abbreviation for the unit of measure displayed with the length and the <see cref="P:Leadtools.Annotations.AnnRulerObject.Precision" /> 
            property contains the number of digits to display to the right of the decimal point in the length.   <br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.Precision">
      <summary>
            Gets or sets the number of digits to the right of the decimal point when displaying the length of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>The number of digits to the right of the decimal point.</value>
      <remarks>
            If the ruler length is 135.683 and the precision is 2, the value 135.68 will be displayed.
            This property is used only if the <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowLength" /> property is true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.TransformObjectMode">
      <summary>
            Gets a value that indicates how to transform this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object when any of the object transformation methods is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that indicates how to transform this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object when any of the object transformation methods is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnRulerObject" /> class overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  
            This property, the <see cref="M:Leadtools.Annotations.AnnRulerObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> method and the <see cref="M:Leadtools.Annotations.AnnRulerObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method ensure that the ruler object 
            physically transforms the <see cref="P:Leadtools.Annotations.AnnLineObject.StartPoint" /> and <see cref="P:Leadtools.Annotations.AnnLineObject.EndPoint" /> values whenever the ruler object is transformed.  
            This insures correct values for the ruler length at all times.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.HitTestInterior">
      <summary>
            (Read only) Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnRulerObject" />; false otherwise.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnRulerObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.
            </summary>
      <value>The logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnRulerObject" /> overrides this member to return the logical bounding rectangle of the ruler.  
            This bounding rectangle contains the ruler itself, the gauge, the tick marks, and the units of measure, if visible.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.annRulerInternal">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnRulerObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the text representing the length of this <see cref="T:Leadtools.Annotations.AnnRulerObject" /> object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the text representing the length to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>To show the length of a ruler, use <see cref="P:Leadtools.Annotations.AnnRulerObject.ShowLength" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPolygonObject">
      <summary>
             Defines an annotation polygon object.
             </summary>
      <remarks>
        <para> The polygon object is a simple polygon that contains a collection 
             of <see cref="T:Leadtools.Annotations.AnnPoint" /> points, a <see cref="T:Leadtools.Annotations.AnnPen" /> pen and a 
             <see cref="T:Leadtools.Annotations.AnnBrush" /> brush.  The polygon can be 
             <see cref="P:Leadtools.Annotations.AnnPolygonObject.Closed" /> or not, and can also have a certain 
             <see cref="P:Leadtools.Annotations.AnnPolygonObject.FillMode" />. For an illustration of the different fill modes, refer to 
             <see cref="T:AN.Topics.PolygonFillModeForAnnotations"> 
             Illustration of the Polygon Fill Mode for Annotations.</see></para>
        <para>For more information about the polygon annotation object refer to 
             <see cref="T:AN.Topics.AnnPolygonObject">AnnPolygonObject</see>. 
             For more information about the automated polygon annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a new closed polygon object with 4 points.</para>
        <code lang="VB">      Private Sub AnnPolygonObject_AnnPolygonObject(ByVal container As AnnContainer)
         Dim polygon As AnnPolygonObject = New AnnPolygonObject()
         polygon.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         polygon.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         polygon.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         polygon.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         polygon.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         polygon.Brush = New AnnSolidBrush(Color.White)
         polygon.FillMode = FillMode.Alternate
         polygon.Closed = True
         container.Objects.Add(polygon)
      End Sub</code>
        <code lang="CS">      private void AnnPolygonObject_AnnPolygonObject(AnnContainer container)
      {
         AnnPolygonObject polygon = new AnnPolygonObject();
         polygon.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         polygon.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         polygon.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         polygon.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         polygon.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         polygon.Brush = new AnnSolidBrush(Color.White);
         polygon.FillMode = FillMode.Alternate;
         polygon.Closed = true;
         container.Objects.Add(polygon);
      }</code>
        <!--AnnPolygonObject.AnnPolygonObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolygonObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolygonObject.FillMode">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.FillMode" /> value that determines how the interior of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> is filled.
            </summary>
      <value>A <see cref="T:System.Drawing.Drawing2D.FillMode" /> value that determines how the interior of this <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> is filled.</value>
      <remarks>
            For an illustration of the available fill modes, refer to <see cref="T:AN.Topics.PolygonFillModeForAnnotations">Illustration of the Polygon Fill Mode for Annotations.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolygonObject.Closed">
      <summary>
            Gets or sets a value indicating whether this is a closed <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <value>true if this is a closed <see cref="T:Leadtools.Annotations.AnnPolygonObject" />; false otherwise.</value>
      <remarks>
            If the value of this property is true, the polygon will draw an extra line from the last point in the <see cref="P:Leadtools.Annotations.AnnPolylineObject.Points" /> collection back to the first point.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolygonObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCurveObject">
      <summary>
             Defines an annotation curve object.
             </summary>
      <remarks>
        <para> The curve object is a spline curve that contains a collection of <see cref="T:Leadtools.Annotations.AnnPoint" /> points, a <see cref="P:Leadtools.Annotations.AnnCurveObject.Tension" /> value and an <see cref="T:Leadtools.Annotations.AnnPen" /> pen. 
             For more information about the curve annotation object refer to 
             <see cref="T:AN.Topics.AnnCurveObject">AnnCurveObject</see>. 
             For more information about the automated curve annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a curve object.</para>
        <code lang="VB">      Private Sub AnnCurveObject_AnnCurveObject(ByVal container As AnnContainer)
         Dim curve As AnnCurveObject = New AnnCurveObject()
         curve.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         curve.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         curve.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         curve.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         curve.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         curve.Tension = 1
         container.Objects.Add(curve)
      End Sub</code>
        <code lang="CS">      private void AnnCurveObject_AnnCurveObject(AnnContainer container)
      {
         AnnCurveObject curve = new AnnCurveObject();
         curve.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         curve.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         curve.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         curve.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         curve.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         curve.Tension = 1;
         container.Objects.Add(curve);
      }</code>
        <!--AnnCurveObject.AnnCurveObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnCurveObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnCurveObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnCurveObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCurveObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies the path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnCurveObject" /> object will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnCurveObject.Tension">
      <summary>
            Gets or sets a value that specifies the amount that this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> curve bends between control points.
            </summary>
      <value>A value that specifies the amount that this <see cref="T:Leadtools.Annotations.AnnCurveObject" /> curve bends between control points.</value>
      <remarks>
            Valid values are between 0.0 and 1.0, where 0.0 indicates straight lines, and 1.0 indicates lines with the highest curvature. A typical value is 0.5. These values for Tension for a Closed Curve object are shown in the following bitmap:
            <img src="TensiondotNET.jpg"></img></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCurveObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnLinearGradientBrush">
      <summary>
            Encapsulates an annotation brush object with a linear gradient.
            </summary>
      <remarks>
        <p>Annotation brushes are used to fill the interiors of annotation objects like rectangles, ellipses, polygons, etc.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ChangingAnnotationAutomationBackgroundColors">Changing Annotation Automation Background Colors.</see></p>
      </remarks>
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> to draw a rectangle.</para>
        <code lang="VB">      Private Sub AnnLinearGradientBrush_AnnLinearGradientBrush(ByVal graphics As Graphics, ByVal converter As AnnUnitConverter, ByVal rc As AnnRectangle)
         Dim annBrush As AnnLinearGradientBrush = New AnnLinearGradientBrush(Color.Red, Color.Blue, LinearGradientMode.Horizontal)
         Dim gdiBrush As Brush = annBrush.Create(converter, rc)
         Try
            Dim rect As RectangleF = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF()
            graphics.FillRectangle(gdiBrush, rect)
         Finally
            CType(gdiBrush, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      private void AnnLinearGradientBrush_AnnLinearGradientBrush(Graphics graphics, AnnUnitConverter converter, AnnRectangle rc)
      {
         AnnLinearGradientBrush annBrush = new AnnLinearGradientBrush(Color.Red, Color.Blue, LinearGradientMode.Horizontal);
         using(Brush gdiBrush = annBrush.Create(converter, rc))
         {
            RectangleF rect = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF();
            graphics.FillRectangle(gdiBrush, rect);
         }
      }</code>
        <!--AnnLinearGradientBrush.AnnLinearGradientBrush-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> object based on a starting color, ending color and orientation.
            </summary>
      <noremarks />
      <param name="color1">The <see cref="T:System.Drawing.Color" /> structure that represents the starting color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</param>
      <param name="color2">The <see cref="T:System.Drawing.Color" /> structure that represents the ending color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</param>
      <param name="mode">A <see cref="P:Leadtools.Annotations.AnnLinearGradientBrush.LinearGradientMode" /> enumeration element that specifies the orientation of the gradient. The orientation determines the starting and ending points of the gradient. For example, LinearGradientMode.ForwardDiagonal specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.Create(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnRectangle)">
      <summary>
            Creates a new GDI+ brush object using this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </summary>
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting any annotation lengths, points, etc. this brush might have.</param>
      <param name="rect">Specifies an <see cref="T:Leadtools.Annotations.AnnRectangle" /> object defining the bounding rectangle to be used with this brush.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Brush" /> object created from this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> uses the <i>rect</i> as the bounds of the linear gradient.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLinearGradientBrush.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLinearGradientBrush.Color1">
      <summary>
            Gets or sets the starting color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> object.
            </summary>
      <noremarks />
      <value>The starting color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLinearGradientBrush.Color1Xml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the starting color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnLinearGradientBrush.Color2">
      <summary>
            Gets or sets the ending color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" /> object.
            </summary>
      <noremarks />
      <value>The ending color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLinearGradientBrush.Color2Xml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the ending color of this <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnLinearGradientBrush.LinearGradientMode">
      <summary>
            A <see cref="P:Leadtools.Annotations.AnnLinearGradientBrush.LinearGradientMode" /> enumeration element that specifies the orientation of the gradient.
            </summary>
      <value>A <see cref="P:Leadtools.Annotations.AnnLinearGradientBrush.LinearGradientMode" /> enumeration element that specifies the orientation of the gradient.</value>
      <remarks>
             The orientation determines the starting and ending points of the gradient. For example, LinearGradientMode.ForwardDiagonal specifies that the starting point is the upper-left corner of the rectangle and the ending point is the lower-right corner of the rectangle.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLinearGradientBrush" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRunDesignerEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnRunDesigner.Run" /> event.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesignerEventArgs.#ctor(Leadtools.Annotations.AnnObject,Leadtools.Annotations.AnnDesignerOperationStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" /> class.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> currently being run.</param>
      <param name="operationStatus">An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the current status of the running operation.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesignerEventArgs.Object">
      <summary>
            Gets the <see cref="T:Leadtools.Annotations.AnnObject" /> object currently being run.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> object that represents the object currently being run by the <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesignerEventArgs.OperationStatus">
      <summary>
            Gets the current run operation status.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the status of the current running operation of the <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesignerEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the running operation should be canceled.
            </summary>
      <value>true to cancel the current running operation; otherwise, false.</value>
      <remarks>
            You should set this property to true to cancel the current running operation of the <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> that raised this event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPoint">
      <summary>
            Represents an ordered pair of float x- and y- coordinates and a unit of measurement that defines a point in a two-dimensional plane.
            </summary>
      <noremarks />
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnPoint" /> in inches and then converts it to pixels.</para>
        <code lang="VB">      Private Sub AnnPoint_AnnPoint()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation point at inch coordinate 1.5, 2

         Dim pt As AnnPoint = New AnnPoint(1.5F, 2.0F, AnnUnit.Inch)

         ' show the point
         Dim s As String = String.Format("{0}", pt)
         MessageBox.Show(s)

         ' convert the point to pixels
         pt.Convert(converter, AnnUnit.Pixel)


         ' show
         s = String.Format("{0}", pt)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      private void AnnPoint_AnnPoint()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation point at inch coordinate 1.5, 2

         AnnPoint pt = new AnnPoint(1.5f, 2f, AnnUnit.Inch);

         // show the point
         string s = string.Format("{0}", pt);
         MessageBox.Show(s);

         // convert the point to pixels
         pt.Convert(converter, AnnUnit.Pixel);


         // show
         s = string.Format("{0}", pt);
         MessageBox.Show(s);
      }</code>
        <!--AnnPoint.AnnPoint-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure with the specified coordinates.
            </summary>
      <noremarks />
      <param name="x">The horizontal position of the point.</param>
      <param name="y">The vertical position of the point.</param>
      <remarks>Unit will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.#ctor(System.Single,System.Single,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure with the specified coordinates and unit of measure.
            </summary>
      <noremarks />
      <param name="x">The horizontal position of the point.</param>
      <param name="y">The vertical position of the point.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> value specifying the unit of measure for this point.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.#ctor(System.Drawing.PointF)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure from a PointF.
            </summary>
      <param name="pt">A PointF that specifies the coordinates for the new <see cref="T:Leadtools.Annotations.AnnPoint" />.</param>
      <remarks>Unit will be set to the default (Pixel).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.#ctor(System.Drawing.PointF,Leadtools.Annotations.AnnUnit)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure from a PointF structure and a unit of measure.
            </summary>
      <noremarks />
      <param name="pt">A PointF structure that specifies the coordinates for the new <see cref="T:Leadtools.Annotations.AnnPoint" />.</param>
      <param name="unit">An <see cref="T:Leadtools.Annotations.AnnUnit" /> value specifying the unit of measure for this point.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnPoint.Empty">
      <summary>
            Represents a new instance of the <see cref="T:Leadtools.Annotations.AnnPoint" /> structure with member data left uninitialized.
            </summary>
      <remarks>(Read only) An uninitialized point has an X, Y value of 0,0 and a unit of Pixel.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.ConvertedX(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the x-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the x-coordinate.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</param>
      <returns>The value of the x-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" /> converted to its equivalent using the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
        <para>This example creates a new <see cref="T:Leadtools.Annotations.AnnPoint" /> in inches and then displays the X and Y coordinate values in pixels.</para>
        <code lang="VB">      Public Sub AnnPoint_ConvertedX()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' create a new annotation point at inch coordinate 1.5, 2
         Dim pt As AnnPoint = New AnnPoint(1.5F, 2.0F, AnnUnit.Inch)

         ' show the point
         Dim s As String
         s = String.Format("Show the point: {0}", pt)
         MessageBox.Show(s)

         ' show the X,Y coordinates converted to pixels
         s = String.Format("show the X,Y coordinates converted to pixels: Is {0}, {1} Pixels", pt.ConvertedX(converter, AnnUnit.Pixel), pt.ConvertedY(converter, AnnUnit.Pixel))
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnPoint_ConvertedX()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // create a new annotation point at inch coordinate 1.5, 2
         AnnPoint pt = new AnnPoint(1.5f, 2f, AnnUnit.Inch);

         // show the point
         string s;
         s = string.Format("Show the point: {0}", pt);
         MessageBox.Show(s);

         // show the X,Y coordinates converted to pixels
         s = string.Format("show the X,Y coordinates converted to pixels: Is {0}, {1} Pixels", pt.ConvertedX(converter, AnnUnit.Pixel), pt.ConvertedY(converter, AnnUnit.Pixel));
         MessageBox.Show(s);
      }</code>
        <!--AnnPoint.ConvertedX-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.ConvertedY(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Returns the value of the y-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.
            </summary>
      <param name="converter">
        <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in converting the y-coordinate.</param>
      <param name="unit">Destination <see cref="T:Leadtools.Annotations.AnnUnit" />.</param>
      <returns>The y-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure, converted to its equivalent in the specified <see cref="T:Leadtools.Annotations.AnnUnit" /> unit of measure.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnPoint.ConvertedX(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.ToString">
      <summary>
            Overridden. Converts this <see cref="T:Leadtools.Annotations.AnnPoint" /> to a human-readable string.
            </summary>
      <noremarks />
      <returns>A string that represents the attributes of this <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.<br />
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.Equals(System.Object)">
      <summary>
            Specifies whether this <see cref="T:Leadtools.Annotations.AnnPoint" /> contains the same coordinates as the specified Object.<br />
            For more information about this method, see <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>/&gt;.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object,System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.op_Equality(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnPoint" /> structures are equal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure on the left side of the equality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure on the right side of the equality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have equal X and Y values; otherwise false.</returns>
      <remarks>
            If the two points have different units, the comparison will be done after temporarily converting both to a common unit.
            </remarks>
      <example>
        <para>This example creates a point in inches, converts it to pixels and then makes sure the 2 points are still equal.</para>
        <code lang="VB">      Public Sub AnnPoint_OperatorEquals()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         Dim inches As AnnPoint = New AnnPoint(1.5F, 2.0F, AnnUnit.Inch)
         Dim pixels As AnnPoint = New AnnPoint(inches.ConvertTo(converter, AnnUnit.Pixel).ToPointF(), AnnUnit.Pixel)

         ' should say true
         Dim s As String
         s = String.Format("Should say True: inches == pixels is {0}", AnnPoint.op_Equality(inches, pixels))

         MessageBox.Show(s)

         ' should say false
         s = String.Format("Should say False: inches != pixels is {0}", AnnPoint.op_Inequality(inches, pixels))

         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnPoint_OperatorEquals()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         AnnPoint inches = new AnnPoint(1.5F, 2f, AnnUnit.Inch);
         AnnPoint pixels = new AnnPoint(inches.ConvertTo(converter, AnnUnit.Pixel).ToPointF(), AnnUnit.Pixel);

         // should say true
         string s;
         s = string.Format("Should say True: inches == pixels is {0}", inches == pixels);
         MessageBox.Show(s);

         // should say false
         s = string.Format("Should say False: inches != pixels is {0}", inches != pixels);
         MessageBox.Show(s);
      }</code>
        <!--AnnPoint.OperatorEquals-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.op_Inequality(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint)">
      <summary>
            Tests whether two <see cref="T:Leadtools.Annotations.AnnPoint" /> structures are unequal.
            </summary>
      <param name="left">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure on the left side of the inequality operator.</param>
      <param name="right">The <see cref="T:Leadtools.Annotations.AnnPoint" /> structure on the right side of the inequality operator.</param>
      <returns>This operator returns true if <i>left</i> and <i>right</i> have unequal X and Y values; otherwise false.</returns>
      <remarks>
            If the two points have different units, the comparison will be done after temporarily converting both to a common unit.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnPoint.op_Equality(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.op_Addition(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnSize)">
      <summary>
            Translates an <see cref="T:Leadtools.Annotations.AnnPoint" /> by a given <see cref="T:Leadtools.Annotations.AnnSize" />.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to translate.</param>
      <param name="sz">The <see cref="T:Leadtools.Annotations.AnnSize" /> that specifies the pair of numbers to add to the coordinates of <i>pt</i>.</param>
      <returns>Returns the translated <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <example>
        <para>This example adds a size to a point.</para>
        <code lang="VB">      Public Sub AnnPoint_OperatorPlus()
         Dim pt As AnnPoint = New AnnPoint(200, 300, AnnUnit.Pixel)
         Dim sz As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim s As String = String.Format("pt + sz = {0}", pt + sz)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnPoint_OperatorPlus()
      {
         AnnPoint pt = new AnnPoint(200, 300, AnnUnit.Pixel);
         AnnSize sz = new AnnSize(1.5F, 2F, AnnUnit.Inch);
         string s = string.Format("pt + sz = {0}", pt + sz);
         MessageBox.Show(s);
      }</code>
        <!--AnnPoint.OperatorPlus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.Add(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnSize)">
      <summary>
            Translates an <see cref="T:Leadtools.Annotations.AnnPoint" /> by a given <see cref="T:Leadtools.Annotations.AnnSize" />.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to translate.</param>
      <param name="sz">The <see cref="T:Leadtools.Annotations.AnnSize" /> that specifies the pair of numbers to add to the coordinates of <i>pt</i>.</param>
      <returns>Returns the translated <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.op_Subtraction(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnSize)">
      <summary>
            Translates an <see cref="T:Leadtools.Annotations.AnnPoint" /> by the negative of a given <see cref="T:Leadtools.Annotations.AnnSize" />.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to translate.</param>
      <param name="sz">The <see cref="T:Leadtools.Annotations.AnnSize" /> that specifies the pair of numbers to subtract from the coordinates of <i>pt</i>.</param>
      <returns>Returns the translated <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <example>
        <para>This method subtracts a size from a point.</para>
        <code lang="VB">      Public Sub AnnPoint_OperatorMinus()
         Dim pt As AnnPoint = New AnnPoint(200, 300, AnnUnit.Pixel)
         Dim sz As AnnSize = New AnnSize(1.5F, 2.0F, AnnUnit.Inch)
         Dim s As String = String.Format("pt - sz = {0}", pt - sz)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void AnnPoint_OperatorMinus()
      {
         AnnPoint pt = new AnnPoint(200, 300, AnnUnit.Pixel);
         AnnSize sz = new AnnSize(1.5F, 2F, AnnUnit.Inch);
         string s = string.Format("pt - sz = {0}", pt - sz);
         MessageBox.Show(s);
      }</code>
        <!--AnnPoint.OperatorMinus-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.Subtract(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnSize)">
      <summary>
            Translates an <see cref="T:Leadtools.Annotations.AnnPoint" /> by the negative of a given <see cref="T:Leadtools.Annotations.AnnSize" />.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to translate.</param>
      <param name="sz">The <see cref="T:Leadtools.Annotations.AnnSize" /> that specifies the pair of numbers to subtract from the coordinates of <i>pt</i>.</param>
      <returns>Returns the translated <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.ToPointF">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnPoint" /> to a PointF.
            </summary>
      <noremarks />
      <returns>A PointF containing the converted <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.Convert(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnPoint" /> to the specified unit.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">Specifies the destination <see cref="T:Leadtools.Annotations.AnnUnit" /> for the conversion.</param>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to the <see cref="T:Leadtools.Annotations.AnnPoint" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPoint.ConvertTo(Leadtools.Annotations.AnnUnitConverter,Leadtools.Annotations.AnnUnit)">
      <summary>
            Converts this <see cref="T:Leadtools.Annotations.AnnPoint" /> with the specified unit to another <see cref="T:Leadtools.Annotations.AnnPoint" />.
            </summary>
      <param name="converter">Specifies the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used in the conversion.</param>
      <param name="unit">Specifies the destination <see cref="T:Leadtools.Annotations.AnnUnit" /> for the conversion.</param>
      <returns>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure containing the converted value of this <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <remarks>
        <i>converter</i> is used to do the actual conversion. If <i>converter</i> is null (Nothing in Visual Basic), the default <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> is used (in other words, conversion will be done based on the default 96 DPI).
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnPoint.op_Equality(Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnPoint)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPoint.IsEmpty">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure is empty.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure is empty; false, otherwise.</value>
      <remarks>(Read only) An empty AnnPoint is a point with an X, Y value of 0,0.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPoint.X">
      <summary>
            Gets or sets the x-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" />.
            </summary>
      <noremarks />
      <value>The x-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" />.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPoint.Y">
      <summary>
            Gets or sets the y-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" />.
            </summary>
      <noremarks />
      <value>The y-coordinate of this <see cref="T:Leadtools.Annotations.AnnPoint" />.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPoint.Unit">
      <summary>
            Gets or sets a value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that represents the unit of measure for this <see cref="T:Leadtools.Annotations.AnnPoint" /> structure.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnFreehandHotspotObject">
      <summary>
             Defines an annotation freehand hot spot object.
             </summary>
      <remarks>
             The freehand hot spot annotation object is designed to work as a scaled picture drawn inside a collection of points that create a sequence of joined lines.   The freehand hot spot object will draw the picture if the owner container is in design mode.  If the container is in run mode, the freehand hot spot object will not draw the picture.
             <p>For information on using pictures in a freehand hot spot annotation object, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p><para>
             For more information about the freehand hotspot annotation object refer to 
             <see cref="T:AN.Topics.AnnFreehandHotspotObject">AnnFreehandHotspotObject</see>. 
             For more information about the automated freehand hotspot annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
              and 
             <see cref="T:AN.Topics.AutomatedAnnotationsHotspotPictureTab">Automated Annotations - Hotspot Picture Tab</see>. 
             </para></remarks>
      <example>
        <para>This example creates a freehand hotspot object.</para>
        <code lang="VB">      Private Sub AnnFreehandHotspotObject_AnnFreehandHotspotObject(ByVal container As AnnContainer)
         Dim freehandHotspot As AnnFreehandHotspotObject = New AnnFreehandHotspotObject()
         freehandHotspot.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         freehandHotspot.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         freehandHotspot.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         freehandHotspot.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         container.Objects.Add(freehandHotspot)
      End Sub</code>
        <code lang="CS">      private void AnnFreehandHotspotObject_AnnFreehandHotspotObject(AnnContainer container)
      {
         AnnFreehandHotspotObject freehandHotspot = new AnnFreehandHotspotObject();
         freehandHotspot.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         freehandHotspot.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         freehandHotspot.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         freehandHotspot.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         container.Objects.Add(freehandHotspot);
      }</code>
        <!--AnnFreehandHotspotObject.AnnFreehandHotspotObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnFreehandHotspotObject.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this member to return an array of the current points in the poly ruler to be transformed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandHotspotObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /> overrides this member to copy the new transformed values back to the points.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFreehandHotspotObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.</value>
      <remarks>
            If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> will use the picture defined in <see cref="P:Leadtools.Annotations.AnnHotspotObject.DefaultPicture" />.
            <p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFreehandHotspotObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> object; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /> class overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFreehandHotspotObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFreehandHotspotObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnPointObject" /> class overrides this property to return <b>AnnTransformObjectMode.Points</b>.  This property, along with the <see cref="M:Leadtools.Annotations.AnnFreehandHotspotObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnFreehandHotspotObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that the encrypt object physically transforms the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Bounds" /> value whenever the encrypt object is transformed.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPictureTransparentMode">
      <summary>
            Specifies how to treat the transparent color of an <see cref="T:Leadtools.Annotations.AnnPicture" /></summary>
      <noremarks />
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.</example>
    </member>
    <member name="F:Leadtools.Annotations.AnnPictureTransparentMode.None">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnPicture" /> is not transparent.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnPictureTransparentMode.UseColor">
      <summary>
            Use the <see cref="P:Leadtools.Annotations.AnnPicture.TransparentColor" /> property of the <see cref="T:Leadtools.Annotations.AnnPicture" />.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnPictureTransparentMode.TopLeftPixel">
      <summary>
            Use the top left pixel of the <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> property of the <see cref="T:Leadtools.Annotations.AnnPicture" /> as the transparent color.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnPicture">
      <summary>
            Defines an annotation picture along with its transparency information.
            </summary>
      <noremarks />
      <example>
        <para>This example creates an image that has a blue ellipse inside a red rectangle.</para>
        <code lang="VB">      Private Sub AnnPicture_AnnPicture(ByVal g As Graphics)
         Dim btmp As Bitmap = New Bitmap(100, 100, PixelFormat.Format32bppArgb)
         Try
            Dim graphicsImage As Graphics = Graphics.FromImage(btmp)
            Try
               graphicsImage.FillRectangle(Brushes.Red, New Rectangle(0, 0, 100, 100))
               graphicsImage.FillEllipse(Brushes.Blue, New Rectangle(0, 0, 100, 100))
               graphicsImage.Dispose()
            Finally
               CType(graphicsImage, IDisposable).Dispose()
            End Try
            ' initialize a new AnnPicture class for this image
            Dim pic As AnnPicture = New AnnPicture(btmp)

            ' draw the picture with no transparency
            Dim rc As Rectangle = New Rectangle(10, 10, pic.Image.Width, pic.Image.Height)
            Dim ia As ImageAttributes = pic.ImageAttributes
            If Not ia Is Nothing Then
               g.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia)
               ia.Dispose()
            Else
               If rc.Width &gt; 1 AndAlso rc.Height &gt; 1 Then
                  g.DrawImage(pic.Image, rc)
               End If
            End If

            ' draw the picture without the ellipse (make transparent color = blue)
            rc.Offset(0, pic.Image.Height + 10)
            pic.TransparentMode = AnnPictureTransparentMode.UseColor
            pic.TransparentColor = Color.Blue

            ia = pic.ImageAttributes
            If Not ia Is Nothing Then
               g.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia)
               ia.Dispose()
            Else
               If rc.Width &gt; 1 AndAlso rc.Height &gt; 1 Then
                  g.DrawImage(pic.Image, rc)
               End If
            End If

            ' draw the picture without the rectangle (use the top left pixel as the transparent color)
            rc.Offset(0, pic.Image.Height + 10)
            pic.TransparentMode = AnnPictureTransparentMode.TopLeftPixel

            ia = pic.ImageAttributes
            If Not ia Is Nothing Then
               g.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia)
               ia.Dispose()
            Else
               If rc.Width &gt; 1 AndAlso rc.Height &gt; 1 Then
                  g.DrawImage(pic.Image, rc)
               End If
            End If
         Finally
            CType(btmp, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      private void AnnPicture_AnnPicture(Graphics graphics)
      {
         using(Bitmap btmp = new Bitmap(100, 100, PixelFormat.Format32bppArgb))
         {
            using(Graphics graphicsImage = Graphics.FromImage(btmp))
            {
               graphicsImage.FillRectangle(Brushes.Red, new Rectangle(0, 0, 100, 100));
               graphicsImage.FillEllipse(Brushes.Blue, new Rectangle(0, 0, 100, 100));
               graphicsImage.Dispose();
            }
            // initialize a new AnnPicture class for this image
            AnnPicture pic = new AnnPicture(btmp);

            // draw the picture with no transparency
            Rectangle rc = new Rectangle(10, 10, pic.Image.Width, pic.Image.Height);
            ImageAttributes ia = pic.ImageAttributes;
            if(ia != null)
            {
               graphics.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia);
               ia.Dispose();
            }
            else
            {
               if(rc.Width &gt; 1 &amp;&amp; rc.Height &gt; 1)
                  graphics.DrawImage(pic.Image, rc);
            }

            // draw the picture without the ellipse (make transparent color = blue)
            rc.Offset(0, pic.Image.Height + 10);
            pic.TransparentMode = AnnPictureTransparentMode.UseColor;
            pic.TransparentColor = Color.Blue;

            ia = pic.ImageAttributes;
            if(ia != null)
            {
               graphics.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia);
               ia.Dispose();
            }
            else
            {
               if(rc.Width &gt; 1 &amp;&amp; rc.Height &gt; 1)
                  graphics.DrawImage(pic.Image, rc);
            }

            // draw the picture without the rectangle (use the top left pixel as the transparent color)
            rc.Offset(0, pic.Image.Height + 10);
            pic.TransparentMode = AnnPictureTransparentMode.TopLeftPixel;

            ia = pic.ImageAttributes;
            if(ia != null)
            {
               graphics.DrawImage(pic.Image, rc, 0, 0, pic.Image.Width, pic.Image.Height, GraphicsUnit.Pixel, ia);
               ia.Dispose();
            }
            else
            {
               if(rc.Width &gt; 1 &amp;&amp; rc.Height &gt; 1)
                  graphics.DrawImage(pic.Image, rc);
            }
         }
      }</code>
        <!--AnnPicture.AnnPicture-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnPicture" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.Dispose">
      <summary>
            Releases all resources used by this object.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.IDisposable.Dispose" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.Object.Finalize" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object.
            </summary>
      <param name="disposing">true if this method was called as a result of calling <see cref="M:Leadtools.Annotations.AnnPicture.Dispose(System.Boolean)" />; false if this method was called as a result of object finalization.</param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.#ctor(System.Drawing.Image)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPicture" /> class with a specific image.
            </summary>
      <noremarks />
      <param name="img">The image to be used with this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.</param>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.</example>
    </member>
    <member name="M:Leadtools.Annotations.AnnPicture.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.Empty">
      <summary>
            Represents a new instance of the <see cref="T:Leadtools.Annotations.AnnPicture" /> class with member data left uninitialized.
            </summary>
      <value>
            A new instance of the <see cref="T:Leadtools.Annotations.AnnPicture" /> class with member data left uninitialized.
            </value>
      <remarks>(Read only) An uninitialized picture has an image of null (Nothing in Visual Basic).</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.Image">
      <summary>
            Gets or sets the image associated with this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.
            </summary>
      <noremarks />
      <value>An <see cref="T:System.Drawing.Image" /> object associated with this <see cref="T:Leadtools.Annotations.AnnPicture" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.ImageXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Image" /> object associated with this <see cref="T:Leadtools.Annotations.AnnPicture" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.TransparentMode">
      <summary>
            Gets or sets the current transparent mode of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnPictureTransparentMode" /> value that represents the current transparent mode of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.TransparentColor">
      <summary>
            Gets or sets the current transparent color of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Color" /> structure that represents the current transparent color of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.TransparentColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> of the current transparent color of this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnPicture.ImageAttributes">
      <summary>
            Gets an <see cref="P:Leadtools.Annotations.AnnPicture.ImageAttributes" /> object that can be used to draw this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.
            </summary>
      <value>an <see cref="P:Leadtools.Annotations.AnnPicture.ImageAttributes" /> object that can be used to draw this <see cref="T:Leadtools.Annotations.AnnPicture" /> object.</value>
      <remarks>
            (Read only) This is a helper property that quickly sets up the transparency information needed to draw this <see cref="T:Leadtools.Annotations.AnnPicture" /> correctly.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRichTextDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
        <para>
          <para>For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</para>
            This example initializes a new designer to draw rich text objects.</para>
        <code lang="VB">      Public Function AnnRichTextDrawDesigner_AnnRichTextDrawDesigner(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer) As AnnRichTextDrawDesigner
         ' start a new rich text draw designer
         Dim richTextDrawDesigner As New AnnRichTextDrawDesigner()
         ' set up the object template (the rich text object)
         Dim richTextObject As New AnnRichTextObject()
         richTextObject.Pen = Nothing
         richTextObject.Brush = Nothing

         ' set up the default text to be used
         ' This is RTF text that is equals to LEADTOOLS in bold red Arial
         richTextDrawDesigner.DefaultRtf = _
            "{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}" + _
            "{\f1\fnil\fcharset0 Microsoft Sans Serif;}}{\colortbl ;\red255\green0\blue0;}" + _
            "\viewkind4\uc1\pard\cf1\lang9\b\i\fs22 LEADTOOLS\cf0\lang1033\b0\i0\f1\fs17\par}"

         ' initialize the rest of the designer
         richTextDrawDesigner.ObjectTemplate = richTextObject
         richTextDrawDesigner.Owner = viewer
         richTextDrawDesigner.ClipCursor = True
         richTextDrawDesigner.Container = container

         Return richTextDrawDesigner
      End Function</code>
        <code lang="CS">      public AnnRichTextDrawDesigner AnnRichTextDrawDesigner_AnnRichTextDrawDesigner(RasterImageViewer viewer, AnnContainer container)
      {
         // start a new rich text draw designer
         AnnRichTextDrawDesigner richTextDrawDesigner = new AnnRichTextDrawDesigner();
         // set up the object template (the rich text object)
         AnnRichTextObject richTextObject = new AnnRichTextObject();
         richTextObject.Pen = null;
         richTextObject.Brush = null;

         // set up the default text to be used
         richTextDrawDesigner.DefaultRtf = // This is RTF text that is equals to LEADTOOLS in bold red Arial
            @"{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Arial;}" + 
            @"{\f1\fnil\fcharset0 Microsoft Sans Serif;}}{\colortbl ;\red255\green0\blue0;}" +
            @"\viewkind4\uc1\pard\cf1\lang9\b\i\fs22 LEADTOOLS\cf0\lang1033\b0\i0\f1\fs17\par}";

         // initialize the rest of the designer
         richTextDrawDesigner.ObjectTemplate = richTextObject;
         richTextDrawDesigner.Owner = viewer;
         richTextDrawDesigner.ClipCursor = true;
         richTextDrawDesigner.Container = container;

         return richTextDrawDesigner;
      }</code>
        <!--AnnRichTextDrawDesigner.AnnRichTextDrawDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnRichTextDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextDrawDesigner.StartWorking(Leadtools.Annotations.AnnObject)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRichTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.StartWorking(Leadtools.Annotations.AnnObject)" />.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> that will be drawn.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextDrawDesigner.EndWorking">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRichTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.EndWorking" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRichTextDrawDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRichTextDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRichTextDrawDesigner.DefaultRtf">
      <summary>
            Gets or sets the default rich text to be used with new <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> objects.
            </summary>
      <noremarks />
      <value>A String that represents the default rich text.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRichTextDrawDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecsInvalidFormatException">
      <summary>
            The exception that is thrown for an invalid Annotation file format.
            </summary>
      <remarks>
            Represents the error that occurs when the <see cref="T:Leadtools.Annotations.AnnCodecs" /> is trying to load or save to an invalid annotations file.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInvalidFormatException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnCodecsInvalidFormatException" />, setting the <see cref="P:System.Exception.Message" /> property of the new instance to a system-supplied message that describes the error.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInvalidFormatException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnCodecsInvalidFormatException" /> class with the specified error message.
            </summary>
      <noremarks />
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInvalidFormatException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnCodecsInvalidFormatException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <noremarks />
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <i>inner</i> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInvalidFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the AnnCodecsInvalidFormatException class with the specified serialization and context information. 
            </summary>
      <noremarks />
      <param name="info">The data for serializing or deserializing the object. </param>
      <param name="context">The source and destination for the object. </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInvalidFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextRotate">
      <summary>
            Indicates how much the <see cref="T:Leadtools.Annotations.IAnnTextObject" /> with.
            </summary>
      <remarks>
            Use this enumeration with the <see cref="P:Leadtools.Annotations.IAnnTextObject.TextRotate" /> property.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnTextRotate.Rotate0">
      <summary>
            Do not rotate the text.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTextRotate.Rotate90">
      <summary>
            Rotate the text 90 degrees counter clockwise.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTextRotate.Rotate180">
      <summary>
            Rotate the text 180 degrees counter clockwise.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnTextRotate.Rotate270">
      <summary>
            Rotate the text 270 degrees counter clockwise.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnEncryptObject">
      <summary>
             Defines an annotation encrypt object.
             </summary>
      <remarks>
        <p>The encrypt annotation object is a rectangular object that is used to encrypt rectangular portions of an image.</p>
        <p>It can also be used to encrypt the entire image.  In design mode, the encrypt object is visible but partially transparent to show the part of the image that it covers.  In run mode, the encrypt object is invisible.</p>
        <p>You must call <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> to apply the encrypt object.  Once applied, the portion of the image under the encrypt object becomes scrambled, and the encrypt object state changes to decryptor.  Using different keys before calling this method gives different scrambling patterns. The decryptor state differs from the encryptor state in that a decryptor cannot be moved, and cannot be changed to an encryptor.  The scrambling can be removed by calling <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> on the decrypt object with the appropriate arguments.  If successful, the decryptor state changes to encryptor.  An encrypt object in the encryptor state can be moved, can have its <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> changed, and can be changed to a decrypt object.</p>
        <p>The encrypt object is useful for encrypting portions of an image.  After encrypting, the scrambled bitmap cannot easily be unscrambled without the associated annotation file.  The scrambling can be removed by using the associated annotation file, or by using automation mode to manually change the state from encryptor to a decryptor, position it correctly, and setting the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> appropriately.</p>
        <p>Overlapping regions can be encrypted. When encrypting overlapping regions, note the following points:
             <list type="bullet"><item><description>All annotation objects have an order in which they are drawn (the Z-order)</description></item><item><description>The encryptors are encrypted from the front of the Z-order to the back</description></item><item><description>Those that are drawn first are encrypted first. Those that are drawn last ("on top" of other encryptors) are encrypted last</description></item><item><description>The Z-order can be changed through automation by right-clicking and choosing "Send To Front" or "Send To Back"</description></item><item><description>The decrypt objects are decrypted in reverse order of the encrypt objects</description></item></list></p>
        <p>You cannot rotate an encrypt object, but you can flip or reverse it. If you rotate a container that includes an encrypt object, the encrypt object will move to the new position, but will retain its orientation.</p>
        <p>This class implements the <see cref="T:Leadtools.Annotations.IAnnPrimarySecondaryPictureObject" /> interface to handle primary and secondary pictures.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UsingPrimaryAndSecondaryPicturesInAnnotationObjects">Using Primary and Secondary Pictures in Annotation Objects.</see></p>
        <p>If you are interested in locking an object, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
        <para>
             For more information about the encrypt annotation object refer to the
             <see cref="T:AN.Topics.AnnEncryptObject">AnnEncryptObject</see>. 
             For more information about the automated encrypt annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>,
             <see cref="T:AN.Topics.AutomatedAnnotationsEncryptTAb">Automated Annotations - Encrypt Tab</see>. 
              and 
             <see cref="T:AN.Topics.AutomatedAnnotationsEncryptPicturesTab">Automated Annotations - Encrypt Pictures Tab</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates an encrypt object.</para>
        <code lang="VB">      Private Sub AnnEncryptObject_AnnEncryptObject(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer)
         Dim encryptor As AnnEncryptObject = New AnnEncryptObject()
         encryptor.Bounds = New AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel)
         encryptor.Key = 123
         encryptor.Encryptor = True
         container.Objects.Add(encryptor)
         viewer.Invalidate(encryptor.InvalidRectangle)
         MessageBox.Show(String.Format("Added encryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", encryptor.Encryptor, encryptor.IsEncrypted, encryptor.CanEncrypt, encryptor.CanDecrypt, container.Objects.Count))

         ' apply (encryptor)
         encryptor.Apply(viewer)
         viewer.Invalidate(encryptor.InvalidRectangle)
         MessageBox.Show(String.Format("Applied encryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", encryptor.Encryptor, encryptor.IsEncrypted, encryptor.CanEncrypt, encryptor.CanDecrypt, container.Objects.Count))

         ' remove from the container
         container.Objects.Remove(encryptor)
         viewer.Invalidate()
         MessageBox.Show(String.Format("Removed encryptor. Objects in container: {0}", container.Objects.Count))

         ' create another encrypt object to decrypt the first object
         Dim decryptor As AnnEncryptObject = New AnnEncryptObject()
         decryptor.Bounds = New AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel)
         decryptor.Key = 123
         decryptor.Encryptor = False
         container.Objects.Add(decryptor)
         viewer.Invalidate(decryptor.InvalidRectangle)
         MessageBox.Show(String.Format("Added decryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", decryptor.Encryptor, decryptor.IsEncrypted, decryptor.CanEncrypt, decryptor.CanDecrypt, container.Objects.Count))

         ' apply (decryptor)
         decryptor.Apply(viewer)
         viewer.Invalidate(decryptor.InvalidRectangle)
         MessageBox.Show(String.Format("Applied decryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", decryptor.Encryptor, decryptor.IsEncrypted, decryptor.CanEncrypt, decryptor.CanDecrypt, container.Objects.Count))

         ' remove from the container
         container.Objects.Remove(decryptor)
         viewer.Invalidate()
         MessageBox.Show(String.Format("Removed decryptor. Objects in container: {0}", container.Objects.Count))
      End Sub</code>
        <code lang="CS">      private void AnnEncryptObject_AnnEncryptObject(RasterImageViewer viewer, AnnContainer container)
      {
         AnnEncryptObject encryptor = new AnnEncryptObject();
         encryptor.Bounds = new AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel);
         encryptor.Key = 123;
         encryptor.Encryptor = true;
         container.Objects.Add(encryptor);
         viewer.Invalidate(encryptor.InvalidRectangle);
         MessageBox.Show(String.Format("Added encryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", encryptor.Encryptor, encryptor.IsEncrypted, encryptor.CanEncrypt, encryptor.CanDecrypt, container.Objects.Count));

         // apply (encryptor)
         encryptor.Apply(viewer);
         viewer.Invalidate(encryptor.InvalidRectangle);
         MessageBox.Show(String.Format("Applied encryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", encryptor.Encryptor, encryptor.IsEncrypted, encryptor.CanEncrypt, encryptor.CanDecrypt, container.Objects.Count));

         // remove from the container
         container.Objects.Remove(encryptor);
         viewer.Invalidate();
         MessageBox.Show(String.Format("Removed encryptor. Objects in container: {0}", container.Objects.Count));

         // create another encrypt object to decrypt the first object
         AnnEncryptObject decryptor = new AnnEncryptObject();
         decryptor.Bounds = new AnnRectangle(100, 100, 300, 300, AnnUnit.Pixel);
         decryptor.Key = 123;
         decryptor.Encryptor = false;
         container.Objects.Add(decryptor);
         viewer.Invalidate(decryptor.InvalidRectangle);
         MessageBox.Show(String.Format("Added decryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", decryptor.Encryptor, decryptor.IsEncrypted, decryptor.CanEncrypt, decryptor.CanDecrypt, container.Objects.Count));

         // apply (decryptor)
         decryptor.Apply(viewer);
         viewer.Invalidate(decryptor.InvalidRectangle);
         MessageBox.Show(String.Format("Applied decryptor. Encryptor: {0}, IsEncrypted: {1}, CanEncrypt: {2}, CanDecrypt: {3}, Objects in container: {4}", decryptor.Encryptor, decryptor.IsEncrypted, decryptor.CanEncrypt, decryptor.CanDecrypt, container.Objects.Count));

         // remove from the container
         container.Objects.Remove(decryptor);
         viewer.Invalidate();
         MessageBox.Show(String.Format("Removed decryptor. Objects in container: {0}", container.Objects.Count));
      }</code>
        <!--AnnEncryptObject.AnnEncryptObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
        <p>Please note that the <b>AnnEncryptObject</b> object does not support rotation.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class.
            <p>Please note that the <b>AnnEncryptObject</b> object does not support rotation.</p></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <remarks>
        <p>Please note that the <b>AnnEncryptObject</b> object does not support rotation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)">
      <summary>
            Applies this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object to the image inside a given viewer.
            </summary>
      <param name="viewer">The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> containing the <see cref="T:Leadtools.RasterImage" /> to which to apply this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</param>
      <remarks>
        <p>An <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object can have two states:  it can be an encryptor or it can be a decryptor (Refer to <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" />).</p>
        <p>Use this method to apply this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object, whether it is an encryptor or a decryptor. Applying an encryptor means that the part of the image under the encryptor is scrambled according to the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> value.</p>
        <p>Once applied, the portion of the image under the encrypt object becomes scrambled or unscrambled, and the encrypt object changes states (encryptors become decryptors, and decryptors be encryptors).  Using different keys before calling this method gives different scrambling patterns. The decryptor state differs from the encryptor state in that a decryptor cannot be moved, and cannot be changed to an encryptor.  The scrambling can be removed by calling <b>Apply</b> on the decryptor with the appropriate <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" />.  If successful, the decryptor again changes state to become an encryptor.  An encryptor can be moved, and can be changed to a decryptor.</p>
        <p>The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> is useful for encrypting portions of an image.  After encrypting, the scrambled image cannot easily be unscrambled without the associated annotation file.  The scrambling can be removed by using the associated annotation file, or by using automation mode to manually change the encrypt state from encryptor to a decryptor, position the object correctly, and setting the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> appropriately.</p>
        <para>To apply the object to an image, use <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.RasterImage)">Apply(RasterImage)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.RasterImage)">
      <summary>
            Applies this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object to an image.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object to which to apply this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</param>
      <remarks>
        <p>An <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object can have two states:  it can be an encryptor or it can be a decryptor (Refer to <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" />).</p>
        <p>Use this method to apply this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object, whether it is an encryptor or a decryptor. Applying an encryptor means that the part of the image under the encryptor is scrambled according to the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> value.</p>
        <p>Once applied, the portion of the image under the encrypt object becomes scrambled or unscrambled, and the encrypt object changes states (encryptors become decryptors, and decryptors be encryptors).  Using different keys before calling this method gives different scrambling patterns. The decryptor state differs from the encryptor state in that a decryptor cannot be moved, and cannot be changed to an encryptor.  The scrambling can be removed by calling <b>Apply</b> on the decryptor with the appropriate <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" />.  If successful, the decryptor again changes state to become an encryptor.  An encryptor can be moved, and can be changed to a decryptor.</p>
        <p>The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> is useful for encrypting portions of an image.  After encrypting, the scrambled image cannot easily be unscrambled without the associated annotation file.  The scrambling can be removed by using the associated annotation file, or by using automation mode to manually change the encrypt state from encryptor to a decryptor, position the object correctly, and setting the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> appropriately.</p>
        <para>To apply the object to an image inside a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control, use <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)">Apply(RasterImageViewer)</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method to call.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures that contains the points to be transformed.
            </returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class overrides this member to return an array of 2 points, the top-left and bottom-right corners of <see cref="P:Leadtools.Annotations.AnnEncryptObject.Bounds" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEncryptObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies which transformation method was called.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class overrides this member to copy the new transformed values to the top-left and bottom-right corners of <see cref="P:Leadtools.Annotations.AnnEncryptObject.Bounds" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.PrimaryPicture">
      <summary>
            Gets or sets the primary <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <value>The primary <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</value>
      <remarks>
        <p>The primary picture of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is the picture used when <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" /> is true.</p>
        <p>The LEADTOOLS annotation framework assigns a default picture of a key to this property.</p>
        <p>If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> will use the picture define in <see cref="P:Leadtools.Annotations.AnnEncryptObject.DefaultPrimaryPicture" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.SecondaryPicture">
      <summary>
            Gets or sets the secondary <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <value>The secondary <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</value>
      <remarks>
        <p>The secondary picture of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is the picture used when <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" /> is false.</p>
        <p>The LEADTOOLS annotation framework assigns a default picture of a key to this property.</p>
        <p>If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> will use the picture define in <see cref="P:Leadtools.Annotations.AnnEncryptObject.DefaultSecondaryPicture" />.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.Key">
      <summary>
            Gets or sets the key used to encrypt or decrypt this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <value>The key used to encrypt or decrypt this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</value>
      <remarks>
            This <b>Key</b> should be between 0 and 4294967295.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.ResetKeyIfApplied">
      <summary>
            Gets or sets a value to indicate whether the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is reset to 0 when applied.
            </summary>
      <value>true if the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is reset when applied; false otherwise.</value>
      <remarks>
            Setting this to true adds a layer of security to the encrypt object, forcing the user to re-enter the key after an encrypt object is applied.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.SerializeKeyIfEncrypted">
      <summary>
            Gets or sets a value to indicate whether the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is serialized along with the rest of the object.
            </summary>
      <value>true if the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Key" /> of this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is serialized along with the rest of the object; false otherwise.</value>
      <remarks>
            Normally this value is only changed before saving this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object to a disk file. It is then restored once the save operation is done.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.Encryptor">
      <summary>
            Gets or sets a value to indicate whether this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is in an encryptor or a decryptor.
            </summary>
      <noremarks />
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is an encryptor; false if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is a decryptor.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.IsEncrypted">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is currently encrypted.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is currently encrypted; false otherwise.</value>
      <remarks>
            (Read only) This <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is encrypted if the value of the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" /> property is true and the <see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> method has been called.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.CanEncrypt">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is ready to encrypt.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is ready to encrypt; false otherwise.</value>
      <remarks>
            (Read only) This <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is ready to encrypt if the value of the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" /> property is true and the <see cref="P:Leadtools.Annotations.AnnEncryptObject.IsEncrypted" /> property is false (<see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> has not yet been called).
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.CanDecrypt">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> obect is ready to decrypt.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is ready to decrypt; false otherwise.</value>
      <remarks>
            (Read only) This <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is ready to decrypt if the value of <see cref="P:Leadtools.Annotations.AnnEncryptObject.Encryptor" /> property is false.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object when any object transformation method is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  This property, along with the <see cref="M:Leadtools.Annotations.AnnEncryptObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnEncryptObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that the encrypt object physically transforms the <see cref="P:Leadtools.Annotations.AnnEncryptObject.Bounds" /> value whenever the encrypt object is transformed.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.Bounds">
      <summary>
            Gets or sets the bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.
            </summary>
      <value>The bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> class overrides this property to ensure that the bounding rectangle cannot be changed if this <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object is currently encrypted.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.DefaultPrimaryPicture">
      <summary>
            Gets or sets the default primary picture used by all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the primary picture used by the <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnEncryptObject.UseOriginalPrimaryPicture" /> to revert back to the original primary picture.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.DefaultSecondaryPicture">
      <summary>
            Gets or sets the default secondary picture used by all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the secondary picture used by the <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnEncryptObject.UseOriginalSecondaryPicture" /> to revert back to the original secondary picture.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.UseOriginalPrimaryPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original primary picture used for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </summary>
      <value>true to revert back to the original primary picture used for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnEncryptObject.DefaultPrimaryPicture" /> to get or set the current default primary picture used by the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.UseOriginalSecondaryPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original secondary picture used for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </summary>
      <value>true to revert back to the original secondary picture used for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnEncryptObject.DefaultSecondaryPicture" /> to get or set the current default secondary picture used by the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEncryptObject.SupportsFixed">
      <summary>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnObject" /> can be <b>fixed</b>; false otherwise
            </value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" /> property to return false.<br />
            Fixed annotations are independent of the <see cref="P:Leadtools.Annotations.AnnContainer.Transform" />.
            The result is that they do not scroll or move with the underlying image.
            For more information, see <see cref="M:Leadtools.Annotations.AnnObject.PushFixedState" />, <see cref="M:Leadtools.Annotations.AnnObject.SetFixedState(System.Boolean,System.Boolean)" /> and <see cref="P:Leadtools.Annotations.AnnObject.FixedState" />.
            <para>For more information on fixed annotation objects, refer to <see cref="T:AN.Topics.AnnotationFixedObjects">Fixed Annotations</see>.</para></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.SupportsFixed" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnVideoRunDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> to provide functionality for running an <see cref="T:Leadtools.Annotations.AnnVideoObject" /> on an annotation container.
            </summary>
      <remarks>
        <para>The video annotation object is a scaled image that can be activated to play a video clip.  The video file path is stored in the
            <see cref="P:Leadtools.Annotations.AnnVideoObject.FileName" /> property, so the video data itself is not stored in this object, only the physical path.  In run mode, when
            this video object is clicked, the framework will try to locate and then play the video file stored in <see cref="P:Leadtools.Annotations.AnnVideoObject.FileName" />.  This object will
            use the default image of a video icon. To change this default image, change the <see cref="P:Leadtools.Annotations.AnnVideoObject.Picture" /> value.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnVideoObject" /> class inherits the the <see cref="T:Leadtools.Annotations.AnnImageObject" /> class and accesses the common
            <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> property mentioned above through this inheritance.</para>
        <para>LEADTOOLS Annotations uses the LEADTOOLS Multimedia for .NET toolkit to render video files and Leadtools.Multimedia must be present on the
            machine. For more information, refer to 
            <a href="http://www.leadtools.com/help/leadtools/v175/dh/multimedia/to/leadtools.topics.multimedia_introduction.html">Introduction to LEADTOOLS Multimedia for .NET</a>.</para>
        <para>For more information about the video annotation object refer to 
            <see cref="T:AN.Topics.AnnVideoObject">AnnVideoObject</see>.</para>
        <para>For more information about the automated annotation video object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
             and 
            <see cref="T:AN.Topics.AutomatedAnnotationsVideoTab">Automated Annotations - Video Tab</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnRunDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnDesigner" /> to provide standard functionality for running Annotation objects on an annotation container.
            </summary>
      <remarks>
            Other specific annotation object classes such as <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> and <see cref="T:Leadtools.Annotations.AnnAudioRunDesigner" /> derive from this base class.
            </remarks>
      <example>
        <para>Uses an AnnRunDesigner to handle a button click</para>
        <code lang="VB">      Private Class MyForm1 : Inherits Form
         Private myAnnContainer As AnnContainer
         Private viewer As RasterImageViewer
         Private codecs As RasterCodecs
         Private currentDesigner As AnnDesigner
         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(500, 200)

            viewer = New RasterImageViewer()
            AddHandler viewer.TransformChanged, AddressOf viewer_TransformChanged
            AddHandler viewer.PostImagePaint, AddressOf viewer_PostImagePaint
            AddHandler viewer.MouseDown, AddressOf viewer_MouseDown
            AddHandler viewer.MouseMove, AddressOf viewer_MouseMove
            AddHandler viewer.MouseUp, AddressOf viewer_MouseUp
            AddHandler viewer.LostFocus, AddressOf viewer_LostFocus

            ' load an image into the viewer
            codecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")) ' fix this path to an existing image file on your system

            ' create and set up the container
            myAnnContainer = New AnnContainer()
            myAnnContainer.Bounds = New AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height)
            myAnnContainer.UnitConverter = New AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY)

            ' Add the viewer
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.BringToFront()

            ' add a few objects to the container
            Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
            rectObj.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
            rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(2, AnnUnit.Pixel))
            rectObj.Brush = New AnnSolidBrush(Color.Yellow)
            myAnnContainer.Objects.Add(rectObj)

            Dim buttonObj As AnnButtonObject = New AnnButtonObject()
            buttonObj.Bounds = New AnnRectangle(100, 320, 200, 24, AnnUnit.Pixel)
            buttonObj.Text = "Goto Leadtools website"
            buttonObj.TextColor = Color.Black
            buttonObj.Font = New AnnFont("Arial", New AnnLength(8, AnnUnit.Point), FontStyle.Regular)
            buttonObj.Hyperlink = "http://www.leadtools.com"
            myAnnContainer.Objects.Add(buttonObj)
         End Sub

         Private Sub viewer_TransformChanged(ByVal sender As Object, ByVal e As EventArgs)
            ' set up the container transformation
            If Not viewer.Image Is Nothing AndAlso Not myAnnContainer Is Nothing Then
               myAnnContainer.Transform = viewer.Transform.Clone()
            End If
         End Sub

         Private Sub viewer_PostImagePaint(ByVal sender As Object, ByVal e As PaintEventArgs)
            ' draw the container and its objects on this viewer
            If Not viewer.Image Is Nothing AndAlso Not myAnnContainer Is Nothing Then
               myAnnContainer.Draw(e.Graphics)
            End If
         End Sub

         Private Sub viewer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseDown(e)
            End If

            If (Not handled) Then
               ' the mouse click was not handled by a designer
               ' check if the click was on top of an existing object that we can start running
               Dim pt As AnnPoint = New AnnPoint(e.X, e.Y)
               Dim obj As AnnObject = myAnnContainer.HitTest(pt, 2)
               If Not obj Is Nothing Then
                  ' yes, start the run designer for this object
                  If TypeOf obj Is AnnButtonObject Then
                     Dim buttonRunDesigner As AnnButtonRunDesigner = New AnnButtonRunDesigner()
                     StartRunning(buttonRunDesigner, obj, e)
                  Else
                     Dim runDesigner As AnnRunDesigner = New AnnRunDesigner()
                     StartRunning(runDesigner, obj, e)
                  End If
               End If
            End If
         End Sub

         Private Sub StartRunning(ByVal runDesigner As AnnRunDesigner, ByVal obj As AnnObject, ByVal e As MouseEventArgs)
            ' set up the current designer
            AddHandler runDesigner.Run, AddressOf OnDesignerRun
            runDesigner.Owner = viewer
            runDesigner.Container = myAnnContainer
            runDesigner.ClipCursor = True
            runDesigner.Object = obj
            runDesigner.HitTestBuffer = 2
            runDesigner.Start()
            currentDesigner = runDesigner
            currentDesigner.MouseDown(e)
         End Sub

         Private Sub OnDesignerRun(ByVal sender As Object, ByVal e As AnnRunDesignerEventArgs)
            ' show information on the current edit operation
            Console.WriteLine("Object: {0}, Status: {1}, ", e.Object.GetType().Name, e.OperationStatus)

            If e.OperationStatus = AnnDesignerOperationStatus.End Then
               ' check if the object does not have a hyperlink, if so, show a message box
               If e.Object.Hyperlink Is Nothing OrElse e.Object.Hyperlink = String.Empty Then
                  MessageBox.Show(String.Format("You clicked an object of type {0} that does not have a hyperlink", e.Object.GetType().Name))
               End If
            End If
         End Sub

         Private Sub viewer_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseMove(e)
            End If
         End Sub

         Private Sub viewer_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim handled As Boolean = False

            ' see if a designer is currently running, if so, let it handle this event
            If Not currentDesigner Is Nothing Then
               handled = currentDesigner.MouseUp(e)
            End If
         End Sub

         Private Sub viewer_LostFocus(ByVal sender As Object, ByVal e As EventArgs)
            ' see if a designer is currently running, if so, cancel it
            If Not currentDesigner Is Nothing Then
               currentDesigner.Cancel()
            End If
         End Sub
      End Class

      Public Sub AnnRunDesigner_AnnRunDesigner(ByVal title As String)
         Dim form As MyForm1 = New MyForm1(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm1 : Form
      {
         AnnContainer container;
         RasterImageViewer viewer;
         RasterCodecs codecs;
         AnnDesigner currentDesigner;
         public MyForm1(string title)
         {
            Text = title;
            Size = new Size(500, 200);

            viewer = new RasterImageViewer();
            viewer.TransformChanged += new EventHandler(viewer_TransformChanged);
            viewer.PostImagePaint += new PaintEventHandler(viewer_PostImagePaint);
            viewer.MouseDown += new MouseEventHandler(viewer_MouseDown);
            viewer.MouseMove += new MouseEventHandler(viewer_MouseMove);
            viewer.MouseUp += new MouseEventHandler(viewer_MouseUp);
            viewer.LostFocus += new EventHandler(viewer_LostFocus);

            // load an image into the viewer
            codecs = new RasterCodecs();
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");
            viewer.Image = codecs.Load(fileName);

            // create and set up the container
            container = new AnnContainer();
            container.Bounds = new AnnRectangle(0, 0, viewer.ImageSize.Width, viewer.ImageSize.Height);
            container.UnitConverter = new AnnUnitConverter(viewer.ImageDpiX, viewer.ImageDpiY);

            // Add the viewer
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.BringToFront();

            // add a few objects to the container
            AnnRectangleObject rectObj = new AnnRectangleObject();
            rectObj.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
            rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(2, AnnUnit.Pixel));
            rectObj.Brush = new AnnSolidBrush(Color.Yellow);
            container.Objects.Add(rectObj);

            AnnButtonObject buttonObj = new AnnButtonObject();
            buttonObj.Bounds = new AnnRectangle(100, 320, 200, 24, AnnUnit.Pixel);
            buttonObj.Text = "Goto Leadtools website";
            buttonObj.TextColor = Color.Black;
            buttonObj.Font = new AnnFont("Arial", new AnnLength(8, AnnUnit.Point), FontStyle.Regular);
            buttonObj.Hyperlink = @"http://www.leadtools.com";
            container.Objects.Add(buttonObj);
         }

         private void viewer_TransformChanged(object sender, EventArgs e)
         {
            // set up the container transformation
            if(viewer.Image != null &amp;&amp; container != null)
               container.Transform = viewer.Transform.Clone();
         }

         private void viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // draw the container and its objects on this viewer
            if(viewer.Image != null &amp;&amp; container != null)
               container.Draw(e.Graphics);
         }

         private void viewer_MouseDown(object sender, MouseEventArgs e)
         {
            bool handled = false;

            // see if a designer is currently running, if so, let it handle this event
            if(currentDesigner != null)
               handled = currentDesigner.MouseDown(e);

            if(!handled)
            {
               // the mouse click was not handled by a designer
               // check if the click was on top of an existing object that we can start running
               AnnPoint pt = new AnnPoint(e.X, e.Y);
               AnnObject obj = container.HitTest(pt, 2);
               if(obj != null)
               {
                  // yes, start the run designer for this object
                  if(obj is AnnButtonObject)
                  {
                     AnnButtonRunDesigner buttonRunDesigner = new AnnButtonRunDesigner();
                     StartRunning(buttonRunDesigner, obj, e);
                  }
                  else
                  {
                     AnnRunDesigner runDesigner = new AnnRunDesigner();
                     StartRunning(runDesigner, obj, e);
                  }
               }
            }
         }

         private void StartRunning(AnnRunDesigner runDesigner, AnnObject obj, MouseEventArgs e)
         {
            // set up the current designer
            runDesigner.Run += new EventHandler&lt;AnnRunDesignerEventArgs&gt;(OnDesignerRun);
            runDesigner.Owner = viewer;
            runDesigner.Container = container;
            runDesigner.ClipCursor = true;
            runDesigner.Object = obj;
            runDesigner.HitTestBuffer = 2;
            runDesigner.Start();
            currentDesigner = runDesigner;
            currentDesigner.MouseDown(e);
         }

         private void OnDesignerRun(object sender, AnnRunDesignerEventArgs e)
         {
            // show information on the current edit operation
            Console.WriteLine("Object: {0}, Status: {1}, ", e.Object.GetType().Name, e.OperationStatus);

            if(e.OperationStatus == AnnDesignerOperationStatus.End)
            {
               // check if the object does not have a hyperlink, if so, show a message box
               if(e.Object.Hyperlink == null || e.Object.Hyperlink == string.Empty)
                  MessageBox.Show(String.Format("You clicked an object of type {0} that does not have a hyperlink", e.Object.GetType().Name));
            }
         }

         private void viewer_MouseMove(object sender, MouseEventArgs e)
         {
            bool handled = false;

            // see if a designer is currently running, if so, let it handle this event
            if(currentDesigner != null)
               handled = currentDesigner.MouseMove(e);
         }

         private void viewer_MouseUp(object sender, MouseEventArgs e)
         {
            bool handled = false;

            // see if a designer is currently running, if so, let it handle this event
            if(currentDesigner != null)
               handled = currentDesigner.MouseUp(e);
         }

         private void viewer_LostFocus(object sender, EventArgs e)
         {
            // see if a designer is currently running, if so, cancel it
            if(currentDesigner != null)
               currentDesigner.Cancel();
         }
      }

      public void AnnRunDesigner_AnnRunDesigner(string title)
      {
         MyForm1 form = new MyForm1(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnRunDesigner.AnnRunDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.#ctor">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.Start">
      <summary>
            Starts running <see cref="P:Leadtools.Annotations.AnnRunDesigner.Object" /></summary>
      <remarks>
            Call this method after you set up all the other properties of this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> to start the running process.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.End">
      <summary>
            Ends running <see cref="P:Leadtools.Annotations.AnnRunDesigner.Object" /></summary>
      <remarks>
            Call this method to end the running process of <see cref="P:Leadtools.Annotations.AnnRunDesigner.Object" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.StartWorking">
      <summary>
            Starts the editing process.
            </summary>
      <returns>true if this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> has started the editing process; false, otherwise.</returns>
      <remarks>
            Derived classes should call this method upon starting the run operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.Working">
      <summary>
            Continues the running process.
            </summary>
      <returns>true if this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> is continuing to run; false, otherwise.</returns>
      <remarks>
            Derived classes should call this method upon continuing the run operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.EndWorking(System.Boolean)">
      <summary>
            Ends the running process.
            </summary>
      <param name="runHyperlink">If true, execute the hyperlink, else do nothing.</param>
      <remarks>
            Derived classes should call this method upon ending the run operation of an object.
            </remarks>
      <example>
            For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnRunDesigner.Run" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnRun</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnRun</b> in a derived class, be sure to call the base class's <b>OnRun</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnRunDesigner.DoubleClick(System.EventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.DoubleClick(System.EventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <returns>true if this event is handled; false otherwise.</returns>
      <remarks>
        <p>Derived classes should override this method in order to process mouse double-click events on the container.  The designer should return true if it handled this event in any way.</p>
        <p>The annotation application should call this method from the <see cref="P:Leadtools.Annotations.AnnDesigner.Owner" /> controls <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnRunDesigner.Run">
      <summary>
            Occurs when this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> is running an <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <noremarks />
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" />.</event>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesigner.HitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for this <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </summary>
      <value>The hit test buffer, in pixels, for this <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.</value>
      <remarks>
            The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with a length of 4 pixels around the test point will be used to perform the hit-testing.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesigner.Object">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnObject" /> to be run.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> object specifying the object currently being run.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnRunDesigner.HasStarted">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> has started.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> has started running <see cref="P:Leadtools.Annotations.AnnRunDesigner.Object" />; otherwise, false.</value>
      <remarks>
            (Read only) <see cref="M:Leadtools.Annotations.AnnRunDesigner.Start" /> will start running <see cref="P:Leadtools.Annotations.AnnRunDesigner.Object" /> and <see cref="M:Leadtools.Annotations.AnnRunDesigner.End" /> will end it.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoRunDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnVideoRunDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnVideoRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnVideoRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" /> that contains the event data. </param>
      <remarks>For more information, refer to <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />. </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnButtonRunDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> to provide functionality for running an <see cref="T:Leadtools.Annotations.AnnButtonObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.Start">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.Start" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnButtonRunDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnButtonRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPointEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnPointObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnPointEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPointEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnPointEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnEditDesignerEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.Annotations.AnnEditDesigner.Edit" /> event.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnEditDesignerEventArgs.#ctor(Leadtools.Annotations.AnnObject,Leadtools.Annotations.AnnEditDesignerOperation,System.Int32,System.Object,Leadtools.Annotations.AnnDesignerOperationStatus)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnEditDesignerEventArgs" /> class.
            </summary>
      <noremarks />
      <param name="obj">The <see cref="T:Leadtools.Annotations.AnnObject" /> currently being edited.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" /> value that represents the current edit operation.</param>
      <param name="moveControlPointIndex">The index of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> being edited if <i>operation</i> is <b>AnnEditDesignerOperation.MoveControlPoint</b>.</param>
      <param name="hittestObject">The hit test object returned from the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method.</param>
      <param name="operationStatus">An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the current status of the editing operation.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.Object">
      <summary>
            Gets the <see cref="T:Leadtools.Annotations.AnnObject" /> object currently being edited.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnObject" /> object that represents the object currently being edited by the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.Operation">
      <summary>
            Gets the current edit operation
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnEditDesignerOperation" /> value that represents the current edit operation.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.MoveControlPointIndex">
      <summary>
            Gets the index of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> currently being edited.
            </summary>
      <value>An integer that represents the index of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> being edited if the <see cref="P:Leadtools.Annotations.AnnEditDesignerEventArgs.Operation" /> being performed is <b>AnnEditDesignerOperation.MoveControlPoint</b>.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.OperationStatus">
      <summary>
            Gets the current edit operation status.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnDesignerOperationStatus" /> value that represents the status of the current editing operation of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> that raised this event.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.HitTestObject">
      <summary>
            Gets the current hit test object.
            </summary>
      <value>The hit test object returned from the <see cref="M:Leadtools.Annotations.AnnObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> method.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnEditDesignerEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the editing operation should be canceled.
            </summary>
      <value>true to cancel the current editing operation; otherwise, false.</value>
      <remarks>
            You should set this property to true to cancel the current editing operation of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> that raised this event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextPointerDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnRectangleDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
        <para>
          <para>For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</para>
            This example initializes a new designer to draw text pointer objects.</para>
        <code lang="VB">      Public Function AnnTextPointerDrawDesigner_AnnTextPointerDrawDesigner(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer) As AnnTextPointerDrawDesigner
         ' start a new text pointer draw designer
         Dim textPointerDrawDesigner As AnnTextPointerDrawDesigner = New AnnTextPointerDrawDesigner()
         Dim textPointer As AnnTextPointerObject = New AnnTextPointerObject()
         textPointer.Pen = Nothing
         textPointer.Brush = Nothing
         textPointer.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         textPointer.EdgeMargin = AnnLength.Empty
         textPointer.Alignment = StringAlignment.Center
         textPointer.LineAlignment = StringAlignment.Center
         textPointer.PointerPosition = New AnnPoint(800, 800, AnnUnit.Pixel)
         textPointer.FixedPointer = True

         ' set up the default text to be used
         textPointerDrawDesigner.DefaultText = "Leadtools"

         ' initialize the rest of the designer
         textPointerDrawDesigner.ObjectTemplate = textPointer
         textPointerDrawDesigner.Owner = viewer
         textPointerDrawDesigner.ClipCursor = True
         textPointerDrawDesigner.Container = container

         Return textPointerDrawDesigner
      End Function</code>
        <code lang="CS">      public AnnTextPointerDrawDesigner AnnTextPointerDrawDesigner_AnnTextPointerDrawDesigner(RasterImageViewer viewer, AnnContainer container)
      {
         // start a new text pointer draw designer
         AnnTextPointerDrawDesigner textPointerDrawDesigner = new AnnTextPointerDrawDesigner();
         AnnTextPointerObject textPointer = new AnnTextPointerObject();
         textPointer.Pen = null;
         textPointer.Brush = null;
         textPointer.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         textPointer.EdgeMargin = AnnLength.Empty;
         textPointer.Alignment = StringAlignment.Center;
         textPointer.LineAlignment = StringAlignment.Center;
         textPointer.PointerPosition = new AnnPoint(800, 800, AnnUnit.Pixel);
         textPointer.FixedPointer = true;

         // set up the default text to be used
         textPointerDrawDesigner.DefaultText = "Leadtools";

         // initialize the rest of the designer
         textPointerDrawDesigner.ObjectTemplate = textPointer;
         textPointerDrawDesigner.Owner = viewer;
         textPointerDrawDesigner.ClipCursor = true;
         textPointerDrawDesigner.Container = container;

         return textPointerDrawDesigner;
      }</code>
        <!--AnnTextPointerDrawDesigner.AnnTextPointerDrawDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.EndWorking">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.EndWorking" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerDrawDesigner.DefaultText">
      <summary>
            Gets or sets the default text to be used with new <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> objects.
            </summary>
      <noremarks />
      <value>A String that represents the default text.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextPointerDrawDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs">
      <isnew>05/27/2009</isnew>
      <summary>
            Flags that correspond to the property pages that can be displayed or hidden when displaying the annotation properties dialog through automation.
            </summary>
      <remarks>
            These flags are used when setting the <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" /> property.
            Setting a flag means that the corresponding property page will not be displayed in the annotation properties dialog.
            By default, <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" /> is set to <see cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs" />.None,
            which means all property pages will be displayed.  
            The <see cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs">AnnAutomationHidePropertiesTabs</see> flags can be combined with a logical "or" to hide more than one property page.
            For more information, see the documentation for <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" />.
            </remarks>
      <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <noValue />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.None">
      <summary>
            Do not hide any annotation property page (display all).
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Name">
      <summary>
            Hide the annotation <strong>Name</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Hyperlink">
      <summary>
            Hide the annotation <strong>Hyperlink</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.RubberStamp">
      <summary>
            Hide the annotation <strong>RubberStamp</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Encrypt">
      <summary>
            Hide the annotation <strong>Encrypt</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Polygon">
      <summary>
            Hide the annotation <strong>Polygon</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Curve">
      <summary>
            Hide the annotation <strong>Curve</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Protractor">
      <summary>
            Hide the annotation <strong>Protractor</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Point">
      <summary>
            Hide the annotation <strong>Point</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Picture">
      <summary>
            Hide the annotation <strong>Picture</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Pictures">
      <summary>
            Hide the annotation <strong>Pictures</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Ruler">
      <summary>
            Hide the annotation <strong>Ruler</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Text">
      <summary>
            Hide the annotation <strong>Text</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Hilite">
      <summary>
            Hide the annotation <strong>Hilite</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Pen">
      <summary>
            Hide the annotation <strong>Pen</strong>  property page.
             </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Brush">
      <summary>
            Hide the annotation <strong>Brush</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Font">
      <summary>
            Hide the annotation <strong>Font</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Audio">
      <summary>
            Hide the annotation <strong>Audio</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.ControlPoints">
      <summary>
            Hide the annotation <strong>Control Points</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Fixed">
      <summary>
            Hide the annotation <strong>Fixed</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.SnapToGrid">
      <summary>
            Hide the annotation <strong>Snap To Grid</strong> property page.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationHidePropertiesTabs.Video">
      <summary>
            Hide the annotation <strong>Video</strong> property page.
            </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnAutomationManager">
      <summary>
            Manages the automation mode for an annotatation application.
            </summary>
      <remarks>
        <p>The <b>AnnAutomationManager</b> class holds the collection of all <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects in the application as well the annotation toolbar.  Cursor, keyboard, context sensitive menus, property dialogs and various other user interface options and settings are stored here as well.</p>
        <p>An automated annotation application usually creates one <b>AnnAutomationManager</b> object per application.</p>
      </remarks>
      <example>
        <para>This example creates an automated annotation application.
            This example will only use the line and rectangle objects.
            The example lets you select objects from the toolbar, draw objects on top of the image, select objects and move them or change them, right click on any object to show its properties, etc.</para>
        <code lang="VB">      Private Class MyForm1 : Inherits Form
         Private manager As AnnAutomationManager
         Private viewer As RasterImageViewer
         Private codecs As RasterCodecs
         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(400, 400)

            viewer = New RasterImageViewer()
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.BringToFront()


            ' load an image into the viewer
            codecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")) ' fix this path to an existing image file on your system

            ' create and set up the automation manager
            manager = New AnnAutomationManager()

            ' Create only the line and rectangle automation objects
            CreateMyAutomationObjects(manager)

            ' You can instruct the manager to create the default (all) automation objects.
            ' comment out the call to CreateMyAutomationObjects and call this instead:
            'theManager.CreateDefaultObjects();

            ' Disable some of the property dialogs
            ' In this case, we hide the 'Hyperlink' and 'Fixed' annotation property pages
            manager.HidePropertiesTabs = AnnAutomationHidePropertiesTabs.Hyperlink Or AnnAutomationHidePropertiesTabs.Fixed

            ' create the toolbar and add it to the form
            manager.CreateToolBar()
            Controls.Add(manager.ToolBar)

            ' set up the automation (will create the container as well)
            Dim automation As AnnAutomation = New AnnAutomation(manager, viewer)

            ' set up this automation as the active one
            automation.Active = True
         End Sub

         Private Sub CreateMyAutomationObjects(ByVal manager As AnnAutomationManager)
            ' set up the select automation object
            Dim selObj As AnnAutomationObject = New AnnAutomationObject()
            selObj.Id = AnnAutomationManager.SelectObjectId
            selObj.Name = "Select"
            selObj.Object = Nothing
            selObj.DrawDesignerType = Nothing
            selObj.EditDesignerType = Nothing
            selObj.RunDesignerType = Nothing

            ' create the toolbar button (or you can load the image from a disk file or resource)
            Dim btmp As Bitmap = New Bitmap(16, 16)
            Dim g As Graphics = Graphics.FromImage(btmp)
            Try
               g.FillRectangle(SystemBrushes.Control, New Rectangle(0, 0, 16, 16))
               g.DrawLine(Pens.Black, 4, 4, 12, 12)
               g.DrawLine(Pens.Black, 4, 12, 12, 4)
            Finally
               CType(g, IDisposable).Dispose()
            End Try

            selObj.ToolBarImage = btmp
            selObj.ToolBarToolTipText = "Select"
            selObj.DrawCursor = Cursors.Default
            selObj.ContextMenu = Nothing
            manager.Objects.Add(selObj)

            ' set up the line automation object
            Dim lineObj As AnnAutomationObject = New AnnAutomationObject()
            lineObj.Id = AnnAutomationManager.LineObjectId
            lineObj.Name = "Line"
            Dim line As AnnLineObject = New AnnLineObject()
            line.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            lineObj.Object = line
            lineObj.DrawDesignerType = GetType(AnnLineDrawDesigner)
            lineObj.EditDesignerType = GetType(AnnLineEditDesigner)
            lineObj.RunDesignerType = GetType(AnnRunDesigner)
            btmp = New Bitmap(16, 16)
            g = Graphics.FromImage(btmp)
            Try
               g.FillRectangle(SystemBrushes.Control, New Rectangle(0, 0, 16, 16))
               g.DrawLine(Pens.Black, 4, 12, 12, 4)
            Finally
               CType(g, IDisposable).Dispose()
            End Try
            lineObj.ToolBarImage = btmp
            lineObj.ToolBarToolTipText = "Draw new line object"
            lineObj.DrawCursor = Cursors.Cross
            lineObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(lineObj.Id)
            manager.Objects.Add(lineObj)

            ' set up the rectangle automation object
            Dim rectObj As AnnAutomationObject = New AnnAutomationObject()
            rectObj.Id = AnnAutomationManager.RectangleObjectId
            rectObj.Name = "Rectangle"
            Dim rect As AnnRectangleObject = New AnnRectangleObject()
            rect.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
            rect.Brush = New AnnSolidBrush(Color.White)
            rectObj.Object = rect
            rectObj.DrawDesignerType = GetType(AnnRectangleDrawDesigner)
            rectObj.EditDesignerType = GetType(AnnRectangleEditDesigner)
            rectObj.RunDesignerType = GetType(AnnRunDesigner)
            btmp = New Bitmap(16, 16)
            g = Graphics.FromImage(btmp)
            Try
               g.FillRectangle(SystemBrushes.Control, New Rectangle(0, 0, 16, 16))
               g.DrawRectangle(Pens.Black, 2, 4, 10, 8)
            Finally
               CType(g, IDisposable).Dispose()
            End Try
            rectObj.ToolBarImage = btmp
            rectObj.ToolBarToolTipText = "Draw new rectangle object"
            rectObj.DrawCursor = Cursors.Cross
            rectObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(rectObj.Id)
            manager.Objects.Add(rectObj)

            ' set up the group automation object (always needed)
            Dim groupObj As AnnAutomationObject = New AnnAutomationObject()
            groupObj.Id = AnnAutomationManager.GroupObjectId
            groupObj.Name = "Group"
            groupObj.Object = New AnnGroupObject()
            groupObj.DrawDesignerType = Nothing
            groupObj.EditDesignerType = GetType(AnnNewGroupEditDesigner)
            groupObj.RunDesignerType = GetType(AnnRunDesigner)
            groupObj.ToolBarImage = Nothing ' group is not in the toolbar
            groupObj.ToolBarToolTipText = Nothing
            groupObj.DrawCursor = Nothing
            groupObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(groupObj.Id)
            manager.Objects.Add(groupObj)
         End Sub
      End Class


      Public Sub AnnAutomationManager_AnnAutomationManager(ByVal title As String)
         Dim form As MyForm1 = New MyForm1(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm1 : Form
      {
         AnnAutomationManager manager;
         RasterImageViewer viewer;
         RasterCodecs codecs;
         public MyForm1(string title)
         {
            Text = title;
            Size = new Size(400, 400);

            viewer = new RasterImageViewer();
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.BringToFront();


            // load an image into the viewer
            codecs = new RasterCodecs();
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");
            viewer.Image = codecs.Load(fileName);

            // create and set up the automation manager
            manager = new AnnAutomationManager();

            // Create only the line and rectangle automation objects
            CreateMyAutomationObjects(manager);

            // You can instruct the manager to create the default (all) automation objects.
            // comment out the call to CreateMyAutomationObjects and call this instead:
            //theManager.CreateDefaultObjects();

            // Disable some of the property dialogs
            // In this case, we hide the 'Hyperlink' and 'Fixed' annotation property pages
            manager.HidePropertiesTabs = AnnAutomationHidePropertiesTabs.Hyperlink | AnnAutomationHidePropertiesTabs.Fixed; 


            // create the toolbar and add it to the form
            manager.CreateToolBar();
            Controls.Add(manager.ToolBar);

            // set up the automation (will create the container as well)
            AnnAutomation automation = new AnnAutomation(manager, viewer);

            // set up this automation as the active one
            automation.Active = true;
         }

           private void CreateMyAutomationObjects(AnnAutomationManager manager)
             {
                // set up the select automation object
                AnnAutomationObject selObj = new AnnAutomationObject();
                selObj.Id = AnnAutomationManager.SelectObjectId;
                selObj.Name = "Select";
                selObj.Object = null;
                selObj.DrawDesignerType = null;
                selObj.EditDesignerType = null;
                selObj.RunDesignerType = null;

                // create the toolbar button (or you can load the image from a disk file or resource)
                Bitmap btmp = new Bitmap(16, 16);
                using(Graphics graphics = Graphics.FromImage(btmp))
                {
                   graphics.FillRectangle(SystemBrushes.Control, new Rectangle(0, 0, 16, 16));
                   graphics.DrawLine(Pens.Black, 4, 4, 12, 12);
                   graphics.DrawLine(Pens.Black, 4, 12, 12, 4);
                }

                selObj.ToolBarImage = btmp;
                selObj.ToolBarToolTipText = "Select";
                selObj.DrawCursor = Cursors.Default;
                selObj.ContextMenu = null;
                manager.Objects.Add(selObj);

                // set up the line automation object
                AnnAutomationObject lineObj = new AnnAutomationObject();
                lineObj.Id = AnnAutomationManager.LineObjectId;
                lineObj.Name = "Line";
                AnnLineObject line = new AnnLineObject();
                line.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
                lineObj.Object = line;
                lineObj.DrawDesignerType = typeof(AnnLineDrawDesigner);
                lineObj.EditDesignerType = typeof(AnnLineEditDesigner);
                lineObj.RunDesignerType = typeof(AnnRunDesigner);
                btmp = new Bitmap(16, 16);
                using(Graphics graphics = Graphics.FromImage(btmp))
                {
                   graphics.FillRectangle(SystemBrushes.Control, new Rectangle(0, 0, 16, 16));
                   graphics.DrawLine(Pens.Black, 4, 12, 12, 4);
                }
                lineObj.ToolBarImage = btmp;
                lineObj.ToolBarToolTipText = "Draw new line object";
                lineObj.DrawCursor = Cursors.Cross;
                lineObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(lineObj.Id);
                manager.Objects.Add(lineObj);

                // set up the rectangle automation object
                AnnAutomationObject rectObj = new AnnAutomationObject();
                rectObj.Id = AnnAutomationManager.RectangleObjectId;
                rectObj.Name = "Rectangle";
                AnnRectangleObject rect = new AnnRectangleObject();
                rect.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
                rect.Brush = new AnnSolidBrush(Color.White);
                rectObj.Object = rect;
                rectObj.DrawDesignerType = typeof(AnnRectangleDrawDesigner);
                rectObj.EditDesignerType = typeof(AnnRectangleEditDesigner);
                rectObj.RunDesignerType = typeof(AnnRunDesigner);
                btmp = new Bitmap(16, 16);
                using(Graphics graphics = Graphics.FromImage(btmp))
                {
                   graphics.FillRectangle(SystemBrushes.Control, new Rectangle(0, 0, 16, 16));
                   graphics.DrawRectangle(Pens.Black, 2, 4, 10, 8);
                }
                rectObj.ToolBarImage = btmp;
                rectObj.ToolBarToolTipText = "Draw new rectangle object";
                rectObj.DrawCursor = Cursors.Cross;
                rectObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(rectObj.Id);
                manager.Objects.Add(rectObj);

                // set up the group automation object (always needed)
                AnnAutomationObject groupObj = new AnnAutomationObject();
                groupObj.Id = AnnAutomationManager.GroupObjectId;
                groupObj.Name = "Group";
                groupObj.Object = new AnnGroupObject();
                groupObj.DrawDesignerType = null;
                groupObj.EditDesignerType = typeof(AnnNewGroupEditDesigner);
                groupObj.RunDesignerType = typeof(AnnRunDesigner);
                groupObj.ToolBarImage = null;  // group is not in the toolbar
                groupObj.ToolBarToolTipText = null;
                groupObj.DrawCursor = null;
                groupObj.ContextMenu = AnnAutomationManager.CreateDefaultObjectContextMenu(groupObj.Id);
                manager.Objects.Add(groupObj);
             }
         }


      public void AnnAutomationManager_AnnAutomationManager(string title)
      {
         MyForm1 form = new MyForm1(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--AnnAutomationManager.AnnAutomationManager-->
      </example>
      <noValue />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.GroupObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnGroupObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.SelectObjectId">
      <summary>
            The automation id for the select object.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for the select object.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnLineObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnRectangleObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.EllipseObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnEllipseObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnEllipseObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.PolylineObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.PolygonObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnPolygonObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.CurveObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnCurveObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.ClosedCurveObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.PointerObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnPointerObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.FreehandObjectId">
      <summary>
            The automation id for a freehand <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for a freehand <see cref="T:Leadtools.Annotations.AnnPolylineObject" />.  The freehand version of a <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> differs only by using <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /> instead of <see cref="T:Leadtools.Annotations.AnnPolylineDrawDesigner" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.HiliteObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.TextObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnTextObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnTextObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.TextRollupObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.TextPointerObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnTextPointerObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.NoteObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.StampObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnStampObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.RubberStampObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnRubberStampObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.HotspotObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.FreehandHotspotObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.ButtonObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnButtonObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.PointObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnPointObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.RulerObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnRulerObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.PolyRulerObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.ProtractorObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.CrossProductObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.RedactionObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.EncryptObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.AudioObjectId">
      <summary>
            The automation id for <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            </summary>
      <remarks>
            Assign this value to <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for <see cref="T:Leadtools.Annotations.AnnAudioObject" />.
            Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.RichTextObjectId">
      <summary>
            The automation id for user-defined <see cref="T:Leadtools.Annotations.AnnRichTextObject" /> derived classes.
            </summary>
      <remarks>
            (Read only) This field is used when automating user-defined <see cref="T:Leadtools.Annotations.AnnObject" /> derived classes.  Assign this value as the <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> property when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for the first user-defined object you have.  Assign <b>UserObjectId</b> + 1 to the second, <b>UserObjectId</b> + 2 to the third and so on.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see>.
            <p>Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.</p></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.VideoObjectId">
      <summary>
            The automation id for user-defined <see cref="T:Leadtools.Annotations.AnnVideoObject" /> derived classes.
            </summary>
      <remarks>
            (Read only) This field is used when automating user-defined <see cref="T:Leadtools.Annotations.AnnObject" /> derived classes.  Assign this value as the <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> property when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for the first user-defined object you have.  Assign <b>UserObjectId</b> + 1 to the second, <b>UserObjectId</b> + 2 to the third and so on.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see>.
            <p>Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.</p></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId">
      <summary>
            The automation id for user-defined <see cref="T:Leadtools.Annotations.AnnObject" /> derived classes.
            </summary>
      <remarks>
            (Read only) This field is used when automating user-defined <see cref="T:Leadtools.Annotations.AnnObject" /> derived classes.  Assign this value as the <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> property when creating the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> for the first user-defined object you have.  Assign <b>UserObjectId</b> + 1 to the second, <b>UserObjectId</b> + 2 to the third and so on.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see>.
            <p>Each automation object must have an object id that is a unique integer value.  The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class defines the object ids for the default annotation objects such as <see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /> and <see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" />.  For user-defined objects, use <see cref="F:Leadtools.Annotations.AnnAutomationManager.UserObjectId" /> first then add 1 to this value for each new user object.</p></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.Dispose">
      <summary>
            Releases all resources used by this object. 
            </summary>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.Object.Finalize" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object. 
            </summary>
      <param name="disposing">
            true if this method was called as a result of calling <b>Dispose</b>; false if this method was called as a result of object finalization. 
            </param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.CreateToolBar">
      <summary>
            Creates the automation toolbar.
            </summary>
      <remarks>
            You should call this method after you finish setting up the automation objects in <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> or <see cref="M:Leadtools.Annotations.AnnAutomationManager.CreateDefaultObjects" />.  After calling this method, a <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" /> is created and you can add it to your form.
            <p>For information regarding default text strings used throughout the user interface in the automated mode, including information on how to override them, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see></p><p>For information regarding implementing annotations, refer to <see cref="T:AN.Topics.ImplementingAnnotations">Implementing Annotations.</see></p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.CreateDefaultObjects">
      <summary>
            Creates the default automation annotation objects.
            </summary>
      <remarks>
            Call this method to create the default automation annotation objects.
            <p>For information regarding default text strings used throughout the user interface in the automated mode, including information on how to override them, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see></p><p>For information regarding implementing annotations, refer to <see cref="T:AN.Topics.ImplementingAnnotations">Implementing Annotations.</see></p>
            The following table lists, for each default automation object, its id name
            and corresponding description:
            <list type="table"><listheader><term>Id</term><description>Object</description></listheader><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.GroupObjectId" /></term><description>Special automation object that manages groups and the selection of multiple objects</description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.SelectObjectId" /></term><description>Special automation object that manages the case where no object is selected</description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.LineObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnLineObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.RectangleObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnRectangleObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.EllipseObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnEllipseObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.PolylineObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPolylineObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.PolygonObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPolygonObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.CurveObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnCurveObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.ClosedCurveObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.PointerObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPointerObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.FreehandObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> with <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.HiliteObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnHiliteObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.TextObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnTextObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.TextRollupObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.TextPointerObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.NoteObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnNoteObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.StampObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnStampObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.RubberStampObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.HotspotObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnHotspotObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.FreehandHotspotObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnFreehandHotspotObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.ButtonObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnButtonObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.PointObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPointObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.RulerObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnRulerObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.PolyRulerObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.ProtractorObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnProtractorObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.CrossProductObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.RedactionObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnRedactionObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.EncryptObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnEncryptObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.AudioObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnAudioObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.RichTextObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnRichTextObject" /></description></item><item><term><see cref="F:Leadtools.Annotations.AnnAutomationManager.VideoObjectId" /></term><description>Automation object for <see cref="T:Leadtools.Annotations.AnnVideoObject" /></description></item></list></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.FindObject(System.Int32)">
      <summary>
            Finds the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> associated with a certain id.
            </summary>
      <param name="id">The id of the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> to find</param>
      <returns>The <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> from <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> for this id if found; null (Nothing in Visual Basic) otherwise.</returns>
      <remarks>
            This method enumerates all of the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> items in the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Objects" /> collection and compares <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> with <i>id</i>.
            </remarks>
      <example>
        <para>This example changes the line color of new line automation objects to blue.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_FindObject(ByVal manager As AnnAutomationManager)
         ' fine the line automation object
         Dim obj As AnnAutomationObject = manager.FindObject(AnnAutomationManager.LineObjectId)
         If Not obj Is Nothing Then
            obj.Object.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_FindObject(AnnAutomationManager manager)
      {
        // fine the line automation object
        AnnAutomationObject obj = manager.FindObject(AnnAutomationManager.LineObjectId);
        if(obj != null)
           obj.Object.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
      }</code>
        <!--AnnAutomationManager.FindObject-->
      </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.CreateDefaultObjectContextMenu(System.Int32)">
      <summary>
            Creates the context menu associated with a certain id.
            </summary>
      <noremarks />
      <param name="id">The id of the <see cref="T:Leadtools.Annotations.AnnAutomationObject" />.</param>
      <returns>The default <see cref="T:System.Windows.Forms.ContextMenu" /> used in <see cref="P:Leadtools.Annotations.AnnAutomationObject.ContextMenu" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomationManager.CurrentUICultureChanged">
      <summary>
            Informs this <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> that the current UI culture has been changed.
            </summary>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> caches the strings and metafiles used thoughout the automation user interface to improve performance.  You need to manually call this method whenever the current UI culture changes to re-load those resources.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs">
      <isnew>5/27/2009</isnew>
      <summary>
            Specifies the list of property pages that can be displayed or hidden when displaying the annotation properties dialog through automation.
            </summary>
      <remarks>
        <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" /> is used to hide one or more of the property pages in the annotation properties dialog.
            By default, <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" /> is set to <see cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs" />.None,
            which means all property pages will be displayed.  
            To hide one or more property pages, set this property to the logical "or" combination of the corresponding <see cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs" /> flags.
            These flags are used when setting the <see cref="P:Leadtools.Annotations.AnnAutomationManager.HidePropertiesTabs" /> property.
            For more information, see the documentation for <see cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs" /> flags.
            </remarks>
      <seealso cref="T:Leadtools.Annotations.AnnAutomationHidePropertiesTabs" />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <value>The list of property pages that can be displayed or hidden when displaying the annotation properties dialog through automation.</value>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.Automations">
      <summary>
            Gets the collection of <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1">RasterCollection&lt;AnnAutomation&gt;</see> representing the <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects in the <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.Objects">
      <summary>
            Gets the collection of <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomationManager" /></summary>
      <value>The <see cref="T:Leadtools.RasterCollection`1" /> representing the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> objects in the <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.</value>
      <remarks>(Read only)</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RubberStampButtonDropDownContextMenu">
      <summary>
            Gets or sets the context menu for the rubber stamp toolbar button of this <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </summary>
      <value>
            The context menu for the rubber stamp toolbar button of this <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </value>
      <remarks>
        <p>The <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" /> can create a button for the rubber stamp objects.  This button by default has its style set to <b>ToolBarButtonStyle.DropDownButton</b>.  The value of this property is the context menu used when this button is clicked.</p>
        <p>You can directly manipulate (for more information, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>) this context menu or set your own <see cref="T:System.Windows.Forms.ContextMenu" /> derived class if desired. For a list of available rubber stamp types, refer to the <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> enumeration.</p>
      </remarks>
      <example>
        <para>This example disables the "Void" rubber stamp type.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_RubberStampButtonDropDownContextMenu(ByVal manager As AnnAutomationManager)
         For Each item As MenuItem In manager.RubberStampButtonDropDownContextMenu.MenuItems
            If String.Compare(item.Text, "Void", False) = 0 Then
               item.Enabled = False
            End If
         Next item
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_RubberStampButtonDropDownContextMenu(AnnAutomationManager manager)
      {
         foreach (MenuItem item in manager.RubberStampButtonDropDownContextMenu.MenuItems)
         {
            if (string.Compare(item.Text, "Void", false) == 0)
               item.Enabled = false;
         }
      }</code>
        <!--AnnAutomationManager.RubberStampButtonDropDownContextMenu-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ContextMenu">
      <summary>
            Gets or sets the main automation context menu.
            </summary>
      <value>The main automation context menu</value>
      <remarks>
            This is the menu that appears when the user clicks anywhere on a container but not on any of the objects currently in the container.  You can directly manipulate this context menu or set your own <see cref="T:System.Windows.Forms.ContextMenu" /> derived class if desired.
            </remarks>
      <example>
        <para>This example adds a "Test" menu item to the main automation context menu.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_ContextMenu(ByVal manager As AnnAutomationManager)
         Dim cm As ContextMenu = manager.ContextMenu
         ' add a separator
         cm.MenuItems.Add("-")
         ' add a test menu item
         cm.MenuItems.Add("Test", New EventHandler(AddressOf MyTestMenuItemHandler))
      End Sub
      Private Sub MyTestMenuItemHandler(ByVal sender As Object, ByVal e As EventArgs)
         MessageBox.Show("Test clicked")
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_ContextMenu(AnnAutomationManager manager)
      {
         ContextMenu cm = manager.ContextMenu;
         // add a separator
         cm.MenuItems.Add("-");
         // add a test menu item
         cm.MenuItems.Add("Test", new EventHandler(MyTestMenuItemHandler));
      }
      private void MyTestMenuItemHandler(object sender, EventArgs e)
      {
         MessageBox.Show("Test clicked");
      }</code>
        <!--AnnAutomationManager.ContextMenu-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ToolBar">
      <summary>
            Gets the automation toolbar.
            </summary>
      <value>The automation toolbar.</value>
      <remarks>
            (Read only) The automation toolbar is created after you call <see cref="M:Leadtools.Annotations.AnnAutomationManager.CreateToolBar" />.  The automation toolbar is a standard <see cref="T:System.Windows.Forms.ToolBar" /> control.
            <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotations">Implementing Annotations.</see>.</p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomationManager.CurrentObjectIdChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.CurrentObjectId" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.Annotations.AnnAutomationManager.CurrentObjectId" /> property is changed by either a programmatic modification or by the user clicking on one of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" /> buttons.
            </remarks>
      <example>
        <para>This example subscribes to the <see cref="E:Leadtools.Annotations.AnnAutomationManager.CurrentObjectIdChanged" /> event in order to update a UI element.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_CurrentObjectIdChanged(ByVal manager As AnnAutomationManager)
         AddHandler manager.CurrentObjectIdChanged, AddressOf OnCurrentObjectIdChanged
      End Sub
      Private Sub OnCurrentObjectIdChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim manager As AnnAutomationManager = CType(IIf(TypeOf sender Is AnnAutomationManager, sender, Nothing), AnnAutomationManager)
         MessageBox.Show(String.Format("Object Id changed, new Id is {0}", manager.CurrentObjectId))
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_CurrentObjectIdChanged(AnnAutomationManager manager)
      {
         manager.CurrentObjectIdChanged += new EventHandler(OnCurrentObjectIdChanged);
      }
      private void OnCurrentObjectIdChanged(object sender, EventArgs e)
      {
         AnnAutomationManager manager = sender as AnnAutomationManager;
         MessageBox.Show(String.Format("Object Id changed, new Id is {0}", manager.CurrentObjectId));
      }</code>
        <!--AnnAutomationManager.CurrentObjectIdChanged-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.CurrentObjectId">
      <summary>
            Gets or sets the current automation object id.
            </summary>
      <value>The current automation object id.</value>
      <remarks>
        <p>The current automation object id is the <see cref="P:Leadtools.Annotations.AnnAutomationObject.Id" /> of the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> currently selected in the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" />.  This object is the "active" object to be drawn on the current active <see cref="T:Leadtools.Annotations.AnnAutomation" />.  You can change the value of this property programmatically.  It also changes when the user clicks on the buttons of the automation <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" />.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomationManager.CurrentObjectIdChanged" /> event is fired when this property is changed</p>
      </remarks>
      <example>
        <para>This example sets the line object as the current automation object.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_CurrentObjectId(ByVal manager As AnnAutomationManager)
         ' if you are using the automation toolbar, notice the line button gets selected as well
         manager.CurrentObjectId = AnnAutomationManager.LineObjectId
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_CurrentObjectId(AnnAutomationManager manager)
      {
         // if you are using the automation toolbar, notice the line button gets selected as well
         manager.CurrentObjectId = AnnAutomationManager.LineObjectId;
      }</code>
        <!--AnnAutomationManager.CurrentObjectId-->
      </example>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampTypeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampType" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampType" /> property is changed by either a programmatic modification or by the user clicking on one of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" /> buttons.
            </remarks>
      <example>
        <para>This example subscribes to the <see cref="E:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampTypeChanged" /> event in order to update a UI element.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_CurrentRubberStampTypeChanged(ByVal manager As AnnAutomationManager)
         AddHandler manager.CurrentRubberStampTypeChanged, AddressOf OnCurrentRubberStampTypeChanged
      End Sub
      Private Sub OnCurrentRubberStampTypeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim manager As AnnAutomationManager = CType(IIf(TypeOf sender Is AnnAutomationManager, sender, Nothing), AnnAutomationManager)
         MessageBox.Show(String.Format("Rubber stamp is changed, new type is {0}", manager.CurrentRubberStampType))
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_CurrentRubberStampTypeChanged(AnnAutomationManager manager)
      {
         manager.CurrentRubberStampTypeChanged += new EventHandler(OnCurrentRubberStampTypeChanged);
      }
      private void OnCurrentRubberStampTypeChanged(object sender, EventArgs e)
      {
         AnnAutomationManager manager = sender as AnnAutomationManager;
         MessageBox.Show(String.Format("Rubber stamp is changed, new type is {0}", manager.CurrentRubberStampType));
      }</code>
        <!--AnnAutomationManager.CurrentRubberStampTypeChanged-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampType">
      <summary>
            Gets or sets the current automation rubber stamp object type.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRubberStampType" /> value that specifies the current automation rubber stamp object type.</value>
      <remarks>
        <p>The current automation rubber stamp type is the <see cref="P:Leadtools.Annotations.AnnRubberStampObject.Type" /> of the <see cref="T:Leadtools.Annotations.AnnRubberStampObject" /> currently selected in the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" />.  This object is the "active" object to be drawn on the current active <see cref="T:Leadtools.Annotations.AnnAutomation" />.  You can change the value of this property programmatically.  It can also change if the user makes a selection from the automation <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" /> or selects a type in the Rubber Stamp Properties dialog.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomationManager.CurrentRubberStampTypeChanged" /> event is fired when this property is changed.</p>
      </remarks>
      <example>
        <para>This example sets "void" as the current automation rubber stamp type.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_CurrentRubberStampType(ByVal manager As AnnAutomationManager)
         ' if you are using the automation toolbar, notice the rubber stamp button gets selected as well and the void menu item gets selected
         manager.CurrentRubberStampType = AnnRubberStampType.Void

         ' select rubber stamp as the current object
         manager.CurrentObjectId = AnnAutomationManager.RubberStampObjectId
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_CurrentRubberStampType(AnnAutomationManager manager)
      {
         // if you are using the automation toolbar, notice the rubber stamp button gets selected as well and the void menu item gets selected
         manager.CurrentRubberStampType = AnnRubberStampType.Void;

         // select rubber stamp as the current object
         manager.CurrentObjectId = AnnAutomationManager.RubberStampObjectId;
      }</code>
        <!--AnnAutomationManager.CurrentRubberStampType-->
      </example>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomationManager.UserModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> property is changed.
            </remarks>
      <example>
        <para>This example subscribes to the <see cref="E:Leadtools.Annotations.AnnAutomationManager.UserModeChanged" /> event in order to update a UI element.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_UserModeChanged(ByVal manager As AnnAutomationManager)
         AddHandler manager.UserModeChanged, AddressOf OnUserModeChanged
      End Sub
      Private Sub OnUserModeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim manager As AnnAutomationManager = CType(IIf(TypeOf sender Is AnnAutomationManager, sender, Nothing), AnnAutomationManager)
         MessageBox.Show(String.Format("User mode has changed, new mode is {0}", manager.UserMode))
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_UserModeChanged(AnnAutomationManager manager)
      {
         manager.UserModeChanged += new EventHandler(OnUserModeChanged);
      }
      private void OnUserModeChanged(object sender, EventArgs e)
      {
         AnnAutomationManager manager = sender as AnnAutomationManager;
         MessageBox.Show(String.Format("User mode has changed, new mode is {0}", manager.UserMode));
      }</code>
        <!--AnnAutomationManager.UserModeChanged-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.UserMode">
      <summary>
            Gets or sets the current user mode.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUserMode" /> value that specifies the current user mode.</value>
      <remarks>
        <p>
          <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see> is for creating objects; <b>AnnUserMode.Run</b> mode is for viewing them.</p>
        <p>Switching the user mode to <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Run</see> automatically hides the automation <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" />. Setting the user mode to <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see> displays the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ToolBar" />.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomationManager.UserModeChanged" /> event is fired when this property is changed.</p>
      </remarks>
      <example>
        <para>This example flips the user mode between run and design.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_UserMode(ByVal manager As AnnAutomationManager)
         If manager.UserMode = AnnUserMode.Design Then
            manager.UserMode = AnnUserMode.Run
         Else
            manager.UserMode = AnnUserMode.Design
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_UserMode(AnnAutomationManager manager)
      {
         if(manager.UserMode == AnnUserMode.Design)
            manager.UserMode = AnnUserMode.Run;
         else
            manager.UserMode = AnnUserMode.Design;
      }</code>
        <!--AnnAutomationManager.UserMode-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.EditHitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>The hit test buffer, in pixels, for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.</value>
      <remarks>
        <p>The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with a length of 4 pixels around the test point will be used to perform the hit-testing.</p>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType" />, it will use this value in the created <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.<see cref="P:Leadtools.Annotations.AnnEditDesigner.HitTestBuffer" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointsHitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>The hit test buffer, in pixels, for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.</value>
      <remarks>
        <p>The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with sides 4 pixels long will be used around the test point to perform the hit-testing.</p>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType" />, it will use this value for the created <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.<see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointsHitTestBuffer" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RunHitTestBuffer">
      <summary>
            Gets or sets the hit test buffer for all <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> derived classes.
            </summary>
      <value>The hit test buffer, in pixels, for all <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> derived classes.</value>
      <remarks>
        <p>The hit test buffer is used to make the test point "bigger" to compensate for errors and provide smoother hit-testing.  For example, if the buffer value is 2, a square with sides 4 pixels long around the test point will be used to perform the hit-testing.</p>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.RunDesignerType" />, it will use this value for the created <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.<see cref="P:Leadtools.Annotations.AnnRunDesigner.HitTestBuffer" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over an unselected annotation object.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over an unselected annotation object.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" /></remarks>
      <example>
        <para>This example sets the automation manager to various mouse cursors.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_SelectObjectCursor(ByVal manager As AnnAutomationManager)
         ' Set the cursor used in design mode hovering over an unselected annotation object.
         manager.SelectObjectCursor = Cursors.Cross
         ' Set the cursor used in design mode when the cursor is over a selected object (but not over the control points).
         manager.SelectedObjectCursor = Cursors.Hand
         ' Set the cursor used in design mode when cursor is over a control point.
         manager.ControlPointCursor = Cursors.Cross
         ' Set the cursor used in design mode when dragging and selecting a group of objects
         manager.SelectRectangleCursor = Cursors.Default
         ' Set the cursor used in run mode when hovering over an object
         manager.RunCursor = Cursors.Hand
         ' Set the cursor used in design mode when hovering over an upper left/lower right control point
         manager.ControlPointNWSECursor = Cursors.PanNW
         ' Set the cursor used in design mode when hovering over an upper right/lower left control point
         manager.ControlPointNESWCursor = Cursors.PanNE
         ' Set the cursor used in design mode when hovering over an upper/lower middle control point
         manager.ControlPointNSCursor = Cursors.PanNorth
         ' Set the cursor used in design mode when hovering over an side middle control point
         manager.ControlPointWECursor = Cursors.PanWest
         ' Set the cursor used in design mode when hovering over the rotate center control point
         manager.RotateCenterControlPointCursor = Cursors.Hand
         ' Set the cursor used in design mode when hovering over the rotate gripper control point
         manager.RotateGripperControlPointCursor = Cursors.SizeAll
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_SelectObjectCursor(AnnAutomationManager manager)
      {
         // Set the cursor used in design mode hovering over an unselected annotation object.
         manager.SelectObjectCursor = Cursors.Cross;
         // Set the cursor used in design mode when the cursor is over a selected object (but not over the control points).
         manager.SelectedObjectCursor = Cursors.Hand;
         // Set the cursor used in design mode when cursor is over a control point.
         manager.ControlPointCursor = Cursors.Cross;
         // Set the cursor used in design mode when dragging and selecting a group of objects
         manager.SelectRectangleCursor = Cursors.Default;
         // Set the cursor used in run mode when hovering over an object
         manager.RunCursor = Cursors.Hand;
         // Set the cursor used in design mode when hovering over an upper left/lower right control point
         manager.ControlPointNWSECursor = Cursors.PanNW;
         // Set the cursor used in design mode when hovering over an upper right/lower left control point
         manager.ControlPointNESWCursor = Cursors.PanNE;
         // Set the cursor used in design mode when hovering over an upper/lower middle control point
         manager.ControlPointNSCursor = Cursors.PanNorth;
         // Set the cursor used in design mode when hovering over an side middle control point
         manager.ControlPointWECursor = Cursors.PanWest;
         // Set the cursor used in design mode when hovering over the rotate center control point
         manager.RotateCenterControlPointCursor = Cursors.Hand;
         // Set the cursor used in design mode when hovering over the rotate gripper control point
         manager.RotateGripperControlPointCursor = Cursors.SizeAll;
      }</code>
        <!--AnnAutomationManager.SelectObjectCursor-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.DefaultCursor">
      <summary>
            Gets or sets the default <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the automation is not in any active state.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the automation is not in any active state and the mouse cursor is not
            hovering over any object. Default value is
            <see cref="P:System.Windows.Forms.Cursors.Default">Cursors.Default</see>.</value>
      <remarks>
        <para>This mouse cursor is used none of the conditions is met to use any of these cursors:</para>
        <para>
          <list type="bullet">
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.</example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a selected object.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a selected object.</value>
      <remarks>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see></p>
        <p>If the cursor is over a control point the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" /> image will be used instead.</p>
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a control point.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a control point.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.
            <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over the upper left or lower right control point of a rectangular selection.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over the upper left or lower right control point of a rectangular selection.</value>
      <remarks>
        <p>Note that when an <see cref="T:Leadtools.Annotations.AnnObject" /> is rotated, the mouse pointer image used for a particular control point can change.  
            For example, if the upper left control point is rotated so that it is now the lower center control point,
            the mouse pointer image displayed would be dictated by the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /> instead of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />.</p>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.</p>
        <p>Used with rectangular selections.  A rectangular selection appears when the selected <see cref="T:Leadtools.Annotations.AnnObject" /> 
            is rectangular (i.e. <see cref="T:Leadtools.Annotations.AnnGroupObject" /> or the object is derived
            from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />).</p>
        <p>For more information, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />, <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />, <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />, and <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over the upper middle or lower middle control point of a rectangular selection.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over the upper middle or lower middle control point of a rectangular selection.</value>
      <remarks>
        <p>Note that when an <see cref="T:Leadtools.Annotations.AnnObject" /> is rotated, the mouse pointer image used for a particular control point can change.  
            For example, if the upper left control point is rotated so that it is now the lower center control point,
            the mouse pointer image displayed would be dictated by the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /> instead of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />.</p>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.</p>
        <p>Used with rectangular selections.  A rectangular selection appears when the selected <see cref="T:Leadtools.Annotations.AnnObject" /> is rectangular (i.e. <see cref="T:Leadtools.Annotations.AnnGroupObject" /> or the object is derived from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />).</p>
        <p>For more information, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />, <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />,
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />, and <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor">
      <summary>  
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when 
            the cursor is over the upper right or lower left control point of a rectangular selection.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over the upper right or lower left control point of a rectangular selection.</value>
      <remarks>
        <p>Note that when an <see cref="T:Leadtools.Annotations.AnnObject" /> is rotated, the mouse pointer image used for 
            a particular control point can change.  For example, if the upper left control point is rotated so 
            that it is now the lower center control point,
            the mouse pointer image displayed would be dictated by the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /> 
            instead of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />.</p>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.</p>
        <p>Used with rectangular selections.  A rectangular selection appears when the selected <see cref="T:Leadtools.Annotations.AnnObject" /> is rectangular (i.e. <see cref="T:Leadtools.Annotations.AnnGroupObject" /> or the object is derived from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />).</p>
        <p>For more information, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />, <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />,
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />, and <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" /></example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a side middle control point of a rectangular selection.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when the cursor is over a side middle control point of a rectangular selection.</value>
      <remarks>
        <p>Note that when an <see cref="T:Leadtools.Annotations.AnnObject" /> is rotated, the mouse pointer image used for a particular control point can change.
            For example, if the upper left control point is rotated so that it is now the lower center control point,
            the mouse pointer image displayed would be dictated by the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /> instead of the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />.</p>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.</p>
        <p>Used with rectangular selections.  A rectangular selection appears when the selected <see cref="T:Leadtools.Annotations.AnnObject" /> 
            is rectangular (i.e. <see cref="T:Leadtools.Annotations.AnnGroupObject" /> or the object is derived from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />).</p>
        <p>For more information, refer to 
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />, 
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />,
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />, and
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />.
            </p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when dragging and selecting a group of objects.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when dragging and selecting a group of objects.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RunCursor">
      <summary>
            Gets or sets the cursor used in run mode when hovering over an object.
            </summary>
      <value>The cursor used in run mode when hovering over an object.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Run</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over or dragging the rotate center control point.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over or dragging the rotate center control point.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.
            <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over or dragging the rotate gripper control point.
            </summary>
      <value>The <see cref="T:System.Windows.Forms.Cursor" /> mouse pointer image used when hovering over or dragging the rotate gripper control point.</value>
      <remarks>
            Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.
            <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNWSECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNSCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointNESWCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.ControlPointWECursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RunCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectedObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.SelectRectangleCursor" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.SelectObjectCursor" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateLinePen">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPen" /> used to draw a line between the rotate control points
            for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived objects.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPen" /> used to draw a line between the rotate control points.</value>
      <remarks>
        <p>
            This property gets or sets the pen that is used to draw the line that appears between the rotate control points 
            when dragging either 
            the center rotate control point or the gripper rotate control point.
            </p>
        <p>Used when <see cref="P:Leadtools.Annotations.AnnAutomationManager.UserMode" /> is <see cref="T:Leadtools.Annotations.AnnUserMode">AnnUserMode.Design</see>.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
      </remarks>
      <example>
        <para>This example changes the look of the rotate user interface by performing the following actions:
            <list type="number"><item><description>Sets the rotate line pen to be solid red</description></item><item><description>Changes the rotate center control point to be a black circle filled with red</description></item><item><description>Changes the rotate gripper control point to be a blue rectangle filled with yellow</description></item></list></para>
        <code lang="VB">      Public Sub AnnAutomationManager_RotateLinePen(ByVal manager As AnnAutomationManager)
         Dim annPen As AnnPen = New AnnPen(System.Drawing.Color.Red, New AnnLength(4, AnnUnit.Pixel))
         manager.RotateLinePen = annPen
         Dim cpCenter As AnnEllipseControlPoint = New AnnEllipseControlPoint()
         cpCenter.Pen = New AnnPen(Color.Black, New AnnLength(1, AnnUnit.Pixel))
         cpCenter.Brush = New AnnSolidBrush(Color.FromArgb(128, 255, 0, 0))
         cpCenter.Size = New AnnSize(12, 12, AnnUnit.Pixel)
         manager.RotateCenterControlPoint = cpCenter

         Dim cpGripper As AnnRectangleControlPoint = New AnnRectangleControlPoint()
         cpGripper.Pen = New AnnPen(Color.Blue, New AnnLength(3, AnnUnit.Pixel))
         cpGripper.Brush = New AnnSolidBrush(Color.Yellow)
         cpGripper.Size = New AnnSize(8, 8, AnnUnit.Pixel)
         manager.RotateGripperControlPoint = cpGripper
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_RotateLinePen(AnnAutomationManager manager)
      {
         AnnPen annPen = new AnnPen(System.Drawing.Color.Red, new AnnLength(4, AnnUnit.Pixel));
         manager.RotateLinePen = annPen;
         AnnEllipseControlPoint cpCenter = new AnnEllipseControlPoint();
         cpCenter.Pen = new AnnPen(Color.Black, new AnnLength(1, AnnUnit.Pixel));
         cpCenter.Brush = new AnnSolidBrush(Color.FromArgb(128, 255, 0, 0));
         cpCenter.Size = new AnnSize(12, 12, AnnUnit.Pixel);
         manager.RotateCenterControlPoint = cpCenter;

         AnnRectangleControlPoint cpGripper = new AnnRectangleControlPoint();
         cpGripper.Pen = new AnnPen(Color.Blue, new AnnLength(3, AnnUnit.Pixel));
         cpGripper.Brush = new AnnSolidBrush(Color.Yellow);
         cpGripper.Size = new AnnSize(8, 8, AnnUnit.Pixel);
         manager.RotateGripperControlPoint = cpGripper;
      }</code>
        <!--AnnAutomationManager.RotateLinePen-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.</value>
      <remarks>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType" />, it will use this value in the created <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.<see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPoints" /> collection.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomationManager_ControlPoint(ByVal manager As AnnAutomationManager)
         ' Use an ellipse control point with red brush (alpha = 128)
         Dim cp As AnnEllipseControlPoint = New AnnEllipseControlPoint()
         cp.Pen = New AnnPen(Color.Black, New AnnLength(1, AnnUnit.Pixel))
         cp.Brush = New AnnSolidBrush(Color.FromArgb(128, 255, 0, 0))
         cp.Size = New AnnSize(12, 12, AnnUnit.Pixel)
         manager.ControlPoint = cp
         ' now, whenever you draw or select an object in this manager, this control point will be used
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_ControlPoint(AnnAutomationManager manager)
      {
         // Use an ellipse control point with red brush (alpha = 128)
         AnnEllipseControlPoint cp = new AnnEllipseControlPoint();
         cp.Pen = new AnnPen(Color.Black, new AnnLength(1, AnnUnit.Pixel));
         cp.Brush = new AnnSolidBrush(Color.FromArgb(128, 255, 0, 0));
         cp.Size = new AnnSize(12, 12, AnnUnit.Pixel);
         manager.ControlPoint = cp;
         // now, whenever you draw or select an object in this manager, this control point will be used
      }</code>
        <!--AnnAutomationManager.ControlPoint-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for the rotate center control point for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for the rotate center control point for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.</value>
      <remarks>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType" />, it will use this value in the created <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.<see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPoints" /> collection.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.RotateLinePen" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for the rotate gripper control point for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnControlPoint" /> object used for the rotate gripper control point for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.</value>
      <remarks>
        <p>When the automation framework uses reflection to create any of the <see cref="P:Leadtools.Annotations.AnnAutomationObject.EditDesignerType" />, it will use this value in the created <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.<see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPoints" /> collection.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.RotateLinePen" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType">
      <summary>
            Gets or sets the object's properties dialog.
            </summary>
      <value>A type of <see cref="T:System.Windows.Forms.Form" /> that represents the object's properties dialog.</value>
      <remarks>
        <p>This property is intended for future use.</p>
        <p>This dialog appears when the user right-clicks an object and selects "Properties" from the context menu
            that appears.You can directly manipulate the resources of this dialog (for more information,
            refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>).</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.PasswordDialogType">
      <summary>
            Gets or sets the password dialog.
            </summary>
      <value>A type of <see cref="T:System.Windows.Forms.Form" /> that represents the password dialog.</value>
      <remarks>
            This dialog appears when the user locks or unlocks objects through the user interface.  You can directly manipulate the resources of this dialog (for more information, refer to <see cref="T:AN.Topics.AnnotationLocalization">Localization of LEADTOOLS for .NET Annotations Automation</see>), or set your own <see cref="T:System.Windows.Forms.Form" /> derived class.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RotateModifierKey">
      <summary>
            Gets or sets the rotate modifier key.
            </summary>
      <value>The rotate modifier key.</value>
      <remarks>
        <p>This key is used in design mode when the an object is selected.  Pressing down this key and clicking anywhere on the object then dragging the mouse rotates the object around its origin.</p>
        <p>Please note that the <b>AnnEncryptObject</b> object does not support rotation.</p>
        <p>By default, the automation framework sets this value to <b>Keys.Shift</b></p>
      </remarks>
      <example>
        <para>This example disables the rotate modifier key</para>
        <code lang="VB">      Public Sub AnnAutomationManager_RotateModifierKey(ByVal manager As AnnAutomationManager)
         manager.RotateModifierKey = Keys.None
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_RotateModifierKey(AnnAutomationManager manager)
      {
         manager.RotateModifierKey = Keys.None;
      }</code>
        <!--AnnAutomationManager.RotateModifierKey-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ShowControlPoints">
      <summary>
            Gets or sets a value that indicates whether to show the control points.
            </summary>
      <value>true to show the control points; otherwise, false.</value>
      <remarks>
            Changing this property will affect current and all future running <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> objects.  For more information refer to the <see cref="P:Leadtools.Annotations.AnnPolylineEditDesigner.ShowControlPoints" /> property of the <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ControlPointsGap">
      <summary>
            Gets or sets a value that indicates which control points to display.
            </summary>
      <value>
            An integer value greater than zero that indicates which control points to display, or 0 to display all control points.
            </value>
      <remarks>
            Changing this property will affect current and all future running <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> objects.  For more information refer to the <see cref="P:Leadtools.Annotations.AnnPolylineEditDesigner.ControlPointsGap" /> property of the <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ExtendedModeModifierKey">
      <summary>
            Gets or sets the extended mode modifier key.
            </summary>
      <value>The extended mode modifier key.</value>
      <remarks>
        <p>This key is used to toggle the <see cref="P:Leadtools.Annotations.AnnDrawDesigner.ExtendedMode" /> on and off in design mode.</p>
        <p>Extended mode modifies the drawing behavior of the designer. Pressing and holding down the modifier key while drawing makes lines snap to the closest vertical, horizontal, or 45-degree angle, and constrains rectangle and ellipse objects to be sized proportionately when they are drawn so that squares and circles are drawn instead of rectangles and ellipses. </p>
        <p>By default, the automation framework sets this value to <b>Keys.Shift</b></p>
      </remarks>
      <example>
        <para>This example disables the extended mode modifier key.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_ExtendedModeModifierKey(ByVal manager As AnnAutomationManager)
         manager.ExtendedModeModifierKey = Keys.None
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_ExtendedModeModifierKey(AnnAutomationManager manager)
      {
         manager.ExtendedModeModifierKey = Keys.None;
      }</code>
        <!--AnnAutomationManager.ExtendedModeModifierKey-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.MultiSelectModifierKey">
      <summary>
            Gets or sets the multi-select modifier key.
            </summary>
      <value>The multi-select modifier key.</value>
      <remarks>
        <p>This key is used in design mode to select multiple objects.  After the first object is selected, you press and hold down this key then click on other objects on the container.  A temporary group will be created and these objects will be added to this group.</p>
        <p>By default, the automation framework sets this value to <b>Keys.Shift</b></p>
      </remarks>
      <example>
        <para>This example disables the multi-select modifier key</para>
        <code lang="VB">      Public Sub AnnAutomationManager_MultiSelectModifierKey(ByVal manager As AnnAutomationManager)
         manager.MultiSelectModifierKey = Keys.None
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_MultiSelectModifierKey(AnnAutomationManager manager)
      {
         manager.MultiSelectModifierKey = Keys.None;
      }</code>
        <!--AnnAutomationManager.MultiSelectModifierKey-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RedactionRealizePassword">
      <summary>
            Gets or sets the password used for realization of <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects.
            </summary>
      <value>The password used for realization of <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects.</value>
      <remarks>
        <p>When an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> is realized through the user interface in design time, the object will automatically be locked by calling <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" /> with this value as the password.  This will prevent the user from accidentally moving the realized <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.  The user has to manually unlock the object either by using the user interface or programmatically by calling <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" /> with this property value as the password</p>
        <p>You can disable this feature by setting this property to an empty string.</p>
        <p>This property is disabled by default.</p>
      </remarks>
      <example>
        <para>This example sets "Leadtools" as the password used for automatically locking realized redaction objects.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_RedactionRealizePassword(ByVal manager As AnnAutomationManager)
         manager.RedactionRealizePassword = "Leadtools"
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_RedactionRealizePassword(AnnAutomationManager manager)
      {
         manager.RedactionRealizePassword = "Leadtools";
      }</code>
        <!--AnnAutomationManager.RedactionRealizePassword-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs">
      <summary>
            Gets or sets the <see cref="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs" /> used when loading the images of objects that implement the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> interface.
            </summary>
      <value>A <see cref="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs" /> object used when loading the images of objects that implement the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> interface.</value>
      <remarks>
        <p>If you set this value to a valid <see cref="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs" /> object, this <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> will use 
            the <see cref="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs" /> object to load the images of objects that implement the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> 
            interface.  After that, the manager will use the <see cref="M:Leadtools.Drawing.RasterImageConverter.ConvertToImage(Leadtools.RasterImage,Leadtools.Drawing.ConvertToImageOptions)">RasterImageConverter.ConvertToImage</see> method to convert 
            the <see cref="T:Leadtools.RasterImage" /> loaded into an <see cref="T:System.Drawing.Image" />.  Using a <see cref="P:Leadtools.Annotations.AnnAutomationManager.RasterCodecs" /> 
            allows the manager to load many more different image file formats than the formats that GDI+ supports.</p>
        <p>If you set the value of this property to null (Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> will use GDI+ to load the images.</p>
        <p>For more information regarding the <see cref="T:Leadtools.Annotations.IAnnPictureObject" /> interface, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.EditObjectAfterDraw">
      <summary>
            Gets or sets a value that indicates whether new drawn objects are selected (edited).
            </summary>
      <value>true to edit (select) new objects; otherwise, false.</value>
      <remarks>
        <p>When the value of this property is <b>true</b> (default) new objects drawn on the current active
            <see cref="T:Leadtools.Annotations.AnnAutomation" /> will be automatically selected (edited).</p>
        <p>If the new object derives from <see cref="T:Leadtools.Annotations.AnnTextObject" /> and the values the 
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.EditObjectAfterDraw" /> and <see cref="P:Leadtools.Annotations.AnnAutomationManager.ShowTextObjectsPropertiesDialogAfterDraw" />
            properties are both set to <b>true</b>, then the object properties dialog will pop up.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ShowTextObjectsPropertiesDialogAfterDraw">
      <summary>
            Gets or sets a value that indicates whether to show the object properties dialog after
            a text object is drawn.
            </summary>
      <keywords>ShowTextObjectsPropertiesDialogAfterDraw</keywords>
      <value>true to show the object properties dialog after a text object is drawn; otherwise, false.</value>
      <remarks>
        <p>When the value of this property is true (default) and a new object that derives from
            <see cref="T:Leadtools.Annotations.AnnTextObject" /> is drawn.  The objet properties dialog will pop up to let you change
            the text value.</p>
        <p>The <see cref="P:Leadtools.Annotations.AnnAutomationManager.ShowTextObjectsPropertiesDialogAfterDraw" /> only works if the value of the 
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.EditObjectAfterDraw" /> is set to <b>true</b>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.ShowTextObjectEditWindowAfterDraw">
      <summary>
            Gets or sets a value that indicates whether to show a text edit window after
            a text object is drawn.
            </summary>
      <keywords>ShowTextObjectEditWindowAfterDraw</keywords>
      <value>true to show a text edit window after a text object is drawn; otherwise, false.</value>
      <remarks>
        <p>When the value of this property is true (default) and a new object that derives from
            <see cref="T:Leadtools.Annotations.AnnTextObject" /> is drawn,  a text window will pop up to let you change
            the text value.</p>
        <p>The <see cref="P:Leadtools.Annotations.AnnAutomationManager.ShowTextObjectEditWindowAfterDraw" /> only works if the value of the 
            <see cref="P:Leadtools.Annotations.AnnAutomationManager.EditObjectAfterDraw" /> is set to <b>true</b>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.UseXPStyleToolBar">
      <summary>
            Gets or sets a value that indicates whether the annotation toolbar is drawn with the new XP style look.
            </summary>
      <value>true to use new XP style look; otherwise, false.</value>
      <remarks>
            When the value of this property is true (default) the annotation toolbar will be displayed with the new XP style look.  
            This means that the button images will be drawn with 24x24 pixel images using an alpha channel. For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
        <para>This example changes the automation manager. If <see cref="P:Leadtools.Annotations.AnnAutomationManager.UseXPStyleToolBar" /> is true, the new xp style toolbar is created; otherwise, the older style annotation toolbar is created.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_UseXPStyleToolBar(ByVal manager As AnnAutomationManager, ByVal useXPStyleToolBar As Boolean)
         manager = New AnnAutomationManager()
         manager.UseXPStyleToolBar = useXPStyleToolBar
         manager.CreateDefaultObjects()
         manager.CreateToolBar()
         manager.ToolBar.Dock = DockStyle.Top
         manager.ToolBar.BringToFront()
         manager.ToolBar.Appearance = ToolBarAppearance.Flat
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_UseXPStyleToolBar(AnnAutomationManager manager, bool useXPStyleToolBar)
      {
         manager = new AnnAutomationManager();
         manager.UseXPStyleToolBar = useXPStyleToolBar;
         manager.CreateDefaultObjects();
         manager.CreateToolBar();
         manager.ToolBar.Dock = DockStyle.Top;
         manager.ToolBar.BringToFront();
         manager.ToolBar.Appearance = ToolBarAppearance.Flat;
      }</code>
        <!--AnnAutomationManager.UseXPStyleToolBar-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.MaintainAspectRatio">
      <summary>
            Gets or sets a value that indicates whether to preserve the aspect ratio when moving a corner control point for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>true to maintain the aspect ratio; otherwise, false.</value>
      <remarks>
            When selecting an <see cref="T:Leadtools.Annotations.AnnRectangleObject" />, 
            any annotation object that derives from <see cref="T:Leadtools.Annotations.AnnRectangleObject" />, 
            or an <see cref="T:Leadtools.Annotations.AnnGroupObject" />,
            eight control points appear.  If <see cref="P:Leadtools.Annotations.AnnAutomationManager.MaintainAspectRatio" /> is true (default), dragging one of the four corner control points
            will change the size of the annotation object while maintaining its aspect ratio.  If false, the aspect ratio is not preserved.
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
        <para>This example makes it so that when moving the corner control points of a rectangular annotation object, the aspect ratio is not preserved.</para>
        <code lang="VB">      Public Sub AnnAutomationManager_MaintainAspectRatio(ByVal manager As AnnAutomationManager)
         manager.MaintainAspectRatio = False
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_MaintainAspectRatio(AnnAutomationManager manager)
      {
         manager.MaintainAspectRatio = false;
      }</code>
        <!--AnnAutomationManager.MaintainAspectRatio-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen">
      <summary>
            Gets or sets the background <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing the group outline for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>
            The background <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing the group outline for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen">
      <summary>
            Gets or sets the foreground <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing the group outline for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>
            The foreground <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing the group outline for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" />.
            </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen">
      <summary>
            Gets or sets the object outline <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing selected objects in a group for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </summary>
      <value>
            The object outline <see cref="T:Leadtools.Annotations.AnnPen" /> used when drawing selected objects in a group for all <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> derived classes.
            </value>
      <remarks>
            When an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is displayed with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" />
            it is drawn with three pens:
            <list type="bullet"><item><description>The group outline background pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" />)</description></item><item><description>The group outline foreground pen (<see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" />)</description></item><item><description>Each selected <see cref="T:Leadtools.Annotations.AnnObject" /> in the group is drawn with the <see cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditObjectPen" /></description></item></list>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameBackPen" /><seealso cref="P:Leadtools.Annotations.AnnAutomationManager.GroupEditFrameForePen" /></remarks>
      <example>
        <para>This example changes some properties of the group outline used with the <see cref="T:Leadtools.Annotations.AnnNewGroupEditDesigner" /> including the following:
            <list type="bullet"><item><description>the Outline forecolor to white</description></item><item><description>the Outline backcolor to black</description></item><item><description>the Pen used to outline selected objects to purple</description></item></list></para>
        <code lang="VB">      Public Sub AnnAutomationManager_GroupEditObjectPen(ByVal manager As AnnAutomationManager)
         Dim back As AnnPen = manager.GroupEditFrameBackPen
         Dim fore As AnnPen = manager.GroupEditFrameForePen
         manager.GroupEditFrameBackPen = New AnnPen(System.Drawing.Color.Black, New AnnLength(3, AnnUnit.Pixel))
         manager.GroupEditFrameForePen = New AnnPen(System.Drawing.Color.White, New AnnLength(3, AnnUnit.Pixel))
         manager.GroupEditFrameForePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot
         manager.GroupEditObjectPen = New AnnPen(System.Drawing.Color.MediumPurple, New AnnLength(4, AnnUnit.Pixel))
      End Sub</code>
        <code lang="CS">      public void AnnAutomationManager_GroupEditObjectPen(AnnAutomationManager manager)
      {
         AnnPen back= manager.GroupEditFrameBackPen;
         AnnPen fore = manager.GroupEditFrameForePen;
         manager.GroupEditFrameBackPen = new AnnPen(System.Drawing.Color.Black, new AnnLength(3, AnnUnit.Pixel));
         manager.GroupEditFrameForePen = new AnnPen(System.Drawing.Color.White, new AnnLength(3, AnnUnit.Pixel));
         manager.GroupEditFrameForePen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;
         manager.GroupEditObjectPen = new AnnPen(System.Drawing.Color.MediumPurple, new AnnLength(4, AnnUnit.Pixel));
      }</code>
        <!--AnnAutomationManager.GroupEditObjectPen-->
      </example>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.MoveObjectWithName">
      <summary>
            Gets or sets a value indicating whether to move the object when the name moves.
            </summary>
      <isnew>2/28/2009</isnew>
      <value>
        <strong>true</strong> if the object should move when the user moves the name; otherwise, <strong>false</strong>.</value>
      <remarks>
        <para>When an <see cref="T:Leadtools.Annotations.AnnObject" /> with a visible name is being edited, the user can move the name by clicking and dragging with the mouse. This movement is independant of the object
            if the value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.MoveObjectWithName" /> is set to the default value of <strong>false</strong>. If <see cref="P:Leadtools.Annotations.AnnAutomationManager.MoveObjectWithName" /> is set to <strong>true</strong>, the object
            will move along with the name.</para>
        <para>The value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.MoveObjectWithName" /> is set in the <see cref="P:Leadtools.Annotations.AnnEditDesigner.MoveObjectWithName">AnnEditDesigner.MoveObjectWithName</see> when automation mode
            is used.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.CancelInactiveDesigners">
      <summary>
            Gets or sets a value indicating whether any designers in an <see cref="T:Leadtools.Annotations.AnnAutomation" /> is automatically canceled when the automation becomes inactive.
            </summary>
      <value>
        <strong>true</strong> to automatically cancel all designers in an <see cref="T:Leadtools.Annotations.AnnAutomation" /> when the automation becomes inactive, otherwise; <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>When multiple <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects are used in the automation, you use the <see cref="P:Leadtools.Annotations.AnnAutomation.Active">AnnAutomation.Active</see> property to set one
            of the automations as the active one. The active automation will then process all the mouse and keyboard events. The rest of the automations are in an inactive state and will
            not process any events. When an automation becomes inactive, it might have designers that are still running, for example, an edit designer selecting an object. By setting the
            value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.CancelInactiveDesigners" /> to <strong>true</strong>, you can cancel (or abort) all the designers in an inactive automation. This has the effect of causing
            all currently selected objects in the inactive automation to become de-selected.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomationManager.UseNewMultilineBehavior">
      <summary>
            Gets or sets a value that indicate whether to cancel the drawing of a multi-point object if the mouse cursor was clicked and released in the same position.
            </summary>
      <value>
        <strong>true</strong> to cancel the drawing of a multi-point object if the mouse cursor was clicked and released in the same position.
            <strong>false</strong> otherwise. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>This property is used when drawing any annotation object that derives from <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> such as
            <see cref="T:Leadtools.Annotations.AnnPolygonObject" />, <see cref="T:Leadtools.Annotations.AnnCurveObject" /> and <see cref="T:Leadtools.Annotations.AnnPolyRulerObject" />. When drawing a multi-line object, the user
            moves the mouse cursor to the desired position of the first point and clicks the left button. The user then moves to the location of the second
            point and releases the cursor to draw the second point. If the position of the two points is equal (in other words, the user clicks and releases
            the cursor over the same position) then the two points will have the same value and might not be the desired behavior.</para>
        <para>When the value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.UseNewMultilineBehavior" /> is <strong>true</strong> (the default value), then when the user clicks and releases
            the mouse cursor when drawing the first point of the polyline object, the drawing object will be canceled.</para>
        <para>When the value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.UseNewMultilineBehavior" /> is <strong>false</strong>, then when the user clicks and releases
            the mouse cursor when drawing the first point of the polyline object, a new polyline object with idnetical two points in the same position will be
            added.</para>
        <para>This property will set the value of the <see cref="P:Leadtools.Annotations.AnnDrawDesigner.UseNewMultilineBehavior">AnnDrawDesigner.UseNewMultilineBehavior</see>
            property for any drawing operation.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Annotations.AnnPen">
      <summary>
            Defines an object used to draw lines and curves for Annotation objects.
            </summary>
      <noremarks />
      <example>
        <para>This example uses an <see cref="T:Leadtools.Annotations.AnnPen" /> to draw a dotted rectangle.</para>
        <code lang="VB">      Private Sub AnnPen_AnnPen(ByVal graphics As Graphics, ByVal converter As AnnUnitConverter, ByVal rc As AnnRectangle)
         Dim annPen As AnnPen = New AnnPen(Color.Blue, New AnnLength(2, AnnUnit.Pixel))
         annPen.Alignment = PenAlignment.Center
         annPen.DashStyle = DashStyle.Dot
         Dim gdiPen As Pen = annPen.Create(converter)
         Try
            Dim rect As RectangleF = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF()
            graphics.DrawRectangle(gdiPen, rect.Left, rect.Top, rect.Width, rect.Height)
         Finally
            CType(gdiPen, IDisposable).Dispose()
         End Try
      End Sub</code>
        <code lang="CS">      private void AnnPen_AnnPen(Graphics graphics, AnnUnitConverter converter, AnnRectangle rc)
      {
         AnnPen annPen = new AnnPen(Color.Blue, new AnnLength(2, AnnUnit.Pixel));
         annPen.Alignment = PenAlignment.Center;
         annPen.DashStyle = DashStyle.Dot;
         using(Pen gdiPen = annPen.Create(converter))
         {
            RectangleF rect = rc.ConvertTo(converter, AnnUnit.Pixel).ToRectangleF();
            graphics.DrawRectangle(gdiPen, rect.Left, rect.Top, rect.Width, rect.Height);
         }
      }</code>
        <!--AnnPen.AnnPen-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnPen" /> class
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.#ctor(System.Drawing.Color,Leadtools.Annotations.AnnLength)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnPen" /> class with the specified color and width.
            </summary>
      <noremarks />
      <param name="color">A <see cref="P:Leadtools.Annotations.AnnPen.Color" /> structure that indicates the color of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</param>
      <param name="width">An <see cref="T:Leadtools.Annotations.AnnLength" /> value indicating the width of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <returns>The <see cref="T:Leadtools.Annotations.AnnPen" /> object that this method creates.</returns>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.Create(Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Creates a new GDI+ pen object using this <see cref="T:Leadtools.Annotations.AnnPen" />.
            </summary>
      <noremarks />
      <param name="converter">Specifies an <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> object to be used when converting any annotation lengths, points, etc. this pen might have.</param>
      <returns>The GDI+ <see cref="T:System.Drawing.Pen" /> object created from this <see cref="T:Leadtools.Annotations.AnnPen" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.Equals(System.Object)">
      <summary>
            Tests whether the specified object is a <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure and is equivalent to this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure.
            </summary>
      <param name="obj">The object to be used in the comparison with the current object.</param>
      <returns>This method returns true if <i>obj</i> is an <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure equivalent to this <see cref="T:Leadtools.Annotations.AnnSolidBrush" />; otherwise, false.</returns>
      <remarks>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPen.GetHashCode">
      <summary>
            Returns a hash code for this <see cref="T:Leadtools.Annotations.AnnSolidBrush" /> structure.
            </summary>
      <returns>A hash code for the current <see cref="T:Leadtools.Annotations.AnnSolidBrush" />.</returns>
      <remarks>
            For information about this method, see <see cref="M:System.Object.GetHashCode" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.Width">
      <summary>
            Gets or sets the width of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> value that represents the width of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.Alignment">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> for this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Drawing2D.PenAlignment" /> value that represents the alignment for this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.Color">
      <summary>
            Gets or sets the color of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="P:Leadtools.Annotations.AnnPen.Color" /> structure that represents the color of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.ColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="P:Leadtools.Annotations.AnnPen.Color" /> of this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.DashCap">
      <summary>
            Gets or sets the cap style used at the end of the dashes that make up dashed lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <value>
            A <see cref="T:System.Drawing.Drawing2D.DashCap" /> value that represents the  cap style used at the end of the dashes that make up dashed lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </value>
      <remarks>
        <p>Gets or sets a <see cref="T:System.Drawing.Drawing2D.DashCap" /> value that represents the cap style used at the beginning and end of the dashes that make up dashed lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</p>
        <p>Do not set this property to DashCap.Triangle if the AnnPen object has its Pen.Alignment property set to PenAlignment.Inset.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.DashOffset">
      <summary>
            Gets or sets the distance from the start of a line to the beginning of a dash pattern.
            </summary>
      <noremarks />
      <value>A single-precision floating point number that represents the distance from the start of a line to the beginning of a dash pattern. This value uses the same unit of measure as the one used as the Unit value for the Width property.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.DashStyle">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.DashStyle" /> used for dashed lines drawn with this AnnPen object.
            </summary>
      <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> value that represents the style used for dashed lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <remarks>Note that DashStyle.Custom is not supported.  If you pass DashStyle.Custom to this property, DashStyle.Solid will be used instead.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.EndCap">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap" /> style used at the end of lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Drawing2D.LineCap" /> value that represents the cap style used at the end of lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.LineJoin">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineJoin" /> style for the ends of two consecutive lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Drawing2D.LineJoin" /> value that represents the join style for the ends of two consecutive lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.MiterLimit">
      <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner. 
            </summary>
      <noremarks />
      <value>The limit of the thickness of the join on a mitered corner. This value uses the same unit of measure as the one used as the Unit value for the Width property.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPen.StartCap">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.LineCap" /> style used at the beginning of lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.
            </summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Drawing2D.LineCap" /> value that represents the cap style used at the beginning of lines drawn with this <see cref="T:Leadtools.Annotations.AnnPen" /> object.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnPen" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextRollupRunDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> to provide functionality for running an <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupRunDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnTextRollupRunDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextRollupRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" /> that contains the event data. </param>
      <remarks>For more information, refer to <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />. </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPolylineEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnPolylineEditDesigner</b> class to edit an <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> or any other object that derives from it.  For example, this designer is used to edit <see cref="T:Leadtools.Annotations.AnnPolygonObject" /> objects as well.
            </remarks>
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPolylineEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolylineEditDesigner.ShowControlPoints">
      <summary>
            Gets or sets a value that indicates whether to show the control points.
            </summary>
      <value>true to show the control points; otherwise, false.</value>
      <remarks>
            If the value of <b>ShowControlPoints</b> is set to false the <see cref="P:Leadtools.Annotations.AnnPolylineEditDesigner.ControlPointsGap" /> value will be ignored since the control points will not be shown.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolylineEditDesigner.ControlPointsGap">
      <summary>
            Gets or sets a value that indicates which control points to display.
            </summary>
      <value>
            An integer value greater than zero that indicates which control points to display. If the value is 0 all control points will be displayed.
            </value>
      <remarks>
        <p>Use 0 to display all control points. This value does not represent the distance in pixels. Instead, it refers to the number of control points to skip before displaying another control point. Possible values are:</p>
        <p>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>0</term>
              <description>Show every control point.</description>
            </item>
            <item>
              <term>1</term>
              <description>Show a control point, skip a control point, show a control point ...</description>
            </item>
            <item>
              <term>.</term>
              <description>...</description>
            </item>
            <item>
              <term>.</term>
              <description>...</description>
            </item>
            <item>
              <term>.</term>
              <description>...</description>
            </item>
            <item>
              <term>9</term>
              <description>Show a control point, skip the next nine ...</description>
            </item>
            <item>
              <term>.</term>
              <description>...</description>
            </item>
          </list>
        </p>
        <p>... and so on.</p>
        <p>Note: The last control point is always shown. Therefore, using a large value for <b>ControlPointsGap</b> will probably result in only the first and last control points being shown.</p>
        <p>Note: If the value of <see cref="P:Leadtools.Annotations.AnnPolylineEditDesigner.ShowControlPoints" /> is set to false the <b>ControlPointsGap</b> value will be ignored since the control points will not be shown.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnPolylineEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnPolylineEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnDottedEllipseControlPoint">
      <summary>
            Represents an ellipse-shaped <see cref="T:Leadtools.Annotations.AnnControlPoint" /> with a dot in the center.
            </summary>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Leadtools.Annotations.AnnDottedEllipseControlPoint" /> object.
            </summary>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.Create">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDottedEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnEllipseControlPoint.Create" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.Clone">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDottedEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnEllipseControlPoint.Clone" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnDottedEllipseControlPoint.Draw(System.Drawing.Graphics,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnDottedEllipseControlPoint" /> implementation of <see cref="M:Leadtools.Annotations.AnnControlPoint.Draw(System.Drawing.Graphics,Leadtools.Annotations.AnnPoint,Leadtools.Annotations.AnnUnitConverter)" />.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnControlPoint" />.</param>
      <param name="centerPoint">The center point</param>
      <param name="converter">An <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> used to convert <i>centerPoint</i> to pixel coordinates.</param>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnPointDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnPointObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnPointDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnPointDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnPointDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextPointerEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRectangleEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnTextPointerObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnTextPointerEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRectangleEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextPointerEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRectangleEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextPointerEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnTextPointerEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnRectangleEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnTextPointerEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnRectangleEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnLineEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnLineObject" /> on an annotation container.
            </summary>
      <remarks>
            You can use the <b>AnnLineEditDesigner</b> class to edit an <see cref="T:Leadtools.Annotations.AnnLineObject" /> or any other object that derives from it.  For example, this designer is used to edit <see cref="T:Leadtools.Annotations.AnnRulerObject" /> objects as well.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnLineEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnLineEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnLineEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnFreehandDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing a freehand <see cref="T:Leadtools.Annotations.AnnPolylineObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
        <para>
          <para>For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.</para>
            This example initializes a new designer to draw freehand polylines with spaces set to 2</para>
        <code lang="VB">      Public Function AnnFreehandDrawDesigner_AnnFreehandDrawDesigner(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer) As AnnFreehandDrawDesigner
         ' start a new freehand draw designer
         Dim freehandDrawDesigner As AnnFreehandDrawDesigner = New AnnFreehandDrawDesigner()
         ' set up the object template (a 2 pixels-wide polyline)
         Dim polylineObject As AnnPolylineObject = New AnnPolylineObject()
         polylineObject.Pen = New AnnPen(Color.Red, New AnnLength(2, AnnUnit.Pixel))

         ' set up the spacing of the freehand designer
         freehandDrawDesigner.Spacing = 2

         ' initialize the rest of the designer
         freehandDrawDesigner.ObjectTemplate = polylineObject
         freehandDrawDesigner.Owner = viewer
         freehandDrawDesigner.ClipCursor = True
         freehandDrawDesigner.Container = container

         Return freehandDrawDesigner
      End Function</code>
        <code lang="CS">      public AnnFreehandDrawDesigner AnnFreehandDrawDesigner_AnnFreehandDrawDesigner(RasterImageViewer viewer, AnnContainer container)
      {
         // start a new freehand draw designer
         AnnFreehandDrawDesigner freehandDrawDesigner = new AnnFreehandDrawDesigner();
         // set up the object template (a 2 pixels-wide polyline)
         AnnPolylineObject polylineObject = new AnnPolylineObject();
         polylineObject.Pen = new AnnPen(Color.Red, new AnnLength(2, AnnUnit.Pixel));

         // set up the spacing of the freehand designer
         freehandDrawDesigner.Spacing = 2;

         // initialize the rest of the designer
         freehandDrawDesigner.ObjectTemplate = polylineObject;
         freehandDrawDesigner.Owner = viewer;
         freehandDrawDesigner.ClipCursor = true;
         freehandDrawDesigner.Container = container;

         return freehandDrawDesigner;
      }</code>
        <!--AnnFreehandDrawDesigner.AnnFreehandDrawDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnFreehandDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnFreehandDrawDesigner.Spacing">
      <summary>
            Gets or sets the spacing value: the distance between any two points in the free-hand drawing.
            </summary>
      <noremarks />
      <value>The distance, in pixels, between any two points in the free-hand drawing.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnFreehandDrawDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCodecsInformation">
      <summary>
            Provides information on an annotation file or stream.
            </summary>
      <remarks>
        <p>You can use the <see cref="M:Leadtools.Annotations.AnnCodecs.GetInformation(System.String,Leadtools.Annotations.AnnCodecsInformation)" /> method to return an instance of this class that holds information on a certain annotation file or stream.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCodecsInformation.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnCodecsInformation" /> class.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnCodecsInformation.Format">
      <summary>
            Gets or sets the format of the annotation file or stream.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnCodecsFormat" /> value that specifies the format of the annotation file or stream.</value>
      <remarks>
            Possible values are:
            <list type="table"><listheader><term>Format</term><description>Description</description></listheader><item><term><b>AnnCodecsFormat.Unknown</b></term><description>Unknown (invalid) format.  LEADTOOLS for .NET will not be able to load this file or stream.  The <see cref="P:Leadtools.Annotations.AnnCodecsInformation.Pages" /> value will always be 0.</description></item><item><term><b>AnnCodecsFormat.Serialize</b></term><description>.NET Serialize format.  (not compatible with LEADTOOLS Win32 annotations). </description></item><item><term><b>AnnCodecsFormat.Native</b></term><description>Native format.  LEADTOOLS for .NET should be able to load this file or stream. <b>Note: </b>This format has been replaced by AnnCodecsFormat.Xml, and is no longer supported.</description></item><item><term><b>AnnCodecsFormat.Wmf</b></term><description>Windows WMF format.  (LEADTOOLS Win32 compatible). Note that this format is Save only. LEADTOOLS for .NET annotations library will not load or get information for a WMF file. </description></item><item><term><b>AnnCodecsFormat.Emf</b></term><description>Windows EMF format.  (LEADTOOLS Win32 compatible). Note that this format is Save only. LEADTOOLS for .NET annotations library will not load or get information for a EMF file. </description></item><item><term><b>AnnCodecsFormat.Encoded</b></term><description>A binary format.  <b>Note: </b>This format has been replaced by AnnCodecsFormat.Xml, and is no longer supported.</description></item><item><term><b>AnnCodecsFormat.Xml</b></term><description>Format is XML. This is a text-based format for storing LEAD annotations that follows the XML (Extensible Markup Language) format. This is upward compatible and LEADTOOLS Win32 compatible. For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCodecsInformation.Pages">
      <summary>
            Gets or sets the number of pages in the annotation file or stream.
            </summary>
      <noremarks />
      <value>An integer value that specifies the number of pages in the annotation file or stream.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCodecs" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCodecsInformation.Offset">
      <summary>
            Gets or sets the position of the first byte to load.
            </summary>
      <value>
            An integer value that specifies the position of the first byte to load.
            </value>
      <remarks>
            This must be set before passing this class to the LEAD functions. Typically, this is set to 0.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnCodecsInformation.Version">
      <summary>
            Gets or sets the version of the annotation file.
            </summary>
      <value>
            An integer value that specifies the version of the annotation file.
            </value>
      <remarks>
            If '12' is returned, this refers to version 12 or earlier.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.Annotations.AnnClosedCurveObject">
      <summary>
             Defines a closed annotation curve object.
             </summary>
      <remarks>
             The closed curve object is a spline curve that contains a collection of <see cref="T:Leadtools.Annotations.AnnPoint" /> points, a pen, a brush and a tension value.  The curve can be <see cref="P:Leadtools.Annotations.AnnPolygonObject.Closed" /> or not, and can also have a certain <see cref="P:Leadtools.Annotations.AnnPolygonObject.FillMode" />.
             <para>
             For more information about the closed curve annotation object refer to 
             <see cref="T:AN.Topics.AnnClosedCurveObject">AnnClosedCurveObject</see>. 
             For more information about the automated closed curve annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para></remarks>
      <example>
        <para>This example creates a new closed curve object with 4 points.</para>
        <code lang="VB">      Private Sub AnnClosedCurveObject_AnnClosedCurveObject(ByVal container As AnnContainer)
         Dim closedCurve As AnnClosedCurveObject = New AnnClosedCurveObject()
         closedCurve.Points.Add(New AnnPoint(100, 100, AnnUnit.Pixel))
         closedCurve.Points.Add(New AnnPoint(200, 100, AnnUnit.Pixel))
         closedCurve.Points.Add(New AnnPoint(200, 200, AnnUnit.Pixel))
         closedCurve.Points.Add(New AnnPoint(100, 300, AnnUnit.Pixel))
         closedCurve.Tension = 1
         closedCurve.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         closedCurve.Brush = New AnnSolidBrush(Color.White)
         closedCurve.FillMode = FillMode.Alternate
         closedCurve.Closed = True
         container.Objects.Add(closedCurve)
      End Sub</code>
        <code lang="CS">      private void AnnClosedCurveObject_AnnClosedCurveObject(AnnContainer container)
      {
         AnnClosedCurveObject closedCurve = new AnnClosedCurveObject();
         closedCurve.Points.Add(new AnnPoint(100, 100, AnnUnit.Pixel));
         closedCurve.Points.Add(new AnnPoint(200, 100, AnnUnit.Pixel));
         closedCurve.Points.Add(new AnnPoint(200, 200, AnnUnit.Pixel));
         closedCurve.Points.Add(new AnnPoint(100, 300, AnnUnit.Pixel));
         closedCurve.Tension = 1;
         closedCurve.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         closedCurve.Brush = new AnnSolidBrush(Color.White);
         closedCurve.FillMode = FillMode.Alternate;
         closedCurve.Closed = true;
         container.Objects.Add(closedCurve);
      }</code>
        <!--AnnClosedCurveObject.AnnClosedCurveObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnClosedCurveObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies the path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> object will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="P:Leadtools.Annotations.AnnClosedCurveObject.Tension">
      <summary>
            Gets or sets a value that specifies the amount that this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> curve bends between control points.
            </summary>
      <value>A value that specifies the amount that this <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" /> curve bends between control points.</value>
      <remarks>
            Valid values are between 0.0 and 1.0, where 0.0 indicates straight lines, and 1.0 indicates lines with the highest curvature. A typical value is 0.5. These values for Tension for a Closed Curve object are shown in the following bitmap:
            <img src="TensiondotNET.jpg"></img></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnClosedCurveObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnClosedCurveObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnAudioRunDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> to provide functionality for running an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioRunDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnAudioRunDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnRunDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAudioRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnAudioRunDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnRunDesignerEventArgs" /> that contains the event data. </param>
      <remarks>For more information, refer to <see cref="M:Leadtools.Annotations.AnnRunDesigner.OnRun(Leadtools.Annotations.AnnRunDesignerEventArgs)" />. </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnGroupEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnGroupEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <remarks>
            This method is called when the user clicks and drags one of the <see cref="T:Leadtools.Annotations.AnnControlPoint" /> of this <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Derived classes should override this method and provide the necessary functionality to update the edited object coordinates.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupEditDesigner.ProportionalScaling">
      <summary>
            Gets or sets a value indicating whether to use proportional scaling.
            </summary>
      <value>true if proportional scaling is used; otherwise false.</value>
      <remarks>
            When the value of this property is true, clicking and dragging on a control point of this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will scale the objects inside the group in a proportional manner; the maximum of the horizontal and vertical scaling is calculated and is used as the scale factor value.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnGroupEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <noremarks />
      <value>
        <see cref="T:Leadtools.Annotations.AnnGroupEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCrossProductEditDesigner">
      <summary>
            This class extends <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> to provide functionality for editing an <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductEditDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductEditDesigner.GetControlPointsLocation">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.GetControlPointsLocation" />.
            </summary>
      <remarks>(Read only) </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.MoveControlPoint(System.Int32,Leadtools.Annotations.AnnPoint)" />.
            </summary>
      <noremarks />
      <param name="controlPointIndex">An integer that represents the index of the control point to move. </param>
      <param name="pt">An <see cref="T:Leadtools.Annotations.AnnPoint" />structure that represents the new position of the control point.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductEditDesigner.Move(Leadtools.Annotations.AnnSize)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnEditDesigner.Move(Leadtools.Annotations.AnnSize)" />.
            </summary>
      <noremarks />
      <param name="size">An <see cref="T:Leadtools.Annotations.AnnSize" /> structure that represents the offset to be used when moving the object.</param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductEditDesigner.ControlPointCount">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </summary>
      <value>
        <see cref="T:Leadtools.Annotations.AnnCrossProductEditDesigner" /> implementation of <see cref="P:Leadtools.Annotations.AnnEditDesigner.ControlPointCount" />.
            </value>
      <remarks>(Read only) </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnProtractorObject">
      <summary>
             Defines an annotation protractor object.
             </summary>
      <remarks>
             The protractor annotation object consists of two rulers joined at a point to create an angle.  The center point is <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, the first line ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and the second point ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" />.<br />
             For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see><para>
             For more information about the protractor annotation object refer to 
             <see cref="T:AN.Topics.AnnProtractorObject">AnnProtractorObject</see>. 
             For more information about the automated protractor clip annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
              and 
             <see cref="T:AN.Topics.AutomatedAnnotationsProtractorTab">Automated Annotations - Protractor Tab</see>. 
             </para></remarks>
      <example>
        <para>This example creates a new protractor object.</para>
        <code lang="VB">      Private Sub AnnProtractorObject_AnnProtractorObject(ByVal container As AnnContainer)
         Dim protractor As AnnProtractorObject = New AnnProtractorObject()
         protractor.Pen = New AnnPen(Color.Green, New AnnLength(3))
         protractor.CenterPoint = New AnnPoint(10.0F, 4.5F, AnnUnit.Inch)
         protractor.FirstPoint = New AnnPoint(5.0F, 20.0F, AnnUnit.Inch)
         protractor.SecondPoint = New AnnPoint(20.56F, 40.3F, AnnUnit.Inch)
         protractor.MeasurementUnit = AnnUnit.SmartEnglish
         protractor.TickMarksLength = New AnnLength(0.5F, AnnUnit.Inch)
         protractor.ShowTickMarks = True
         protractor.GaugeLength = New AnnLength(1.0F, AnnUnit.Inch)
         protractor.ShowGauge = True
         protractor.ShowLength = True
         protractor.Precision = 2
         protractor.AngularUnit = AnnAngularUnit.Degree
         protractor.Acute = True
         protractor.AnglePrecision = 2
         protractor.ArcRadius = New AnnLength(0.5F, AnnUnit.Inch)
         container.Objects.Add(protractor)
      End Sub</code>
        <code lang="CS">      private void AnnProtractorObject_AnnProtractorObject(AnnContainer container)
      {
         AnnProtractorObject protractor = new AnnProtractorObject();
         protractor.Pen = new AnnPen(Color.Green, new AnnLength(3));
         protractor.CenterPoint = new AnnPoint(10.0F, 4.5F, AnnUnit.Inch);
         protractor.FirstPoint = new AnnPoint(5.0F, 20.0F, AnnUnit.Inch);
         protractor.SecondPoint = new AnnPoint(20.56F, 40.3F, AnnUnit.Inch);
         protractor.MeasurementUnit = AnnUnit.SmartEnglish;
         protractor.TickMarksLength = new AnnLength(0.5F, AnnUnit.Inch);
         protractor.ShowTickMarks = true;
         protractor.GaugeLength = new AnnLength(1.0F, AnnUnit.Inch);
         protractor.ShowGauge = true;
         protractor.ShowLength = true;
         protractor.Precision = 2;
         protractor.AngularUnit = AnnAngularUnit.Degree;
         protractor.Acute = true;
         protractor.AnglePrecision = 2;
         protractor.ArcRadius = new AnnLength(0.5F, AnnUnit.Inch);
         container.Objects.Add(protractor);
      }</code>
        <!--AnnProtractorObject.AnnProtractorObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that want to extend the functionality of the <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value which specifies which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> class overrides this member to return an array of 3 points, the <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" /> to be transformed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value to specify which transformation method was called.</param>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> class overrides this member to copy the new transformed values to the <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" /> values.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.ResetRotatePoints">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.RulerImplemented">
      <summary>
            Gets a value to determine whether this object implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  
            This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include a ruler must 
            implement this property to always return true.
            </summary>
      <value>This property will always return true for <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>(Read only)<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.MeasurementUnit">
      <summary>
            Gets or sets the unit of measure for the rulers of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnProtractorObject.MeasurementUnit" /> value.
            </summary>
      <value>A string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnProtractorObject.MeasurementUnit" /> value.</value>
      <remarks>
            The <b>UnitAbbreviation</b> member resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.AnnProtractorObject.MeasurementUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.AnnProtractorObject.MeasurementUnit" /> property.  
            The default abbreviation value is obtained by calling the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)" /> method.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.TickMarksLength">
      <summary>
            Gets or sets the length  of the tick marks for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>A <see cref="T:Leadtools.Annotations.AnnLength" /> value that specifies the current length of the tick marks for the rulers of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> are visible.
            </summary>
      <value>true if the tick marks for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> are visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the protractor rulers) for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>A <see cref="T:Leadtools.Annotations.AnnLength" /> structure that specifies the length of the gauge (the perpendicular lines at the ends of the protractor rulers) for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the protractor rulers) for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> is visible.
            </summary>
      <value>true if the gauge (the perpendicular lines at the ends of the protractor rulers) for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> is visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ShowLength">
      <summary>
            Enables or disables the display of text showing the length of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>true to display text showing the length of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.Precision">
      <summary>
            Gets or sets the precision value used for the length of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>The precision value used for the length of the protractor rulers.</value>
      <remarks>
            The precision value is the number of digits that should appear to the right of the floating point when showing this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> length.  For example, if the protractor ruler's length is 135.683 and the precision is 2, the value 135.68 will be displayed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint">
      <summary>
            Gets or sets the value for the center point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the center point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> consists of two rulers joined at a point to create an angle.  The center point is <b>CenterPoint</b>, the first line ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and the second line ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint">
      <summary>
            Gets or sets the value for the first point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the first point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object consists of two rulers joined at a point to create an angle.  The center point is <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, the first line ends at <b>FirstPoint</b> and the second line ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint">
      <summary>
            Gets or sets the value for the second point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the second point of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> consists of two rulers joined at a point to create an angle.  The center point is <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, the first line ends at <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and the second line ends at <b>SecondPoint</b>.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ProtractorImplemented">
      <summary>
            Gets a value to determine whether this object implements the <see cref="T:Leadtools.Annotations.IAnnProtractorObject" /> interface.  
            This is used internally by the annotation framework. 
            User-defined classes that are derived from the AnnObject class and include a protractor should 
            implement this property to always return true.
            </summary>
      <value>This property will always return true for <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>(Read only)<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.Acute">
      <summary>
            Gets or sets a value that indicates whether to mark the inside (acute) or outside (obtuse) angle for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object.
            </summary>
      <value>true if the inside (acute) angle is to be marked; otherwise, false.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit">
      <summary>
            Gets or sets the angular unit of the angle of this protractor.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnAngularUnit" /> value that specifies the unit of the angle of this protractor.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.AngularUnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit" /> value.
            </summary>
      <value>A string value that specifies the abbreviation used with the <see cref="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit" /> value.</value>
      <remarks>
            The <b>AngularUnitAbbreviation</b> property resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit" /> property.  
            The default abbreviation value is obtained by calling the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetAngularUnitAbbreviation(Leadtools.Annotations.AnnAngularUnit)" /> method.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ShowAngle">
      <summary>
            Gets or sets a value indicating whether the angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> is visible.
            </summary>
      <value>true if the angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> is visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.AnglePrecision">
      <summary>
            Gets or sets the precision value used for the angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>The precision value used for the angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            The precision value is the number of digits that should appear to the right of the floating point when showing this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> angle.  For example, if the angle is 135.683 degrees and the precision is 2, the value 135.68 will be displayed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ArcRadius">
      <summary>
            Gets or sets the arc radius of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>The arc radius of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            The center of the arc is <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" /> for this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that specifies how to transform this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> when any object transformation method is called.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> class overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  This and the <see cref="M:Leadtools.Annotations.AnnProtractorObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> and <see cref="M:Leadtools.Annotations.AnnProtractorObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> methods ensure that the protractor object physically transforms the <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />, <see cref="P:Leadtools.Annotations.AnnProtractorObject.FirstPoint" /> and <see cref="P:Leadtools.Annotations.AnnProtractorObject.SecondPoint" /> values whenever the protractor object is transformed.  This ensures correct values for the protractor angle at all times.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> class overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true. <br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> class overrides this member to return the logical bounding rectangle of the protractor.  This bounding rectangle contains the two rulers, the gauge, the tick marks, and the angular unit of measure, if visible.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.ProtractorAngle">
      <summary>
            Gets the angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object.
            </summary>
      <value>The angle of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object.</value>
      <remarks>
            The angle is returned in <see cref="P:Leadtools.Annotations.AnnProtractorObject.AngularUnit" /> units.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingProtractorsInAnnotationObjects">Using Protractors in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.Origin">
      <summary>
            Gets the logical origin of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </summary>
      <value>The logical origin of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.</value>
      <remarks>
            (Read only) This method returns the logical origin of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.  The <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object overrides this value to return the coordinates of the <see cref="P:Leadtools.Annotations.AnnProtractorObject.CenterPoint" />.  You can use this origin to <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" /> or <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" /> this object around itself.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.annRulerInternal">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnProtractorObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the text representing the length of this <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the text representing the length to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>To show the length of a ruler, use <see cref="P:Leadtools.Annotations.AnnProtractorObject.ShowLength" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnProtractorObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnHotspotObject">
      <summary>
             Defines an annotation hot spot object.
             </summary>
      <remarks>
             The hot spot annotation object is designed to work as a scaled picture inside a rectangle.  The hot spot object will draw the picture if the owner container that is in design mode.  If the container is in run mode, the hot spot object will not draw the picture.
             <p>The <b>AnnHotspotObject</b> class inherits the <see cref="T:Leadtools.Annotations.AnnImageObject" /> class and accesses the common <see cref="P:Leadtools.Annotations.AnnImageObject.Picture" /> property mentioned above through this inheritance.</p>
             For more information about the hotspot annotation object refer to 
             <see cref="T:AN.Topics.AnnHotspotObject">AnnHotspotObject</see>. 
             For more information about the automated hotspot annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>
              and 
             <see cref="T:AN.Topics.AutomatedAnnotationsHotspotPictureTab">Automated Annotations - Hotspot Picture Tab</see>. 
             </remarks>
      <example>
        <para>This example creates a hotspot object.</para>
        <code lang="VB">      Private Sub AnnHotspotObject_AnnHotspotObject(ByVal container As AnnContainer)
         Dim hotspot As AnnHotspotObject = New AnnHotspotObject()
         hotspot.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(hotspot)
      End Sub</code>
        <code lang="CS">      private void AnnHotspotObject_AnnHotspotObject(AnnContainer container)
   {
      AnnHotspotObject hotspot = new AnnHotspotObject();
      hotspot.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
      container.Objects.Add(hotspot);
   }</code>
        <!--AnnHotspotObject.AnnHotspotObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHotspotObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHotspotObject.Picture">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnPicture" /> object associated with this <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.</value>
      <remarks>
            If you set an empty <see cref="T:Leadtools.Annotations.AnnPicture" /> (a picture that has its <see cref="P:Leadtools.Annotations.AnnPicture.Image" /> value set to null (or Nothing in Visual Basic), this <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> will use the picture defined in <see cref="P:Leadtools.Annotations.AnnHotspotObject.DefaultPicture" />.
            <p>For more information, refer to <see cref="T:AN.Topics.UsingPicturesInAnnotationObjects">Using Pictures in Annotation Objects</see></p></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHotspotObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.
            </summary>
      <value>true if hit-testing should be performed inside the interior of this <see cref="T:Leadtools.Annotations.AnnHotspotObject" />; false otherwise.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true if this <see cref="P:Leadtools.Annotations.AnnHotspotObject.Picture" /> property has a valid image.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHotspotObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHotspotObject.DefaultPicture">
      <summary>
            Gets or sets the default picture used by all <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> objects.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPicture" /> class that defines the picture used by the <see cref="T:Leadtools.Annotations.AnnHotspotObject" />.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnHotspotObject.UseOriginalPicture" /> to revert back to the original picture.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" /></example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHotspotObject.UseOriginalPicture">
      <summary>
            Gets or sets a value indicating whether to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> objects.
            </summary>
      <value>true to revert back to the original picture used for all <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> objects; otherwise, false to use the new picture if any.</value>
      <remarks>
            Use <see cref="P:Leadtools.Annotations.AnnHotspotObject.DefaultPicture" /> to get or set the current default picture used by the <see cref="T:Leadtools.Annotations.AnnHotspotObject" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAudioObject.DefaultPicture" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnHiliteObject">
      <summary>
             Defines an annotation hilite object.
             </summary>
      <remarks>
        <para>The hilite annotation object is a simple rectangle that has a bounding 
             rectangle, no pen and no brush.  Although it does not have a pen or brush, 
             it does have a color value that is used to fill this bounding area. 
             By default the hilite object uses a yellow color.</para>
        <para>
             For more information about the highlight annotation object refer to 
             <see cref="T:AN.Topics.AnnHiliteObject">AnnHiliteObject</see>. 
             For more information about the automated highlight annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a hilite object.</para>
        <code lang="VB">      Private Sub AnnHiliteObject_AnnHiliteObject(ByVal container As AnnContainer)
         Dim hilite As AnnHiliteObject = New AnnHiliteObject()
         hilite.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         hilite.HiliteColor = Color.Yellow
         container.Objects.Add(hilite)
      End Sub</code>
        <code lang="CS">      private void AnnHiliteObject_AnnHiliteObject(AnnContainer container)
      {
         AnnHiliteObject hilite = new AnnHiliteObject();
         hilite.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         hilite.HiliteColor = Color.Yellow;
         container.Objects.Add(hilite);
      }</code>
        <!--AnnHiliteObject.AnnHiliteObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object that this method creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnHiliteObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHiliteObject.HiliteColor">
      <summary>
            Gets or sets a value indicating the color to be used to fill this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /></summary>
      <noremarks />
      <value>A <see cref="T:System.Drawing.Color" /> value indicating the color to be used to fill this <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHiliteObject.HiliteColorXml">
      <summary>
            Used internally by the LEADTOOLS framework.
            </summary>
      <value>A string representing the <see cref="T:System.Drawing.Color" /> to be used to fill this <see cref="T:Leadtools.Annotations.AnnHiliteObject" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.Annotations.AnnHiliteObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnHiliteObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> object; false otherwise.</value>
      <remarks>
            This <see cref="T:Leadtools.Annotations.AnnHiliteObject" /> property overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTransformer">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnTransformer" /> class is an Annotation support class which provides functionality for converting annotation points, rectangles, lengths, etc. from one coordinate system to another.
            </summary>
      <remarks>This class derives from the <see cref="T:Leadtools.Drawing.Transformer" /> class and provides extra functionality to deal with annotation-specific objects.  The units of measure are taken into consideration and transformed objects retain the same units as the originals.</remarks>
      <example>
        <para>This example converts an annotation's point, length, size and rectangle from one unit of measure to another.</para>
        <code lang="VB">      Public Sub AnnTransformer_AnnTransformer()
         ' set up a new unit converter with 96 DPI
         Dim converter As AnnUnitConverter = New AnnUnitConverter(96, 96)
         ' set up a new matrix, scale it by 2,2 around the origin
         Dim transform As Matrix = New Matrix()
         transform.Scale(2, 2)

         ' set up the AnnTransformer
         Dim transformer As AnnTransformer = New AnnTransformer(converter, transform)

         ' declare a new AnnPoint at 4, 5 inches
         ' transform it to physical coordinate using the transformer and show it in pixels
         ' then transform it back to its original logical coordinates
         Console.WriteLine("Point{0}--------", Environment.NewLine)

         Dim pt1 As AnnPoint = New AnnPoint(4, 5, AnnUnit.Inch)
         PrintOut(converter, "  Original: ", pt1)

         Dim pt2 As AnnPoint = transformer.PointToPhysical(pt1)
         PrintOut(converter, "  Physical: ", pt2)

         Dim pt3 As AnnPoint = transformer.PointToLogical(pt2)
         PrintOut(converter, "  Logical : ", pt3)

         ' declare an array of AnnPoints, do the same
         Console.WriteLine("Points{0}--------", Environment.NewLine)

         Dim pts1() As AnnPoint = _
      { _
         New AnnPoint(4, 5, AnnUnit.Inch), _
         New AnnPoint(5.2F, 3, AnnUnit.Inch), _
         New AnnPoint(2, 7.83F, AnnUnit.Inch) _
      }


         PrintOut(converter, "  Original: ", pts1)

         Dim pts2 As AnnPoint() = transformer.PointToPhysical(pts1)
         PrintOut(converter, "  Physical: ", pts2)

         Dim pts3 As AnnPoint() = transformer.PointToLogical(pts2)
         PrintOut(converter, "  Logical : ", pts3)

         ' declare a rectangle, do the same
         Console.WriteLine("Rectangle{0}--------", Environment.NewLine)

         Dim rc1 As AnnRectangle = New AnnRectangle(2, 3, 4, 1, AnnUnit.Inch)
         PrintOut(converter, "  Original: ", rc1)

         Dim rc2 As AnnRectangle = transformer.RectangleToPhysical(rc1)
         PrintOut(converter, "  Physical: ", rc2)

         Dim rc3 As AnnRectangle = transformer.RectangleToLogical(rc2)
         PrintOut(converter, "  Logical : ", rc3)

         ' declare a length, do the same
         Console.WriteLine("Length{0}--------", Environment.NewLine)

         Dim l1 As AnnLength = New AnnLength(10.5F, AnnUnit.Inch)
         PrintOut(converter, "  Original: ", l1)

         Dim l2 As AnnLength = transformer.LengthToPhysical(l1)
         PrintOut(converter, "  Physical: ", l2)

         Dim l3 As AnnLength = transformer.LengthToLogical(l2)
         PrintOut(converter, "  Logical : ", l3)

         transform.Dispose()
      End Sub

      Private Sub PrintOut(ByVal converter As AnnUnitConverter, ByVal text As String, ByVal pt As AnnPoint)
         Console.WriteLine("{0}{1}({2})", text, pt.ConvertTo(converter, AnnUnit.Inch), pt.ConvertTo(converter, AnnUnit.Pixel))
      End Sub

      Private Sub PrintOut(ByVal converter As AnnUnitConverter, ByVal text As String, ByVal pts As AnnPoint())
         Console.WriteLine(text)

         Dim i As Integer = 0
         Do While i &lt; pts.Length
            Console.WriteLine("    {0}. {1}({2})", i, pts(i).ConvertTo(converter, AnnUnit.Inch), pts(i).ConvertTo(converter, AnnUnit.Pixel))
            i += 1
         Loop
      End Sub

      Private Sub PrintOut(ByVal converter As AnnUnitConverter, ByVal text As String, ByVal rc As AnnRectangle)
         Console.WriteLine("{0}{1}({2})", text, rc.ConvertTo(converter, AnnUnit.Inch), rc.ConvertTo(converter, AnnUnit.Pixel))
      End Sub

      Private Sub PrintOut(ByVal converter As AnnUnitConverter, ByVal text As String, ByVal ln As AnnLength)
         Console.WriteLine("{0}{1}({2})", text, New AnnLength(ln.Converted(converter, AnnUnit.Inch), AnnUnit.Inch), New AnnLength(ln.Converted(converter, AnnUnit.Pixel), AnnUnit.Pixel))
      End Sub</code>
        <code lang="CS">      public void AnnTransformer_AnnTransformer()
      {
         // set up a new unit converter with 96 DPI
         AnnUnitConverter converter = new AnnUnitConverter(96, 96);
         // set up a new matrix, scale it by 2,2 around the origin
         Matrix transform = new Matrix();
         transform.Scale(2, 2);

         // set up the AnnTransformer
         AnnTransformer transformer = new AnnTransformer(converter, transform);

         // declare a new AnnPoint at 4, 5 inches
         // transform it to physical coordinate using the transformer and show it in pixels
         // then transform it back to its original logical coordinates
         Console.WriteLine("Point{0}--------", Environment.NewLine);

         AnnPoint pt1 = new AnnPoint(4, 5, AnnUnit.Inch);
         PrintOut(converter, "  Original: ", pt1);

         AnnPoint pt2 = transformer.PointToPhysical(pt1);
         PrintOut(converter, "  Physical: ", pt2);

         AnnPoint pt3 = transformer.PointToLogical(pt2);
         PrintOut(converter, "  Logical : ", pt3);

         // declare an array of AnnPoints, do the same
         Console.WriteLine("Points{0}--------", Environment.NewLine);

         AnnPoint[] pts1 =
      {
         new AnnPoint(4, 5, AnnUnit.Inch),
         new AnnPoint(5.2f, 3, AnnUnit.Inch),
         new AnnPoint(2, 7.83f, AnnUnit.Inch),
      };

         PrintOut(converter, "  Original: ", pts1);

         AnnPoint[] pts2 = transformer.PointToPhysical(pts1);
         PrintOut(converter, "  Physical: ", pts2);

         AnnPoint[] pts3 = transformer.PointToLogical(pts2);
         PrintOut(converter, "  Logical : ", pts3);

         // declare a rectangle, do the same
         Console.WriteLine("Rectangle{0}--------", Environment.NewLine);

         AnnRectangle rc1 = new AnnRectangle(2, 3, 4, 1, AnnUnit.Inch);
         PrintOut(converter, "  Original: ", rc1);

         AnnRectangle rc2 = transformer.RectangleToPhysical(rc1);
         PrintOut(converter, "  Physical: ", rc2);

         AnnRectangle rc3 = transformer.RectangleToLogical(rc2);
         PrintOut(converter, "  Logical : ", rc3);

         // declare a length, do the same
         Console.WriteLine("Length{0}--------", Environment.NewLine);

         AnnLength l1 = new AnnLength(10.5f, AnnUnit.Inch);
         PrintOut(converter, "  Original: ", l1);

         AnnLength l2 = transformer.LengthToPhysical(l1);
         PrintOut(converter, "  Physical: ", l2);

         AnnLength l3 = transformer.LengthToLogical(l2);
         PrintOut(converter, "  Logical : ", l3);

         transform.Dispose();
      }

      private void PrintOut(AnnUnitConverter converter, string text, AnnPoint pt)
      {
         Console.WriteLine("{0}{1}({2})",
            text,
            pt.ConvertTo(converter, AnnUnit.Inch),
            pt.ConvertTo(converter, AnnUnit.Pixel));
      }

      private void PrintOut(AnnUnitConverter converter, string text, AnnPoint[] pts)
      {
         Console.WriteLine(text);

         for(int i = 0; i &lt; pts.Length; i++)
         {
            Console.WriteLine("    {0}. {1}({2})",
               i,
               pts[i].ConvertTo(converter, AnnUnit.Inch),
               pts[i].ConvertTo(converter, AnnUnit.Pixel));
         }
      }

      private void PrintOut(AnnUnitConverter converter, string text, AnnRectangle rc)
      {
         Console.WriteLine("{0}{1}({2})",
            text,
            rc.ConvertTo(converter, AnnUnit.Inch),
            rc.ConvertTo(converter, AnnUnit.Pixel));
      }

      private void PrintOut(AnnUnitConverter converter, string text, AnnLength ln)
      {
         Console.WriteLine("{0}{1}({2})",
            text,
            new AnnLength(ln.Converted(converter, AnnUnit.Inch), AnnUnit.Inch),
            new AnnLength(ln.Converted(converter, AnnUnit.Pixel), AnnUnit.Pixel));
      }</code>
        <!--AnnTransformer.AnnTransformer-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.#ctor(Leadtools.Annotations.AnnUnitConverter)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnTransformer" /> class.
            </summary>
      <noremarks />
      <param name="unitConverter">The AnnUnitConverter to be used within this object.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.#ctor(Leadtools.Annotations.AnnUnitConverter,System.Drawing.Drawing2D.Matrix)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnTransformer" /> class.
            </summary>
      <noremarks />
      <param name="unitConverter">The AnnUnitConverter to be used within this object.</param>
      <param name="transform">The transform matrix.</param>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.PointToLogical(Leadtools.Annotations.AnnPoint[])">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnPoint" /> array from physical to logical coordinate.
            </summary>
      <param name="pts">The <see cref="T:Leadtools.Annotations.AnnPoint" /> array to be converted.</param>
      <returns>The converted (logical) <see cref="T:Leadtools.Annotations.AnnPoint" /> array.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <noremarks />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.PointToPhysical(Leadtools.Annotations.AnnPoint[])">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnPoint" /> array from logical to physical coordinate.
            </summary>
      <param name="pts">The <see cref="T:Leadtools.Annotations.AnnPoint" /> array to be converted.</param>
      <returns>The converted (physical) <see cref="T:Leadtools.Annotations.AnnPoint" /> array.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <noremarks />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.PointToLogical(Leadtools.Annotations.AnnPoint)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnPoint" /> from physical to logical coordinates.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be converted.</param>
      <returns>The converted (logical) <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.PointToPhysical(Leadtools.Annotations.AnnPoint)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnPoint" /> from logical to physical coordinates.
            </summary>
      <noremarks />
      <param name="pt">The <see cref="T:Leadtools.Annotations.AnnPoint" /> to be converted.</param>
      <returns>The converted (physical) <see cref="T:Leadtools.Annotations.AnnPoint" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.RectangleToLogical(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnRectangle" /> from physical to logical coordinates.
            </summary>
      <noremarks />
      <param name="rc">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> to be converted.</param>
      <returns>The converted (logical) <see cref="T:Leadtools.Annotations.AnnRectangle" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.RectangleToPhysical(Leadtools.Annotations.AnnRectangle)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnRectangle" /> from logical to physical coordinates.
            </summary>
      <noremarks />
      <param name="rc">The <see cref="T:Leadtools.Annotations.AnnRectangle" /> to be converted.</param>
      <returns>The converted (physical) <see cref="T:Leadtools.Annotations.AnnRectangle" />.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.LengthToLogical(Leadtools.Annotations.AnnLength)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnLength" /> from physical to logical coordinates.
            </summary>
      <noremarks />
      <param name="length">The <see cref="T:Leadtools.Annotations.AnnLength" /> value to be converted.</param>
      <returns>The converted (logical) <see cref="T:Leadtools.Annotations.AnnLength" /> value.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTransformer.LengthToPhysical(Leadtools.Annotations.AnnLength)">
      <summary>
            Converts the input <see cref="T:Leadtools.Annotations.AnnLength" /> value from logical to physical coordinates.
            </summary>
      <noremarks />
      <param name="length">The <see cref="T:Leadtools.Annotations.AnnLength" /> value to be converted.</param>
      <returns>The converted (physical) <see cref="T:Leadtools.Annotations.AnnLength" /> value.</returns>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTransformer.UnitConverter">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> that will be used in the <see cref="T:Leadtools.Annotations.AnnTransformer" /> object.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> for this <see cref="T:Leadtools.Annotations.AnnTransformer" /> object.</value>
      <remarks>The conversion between device coordinate and logical coordinate systems depends on the current <see cref="T:Leadtools.Annotations.AnnUnitConverter" /> value.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTransformer" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnTextRollupObject">
      <summary>
             This class provides support for creating and managing text rollup annotation objects.
             </summary>
      <remarks>
        <para>
             The text rollup annotation object extends <see cref="T:Leadtools.Annotations.AnnNoteObject" /> 
             by adding an <see cref="P:Leadtools.Annotations.AnnTextRollupObject.Expanded" /> 
             property.  When this property is set to false, the text rollup object 
             looks and behaves like a normal note. When 
             <see cref="P:Leadtools.Annotations.AnnTextRollupObject.Expanded" /> is set to false, the text rollup object 
             will shrink to show only one line of text.  This saves space 
             on the container surface.
             For more information, refer to 
             <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see>
             For more information about the text rollup annotation object refer to 
             <see cref="T:AN.Topics.AnnTextRollupObject">AnnTextRollupObject</see>. 
             For more information about the automated text rollup annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a new text rollup object.</para>
        <code lang="VB">      Private Sub AnnTextRollupObject_AnnTextRollupObject(ByVal viewer As RasterImageViewer, ByVal container As AnnContainer)
         Dim textRollup As AnnTextRollupObject = New AnnTextRollupObject()
         textRollup.Text = "My TextRollup object"
         textRollup.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         textRollup.EdgeMargin = AnnLength.Empty
         textRollup.ShadowBorderWidth = New AnnLength(6, AnnUnit.Pixel)
         textRollup.Alignment = StringAlignment.Center
         textRollup.LineAlignment = StringAlignment.Center
         textRollup.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(textRollup)
         textRollup.Expanded = False
         viewer.Invalidate(textRollup.InvalidRectangle)
         MessageBox.Show("Not expanded")

         textRollup.Expanded = True
         viewer.Invalidate(textRollup.InvalidRectangle)
         MessageBox.Show("expanded")
      End Sub</code>
        <code lang="CS">      private void AnnTextRollupObject_AnnTextRollupObject(RasterImageViewer viewer, AnnContainer container)
      {
         AnnTextRollupObject textRollup = new AnnTextRollupObject();
         textRollup.Text = "My TextRollup object";
         textRollup.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         textRollup.EdgeMargin = AnnLength.Empty;
         textRollup.ShadowBorderWidth = new AnnLength(6, AnnUnit.Pixel);
         textRollup.Alignment = StringAlignment.Center;
         textRollup.LineAlignment = StringAlignment.Center;
         textRollup.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
         container.Objects.Add(textRollup);
         textRollup.Expanded = false;
         viewer.Invalidate(textRollup.InvalidRectangle);
         MessageBox.Show("Not expanded");

         textRollup.Expanded = true;
         viewer.Invalidate(textRollup.InvalidRectangle);
         MessageBox.Show("expanded");
      }</code>
        <!--AnnTextRollupObject.AnnTextRollupObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnNoteObject">
      <summary>
             The note annotation object.
             </summary>
      <remarks>
        <para>The note annotation object is a rectangle with a shadow border 
             and color background (yellow by default). It contains a text string 
             with font properties. The text will wrap on word breaks within the 
             object's specified rectangle. 
             For more information about the note annotation object refer to 
             <see cref="T:AN.Topics.AnnNoteObject">AnnNoteObject</see>. 
             For more information about the automated note annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a new note object and then adds it to a container.</para>
        <code lang="VB">      Private Sub AnnNoteObject_AnnNoteObject(ByVal container As AnnContainer, ByVal textString As String)
         Dim note As AnnNoteObject = New AnnNoteObject()
         note.Text = textString
         note.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         note.EdgeMargin = AnnLength.Empty
         note.ShadowBorderWidth = New AnnLength(6, AnnUnit.Pixel)
         note.Alignment = StringAlignment.Center
         note.LineAlignment = StringAlignment.Center
         note.Bounds = New AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel)
         container.Objects.Add(note)
      End Sub</code>
        <code lang="CS">      private void AnnNoteObject_AnnNoteObject(AnnContainer container, string textString)
   {
      AnnNoteObject note = new AnnNoteObject();
      note.Text = textString;
      note.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
      note.EdgeMargin = AnnLength.Empty;
      note.ShadowBorderWidth = new AnnLength(6, AnnUnit.Pixel);
      note.Alignment = StringAlignment.Center;
      note.LineAlignment = StringAlignment.Center;
      note.Bounds = new AnnRectangle(100, 200, 400, 600, AnnUnit.Pixel);
      container.Objects.Add(note);
   }</code>
        <!--AnnNoteObject.AnnNoteObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnNoteObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnNoteObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnNoteObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnNoteObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnNoteObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value to specify which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnNoteObject" /> will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnNoteObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnNoteObject" /> on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  You do not need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnNoteObject.ShadowBorderWidth">
      <summary>
            Returns the width of the shadow border of this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </summary>
      <noremarks />
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> structure that represents the width of the shadow border of this <see cref="T:Leadtools.Annotations.AnnNoteObject" />.</value>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnNoteObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnNoteObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.#ctor">
      <summary>
            Initializes a new instance of an <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.Create">
      <summary>
            Creates a new instance of this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnTextRollupObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextRollupObject.Expanded">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> is expanded.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> is expanded; false otherwise.</value>
      <remarks>
        <p>When this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object is expanded, it looks and behaves exactly like a normal <see cref="T:Leadtools.Annotations.AnnNoteObject" /> object.</p>
        <p>When this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object is not expanded, it shrinks to show only one line of text.</p>
        <br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextRollupObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object; false otherwise.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> property to return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextRollupObject.Bounds">
      <summary>
            Gets or sets the bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.
            </summary>
      <value>The bounding rectangle for this <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> object.</value>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnTextRollupObject" /> class overrides this property to return the original 
            bounding rectangle, if this object is expanded.  If this object is not expanded, the bounding 
            rectangle is shrunk to fit only one line of text.  To expand or roll up this object, set the <see cref="P:Leadtools.Annotations.AnnTextRollupObject.Expanded" /> property.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingTextInAnnotationObjects">Using Text in Annotation Object.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnTextRollupObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnTextRollupObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnCrossProductObject">
      <summary>
             Defines an annotation cross product object.
             </summary>
      <remarks>
        <para>The cross-product annotation object consists of two rulers intersecting at right angles.  The intersection point of a cross product object updates dynamically and can be obtained through the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint" /> property.</para>
        <para>
             For more information about the crossproduct annotation object refer to 
             <see cref="T:AN.Topics.AnnCrossProductObject">AnnCrossProductObject</see>. 
             For more information about the automated crossproduct annotation object, refer to 
            <see cref="T:AN.Topics.AnnotationObjectsAutomatedFeatures">Annotation Objects - Automated Features</see>. 
             </para>
      </remarks>
      <example>
        <para>This example creates a cross product object.</para>
        <code lang="VB">      Private Sub AnnCrossProductObject_AnnCrossProductObject(ByVal container As AnnContainer)
         Dim crossProduct As AnnCrossProductObject = New AnnCrossProductObject()
         crossProduct.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         crossProduct.Font = New AnnFont("Arial", New AnnLength(10, AnnUnit.Point), FontStyle.Regular)
         crossProduct.FirstStartPoint = New AnnPoint(5, 5, AnnUnit.Inch)
         crossProduct.FirstEndPoint = New AnnPoint(10, 10, AnnUnit.Inch)
         ' make this cross product symmetrical
         crossProduct.UpdateSecondPoints()
         ' update the intersection point
         crossProduct.UpdateIntersectionPoint()
         crossProduct.MeasurementUnit = AnnUnit.Inch
         crossProduct.TickMarksLength = New AnnLength(0.25F, AnnUnit.Inch)
         crossProduct.ShowTickMarks = True
         crossProduct.GaugeLength = New AnnLength(1.0F, AnnUnit.Inch)
         crossProduct.ShowGauge = True
         crossProduct.ShowLength = True
         crossProduct.Precision = 2
         container.Objects.Add(crossProduct)
         ' show the intersection point
         MessageBox.Show(String.Format("Intersection point is at: {0}", crossProduct.IntersectionPoint))
      End Sub</code>
        <code lang="CS">      private void AnnCrossProductObject_AnnCrossProductObject(AnnContainer container)
      {
         AnnCrossProductObject crossProduct = new AnnCrossProductObject();
         crossProduct.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         crossProduct.Font = new AnnFont("Arial", new AnnLength(10, AnnUnit.Point), FontStyle.Regular);
         crossProduct.FirstStartPoint = new AnnPoint(5, 5, AnnUnit.Inch);
         crossProduct.FirstEndPoint = new AnnPoint(10, 10, AnnUnit.Inch);
         // make this cross product symmetrical
         crossProduct.UpdateSecondPoints();
         // update the intersection point
         crossProduct.UpdateIntersectionPoint();
         crossProduct.MeasurementUnit = AnnUnit.Inch;
         crossProduct.TickMarksLength = new AnnLength(0.25F, AnnUnit.Inch);
         crossProduct.ShowTickMarks = true;
         crossProduct.GaugeLength = new AnnLength(1.0F, AnnUnit.Inch);
         crossProduct.ShowGauge = true;
         crossProduct.ShowLength = true;
         crossProduct.Precision = 2;
         container.Objects.Add(crossProduct);
         // show the intersection point
         MessageBox.Show(String.Format("Intersection point is at: {0}", crossProduct.IntersectionPoint));
      }</code>
        <!--AnnCrossProductObject.AnnCrossProductObject-->
      </example>
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnCrossProductObject.FirstRulerHitTestObject">
      <summary>
            The hit test value of the first ruler.
            </summary>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides <see cref="M:Leadtools.Annotations.AnnCrossProductObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> to fine tune the hit test return value.  This is the value returned if the hit-testing succeeded on the first ruler (the ruler between <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" />).
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnCrossProductObject.SecondRulerHitTestObject">
      <summary>
            The hit test value of the second ruler.
            </summary>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides <see cref="M:Leadtools.Annotations.AnnCrossProductObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)" /> to fine tune the hit test return value.  This is the value returned if the hit-testing succeeded on the second ruler (the ruler between <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />).
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from the user's code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <p>The annotation class library uses standard .NET serialization to perform various tasks such as fast undo/redo buffers and file load/save.</p>
        <p>This member supports the Annotation class library infrastructure and is not intended to be used directly from your code.  For more information refer to the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> class object.
            </summary>
      <param name="supportsPen">true if this object will support a pen; otherwise false.</param>
      <param name="supportsBrush">true if this object will support a brush; otherwise false.</param>
      <param name="supportsFont">true if this object will support a font; otherwise false.</param>
      <remarks>
            This constructor is intended for derived classes that extend the functionality of the <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> class.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> class object.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.Create">
      <summary>
            Creates a new <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> class object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object this method creates.</returns>
      <remarks>
            This is the implementation of the <see cref="M:Leadtools.Annotations.AnnObject.Create" /> abstract method.  This method enables the LEADTOOLS Annotation infrastructure to correctly construct objects at runtime.  For more information and an example, refer to the <see cref="T:AN.Topics.ImplementUserDefinedObjectsWithLeadtoolsAnnotations">Implement User Defined Objects with LEADTOOLS Annotations</see></remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.Clone">
      <summary>
            Creates an exact copy of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <returns>The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object that this class creates.</returns>
      <remarks>
            This is the <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> implementation of the <see cref="M:System.ICloneable.Clone" /> method.  The method will copy all fields of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> to the newly created one.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.UpdateIntersectionPoint">
      <summary>
            Updates the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint" /> value of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /></summary>
      <remarks>
            Call this method to update the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint" /> with the correct value instead of calculating it manually.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> example.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.UpdateSecondPoints">
      <summary>
            Updates the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />values of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /></summary>
      <remarks>
            Call this method to update the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" /> with the correct values to make this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> symmetrical.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> example.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.GetGraphicsPath(Leadtools.Annotations.AnnGetGraphicsPathMode)">
      <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <param name="mode">An <see cref="T:Leadtools.Annotations.AnnGetGraphicsPathMode" /> value that specifies which path to return.</param>
      <returns>The <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> representation of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.</returns>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object will return the same exact path no matter what the value of <i>mode</i> is.
            </remarks>
      <noexample>DerivedExample</noexample>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.DrawObject(System.Drawing.Graphics)">
      <summary>
            Draws this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object on the specified surface.
            </summary>
      <param name="graphics">The Graphics surface on which to draw this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</param>
      <remarks>
            This method is called internally by the annotation framework whenever the <see cref="M:Leadtools.Annotations.AnnObject.Draw(System.Drawing.Graphics)" /> method is called.  There is no need to call this method directly.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Gets the array of points to be transformed.
            </summary>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies the transformation method called.</param>
      <returns>
            An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the points to be transformed.
            </returns>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides this member to return an array of 4 points: <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)">
      <summary>
            Sets the array of transformed points.
            </summary>
      <param name="points">An array of <see cref="T:Leadtools.Annotations.AnnPoint" /> structures specifying the transformed points.</param>
      <param name="operation">An <see cref="T:Leadtools.Annotations.AnnTransformObjectOperation" /> value that specifies the transformation method called.</param>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides this member to copy the new transformed values to: <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.HitTest(Leadtools.Annotations.AnnPoint,System.Int32)">
      <summary>
            Performs hit-testing on this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <param name="testPoint">An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that contains the point to be tested.</param>
      <param name="buffer">Value that represents the size of the point to test.</param>
      <returns>This method returns <see cref="F:Leadtools.Annotations.AnnCrossProductObject.FirstRulerHitTestObject" /> or <see cref="F:Leadtools.Annotations.AnnCrossProductObject.SecondRulerHitTestObject" />; or null (Nothing in Visual Basic) if the test point does not hit this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</returns>
      <remarks>
            The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> class overrides this method to fine-tune the return value for hit-testing. Instead of simply returning the default <see cref="F:Leadtools.Annotations.AnnObject.DefaultHitTestValue" />, this method will return either <see cref="F:Leadtools.Annotations.AnnCrossProductObject.FirstRulerHitTestObject" /> or <see cref="F:Leadtools.Annotations.AnnCrossProductObject.SecondRulerHitTestObject" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.ResetRotatePoints">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.ResetRotatePoints" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.SaveOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.SaveOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.RestoreOriginalLocation">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.RestoreOriginalLocation" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnCrossProductObject.CalculateRotateAngle">
      <summary>
            The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> implementation of <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" />.
            </summary>
      <remarks>
            For more information, refer to <see cref="M:Leadtools.Annotations.AnnObject.CalculateRotateAngle" /> and <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.RulerImplemented">
      <summary>
            Gets a value that indicates whether this object implements the <see cref="T:Leadtools.Annotations.IAnnRulerObject" /> interface.  
            </summary>
      <value>This property will always be true for an <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>(Read only) This is used internally by the annotation framework. User-defined classes that are derived from the AnnObject class and include a ruler should implement this property to always return true.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.MeasurementUnit">
      <summary>
            Gets or sets the unit of measure for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnUnit" /> value that specifies the unit of measure for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.UnitAbbreviation">
      <summary>
            Gets or sets a string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.MeasurementUnit" /> property value.
            </summary>
      <value>A string value that specifies the abbreviation that corresponds to the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.MeasurementUnit" /> property value.</value>
      <remarks>
            The <b>UnitAbbreviation</b> property resets to the appropriate value whenever the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.MeasurementUnit" /> property changes.  
            To use a custom abbreviation, set the value of this property after setting the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.MeasurementUnit" /> property.  
            To get the default abbreviation string, call the <see cref="M:Leadtools.Annotations.AnnUnitConverter.GetUnitAbbreviation(Leadtools.Annotations.AnnUnit)" /> method.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.TickMarksLength">
      <summary>
            Gets or sets the length of the tick marks for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> value that specifies the length of the current tick marks for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.ShowTickMarks">
      <summary>
            Gets or sets a value indicating whether the tick marks for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> are visible.
            </summary>
      <value>true if the tick marks for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> are visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.GaugeLength">
      <summary>
            Gets or sets the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnLength" /> value that specifies the length of the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.ShowGauge">
      <summary>
            Gets or sets a value indicating whether the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object is visible.
            </summary>
      <value>true if the gauge (the perpendicular lines at the ends of the ruler) for this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object is visible; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.ShowLength">
      <summary>
            Gets or sets a value that indicates whether to display the length of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>true to show the length of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object; false otherwise.</value>
      <remarks>
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.Precision">
      <summary>
            Gets or sets the number of digits to the right of the decimal point when displaying the length of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>The number of digits to the right of the decimal point.</value>
      <remarks>
            If the ruler length is 135.683 and the precision is 2, the value 135.68 will be displayed.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.DpiX">
      <summary>
            Gets or sets the horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler.
            </summary>
      <value>The horizontal DPI (dots per inch) that is used to translate the horizontal distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.DpiY">
      <summary>
            Gets or sets the vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler.
            </summary>
      <value>The vertical DPI (dots per inch) that is used to translate the vertical distance for the ruler</value>
      <remarks>
        <p>If this value is zero, then the ruler will use the same DPI as its <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>This value is set to zero by default.</p>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint">
      <summary>
            Gets or sets the starting point of the first ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the starting point of the first ruler.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object consists of two rulers: the first goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" /> and the second goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint">
      <summary>
            Gets or sets the value for the ending point of the first ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the ending point of the first ruler.</value>
      <remarks>
        <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> consists of two rulers: the first goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" /> and the second goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint">
      <summary>
            Gets or sets the starting point of the second ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the starting point of the second ruler.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object consists of two rulers: the first goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" /> and the second goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint">
      <summary>
            Gets or sets the ending point of the second ruler.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the ending point of the second ruler.</value>
      <remarks>
            An <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object consists of two rulers: the first goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" /> and the second goes from <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> to <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" />.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint">
      <summary>
            Gets or sets the current intersection point of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnPoint" /> structure that specifies the current intersection point of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>
            (Read only) The intersection point of a cross product object updates dynamically whenever <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> or <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" /> changes.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.TransformObjectMode">
      <summary>
            Gets a value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> when any object transformation method is called.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnTransformObjectMode" /> value that determines how to transform this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object when any object transformation method is called.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides this property to return <see cref="T:Leadtools.Annotations.AnnTransformObjectMode">AnnTransformObjectMode.Points</see>.  This property, the <see cref="M:Leadtools.Annotations.AnnCrossProductObject.GetTransformPoints(Leadtools.Annotations.AnnTransformObjectOperation)" /> method, and the <see cref="M:Leadtools.Annotations.AnnCrossProductObject.SetTransformPoints(Leadtools.Annotations.AnnPoint[],Leadtools.Annotations.AnnTransformObjectOperation)" /> method ensure that the cross product object physically transforms the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstStartPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.FirstEndPoint" />, <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondStartPoint" /> and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.SecondEndPoint" /> values whenever the cross product object is transformed.  This ensures correct values for the cross product length and <see cref="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint" /> at all times.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.HitTestInterior">
      <summary>
            Gets a value indicating whether hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>true if hit-testing should be performed inside this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />; false otherwise.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides the base <see cref="P:Leadtools.Annotations.AnnObject.HitTestInterior" /> to return true.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.BoundingRectangle">
      <summary>
            Gets the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.Annotations.AnnRectangle" /> structure that represents the logical bounding rectangle of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object.</value>
      <remarks>
            (Read only) <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> overrides this member to return the logical bounding rectangle of the cross product.  This bounding rectangle contains the 2 rulers, with the gauge, tick marks, and the unit of measure, if visible.<br />
            For more information, refer to <see cref="T:AN.Topics.UsingRulersInAnnotationObjects">Using Rulers in Annotation Objects.</see></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.Origin">
      <summary>
            Gets the logical origin of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </summary>
      <value>The logical origin of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.</value>
      <remarks>
            (Read only) This method returns the logical origin of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.  The <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object overrides this value to return the coordinates of the <see cref="P:Leadtools.Annotations.AnnCrossProductObject.IntersectionPoint" />.  You can use this origin to <see cref="M:Leadtools.Annotations.AnnObject.Rotate(System.Single,Leadtools.Annotations.AnnPoint)" /> or <see cref="M:Leadtools.Annotations.AnnObject.Scale(System.Single,System.Single,Leadtools.Annotations.AnnPoint)" /> this object around itself.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnObject.Transform" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.Win32ObjectId">
      <summary>
            For internal use.
            </summary>
      <noremarks />
      <value>For internal use.</value>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.annRulerInternal">
      <exclude />
    </member>
    <member name="P:Leadtools.Annotations.AnnCrossProductObject.RestrictLength">
      <summary>
            Gets or sets a value indicating whether the text representing the length of this <see cref="T:Leadtools.Annotations.AnnCrossProductObject" /> object is restricted to appear fully within the bounding rectangle of the container.
            </summary>
      <value>
        <strong>true</strong> to restrict the text representing the length to appear fully within the bounding rectangle of the container. Otherwise, <strong>false</strong>. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>To show the length of a ruler, use <see cref="P:Leadtools.Annotations.AnnCrossProductObject.ShowLength" />.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnCrossProductObject" />.
            </example>
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnEditDesignerOperation">
      <summary>
            Indicates the current <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> operation.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.None">
      <summary>
            No operation.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.MoveControlPoint">
      <summary>
            The user has clicked and dragged a <see cref="T:Leadtools.Annotations.AnnControlPoint" />.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.Move">
      <summary>
            The user has clicked and dragged the object itself.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.MoveName">
      <summary>
            The user has clicked and dragged the object name.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.Rotate">
      <summary>
            The user has clicked and dragged the object while the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in rotate mode.
            </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.MoveRotateCenter">
      <summary>
        <para>The user has clicked and dragged the rotate center control point (<see cref="T:Leadtools.Annotations.AnnControlPoint" />).</para>
        <para>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Annotations.AnnEditDesignerOperation.MoveRotateGripper">
      <summary>
        <para>The user has clicked and dragged the rotate gripper control point (<see cref="T:Leadtools.Annotations.AnnControlPoint" />).</para>
        <para>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Annotations.AnnProtractorDrawDesigner">
      <summary>
            This class extends the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> class to provide functionality for drawing an <see cref="T:Leadtools.Annotations.AnnProtractorObject" /> on an annotation container.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> object.
            </summary>
      <noremarks />
      <example>
            For a complete example on how to use annotation draw and edit designers, refer to <see cref="T:Leadtools.Annotations.AnnDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.Cancel">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.Cancel" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.EndWorking">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDrawDesigner.EndWorking" />.
            </summary>
      <noremarks />
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseDown(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseMove(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnProtractorDrawDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
        <see cref="T:Leadtools.Annotations.AnnProtractorDrawDesigner" /> implementation of <see cref="M:Leadtools.Annotations.AnnDesigner.MouseUp(System.Windows.Forms.MouseEventArgs)" />.
            </summary>
      <noremarks />
      <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data. 
            </param>
      <noexample />
      <document>yes</document>
    </member>
    <member name="T:Leadtools.Annotations.AnnAutomation">
      <summary>
            Manages the automation for an annotation container and a an automation control such as the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> class links an annotation <see cref="T:Leadtools.Annotations.AnnContainer" /> object and an object that implements the <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />
            interface together. This class provides methods to automatically link the automation with the standard LEADTOOLS viewing control in Windows Forms; the
            <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object by having overload methods in the constructor and the <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> methods.</para>
        <para>An automated annotation application usually creates one <see cref="T:Leadtools.Annotations.AnnAutomation" /> object per annotation control. Therefore, typically, an
            SDI application has one <see cref="T:Leadtools.Annotations.AnnAutomation" /> object (one <see cref="T:Leadtools.Annotations.AnnContainer" /> and one <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />, such as
            <see cref="T:Leadtools.WinForms.RasterImageViewer" />, and an MDI application has one <see cref="T:Leadtools.Annotations.AnnAutomation" /> per annotation child form.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> class attached to a LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />.
            </summary>
      <param name="automationManager">The manager to which this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will belong.</param>
      <param name="viewer">The raster viewer for this <see cref="T:Leadtools.Annotations.AnnAutomation" /></param>
      <remarks>
        <para>This constructor creates a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> class, hooks to the necessary events in <paramref name="viewer" />
            to handle the user interface, creates the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> that will hold the annotation objects and finally adds this newly
            created <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> to the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Automations" /> collection.</para>
        <para>Internally, this method will create a helper object that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for <paramref name="viewer" />
            and uses an object of this class.</para>
        <para>To use automation with your own control instead of the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />, use
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation(AnnAutomationManager, IAnnAutomationControl)</see>.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> class attached to a user control.
            </summary>
      <param name="automationManager">The manager to which this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will belong.</param>
      <param name="automationControl">The user control for this <see cref="T:Leadtools.Annotations.AnnAutomation" /></param>
      <remarks>
        <para>This constructor creates a new instance of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> class, hooks to the necessary events in <paramref name="automationControl" />
            to handle the user interface, creates the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> that will hold the annotation objects and finally adds this newly
            created <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> to the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Automations" /> collection.</para>
        <para>To use an automation control with the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" /> class, use
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">AnnAutomation(AnnAutomationManager, RasterImageViewer)</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Dispose">
      <summary>
            Releases all resources used by this object. 
            </summary>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Finalize">
      <summary>
            This member overrides <see cref="M:System.Object.Finalize" />.
            </summary>
      <remarks>
            For more information refer to <see cref="M:System.Object.Finalize" />.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Dispose(System.Boolean)">
      <summary>
            Releases all resources used by this object. 
            </summary>
      <param name="disposing">
            true if this method was called as a result of calling <b>Dispose</b>; false if this method was called as a result of object finalization. 
            </param>
      <remarks>
            Derived classes should override this method and provide any clean-up code required here.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.DetachContainer">
      <summary>
            Detaches the current <see cref="T:Leadtools.Annotations.AnnContainer" /> from this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </summary>
      <remarks>
        <p>You can use <see cref="M:Leadtools.Annotations.AnnAutomation.AttachContainer(Leadtools.Annotations.AnnContainer)" /> and <b>DetachContainer</b> to associated an
            <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> with a certain <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>Note that when you detach the container from the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> object, this object
            becomes unusable till you attach another container (or the same one) back into it through
            <see cref="M:Leadtools.Annotations.AnnAutomation.AttachContainer(Leadtools.Annotations.AnnContainer)" /></p>
      </remarks>
      <returns>
            The last <see cref="T:Leadtools.Annotations.AnnContainer" /> attached to this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </returns>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.AttachContainer(Leadtools.Annotations.AnnContainer)">
      <summary>
            Attaches an <see cref="T:Leadtools.Annotations.AnnContainer" /> to this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </summary>
      <param name="container">The <see cref="T:Leadtools.Annotations.AnnContainer" /> object to attach.</param>
      <remarks>
        <p>You can use <b>AttachContainer</b> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachContainer" /> to associated an
            <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> with a certain <see cref="T:Leadtools.Annotations.AnnContainer" />.</p>
        <p>Note that when you detach the container from the <see cref="T:Leadtools.Annotations.AnnAutomationObject" /> object, this object
            becomes unusable till you attach another container (or the same one) back into it through
            <b>AttachContainer</b></p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.StartEditing(Leadtools.Annotations.AnnObject,System.Boolean)">
      <summary>
            Starts editing the given <see cref="T:Leadtools.Annotations.AnnObject" />.
            </summary>
      <param name="annObject">An existing <see cref="T:Leadtools.Annotations.AnnObject" /> to edit.</param>
      <param name="group">true to group this <i>annObject</i> with the object(s) currently being edited if(any); false otherwise.</param>
      <remarks>
        <p>This method is called by the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object in design user mode whenever an object is "selected" (by clicking it with the mouse usually).  You can manually start the editing process of an object by calling this method.</p>
        <p>If you have object(s) that are currently being edited in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> and you want to either create a new group or add an <i>annObject</i> to the group currently being edited, then pass true for <i>group</i>; otherwise pass false.  Passing true when no objects are currently being edited will not create a new group and edits this object individually as normal.  Passing false when objects are currently being edited will cause the current editing operation to be canceled and start a new one for <i>annObject</i>.</p>
      </remarks>
      <example>
        <para>This example will add a new rectangle object to the active automation of an automation manager.  It will then "select" this object and make it ready for editing.</para>
        <code lang="VB">      Public Sub AnnAutomation_StartEditing(ByVal manager As AnnAutomationManager)
         ' find the active automation
         Dim automation As AnnAutomation = Nothing
         Dim index As Integer = 0
         Do While index &lt; manager.Automations.Count AndAlso automation Is Nothing
            If manager.Automations(index).Active Then
               automation = manager.Automations(index)
            End If
            index += 1
         Loop
         If Not automation Is Nothing Then
            ' add a new rectangle object to this automation
            Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
            rectObj.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
            rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(2, AnnUnit.Pixel))
            rectObj.Brush = New AnnSolidBrush(Color.Yellow)

            ' surround the changes to the automation by an undo
            automation.BeginUndo()

            automation.Container.Objects.Add(rectObj)

            ' "select" this rectangle and make it ready for editing
            automation.StartEditing(rectObj, False)

            automation.EndUndo()
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_StartEditing(AnnAutomationManager manager)
      {
         // find the active automation
         AnnAutomation automation = null;
         for(int index = 0; index &lt; manager.Automations.Count &amp;&amp; automation == null; index++)
         {
            if(manager.Automations[index].Active)
               automation = manager.Automations[index];
         }
         if(automation != null)
         {
            // add a new rectangle object to this automation
            AnnRectangleObject rectObj = new AnnRectangleObject();
            rectObj.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
            rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(2, AnnUnit.Pixel));
            rectObj.Brush = new AnnSolidBrush(Color.Yellow);

            // surround the changes to the automation by an undo
            automation.BeginUndo();

            automation.Container.Objects.Add(rectObj);

            // "select" this rectangle and make it ready for editing
            automation.StartEditing(rectObj, false);

            automation.EndUndo();
         }
      }</code>
        <!--AnnAutomation.StartEditing-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.OnCurrentDesignerChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnAutomation.CurrentDesignerChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnCurrentDesignerChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnCurrentDesignerChanged</b> in a derived class, be sure to call the base class's <b>OnCurrentDesignerChanged</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.OnBeforeObjectChanged(Leadtools.Annotations.AnnBeforeObjectChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnBeforeObjectChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnBeforeObjectChanged</b> in a derived class, be sure to call the base class's <b>OnBeforeObjectChanged</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.OnAfterObjectChanged(Leadtools.Annotations.AnnAfterObjectChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.Annotations.AnnAfterObjectChangedEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAfterObjectChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAfterObjectChanged</b> in a derived class, be sure to call the base class's <b>OnAfterObjectChanged</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.OnImageDirtyChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.
            The <b>OnImageDirtyChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnImageDirtyChanged</b> in a derived class, be sure to call the base class's <b>OnImageDirtyChanged</b> method so that registered delegates receive the event.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged" /> event will be fired after the <see cref="P:Leadtools.Annotations.AnnAutomation.ImageDirty" /> value changes.</p>
        <p>The <see cref="T:Leadtools.RasterImage" /> in the automation control (Either in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image">RasterImageViewer.Image</see>
            or <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">IAnnAutomationControl.AutomationRasterImage</see> depends on what control
            has been attached to this automation) changes after calling any of the following methods: <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" />, <see cref="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" />.</p>
        <p>You can use this event along with the <see cref="P:Leadtools.Annotations.AnnAutomation.ImageDirty" /> property to update your application user interface.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.OnUndoRedoChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.
            The <b>OnUndoRedoChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnUndoRedoChanged</b> in a derived class, be sure to call the base class's <b>OnUndoRedoChanged</b> method so that registered delegates receive the event.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged" /> event will be fired when the undo/redo buffer changes.  This gives the application a chance to update the user interface if needed.</p>
        <p>The undo/redo buffer changes whenever an object inside the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> changes either by user interaction through the user interface or by code.</p>
        <p>You can use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanUndo" /> property and the <see cref="P:Leadtools.Annotations.AnnAutomation.CanRedo" /> property to determine whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can undo or redo an operation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Copy">
      <summary>
            Copies the objects currently being edited to the clipboard.
            </summary>
      <remarks>
        <p>
          <see cref="T:Leadtools.Annotations.AnnAutomation" /> can copy objects to the clipboard when one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects are currently in edit mode (selected).</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanCopy" /> property to determine whether objects inside this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can currently be copied to the clipboard</p>
        <p>You can call <b>Copy</b> followed by <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> to simulate a clipboard "cut" operation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanCopy" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Paste">
      <summary>
            Copies the annotation objects from the clipboard to this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
            Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanPaste" /> property to determine whether annotation objects are in the clipboard and can be pasted. Use this property to update the user interface of your application (for example, enabling or disabling an Edit/Paste menu item).  Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Paste" /> method to actually copy the objects from the clipboard to this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanPaste" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Delete">
      <summary>
            Deletes editing objects from this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>
          <see cref="T:Leadtools.Annotations.AnnAutomation" /> can delete one or more <see cref="T:Leadtools.Annotations.AnnObject" /> if they are currently in edit mode (selected) and these objects are not locked.</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanDelete" /> property to update the user interface of your application (for example, enabling or disabling an Edit/Delete menu item).</p>
        <p>For information on undoing or redoing automation operations, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanDelete" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.BeginUndo">
      <summary>
            Creates a new undo node in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </summary>
      <remarks>
        <p>Use this method along with the <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> methods to programmatically add a node to the undo stack maintained by this <see cref="T:Leadtools.Annotations.AnnAutomation" />.  Typically, you add an undo node as follows:
            <list type="number"><item><description>Call the <b>BeginUndo</b> method before you make any changes to create a new node.</description></item><item><description>Perform any changes to the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> method to commit this undo node into the undo stack of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>In case of errors (typically in a catch statement), call the <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> method to remove the node and cancel the operation.</description></item></list></p>
        <p>You do not need to manually call the <b>BeginUndo</b>, <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> methods when calling methods from this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object directly.  The <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will internally do this for you.  For example, when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> method to delete the object(s) currently being edited, the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will perform the above sequence internally to add the undo node.</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> method, or re-applied using the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
        <para>This example will manually add a new rectangle object to an automation object and then start editing it.</para>
        <code lang="VB">      Public Sub AnnAutomation_BeginUndo(ByVal automation As AnnAutomation)
         ' first create a new undo node
         automation.BeginUndo()
         Try
            ' add a new rectangle object
            Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
            rectObj.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
            rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rectObj.Brush = New AnnSolidBrush(Color.Yellow)
            automation.Container.Objects.Add(rectObj)

            ' "select" this object
            automation.StartEditing(rectObj, False)

            ' commit the undo node
            automation.EndUndo()
         Catch ex As Exception
            ' in case of errors, cancel the undo node
            automation.CancelUndo()
            Throw ex
         End Try

         MessageBox.Show("Object has been added as is now selected.  Next will call //Undo// to undo the operation")
         automation.Undo()
         MessageBox.Show("Operation has been undone.  Next will call //Redo// to redo the operation")
         automation.Redo()
         MessageBox.Show("Object should be back and selected")
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_BeginUndo(AnnAutomation automation)
      {
         // first create a new undo node
         automation.BeginUndo();
         try
         {
            // add a new rectangle object
            AnnRectangleObject rectObj = new AnnRectangleObject();
            rectObj.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
            rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
            rectObj.Brush = new AnnSolidBrush(Color.Yellow);
            automation.Container.Objects.Add(rectObj);

            // "select" this object
            automation.StartEditing(rectObj, false);

            // commit the undo node
            automation.EndUndo();
         }
         catch(Exception ex)
         {
            // in case of errors, cancel the undo node
            automation.CancelUndo();
            throw ex;
         }

         MessageBox.Show("Object has been added as is now selected.  Next will call //Undo// to undo the operation");
         automation.Undo();
         MessageBox.Show("Operation has been undone.  Next will call //Redo// to redo the operation");
         automation.Redo();
         MessageBox.Show("Object should be back and selected");
      }</code>
        <!--AnnAutomation.BeginUndo-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.EndUndo">
      <summary>
            Commits the undo node started in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </summary>
      <remarks>
        <p>Use this method along with the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> methods to programmatically add a node to the undo stack maintained by this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.  Typically, you add an undo node as follows:
            <list type="number"><item><description>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" /> method before you make any changes to create a new node</description></item><item><description>Perform any changes to the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>Call the <b>EndUndo</b> method to commit this undo node into the undo stack of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>In case of errors (typically in a catch statement), call the <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> method to remove the node and cancel the operation.</description></item></list></p>
        <p>You do not need to manually call the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" />, <b>EndUndo</b> or <see cref="M:Leadtools.Annotations.AnnAutomation.CancelUndo" /> methods when calling methods from this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object directly.  The <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will internally do this for you.  For example, when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> method to delete the object(s) currently being edited, the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will perform the above sequence internally to add the undo node.</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> method, or re-applied using the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.CancelUndo">
      <summary>
            Cancels the undo node started in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            </summary>
      <remarks>
        <p>Use this method along with the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> methods to programmatically add a node to the undo stack maintained by this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.  Typically, you add an undo node as follows:
            <list type="number"><item><description>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" /> method before you make any changes to create a new node.</description></item><item><description>Perform any changes to the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> method to commit this undo node into the undo stack of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</description></item><item><description>In case of errors (typically in a catch statement), call the <b>CancelUndo</b> method to remove the node and cancel the operation.</description></item></list></p>
        <p>You do not need to manually call the <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" />, <see cref="M:Leadtools.Annotations.AnnAutomation.EndUndo" /> or <b>CancelUndo</b> methods when calling methods from this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object directly.  The <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will internally do this for you.  For example, when you call the <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> method to delete the object(s) currently being edited, the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will perform the above sequence internally to add the undo node.</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> method, or re-applied using the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.BeginUndo" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Undo">
      <summary>
            Undoes the last operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
            This method will undo the last operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> if the <see cref="P:Leadtools.Annotations.AnnAutomation.CanUndo" /> property returns true.
            <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <b>Undo</b> method, or re-applied using the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p><p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p></remarks>
      <example>
        <para>This example selects the first annotation object in the automation container, deletes it, performs an undo, and then redos the operation.</para>
        <code lang="VB">      Public Sub AnnAutomation_Undo(ByVal automation As AnnAutomation)
         If automation.Container.Objects.Count &gt; 0 Then
            ' select the first object in the automation
            automation.StartEditing(automation.Container.Objects(0), False)
            MessageBox.Show("Object has been selected.  Next delete it")
            ' delete this object
            automation.Delete()
            MessageBox.Show("Object has been deleted.  Next undo the operation to bring the object back")

            ' undo the delete operation
            automation.Undo()
            MessageBox.Show("Operation has been undone and the object is back.  Next redo the operation to delete the object again")

            ' redo the delete operation
            automation.Redo()
            MessageBox.Show("Operation has been redone and the object is deleted again.")
         Else
            MessageBox.Show("No objects in the container!")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_Undo(AnnAutomation automation)
      {
         if(automation.Container.Objects.Count &gt; 0)
         {
            // select the first object in the automation
            automation.StartEditing(automation.Container.Objects[0], false);
            MessageBox.Show("Object has been selected.  Next delete it");
            // delete this object
            automation.Delete();
            MessageBox.Show("Object has been deleted.  Next undo the operation to bring the object back");

            // undo the delete operation
            automation.Undo();
            MessageBox.Show("Operation has been undone and the object is back.  Next redo the operation to delete the object again");

            // redo the delete operation
            automation.Redo();
            MessageBox.Show("Operation has been redone and the object is deleted again.");
         }
         else
            MessageBox.Show("No objects in the container!");
      }</code>
        <!--AnnAutomation.Undo-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Redo">
      <summary>
            Reapplies the last operation that was undone in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
            You can use the <b>Redo</b> method to reapply the last undo operation that was performed to this <see cref="T:Leadtools.Annotations.AnnAutomation" />. The <see cref="P:Leadtools.Annotations.AnnAutomation.CanRedo" /> property enables you to determine whether the last operation that was undone can be reapplied to this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> method, or re-applied using the <b>Redo</b> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p><p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Group">
      <summary>
            Groups the objects currently being edited.
            </summary>
      <remarks>
        <p>This method will group one or more objects that are currently being edited into one group.  The objects will be removed from the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> and added to a new <see cref="T:Leadtools.Annotations.AnnGroupObject" />.  You can get this new <see cref="T:Leadtools.Annotations.AnnGroupObject" /> by querying the <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentEditObject" /> property immediately after calling <b>Group</b>.</p>
        <p>You can determine if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains objects that can be currently grouped together by calling the <see cref="P:Leadtools.Annotations.AnnAutomation.CanGroup" /> property.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanGroup" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Ungroup">
      <summary>
            Ungroups the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> object currently being edited.
            </summary>
      <remarks>
        <p>This method will ungroup the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> currently being edited.  The objects inside this <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will be added into the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> and the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will be removed.</p>
        <p>You can determine if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> that is being edited and can be ungrouped by calling the <see cref="P:Leadtools.Annotations.AnnAutomation.CanUngroup" /> property.</p>
        <p>
          <b>Ungroup</b> internally calls the <see cref="T:Leadtools.Annotations.AnnGroupObject" /><see cref="M:Leadtools.Annotations.AnnGroupObject.Ungroup" /> method.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanGroup" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.SelectAll">
      <summary>
            Selects all objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>If this <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains more than one object, after calling this method these objects will be removed from the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> and added to a temporary <see cref="T:Leadtools.Annotations.AnnGroupObject" />.  Finally, this temporary <see cref="T:Leadtools.Annotations.AnnGroupObject" /> becomes the object that is currently being edited.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains only one object, this object becomes the object that is currently being edited.  This is the same behavior as calling <see cref="M:Leadtools.Annotations.AnnAutomation.StartEditing(Leadtools.Annotations.AnnObject,System.Boolean)" /> on this object.</p>
        <p>You can determine if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can select all the objects by calling the <see cref="P:Leadtools.Annotations.AnnAutomation.CanSelectAll" /> property.</p>
        <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanSelectAll" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.SelectNone">
      <summary>
            Deselects all objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanSelectNone" /> property to determine if you can deselect all of the objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.
            <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanSelectAll" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Cancel">
      <summary>
            Cancels the operation currently being performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" /></summary>
      <remarks>
            Cancels any operations currently being performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.  An operation can be:
            <list type="bullet"><item><description>(Design user mode) An <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> is drawing a new object</description></item><item><description>(Design user mode) An <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is editing an existing object</description></item><item><description>(Design user mode) The user is selecting a group of objects</description></item><item><description>(Run user mode) An <see cref="T:Leadtools.Annotations.AnnRunDesigner" /> is running an object</description></item></list></remarks>
      <example>
        <para>This example cancels the drawing of new objects when the mouse is over a certain area on the viewer.</para>
        <code lang="VB">      Public Sub AnnAutomation_Cancel()
         ' subclass to the viewer mouse move event
         ' _automation is an AnnAutomation object
         AddHandler _automation.Viewer.MouseMove, AddressOf viewer_MouseMove
      End Sub
      Private Sub viewer_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
         ' check if we have a draw designer currently selected
         If Not _automation.CurrentDesigner Is Nothing AndAlso TypeOf _automation.CurrentDesigner Is AnnDrawDesigner Then
            ' check if we are over the rectangle 100,100 to 200,200
            Dim rc As Rectangle = New Rectangle(100, 100, 100, 100)
            If rc.Contains(e.X, e.Y) Then
               _automation.Cancel()
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_Cancel()
      {
         // subclass to the viewer mouse move event
         // _automation is an AnnAutomation object
         _automation.Viewer.MouseMove += new MouseEventHandler(viewer_MouseMove);
      }
      private void viewer_MouseMove(object sender, MouseEventArgs e)
      {
         // check if we have a draw designer currently selected
         if (_automation.CurrentDesigner != null &amp;&amp; _automation.CurrentDesigner is AnnDrawDesigner)
         {
            // check if we are over the rectangle 100,100 to 200,200
            Rectangle rc = new Rectangle(100, 100, 100, 100);
            if(rc.Contains(e.X, e.Y))
               _automation.Cancel();
         }
      }</code>
        <!--AnnAutomation.Cancel-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.BringToFront(System.Boolean)">
      <summary>
            Brings the currently selected object(s) up in the Z-order.
            </summary>
      <param name="first">true to bring the object(s) to the top of the Z-order; false to bring the object(s) one level up only</param>
      <remarks>
            Use this method with <i>first</i> set to true to bring the object(s) to the top of the Z-order, and set <i>first</i> to false to bring the object(s) up one level.  
            You can determine whether you can bring the objects up or to the top by calling the <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" /> and <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFirst" /> properties, respectively.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.SendToBack(System.Boolean)">
      <summary>
            Sends the currently selected object(s) down in the Z-order.
            </summary>
      <param name="last">true to send the object(s) to the bottom of the Z-order; false to send the object(s) down one level only</param>
      <remarks>
            Use this method with <i>last</i> set to true to send the object(s) to the bottom of the Z-order, and set <i>last</i> to false to send the object(s) down one level.
            You can determine whether you can send the objects down or to the bottom by calling the <see cref="P:Leadtools.Annotations.AnnAutomation.CanSendToBack" /> and <see cref="P:Leadtools.Annotations.AnnAutomation.CanSendToLast" /> properties, respectively.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ShowObjectPropertiesDialog">
      <summary>
            Opens the object's Properties dialog.
            </summary>
      <remarks>
            Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanShowObjectPropertiesDialog" /> property to determine whether the object's Properties dialog can be displayed at this time.  The dialog used is <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" />.  If the value of <see cref="P:Leadtools.Annotations.AnnAutomationManager.ObjectPropertiesDialogType" /> is null (Nothing in Visual Basic), this method will not do anything.
            </remarks>
      <example>
        <para>This example displays the annotation properties dialog</para>
        <code lang="VB">      Public Sub AnnAutomation_ShowObjectPropertiesDialog(ByVal automation As AnnAutomation)
         ' first add a new object to the automation
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.Yellow)
         automation.Container.Objects.Add(rectObj)
         automation.Viewer.Invalidate(rectObj.InvalidRectangle)
         ' make sure no objects are selected in the automation
         automation.SelectNone()

         ' show the object properties dialog (this should show a message informing you that no objects are currently selected (bring edited)
         ShowProperties(automation)

         ' select (edit) the object we have just added
         automation.StartEditing(rectObj, False)

         ' show the object properties dialog (should show the object properties dialog)
         ShowProperties(automation)
      End Sub

      Private Sub ShowProperties(ByVal automation As AnnAutomation)
         ' check if we can show the dialog
         If automation.CanShowObjectPropertiesDialog Then
            automation.ShowObjectPropertiesDialog()
         Else
            MessageBox.Show("Cannot show the object properties dialog because no object is currently being edited (selected)")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ShowObjectPropertiesDialog(AnnAutomation automation)
      {
         // first add a new object to the automation
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.Yellow);
         automation.Container.Objects.Add(rectObj);
         automation.Viewer.Invalidate(rectObj.InvalidRectangle);
         // make sure no objects are selected in the automation
         automation.SelectNone();

         // show the object properties dialog (this should show a message informing you that no objects are currently selected (bring edited)
         ShowProperties(automation);

         // select (edit) the object we have just added
         automation.StartEditing(rectObj, false);

         // show the object properties dialog (should show the object properties dialog)
         ShowProperties(automation);
      }

      private void ShowProperties(AnnAutomation automation)
      {
         // check if we can show the dialog
         if(automation.CanShowObjectPropertiesDialog)
            automation.ShowObjectPropertiesDialog();
         else
            MessageBox.Show("Cannot show the object properties dialog because no object is currently being edited (selected)");
      }</code>
        <!--AnnAutomation.ShowObjectPropertiesDialog-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ShowTextObjectEditWindow">
      <summary>
            Displays a text window over the selected text object.
            </summary>
      <keywords>ShowTextObjectEditWindow</keywords>
      <remarks>
            Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanShowTextObjectEditWindow" /> property to determine whether the an text window can displayed at this time.
            </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ShowContextMenu(System.Drawing.Point)">
      <summary>
            Displays the automation context menu.
            </summary>
      <param name="pos">A <see cref="T:System.Drawing.Point" /> object that specifies the coordinates at which to display the menu. These coordinates are specified relative
            to the client coordinates of the automation control.</param>
      <remarks>
        <p>This method will display the context menu in <see cref="P:Leadtools.Annotations.AnnAutomationManager.ContextMenu" />.  This <see cref="T:Leadtools.Annotations.AnnAutomation" /> will call this method when the user right-clicks the mouse cursor anywhere in the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> surface but not on any of the objects currently in the container.  You can call this method to show this context menu manually (for example, as a result from clicking on a certain menu item in your application).</p>
        <p>If the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ContextMenu" /> value is null (Nothing in Visual Basic), this method will not do anything.</p>
        <p>If a click is on an object, this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object will call the <see cref="M:Leadtools.Annotations.AnnAutomation.ShowObjectContextMenu(System.Drawing.Point)" /> method instead.</p>
        <p>Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanShowObjectContextMenu" /> property to determine if the <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the object context menu can be shown</p>
      </remarks>
      <example>
        <para>Displays the automation context menu.</para>
        <code lang="VB">      Public Sub AnnAutomation_ShowContextMenu(ByVal automation As AnnAutomation)
         ' show the context menu at the current cursor coordinates
         Dim pos As Point = Cursor.Position
         pos = automation.Viewer.PointToClient(pos)
         automation.ShowContextMenu(pos)
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ShowContextMenu(AnnAutomation automation)
      {
         // show the context menu at the current cursor coordinates
         Point pos = Cursor.Position;
         pos = automation.Viewer.PointToClient(pos);
         automation.ShowContextMenu(pos);
      }</code>
        <!--AnnAutomation.ShowContextMenu-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ShowObjectContextMenu(System.Drawing.Point)">
      <summary>
            Displays the object context menu.
            </summary>
      <param name="pos">Specifies the location at which the menu should be displayed.</param>
      <remarks>
        <p>Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanShowObjectContextMenu" /> property to determine whether the object context menu can be displayed at this time.  The context menu used is the <see cref="P:Leadtools.Annotations.AnnAutomationObject.ContextMenu" /> for the object type currently bring edited.  If the value of <see cref="P:Leadtools.Annotations.AnnAutomationObject.ContextMenu" /> is null (Nothing in Visual Basic), this method will not do anything.</p>
        <p>This <see cref="T:Leadtools.Annotations.AnnAutomation" /> will call this method when the user right-clicks the mouse cursor over the currently selected (edited) object.  If the user clicks outside any selected objects, the <see cref="M:Leadtools.Annotations.AnnAutomation.ShowContextMenu(System.Drawing.Point)" /> method will be called instead.  You can call this method to display this context menu manually (for example, as a result from clicking on a certain menu item in your application).</p>
        <p>If the <see cref="P:Leadtools.Annotations.AnnAutomationManager.ContextMenu" /> value is null (Nothing in Visual Basic), this method will not do anything.</p>
      </remarks>
      <example>
        <para>This example shows the object context menu</para>
        <code lang="VB">      Public Sub AnnAutomation_ShowObjectContextMenu(ByVal automation As AnnAutomation)
         ' first add a new object to the automation
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.Yellow)
         automation.Container.Objects.Add(rectObj)
         automation.Viewer.Invalidate(rectObj.InvalidRectangle)
         ' make sure no objects are selected in the automation
         automation.SelectNone()

         ' show the object context menu (this should show a message informing you that no objects are currently selected (bring edited)
         ShowContextMenu(automation)

         ' select (edit) the object we have just added
         automation.StartEditing(rectObj, False)

         ' show the object context menu (should show the object context menu)
         ShowContextMenu(automation)
      End Sub

      Private Sub ShowContextMenu(ByVal automation As AnnAutomation)
         ' check if we can show the context menu
         If automation.CanShowObjectContextMenu Then
            ' use the right-bottom position of the object invalid rectangle as the position of the menu
            Dim rc As Rectangle = automation.CurrentEditObject.InvalidRectangle
            Dim pos As Point = New Point(rc.Right, rc.Bottom)
            automation.ShowObjectContextMenu(pos)
         Else
            MessageBox.Show("Cannot show the object context menu because no object is currently being edited (selected)")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ShowObjectContextMenu(AnnAutomation automation)
      {
         // first add a new object to the automation
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.Yellow);
         automation.Container.Objects.Add(rectObj);
         automation.Viewer.Invalidate(rectObj.InvalidRectangle);
         // make sure no objects are selected in the automation
         automation.SelectNone();

         // show the object context menu (this should show a message informing you that no objects are currently selected (bring edited)
         ShowContextMenu(automation);

         // select (edit) the object we have just added
         automation.StartEditing(rectObj, false);

         // show the object context menu (should show the object context menu)
         ShowContextMenu(automation);
      }

      private void ShowContextMenu(AnnAutomation automation)
      {
         // check if we can show the context menu
         if(automation.CanShowObjectContextMenu)
         {
            // use the right-bottom position of the object invalid rectangle as the position of the menu
            Rectangle rc = automation.CurrentEditObject.InvalidRectangle;
            Point pos = new Point(rc.Right, rc.Bottom);
            automation.ShowObjectContextMenu(pos);
         }
         else
            MessageBox.Show("Cannot show the object context menu because no object is currently being edited (selected)");
      }</code>
        <!--AnnAutomation.ShowObjectContextMenu-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Lock">
      <summary>
            Locks the object(s) currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanLock" /> property to determine whether you can currently call this method.</p>
        <p>This method opens the <see cref="P:Leadtools.Annotations.AnnAutomationManager.PasswordDialogType" /> form and uses the value entered in this dialog as the password to <see cref="M:Leadtools.Annotations.AnnObject.Lock(System.String)" />.</p>
        <p>If the <see cref="P:Leadtools.Annotations.AnnAutomationManager.PasswordDialogType" /> value is null (Nothing in Visual Basic), this method will not do anything.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see>.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_Lock(ByVal automation As AnnAutomation)
         ' first add a new object to the automation
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.Yellow)
         automation.Container.Objects.Add(rectObj)
         automation.Viewer.Invalidate(rectObj.InvalidRectangle)
         ' make sure no objects are selected in the automation
         automation.SelectNone()

         ' see if we can lock or unlock the object (this should show a message informing you that no objects are currently selected (bring edited)
         LockUnlock(automation)

         ' select (edit) the object we have just added
         automation.StartEditing(rectObj, False)

         ' see if we can lock or unlock the object (should show the password dialog to lock the object)
         LockUnlock(automation)

         ' see if we can lock or unlock the object (should show the password dialog to unlock the object)
         LockUnlock(automation)
      End Sub

      Private Sub LockUnlock(ByVal automation As AnnAutomation)
         ' first, check if we can lock the object
         If automation.CanLock Then
            ' lock this object
            automation.Lock()
         ElseIf automation.CanUnlock Then
            ' unlock this object
            automation.Unlock()
         Else
            MessageBox.Show("Cannot lock or unlock because no object is currently being edited (selected)")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_Lock(AnnAutomation automation)
      {
         // first add a new object to the automation
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.Yellow);
         automation.Container.Objects.Add(rectObj);
         automation.Viewer.Invalidate(rectObj.InvalidRectangle);
         // make sure no objects are selected in the automation
         automation.SelectNone();

         // see if we can lock or unlock the object (this should show a message informing you that no objects are currently selected (bring edited)
         LockUnlock(automation);

         // select (edit) the object we have just added
         automation.StartEditing(rectObj, false);

         // see if we can lock or unlock the object (should show the password dialog to lock the object)
         LockUnlock(automation);

         // see if we can lock or unlock the object (should show the password dialog to unlock the object)
         LockUnlock(automation);
      }

      private void LockUnlock(AnnAutomation automation)
      {
         // first, check if we can lock the object
         if(automation.CanLock)
         {
            // lock this object
            automation.Lock();
         }
         else if(automation.CanUnlock)
         {
            // unlock this object
            automation.Unlock();
         }
         else
            MessageBox.Show("Cannot lock or unlock because no object is currently being edited (selected)");
      }</code>
        <!--AnnAutomation.Lock-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Unlock">
      <summary>
            Unlocks the object(s) currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanUnlock" /> property to determine whether you can currently call this method.</p>
        <p>This method opens the <see cref="P:Leadtools.Annotations.AnnAutomationManager.PasswordDialogType" /> form and uses the value entered in this dialog as the password to <see cref="M:Leadtools.Annotations.AnnObject.Unlock(System.String)" />.</p>
        <p>If the <see cref="P:Leadtools.Annotations.AnnAutomationManager.PasswordDialogType" /> value is null (Nothing in Visual Basic), this method will not do anything.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.Lock" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction">
      <summary>
            Realizes the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanRealizeRedaction" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)" /> method of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> class.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_RealizeRedaction(ByVal automation As AnnAutomation)
         ' first add a new redaction object to the automation
         Dim redaction As AnnRedactionObject = New AnnRedactionObject()
         redaction.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         automation.Container.Objects.Add(redaction)
         automation.Viewer.Invalidate(redaction.InvalidRectangle)
         ' make sure no objects are selected in the automation
         automation.SelectNone()

         ' see if we can realize or restore the object (this should show a message informing you that no objects are currently selected (bring edited)
         RealizeRestoreRedaction(automation)

         ' select (edit) the object we have just added
         automation.StartEditing(redaction, False)

         ' see if we can realize/restore the object (should realize the redaction)
         RealizeRestoreRedaction(automation)

         ' see if we can realize/restore the object (should restore the redaction)
         RealizeRestoreRedaction(automation)
      End Sub

      Private Sub RealizeRestoreRedaction(ByVal automation As AnnAutomation)
         ' first, check if we can realize or restore the object
         If automation.CanRealizeRedaction Then
            ' realize
            automation.RealizeRedaction()
            MessageBox.Show("Redaction object has been realized")
         ElseIf automation.CanRestoreRedaction Then
            ' restore this object
            automation.RestoreRedaction()
            MessageBox.Show("Redaction object has been restored")
         Else
            MessageBox.Show("Cannot realize or restore because no redaction object is currently being edited (selected)")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_RealizeRedaction(AnnAutomation automation)
      {
         // first add a new redaction object to the automation
         AnnRedactionObject redaction = new AnnRedactionObject();
         redaction.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         automation.Container.Objects.Add(redaction);
         automation.Viewer.Invalidate(redaction.InvalidRectangle);
         // make sure no objects are selected in the automation
         automation.SelectNone();

         // see if we can realize or restore the object (this should show a message informing you that no objects are currently selected (bring edited)
         RealizeRestoreRedaction(automation);

         // select (edit) the object we have just added
         automation.StartEditing(redaction, false);

         // see if we can realize/restore the object (should realize the redaction)
         RealizeRestoreRedaction(automation);

         // see if we can realize/restore the object (should restore the redaction)
         RealizeRestoreRedaction(automation);
      }

      private void RealizeRestoreRedaction(AnnAutomation automation)
      {
         // first, check if we can realize or restore the object
         if(automation.CanRealizeRedaction)
         {
            // realize
            automation.RealizeRedaction();
            MessageBox.Show("Redaction object has been realized");
         }
         else if(automation.CanRestoreRedaction)
         {
            // restore this object
            automation.RestoreRedaction();
            MessageBox.Show("Redaction object has been restored");
         }
         else
            MessageBox.Show("Cannot realize or restore because no redaction object is currently being edited (selected)");
      }</code>
        <!--AnnAutomation.RealizeRedaction-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction">
      <summary>
            Restores the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanRestoreRedaction" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="M:Leadtools.Annotations.AnnRedactionObject.Restore(Leadtools.WinForms.RasterImageViewer)" /> method of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> class.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions">
      <summary>
            Realizes all the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanRealizeAllRedactions" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.<see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)" /> method for all <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects that have the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> value set to false.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_RealizeAllRedactions(ByVal automation As AnnAutomation)
         ' remove all objects from this automation
         automation.SelectAll()
         automation.Delete()
         ' see if we can realize or restore all the redaction objects (this should show a message informing you there are no redaction objects in this automation)
         RealizeRestoreAllRedactions(automation)

         ' first add a couple of new redaction object to the automation
         Dim redaction As AnnRedactionObject = New AnnRedactionObject()
         redaction.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         automation.Container.Objects.Add(redaction)
         automation.Viewer.Invalidate(redaction.InvalidRectangle)

         redaction = New AnnRedactionObject()
         redaction.Bounds = New AnnRectangle(300, 300, 100, 100, AnnUnit.Pixel)
         automation.Container.Objects.Add(redaction)
         automation.Viewer.Invalidate(redaction.InvalidRectangle)

         ' see if we can realize/restore the objects (should realize the redactions)
         RealizeRestoreAllRedactions(automation)

         ' see if we can realize/restore the objects (should restore the redactions)
         RealizeRestoreAllRedactions(automation)
      End Sub

      Private Sub RealizeRestoreAllRedactions(ByVal automation As AnnAutomation)
         If automation.CanRealizeAllRedactions Then
            ' realize
            automation.RealizeAllRedactions()
            MessageBox.Show("Redaction objects have been realized")
         ElseIf automation.CanRestoreAllRedactions Then
            ' restore
            automation.RestoreAllRedactions()
            MessageBox.Show("Redaction objects have been restored")
         Else
            MessageBox.Show("Cannot realize or restore because no redaction object is currently in this automation")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_RealizeAllRedactions(AnnAutomation automation)
      {
         // remove all objects from this automation
         automation.SelectAll();
         automation.Delete();
         // see if we can realize or restore all the redaction objects (this should show a message informing you there are no redaction objects in this automation)
         RealizeRestoreAllRedactions(automation);

         // first add a couple of new redaction object to the automation
         AnnRedactionObject redaction = new AnnRedactionObject();
         redaction.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         automation.Container.Objects.Add(redaction);
         automation.Viewer.Invalidate(redaction.InvalidRectangle);

         redaction = new AnnRedactionObject();
         redaction.Bounds = new AnnRectangle(300, 300, 100, 100, AnnUnit.Pixel);
         automation.Container.Objects.Add(redaction);
         automation.Viewer.Invalidate(redaction.InvalidRectangle);

         // see if we can realize/restore the objects (should realize the redactions)
         RealizeRestoreAllRedactions(automation);

         // see if we can realize/restore the objects (should restore the redactions)
         RealizeRestoreAllRedactions(automation);
      }

      private void RealizeRestoreAllRedactions(AnnAutomation automation)
      {
         if(automation.CanRealizeAllRedactions)
         {
            // realize
            automation.RealizeAllRedactions();
            MessageBox.Show("Redaction objects have been realized");
         }
         else if(automation.CanRestoreAllRedactions)
         {
            // restore
            automation.RestoreAllRedactions();
            MessageBox.Show("Redaction objects have been restored");
         }
         else
            MessageBox.Show("Cannot realize or restore because no redaction object is currently in this automation");
      }</code>
        <!--AnnAutomation.RealizeAllRedactions-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.RestoreAllRedactions">
      <summary>
            Restores all of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanRestoreAllRedactions" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="M:Leadtools.Annotations.AnnRedactionObject.Realize(Leadtools.WinForms.RasterImageViewer)" /> method of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> class for all <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects that have the <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> value set to true.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor">
      <summary>
            Applies the encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanApplyEncryptor" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /><see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> method.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_ApplyEncryptor(ByVal automation As AnnAutomation)
         ' first add a new encrypt object to the automation
         Dim encrypt As AnnEncryptObject = New AnnEncryptObject()
         encrypt.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         encrypt.Key = 123
         automation.Container.Objects.Add(encrypt)
         automation.Viewer.Invalidate(encrypt.InvalidRectangle)
         ' make sure no objects are selected in the automation
         automation.SelectNone()

         ' see if we can apply the encryptor or decryptor (this should show a message informing you that no objects are currently selected (bring edited)
         EncryptDecrypt(automation)

         ' select (edit) the object we have just added
         automation.StartEditing(encrypt, False)

         ' see if we can apply the encryptor or decryptor (should apply the encryptor)
         EncryptDecrypt(automation)

         ' see if we can apply the encryptor or decryptor (should apply the decryptor)
         EncryptDecrypt(automation)
      End Sub

      Private Sub EncryptDecrypt(ByVal automation As AnnAutomation)
         ' first, check if we can apply the encryptor or decryptor
         If automation.CanApplyEncryptor Then
            ' apply the encryptor
            automation.ApplyEncryptor()
            MessageBox.Show("Encryptor has been applied")
         ElseIf automation.CanApplyDecryptor Then
            ' apply the decryptor
            automation.ApplyDecryptor()
            MessageBox.Show("Decryptor has been applied")
         Else
            MessageBox.Show("Cannot apply encryptor or decryptor because no encrypt object is currently being edited (selected)")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ApplyEncryptor(AnnAutomation automation)
      {
        // first add a new encrypt object to the automation
        AnnEncryptObject encrypt = new AnnEncryptObject();
        encrypt.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
        encrypt.Key = 123;
        automation.Container.Objects.Add(encrypt);
        automation.Viewer.Invalidate(encrypt.InvalidRectangle);
        // make sure no objects are selected in the automation
        automation.SelectNone();

        // see if we can apply the encryptor or decryptor (this should show a message informing you that no objects are currently selected (bring edited)
        EncryptDecrypt(automation);

        // select (edit) the object we have just added
        automation.StartEditing(encrypt, false);

        // see if we can apply the encryptor or decryptor (should apply the encryptor)
        EncryptDecrypt(automation);

        // see if we can apply the encryptor or decryptor (should apply the decryptor)
        EncryptDecrypt(automation);
     }

     private void EncryptDecrypt(AnnAutomation automation)
     {
        // first, check if we can apply the encryptor or decryptor
        if(automation.CanApplyEncryptor)
        {
           // apply the encryptor
           automation.ApplyEncryptor();
           MessageBox.Show("Encryptor has been applied");
        }
        else if(automation.CanApplyDecryptor)
        {
           // apply the decryptor
           automation.ApplyDecryptor();
           MessageBox.Show("Decryptor has been applied");
        }
        else
           MessageBox.Show("Cannot apply encryptor or decryptor because no encrypt object is currently being edited (selected)");
     }</code>
        <!--AnnAutomation.ApplyEncryptor-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ApplyDecryptor">
      <summary>
            Applies the decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> that is currently being edited (selected).
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanApplyDecryptor" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /><see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> method.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors">
      <summary>
            Applies all the encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanApplyAllEncryptors" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /><see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> method for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects that have the <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanEncrypt" /> value set to true.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_ApplyAllEncryptors(ByVal automation As AnnAutomation)
         ' remove all objects from this automation
         automation.SelectAll()
         automation.Delete()
         ' see if we can apply all the encryptor or decrytor objects (this should show a message informing you there are no encrypt objects in this automation)
         EncryptDecryptAll(automation)

         ' first add a new a couple of encrypt object to the automation
         Dim encrypt As AnnEncryptObject = New AnnEncryptObject()
         encrypt.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         encrypt.Key = 123
         automation.Container.Objects.Add(encrypt)
         automation.Viewer.Invalidate(encrypt.InvalidRectangle)

         encrypt = New AnnEncryptObject()
         encrypt.Bounds = New AnnRectangle(300, 300, 100, 100, AnnUnit.Pixel)
         encrypt.Key = 456
         automation.Container.Objects.Add(encrypt)
         automation.Viewer.Invalidate(encrypt.InvalidRectangle)

         ' see if we can apply all encryptor objects (should apply the encryptors)
         EncryptDecryptAll(automation)

         ' see if we can apply all decryptor objects (should apply the decryptors)
         EncryptDecryptAll(automation)
      End Sub

      Private Sub EncryptDecryptAll(ByVal automation As AnnAutomation)
         If automation.CanApplyAllEncryptors Then
            ' apply encryptors
            automation.ApplyAllEncryptors()
            MessageBox.Show("Encryptor objects has been applied")
         ElseIf automation.CanApplyAllDecryptors Then
            ' apply decryptors
            automation.ApplyAllDecryptors()
            MessageBox.Show("Decryptor objects has been applied")
         Else
            MessageBox.Show("Cannot apply encryptors or decryptors because no encrypt object is currently in this automation")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ApplyAllEncryptors(AnnAutomation automation)
      {
         // remove all objects from this automation
         automation.SelectAll();
         automation.Delete();
         // see if we can apply all the encryptor or decrytor objects (this should show a message informing you there are no encrypt objects in this automation)
         EncryptDecryptAll(automation);

         // first add a new a couple of encrypt object to the automation
         AnnEncryptObject encrypt = new AnnEncryptObject();
         encrypt.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         encrypt.Key = 123;
         automation.Container.Objects.Add(encrypt);
         automation.Viewer.Invalidate(encrypt.InvalidRectangle);

         encrypt = new AnnEncryptObject();
         encrypt.Bounds = new AnnRectangle(300, 300, 100, 100, AnnUnit.Pixel);
         encrypt.Key = 456;
         automation.Container.Objects.Add(encrypt);
         automation.Viewer.Invalidate(encrypt.InvalidRectangle);

         // see if we can apply all encryptor objects (should apply the encryptors)
         EncryptDecryptAll(automation);

         // see if we can apply all decryptor objects (should apply the decryptors)
         EncryptDecryptAll(automation);
      }

      private void EncryptDecryptAll(AnnAutomation automation)
      {
         if(automation.CanApplyAllEncryptors)
         {
            // apply encryptors
            automation.ApplyAllEncryptors();
            MessageBox.Show("Encryptor objects has been applied");
         }
         else if(automation.CanApplyAllDecryptors)
         {
            // apply decryptors
            automation.ApplyAllDecryptors();
            MessageBox.Show("Decryptor objects has been applied");
         }
         else
            MessageBox.Show("Cannot apply encryptors or decryptors because no encrypt object is currently in this automation");
      }</code>
        <!--AnnAutomation.ApplyAllEncryptors-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ApplyAllDecryptors">
      <summary>
            Applies all the decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanApplyAllDecryptors" /> property to determine whether you can currently call this method.</p>
        <p>This method will call the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /><see cref="M:Leadtools.Annotations.AnnEncryptObject.Apply(Leadtools.WinForms.RasterImageViewer)" /> method for all <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects that have the <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanDecrypt" /> value set to true.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" />.
            </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Flip(System.Boolean)">
      <summary>
            Flips the objects that are currently being edited (selected) in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <param name="horizontal">true to flip the object horizontally (reverse); false to flip the object vertically.</param>
      <remarks>
        <p>
          <see cref="T:Leadtools.Annotations.AnnAutomation" /> can flip one or more <see cref="T:Leadtools.Annotations.AnnObject" /> if they are currently in edit mode (selected) and these objects are not locked.</p>
        <p>If objects are grouped together the group is flipped as a unit.</p>
        <p>Call the <see cref="P:Leadtools.Annotations.AnnAutomation.CanFlip" /> property to determine whether you can call this method.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_Flip(ByVal automation As AnnAutomation)
         ' make sure no objects are selected
         automation.SelectNone()
         ' see if we can flip? (should say no)
         If (Not automation.CanFlip) Then
            MessageBox.Show("Cannot flip objects because no objects are selected")
         End If

         ' add a text object and select it
         Dim text As AnnTextObject = New AnnTextObject()
         text.Font = New AnnFont("Arial", New AnnLength(20, AnnUnit.Point), FontStyle.Bold)
         text.TextColor = Color.Red
         text.Text = "Flip Me!"
         text.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
         automation.Container.Objects.Add(text)
         automation.StartEditing(text, False)

         ' flip this object vertically
         MessageBox.Show("Now we are going to flip this text vertically")
         If automation.CanFlip Then
            automation.Flip(False)
         End If

         ' flip this object horizontally (reverse)
         MessageBox.Show("Now we are going to flip this text horizontally (reverse it)")
         If automation.CanFlip Then
            automation.Flip(True)
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_Flip(AnnAutomation automation)
      {
         // make sure no objects are selected
         automation.SelectNone();
         // see if we can flip? (should say no)
         if(!automation.CanFlip)
            MessageBox.Show("Cannot flip objects because no objects are selected");

         // add a text object and select it
         AnnTextObject text = new AnnTextObject();
         text.Font = new AnnFont("Arial", new AnnLength(20, AnnUnit.Point), FontStyle.Bold);
         text.TextColor = Color.Red;
         text.Text = "Flip Me!";
         text.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
         automation.Container.Objects.Add(text);
         automation.StartEditing(text, false);

         // flip this object vertically
         MessageBox.Show("Now we are going to flip this text vertically");
         if(automation.CanFlip)
            automation.Flip(false);

         // flip this object horizontally (reverse)
         MessageBox.Show("Now we are going to flip this text horizontally (reverse it)");
         if(automation.CanFlip)
            automation.Flip(true);
      }</code>
        <!--AnnAutomation.Flip-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.PlayAudio">
      <summary>
            Plays the <see cref="T:Leadtools.Annotations.AnnAudioObject" /> object that is currently being edited (selected) in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>
          <see cref="T:Leadtools.Annotations.AnnAutomation" /> can play one or more <see cref="T:Leadtools.Annotations.AnnAudioObject" /> if they are currently in edit mode (selected) and the value of the <see cref="P:Leadtools.Annotations.AnnAudioObject.CanPlay" /> property is true.</p>
        <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanPlayAudio" /> property to determine whether you can call this method.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_PlayAudio(ByVal automation As AnnAutomation, ByVal audioFilename As String)
         ' make sure no objects are selected
         automation.SelectNone()
         ' see if we can play audio (should say no)
         If (Not automation.CanPlayAudio) Then
            MessageBox.Show("Cannot play audio")
         End If

         ' add an audio object and select it
         Dim audio As AnnAudioObject = New AnnAudioObject()
         audio.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
         automation.Container.Objects.Add(audio)
         automation.StartEditing(audio, False)

         ' see if we can play audio 
         ' (should say no, since the audio object does not have an audio file in the filename yet)
         If (Not automation.CanPlayAudio) Then
            MessageBox.Show("Cannot play audio")
         End If

         ' set up the filename for this audio object
         audio.FileName = audioFilename

         ' see if we can play audio (should play it now)
         If automation.CanPlayAudio Then
            automation.PlayAudio()
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_PlayAudio(AnnAutomation automation, string audioFilename)
      {
         // make sure no objects are selected
         automation.SelectNone();
         // see if we can play audio (should say no)
         if(!automation.CanPlayAudio)
            MessageBox.Show("Cannot play audio");

         // add an audio object and select it
         AnnAudioObject audio = new AnnAudioObject();
         audio.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
         automation.Container.Objects.Add(audio);
         automation.StartEditing(audio, false);

         // see if we can play audio 
         // (should say no, since the audio object does not have an audio file in the filename yet)
         if(!automation.CanPlayAudio)
            MessageBox.Show("Cannot play audio");

         // set up the filename for this audio object
         audio.FileName = audioFilename;

         // see if we can play audio (should play it now)
         if(automation.CanPlayAudio)
            automation.PlayAudio();
      }</code>
        <!--AnnAutomation.PlayAudio-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Realize">
      <summary>
            Draws the annotation objects inside this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <remarks>
        <p>This method will draw the annotation objects inside the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> into the <see cref="T:Leadtools.RasterImage" /> currently in the
            automation control (Either in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image">RasterImageViewer.Image</see>
            or <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">IAnnAutomationControl.AutomationRasterImage</see> depends on what control
            has been attached to this automation).</p>
        <p>Only visible objects will be painted on the <see cref="T:Leadtools.RasterImage" />.</p>
        <p>This method will draw the objects exactly as they would be painted in the current <see cref="T:Leadtools.Annotations.AnnUserMode" />.</p>
        <p>Please note that Undo does not work for this operation.</p>
        <p>If this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in design mode and there are one or more objects being edited, this method will also paint the control point selection handles on the <see cref="T:Leadtools.RasterImage" />.  To prevent drawing the control points, call the <see cref="M:Leadtools.Annotations.AnnAutomation.SelectNone" /> method before calling this method.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints">
      <summary>
                Resets the rotate control points of the selected <see cref="T:Leadtools.Annotations.AnnObject" /> to
                their default locations.
            </summary>
      <seealso cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" />
      <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />
      <remarks>
        <para>
                    If displaying rotate control points (see
                    <see cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />), two rotate control
                    points are displayed for a selected <see cref="T:Leadtools.Annotations.AnnObject" />:
                </para>
        <list type="bullet">
          <item>
            <description>Rotate center control point</description>
          </item>
          <item>
            <description>Rotate gripper control point</description>
          </item>
        </list>
        <para>This method will reset the rotate control points to their default
                locations.</para>
        <para>
                    Use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" /> property to determine whether
                    you can call this method.
                </para>
        <para>
                    For more information, refer to
                    <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation
                    Features of Version 14.5</see>.
                </para>
      </remarks>
      <example>
        <para>This example determines if the rotate control points can be reset to the default location. For <see cref="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints" /> to be true the following must hold:
             <list type="number"><item><description>An AnnObject must be selected and </description></item><item><description>UseRotateControlPoints must be true</description></item></list></para>
        <code lang="VB">      Public Sub AnnAutomation_ResetRotatePoints(ByVal automation As AnnAutomation)
         If automation.CanResetRotatePoints Then
            automation.ResetRotatePoints()
         Else
            MessageBox.Show("The rotate control points cannot be reset!")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ResetRotatePoints(AnnAutomation automation)
      {
         if (automation.CanResetRotatePoints)
            automation.ResetRotatePoints();
         else
            MessageBox.Show("The rotate control points cannot be reset!");
      }</code>
        <!--AnnAutomation.ResetRotatePoints-->
      </example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)">
      <summary>
            Attaches this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object with a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object.
            </summary>
      <isnew>2/28/2009</isnew>
      <param name="viewer">The raster viewer for this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> to associate a raster viewer object with an automation object.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> constructor internally calls <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> to associate the viewer object with itself.</para>
        <para>Using <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> allows you to easily use one <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object to view multiple automation objects. For an
            example, refer to the DocumentWritersDemo example code that ship with LEADTOOLS.</para>
        <para>
          <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> should be used when you are using the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />
            with this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object (by creating the object using the 
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">AnnAutomation(AnnAutomationManager, RasterImageViewer)</see> constructor).
            When using automation with your own controls, you must instead use the <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> methods instead.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.DetachViewer">
      <summary>
            Detaches this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object from its <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object.
            </summary>
      <isnew>2/28/2009</isnew>
      <remarks>
        <para>Use <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> to associate a raster viewer object with an automation object.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> constructor internally calls <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> to associate the viewer object with itself.</para>
        <para>Using <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> allows you to easily use one <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object to
            view multiple automation objects. For an example, refer to the DocumentWritersDemo example code that ships with LEADTOOLS.</para>
        <para>
          <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> should be used when you are using the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />
            with this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object (by creating the object using the 
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">AnnAutomation(AnnAutomationManager, RasterImageViewer)</see> constructor).
            When using automation with your own controls, you must instead use the <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> methods instead.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</example>
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)">
      <summary>
            Attaches this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object with a <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> object.
            </summary>
      <param name="automationControl">The automation control for this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> to associate a control that implements <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> with an
            automation object.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> constructor internally calls <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> to associate the control with itself.</para>
        <para>Using <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> allows you to easily use one <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> object to view
            multiple automation objects.</para>
        <para>
          <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> should be used when you are using the <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> class
            with this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object (by creating the object using the 
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation(AnnAutomationManager, IAnnAutomationControl)</see> constructor).
            When using automation with the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />, you must instead use the <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and
            <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> methods instead.</para>
        <para>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</para>
      </remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="M:Leadtools.Annotations.AnnAutomation.Detach">
      <summary>
            Detaches this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object from its <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> object.
            </summary>
      <remarks>
        <para>Use <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> to associate an automation control with an automation object.</para>
        <para>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> constructor internally calls <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> to associate the control with itself.</para>
        <para>Using <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> allows you to easily use one <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> object to
            view multiple automation objects.</para>
        <para>
          <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" /> and <see cref="M:Leadtools.Annotations.AnnAutomation.Detach" /> should be used when you are using the <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> class
            with this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object (by creating the object using the 
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation(AnnAutomationManager, IAnnAutomationControl)</see> constructor).
            When using automation with the LEADTOOLS <see cref="T:Leadtools.WinForms.RasterImageViewer" />, you must instead use the <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" /> and
            <see cref="M:Leadtools.Annotations.AnnAutomation.DetachViewer" /> methods instead.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> for an example on how to use LEADTOOLS annotations with your own controls.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.UndoCapacity">
      <summary>
            Gets or sets a value that specifies the capacity of the undo/redo buffer.
            </summary>
      <value>
            The number of user actions that can be reversed using <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> or re-applied using <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" />.
            </value>
      <remarks>
        <p>The <see cref="T:Leadtools.Annotations.AnnAutomation" /> class keeps an internal undo/redo buffer.  This internal buffer is updated automatically whenever the user changes objects inside the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> property.</p>
        <p>The <b>UndoCapacity</b> property specifies the maximum number of items that are held inside this internal buffer. The default is set at 10. For example, if this buffer has a value of 10, the last 10 reversible operations will be saved in the buffer.  Once the internal buffer capacity is reached, each new operation causes the operation at the bottom of the buffer to be removed.</p>
        <p>Setting an <b>UndoCapacity</b> of 0 disables the undo/redo functionality for this <see cref="T:Leadtools.Annotations.AnnAutomation" /> object.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.Manager">
      <summary>
            Returns the automation manager to which this <see cref="T:Leadtools.Annotations.AnnAutomation" /> belongs.
            </summary>
      <value>
            The <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> to which this <see cref="T:Leadtools.Annotations.AnnAutomation" /> belongs.  This is the same value passed to the <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> constructor.
            </value>
      <remarks>(Read only) </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.Viewer">
      <summary>
            Gets the raster viewer for this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control for this <see cref="T:Leadtools.Annotations.AnnAutomation" /></value>
      <remarks>
        <para>If this <see cref="T:Leadtools.Annotations.AnnAutomation" /> was created with an instance of <see cref="T:Leadtools.WinForms.RasterImageViewer" /> using the
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.WinForms.RasterImageViewer)">AnnAutomation(AnnAutomationManager, RasterImageViewer)</see> method, then
            this property will return the instance of this <see cref="T:Leadtools.WinForms.RasterImageViewer" /> (or the viewer subsequently attached with <see cref="M:Leadtools.Annotations.AnnAutomation.AttachViewer(Leadtools.WinForms.RasterImageViewer)" />).</para>
        <para>In the above case, every <see cref="T:Leadtools.Annotations.AnnAutomation" /> has one <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control and one <see cref="T:Leadtools.Annotations.AnnContainer" /> object.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.AutomationControl">
      <summary>
            Gets the automation control for this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> control for this <see cref="T:Leadtools.Annotations.AnnAutomation" /></value>
      <remarks>
        <para>If this <see cref="T:Leadtools.Annotations.AnnAutomation" /> was created with an instance of <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> using the
            <see cref="M:Leadtools.Annotations.AnnAutomation.#ctor(Leadtools.Annotations.AnnAutomationManager,Leadtools.Annotations.IAnnAutomationControl)">AnnAutomation(AnnAutomationManager, IAnnAutomationControl)</see> method, then
            this property will return the instance of this <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> (or the control subsequently attached with <see cref="M:Leadtools.Annotations.AnnAutomation.Attach(Leadtools.Annotations.IAnnAutomationControl)" />).</para>
        <para>In the above case, every <see cref="T:Leadtools.Annotations.AnnAutomation" /> has one <see cref="T:Leadtools.Annotations.IAnnAutomationControl" /> control and one <see cref="T:Leadtools.Annotations.AnnContainer" /> object.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.IAnnAutomationControl" />.</example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.Container">
      <summary>
            Gets the annotation container of this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>The <see cref="T:Leadtools.Annotations.AnnContainer" /> object of this <see cref="T:Leadtools.Annotations.AnnAutomation" /></value>
      <remarks>
            (Read only) Every <see cref="T:Leadtools.Annotations.AnnAutomation" /> has one <see cref="T:Leadtools.Annotations.AnnContainer" /> object.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.Active">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is active.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is active; false otherwise.</value>
      <remarks>
        <p>The collection of <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects inside a <see cref="T:Leadtools.Annotations.AnnAutomationManager" /> should have one <see cref="T:Leadtools.Annotations.AnnAutomation" /> object active at any time.  The active <see cref="T:Leadtools.Annotations.AnnAutomation" /> object is the object to which all user interface actions are directed.</p>
        <p>If the automated annotation application has only one <see cref="T:Leadtools.Annotations.AnnAutomation" /> object, it should set the <b>Active</b> property of this <see cref="T:Leadtools.Annotations.AnnAutomation" /> to true upon initilization.  No further changes are necessary.  For example, you can subscribe to the <see cref="E:System.Windows.Forms.Form.MdiChildActivate" /> event of the main form in your application and set the <b>Active</b> property to true for the <see cref="T:Leadtools.Annotations.AnnAutomation" /> object associated with the currently active MDI child form.</p>
        <p>If the automated annotation application has more than one <see cref="T:Leadtools.Annotations.AnnAutomation" />, it should set the <b>Active</b> property of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> attached to the currently active form to true.</p>
        <p>Setting the <b>Active</b> value of one <see cref="T:Leadtools.Annotations.AnnAutomation" /> in the <see cref="P:Leadtools.Annotations.AnnAutomationManager.Automations" /> property to true, will cause the <b>Active</b> property of all other <see cref="T:Leadtools.Annotations.AnnAutomation" /> objects inside this collection to be set to false.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Annotations.AnnAutomationManager" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner">
      <summary>
            Gets the current working designer.
            </summary>
      <value>The current working <see cref="T:Leadtools.Annotations.AnnDesigner" /> derived object</value>
      <remarks>
        <p>(Read only) At any given time, the <see cref="T:Leadtools.Annotations.AnnAutomation" /> can have a working <see cref="T:Leadtools.Annotations.AnnDesigner" /> derived object as follows:
            <list type="table"><listheader><term>Designer Base Class</term><description>Notes</description></listheader><item><term>null (Nothing in Visual Basic)</term><description>(Design and Run user mode) no designer is currently active.</description></item><item><term><see cref="T:Leadtools.Annotations.AnnDrawDesigner" /></term><description>(Design user mode) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently drawing or about to draw a new object</description></item><item><term><see cref="T:Leadtools.Annotations.AnnEditDesigner" /></term><description>(Design user mode) One or more objects are currently being edited or are about to be edited</description></item><item><term><see cref="T:Leadtools.Annotations.AnnRunDesigner" /></term><description>(Run user mode) An object is currently being run or about to be run</description></item></list></p>
        <p>
            This property allows you to hook into the current designer and change or monitor its status while it is running.  For example, you can determine if <b>CurrentDesigner</b> is an <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> derived class and subscribe to the <see cref="E:Leadtools.Annotations.AnnDrawDesigner.Draw" /> event and so forth.
            </p>
      </remarks>
      <example>
        <para>This example subscribes to the <see cref="E:Leadtools.Annotations.AnnAutomation.CurrentDesignerChanged" /> event of an <see cref="T:Leadtools.Annotations.AnnAutomation" /> object and the Run event of the <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> to show an information message box when an object is clicked while in Run user mode.</para>
        <code lang="VB">      Public Sub AnnAutomation_CurrentDesigner(ByVal automation As AnnAutomation)
         ' subscribe to the DesignerChanged event of the automation
         AddHandler automation.CurrentDesignerChanged, AddressOf automation_CurrentDesignerChanged
      End Sub
      Private Sub automation_CurrentDesignerChanged(ByVal sender As Object, ByVal e As EventArgs)
         ' check if the current designer is a run designer
         Dim automation As AnnAutomation = CType(IIf(TypeOf sender Is AnnAutomation, sender, Nothing), AnnAutomation)
         If Not automation.CurrentDesigner Is Nothing AndAlso TypeOf automation.CurrentDesigner Is AnnRunDesigner Then
            Dim runDesigner As AnnRunDesigner = CType(IIf(TypeOf automation.CurrentDesigner Is AnnRunDesigner, automation.CurrentDesigner, Nothing), AnnRunDesigner)
            ' subscribe to this run designer Run event
            AddHandler runDesigner.Run, AddressOf runDesigner_Run
         End If
      End Sub

      Private Sub runDesigner_Run(ByVal sender As Object, ByVal e As AnnRunDesignerEventArgs)
         If e.OperationStatus = AnnDesignerOperationStatus.End Then
            Dim message As String = String.Format("Run object of type {0}, hyperlink = {1}", e.Object.GetType().Name, e.Object.Hyperlink)
            MessageBox.Show(message)
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CurrentDesigner(AnnAutomation automation)
      {
         // subscribe to the DesignerChanged event of the automation
         automation.CurrentDesignerChanged += new EventHandler(automation_CurrentDesignerChanged);
      }
      private void automation_CurrentDesignerChanged(object sender, EventArgs e)
      {
         // check if the current designer is a run designer
         AnnAutomation automation = sender as AnnAutomation;
         if (automation.CurrentDesigner != null &amp;&amp; automation.CurrentDesigner is AnnRunDesigner)
         {
            AnnRunDesigner runDesigner = automation.CurrentDesigner as AnnRunDesigner;
            // subscribe to this run designer Run event
            runDesigner.Run += new EventHandler&lt;AnnRunDesignerEventArgs&gt;(runDesigner_Run);
         }
      }

      private void runDesigner_Run(object sender, AnnRunDesignerEventArgs e)
      {
         if (e.OperationStatus == AnnDesignerOperationStatus.End)
         {
            string message = string.Format("Run object of type {0}, hyperlink = {1}", e.Object.GetType().Name, e.Object.Hyperlink);
            MessageBox.Show(message);
         }
      }</code>
        <!--AnnAutomation.CurrentDesigner-->
      </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomation.CurrentDesignerChanged">
      <summary>
            Occurs when the current designer has changed.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
        <p>At any given time, the <see cref="T:Leadtools.Annotations.AnnAutomation" /> can have a working <see cref="T:Leadtools.Annotations.AnnDesigner" /> derived object as follows:
            <list type="table"><listheader><term>Designer Base Class</term><description>Notes</description></listheader><item><term>null (Nothing in Visual Basic)</term><description>(Design and Run user mode) no designer is currently active.</description></item><item><term><see cref="T:Leadtools.Annotations.AnnDrawDesigner" /></term><description>(Design user mode) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently drawing or about to draw a new object</description></item><item><term><see cref="T:Leadtools.Annotations.AnnEditDesigner" /></term><description>(Design user mode) One or more objects are currently being edited or are about to be edited</description></item><item><term><see cref="T:Leadtools.Annotations.AnnRunDesigner" /></term><description>(Run user mode) An object is currently being run or about to be run</description></item></list></p>
        <p>
            This property allows you to hook into the current designer and change or monitor its status while it is running.  For example, you can determine if <b>CurrentDesigner</b> is an <see cref="T:Leadtools.Annotations.AnnDrawDesigner" /> derived class and subscribe to the <see cref="E:Leadtools.Annotations.AnnDrawDesigner.Draw" /> event and so forth.
            </p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner" />.
            </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged">
      <summary>
            Occurs before an <see cref="T:Leadtools.Annotations.AnnObject" /> is about to be changed.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnBeforeObjectChangedEventArgs" />.</event>
      <remarks>
            This event will be fired before an <see cref="T:Leadtools.Annotations.AnnObject" /> is about to be modified by this <see cref="T:Leadtools.Annotations.AnnAutomation" /></remarks>
      <example>
        <para>This example will prevent changing the pen of all annotation objects.</para>
        <code lang="VB">      Public Sub AnnAutomation_BeforeObjectChanged(ByVal manager As AnnAutomationManager)
         ' subscribe to the BeforeObjectChanged of all automations
         For Each automation As AnnAutomation In manager.Automations
            AddHandler automation.BeforeObjectChanged, AddressOf automation_BeforeObjectChanged
         Next automation
      End Sub
      Private Sub automation_BeforeObjectChanged(ByVal sender As Object, ByVal e As AnnBeforeObjectChangedEventArgs)
         ' prevent changing the pen
         If e.ChangeType = AnnObjectChangedType.Pen Then
            e.Cancel = True
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_BeforeObjectChanged(AnnAutomationManager manager)
     {
        // subscribe to the BeforeObjectChanged of all automations
        foreach(AnnAutomation automation in manager.Automations)
           automation.BeforeObjectChanged += new EventHandler&lt;AnnBeforeObjectChangedEventArgs&gt;(automation_BeforeObjectChanged);
     }
     private void automation_BeforeObjectChanged(object sender, AnnBeforeObjectChangedEventArgs e)
     {
        // prevent changing the pen
        if(e.ChangeType == AnnObjectChangedType.Pen)
           e.Cancel = true;
     }</code>
        <!--AnnAutomation.BeforeObjectChanged-->
      </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged">
      <summary>
            Occurs after an <see cref="T:Leadtools.Annotations.AnnObject" /> has been changed.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.Annotations.AnnAfterObjectChangedEventArgs" />.</event>
      <remarks>
        <para>
            This event will be fired after an <see cref="T:Leadtools.Annotations.AnnObject" /> has been modified by this <see cref="T:Leadtools.Annotations.AnnAutomation" /></para>
        <para>
          <b>NOTE:</b> The object is not inserted into the Automation's container until this event has returned. 
            This is to allow the user to cancel the Insertion operation.
            </para>
      </remarks>
      <example>
        <para>This example will subscribe to the <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" /> event of all automations and print out a message every time an object changes.</para>
        <code lang="VB">      Public Sub AnnAutomation_AfterObjectChanged(ByVal manager As AnnAutomationManager)
         ' subscribe to the AfterObjectChanged event of all automations
         For Each automation As AnnAutomation In manager.Automations
            AddHandler automation.AfterObjectChanged, AddressOf automation_AfterObjectChanged
         Next automation
      End Sub
      Private Sub automation_AfterObjectChanged(ByVal sender As Object, ByVal e As AnnAfterObjectChangedEventArgs)
         ' print out a message
         Dim message As String

         If Not e.Objects Is Nothing AndAlso e.Objects.Count &lt; 0 Then
            message = String.Format("Objects Count: {0}, First object: {1}, Changed: {2}", e.Objects.Count, e.Objects(0).GetType().Name, e.ChangeType)
         Else
            message = String.Format("Changed: {0}", e.ChangeType)
         End If

         MessageBox.Show(message)
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_AfterObjectChanged(AnnAutomationManager manager)
      {
         // subscribe to the AfterObjectChanged event of all automations
         foreach(AnnAutomation automation in manager.Automations)
            automation.AfterObjectChanged += new EventHandler&lt;AnnAfterObjectChangedEventArgs&gt;(automation_AfterObjectChanged);
      }
      private void automation_AfterObjectChanged(object sender, AnnAfterObjectChangedEventArgs e)
      {
         // print out a message
         string message;

         if(e.Objects != null &amp;&amp; e.Objects.Count &lt; 0)
            message = string.Format("Objects Count: {0}, First object: {1}, Changed: {2}", e.Objects.Count, e.Objects[0].GetType().Name, e.ChangeType);
         else
            message = String.Format("Changed: {0}", e.ChangeType);

         MessageBox.Show(message);
      }</code>
        <!--AnnAutomation.AnnAutomation_AfterObjectChanged-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.ImageDirty">
      <summary>
            Gets or sets a value indicating whether the image in the automation control has been changed.
            </summary>
      <value>true if the image in the automation control has been changed; otherwise, false.</value>
      <remarks>
        <p>The <see cref="T:Leadtools.RasterImage" /> in the automation control (Either in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image">RasterImageViewer.Image</see>
            or <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">IAnnAutomationControl.AutomationRasterImage</see> depends on what control
            has been attached to this automation) might change after calling any of the following methods:
            <list type="bullet"><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RestoreAllRedactions" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyDecryptor" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllDecryptors" /></description></item></list></p>
        <p>You can use this property in your application to determine whether the image has been changed, if so, you might need to save the image back to its original file before you close the application.  After you have saved the image, you can set the value of this property to false to indicate that the image has been saved.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged">
      <summary>
            Occurs when the <see cref="P:Leadtools.Annotations.AnnAutomation.ImageDirty" /> value changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
        <p>This event will be fired after the <see cref="P:Leadtools.Annotations.AnnAutomation.ImageDirty" /> value changes.</p>
        <p>The <see cref="T:Leadtools.RasterImage" /> in the automation control (Either in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image">RasterImageViewer.Image</see>
            or <see cref="P:Leadtools.Annotations.IAnnAutomationControl.AutomationRasterImage">IAnnAutomationControl.AutomationRasterImage</see> depends on what control
            has been attached to this automation) might change after calling any of the following methods:
            <list type="bullet"><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.RestoreAllRedactions" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyDecryptor" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" /></description></item><item><description><see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllDecryptors" /></description></item></list></p>
        <p>You can use this event along with the <see cref="P:Leadtools.Annotations.AnnAutomation.ImageDirty" /> property to update your application user interface.</p>
      </remarks>
      <example>
        <para>This example subscribes to the <see cref="E:Leadtools.Annotations.AnnAutomation.ImageDirtyChanged" /> event of all automations in a manager, then proceeds to save the image as it changes.</para>
        <code lang="VB">      Public Sub AnnAutomation_ImageDirtyChanged(ByVal manager As AnnAutomationManager)
         ' subscribe to the ImageDirtyChanged event of all automations
         For Each automation As AnnAutomation In manager.Automations
            AddHandler automation.ImageDirtyChanged, AddressOf automation_ImageDirtyChanged
         Next automation
      End Sub

      Private Sub automation_ImageDirtyChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim automation As AnnAutomation = CType(IIf(TypeOf sender Is AnnAutomation, sender, Nothing), AnnAutomation)
         If automation.ImageDirty Then
            MessageBox.Show("Image has changed and needs saving!")

            '
            ' add code to save the automation.Viewer.Image here
            '

            ' set the ImageDirty flag to false
            automation.ImageDirty = False
         Else
            MessageBox.Show("Image has been saved!")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ImageDirtyChanged(AnnAutomationManager manager)
      {
         // subscribe to the ImageDirtyChanged event of all automations
         foreach(AnnAutomation automation in manager.Automations)
            automation.ImageDirtyChanged += new EventHandler(automation_ImageDirtyChanged);
      }

      private void automation_ImageDirtyChanged(object sender, EventArgs e)
      {
         AnnAutomation automation = sender as AnnAutomation;
         if(automation.ImageDirty)
         {
            MessageBox.Show("Image has changed and needs saving!");

            //
            // add code to save the automation.Viewer.Image here
            //

            // set the ImageDirty flag to false
            automation.ImageDirty = false;
         }
         else
            MessageBox.Show("Image has been saved!");
      }</code>
        <!--AnnAutomation.ImageDirtyChanged-->
      </example>
      <document>yes</document>
    </member>
    <member name="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged">
      <summary>
            Occurs when the undo or redo buffer changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
        <p>This event will be fired when the undo/redo buffer changes.  This gives the application a chance to update the user interface if needed.</p>
        <p>The undo/redo buffer changes whenever an object inside the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> changes either by user interaction through the user interface or by code.</p>
        <p>You can use the <see cref="P:Leadtools.Annotations.AnnAutomation.CanUndo" /> and <see cref="P:Leadtools.Annotations.AnnAutomation.CanRedo" /> property to determine whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can undo or redo an operation.</p>
        <p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p>
      </remarks>
      <example>
        <para>This example updates an Undo and Redo menu handler's status.</para>
        <code lang="VB">      Public Sub AnnAutomation_UndoRedoChanged(ByVal manager As AnnAutomationManager)
         ' subscribe to the UndoRedoChanged event of all automations
         For Each automation As AnnAutomation In manager.Automations
            AddHandler automation.UndoRedoChanged, AddressOf automation_UndoRedoChanged
         Next automation
      End Sub
      Private Sub automation_UndoRedoChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim automation As AnnAutomation = CType(IIf(TypeOf sender Is AnnAutomation, sender, Nothing), AnnAutomation)

         ' assume _menuItemUndo is the Undo menu, and _menuItemRedo is the Redo menu
         _menuItemUndo.Enabled = automation.CanUndo
         _menuItemRedo.Enabled = automation.CanRedo
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_UndoRedoChanged(AnnAutomationManager manager)
      {
         // subscribe to the UndoRedoChanged event of all automations
         foreach(AnnAutomation automation in manager.Automations)
            automation.UndoRedoChanged += new EventHandler(automation_UndoRedoChanged);
      }
      private void automation_UndoRedoChanged(object sender, EventArgs e)
      {
         AnnAutomation automation = sender as AnnAutomation;

         // assume _menuItemUndo is the Undo menu, and _menuItemRedo is the Redo menu
         _menuItemUndo.Enabled = automation.CanUndo;
         _menuItemRedo.Enabled = automation.CanRedo;
      }</code>
        <!--AnnAutomation.UndoRedoChanged-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.ClipboardObjectFormat">
      <summary>
            Returns the clipboard format name used when copying or pasting annotation objects.
            </summary>
      <value>
            The clipboard format name used when copying or pasting annotation objects.
            </value>
      <remarks>
            (Read only) This is the format name used with the <see cref="P:Leadtools.Annotations.AnnAutomation.CanCopy" /> property, the <see cref="M:Leadtools.Annotations.AnnAutomation.Copy" /> method, the <see cref="P:Leadtools.Annotations.AnnAutomation.CanPaste" /> property, and the <see cref="M:Leadtools.Annotations.AnnAutomation.Paste" /> method.
            </remarks>
      <example>
        <para>This example manually determines whether there are any objects available to paste from the clipboard.  Notice that you can use the CanPaste method instead.</para>
        <code lang="VB">      Public Sub AnnAutomation_ClipboardObjectFormat(ByVal automation As AnnAutomation)
         Dim canPaste As Boolean = False
         Dim data As IDataObject = Clipboard.GetDataObject()
         If Not data Is Nothing Then
            Dim format As DataFormats.Format = DataFormats.GetFormat(AnnAutomation.ClipboardObjectFormat)
            If data.GetDataPresent(AnnAutomation.ClipboardObjectFormat) Then
               canPaste = True
            End If
         End If

         If canPaste Then
            MessageBox.Show("Annotation information available in the clipboard")
         Else
            MessageBox.Show("No Annotation information available in the clipboard")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ClipboardObjectFormat(AnnAutomation automation)
      {
         bool canPaste = false;
         IDataObject data = Clipboard.GetDataObject();
         if(data != null)
         {
            DataFormats.Format format = DataFormats.GetFormat(AnnAutomation.ClipboardObjectFormat);
            if(data.GetDataPresent(AnnAutomation.ClipboardObjectFormat))
               canPaste = true;
         }

         if(canPaste)
            MessageBox.Show("Annotation information available in the clipboard");
         else
            MessageBox.Show("No Annotation information available in the clipboard");
      }</code>
        <!--AnnAutomation.ClipboardObjectFormat-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanCopy">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where objects can be copied to the clipboard.
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be copied to the clipboard; false otherwise.
            </value>
      <remarks>
        <p>(Read only) <see cref="T:Leadtools.Annotations.AnnAutomation" /> can copy objects to the clipboard when one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects are currently in edit mode (selected).</p>
        <p>Use this property to update the user interface of your application (for example, enabling or disabling an Edit/Copy menu item).  Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Copy" /> method to actually copy the objects to the clipboard from this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</p>
        <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Copy" /> method to copy objects to the clipboard.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      '''&lt;!-- This example determines if it is possible to copy objects to the clipboard and copies them if it is possible. --&gt;
      Public Sub AnnAutomation_CanCopy(ByVal automation As AnnAutomation)
         If automation.CanCopy Then
            automation.Copy()
         End If
      End Sub</code>
        <code lang="CS">      ///&lt;!-- This example determines if it is possible to copy objects to the clipboard and copies them if it is possible. --&gt;
      public void AnnAutomation_CanCopy(AnnAutomation automation)
      {
         if(automation.CanCopy)
            automation.Copy();
      }</code>
        <!--AnnAutomation.CanCopy-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanPaste">
      <summary>
            Gets a value that indicates whether the clipboard contains annotation objects that can be pasted.
            </summary>
      <value>
            true if the clipboard contains annotation objects that can be pasted; false otherwise.
            </value>
      <remarks>
            (Read only) Use this property to update the user interface of your application (for example, enabling or disabling an Edit/Paste menu item).  Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Paste" /> method to actually copy the objects from the clipboard to this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </remarks>
      <example>
        <para>This example determines whether the clipboard contains annotation objects. If it does, it pastes them into the automation</para>
        <code lang="VB">      Public Sub AnnAutomation_CanPaste(ByVal automation As AnnAutomation)
         If automation.CanPaste Then
            automation.Paste()
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanPaste(AnnAutomation automation)
      {
         if(automation.CanPaste)
            automation.Paste();
      }</code>
        <!--AnnAutomation.CanPaste-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanDelete">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where objects can be deleted.
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be deleted; false otherwise.
            </value>
      <remarks>
        <p>(Read only) <see cref="T:Leadtools.Annotations.AnnAutomation" /> can delete when one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects are currently in edit mode (selected) and these objects are not locked.</p>
        <p>Use this property to update the user interface of your application (for example, enabling or disabling an Edit/Delete menu item).  Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> method to actually delete the objects from this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</p>
      </remarks>
      <example>
        <para>This example determines if it is possible to delete objects and deletes them if it is possible.</para>
        <code lang="VB">      Public Sub AnnAutomation_CanDelete(ByVal automation As AnnAutomation)
         If automation.CanDelete Then
            automation.Delete()
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanDelete(AnnAutomation automation)
      {
         if(automation.CanDelete)
            automation.Delete();
      }</code>
        <!--AnnAutomation.CanDelete-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CurrentEditObject">
      <summary>
            Gets the current <see cref="T:Leadtools.Annotations.AnnObject" /> being edited.
            </summary>
      <value>The current <see cref="T:Leadtools.Annotations.AnnObject" /> being edited; null (Nothing in Visual Basic) if no objects are currently being edited.</value>
      <remarks>
        <p>(Read only) The current object being edited is the <see cref="T:Leadtools.Annotations.AnnObject" /> currently "selected" where its <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is currently active.</p>
        <p>This is the object that will be processed when calling any of the object processing methods of this <see cref="T:Leadtools.Annotations.AnnAutomation" />.  For example, calling <see cref="M:Leadtools.Annotations.AnnAutomation.Copy" /> will copy the <b>CurrentEditObject</b> into the clipboard.</p>
        <p>You can change the <b>CurrentEditObject</b> by calling <see cref="M:Leadtools.Annotations.AnnAutomation.StartEditing(Leadtools.Annotations.AnnObject,System.Boolean)" />.</p>
      </remarks>
      <example>
        <para>This example changes the pen of the object that is currently being edited to a Red pen that has a width of 2 pixels.</para>
        <code lang="VB">      Public Sub AnnAutomation_ChangePenToBlue(ByVal automation As AnnAutomation)
         ' check if an object is currently "selected"
         If Not automation.CurrentEditObject Is Nothing Then
            ' check if this object supports a pen
            If automation.CurrentEditObject.SupportsPen Then
               ' change its pen
               automation.BeginUndo()
               automation.CurrentEditObject.Pen = New AnnPen(Color.Blue, New AnnLength(2, AnnUnit.Pixel))
               automation.EndUndo()
               automation.Viewer.Invalidate(automation.CurrentEditObject.InvalidRectangle)
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ChangePenToBlue(AnnAutomation automation)
      {
         // check if an object is currently "selected"
         if (automation.CurrentEditObject != null)
         {
            // check if this object supports a pen
            if (automation.CurrentEditObject.SupportsPen)
            {
               // change its pen
               automation.BeginUndo();
               automation.CurrentEditObject.Pen = new AnnPen(Color.Blue, new AnnLength(2, AnnUnit.Pixel));
               automation.EndUndo();
               automation.Viewer.Invalidate(automation.CurrentEditObject.InvalidRectangle);
            }
         }
      }</code>
        <!--AnnAutomation.ChangePenToBlue-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanUndo">
      <summary>
            Gets a value indicating whether the user can undo the previous operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>true if the user can undo the previous operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />; otherwise, false.</value>
      <remarks>
            (Read only) If this property value is true, you can call <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> to undo the previous operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.  You can use this property to update your user interface; for example, to enable/disable an Undo menu item.
            <p>Use the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property to get or set the number of user actions that can be reversed using the <see cref="M:Leadtools.Annotations.AnnAutomation.Undo" /> method, or re-applied using the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method. The default for the <see cref="P:Leadtools.Annotations.AnnAutomation.UndoCapacity" /> property is 10 actions. </p><p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p><p>Please note that the Undo operation does not work for the Realize operation that has been performed with the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize">Realize</see> method to realize the entire image.</p></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRedo">
      <summary>
            Gets a value indicating whether the user can redo the previous operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>true if the user can redo the previous operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />; otherwise, false.</value>
      <remarks>
            (Read only) If this property value is true, you can call <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> to redo the last operation performed in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.  You can use this property to update your user interface; for example, to enable or disable a Redo menu item.
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Redo" /> method to actually redo the previous operation.</p><p>For more information, refer to <see cref="T:AN.Topics.UndoingAutomationOperations">Undoing Automation Operations.</see></p></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.Annotations.AnnAutomation.UndoRedoChanged" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanGroup">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be grouped together.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be grouped together; false otherwise.</value>
      <remarks>
        <p>(Read only) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be grouped together when 2 or more objects are in an edit state.</p>
        <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Group" /> method to group the objects currently being edited together.</p>
        <p>Note, when you select one or more objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> through the user interface, an <see cref="T:Leadtools.Annotations.AnnGroupObject" /> will be created and the selected objects are moved from the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> to this <see cref="T:Leadtools.Annotations.AnnGroupObject" />.  This <see cref="T:Leadtools.Annotations.AnnGroupObject" /> is a temporary group and will be ungrouped (by calling <see cref="M:Leadtools.Annotations.AnnGroupObject.Ungroup" />) and added back to the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" /> when the objects are not selected anymore (for example, by clicking somewhere in the container outside the group or by calling the user interface or by calling <see cref="M:Leadtools.Annotations.AnnAutomation.SelectNone" />).  To check if the current editing object is the temporary group, first check if the <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentEditObject" /> is an <see cref="T:Leadtools.Annotations.AnnGroupObject" />, then check if the <see cref="P:Leadtools.Annotations.AnnGroupObject.Temporary" /> value is set to true.</p>
        <p>For more information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p>
      </remarks>
      <example>
        <para>This example will add two objects into the automation and then group them together.</para>
        <code lang="VB">      Public Sub AnnAutomation_CanGroup(ByVal automation As AnnAutomation)
         ShowStatus(automation)
         ' first, add two objects to the automation
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = Nothing
         automation.Container.Objects.Add(rectObj)
         automation.Viewer.Invalidate(rectObj.InvalidRectangle)
         ShowStatus(automation)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         automation.Container.Objects.Add(lineObj)
         automation.Viewer.Invalidate(lineObj.InvalidRectangle)
         ShowStatus(automation)

         ' "select" both objects
         automation.StartEditing(rectObj, False)
         ShowStatus(automation)

         automation.StartEditing(lineObj, True)
         ShowStatus(automation)

         ' make this group object a true group
         If automation.CanGroup Then
            automation.Group()
            ShowStatus(automation)
         End If

         ' ungroup to again to the origina 2 objects
         If automation.CanUngroup Then
            automation.Ungroup()
            ShowStatus(automation)
         End If
      End Sub

      Private Sub ShowStatus(ByVal automation As AnnAutomation)
         Dim sb As System.Text.StringBuilder = New System.Text.StringBuilder()
         sb.Append("Number of objects: ")
         sb.Append(automation.Container.Objects.Count)
         sb.Append(Environment.NewLine)

         sb.Append("Object currently being edited: ")
         If Not automation.CurrentEditObject Is Nothing Then
            sb.Append(automation.CurrentEditObject.GetType().Name)
            If TypeOf automation.CurrentEditObject Is AnnGroupObject Then
               sb.Append(", Temporary: ")
               Dim group As AnnGroupObject = CType(IIf(TypeOf automation.CurrentEditObject Is AnnGroupObject, automation.CurrentEditObject, Nothing), AnnGroupObject)
               sb.Append(group.Temporary)
            End If
         Else
            sb.Append("None")
         End If

         sb.Append(Environment.NewLine)

         sb.Append("CanGroup: ")
         sb.Append(automation.CanGroup)
         sb.Append(", CanUngroup: ")
         sb.Append(automation.CanUngroup)

         MessageBox.Show(sb.ToString())
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanGroup(AnnAutomation automation)
      {
         ShowStatus(automation);
         // first, add two objects to the automation
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         automation.Container.Objects.Add(rectObj);
         automation.Viewer.Invalidate(rectObj.InvalidRectangle);
         ShowStatus(automation);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         automation.Container.Objects.Add(lineObj);
         automation.Viewer.Invalidate(lineObj.InvalidRectangle);
         ShowStatus(automation);

         // "select" both objects
         automation.StartEditing(rectObj, false);
         ShowStatus(automation);

         automation.StartEditing(lineObj, true);
         ShowStatus(automation);

         // make this group object a true group
         if(automation.CanGroup)
         {
            automation.Group();
            ShowStatus(automation);
         }

         // ungroup to again to the origina 2 objects
         if(automation.CanUngroup)
         {
            automation.Ungroup();
            ShowStatus(automation);
         }
      }

      private void ShowStatus(AnnAutomation automation)
      {
         System.Text.StringBuilder sb = new System.Text.StringBuilder();
         sb.Append("Number of objects: ");
         sb.Append(automation.Container.Objects.Count);
         sb.Append(Environment.NewLine);

         sb.Append("Object currently being edited: ");
         if(automation.CurrentEditObject != null)
         {
            sb.Append(automation.CurrentEditObject.GetType().Name);
            if(automation.CurrentEditObject is AnnGroupObject)
            {
               sb.Append(", Temporary: ");
               AnnGroupObject group = automation.CurrentEditObject as AnnGroupObject;
               sb.Append(group.Temporary);
            }
         }
         else
            sb.Append("None");

         sb.Append(Environment.NewLine);

         sb.Append("CanGroup: ");
         sb.Append(automation.CanGroup);
         sb.Append(", CanUngroup: ");
         sb.Append(automation.CanUngroup);

         MessageBox.Show(sb.ToString());
      }</code>
        <!--AnnAutomation.CanGroup-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanUngroup">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be ungrouped.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be ungrouped; false otherwise.</value>
      <remarks>
        <p>(Read only) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be ungrouped if the object currently being edited is a <see cref="T:Leadtools.Annotations.AnnGroupObject" />.</p>
        <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Ungroup" /> method to ungroup the <see cref="T:Leadtools.Annotations.AnnGroupObject" /> objects currently being edited.</p>
        <p>For information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanUngroup" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanSelectAll">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where all objects can be selected.
            </summary>
      <value>true if all objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be selected; otherwise, false.</value>
      <remarks>
            (Read only) If the <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects, then this property will return true.  Selecting an object in <see cref="T:Leadtools.Annotations.AnnAutomation" /> is the equivalant of starting its <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.SelectAll" /> method to select all of the automation objects.</p><p>For information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
        <para>This example adds a few objects into an automation and then selects and deselects them.</para>
        <code lang="VB">      Public Sub AnnAutomation_CanSelectAll(ByVal automation As AnnAutomation)
         ' first make sure no objects are in this automation container
         automation.Container.Objects.Clear()
         automation.Viewer.Invalidate()
         MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone))

         ' add two objects to the automation
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
         rectObj.Brush = Nothing
         automation.Container.Objects.Add(rectObj)
         automation.Viewer.Invalidate(rectObj.InvalidRectangle)

         Dim lineObj As AnnLineObject = New AnnLineObject()
         lineObj.StartPoint = New AnnPoint(100, 100, AnnUnit.Pixel)
         lineObj.EndPoint = New AnnPoint(200, 200, AnnUnit.Pixel)
         lineObj.Pen = New AnnPen(Color.Red, New AnnLength(1, AnnUnit.Pixel))
         automation.Container.Objects.Add(lineObj)
         automation.Viewer.Invalidate(lineObj.InvalidRectangle)

         MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone))

         ' select all the objects
         If automation.CanSelectAll Then
            automation.SelectAll()
            MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone))
         End If

         ' deselect all the objects
         If automation.CanSelectNone Then
            automation.SelectNone()
            MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone))
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanSelectAll(AnnAutomation automation)
      {
         // first make sure no objects are in this automation container
         automation.Container.Objects.Clear();
         automation.Viewer.Invalidate();
         MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone));

         // add two objects to the automation
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 100, 100, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
         rectObj.Brush = null;
         automation.Container.Objects.Add(rectObj);
         automation.Viewer.Invalidate(rectObj.InvalidRectangle);

         AnnLineObject lineObj = new AnnLineObject();
         lineObj.StartPoint = new AnnPoint(100, 100, AnnUnit.Pixel);
         lineObj.EndPoint = new AnnPoint(200, 200, AnnUnit.Pixel);
         lineObj.Pen = new AnnPen(Color.Red, new AnnLength(1, AnnUnit.Pixel));
         automation.Container.Objects.Add(lineObj);
         automation.Viewer.Invalidate(lineObj.InvalidRectangle);

         MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone));

         // select all the objects
         if(automation.CanSelectAll)
         {
            automation.SelectAll();
            MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone));
         }

         // deselect all the objects
         if(automation.CanSelectNone)
         {
            automation.SelectNone();
            MessageBox.Show(String.Format("CanSelectAll = {0}, CanSelectNone = {1}", automation.CanSelectAll, automation.CanSelectNone));
         }
      }</code>
        <!--AnnAutomation.CanSelectAll-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanSelectNone">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where it can deselect objects.
            </summary>
      <value>true if objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be deselected; otherwise, false.</value>
      <remarks>
            (Read only) If the <see cref="T:Leadtools.Annotations.AnnAutomation" /> contains one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects that are currently being edited (selected), then this property will return true.
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.SelectNone" /> method to deselect all of the automation objects.</p><p>For information about grouping and ungrouping, refer to <see cref="T:AN.Topics.GroupingAndUngroupingAnnotationObjects">Grouping and Ungrouping Annotation Objects</see>.</p></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanSelectAll" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanBringToFront">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can bring the currently selected object(s) up in the Z-order.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can bring the currently selected object(s) up in the Z-order; otherwise, false.</value>
      <remarks>
            (Read only) Call the <see cref="M:Leadtools.Annotations.AnnAutomation.BringToFront(System.Boolean)" /> method to bring the object up in the Z-order.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_CanBringToFront(ByVal automation As AnnAutomation)
         ' first make sure no objects are in this automation container
         automation.Container.Objects.Clear()
         automation.Viewer.Invalidate()
         ' add three objects to the automation
         Dim brushColor As Color() = {Color.Red, Color.Green, Color.Blue}
         Dim rectObj As AnnRectangleObject() = New AnnRectangleObject(2) {}
         Dim x As Integer = 100
         Dim y As Integer = 100
         For i As Integer = 0 To 2
            rectObj(i) = New AnnRectangleObject()
            rectObj(i).Bounds = New AnnRectangle(x, y, 100, 100, AnnUnit.Pixel)
            rectObj(i).Pen = New AnnPen(Color.Blue, New AnnLength(1, AnnUnit.Pixel))
            rectObj(i).Brush = New AnnSolidBrush(brushColor(i))
            rectObj(i).Name = String.Format("Rectangle {0}", i + 1)
            rectObj(i).NameVisible = True
            automation.Container.Objects.Add(rectObj(i))

            x += 25
            y += 25
         Next i

         automation.Viewer.Invalidate()

         MessageBox.Show("Rectangle1 -&gt; Rectangle2 -&gt; Rectangle3.  Now will select Rectangle1 and move it up")

         ' select rectangle 1 then move it one up in the Z-order
         automation.StartEditing(rectObj(0), False)
         If automation.CanBringToFront Then
            automation.BringToFront(False)
         End If

         MessageBox.Show("Rectangle2 -&gt; Rectangle1 -&gt; Rectangle3.  Now will select Rectangle3 and move it down")

         ' select rectangle 3 then move it down in the Z-order
         automation.StartEditing(rectObj(2), False)
         If automation.CanSendToBack Then
            automation.SendToBack(False)
         End If

         MessageBox.Show("Rectangle2 -&gt; Rectangle3 -&gt; Rectangle1.  Now will select Rectangle2 and move to top")

         ' select rectangle 2 then move it to first of Z-order
         automation.StartEditing(rectObj(1), False)
         If automation.CanBringToFirst Then
            automation.BringToFront(True)
         End If

         MessageBox.Show("Rectangle3 -&gt; Rectangle1 -&gt; Rectangle2.  Now will select Rectangle2 and move to the bottom")

         ' select rectangle 2 then move it to bottom of Z-order
         automation.StartEditing(rectObj(1), False)
         If automation.CanSendToLast Then
            automation.SendToBack(True)
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanBringToFront(AnnAutomation automation)
      {
         // first make sure no objects are in this automation container
         automation.Container.Objects.Clear();
         automation.Viewer.Invalidate();
         // add three objects to the automation
         Color[] brushColor = {Color.Red, Color.Green, Color.Blue};
         AnnRectangleObject[] rectObj = new AnnRectangleObject[3];
         int x = 100;
         int y = 100;
         for(int i = 0; i &lt; 3; i++)
         {
            rectObj[i] = new AnnRectangleObject();
            rectObj[i].Bounds = new AnnRectangle(x, y, 100, 100, AnnUnit.Pixel);
            rectObj[i].Pen = new AnnPen(Color.Blue, new AnnLength(1, AnnUnit.Pixel));
            rectObj[i].Brush = new AnnSolidBrush(brushColor[i]);
            rectObj[i].Name = String.Format("Rectangle {0}", i + 1);
            rectObj[i].NameVisible = true;
            automation.Container.Objects.Add(rectObj[i]);

            x += 25;
            y += 25;
         }

         automation.Viewer.Invalidate();

         MessageBox.Show("Rectangle1 -&gt; Rectangle2 -&gt; Rectangle3.  Now will select Rectangle1 and move it up");

         // select rectangle 1 then move it one up in the Z-order
         automation.StartEditing(rectObj[0], false);
         if(automation.CanBringToFront)
            automation.BringToFront(false);

         MessageBox.Show("Rectangle2 -&gt; Rectangle1 -&gt; Rectangle3.  Now will select Rectangle3 and move it down");

         // select rectangle 3 then move it down in the Z-order
         automation.StartEditing(rectObj[2], false);
         if(automation.CanSendToBack)
            automation.SendToBack(false);

         MessageBox.Show("Rectangle2 -&gt; Rectangle3 -&gt; Rectangle1.  Now will select Rectangle2 and move to top");

         // select rectangle 2 then move it to first of Z-order
         automation.StartEditing(rectObj[1], false);
         if(automation.CanBringToFirst)
            automation.BringToFront(true);

         MessageBox.Show("Rectangle3 -&gt; Rectangle1 -&gt; Rectangle2.  Now will select Rectangle2 and move to the bottom");

         // select rectangle 2 then move it to bottom of Z-order
         automation.StartEditing(rectObj[1], false);
         if(automation.CanSendToLast)
            automation.SendToBack(true);
      }</code>
        <!--AnnAutomation.CanBringToFront-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanBringToFirst">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can bring the currently selected object(s) to the top of the Z-order.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can bring the currently selected object(s) to the top of Z-order; otherwise, false.</value>
      <remarks>
            (Read only) Call the <see cref="M:Leadtools.Annotations.AnnAutomation.BringToFront(System.Boolean)" /> method to bring the object up to the top of the Z-order.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanSendToBack">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can send the currently selected object(s) down in the Z-order.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can send the currently selected object(s) down in the Z-order; otherwise, false.</value>
      <remarks>
            (Read only) Call the <see cref="M:Leadtools.Annotations.AnnAutomation.SendToBack(System.Boolean)" /> method to send the object down or to the bottom of the Z-order.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanSendToLast">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can send the currently selected object(s) to the bottom of the Z-order.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can send the currently selected object(s) to the bottom of Z-order; otherwise, false.</value>
      <remarks>
            (Read only) Call the <see cref="M:Leadtools.Annotations.AnnAutomation.SendToBack(System.Boolean)" /> method to send the object to the bottom of the Z-order.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanBringToFront" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRotate">
      <summary>
            Gets a value indicating whether the <see cref="T:Leadtools.Annotations.AnnEditDesigner">AnnEditDesigner</see> Rotate property can be used at this time.
            </summary>
      <value>true if the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /><see cref="P:Leadtools.Annotations.AnnEditDesigner.Rotate" /> property can be used at this time; otherwise, false.</value>
      <remarks>
            (Read only) The <see cref="P:Leadtools.Annotations.AnnEditDesigner.Rotate" /> property is used to switch the user interface of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> into rotate mode.  The <b>CanRotate</b> property gets a value that indicates whether the current designer is an <see cref="T:Leadtools.Annotations.AnnEditDesigner" />.  Call the <see cref="P:Leadtools.Annotations.AnnAutomation.Rotate" /> method to switch the rotation mode of the edit designer on and off. Please note that the <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object does not support rotation.
            </remarks>
      <example>
        <para>This example will toggle the rotate mode of the user interface of the edit designer on and off.</para>
        <code lang="VB">      Public Sub AnnAutomation_CanRotate(ByVal automation As AnnAutomation)
         ' check whether we can use the rotate mode at this time
         If automation.CanRotate Then
            If automation.Rotate Then
               automation.Rotate = False
               ' now clicking and dragging on the cobject currently being edited will move it
            Else
               automation.Rotate = True
               ' now clicking and dragging on the object currently being edited will rotate it
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_CanRotate(AnnAutomation automation)
      {
         // check whether we can use the rotate mode at this time
         if(automation.CanRotate)
         {
            if(automation.Rotate)
            {
               automation.Rotate = false;
               // now clicking and dragging on the cobject currently being edited will move it
            }
            else
            {
               automation.Rotate = true;
               // now clicking and dragging on the object currently being edited will rotate it
            }
         }
      }</code>
        <!--AnnAutomation.CanRotate-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.Rotate">
      <summary>
            Gets a value indicating whether the current <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in rotate mode.
            </summary>
      <value>true if the current <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> is in rotate mode; otherwise, false.</value>
      <remarks>
            This value has the same effect as changing the <see cref="P:Leadtools.Annotations.AnnAutomation.Rotate" /> property of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> class.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.Annotations.AnnAutomation.CanRotate" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanShowObjectPropertiesDialog">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the object properties dialog can be displayed.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the object properties dialog can be displayed; otherwise, false.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> can display the object properties dialog if there is an <see cref="T:Leadtools.Annotations.AnnObject" /> that is currently being edited (in other words, the <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner" /> is an object of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> class), and the <see cref="T:Leadtools.Annotations.AnnObject" /> currently being edited is not locked (the <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" /> value is false).
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.ShowObjectPropertiesDialog" /> method to display the object properties dialog.</p></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ShowObjectPropertiesDialog" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanShowTextObjectEditWindow">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where a text window can be displayed over the text object.
            </summary>
      <keywords>CanShowTextObjectEditWindow</keywords>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where a text window can be displayed over the text object; otherwise, false.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> can display a text window if there is an <see cref="T:Leadtools.Annotations.AnnTextObject" /> that is currently being edited (in other words, the <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner" /> is an object of the <see cref="T:Leadtools.Annotations.AnnTextEditDesigner" /> class), and the <see cref="T:Leadtools.Annotations.AnnObject" /> currently being edited is not locked (the <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" /> value is false).
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.ShowTextObjectEditWindow" /> method to display a text edit window.</p></remarks>
      <noexample />
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanShowObjectContextMenu">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the object context menu can be displayed.
            </summary>
      <value>true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the object context menu can be displayed; otherwise, false.</value>
      <remarks>
            (Read only) The <see cref="T:Leadtools.Annotations.AnnAutomation" /> can display the object context menu if there is an <see cref="T:Leadtools.Annotations.AnnObject" /> that is currently being edited (in other words, the <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentDesigner" /> is an object of the <see cref="T:Leadtools.Annotations.AnnEditDesigner" /> class).
            <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.ShowObjectContextMenu(System.Drawing.Point)" /> method to display the object context menu.</p></remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ShowObjectContextMenu(System.Drawing.Point)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanLock">
      <summary>
            Gets a value that indicates whether the object currently being edited (selected) can be locked.
            </summary>
      <value>true if the object currently being edited (selected) can be locked; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property value is true if an <see cref="T:Leadtools.Annotations.AnnObject" /> is currently being edited (selected); in other words, <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentEditObject" /> is not null (Nothing in Visual Basic) and also this <see cref="T:Leadtools.Annotations.AnnObject" /> is not currently locked (the <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" /> value of this <see cref="T:Leadtools.Annotations.AnnObject" /> is false).  Otherwise, this property value is false.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.Lock" /> method to lock the object currently being edited (selected).</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.Lock" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanUnlock">
      <summary>
            Gets a value that indicates whether the object currently being edited (selected) can be unlocked.
            </summary>
      <value>true if the object currently being edited (selected) can be unlocked; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property value is true if an <see cref="T:Leadtools.Annotations.AnnObject" /> is currently being edited (selected); in other words, <see cref="P:Leadtools.Annotations.AnnAutomation.CurrentEditObject" /> is not null (Nothing in Visual Basic) and also this <see cref="T:Leadtools.Annotations.AnnObject" /> is currently locked (the <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" /> value of this <see cref="T:Leadtools.Annotations.AnnObject" /> is true).  Otherwise, this property value is false.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.Unlock" /> method to unlock the object currently being edited (selected).</p>
        <p>For more information, refer to <see cref="T:AN.Topics.ImplementingAnnotationSecurity">Implementing Annotation Security.</see></p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.Lock" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRealizeRedaction">
      <summary>
            Gets a value that indicates whether the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and can be realized.
            </summary>
      <value>true if the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and can be realized; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property will determine whether the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and also whether the value of <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> is false.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" /> method to realize the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object currently being edited (selected).</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize" /> method to realize the entire image. The result is an image that looks exactly like what you see on screen before you realize. Please note that Undo does not work for the Realize operation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRestoreRedaction">
      <summary>
            Gets a value that indicates whether the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and can be restored.
            </summary>
      <value>true if the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and can be restored; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property will determine whether the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> and also if the value of <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> is true.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.RestoreRedaction" /> method to restore the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object currently being edited (selected).</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeRedaction" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRealizeAllRedactions">
      <summary>
            Gets a value that indicates whether all of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be realized.
            </summary>
      <value>true if any <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be realized; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property will determine whether there is at least one <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> currently in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that can be realized.  The <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> value must be false in order to be able to realize an <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" /> method to realize all of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that have not been realized.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.Realize" /> method to realize the entire image. The result is an image that looks exactly like what you see on screen before you realize. Please note that Undo does not work for the Realize operation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanRestoreAllRedactions">
      <summary>
            Gets a value that indicates whether one or more <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be restored.
            </summary>
      <value>true if any <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be restored; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property will determine whether there is at least one <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> currently in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that can be restored.  The value of <see cref="P:Leadtools.Annotations.AnnRedactionObject.IsRealized" /> must be true in order to be able to restore an <see cref="T:Leadtools.Annotations.AnnRedactionObject" />.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.RestoreAllRedactions" /> method to restore all of the <see cref="T:Leadtools.Annotations.AnnRedactionObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that have not been restored.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.RealizeAllRedactions" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanApplyEncryptor">
      <summary>
            Gets a value that indicates whether the object currently being edited (selected) is an encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and can be applied.
            </summary>
      <value>true if the object currently being edited (selected) is an encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and can be applied; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property indicates whether the object currently being edited (selected) is an <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and also if the value of <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanEncrypt" /> is true.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" /> method to apply the encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> currently being edited (selected).</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanApplyDecryptor">
      <summary>
            Gets a value that indicates whether the object currently being edited is a decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and can be applied.
            </summary>
      <value>true if the object currently being edited is a decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and can be applied; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property indicates whether the object currently being edited is an <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> and also if the value of <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanDecrypt" /> is true.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" /> method to apply the decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> currently being edited (selected).</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyEncryptor" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanApplyAllEncryptors">
      <summary>
            Gets a value that indicates whether any encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be applied.
            </summary>
      <value>true if any encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be applied; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property gets a value that indicates whether there is at least one encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> currently in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that can be applied.  The <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanEncrypt" /> value must be true in order to be able to apply an encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" /> method to apply all the encryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that have not been applied.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanApplyAllDecryptors">
      <summary>
            Gets a value that indicates whether any decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be applied.
            </summary>
      <value>true if any decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> object in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can be applied; otherwise, false.</value>
      <remarks>
        <p>(Read only) This property gets a value that indicates whether there is at least one decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> currently in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that can be applied.  The <see cref="P:Leadtools.Annotations.AnnEncryptObject.CanDecrypt" /> value must be true in order to be able to apply a decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" />.</p>
        <p>Use the <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllDecryptors" /> method to apply all the decryptor <see cref="T:Leadtools.Annotations.AnnEncryptObject" /> objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> that have not been applied.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ApplyAllEncryptors" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanFlip">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where objects can be flipped.
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where objects can be flipped; false otherwise.
            </value>
      <remarks>
        <p>(Read only) <see cref="T:Leadtools.Annotations.AnnAutomation" /> can flip objects when one or more <see cref="T:Leadtools.Annotations.AnnObject" /> objects are currently in edit mode (selected) and these objects are not locked.</p>
        <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.Flip(System.Boolean)" /> method to actually flip the objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.Flip(System.Boolean)" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanPlayAudio">
      <summary>
            Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> can be played.
            </summary>
      <value>
            true if this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is in a state where an <see cref="T:Leadtools.Annotations.AnnAudioObject" /> can be played; false otherwise.
            </value>
      <remarks>
        <p>(Read only) <see cref="T:Leadtools.Annotations.AnnAutomation" /> can play audio objects when one or more <see cref="T:Leadtools.Annotations.AnnAudioObject" /> objects are currently in edit mode (selected) and the value of the <see cref="P:Leadtools.Annotations.AnnAudioObject.CanPlay" /> property is true.</p>
        <p>Call the <see cref="M:Leadtools.Annotations.AnnAutomation.PlayAudio" /> method to actually play the audio objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" />.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.PlayAudio" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.ObjectsDirty">
      <summary>
            Gets or sets a value to determine whether one or more objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> have been changed.
            </summary>
      <value>true if one or more objects in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> have been changed; otherwise false.</value>
      <remarks>
        <p>The objects in the automation can change in multiple ways: calling most of the methods of this <see cref="T:Leadtools.Annotations.AnnAutomation" /> will usually change the objects. For example, calling the <see cref="M:Leadtools.Annotations.AnnAutomation.Flip(System.Boolean)" /> or <see cref="M:Leadtools.Annotations.AnnAutomation.Delete" /> methods will change this value.  Adding new objects to this <see cref="T:Leadtools.Annotations.AnnAutomation" /> will also set the value of this property to true as will deleting objects.</p>
        <p>You should check the value of this property in your application and save the objects back to the annotation file if the value of this property is true.  You should set the value of this property to false after you do so to indicate that the objects are up to date.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomation.BeforeObjectChanged" /> event is fired before any object is about to change.</p>
        <p>The <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" /> event is fired after any object has been changed.  Internally, when the <see cref="T:Leadtools.Annotations.AnnAutomation" /> sets the value of the <b>ObjectsDirty</b> property to true the <see cref="E:Leadtools.Annotations.AnnAutomation.AfterObjectChanged" /> event fires.</p>
        <p>The value of this property gets updated only when the objects are changed by calling one of the <see cref="T:Leadtools.Annotations.AnnAutomation" /> methods or by the user interface.  If you add or edit or delete objects manually through code (for example, by adding objects manually to the <see cref="P:Leadtools.Annotations.AnnAutomation.Container" />), the value of this property will not be updated.  You need to set the value of the <b>ObjectsDirty</b> property to true manually as well in this case.</p>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AnnAutomation_ObjectsDirty(ByVal automation As AnnAutomation)
         ' make sure no objects are selected and clear the object dirty flag
         automation.SelectNone()
         automation.ObjectsDirty = False
         ' test
         DirtyTest(automation)

         ' add a new object
         Dim rectObj As AnnRectangleObject = New AnnRectangleObject()
         rectObj.Bounds = New AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel)
         rectObj.Pen = New AnnPen(Color.Blue, New AnnLength(2, AnnUnit.Pixel))
         rectObj.Brush = New AnnSolidBrush(Color.Yellow)
         automation.Container.Objects.Add(rectObj)

         ' since we added the object manually, we need to update the ObjectsDirty property ourselves
         automation.ObjectsDirty = True

         automation.Viewer.Invalidate(rectObj.InvalidRectangle)
         automation.StartEditing(rectObj, False)

         ' test
         DirtyTest(automation)

         ' lock the object
         automation.Lock()

         ' test
         DirtyTest(automation)

         ' unlock
         automation.Unlock()

         ' test
         DirtyTest(automation)

         ' delete
         automation.Delete()

         ' test
         DirtyTest(automation)
      End Sub

      Private Sub DirtyTest(ByVal automation As AnnAutomation)
         ' see if the objects are dirty (changed)
         If automation.ObjectsDirty Then
            ' yes
            MessageBox.Show("Object(s) have been changed.  We are going to clear the flag here")
            automation.ObjectsDirty = False
         Else
            MessageBox.Show("No object has been changed")
         End If
      End Sub</code>
        <code lang="CS">      public void AnnAutomation_ObjectsDirty(AnnAutomation automation)
      {
         // make sure no objects are selected and clear the object dirty flag
         automation.SelectNone();
         automation.ObjectsDirty = false;
         // test
         DirtyTest(automation);

         // add a new object
         AnnRectangleObject rectObj = new AnnRectangleObject();
         rectObj.Bounds = new AnnRectangle(100, 100, 200, 200, AnnUnit.Pixel);
         rectObj.Pen = new AnnPen(Color.Blue, new AnnLength(2, AnnUnit.Pixel));
         rectObj.Brush = new AnnSolidBrush(Color.Yellow);
         automation.Container.Objects.Add(rectObj);

         // since we added the object manually, we need to update the ObjectsDirty property ourselves
         automation.ObjectsDirty = true;

         automation.Viewer.Invalidate(rectObj.InvalidRectangle);
         automation.StartEditing(rectObj, false);

         // test
         DirtyTest(automation);

         // lock the object
         automation.Lock();

         // test
         DirtyTest(automation);

         // unlock
         automation.Unlock();

         // test
         DirtyTest(automation);

         // delete
         automation.Delete();

         // test
         DirtyTest(automation);
      }

      private void DirtyTest(AnnAutomation automation)
      {
         // see if the objects are dirty (changed)
         if(automation.ObjectsDirty)
         {
            // yes
            MessageBox.Show("Object(s) have been changed.  We are going to clear the flag here");
            automation.ObjectsDirty = false;
         }
         else
            MessageBox.Show("No object has been changed");
      }</code>
        <!--AnnAutomation.ObjectsDirty-->
      </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.CanResetRotatePoints">
      <summary>
             Gets a value that indicates whether this <see cref="T:Leadtools.Annotations.AnnAutomation" /> is currently in a state where the selected <see cref="T:Leadtools.Annotations.AnnObject" /> is able to have its rotate control points reset to the default location.
            </summary>
      <value>true if the selected <see cref="T:Leadtools.Annotations.AnnObject" /> in this <see cref="T:Leadtools.Annotations.AnnAutomation" /> can have its rotate controls reset to the default location; false otherwise.</value>
      <remarks>
        <p>(Read only) This property gets a value that indicates whether the currently selected <see cref="T:Leadtools.Annotations.AnnObject" /> is able to have its rotate control points reset to the default location.</p>
        <p>For this to be true, the selected <see cref="T:Leadtools.Annotations.AnnObject" /> must not be unlocked (see <see cref="P:Leadtools.Annotations.AnnObject.IsLocked" />) and the edit designer must have rotate control points enabled (see <see cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />). </p>
        <p>For more information, refer to <see cref="T:AN.Topics.NewAnnotationFeaturesOfVersion145">New Annotation Features of Version 14.5</see>.</p>
        <seealso cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" />
        <seealso cref="P:Leadtools.Annotations.AnnEditDesigner.UseRotateControlPoints" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPointCursor" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateCenterControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPoint" />
        <seealso cref="P:Leadtools.Annotations.AnnAutomationManager.RotateGripperControlPointCursor" />
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.Annotations.AnnAutomation.ResetRotatePoints" />.
            </example>
      <document>yes</document>
    </member>
    <member name="P:Leadtools.Annotations.AnnAutomation.EnableSnapToGrid">
      <summary>
            Gets or sets a value to determine whether snapping to grid is enabled for this <see cref="T:Leadtools.Annotations.AnnAutomation" />.
            </summary>
      <value>
        <strong>true</strong> if snap to grid option is enabled for this <see cref="T:Leadtools.Annotations.AnnAutomation" />, otherwise; <strong>false</strong>.
            Default value is <strong>false</strong>.</value>
      <remarks>
        <para>This property will enable or disable the snap to grid options set in the <see cref="P:Leadtools.Annotations.AnnContainer.SnapToGridOptions">AnnContainer.SnapToGridOptions</see> property
            of the container in this <see cref="T:Leadtools.Annotations.AnnAutomation" />. It allows you to quickly enable/disable this feature by just changing this one property, by
            binding it to a user interface menu or check box item for instance.</para>
        <para>This property will internally change the current <see cref="P:Leadtools.Annotations.AnnContainer.EnableSnapToGrid">AnnContainer.EnableSnapToGrid</see>
            property.</para>
        <para>For more information on snap to grid, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Annotations.AnnSnapToGridOptions" />.</example>
      <document>yes</document>
    </member>
  </members>
</doc>