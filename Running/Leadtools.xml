<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools</name>
  </assembly>
  <members>
    <member name="T:Leadtools.RasterOverlayAttributes">
      <summary>Contains the overlay attributes of a DICOM image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This class is used to get or set the various attributes of an overlay image using
            <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see></para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Origin">
      <summary>Origin (top left point), in pixels, of the overlay image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.LeadPoint" /> that specifies the origin (top left point), in pixels, of the overlay image.</value>
      <remarks>
        <para>This origin is relative to the top left point of the displayed main image. This is independent of the main
            image view perspective.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Color">
      <summary>The color used to display those pixels in the overlay image with a value of 1. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> used to display those pixels in the overlay image with a value of 1.</value>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.AutoPaint">
      <summary>Gets or sets a value which determines whether to paint the overlay automatically when the image is painted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to paint the overlay automatically when the image is painted; otherwise, false.</value>
      <remarks>
        <para>Set the value of this property to true to to paint the overlay automatically when the image is painted (with
            <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see>).</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.AutoProcess">
      <summary>Gets or sets a value which determines whether to automatically adjust the overlay image and position when
            the main image changes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to automatically adjust the overlay image and position when the image is changed; otherwise, false.</value>
      <remarks>
        <para>When the value of this property is true, the overlay image and position will automatically adjust when
            the main image is resized (zoomed in), scrolled, rotated, flipped, reversed, sheared, trimmed.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.UseBitPlane">
      <summary>Gets or sets a value which determines whether the overlay has a corresponding bitplane in the main image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the overlay has a corresponding bitplane in the main image; otherwise, false.</value>
      <remarks>
        <para>If the value of this property is true, then <see cref="P:Leadtools.RasterOverlayAttributes.BitPosition" /> should hold the index to the index bitplane.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.BitPosition">
      <summary>Gets or sets the corresponding bit plane associated with an overlay <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The corresponding bit plane associated with an overlay.</value>
      <remarks>
            This property is valid only if <see cref="P:Leadtools.RasterOverlayAttributes.UseBitPlane" /> is set to true. For more information about the
            bit position, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Rows">
      <summary>Gets or sets the number of rows in the overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of rows in the overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Columns">
      <summary>Gets or sets the number of columns in the overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of columns in the overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Type">
      <summary>Gets or sets a value that indicates whether this overlay represents a region
            of interest or other graphics. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that indicates whether this overlay represents a region
            of interest or other graphics.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.BitsAllocated">
      <summary>Gets or sets the number of bits allocated in the overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of bits allocated in the overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Description">
      <summary>Gets or sets a value that contains user-defined comments about the overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains user-defined comments about the overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Subtype">
      <summary>Gets or sets a value that contains a defined term that identifies the intended purpose of
            the overlay type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains a defined term that identifies the intended purpose of
            the overlay type.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.Label">
      <summary>Gets or sets a value that contains user defined text, which may be used to label or name this overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that contains user defined text, which may be used to label or name this overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.RoiArea">
      <summary>Gets or sets the number of pixels in the Region Of Interest area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of pixels in the Region Of Interest area.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.RoiMean">
      <summary>Gets or sets the average value of the pixels in the Region Of Interest. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The average value of the pixels in the Region Of Interest.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.RoiStandardDeviation">
      <summary>Gets or sets the standard deviation of the pixel values in the Region Of Interest. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The standard deviation of the pixel values in the Region Of Interest.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.FramesInOverlay">
      <summary>Gets or sets the number of Frames in the overlay. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of Frames in the overlay.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.ImageFrameOrigin">
      <summary>Gets or sets the number of the frame of a multi-frame image to which this overlay applies. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of the frame of a multi-frame image to which this overlay applies.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="P:Leadtools.RasterOverlayAttributes.ActivationLayer">
      <summary>Gets or sets a value that identifies the layer in which the overlay shall be displayed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:System.String" /> that identifies the layer in which the overlay shall be displayed.</value>
      <remarks>
            For more information, refer to "Overlay Plane Module Attributes" in the DICOM standard and
            <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see> and
            <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see>.
            </example>
    </member>
    <member name="T:Leadtools.RasterImageAnimatorState">
      <summary>The <see cref="T:Leadtools.RasterImageAnimator" /> state. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
            This enumeration is used as the state of the <see cref="T:Leadtools.RasterImageAnimator" />. It is used as the value of the
            <see cref="P:Leadtools.RasterImageAnimator.State">RasterImageAnimator.State</see> property and the return value of the
            <see cref="M:Leadtools.RasterImageAnimator.Process">RasterImageAnimator.Process</see> method.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
      <seealso cref="T:Leadtools.RasterImageAnimator" />
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PreClear">
      <summary>
            The initial state of the animation (index = -1). The target image will be cleared to the
            <see cref="P:Leadtools.RasterImage.AnimationBackground">RasterImage.AnimationBackground</see> color of the current frame on the next call
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PostClear">
      <summary>
            Indicates that the target image has been cleared
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PreRender">
      <summary>
            Indicates that the current frame will be rendered to the target image on the next call
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.Render">
      <summary>
            Indicates that a frame has been rendered to the target image
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PostRender">
      <summary>
            Indicates that a frame is in the midst of being rendered to the target image
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.WaitInput">
      <summary>
            Indicates that the animation engine is waiting for user input before moving on to <strong>PreDispose</strong></summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.WaitDelay">
      <summary>
            Indicates that the animation engine is waiting for a delayed time before moving on to <strong>PreDispose</strong></summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.WaitInputDelay">
      <summary>
            Indicates that the animation engine is waiting for user input and a delayed time before moving on to <strong>PreDispose</strong></summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PreDispose">
      <summary>
            Indicates that the current frame will be disposed of on the next call
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.PostDispose">
      <summary>
            Indicates that the current frame has been disposed of. The index is incremented after processing this state
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimatorState.End">
      <summary>
            Indicates that the animation is past the last frame in the list (index = number of frames or pages). The animator will loop to index = 0 on the next call with the
            state set to <strong>PreRender</strong></summary>
    </member>
    <member name="T:Leadtools.RasterImageAnimator">
      <summary>Animates an image that has time-based frames. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>To load and play an animated file, such as GIF, you can load the frames into a <see cref="T:Leadtools.RasterImage" /> object from the file, then
            play the list to a target image in a loop that displays each change in the target image. You can also create an animation sequence from
            scratch and save the images to create an animated GIF file.</para>
        <para>The following is an outline of possible steps:
            <list type="number"><item><description>
              Load a multi-frame image using <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)" /></description></item><item><description>
              Use the <see cref="T:Leadtools.RasterImage" /> constructor to create a target image that is the size of the images in the multi-frame image
              </description></item><item><description>
              Use the <see cref="T:Leadtools.RasterImageAnimator" /> class to create an animation playback that references multi-frame image and the target image
              </description></item><item><description>
              In a loop that processes each frame in the multi-frame image, do the following:
              <list type="number"><item><description>
                 Use <see cref="M:Leadtools.RasterImageAnimator.Process">RasterImageAnimator.Process</see> to process the current state and get the next state of the animation
                 </description></item><item><description>
                 Use <see cref="M:Leadtools.RasterImageAnimator.GetUpdateRectangle(System.Boolean)">RasterImageAnimator.GetUpdateRectangle</see> to get the update rectangle (the portion of the
                 target image that has changed)
                 </description></item><item><description>
                 Use <see cref="M:Leadtools.Drawing.RasterImagePainter.Paint(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)">RasterImagePainter.Paint</see> to paint the changed portion of the image. To paint only the changed portion, use the update
                 rectangle as the source clipping rectangle.
                 </description></item></list></description></item></list></para>
        <para>The animation loop can have a number of states, and you should only paint the changes in an appropriate state (for example, when the next state is
            <see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.PostRender</see>. For a list of possible states, refer to <see cref="T:Leadtools.RasterImageAnimatorState" />.</para>
        <para>The <see cref="P:Leadtools.RasterImage.AnimationDisposalMethod">RasterImage.AnimationDisposalMethod</see> property in the target <see cref="T:Leadtools.RasterImage" /> determines what
            happens to the image in the playback loop after rendering and after any wait state, when the next state is <see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.PostDispose</see>.
            The options are as follows: keep the image as it is, restore the background, or restore the previous image. (Restoring the background is a common option for animation.)</para>
        <para>The animation loop goes continuously through the list of frames. If you want to stop at the end of the list, you can exit the loop when the next state is
            <see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.End</see>.</para>
        <para>The <see cref="T:Leadtools.RasterImageAnimator" /> class also implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImageAnimator" /> class.  For more information, refer to
            <see cref="T:System.IDisposable" />.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load an animated GIF file and paint on the surface of the given Panel.</para>
        </para>
        <code lang="VB">      Sub RasterImageAnimatorExample(ByVal panel As Panel)
         ' Initialize the RasterCodecs object
         Dim codecs As New RasterCodecs()
         ' Load the animated GIF file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim animatedImage As RasterImage = codecs.Load(fileName)

         ' Create the target image, we want it to be in the animated image size
         Dim targetImage As New RasterImage( _
            RasterMemoryFlags.Conventional, _
            animatedImage.AnimationGlobalSize.Width, _
            animatedImage.AnimationGlobalSize.Height, _
            animatedImage.BitsPerPixel, _
            animatedImage.Order, _
            animatedImage.ViewPerspective, _
            Nothing, _
            IntPtr.Zero, _
            0)

         ' Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage)

         ' Create the RasterImageAnimator object
         Dim animator As New RasterImageAnimator(targetImage, animatedImage)

         ' Animate it

         ' Use GDI+ paint engine to support transparent colors
         Dim props As RasterPaintProperties = RasterPaintProperties.Default
         props.PaintEngine = RasterPaintEngine.GdiPlus

         Dim g As Graphics = panel.CreateGraphics()

         Dim state As RasterImageAnimatorState
         Do
            Dim srcRect As New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)
            Dim updateRect As LeadRect
            Dim destRect As LeadRect

            state = animator.Process()

            Select Case (state)
               Case RasterImageAnimatorState.WaitDelay, _
                  RasterImageAnimatorState.WaitInputDelay, _
                  RasterImageAnimatorState.Render
                  ' Continue processing

               Case RasterImageAnimatorState.WaitInput
                  ' In case the animated image has the "wait for user input" flags,
                  ' cancel the waiting
                  animator.CancelWait()

               Case RasterImageAnimatorState.PostClear, _
                  RasterImageAnimatorState.PostRender
                  ' Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(True)

                  ' Paint it
                  destRect = New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props)
            End Select
         Loop While (state &lt;&gt; RasterImageAnimatorState.End)

         g.Dispose()

         animator.Dispose()

         targetImage.Dispose()
         animatedImage.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">       public void RasterImageAnimatorExample(Panel panel)
      {
         // Initialize the RasterCodecs object
         RasterCodecs codecs = new RasterCodecs();

         // Load the animated GIF file
         string fileName =Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         RasterImage animatedImage = codecs.Load(fileName);

         // Create the target image, we want it to be in the animated image size
         RasterImage targetImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            animatedImage.AnimationGlobalSize.Width,
            animatedImage.AnimationGlobalSize.Height,
            animatedImage.BitsPerPixel,
            animatedImage.Order,
            animatedImage.ViewPerspective,
            null,
            IntPtr.Zero,
            0);

         // Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage);

         // Create the RasterImageAnimator object
         RasterImageAnimator animator = new RasterImageAnimator(targetImage, animatedImage);

         // Animate it

         // Use GDI+ paint engine to support transparent colors
         RasterPaintProperties props = RasterPaintProperties.Default;
         props.PaintEngine = RasterPaintEngine.GdiPlus;

         Graphics g = panel.CreateGraphics();

         RasterImageAnimatorState state;
         do
         {
            LeadRect srcRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);
            LeadRect updateRect;
            LeadRect destRect;

            state = animator.Process();

            switch(state)
            {
               case RasterImageAnimatorState.WaitDelay:
               case RasterImageAnimatorState.WaitInputDelay:
               case RasterImageAnimatorState.Render:
                  // Continue processing
                  break;

               case RasterImageAnimatorState.WaitInput:
                  // In case the animated image has the "wait for user input" flags,
                  // cancel the waiting
                  animator.CancelWait();
                  break;

               case RasterImageAnimatorState.PostClear:
               case RasterImageAnimatorState.PostRender:
                  // Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(true);

                  // Paint it
                  destRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props);
                  break;

               default:
                  break;
            }
         }
         while(state != RasterImageAnimatorState.End);

         g.Dispose();

         animator.Dispose();

         targetImage.Dispose();
         animatedImage.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.#ctor(Leadtools.RasterImage,Leadtools.RasterImage)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterImageAnimator" /> object using the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="targetImage">A <see cref="T:Leadtools.RasterImage" /> object referencing the target image.</param>
      <param name="animatedImage">A <see cref="T:Leadtools.RasterImage" /> object containing the frames to be played. This object must be a multi-frame image (The value of
            <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop">RasterImage.AnimationGlobalLoop</see> must be something other than -1. You can also pass a null reference
            (Nothing in VisualBasic) to let the method create an empty multi-frame image.</param>
      <remarks>
        <para>
          <paramref name="targetImage" /> must be allocated before calling this method</para>
        <para>If you pass null (Nothing in VisualBasic) in the <paramref name="animatedImage" /> parameter, you can use the <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> method to add frames
            to the multi-frame image during the animation. This is useful if you want to play an animated file as it is being loaded. If you need to reference the multi-frame
            image after the animation, you can call the <see cref="M:Leadtools.RasterImageAnimator.Destroy" /> method before you dispose this <see cref="T:Leadtools.RasterImageAnimator" /> object.</para>
        <para>The <see cref="T:Leadtools.RasterImageAnimator" /> class also implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImageAnimator" /> class.  For more information, refer to
            <see cref="T:System.IDisposable" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.RasterImageAnimator" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>For more information, refer to <see cref="T:System.IDisposable" />.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>For more information, refer to <see cref="T:System.IDisposable" />.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.RasterImageAnimator" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="disposing">
        <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Destroy">
      <summary>Invalidates this <see cref="T:Leadtools.RasterImageAnimator" /> object and returns the animated image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object containing the multi-frame animated image.</returns>
      <remarks>
        <para>If you pass null (Nothing in VisualBasic) in the <paramref name="animatedImage" /> parameter for the <see cref="T:Leadtools.RasterImageAnimator" /> constructor, you can use
            the <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> method to add frames to the multi-frame image during the animation. This is useful if you want to play an animated file as it is being
            loaded. If you need to reference the multi-frame image after the animation, you can call the <see cref="M:Leadtools.RasterImageAnimator.Destroy" /> method before you dispose this
            <see cref="T:Leadtools.RasterImageAnimator" /> object.</para>
        <para>After you call <see cref="M:Leadtools.RasterImageAnimator.Destroy" />, this <see cref="T:Leadtools.RasterImageAnimator" /> object is invalid and you should only call the <see cref="M:Leadtools.RasterImageAnimator.Dispose" /> method
            afterwards.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)">
      <summary>Appends an image to the animated multi-frame image during an animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> that contains 1 or more frames to be added to the animation.</param>
      <remarks>
        <para>If you pass null (Nothing in VisualBasic) in the <paramref name="animatedImage" /> parameter for the <see cref="T:Leadtools.RasterImageAnimator" /> constructor, you can use
            the <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> method to add frames to the multi-frame image during the animation. This is useful if you want to play an animated file as it is being
            loaded using the <a href="ms-help://Leadtools.Help/Leadtools.DotNet175/Leadtools.Codecs/Leadtools.Codecs~Leadtools.Codecs.RasterCodecs~LoadImage_EV.html">RasterCodecs.LoadImage</a> event. If you need to reference the multi-frame image after the animation, you
            can call the <see cref="M:Leadtools.RasterImageAnimator.Destroy" /> method before you dispose this <see cref="T:Leadtools.RasterImageAnimator" /> object.</para>
        <para>After you call <see cref="M:Leadtools.RasterImageAnimator.Destroy" />, this <see cref="T:Leadtools.RasterImageAnimator" /> object is invalid and you should only call the <see cref="M:Leadtools.RasterImageAnimator.Dispose" /> method
            afterwards.</para>
        <para>The <see cref="M:Leadtools.RasterImageAnimator.ValidateLines(System.Int32,System.Int32)" /> method lets you validate the lines that the animation playback engine will render to the target image</para>
      </remarks>
      <example>
        <para>
          <para>This example plays an animated GIF file as it loads the file</para>
        </para>
        <code lang="VB">      Private _animator As RasterImageAnimator
      Private _targetImage As RasterImage
      Private _graphics As Graphics
      Private _destRect As LeadRect
      Private _paintProperties As RasterPaintProperties
      Sub RasterImageAppendExample(ByVal panel As Panel)
         ' Initialize the RasterCodecs object
         Dim codecs As New RasterCodecs()

         ' An animated GIF file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")

         ' load the first frame, so we have the palette and a target image for playback
         _targetImage = codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)

         ' Create the animator
         _animator = New RasterImageAnimator(_targetImage, Nothing)

         ' Setup our class members used in the event handler
         _graphics = panel.CreateGraphics()
         _destRect = LeadRect.FromLTRB(panel.ClientRectangle.Left, panel.ClientRectangle.Top, panel.ClientRectangle.Right, panel.ClientRectangle.Bottom)
         _paintProperties = RasterPaintProperties.Default
         _paintProperties.PaintEngine = RasterPaintEngine.GdiPlus

         ' Hook to the LoadImage event and load the file
         AddHandler codecs.LoadImage, AddressOf codecs_LoadImage
         codecs.Load(fileName)
         RemoveHandler codecs.LoadImage, AddressOf codecs_LoadImage

         _graphics.Dispose()
         _animator.Dispose()
         _animator = Nothing

         _targetImage.Dispose()

         codecs.Dispose()
      End Sub

      Sub codecs_LoadImage(ByVal sender As Object, ByVal e As CodecsLoadImageEventArgs)
         If ((e.Flags And CodecsLoadImageFlags.FirstRow) = CodecsLoadImageFlags.FirstRow) Then
            _animator.Append(e.Image)
         End If

         _animator.ValidateLines(e.Row, e.Lines)

         Dim state As RasterImageAnimatorState = _animator.State

         Do While (state &lt;&gt; RasterImageAnimatorState.End)
            state = _animator.Process()

            Dim updateRect As LeadRect

            Select Case (state)
               Case RasterImageAnimatorState.WaitInput
                  _animator.CancelWait()

               Case RasterImageAnimatorState.PostClear, _
                  RasterImageAnimatorState.PostRender
                  updateRect = _animator.GetUpdateRectangle(True)
                  RasterImagePainter.Paint(_targetImage, _graphics, LeadRect.Empty, updateRect, _destRect, LeadRect.Empty, _paintProperties)
            End Select

            Exit Do
         Loop
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      RasterImageAnimator _animator;
      RasterImage _targetImage;
      Graphics _graphics;
      LeadRect _destRect;
      RasterPaintProperties _paintProperties;

      public void RasterImageAppendExample(Panel panel)
      {
         // Initialize the RasterCodecs object
         RasterCodecs codecs = new RasterCodecs();

         // An animated GIF file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");

         // load the first frame, so we have the palette and a target image for playback
         _targetImage = codecs.Load(fileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Create the animator
         _animator = new RasterImageAnimator(_targetImage, null);

         // Setup our class members used in the event handler
         _graphics = panel.CreateGraphics();
         _destRect = LeadRect.FromLTRB(panel.ClientRectangle.Left, panel.ClientRectangle.Top, panel.ClientRectangle.Right, panel.ClientRectangle.Bottom);
         _paintProperties = RasterPaintProperties.Default;
         _paintProperties.PaintEngine = RasterPaintEngine.GdiPlus;

         // Hook to the LoadImage event and load the file
         codecs.LoadImage += new EventHandler&lt;CodecsLoadImageEventArgs&gt;(codecs_LoadImage);
         codecs.Load(fileName);
         codecs.LoadImage -= new EventHandler&lt;CodecsLoadImageEventArgs&gt;(codecs_LoadImage);

         _graphics.Dispose();
         _animator.Dispose();
         _animator = null;

         _targetImage.Dispose();

         codecs.Dispose();
      }

      void codecs_LoadImage(object sender, CodecsLoadImageEventArgs e)
      {
         if((e.Flags &amp; CodecsLoadImageFlags.FirstRow) == CodecsLoadImageFlags.FirstRow)
            _animator.Append(e.Image);

         _animator.ValidateLines(e.Row, e.Lines);

         RasterImageAnimatorState state = _animator.State;

         while(state != RasterImageAnimatorState.End)
         {
            state = _animator.Process();

            LeadRect updateRect;

            switch(state)
            {
               case RasterImageAnimatorState.WaitInput:
                  _animator.CancelWait();
                  break;

               case RasterImageAnimatorState.PostClear:
               case RasterImageAnimatorState.PostRender:
                  updateRect = _animator.GetUpdateRectangle(true);
                  RasterImagePainter.Paint(_targetImage, _graphics, LeadRect.Empty, updateRect, _destRect, LeadRect.Empty, _paintProperties);
                  break;
            }

            break;
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.CancelWait">
      <summary>Cancels the wait for user input and any delay during an animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The "Wait for user input" is supported by GIF89a and later standard. This flag gets set to the corresponding value if this image was loaded from
            a GIF file. Also, the value set in this property will be used if this image is saved as a GIF file. Otherwise, the LEADTOOLS toolkit will not use
            the value of this property.</para>
        <para>This flag is set in the <see cref="P:Leadtools.RasterImage.AnimationWaitUserInput">RasterImage.AnimationWaitUserInput</see> property. The animation playback
            engine will get into a wait state if it encounters this flag in a frame and the state of the playback will be
            <see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.WaitInput</see>. Use the <see cref="M:Leadtools.RasterImageAnimator.CancelWait" /> method to exit the wait state and move
            to the next frame</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.ClearUpdateRectangle">
      <summary>Clears the update rectangle used for an animation playback, leaving an empty rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para>
          <para>This example uses <see cref="M:Leadtools.RasterImageAnimator.ClearUpdateRectangle" /> to avoid painting odd numbered frames</para>
        </para>
        <code lang="VB">      Sub RasterImageAnimatorClearUpdateRectangleExample(ByVal panel As Panel)
         ' Initialize the RasterCodecs object
         Dim codecs As New RasterCodecs()
         ' Load the animated GIF file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim animatedImage As RasterImage = codecs.Load(fileName)

         ' Create the target image, we want it to be in the animated image size
         Dim targetImage As New RasterImage( _
            RasterMemoryFlags.Conventional, _
            animatedImage.AnimationGlobalSize.Width, _
            animatedImage.AnimationGlobalSize.Height, _
            animatedImage.BitsPerPixel, _
            animatedImage.Order, _
            animatedImage.ViewPerspective, _
            Nothing, _
            IntPtr.Zero, _
            0)

         ' Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage)

         ' Create the RasterImageAnimator object
         Dim animator As New RasterImageAnimator(targetImage, animatedImage)

         ' Animate it

         ' Use GDI+ paint engine to support transparent colors
         Dim props As RasterPaintProperties = RasterPaintProperties.Default
         props.PaintEngine = RasterPaintEngine.GdiPlus

         Dim g As Graphics = panel.CreateGraphics()

         Dim state As RasterImageAnimatorState

         Do
            Dim srcRect As New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)
            Dim updateRect As LeadRect
            Dim destRect As LeadRect
            Dim index As Integer

            state = animator.Process()

            Select Case (state)
               Case RasterImageAnimatorState.WaitDelay, _
                  RasterImageAnimatorState.WaitInputDelay, _
                  RasterImageAnimatorState.Render
                  ' Continue processing

               Case RasterImageAnimatorState.WaitInput
                  ' In case the animated image has the "wait for user input" flags,
                  ' cancel the waiting
                  animator.CancelWait()

               Case RasterImageAnimatorState.PostRender
                  index = animator.Index
                  If ((index Mod 2) &lt;&gt; 0) Then
                     animator.ClearUpdateRectangle()
                  End If

                  ' Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(True)

                  ' Paint it
                  destRect = New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props)
            End Select
         Loop While (state &lt;&gt; RasterImageAnimatorState.End)

         g.Dispose()

         animator.Dispose()

         targetImage.Dispose()
         animatedImage.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageAnimatorClearUpdateRectangleExample(Panel panel)
      {
         // Initialize the RasterCodecs object
         RasterCodecs codecs = new RasterCodecs();

         // Load the animated GIF file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         RasterImage animatedImage = codecs.Load(fileName);

         // Create the target image, we want it to be in the animated image size
         RasterImage targetImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            animatedImage.AnimationGlobalSize.Width,
            animatedImage.AnimationGlobalSize.Height,
            animatedImage.BitsPerPixel,
            animatedImage.Order,
            animatedImage.ViewPerspective,
            null,
            IntPtr.Zero,
            0);

         // Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage);

         // Create the RasterImageAnimator object
         RasterImageAnimator animator = new RasterImageAnimator(targetImage, animatedImage);

         // Animate it

         // Use GDI+ paint engine to support transparent colors
         RasterPaintProperties props = RasterPaintProperties.Default;
         props.PaintEngine = RasterPaintEngine.GdiPlus;

         Graphics g = panel.CreateGraphics();

         RasterImageAnimatorState state;
         do
         {
            LeadRect srcRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);
            LeadRect updateRect;
            LeadRect destRect;
            int index;

            state = animator.Process();

            switch(state)
            {
               case RasterImageAnimatorState.WaitDelay:
               case RasterImageAnimatorState.WaitInputDelay:
               case RasterImageAnimatorState.Render:
                  // Continue processing
                  break;

               case RasterImageAnimatorState.WaitInput:
                  // In case the animated image has the "wait for user input" flags,
                  // cancel the waiting
                  animator.CancelWait();
                  break;

               case RasterImageAnimatorState.PostRender:
                  index = animator.Index;
                  if((index % 2) != 0)
                     animator.ClearUpdateRectangle();

                  // Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(true);

                  // Paint it
                  destRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props);
                  break;

               default:
                  break;
            }
         }
         while(state != RasterImageAnimatorState.End);

         g.Dispose();

         animator.Dispose();

         targetImage.Dispose();
         animatedImage.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.GetUpdateRectangle(System.Boolean)">
      <summary>Gets the update rectangle in the target image during an animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="clear">
        <strong>true</strong> if you want to clear the rectangle; <strong>false</strong> if you do not.</param>
      <returns>A <see cref="T:Leadtools.LeadRect" /> that this method will fill with the coordinates of the update rectangle.</returns>
      <remarks>
        <para>The rectangle uses image coordinates, and it is cumulative.</para>
        <para>You usually call this after the following states, which you can get with the <see cref="P:Leadtools.RasterImageAnimator.State" /> property:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term><see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.PostClear</see></term><description>Indicates that the target image has been cleared</description></item><item><term><see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.PostRender</see></term><description>that a frame has been rendered to the target image</description></item><item><term><see cref="T:Leadtools.RasterImageAnimatorState">RasterImageAnimatorState.PostDispose</see></term><description>Indicates that the current frame has been disposed of. The index is incremented after processing this state</description></item></list></para>
        <para>This method uses image coordinates to specify the update rectangle. Therefore, you must account for the image's view perspective. For more information,
            refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.Process">
      <summary>Processes the next state during an animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>A <see cref="T:Leadtools.RasterImageAnimatorState" /> enumeration member that describes the new state of the animation playback engine</returns>
      <remarks>
        <para>You should call this method in a loop to continually process the playback.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageAnimator" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageAnimator.ValidateLines(System.Int32,System.Int32)">
      <summary>Validates lines of an image that was added during a <a href="ms-help://Leadtools.Help/Leadtools.DotNet175/Leadtools.Codecs/Leadtools.Codecs~Leadtools.Codecs.RasterCodecs~LoadImage_EV.html">RasterCodecs.LoadImage</a> event using the <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> function. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">Row number of the first line in the image to validate. In the <a href="ms-help://Leadtools.Help/Leadtools.DotNet175/Leadtools.Codecs/Leadtools.Codecs~Leadtools.Codecs.RasterCodecs~LoadImage_EV.html">RasterCodecs.LoadImage</a> event,
            this corresponds to the first line in the buffer.</param>
      <param name="lines">Number of lines to validate. In the <a href="ms-help://Leadtools.Help/Leadtools.DotNet175/Leadtools.Codecs/Leadtools.Codecs~Leadtools.Codecs.RasterCodecs~LoadImage_EV.html">RasterCodecs.LoadImage</a> event, this corresponds to the
            number of lines in the buffer.</param>
      <remarks>
        <para>The <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> method enables you to update an image in the <a href="ms-help://Leadtools.Help/Leadtools.DotNet175/Leadtools.Codecs/Leadtools.Codecs~Leadtools.Codecs.RasterCodecs~LoadImage_EV.html">RasterCodecs.LoadImage</a> event, so that you
            can play an animation file as it is being loaded. The <see cref="M:Leadtools.RasterImageAnimator.ValidateLines(System.Int32,System.Int32)" /> method lets you validate the lines that the animation playback engine will
            render to the target image.</para>
        <para>If you pass null (Nothing in VisualBasic) in the <paramref name="animatedImage" /> parameter for the <see cref="T:Leadtools.RasterImageAnimator" /> constructor, you can use
            the <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" /> method to add frames to the multi-frame image during the animation. This is useful if you want to play an animated file as it is being
            loaded. If you need to reference the multi-frame image after the animation, you can call the <see cref="M:Leadtools.RasterImageAnimator.Destroy" /> method before you dispose this
            <see cref="T:Leadtools.RasterImageAnimator" /> object.</para>
        <para>After you call <see cref="M:Leadtools.RasterImageAnimator.Destroy" />, this <see cref="T:Leadtools.RasterImageAnimator" /> object is invalid and you should only call the <see cref="M:Leadtools.RasterImageAnimator.Dispose" /> method
            afterwards.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageAnimator.Index">
      <summary>Gets or sets the index of the current frame during animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that indicates the index of the current frame during animation playback.</value>
      <remarks>
        <para>You can use the <see cref="P:Leadtools.RasterImageAnimator.Index" /> property to skip frames during a playback if required.</para>
      </remarks>
      <example>
        <para>
          <para>This example uses <see cref="P:Leadtools.RasterImageAnimator.Index" /> to skip frames during a playback</para>
        </para>
        <code lang="VB">      Sub RasterImageAnimatorIndexExample(ByVal panel As Panel)
         ' Initialize the RasterCodecs object
         Dim codecs As New RasterCodecs()
         ' Load the animated GIF file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif")
         Dim animatedImage As RasterImage = codecs.Load(fileName)

         ' Create the target image, we want it to be in the animated image size
         Dim targetImage As New RasterImage( _
            RasterMemoryFlags.Conventional, _
            animatedImage.AnimationGlobalSize.Width, _
            animatedImage.AnimationGlobalSize.Height, _
            animatedImage.BitsPerPixel, _
            animatedImage.Order, _
            animatedImage.ViewPerspective, _
            Nothing, _
            IntPtr.Zero, _
            0)

         ' Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage)

         ' Create the RasterImageAnimator object
         Dim animator As New RasterImageAnimator(targetImage, animatedImage)

         ' Animate it

         ' Use GDI+ paint engine to support transparent colors
         Dim props As RasterPaintProperties = RasterPaintProperties.Default
         props.PaintEngine = RasterPaintEngine.GdiPlus

         Dim g As Graphics = panel.CreateGraphics()

         Dim state As RasterImageAnimatorState
         Do
            Dim srcRect As New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)
            Dim updateRect As LeadRect
            Dim destRect As LeadRect
            Dim index As Integer

            state = animator.Process()

            Select Case (state)
               Case RasterImageAnimatorState.WaitDelay, _
                  RasterImageAnimatorState.WaitInputDelay, _
                  RasterImageAnimatorState.Render
                  'Continue processing

               Case RasterImageAnimatorState.WaitInput
                  ' In case the animated image has the "wait for user input" flags,
                  ' cancel the waiting
                  animator.CancelWait()

               Case RasterImageAnimatorState.PreRender
                  index = animator.Index
                  index = index + 1
                  animator.Index = index

               Case RasterImageAnimatorState.PostRender
                  ' Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(True)

                  ' Paint it
                  destRect = New LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight)

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props)
            End Select
         Loop While (state &lt;&gt; RasterImageAnimatorState.End)

         g.Dispose()

         animator.Dispose()

         targetImage.Dispose()
         animatedImage.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageAnimatorIndexExample(Panel panel)
      {
         // Initialize the RasterCodecs object
         RasterCodecs codecs = new RasterCodecs();

         // Load the animated GIF file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Eye.gif");
         RasterImage animatedImage = codecs.Load(fileName);

         // Create the target image, we want it to be in the animated image size
         RasterImage targetImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            animatedImage.AnimationGlobalSize.Width,
            animatedImage.AnimationGlobalSize.Height,
            animatedImage.BitsPerPixel,
            animatedImage.Order,
            animatedImage.ViewPerspective,
            null,
            IntPtr.Zero,
            0);

         // Copy the palette from the animated image to this newly created image
         animatedImage.CopyPaletteTo(targetImage);

         // Create the RasterImageAnimator object
         RasterImageAnimator animator = new RasterImageAnimator(targetImage, animatedImage);

         // Animate it

         // Use GDI+ paint engine to support transparent colors
         RasterPaintProperties props = RasterPaintProperties.Default;
         props.PaintEngine = RasterPaintEngine.GdiPlus;

         Graphics g = panel.CreateGraphics();

         RasterImageAnimatorState state;
         do
         {
            LeadRect srcRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);
            LeadRect updateRect;
            LeadRect destRect;
            int index;

            state = animator.Process();

            switch(state)
            {
               case RasterImageAnimatorState.WaitDelay:
               case RasterImageAnimatorState.WaitInputDelay:
               case RasterImageAnimatorState.Render:
                  // Continue processing
                  break;

               case RasterImageAnimatorState.WaitInput:
                  // In case the animated image has the "wait for user input" flags,
                  // cancel the waiting
                  animator.CancelWait();
                  break;

               case RasterImageAnimatorState.PreRender:
                  index = animator.Index;
                  index++;
                  animator.Index = index;
                  break;

               case RasterImageAnimatorState.PostRender:
                  // Get the area in the target image that has changed
                  updateRect = animator.GetUpdateRectangle(true);

                  // Paint it
                  destRect = new LeadRect(0, 0, targetImage.ImageWidth, targetImage.ImageHeight);

                  RasterImagePainter.Paint(targetImage, g, srcRect, updateRect, destRect, destRect, props);
                  break;

               default:
                  break;
            }
         }
         while(state != RasterImageAnimatorState.End);

         g.Dispose();

         animator.Dispose();

         targetImage.Dispose();
         animatedImage.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImageAnimator.Delay">
      <summary>Gets the time remaining in the current wait state of an animation playback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that indicates the time remaining in the current wait state of an animation playback.</value>
      <remarks>
        <para>The delay is in milliseconds (ms).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageAnimator.State">
      <summary>Gets the current state of the animation playback engine. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImageAnimatorState" /> enumeration member that indicates current state of the animation playback engine.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.RasterImageAnimatorState" /> for description of the different states.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImageAnimator.Append(Leadtools.RasterImage)" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.ImageProcessing.RasterCommandProcessor.Progress" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            The <see cref="E:Leadtools.ImageProcessing.RasterCommandProcessor.Progress" /> event occurs when a control is redrawn. A <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs" />
            specifies information on which image and command is being currently processed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.#ctor(System.Int32,Leadtools.ImageProcessing.IRasterCommand,System.Int32,System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="percent">The percentage completion of the current command.</param>
      <param name="command">The <see cref="T:Leadtools.ImageProcessing.IRasterCommand" /> object currently being executed.</param>
      <param name="commandNumber">The index of the current <paramref name="RasterCommand" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> collection.</param>
      <param name="totalCommands">The total number of commands to be executed.</param>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object being processed.</param>
      <param name="imageNumber">The index of the current <paramref name="RasterImage" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> collection.</param>
      <param name="totalImages">The total number of images to be processed.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.Cancel">
      <summary>Determine how to process or cancel the current command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value which indicates whether to continue with the image processing command or to cancel it.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.Percent">
      <summary>Gets the percentage completion of the current command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The percentage completion of the command.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.Command">
      <summary>Gets the <see cref="T:Leadtools.ImageProcessing.IRasterCommand" /> object currently being executed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.ImageProcessing.IRasterCommand" /> object currently being executed.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.CommandNumber">
      <summary>Gets the index of the current <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The index of the current <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> collection.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.TotalCommands">
      <summary>Gets the total number of commands to be executed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The total number of commands to be executed.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.Image">
      <summary>Gets the <see cref="T:Leadtools.RasterImage" /> object being processed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterImage" /> object being processed.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.ImageNumber">
      <summary>Gets the index of the current <see cref="T:Leadtools.RasterImage" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The index of the current <see cref="T:Leadtools.RasterImage" /> in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> collection.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs.TotalImages">
      <summary>Gets the total number of images to be processed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The total number of images to be processed.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.IRasterCommand">
      <summary>Allows an inheriting class to implement a <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> class which, provides functionality for
            performing an image processing command on an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            The <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> class is the main image processing class, and implements the
            <see cref="T:Leadtools.ImageProcessing.IRasterCommand" /> interface.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.IRasterCommand.Run(Leadtools.RasterImage)">
      <summary>Runs the image processing command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image on which the image processing command should be performed.</param>
      <returns>
        <see cref="T:Leadtools.RasterImageChangedFlags" /> flags which indicate the changes made to the specified
            image.</returns>
      <remarks>
        <para>Call this method to start the image processing command.</para>
        <para>Each derived class must override this method to provide the actual image processing algorithm.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.IRasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)">
      <summary>Raises the <see cref="E:Leadtools.ImageProcessing.IRasterCommand.Progress" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="e">A <see cref="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs" /> that contains the event data. </param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <see cref="M:Leadtools.ImageProcessing.IRasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)" /> method also allows derived classes to handle the event without attaching
            a delegate. This is the preferred technique for handling the event in a derived class.</para>
        <para>Notes to Inheritors: When overriding <see cref="M:Leadtools.ImageProcessing.IRasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)" /> in a derived class, be sure to call the base
            class <see cref="M:Leadtools.ImageProcessing.IRasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)" /> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="E:Leadtools.ImageProcessing.IRasterCommand.Progress">
      <summary>Occurs during the image processing command, to provide status on the progress of the command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs" /> containing
            data related to this event.
            </event>
      <remarks>You can use this event to get progress status, or to cancel the process.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.SizeCommand">
      <summary>Resizes an image to a new width and height. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Resizing</keywords>
      <remarks>
        <para>This command resizes the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method. If you want to keep the original-size image and create a new 
            resized version, use <see cref="T:Leadtools.ImageProcessing.ResizeCommand" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example will convert an image to a thumbnail size before saving it to disk.</para>
        <code lang="VB">        Public Sub SizeCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "SizeCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)
         Dim command As SizeCommand = New SizeCommand()
         command.Width = 128
         command.Height = 128
         command.Flags = RasterSizeFlags.Resample
         command.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 8)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SizeCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"SizeCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);
         SizeCommand command = new SizeCommand();
         command.Width = 128;
         command.Height = 128;
         command.Flags = RasterSizeFlags.Resample;
         command.Run(image);

         // Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 8);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SizeCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         SizeCommand command = new SizeCommand();
         command.Width = 128;
         command.Height = 128;
         command.Flags = RasterSizeFlags.Resample;
         command.Run(image);

         // Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 8);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SizeCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim command As SizeCommand = New SizeCommand()
         command.Width = 128
         command.Height = 128
         command.Flags = RasterSizeFlags.Resample
         command.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 8)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterCommand">
      <summary>The <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> class implements <see cref="T:Leadtools.ImageProcessing.IRasterCommand" /> and is the base class for all LEADTOOLS
            image processing commands. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> class is the base class for all LEADTOOLS image processing commands.</para>
        <para>This class contains functionality for dealing with running an image processing command, including progress status
            of the command.</para>
      </remarks>
      <example>
        <para>This example runs two image processing commands on an image showing the progress percentage.</para>
        <code lang="VB">        Public Sub RasterCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim rotatedFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_rotated.bmp")
         Dim flippedFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_flipped.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' flip the image
         Dim flip As FlipCommand = New FlipCommand(False)
         RunCommand(image, flip)

         ' save the image
         codecs.Save(image, flippedFileName, RasterImageFormat.Bmp, 24)

         ' rotate the image by 45 degrees
         Dim rotate As RotateCommand = New RotateCommand()
         rotate.Angle = 45 * 100
         rotate.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White)
         rotate.Flags = RotateCommandFlags.Resize
         RunCommand(image, rotate)

         ' save the image
         codecs.Save(image, rotatedFileName, RasterImageFormat.Bmp, 24)

         ' clean up
         image.Dispose()
      End Sub

      Private cancelAt50 As Boolean

      Private Sub RunCommand(ByVal image As RasterImage, ByVal command As IRasterCommand)
         ' subscribe to the progress event of the command
         AddHandler command.Progress, AddressOf command_Progress

         ' if this is a flip command, we want to stop at 50 percent
         cancelAt50 = TypeOf command Is FlipCommand

         ' run the command
         command.Run(image)

         RemoveHandler command.Progress, AddressOf command_Progress
      End Sub

      Private Sub command_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         ' show the percentage
         Console.WriteLine(e.Percent)

         ' check if we need to cancel the command at 50%
         If e.Percent = 50 AndAlso cancelAt50 Then
            e.Cancel = True
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string rotatedFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_rotated.bmp");
         string flippedFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_flipped.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // flip the image
         FlipCommand flip = new FlipCommand(false);
         RunCommand(image, flip);

         // save the image
         codecs.Save(image, flippedFileName, RasterImageFormat.Bmp, 24);

         // rotate the image by 45 degrees
         RotateCommand rotate = new RotateCommand();
         rotate.Angle = 45 * 100;
         rotate.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White);
         rotate.Flags = RotateCommandFlags.Resize;
         RunCommand(image, rotate);

         // save the image
         codecs.Save(image, rotatedFileName, RasterImageFormat.Bmp, 24);

         // clean up
         image.Dispose();
      }

      bool cancelAt50;

      void RunCommand(RasterImage image, IRasterCommand command)
      {
         // subscribe to the progress event of the command
         command.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(command_Progress);

         // if this is a flip command, we want to stop at 50 percent
         cancelAt50 = command is FlipCommand;

         // run the command
         command.Run(image);

         command.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(command_Progress);
      }

      void command_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         // show the percentage
         Console.WriteLine(e.Percent);

         // check if we need to cancel the command at 50%
         if(e.Percent == 50 &amp;&amp; cancelAt50)
            e.Cancel = true;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterCommandExample(RasterImage image, Stream flippedStream, Stream rotatedStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // flip the image
         FlipCommand flip = new FlipCommand(false);
         RunCommand(image, flip);

         // save the image
         codecs.Save(image, flippedStream, RasterImageFormat.Png, 24);

         // rotate the image by 45 degrees
         RotateCommand rotate = new RotateCommand();
         rotate.Angle = 45 * 100;
         rotate.FillColor = RasterColorConverter.FromColor(Colors.White);
         rotate.Flags = RotateCommandFlags.Resize;
         RunCommand(image, rotate);

         // save the image
         codecs.Save(image, rotatedStream, RasterImageFormat.Png, 24);

         // clean up
         image.Dispose();
      }

      bool cancelAt50;

      void RunCommand(RasterImage image, IRasterCommand command)
      {
         // subscribe to the progress event of the command
         command.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(command_Progress);

         // if this is a flip command, we want to stop at 50 percent
         cancelAt50 = command is FlipCommand;

         // run the command
         command.Run(image);

         command.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(command_Progress);
      }

      void command_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         // show the percentage
         Debug.WriteLine(e.Percent);

         // check if we need to cancel the command at 50%
         if(e.Percent == 50 &amp;&amp; cancelAt50)
            e.Cancel = true;
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterCommandExample(ByVal image As RasterImage, ByVal flippedStream As Stream, ByVal rotatedStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' flip the image
         Dim flip As FlipCommand = New FlipCommand(False)
         RunCommand(image, flip)

         ' save the image
         codecs.Save(image, flippedStream, RasterImageFormat.Png, 24)

         ' rotate the image by 45 degrees
         Dim rotate As RotateCommand = New RotateCommand()
         rotate.Angle = 45 * 100
         rotate.FillColor = RasterColorConverter.FromColor(Colors.White)
         rotate.Flags = RotateCommandFlags.Resize
         RunCommand(image, rotate)

         ' save the image
         codecs.Save(image, rotatedStream, RasterImageFormat.Png, 24)

         ' clean up
         image.Dispose()
      End Sub

      Private cancelAt50 As Boolean

      Private Sub RunCommand(ByVal image As RasterImage, ByVal command As IRasterCommand)
         ' subscribe to the progress event of the command
         AddHandler command.Progress, AddressOf command_Progress

         ' if this is a flip command, we want to stop at 50 percent
         cancelAt50 = TypeOf command Is FlipCommand

         ' run the command
         command.Run(image)

         RemoveHandler command.Progress, AddressOf command_Progress
      End Sub

      Private Sub command_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         ' show the percentage
         Debug.WriteLine(e.Percent)

         ' check if we need to cancel the command at 50%
         If e.Percent = 50 AndAlso cancelAt50 Then
            e.Cancel = True
         End If
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)">
      <summary>Implements <see cref="M:Leadtools.ImageProcessing.IRasterCommand.OnProgress(Leadtools.ImageProcessing.RasterCommandProgressEventArgs)" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="e">A <see cref="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs" /> that contains the event data. </param>
      <remarks>
            This method is used internally by the LEADTOOLS image processing infrastructure.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)">
      <summary>Implements <see cref="M:Leadtools.ImageProcessing.IRasterCommand.Run(Leadtools.RasterImage)" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image on which the image processing command should be performed.</param>
      <returns>
        <see cref="T:Leadtools.RasterImageChangedFlags" /> flags which indicate the changes made to the specified
            image.</returns>
      <remarks>
        <para>Call this method to start the image processing command.</para>
        <para>Each derived class must override this method to provide the actual image processing algorithm.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="E:Leadtools.ImageProcessing.RasterCommand.Progress">
      <summary>Implements <see cref="E:Leadtools.ImageProcessing.IRasterCommand.Progress" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            The <see cref="E:Leadtools.ImageProcessing.RasterCommand.Progress" /> event is fired when the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method. <see cref="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs" /> provides data
            on the current progress of the image processing command.  You can use this data to provide visual feedback to the user.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommand.HasProgress">
      <summary>Determines if the command object has a progress event handler set. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the command object has a progress event handler set; otherwise, false.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SizeCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.SizeCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SizeCommand.#ctor(System.Int32,System.Int32,Leadtools.RasterSizeFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.SizeCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="width">New image width in pixels.</param>
      <param name="height">New image height in pixels.</param>
      <param name="flags">Flags that control the behavior when resizing the image.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SizeCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.SizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SizeCommand.Width">
      <summary>Gets or sets the new image width in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>New image width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.SizeCommand.Height">
      <summary>Gets or sets the new image height in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>New image height in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.SizeCommand.Flags">
      <summary>Gets or sets the flags that control the behavior when resizing the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Flags that control the behavior when resizing the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand">
      <summary>Sets all pixels with negative color values to 0. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Signed images|Colors|Negative values</keywords>
      <remarks>
        <para>If <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Signed">CodecsLoadOptions.Signed</see> is true when a file is loaded, the
            image may contain negative pixel values and LEADTOOLS will paint/process the image incorrectly.  In order to use this image correctly, 
            you must user <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" />.  If the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Signed">CodecsLoadOptions.Signed</see>
            property is false, all negative pixels are cleared internally, during the load process.</para>
        <para>Since some TIFF files are saved with negative values for pixel colors, you should use <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" /> if,
            after loading an image, <see cref="P:Leadtools.RasterImage.Signed">RasterImage.Signed</see> is true. <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" /> does
            nothing if <see cref="P:Leadtools.RasterImage.Signed">RasterImage.IsSigned</see> is false.</para>
        <para>Programming tip: use <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" /> right after loading the image from file.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example sets the Signed flag in the load options, loads a tif file and clears the negative pixels.</para>
        <code lang="VB">        Public Sub ClearNegativePixelsCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CleanNegativePixelsCommand.tif")

         ' Load the CMP file and convert it to TIF
         Dim image As RasterImage = codecs.Load(srcFileName)
         image.Signed = True
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24)
         image.Dispose()

         ' Load this image as signed
         codecs.Options.Load.Signed = True

         ' Load the source image from disk
         image = codecs.Load(destFileName)
         Debug.Assert(image.Signed)

         ' Clear the negative pixels and save it it back
         Dim command As ClearNegativePixelsCommand = New ClearNegativePixelsCommand()
         command.Run(image)
         Debug.Assert((Not image.Signed))

         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ClearNegativePixelsCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CleanNegativePixelsCommand.tif");

         // Load the CMP file and convert it to TIF
         RasterImage image = codecs.Load(srcFileName);
         image.Signed = true;
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24);
         image.Dispose();

         // Load this image as signed
         codecs.Options.Load.Signed = true;

         // Load the source image from disk
         image = codecs.Load(destFileName);
         Debug.Assert(image.Signed);

         // Clear the negative pixels and save it it back
         ClearNegativePixelsCommand command = new ClearNegativePixelsCommand();
         command.Run(image);
         Debug.Assert(!image.Signed);

         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ClearNegativePixelsCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // convert it to TIF
         image.Signed = true;
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24);
         image.Dispose();

         // Load this image as signed
         codecs.Options.Load.Signed = true;

         // Load the source image
         image = codecs.Load(destStream);
         Debug.Assert(image.Signed);

         // Clear the negative pixels and save it it back
         ClearNegativePixelsCommand command = new ClearNegativePixelsCommand();
         command.Run(image);
         Debug.Assert(!image.Signed);

         codecs.Save(image, destStream, RasterImageFormat.Tif, 24);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ClearNegativePixelsCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' convert it to TIF
         image.Signed = True
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24)
         image.Dispose()

         ' Load this image as signed
         codecs.Options.Load.Signed = True

         ' Load the source image
         image = codecs.Load(destStream)
         Debug.Assert(image.Signed)

         ' Clear the negative pixels and save it it back
         Dim command As ClearNegativePixelsCommand = New ClearNegativePixelsCommand()
         command.Run(image)
         Debug.Assert((Not image.Signed))

         codecs.Save(image, destStream, RasterImageFormat.Tif, 24)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearNegativePixelsCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearNegativePixelsCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearNegativePixelsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.LeadPoint">
      <summary>Stores two integer numbers that represent the coordinates of a point (X and Y). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Various parts of the LEADTOOLS toolkit require a structure that represents a point with an X and Y values.
            Although the .NET framework contains many structures that can be used for this such as <strong>System.Drawing.Point</strong> and <strong>System.Windows.Point</strong> they
            are tied to a specific platform (GDI+ and WPF/Silverlight in the previous case).</para>
        <para>The <see cref="T:Leadtools.LeadPoint" /> structure specifies a platform independent representation of a point. If required, you can convert <see cref="T:Leadtools.LeadPoint" />
            to a platform independent point.</para>
        <para>To convert a GDI+ System.Drawing.Point (source) to LeadPoint, use the following code:</para>
        <para>
          <c>LeadPoint dest = new LeadPoint(source.X, source.Y)</c>
        </para>
        <para>To convert a LeadPoint (source) to GDI+ System.Drawing.Point, use the following code:</para>
        <para>
          <c>System.Drawing.Point dest = new System.Drawing.Point(source.X, source.Y)</c>
        </para>
        <para>To convert a WPF System.Windows.Point (source) to LeadPoint, use the following code:</para>
        <para>
          <c>LeadPoint dest = new LeadPoint((int)source.X, (int)source.Y)</c>
        </para>
        <para>To convert a LeadPoint (source) to WPF System.Windows.Point, use the following code:</para>
        <para>
          <c>System.Windows.Point dest = new System.Windows.Point(source.X, source.Y)</c>
        </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.Equals(Leadtools.LeadPoint,Leadtools.LeadPoint)">
      <summary>Specifies whether two <see cref="T:Leadtools.LeadPoint" /> objects contain the same coordinates. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="point1">
            The first <see cref="T:Leadtools.LeadPoint" /> object to use in the comparison.
            </param>
      <param name="point2">
            The second <see cref="T:Leadtools.LeadPoint" /> object to use in the comparison.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadPoint" /> objects have the same coordinates; otherwise, it is <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.Create(System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.LeadPoint" /> object with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="x">
            Specifies the X-coordinate of the <see cref="T:Leadtools.LeadPoint" />.
            </param>
      <param name="y">
            Specifies the Y-coordinate of the <see cref="T:Leadtools.LeadPoint" />.
            </param>
      <returns>A <see cref="T:Leadtools.LeadPoint" /> object with <see cref="P:Leadtools.LeadPoint.X" /> set to <paramref name="x" /> and <see cref="P:Leadtools.LeadPoint.Y" /> set to <paramref name="y" />.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.LeadPoint" /> structure object with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="x">
            Specifies the X-coordinate of the <see cref="T:Leadtools.LeadPoint" />.
            </param>
      <param name="y">
            Specifies the Y-coordinate of the <see cref="T:Leadtools.LeadPoint" />.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.ToString">
      <summary>Converts this <see cref="T:Leadtools.LeadPoint" /> to a human-readable string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.op_Equality(Leadtools.LeadPoint,Leadtools.LeadPoint)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadPoint" /> contains the same coordinates as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadPoint" /> on the left side of the comparison operator.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadPoint" /> on the right side of the comparison operator.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadPoint" /> have the same coordinates; <strong>false</strong>, otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.op_Inequality(Leadtools.LeadPoint,Leadtools.LeadPoint)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadPoint" /> does not contain the same coordinates as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadPoint" /> on the left side of the comparison operator.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadPoint" /> on the right side of the comparison operator.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadPoint" /> do not have the same  coordinates; <strong>false</strong>, otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.Equals(System.Object)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadPoint" /> contains the same coordinates as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="obj">
            The object to be used in the comparison with the current object.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadPoint" /> have the same coordinates; <strong>false</strong>, otherwise.</returns>
      <remarks>
        <para>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadPoint.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:Leadtools.LeadPoint" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For information about this method., see <see cref="M:System.Object.GetHashCode" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadPoint.Empty">
      <summary>Represents a new instance of the <see cref="T:Leadtools.LeadPoint" /> with uninitialized members. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of the <see cref="T:Leadtools.LeadPoint" /> with uninitialized members.
            </value>
      <para>An empty <see cref="T:Leadtools.LeadPoint" /> has coordinates value of zero for both <see cref="P:Leadtools.LeadPoint.X" /> and <see cref="P:Leadtools.LeadPoint.Y" />.</para>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadPoint.IsEmpty">
      <summary>Gets a value indicating whether this <see cref="T:Leadtools.LeadPoint" /> structure is empty. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.LeadPoint" /> structure is empty; <strong>false</strong>, otherwise.</value>
      <remarks>
        <para>An empty <see cref="T:Leadtools.LeadPoint" /> has coordinates value of zero for both <see cref="P:Leadtools.LeadPoint.X" /> and <see cref="P:Leadtools.LeadPoint.Y" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadPoint.X">
      <summary>Gets or sets a value that represents the X coordinate for this <see cref="T:Leadtools.LeadPoint" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The x-coordinate of this <see cref="T:Leadtools.LeadPoint" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadPoint.Y">
      <summary>Gets or sets a value that represents the Y coordinate for this <see cref="T:Leadtools.LeadPoint" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The y-coordinate of this <see cref="T:Leadtools.LeadPoint" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.LeadSize">
      <summary>Stores two integer numbers that represents the size (Width and Height). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Various parts of the LEADTOOLS toolkit require a structure that represents a size with width and height values.
            Although the .NET framework contains many structures that can be used for this such as <strong>System.Drawing.Size</strong> and <strong>System.Windows.Size</strong> they
            are tied to a specific platform (GDI+ and WPF/Silverlight in the previous case).</para>
        <para>The <see cref="T:Leadtools.LeadSize" /> structure specifies a platform independent representation of a size. If required, you can convert <see cref="T:Leadtools.LeadSize" />
            to a platform independent size.</para>
        <para>To convert a GDI+ System.Drawing.Size (source) to LeadSize, use the following code:</para>
        <para>
          <c>LeadSize dest = new LeadSize(source.Width, source.Height)</c>
        </para>
        <para>To convert a LeadSize (source) to GDI+ System.Drawing.Size, use the following code:</para>
        <para>
          <c>System.Drawing.Size dest = new System.Drawing.Size(source.Width, source.Height)</c>
        </para>
        <para>To convert a WPF System.Windows.Size (source) to LeadSize, use the following code:</para>
        <para>
          <c>LeadSize dest = new LeadSize((int)source.Width, (int)source.Height)</c>
        </para>
        <para>To convert a LeadSize (source) to WPF System.Windows.Size, use the following code:</para>
        <para>
          <c>System.Windows.Size dest = new System.Windows.Size(source.Width, source.Height)</c>
        </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.Create(System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.LeadSize" /> object with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="width">
            Specifies the width of the <see cref="T:Leadtools.LeadSize" />. Must be a value greater than or equal to 0.
            </param>
      <param name="height">
            Specifies the height of the <see cref="T:Leadtools.LeadSize" />. Must be a value greater than or equal to 0.
            </param>
      <returns>A <see cref="T:Leadtools.LeadSize" /> object with <see cref="P:Leadtools.LeadSize.Width" /> set to <paramref name="width" /> and <see cref="P:Leadtools.LeadSize.Height" /> set to <paramref name="height" />.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.Equals(Leadtools.LeadSize,Leadtools.LeadSize)">
      <summary>Specifies whether two <see cref="T:Leadtools.LeadSize" /> contain the same coordinates. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="size1">
            The first <see cref="T:Leadtools.LeadSize" /> object to use in the comparison.
            </param>
      <param name="size2">
            The second <see cref="T:Leadtools.LeadSize" /> object to use in the comparison.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadSize" /> objects have the same coordinates; otherwise, it is <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.LeadSize" /> structure object with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="width">
            Specifies the width of the <see cref="T:Leadtools.LeadSize" />.
            </param>
      <param name="height">
            Specifies the height of the <see cref="T:Leadtools.LeadSize" />.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.ToString">
      <summary>Converts this <see cref="T:Leadtools.LeadSize" /> to a human-readable string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.op_Equality(Leadtools.LeadSize,Leadtools.LeadSize)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadSize" /> contains the same width and height as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadSize" /> to be used in the comparison.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadSize" /> to be used in the comparison.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadSize" /> have the same width and height; otherwise, <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.op_Inequality(Leadtools.LeadSize,Leadtools.LeadSize)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadSize" /> does not contain the same width and height as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadSize" /> to be used in the comparison.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadSize" /> to be used in the comparison.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadSize" /> do not have the same width and height; otherwise, <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.LeadSize.Equals(System.Object)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadSize" /> contains the same width and height as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="obj">
            The object to be used in the comparison with the current object.
            </param>
      <returns>
        <strong>true</strong> if the <paramref name="obj" /> has the same width and height as this <see cref="T:Leadtools.LeadSize" />; otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadSize.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:Leadtools.LeadSize" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For information about this method, see <see cref="M:System.Object.GetHashCode" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadSize.Empty">
      <summary>Represents a new instance of the <see cref="T:Leadtools.LeadSize" /> structure with uninitialized members. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of the <see cref="T:Leadtools.LeadSize" /> structure with uninitialized members.
            </value>
      <remarks>
        <para>An uninitialized <see cref="T:Leadtools.LeadSize" /> has a width and height value of zero.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadSize.IsEmpty">
      <summary>Gets a value indicating whether this <see cref="T:Leadtools.LeadSize" /> structure is empty. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.LeadSize" /> structure is empty; otherwise, <strong>false</strong>.</value>
      <remarks>
        <para>An uninitialized <see cref="T:Leadtools.LeadSize" /> has a width and height value of zero.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadSize.Width">
      <summary>Gets or sets a value that represents the width for this <see cref="T:Leadtools.LeadSize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value that indicates the width of the size.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadSize.Height">
      <summary>Gets or sets a value that represents the height for this <see cref="T:Leadtools.LeadSize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value that indicates the height of the size.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.LeadRect">
      <summary>Stores four integer numbers that represent the coordinates and size of a rectangle (X, Y, Width, and Height). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Various parts of the LEADTOOLS toolkit require a structure that represents a rectangle with location and size values.
            Although the .NET framework contains many structures that can be used for this such as <strong>System.Drawing.Rectangle</strong> and <strong>System.Windows.Rect</strong> they
            are tied to a specific platform (GDI+ and WPF/Silverlight in the previous case).</para>
        <para>The <see cref="T:Leadtools.LeadRect" /> structure specifies a platform independent representation of a rectangle. If required, you can convert <see cref="T:Leadtools.LeadRect" />
            to a platform independent rectangle.</para>
        <para>To convert a GDI+ System.Drawing.Rectangle (source) to LeadRect, use the following code:</para>
        <para>
          <c>LeadRect dest = new LeadRect(source.X, source.Y, source.Width, source.Height)</c>
        </para>
        <para>To convert a LeadRect (source) to GDI+ System.Drawing.Rectangle, use the following code:</para>
        <para>
          <c>System.Drawing.Rectangle dest = new System.Drawing.Rectangle(source.X, source.Y, source.Width, source.Height)</c>
        </para>
        <para>To convert a WPF System.Windows.Rect (source) to LeadRect, use the following code:</para>
        <para>
          <c>LeadRect dest = new LeadRect((int)source.X, (int)source.Y, (int)source.Width, (int)source.Height)</c>
        </para>
        <para>To convert a LeadRect (source) to WPF System.Windows.Rect, use the following code:</para>
        <para>
          <c>System.Windows.Rect dest = new System.Windows.Rect(source.X, source.Y, source.Width, source.Height)</c>
        </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.LeadRect" /> object with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="x">
            Specifies the X coordinates of the <see cref="T:Leadtools.LeadRect" />.
            </param>
      <param name="y">
            Specifies the Y coordinates of the <see cref="T:Leadtools.LeadRect" />.
            </param>
      <param name="width">
            Specifies the width of the <see cref="T:Leadtools.LeadRect" />. Must be a value greater than or equal to 0.
            </param>
      <param name="height">
            Specifies the height of the <see cref="T:Leadtools.LeadRect" />. Must be a value greater than or equal to 0.
            </param>
      <returns>A <see cref="T:Leadtools.LeadRect" /> with <see cref="P:Leadtools.LeadRect.X" /> set to <paramref name="x" />, <see cref="P:Leadtools.LeadRect.Y" /> set to <paramref name="y" />, <see cref="P:Leadtools.LeadRect.Width" /> set to
            <paramref name="width" /> and <see cref="P:Leadtools.LeadRect.Height" /> set to <paramref name="height" />.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadRect" /> structure with the specified location and size <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The x-coordinate of the upper-left corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="top">
            The y-coordinate of the upper-left corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="width">
            The width of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="height">
            The height of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Returns a <see cref="T:Leadtools.LeadRect" /> structure with the specified edge locations. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The x-coordinate of the upper-left corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="top">
            The y-coordinate of the upper-left corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="right">
            The x-coordinate of the lower-right corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <param name="bottom">
            The y-coordinate of the lower-right corner of the <see cref="T:Leadtools.LeadRect" />. 
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.ToString">
      <summary>Converts this <see cref="T:Leadtools.LeadRect" /> to a human-readable string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.#ctor(Leadtools.LeadPoint,Leadtools.LeadSize)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadRect" /> class with the specified location and size. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="location">
            The coordinates of the upper-left corner of the rectangle.
            </param>
      <param name="size">
            The width and height of the rectangle.
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Equals(System.Object)">
      <summary>Determines whether the specified object equals this <see cref="T:Leadtools.LeadRect" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="obj">
            The <see cref="T:System.Object" /> to test.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadRect" /> have the same location and size; <strong>false</strong>, otherwise.</returns>
      <remarks>
        <para>For more information refer to <see cref="M:System.Object.Equals(System.Object)" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.op_Equality(Leadtools.LeadRect,Leadtools.LeadRect)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadRect" /> contains the same location and size as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadRect" /> on the left side of the comparison operator.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadRect" /> on the right side of the comparison operator.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadRect" /> have the same location and size; <strong>false</strong>, otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.op_Inequality(Leadtools.LeadRect,Leadtools.LeadRect)">
      <summary>Specifies whether this <see cref="T:Leadtools.LeadRect" /> does not contain the same location and size as the specified object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="left">
            The first <see cref="T:Leadtools.LeadRect" /> on the left side of the comparison operator.
            </param>
      <param name="right">
            The second <see cref="T:Leadtools.LeadRect" /> on the right side of the comparison operator.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.LeadRect" /> do not have the same location and size; <strong>false</strong>, otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Contains(System.Int32,System.Int32)">
      <summary>Determines whether the specified point is contained within this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="x">
            The x-coordinate of the point to test.
            </param>
      <param name="y">
            The y-coordinate of the point to test.
            </param>
      <returns>
        <strong>true</strong> if the specified point is contained within this <see cref="T:Leadtools.LeadRect" />; <strong>false</strong>, otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Contains(Leadtools.LeadPoint)">
      <summary>Determines if the specified point is contained within this <see cref="T:Leadtools.LeadPoint" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="pt">The <see cref="T:Leadtools.LeadPoint" /> structure to be tested.</param>
      <returns>This method returns <strong>true</strong> if the point represented by the <i>pt</i> parameter is contained within this <see cref="T:Leadtools.LeadPoint" /> structure; otherwise <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Contains(Leadtools.LeadRect)">
      <summary>Determines if the rectangular region represented by <i>rect</i> is entirely contained within this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">The <see cref="T:Leadtools.LeadRect" /> structure to be tested.</param>
      <returns>This method returns <strong>true</strong> if the rectangular region represented by <i>rect</i> is entirely contained within the rectangular region represented by this <see cref="T:Leadtools.LeadRect" />; otherwise <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For information about this method, see <see cref="M:System.Object.GetHashCode" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Inflate(System.Int32,System.Int32)">
      <summary>Inflates a <see cref="T:Leadtools.LeadRect" /> structure by the specified amount. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="width">
            The amount to inflate this <see cref="T:Leadtools.LeadRect" /> horizontally.
            </param>
      <param name="height">
            The amount to inflate this <see cref="T:Leadtools.LeadRect" /> vertically.
            </param>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 150 by 150 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 250 units long (the original 150, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center.
            If either width or height is negative, the rectangle structure is deflated in the corresponding direction.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Inflate(Leadtools.LeadSize)">
      <summary>Inflates this <see cref="T:Leadtools.LeadRect" /> structure by the specified amount. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="size">The amount to inflate this rectangle.</param>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 150 units long (the original 50, plus the 50 in the minus direction, and plus the 50 in the plus direction). The rectangle's geometric center is maintained.</para>
        <para>If either size.Width or size.Height is negative, the <see cref="T:Leadtools.LeadRect" /> is deflated in the corresponding direction.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Inflate(Leadtools.LeadRect,System.Int32,System.Int32)">
      <summary>Creates and returns an inflated copy of the specified <see cref="T:Leadtools.LeadRect" /> structure. The copy is inflated by the specified amount. The original rectangle remains unmodified. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">The <see cref="T:Leadtools.LeadRect" /> to be copied.  This rectangle is not modified.</param>
      <param name="x">The amount to inflate the copy of the rectangle along the x-axis.</param>
      <param name="y">The amount to inflate the copy of the rectangle along the y-axis.</param>
      <returns>The inflated <see cref="T:Leadtools.LeadRect" /> structure.</returns>
      <remarks>
        <para>This method inflates this rectangle, not a copy of it. The inflation along an axis is in two directions (minus direction and plus direction). For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resulting rectangle will be 150 units long (the original 50, plus the 50 in the minus direction, and plus the 50 in the plus direction). The rectangle's geometric center is maintained.</para>
        <para>If either size.Width or size.Height is negative, the <see cref="T:Leadtools.LeadRect" /> is deflated in the corresponding direction.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Intersect(Leadtools.LeadRect)">
      <summary>Replaces this <see cref="T:Leadtools.LeadRect" /> structure with the intersection of itself and the specified <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">The rectangle to intersect.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Intersect(Leadtools.LeadRect,Leadtools.LeadRect)">
      <summary>Returns an <see cref="T:Leadtools.LeadRect" /> structure that represents the intersection of two rectangles. If there is no intersection, an empty rectangle is returned. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="a">A rectangle to intersect.</param>
      <param name="b">A rectangle to intersect</param>
      <returns>A third <see cref="T:Leadtools.LeadRect" /> structure the size of which represents the overlapped area of the two specified rectangles.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.IntersectsWith(Leadtools.LeadRect)">
      <summary>Determines if this rectangle intersects with a test rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">The rectangle to test.</param>
      <returns>This method returns <strong>true</strong> if there is any intersection; <strong>false</strong> otherwise.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Union(Leadtools.LeadRect,Leadtools.LeadRect)">
      <summary>Gets a rectangle structure that contains the union of two rectangle structures. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="a">
            A rectangle to union.
            </param>
      <param name="b">
            A rectangle to union 
            </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Offset(Leadtools.LeadPoint)">
      <summary>Adjusts the location of this rectangle by the specified amount. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="pos">The amount to offset the location.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadRect.Offset(System.Int32,System.Int32)">
      <summary>Adjusts the location of this rectangle by the specified amounts. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="x">The amount to offset the location horizontally.</param>
      <param name="y">The amount to offset the location vertically.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Empty">
      <summary>Represents a new instance of the <see cref="T:Leadtools.LeadRect" /> with uninitialized members. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of the <see cref="T:Leadtools.LeadRect" /> with uninitialized members.
            </value>
      <remarks>
        <para>An uninitialized <see cref="T:Leadtools.LeadRect" /> contains values of <see cref="P:Leadtools.LeadRect.X" />, <see cref="P:Leadtools.LeadRect.Y" />, <see cref="P:Leadtools.LeadRect.Width" /> and <see cref="P:Leadtools.LeadRect.Height" /> of zero.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.IsEmpty">
      <summary>Gets a value indicating whether this <see cref="T:Leadtools.LeadRect" /> structure is empty. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.LeadRect" /> structure is empty; <strong>false</strong>, otherwise.</value>
      <remarks>
        <para>An uninitialized <see cref="T:Leadtools.LeadRect" /> contains values of <see cref="P:Leadtools.LeadRect.X" />, <see cref="P:Leadtools.LeadRect.Y" />, <see cref="P:Leadtools.LeadRect.Width" /> and <see cref="P:Leadtools.LeadRect.Height" /> of zero.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.X">
      <summary>Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The x-coordinate of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Y">
      <summary>Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The y-coordinate of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Right">
      <summary>Gets the x-coordinate of the upper-right corner of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The right edge of this <see cref="T:Leadtools.LeadRect" />.</value>
      <remarks>
        <para>The upper-right corner is the sum of the <see cref="P:Leadtools.LeadRect.X" /> and the <see cref="P:Leadtools.LeadRect.Width" /> property values of this <see cref="T:Leadtools.LeadRect" /> structure.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Bottom">
      <summary>Gets the y-coordinate of the lower-right corner of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The bottom edge of this <see cref="T:Leadtools.LeadRect" />.</value>
      <remarks>
        <para>The lower-right corner is the sum of the <see cref="P:Leadtools.LeadRect.Y" /> and the <see cref="P:Leadtools.LeadRect.Height" /> property values of this <see cref="T:Leadtools.LeadRect" /> structure.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Left">
      <summary>Gets the x-coordinate of the left edge of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The left edge of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Top">
      <summary>Gets the y-coordinate of the top edge of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The top edge of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.LeadRect.Width">
      <summary>Gets or sets the width of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value that indicates the width of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Height">
      <summary>Gets or sets the height of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value that indicates the height of the rectangle.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Location">
      <summary>Gets or sets the coordinates of the upper-left corner of this <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The upper-left corner coordinates of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.LeadRect.Size">
      <summary>Gets or sets the size of this <see cref="T:Leadtools.LeadRect" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width and height of this <see cref="T:Leadtools.LeadRect" />.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.LeadFillMode">
      <summary>Specifies how a polygonal shape with crossing lines is filled. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The following figure describes how fill mode is used:</para>
        <para>
          <img src="FillMode.gif" />
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.AddPolygonToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCollection{Leadtools.LeadPoint},Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)" />.</example>
    </member>
    <member name="F:Leadtools.LeadFillMode.Alternate">
      <summary>
            The filled area includes the area between odd-numbered and even-numbered polygon sides on each scan line.
            </summary>
    </member>
    <member name="F:Leadtools.LeadFillMode.Winding">
      <summary>
            All pixels that are inside the resulting exterior lines are filled.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.FlipCommand">
      <summary>Flips a <see cref="T:Leadtools.RasterImage" /> from top to bottom or from left to right. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Flipping|Rotating|Orientation</keywords>
      <remarks>
        <para>This command can flip an image from top to bottom (vertically) or from left to right (horizontally).</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <example>
        <para>This example will load an image and then flip it before saving it back to disk.</para>
        <code lang="VB">        Public Sub FlipCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim flipExamplesImage1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_horizontal.bmp")
         Dim flipExamplesImage2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_horizontal.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Flip the image horizontally (reverse)
         Dim cmd As FlipCommand = New FlipCommand()
         cmd.Horizontal = True
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, flipExamplesImage1, RasterImageFormat.Bmp, 24)

         ' Flip the image vertically
         cmd.Horizontal = False
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, flipExamplesImage2, RasterImageFormat.Bmp, 24)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FlipCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string flipExamplesImage1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_horizontal.bmp");
         string flipExamplesImage2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_horizontal.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Flip the image horizontally (reverse)
         FlipCommand cmd = new FlipCommand();
         cmd.Horizontal = true;
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            flipExamplesImage1,
            RasterImageFormat.Bmp,
            24);

         // Flip the image vertically
         cmd.Horizontal = false;
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            flipExamplesImage2,
            RasterImageFormat.Bmp,
            24);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void FlipCommandExample(RasterImage image, Stream destStream1, Stream destStream2)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Flip the image horizontally (reverse)
         FlipCommand cmd = new FlipCommand();
         cmd.Horizontal = true;
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            destStream1,
            RasterImageFormat.Bmp,
            24);

         // Flip the image vertically
         cmd.Horizontal = false;
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            destStream2,
            RasterImageFormat.Bmp,
            24);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FlipCommandExample(ByVal image As RasterImage, ByVal destStream1 As Stream, ByVal destStream2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Flip the image horizontally (reverse)
         Dim cmd As FlipCommand = New FlipCommand()
         cmd.Horizontal = True
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, destStream1, RasterImageFormat.Bmp, 24)

         ' Flip the image vertically
         cmd.Horizontal = False
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, destStream2, RasterImageFormat.Bmp, 24)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.FlipCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.FlipCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Default value for the <see cref="P:Leadtools.ImageProcessing.FlipCommand.Horizontal" /> property is false.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.FlipCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.FlipCommand.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.FlipCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="horizontal">true to flip horizontally (left to right), false to flip vertically (top to bottom).</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.FlipCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.FlipCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.FlipCommand.Horizontal">
      <summary>Specifies whether the image is to be flipped horizontally or vertically. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to flip the image horizontally (left to right), false to flip the image vertically (top to bottom).</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.FlipCommand" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.ImageProcessing.RasterCommand.Progress" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            All classes derived from <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> has a <see cref="E:Leadtools.ImageProcessing.RasterCommand.Progress" /> event that will provide
            feedback on the percentage of the command processing.  You can use this event to update a user interface progress bar
            for example.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommandProgressEventArgs.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterCommandProgressEventArgs" /> class with specific values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="percent">The percentage completion of the command.</param>
      <remarks>The value of <see cref="P:Leadtools.ImageProcessing.RasterCommandProgressEventArgs.Cancel" /> is initialized to false by default.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProgressEventArgs.Percent">
      <summary>Gets the percentage completion of the command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The percentage completion of the command.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProgressEventArgs.Cancel">
      <summary>Gets or sets a value indicating whether the image processing command should be canceled. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image processing command should be canceled; false to continue normally.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommand" /></example>
    </member>
    <member name="T:Leadtools.RasterKnownColor">
      <summary>Specifies the known system colors. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.RasterKnownColor" /> enumeration to construct <see cref="T:Leadtools.RasterColor" /> objects from colors known by name.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterColor.FromKnownColor(Leadtools.RasterKnownColor)">RasterColor.FromKnownColor</see>.</example>
    </member>
    <member name="F:Leadtools.RasterKnownColor.AliceBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.AntiqueWhite">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Aqua">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Aquamarine">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Azure">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Beige">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Bisque">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Black">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.BlanchedAlmond">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Blue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.BlueViolet">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Brown">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.BurlyWood">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.CadetBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Chartreuse">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Chocolate">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Coral">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.CornflowerBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Cornsilk">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Crimson">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Cyan">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkCyan">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkGoldenrod">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkKhaki">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkMagenta">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkOliveGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkOrange">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkOrchid">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkRed">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkSalmon">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkSeaGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkSlateBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkSlateGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkTurquoise">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DarkViolet">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DeepPink">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DeepSkyBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DimGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.DodgerBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Firebrick">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.FloralWhite">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ForestGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Fuchsia">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Gainsboro">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.GhostWhite">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Gold">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Goldenrod">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Gray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Green">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.GreenYellow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Honeydew">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.HotPink">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.IndianRed">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Indigo">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Ivory">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Khaki">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Lavender">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LavenderBlush">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LawnGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LemonChiffon">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightCoral">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightCyan">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightGoldenrodYellow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightPink">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightSalmon">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightSeaGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightSkyBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightSlateGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightSteelBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LightYellow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Lime">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.LimeGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Linen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Magenta">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Maroon">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumAquamarine">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumOrchid">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumPurple">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumSeaGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumSlateBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumSpringGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumTurquoise">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MediumVioletRed">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MidnightBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MintCream">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MistyRose">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Moccasin">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.NavajoWhite">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Navy">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.OldLace">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Olive">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.OliveDrab">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Orange">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.OrangeRed">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Orchid">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PaleGoldenrod">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PaleGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PaleTurquoise">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PaleVioletRed">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PapayaWhip">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PeachPuff">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Peru">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Pink">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Plum">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.PowderBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Purple">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Red">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.RosyBrown">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.RoyalBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SaddleBrown">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Salmon">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SandyBrown">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SeaGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SeaShell">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Sienna">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Silver">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SkyBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SlateBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SlateGray">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Snow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SpringGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.SteelBlue">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Tan">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Teal">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Thistle">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Tomato">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Transparent">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Turquoise">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.UnknownColor">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Violet">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Wheat">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.White">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.WhiteSmoke">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Yellow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.YellowGreen">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ActiveBorder">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ActiveCaption">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.AppWorkspace">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Background">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ButtonFace">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ButtonHighlight">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ButtonShadow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ButtonText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.CaptionText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.GrayText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Highlight">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.HighlightText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.InactiveBorder">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.InactiveCaption">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.InactiveCaptionText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.InfoBackground">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.InfoText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Menu">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.MenuText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Scrollbar">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ThreeDDarkShadow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ThreeDFace">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ThreeDHighlight">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.ThreeDLightShadow">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.Window">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.WindowFrame">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="F:Leadtools.RasterKnownColor.WindowText">
      <summary>
            A system-defined color
            </summary>
    </member>
    <member name="T:Leadtools.RasterColor">
      <summary>Describes a color consisting of relative intensities of alpha, red, green, and blue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterColor" /> class provides a platform independent representation of an ARGB color that can be used in any platform
            supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight.</para>
        <para>To convert a LEADTOOLS <see cref="T:Leadtools.RasterColor" /> object to/from a device dependent color, you can either use the various properties of methods
            of this class (such as the <see cref="P:Leadtools.RasterColor.A" />, <see cref="P:Leadtools.RasterColor.R" />, <see cref="P:Leadtools.RasterColor.G" />, <see cref="P:Leadtools.RasterColor.B" /> properties and
            the <see cref="M:Leadtools.RasterColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">RasterColor(int alpha, int red, int green, int blue)</see> constructor) directly, or
            use the following helper classes:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Drawing.RasterColorConverter">Leadtools.Drawing.RasterColorConverter</see> to convert to/from a System.Drawing (GDI+) <see cref="T:System.Drawing.Color">System.Drawing.Color</see> object.</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Windows.Media.RasterColorConverter">Leadtools.Windows.Media.RasterColorConverter</see> to convert to/from a System.Windows.Media.Color (WPF and Silverlight) <see cref="T:System.Windows.Media.Color">System.Windows.Media.Color</see> object.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Converts a .NET color to a RasterColor and back.</para>
        <code lang="VB">      Public Sub Example()
         ' Create a RasterColor
         Dim clr As New RasterColor(128, 24, 87, 134)

         ' Make sure the color is correct
         Debug.Assert(clr.A = 128)
         Debug.Assert(clr.R = 24)
         Debug.Assert(clr.G = 87)
         Debug.Assert(clr.B = 134)

         ' Show its value
         Console.WriteLine(clr)

         ' Show the A, R, G and B values
         Console.WriteLine("Alpha value: " + clr.A.ToString())
         Console.WriteLine("Red value: " + clr.R.ToString())
         Console.WriteLine("Green value: " + clr.G.ToString())
         Console.WriteLine("Blue value: " + clr.B.ToString())
      End Sub</code>
        <code lang="CS">      public void Example()
      {
         // Create a RasterColor
         RasterColor clr = new RasterColor(128, 24, 87, 134);

         // Make sure the color is correct
         Debug.Assert(clr.A == 128);
         Debug.Assert(clr.R == 24);
         Debug.Assert(clr.G == 87);
         Debug.Assert(clr.B == 134);

         // Show its value
         Console.WriteLine(clr);

         // Show the A, R, G and B values
         Console.WriteLine("Alpha value: " + clr.A);
         Console.WriteLine("Red value: " + clr.R);
         Console.WriteLine("Green value: " + clr.G);
         Console.WriteLine("Blue value: " + clr.B);
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void Example()
      {
         Random rand = new Random();
         // Create a random .NET color
         Color clr1 = Color.FromArgb((byte)rand.Next(256), (byte)rand.Next(256), (byte)rand.Next(256), (byte)rand.Next(256));

         // Convert this color to a LEADTOOLS color
         RasterColor clr2 = RasterColorConverter.FromColor(clr1);

         // Make sure both colors are equal
         Debug.Assert(clr1.A == clr2.A);
         Debug.Assert(clr1.R == clr2.R);
         Debug.Assert(clr1.G == clr2.G);
         Debug.Assert(clr1.B == clr2.B);

         // Convert the LEADTOOLS color back to .NET
         clr1 = RasterColorConverter.ToColor(clr2);

         // Make sure both colors are equal
         Debug.Assert(clr1.A == clr2.A);
         Debug.Assert(clr1.R == clr2.R);
         Debug.Assert(clr1.G == clr2.G);
         Debug.Assert(clr1.B == clr2.B);
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub Example()
         Dim rand As Random = New Random()
         ' Create a random .NET color
         Dim clr1 As Color = Color.FromArgb(CByte(rand.Next(256)), CByte(rand.Next(256)), CByte(rand.Next(256)), CByte(rand.Next(256)))

         ' Convert this color to a LEADTOOLS color
         Dim clr2 As RasterColor = RasterColorConverter.FromColor(clr1)

         ' Make sure both colors are equal
         Debug.Assert(clr1.A = clr2.A)
         Debug.Assert(clr1.R = clr2.R)
         Debug.Assert(clr1.G = clr2.G)
         Debug.Assert(clr1.B = clr2.B)

         ' Convert the LEADTOOLS color back to .NET
         clr1 = RasterColorConverter.ToColor(clr2)

         ' Make sure both colors are equal
         Debug.Assert(clr1.A = clr2.A)
         Debug.Assert(clr1.R = clr2.R)
         Debug.Assert(clr1.G = clr2.G)
         Debug.Assert(clr1.B = clr2.B)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColor.Equals(Leadtools.RasterColor,Leadtools.RasterColor)">
      <summary>Specifies whether two <see cref="T:Leadtools.RasterColor" /> objects contain the same values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="color1">
            The first <see cref="T:Leadtools.RasterColor" /> object to use in the comparison.
            </param>
      <param name="color2">
            The second <see cref="T:Leadtools.RasterColor" /> object to use in the comparison.
            </param>
      <returns>
        <strong>true</strong> if the two <see cref="T:Leadtools.RasterColor" /> objects have the same values; otherwise, it is <strong>false</strong>.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:Leadtools.RasterColor" /> with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="alpha">Alpha component</param>
      <param name="red">Red component</param>
      <param name="green">Green component</param>
      <param name="blue">Blue component</param>
      <returns>The <see cref="T:Leadtools.RasterColor" /> object this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.RasterColor" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>Exact copy of this <see cref="T:Leadtools.RasterColor" />.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterColor.MaximumComponent">
      <summary>Maximum value for the alpha, red, green, blue component. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterColor.FromRgb(System.Int32)" /></example>
    </member>
    <member name="F:Leadtools.RasterColor.MinimumComponent">
      <summary>Minimum value for the alpha, red, green, blue component. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterColor.FromRgb(System.Int32)" /></example>
    </member>
    <member name="F:Leadtools.RasterColor.ReservedColor">
      <exclude />
    </member>
    <member name="F:Leadtools.RasterColor.EmptyColor">
      <exclude />
    </member>
    <member name="M:Leadtools.RasterColor.FromArgb(System.Int32)">
      <summary>Creates a <see cref="T:Leadtools.RasterColor" /> from an a rgb value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="argb">The a rgb value.</param>
      <returns>The <see cref="T:Leadtools.RasterColor" /> structure that this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.FromRgb(System.Int32)">
      <summary>Creates a <see cref="T:Leadtools.RasterColor" /> from an rgb value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rgb">The rgb value.</param>
      <returns>The <see cref="T:Leadtools.RasterColor" /> structure that this method creates.</returns>
      <noremarks />
      <example>
        <para>This example will create an array of <see cref="T:Leadtools.RasterColor" /> containing 256 shades of gray.</para>
        <code lang="VB">        Public Sub FromRgbExample()
         Dim colors As RasterColor() = New RasterColor(RasterColor.MaximumComponent - RasterColor.MinimumComponent) {}
         Dim i As Integer = RasterColor.MinimumComponent
         Do While i &lt; RasterColor.MaximumComponent
            colors(i) = RasterColor.FromRgb(i)
            i += 1
         Loop

         i = RasterColor.MinimumComponent
         Do While i &lt; RasterColor.MaximumComponent
            Debug.Assert(colors(i).ToRgb() = i)
            i += 1
         Loop
      End Sub</code>
        <code lang="CS">      public void FromRgbExample()
      {
         RasterColor[] colors = new RasterColor[RasterColor.MaximumComponent - RasterColor.MinimumComponent + 1];
         for(int i = RasterColor.MinimumComponent; i &lt; RasterColor.MaximumComponent; i++)
         {
            colors[i] = RasterColor.FromRgb(i);
         }

         for(int i = RasterColor.MinimumComponent; i &lt; RasterColor.MaximumComponent; i++)
         {
            Debug.Assert(colors[i].ToRgb() == i);
         }
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void FromRgbExample()
      {
         RasterColor[] colors = new RasterColor[RasterColor.MaximumComponent - RasterColor.MinimumComponent + 1];
         for(int i = RasterColor.MinimumComponent; i &lt; RasterColor.MaximumComponent; i++)
         {
            colors[i] = RasterColor.FromRgb(i);
         }
         for(int i = RasterColor.MinimumComponent; i &lt; RasterColor.MaximumComponent; i++)
         {
            Debug.Assert(colors[i].ToRgb() == i);
         }
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub FromRgbExample()
         Dim colors As RasterColor() = New RasterColor(RasterColor.MaximumComponent - RasterColor.MinimumComponent){}
         Dim i As Integer = RasterColor.MinimumComponent
         Do While i &lt; RasterColor.MaximumComponent
            colors(i) = RasterColor.FromRgb(i)
            i += 1
         Loop
         i = RasterColor.MinimumComponent
         Do While i &lt; RasterColor.MaximumComponent
            Debug.Assert(colors(i).ToRgb() = i)
            i += 1
         Loop
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColor.FromRgba(System.Int32)">
      <summary>Creates a <see cref="T:Leadtools.RasterColor" /> from a rgba value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rgba">The rgba value.</param>
      <returns>The <see cref="T:Leadtools.RasterColor" /> structure that this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.RasterColor" /> structure with specific values for red, green and blue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="red">The red component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <param name="green">The green component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <param name="blue">The blue component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <remarks>
            The alpha value will be set to <see cref="F:Leadtools.RasterColor.MaximumComponent" />.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub RasterColorExample()
         Dim rand As Random = New Random()

         Dim a As Byte = CByte(rand.Next(256))
         Dim r As Byte = CByte(rand.Next(256))
         Dim g As Byte = CByte(rand.Next(256))
         Dim b As Byte = CByte(rand.Next(256))

         Dim clr As RasterColor = New RasterColor(a, r, g, b)

         ' Check
         Debug.Assert(clr.A = a)
         Debug.Assert(clr.R = r)
         Debug.Assert(clr.G = g)
         Debug.Assert(clr.B = b)
      End Sub</code>
        <code lang="CS">      public void RasterColorExample()
      {
         Random rand = new Random();

         byte a = (byte)rand.Next(256);
         byte r = (byte)rand.Next(256);
         byte g = (byte)rand.Next(256);
         byte b = (byte)rand.Next(256);

         RasterColor clr = new RasterColor(a, r, g, b);

         // Check
         Debug.Assert(clr.A == a);
         Debug.Assert(clr.R == r);
         Debug.Assert(clr.G == g);
         Debug.Assert(clr.B == b);
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void RasterColorExample()
      {
         Random rand = new Random();
         byte a = (byte)rand.Next(256);
         byte r = (byte)rand.Next(256);
         byte g = (byte)rand.Next(256);
         byte b = (byte)rand.Next(256);

         RasterColor clr = new RasterColor(a, r, g, b);

         // Check
         Debug.Assert(clr.A == a);
         Debug.Assert(clr.R == r);
         Debug.Assert(clr.G == g);
         Debug.Assert(clr.B == b);
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub RasterColorExample()
         Dim rand As Random = New Random()
         Dim a As Byte = CByte(rand.Next(256))
         Dim r As Byte = CByte(rand.Next(256))
         Dim g As Byte = CByte(rand.Next(256))
         Dim b As Byte = CByte(rand.Next(256))

         Dim clr As RasterColor = New RasterColor(a, r, g, b)

         ' Check
         Debug.Assert(clr.A = a)
         Debug.Assert(clr.R = r)
         Debug.Assert(clr.G = g)
         Debug.Assert(clr.B = b)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.RasterColor" /> structure with specific values for red, green and blue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="alpha">The alpha component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <param name="red">The red component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <param name="green">The green component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <param name="blue">The blue component value for the new Color structure.
            Valid values are <see cref="F:Leadtools.RasterColor.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor.MaximumComponent" />.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColor" /></example>
    </member>
    <member name="M:Leadtools.RasterColor.ToString">
      <summary>Overridden. Converts this <see cref="T:Leadtools.RasterColor" /> structure to a human-readable string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of the color of this <see cref="T:Leadtools.RasterColor" /> structure.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.ToRgb">
      <summary>Gets a 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure.</returns>
      <remarks>
            The byte ordering this method returns is 00RRBBGG.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.ToArgb">
      <summary>Gets a 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure.</returns>
      <remarks>
            The byte ordering this method returns is AARRGGBB.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.ToRgba">
      <summary>Gets a 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A 32-bit value representation of this <see cref="T:Leadtools.RasterColor" /> structure.</returns>
      <remarks>
            The byte ordering this method returns is RRGGBBAA.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.FromPaletteIndex(System.Int32)">
      <summary>Creates a new <see cref="T:Leadtools.RasterColor" /> object that is an index into a palette <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The index value</param>
      <returns>A new <see cref="T:Leadtools.RasterColor" /> object that is an index into a palette.</returns>
      <remarks>
        <para>A <see cref="T:Leadtools.RasterColor" /> object can be a true RGB color or an index value into the palette of an image.</para>
        <para>If the value of <see cref="P:Leadtools.RasterColor.IsPaletteIndex" /> is <strong>true</strong>, then this color does not contain a true RGB value, instead, the value stored is an index
            into the palette of an image. To get the index value, use <see cref="M:Leadtools.RasterColor.ToRgb" />.</para>
        <para>If the value of <see cref="P:Leadtools.RasterColor.IsPaletteIndex" /> is <strong>false</strong>, then this color contains a true RGB value.</para>
        <para>Use this method to create a color that is a palette index.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop">RasterImage.AnimationGlobalLoop</see></example>
    </member>
    <member name="M:Leadtools.RasterColor.FromKnownColor(Leadtools.RasterKnownColor)">
      <summary>Creates a new <see cref="T:Leadtools.RasterColor" /> structure from a known color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="knownColor">One of the <see cref="T:Leadtools.RasterKnownColor" /> enumeration members.</param>
      <returns>The new <see cref="T:Leadtools.RasterColor" /> object.</returns>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.RasterKnownColor" /> enumeration to construct <see cref="T:Leadtools.RasterColor" /> objects from colors known by name.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub FromKnownColorExample()
         ' Create a yellow color (R = 255, G = 255, B = 0)
         Dim clr1 As New RasterColor(255, 255, 0)

         ' Now create the same color using the "Yellow" known color
         Dim clr2 As RasterColor = RasterColor.FromKnownColor(RasterKnownColor.Yellow)

         ' Make sure both colors have the same value
         Debug.Assert(clr1.A = clr2.A)
         Debug.Assert(clr1.R = clr2.R)
         Debug.Assert(clr1.G = clr2.G)
         Debug.Assert(clr1.B = clr2.B)
      End Sub</code>
        <code lang="CS">      public void FromKnownColorExample()
      {
         // Create a yellow color (R = 255, G = 255, B = 0)
         RasterColor clr1 = new RasterColor(255, 255, 0);

         // Now create the same color using the "Yellow" known color
         RasterColor clr2 = RasterColor.FromKnownColor(RasterKnownColor.Yellow);

         // Make sure both colors have the same value
         Debug.Assert(clr1.A == clr2.A);
         Debug.Assert(clr1.R == clr2.R);
         Debug.Assert(clr1.G == clr2.G);
         Debug.Assert(clr1.B == clr2.B);
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColor.GetKnownColor">
      <summary>Gets the known color enumeration member that matches this color ARGB value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>An <see cref="T:Leadtools.RasterKnownColor" /> enumeration member that matches this color ARGB value. If the color ARGB value does not match any known color,
            <see cref="T:Leadtools.RasterKnownColor">RasterKnownColor.Black</see> is returned.</returns>
      <remarks>
        <para>This method does a comparison of the ARGB values. Therefore, the <see cref="M:Leadtools.RasterColor.GetKnownColor" /> method might return a valid <see cref="T:Leadtools.RasterKnownColor" /> enumeration member
            even if this <see cref="T:Leadtools.RasterColor" /> was no creating using the <see cref="M:Leadtools.RasterColor.FromKnownColor(Leadtools.RasterKnownColor)" /> method.</para>
        <para>To check whether this <see cref="T:Leadtools.RasterColor" /> has a matching <see cref="T:Leadtools.RasterKnownColor" />, use <see cref="P:Leadtools.RasterColor.IsKnownColor" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColor.GetKnownColorName(Leadtools.RasterKnownColor)">
      <summary>Gets the human readable representation of a known color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="knownColor">The known color.</param>
      <returns>A <see cref="T:System.String" /> that contains a human readable representation of a known color. For example, "Black" for <see cref="T:Leadtools.RasterKnownColor">RasterKnownColor.Black</see>,
            "Red" for <see cref="T:Leadtools.RasterKnownColor">RasterKnownColor.Red</see>, and so on.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterColor.Black">
      <summary>Gets a <see cref="T:Leadtools.RasterColor" /> that represents black. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <see cref="T:Leadtools.RasterColor" /> that represents black.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterColor.White">
      <summary>Gets a <see cref="T:Leadtools.RasterColor" /> that represents white. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <see cref="T:Leadtools.RasterColor" /> that represents white.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterColor.A">
      <summary>Gets or sets the alpha component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The alpha component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColor" /></example>
    </member>
    <member name="P:Leadtools.RasterColor.R">
      <summary>Gets or sets the red component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The red component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColor" /></example>
    </member>
    <member name="P:Leadtools.RasterColor.G">
      <summary>Gets or sets the green component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The green component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColor" /></example>
    </member>
    <member name="P:Leadtools.RasterColor.B">
      <summary>Gets or sets the blue component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The blue component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColor" /></example>
    </member>
    <member name="P:Leadtools.RasterColor.Reserved">
      <exclude />
    </member>
    <member name="P:Leadtools.RasterColor.IsReservedColor">
      <exclude />
    </member>
    <member name="P:Leadtools.RasterColor.IsEmptyColor">
      <exclude />
    </member>
    <member name="P:Leadtools.RasterColor.IsPaletteIndex">
      <summary>Gets a value that determines whether this <see cref="T:Leadtools.RasterColor" /> is a palette index value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.RasterColor" /> is a palette index, <strong>false</strong> otherwise.</value>
      <remarks>
        <para>A <see cref="T:Leadtools.RasterColor" /> object can be a true RGB color or an index value into the palette of an image.</para>
        <para>If the value of <see cref="P:Leadtools.RasterColor.IsPaletteIndex" /> is <strong>true</strong>, then this color does not contain a true RGB value, instead, the value stored is an index
            into the palette of an image. To get the index value, use <see cref="M:Leadtools.RasterColor.ToRgb" />.</para>
        <para>If the value of <see cref="P:Leadtools.RasterColor.IsPaletteIndex" /> is <strong>false</strong>, then this color contains a true RGB value.</para>
        <para>To create a color that is a palette index, use the <see cref="M:Leadtools.RasterColor.FromPaletteIndex(System.Int32)" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop">RasterImage.AnimationGlobalLoop</see></example>
    </member>
    <member name="P:Leadtools.RasterColor.IsKnownColor">
      <summary>Gets a value indicating whether this <see cref="T:Leadtools.RasterColor" /> structure is a predefined color. Predefined colors are represented by the elements of the <see cref="T:Leadtools.RasterKnownColor" /> enumeration. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.RasterColor" /> contains an ARGB value that has a matching <see cref="T:Leadtools.RasterKnownColor" /> enumeration member; otherwise, <strong>false</strong>.</value>
      <remarks>
        <para>This property does a comparison of the ARGB values. Therefore, the <see cref="P:Leadtools.RasterColor.IsKnownColor" /> property might return <strong>true</strong> even if this
            <see cref="T:Leadtools.RasterColor" /> was no creating using the <see cref="M:Leadtools.RasterColor.FromKnownColor(Leadtools.RasterKnownColor)" /> method.</para>
        <para>To get the matching <see cref="T:Leadtools.RasterKnownColor" /> enumeration for a <see cref="T:Leadtools.RasterColor" />, use <see cref="M:Leadtools.RasterColor.GetKnownColor" />.</para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.RasterColor16">
      <summary>Describes a color consisting of relative intensities of alpha, red, green, and blue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <remarks>
        <para>This structure is similar to <see cref="T:Leadtools.RasterColor" />, except that it uses 16-bit components.</para>
        <para>This structure is used to represent a 16-bit lookup table (LUT) used with grayscale images.
            See <see cref="M:Leadtools.RasterImage.GetLookupTable16" /> and
            <see cref="M:Leadtools.RasterImage.SetLookupTable16(Leadtools.RasterColor16[])" /> for more information on 16-but LUTs.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintCallbacks">RasterPaintCallbacks</see>.
            </example>
    </member>
    <member name="M:Leadtools.RasterColor16.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:Leadtools.RasterColor16" /> structure with specific values for red, green and blue. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <param name="red">The red component value for the new structure.
            Valid values are <see cref="F:Leadtools.RasterColor16.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor16.MaximumComponent" />.</param>
      <param name="green">The green component value for the new structure.
            Valid values are <see cref="F:Leadtools.RasterColor16.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor16.MaximumComponent" />.</param>
      <param name="blue">The blue component value for the new structure.
            Valid values are <see cref="F:Leadtools.RasterColor16.MinimumComponent" /> through <see cref="F:Leadtools.RasterColor16.MaximumComponent" />.</param>
      <remarks>
            This structure has no alpha component.
            </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub RasterColor16Example()
         ' create a white color
         Dim white16 As RasterColor16 = New RasterColor16(RasterColor16.MaximumComponent, RasterColor16.MaximumComponent, RasterColor16.MaximumComponent)

         ' create a black color
         Dim black16 As RasterColor16 = New RasterColor16(RasterColor16.MinimumComponent, RasterColor16.MinimumComponent, RasterColor16.MinimumComponent)
      End Sub</code>
        <code lang="CS">      public void RasterColor16Example()
      {
         // create a white color
         RasterColor16 white16 = new RasterColor16(RasterColor16.MaximumComponent, RasterColor16.MaximumComponent, RasterColor16.MaximumComponent);

         // create a black color
         RasterColor16 black16 = new RasterColor16(RasterColor16.MinimumComponent, RasterColor16.MinimumComponent, RasterColor16.MinimumComponent);
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void RasterColor16Example()
      {
         // create a white color
         RasterColor16 white16 = new RasterColor16(RasterColor16.MaximumComponent, RasterColor16.MaximumComponent, RasterColor16.MaximumComponent);
         // create a black color
         RasterColor16 black16 = new RasterColor16(RasterColor16.MinimumComponent, RasterColor16.MinimumComponent, RasterColor16.MinimumComponent);
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub RasterColor16Example()
         ' create a white color
         Dim white16 As RasterColor16 = New RasterColor16(RasterColor16.MaximumComponent, RasterColor16.MaximumComponent, RasterColor16.MaximumComponent)
         ' create a black color
         Dim black16 As RasterColor16 = New RasterColor16(RasterColor16.MinimumComponent, RasterColor16.MinimumComponent, RasterColor16.MinimumComponent)
      End Sub</code>
      </example>
    </member>
    <member name="F:Leadtools.RasterColor16.MaximumComponent">
      <summary>Maximum value for the alpha, red, green, blue component. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <remarks>
            This represents the intensity for white
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterColor16.#ctor(System.Int32,System.Int32,System.Int32)" />.
            </example>
    </member>
    <member name="F:Leadtools.RasterColor16.MinimumComponent">
      <summary>Minimum value for the alpha, red, green, blue component. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <remarks>
            This represents the intensity for black
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterColor16.#ctor(System.Int32,System.Int32,System.Int32)" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterColor16.ToString">
      <summary>Overridden. Converts this <see cref="T:Leadtools.RasterColor16" /> structure to a human-readable string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <returns>A string that is the name of the color of this <see cref="T:Leadtools.RasterColor16" /> structure.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterColor16.B">
      <summary>Gets or sets the blue component of this <see cref="T:Leadtools.RasterColor16" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <value>The blue component of this <see cref="T:Leadtools.RasterColor16" /> structure.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Public Sub RasterColor16ComponentsExample()
         ' This C# example shows how to create a normal grayscale LUT.
         Dim lut As RasterColor16() = New RasterColor16(1023) {}
         Dim color As RasterColor16 = New RasterColor16(0, 0, 0)
         For i As UShort = 0 To 1023
            Dim gray As Integer = CInt(i * 65535 / 1023)
            color.R = CUShort(gray)
            color.G = CUShort(gray)
            color.B = CUShort(gray)
            lut(i) = color
         Next i
      End Sub</code>
        <code lang="CS">      public void RasterColor16ComponentsExample()
      {
         // This C# example shows how to create a normal grayscale LUT.
         RasterColor16[] lut = new RasterColor16[1024];
         RasterColor16 color = new RasterColor16(0, 0, 0);
         for(ushort i = 0; i &lt; 1024; i++)
         {
             int gray = i * 65535 / 1023;
             color.R = (ushort)gray;
             color.G = (ushort)gray;
             color.B = (ushort)gray;
             lut[i] = color;
         }
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void RasterColor16ComponentsExample()
      {
         // This C# example shows how to create a normal grayscale LUT.
         RasterColor16[] lut = new RasterColor16[1024];
         RasterColor16 color = new RasterColor16(0, 0, 0);
         for(ushort i = 0; i &lt; 1024; i++)
         {
             int gray = i * 65535 / 1023;
             color.R = (ushort)gray;
             color.G = (ushort)gray;
             color.B = (ushort)gray;
             lut[i] = color;
         }
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub RasterColor16ComponentsExample()
         ' This C# example shows how to create a normal grayscale LUT.
         Dim lut As RasterColor16() = New RasterColor16(1023){}
         Dim color As RasterColor16 = New RasterColor16(0, 0, 0)
         For i As UShort = 0 To 1023
             Dim gray As Integer = i * 65535 / 1023
             color.R = CUShort(gray)
             color.G = CUShort(gray)
             color.B = CUShort(gray)
             lut(i) = color
         Next i
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterColor16.G">
      <summary>Gets or sets the green component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <value>The green component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.RasterColor16.B" /></example>
    </member>
    <member name="P:Leadtools.RasterColor16.R">
      <summary>Gets or sets the red component of this <see cref="T:Leadtools.RasterColor" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <value>The red component of this <see cref="T:Leadtools.RasterColor" /> structure.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.RasterColor16.B" /></example>
    </member>
    <member name="P:Leadtools.RasterColor16.Reserved">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.ShearCommand">
      <summary>Moves the corners of an image in the fashion of a parallelogram. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Shearing</keywords>
      <remarks>
        <para>You specify an angle of slant, horizontal or vertical shear, and the fill color for the created space. 
            The following is a horizontal example:</para>
        <para>
          <img src="Shear.gif" />
        </para>
        <para>The angle is expressed in hundredths of degrees, with a limit of 4500 (45 degrees).</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example shears the image 15 degrees vertically, filling extra space with blue.</para>
        <code lang="VB">        Public Sub ShearCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ShearCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Shear the image 15 degrees vertically
         Dim command As ShearCommand = New ShearCommand()
         command.Angle = -15 * 100
         command.FillColor = New RasterColor(255, 255, 255)
         command.Horizontal = False
         command.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 32)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ShearCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "ShearCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Shear the image 15 degrees vertically
         ShearCommand command = new ShearCommand();
         command.Angle = -15 * 100;
         command.FillColor = new RasterColor(255, 255, 255);
         command.Horizontal = false;
         command.Run(image);

         // Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 32);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ShearCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Shear the image 15 degrees vertically
         ShearCommand command = new ShearCommand();
         command.Angle = -15 * 100;
         command.FillColor = new RasterColor(255, 255, 255);
         command.Horizontal = false;
         command.Run(image);

         // Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 32);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ShearCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Shear the image 15 degrees vertically
         Dim command As ShearCommand = New ShearCommand()
         command.Angle = -15 * 100
         command.FillColor = New RasterColor(255, 255, 255)
         command.Horizontal = False
         command.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 32)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ShearCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ShearCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This command does not support 32-bit grayscale images.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ShearCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ShearCommand.#ctor(System.Int32,System.Boolean,Leadtools.RasterColor)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ShearCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="angle">The angle of slant in hundredths of degrees.</param>
      <param name="horizontal">The direction of the slant.</param>
      <param name="fillColor">The fill color.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ShearCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ShearCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ShearCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.ShearCommand.Angle">
      <summary>Gets or sets the angle of slant. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The angle of slant.</value>
      <remarks>
            Positive values are for clockwise angles; negative values are for counterclockwise angles. The angle is expressed in hundredths of
            degrees, with a limit of 4500 (45 degrees).
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ShearCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ShearCommand.Horizontal">
      <summary>Gets or sets the direction of the slant. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true for horizontal shear, or false for vertical shear.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ShearCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ShearCommand.FillColor">
      <summary>Gets or sets the background fill color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The background fill color.</value>
      <remarks>Used to fill any new area created by the shear.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ShearCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterImageResizeEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.RasterImageResize.Resize" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageResizeEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterImageResizeEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Image">
      <summary>Gets a reference to the image being resized. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterImage" /> being resized.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Row">
      <summary>Gets the number of the resized row. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of the resized row. The first row is 0, and the last row is 1 less than the image <see cref="P:Leadtools.RasterImage.Height" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Column">
      <summary>Gets the column offset within the row being resized. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The column offset within the row being resized. The first column offset is 0, and the last column offset is 1 less than the image <see cref="P:Leadtools.RasterImage.Width" />.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Buffer">
      <summary>Gets the unmanaged buffer that holds the resized row. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The unmanaged buffer that holds the resized row.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImageResizeEventArgs.BufferArray" /> to get the buffer as a managed array.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.BufferArray">
      <summary>Gets the managed buffer that holds the resized row. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The managed buffer that holds the resized row.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImageResizeEventArgs.Buffer" /> to get the buffer as an managed pointer.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Bytes">
      <summary>Gets the number of bytes in the resized row buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of bytes in the resized row buffer.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageResizeEventArgs.Cancel">
      <summary>Gets or sets a value indicating whether to abort the resize operation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the resize operation, false to continue.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="T:Leadtools.RasterImageResize">
      <summary>Provides support for resizing images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            This class supports changing the color order, bits per pixel and/or palette, during the resize operation.
            </remarks>
      <example>
        <para>This sample loads an image and uses the RasterImageResize class to resize it to half its size.</para>
        <code lang="VB">        Public Sub RasterImageResizeExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImageResize.bmp")

         ' Load the source image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         Dim resize As RasterImageResize = New RasterImageResize()

         ' Add Handler
         AddHandler resize.Resize, AddressOf resize_Resize

         ' We will resize to half the original size
         Dim destWidth As Integer = srcImage.Width \ 2
         Dim destHeight As Integer = srcImage.Height \ 2

         ' Start the resize process
         resize.Start(srcImage, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.DitheringMethod, RasterSizeFlags.None, srcImage.GetPalette())

         ' Create the destination image

         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

            Dim buffer As Byte() = New Byte(destImage.BytesPerLine - 1) {}

         ' get the rows for the resized image, one by one
         Dim row As Integer = 0
         Do While row &lt; destImage.Height
                resize.ResizeBuffer(row, 0, buffer, 0, destImage.BytesPerLine)
            destImage.SetRow(row, buffer, 0, destImage.BytesPerLine)
            row += 1
         Loop

         resize.Stop()

         ' save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

      Private Sub resize_Resize(ByVal sender As Object, ByVal e As RasterImageResizeEventArgs)
         ' e.Row should ALWAYS be less than e.Image.Height
         If e.Row &gt;= e.Image.Height Then
            e.Cancel = True ' abort the resize
            Return
         End If

         Dim buffer As Byte() = New Byte(e.Bytes - 1) {}
         e.Image.Access()
         e.Image.GetRowColumn(e.Row, e.Column, buffer, 0, e.Bytes)
         e.Image.Release()
         Marshal.Copy(buffer, 0, e.Buffer, e.Bytes)
         Console.WriteLine("{0}, {1}", e.Row, e.Column)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageResizeExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImageResize.bmp");

         // Load the source image
         RasterImage srcImage = codecs.Load(srcFileName);

         RasterImageResize resize = new RasterImageResize();

         // Add Handler
         resize.Resize += new EventHandler&lt;RasterImageResizeEventArgs&gt;(resize_Resize);

         // We will resize to half the original size
         int destWidth = srcImage.Width / 2;
         int destHeight = srcImage.Height / 2;

         // Start the resize process
         resize.Start(
            srcImage,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.DitheringMethod,
            RasterSizeFlags.None,
            srcImage.GetPalette());

         // Create the destination image

         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         byte[] buffer = new byte[destImage.BytesPerLine];

         // get the rows for the resized image, one by one
         for(int row = 0; row &lt; destImage.Height; row++)
         {
            resize.ResizeBuffer(row, 0, buffer, 0, destImage.BytesPerLine);
            destImage.SetRow(row, buffer, 0, destImage.BytesPerLine);
         }

         resize.Stop();

         // save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // clean up
         srcImage.Dispose();
         destImage.Dispose();
      }

      private void resize_Resize(object sender, RasterImageResizeEventArgs e)
      {
         // e.Row should ALWAYS be less than e.Image.Height
         if(e.Row &gt;= e.Image.Height)
         {
            e.Cancel = true; // abort the resize
            return;
         }

         byte[] buffer = new byte[e.Bytes];
         e.Image.Access();
         e.Image.GetRowColumn(e.Row, e.Column, buffer, 0, e.Bytes);
         e.Image.Release();
         Marshal.Copy(buffer, 0, e.Buffer, e.Bytes);
         Console.WriteLine("{0}, {1}", e.Row, e.Column);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterImageResizeExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         RasterImageResize resize = new RasterImageResize();

         // Add Handler
         resize.Resize += new EventHandler&lt;RasterImageResizeEventArgs&gt;(resize_Resize);

         // We will resize to half the original size
         int destWidth = srcImage.Width / 2;
         int destHeight = srcImage.Height / 2;

         // Start the resize process
         resize.Start(
            srcImage,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.DitheringMethod,
            RasterSizeFlags.None,
            srcImage.GetPalette());

         // Create the destination image

         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         byte[] buffer = new byte[destImage.BytesPerLine];

         // get the rows for the resized image, one by one
         for (int row = 0; row &lt; destImage.Height; row++)
         {
            resize.ResizeBuffer(row, 0, buffer, 0, destImage.BytesPerLine);
            destImage.SetRow(row, buffer, 0, destImage.BytesPerLine);
         }

         resize.Stop();

         // save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24);

         // clean up
         srcImage.Dispose();
         destImage.Dispose();
      }

      private void resize_Resize(object sender, RasterImageResizeEventArgs e)
      {
         // e.Row should ALWAYS be less than e.Image.Height
         if (e.Row &gt;= e.Image.Height)
         {
            e.Cancel = true; // abort the resize
            return;
         }

         byte[] buffer = new byte[e.Bytes];
         e.Image.Access();
         e.Image.GetRowColumn(e.Row, e.Column, buffer, 0, e.Bytes);
         e.Image.Release();
         Buffer.BlockCopy(buffer, 0, e.BufferArray, 0, e.Bytes);
         Console.WriteLine("{0}, {1}", e.Row, e.Column);
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterImageResizeExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         Dim resize As RasterImageResize = New RasterImageResize()

         ' Add Handler
         AddHandler resize.Resize, AddressOf resize_Resize

         ' We will resize to half the original size
         Dim destWidth As Integer = srcImage.Width / 2
         Dim destHeight As Integer = srcImage.Height / 2

         ' Start the resize process
         resize.Start(srcImage, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.DitheringMethod, RasterSizeFlags.None, srcImage.GetPalette())

         ' Create the destination image

         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         Dim buffer As Byte() = New Byte(destImage.BytesPerLine - 1){}

         ' get the rows for the resized image, one by one
         Dim row As Integer = 0
         Do While row &lt; destImage.Height
            resize.ResizeBuffer(row, 0, buffer, 0, destImage.BytesPerLine)
            destImage.SetRow(row, buffer, 0, destImage.BytesPerLine)
            row += 1
         Loop

         resize.Stop()

         ' save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24)

         ' clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

      Private Sub resize_Resize(ByVal sender As Object, ByVal e As RasterImageResizeEventArgs)
         ' e.Row should ALWAYS be less than e.Image.Height
         If e.Row &gt;= e.Image.Height Then
            e.Cancel = True ' abort the resize
            Return
         End If

         Dim buffer As Byte() = New Byte(e.Bytes - 1){}
         e.Image.Access()
         e.Image.GetRowColumn(e.Row, e.Column, buffer, 0, e.Bytes)
         e.Image.Release()
         System.Buffer.BlockCopy(buffer, 0, e.BufferArray, 0, e.Bytes)
         Console.WriteLine("{0}, {1}", e.Row, e.Column)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImageResize.#ctor">
      <summary>Constructs a new instance of the <see cref="T:Leadtools.RasterImageResize" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageResize.Start(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterDitheringMethod,Leadtools.RasterSizeFlags,Leadtools.RasterColor[])">
      <summary>Sets up information for the <see cref="M:Leadtools.RasterImageResize.ResizeBuffer(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">Image to be resized.</param>
      <param name="width">New width of the image data.</param>
      <param name="height">New height of the image data.</param>
      <param name="bitsPerPixel">Output bits per pixel. Use 0 for 8-bit grayscale. Possible values are: 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24,
            32, 48 and 64.</param>
      <param name="order">Output color order.</param>
      <param name="ditheringMethod">Flags that indicate the type of dithering, if <paramref name="bitsPerPixel" /> is not the same as the source
            image.</param>
      <param name="sizeFlags">Flags that indicate the type of resizing.</param>
      <param name="palette">The palette to dither to if <paramref name="bitsPerPixel" /> is less than or equal to 8. Pass a null reference
            (Nothing in Visual Basic) to dither to the fixed palette or if no palette is required.</param>
      <remarks>
        <para>
          <paramref name="ditheringMethod" /> is used when dithering is needed to produce the output bits per pixel. The 
            interpolation usually requires that the input data be converted to 24-bit or 48-bit and then back to the 
            desired bits per pixel. So some dithering might be required if the output bits/pixel are less than or equal to 8.</para>
        <para>The <see cref="M:Leadtools.RasterImageResize.Start(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterDitheringMethod,Leadtools.RasterSizeFlags,Leadtools.RasterColor[])" /> method starts the resizing process. This will be followed by calls to 
            <see cref="M:Leadtools.RasterImageResize.ResizeBuffer(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)" /> to retrieve the resized data and by a call to 
            <see cref="M:Leadtools.RasterImageResize.Stop" />, to end the resize process and clean up any allocated resources.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageResize.ResizeBuffer(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves resized data, one line at a time. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image <see cref="P:Leadtools.RasterImage.Height" />.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column offset is 1 less than the image <see cref="P:Leadtools.RasterImage.Width" />.</param>
      <param name="buffer">The buffer to hold the image data that this method gets.</param>
      <param name="bufferOffset">The zero-based index into <paramref name="buffer" /> where retrieving should start.</param>
      <param name="bytes">
        <para>The number of bytes to retrieve. Consider the <see cref="P:Leadtools.RasterImage.BitsPerPixel" />, and avoid specifying
            a number that goes  past the end of the row.
            <list type="bullet"><item><description>For a 1-bit image, each byte represents 8 pixels.</description></item><item><description>For a 4-bit image, each byte represents 2 pixels.</description></item><item><description>For an 8-bit image, each byte represents 1 pixel.</description></item><item><description>For a 16-bit image, every 2 bytes represents one pixel.</description></item><item><description>For a 24-bit image, every three bytes represents one pixel.</description></item><item><description>For a 32-bit image, every four bytes represents one pixel.</description></item><item><description>For a 48-bit image, every six bytes represents one pixel.</description></item><item><description>For a 64-bit image, every eight bytes represents one pixel.</description></item></list></para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate 
            the number of bytes needed for a particular number of pixels. For example:</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if ((Image.BitsPerPixel * NumberOfPixels) % 8)
             ++NumberOfBytes; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <remarks>
        <para>By using this low-level method to get any part of a row, you can write a procedure that accesses a single 
            pixel or a rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length (<paramref name="bytes" />) in bytes. 
            Therefore, you must consider the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> of the image when 
            specifying these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>BitsPerPixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0,8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
            <tr>
              <td>48</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 6 (such as 6, 12, or 18), because there are 6 bytes per pixel.</td>
            </tr>
            <tr>
              <td>64</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 8 (such as 8, 16, or 24), because there are 8 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>
            Do not pass a value in <paramref name="bytes" /> that goes past the end of the row.
            The process is faster when rows are retrieved sequentially, either top-down or bottom-up.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageResize.ResizeBuffer(System.Int32,System.Int32,System.IntPtr,System.Int64)">
      <summary>Retrieves resized data in an unmanaged buffer, one line at a time. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image <see cref="P:Leadtools.RasterImage.Height" />.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column offset is 1 less than the image <see cref="P:Leadtools.RasterImage.Width" />.</param>
      <param name="buffer">The unmanaged buffer to hold the image data that this method gets.</param>
      <param name="bytes">
        <para>The number of bytes to retrieve. Consider the <see cref="P:Leadtools.RasterImage.BitsPerPixel" />, and avoid specifying
            a number that goes  past the end of the row.
            <list type="bullet"><item><description>For a 1-bit image, each byte represents 8 pixels.</description></item><item><description>For a 4-bit image, each byte represents 2 pixels.</description></item><item><description>For an 8-bit image, each byte represents 1 pixel.</description></item><item><description>For a 16-bit image, every 2 bytes represents one pixel.</description></item><item><description>For a 24-bit image, every three bytes represents one pixel.</description></item><item><description>For a 32-bit image, every four bytes represents one pixel.</description></item><item><description>For a 48-bit image, every six bytes represents one pixel.</description></item><item><description>For a 64-bit image, every eight bytes represents one pixel.</description></item></list></para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate 
            the number of bytes needed for a particular number of pixels. For example:</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if ((Image.BitsPerPixel * NumberOfPixels) % 8)
             ++NumberOfBytes; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <remarks>
        <para>By using this low-level method to get any part of a row, you can write a procedure that accesses a single 
            pixel or a rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length (<paramref name="bytes" />) in bytes. 
            Therefore, you must consider the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> of the image when 
            specifying these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>BitsPerPixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0,8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
            <tr>
              <td>48</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 6 (such as 6, 12, or 18), because there are 6 bytes per pixel.</td>
            </tr>
            <tr>
              <td>64</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 8 (such as 8, 16, or 24), because there are 8 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>
            Do not pass a value in <paramref name="bytes" /> that goes past the end of the row.
            The process is faster when rows are retrieved sequentially, either top-down or bottom-up.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterImageResize.Stop">
      <summary>Cleans up all data variables and buffers allocated by <see cref="M:Leadtools.RasterImageResize.Start(Leadtools.RasterImage,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterDitheringMethod,Leadtools.RasterSizeFlags,Leadtools.RasterColor[])" /> and resets all internal variables to their default settings. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="E:Leadtools.RasterImageResize.Resize">
      <summary>Occurs during image resize. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.RasterImageResizeEventArgs" /> containing data related to this event.
            </event>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.RasterImageResize" />.</example>
    </member>
    <member name="T:Leadtools.RasterImageChangedEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.RasterImage.Changed" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Whenever the properties or data of a <see cref="T:Leadtools.RasterImage" /> is changed programatically, the <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see>
            event will fire with an instance of the <see cref="T:Leadtools.RasterImageChangedEventArgs" /> class.  This instance contains the <see cref="P:Leadtools.RasterImageChangedEventArgs.Flags" />
            property that holds information on what has changed in the image.
            </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see>.</example>
    </member>
    <member name="M:Leadtools.RasterImageChangedEventArgs.#ctor(Leadtools.RasterImageChangedFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterImageChangedEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="flags">Flags which indicate the type of change.</param>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageChangedEventArgs.Flags">
      <summary>Gets the flags for the <see cref="E:Leadtools.RasterImage.Changed" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>One or two members of the <see cref="T:Leadtools.RasterImageChangedFlags" /> enumeration that indicates what has changed in the image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed">RasterImage.Changed</see>.</example>
    </member>
    <member name="T:Leadtools.RasterImagePagesChangedAction">
      <summary>Indicates whether pages are added, removed or inserted from a <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" /></remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="F:Leadtools.RasterImagePagesChangedAction.Added">
      <summary>
            The pages being added.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImagePagesChangedAction.Removed">
      <summary>
            The pages are removed.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImagePagesChangedAction.Inserted">
      <summary>
            The pages being inserted.
            </summary>
    </member>
    <member name="T:Leadtools.RasterImagePagesChangedEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.RasterImage.PagesChanged" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>When images are added/inserted or removed from a <see cref="T:Leadtools.RasterImage" /> object, the <see cref="E:Leadtools.RasterImage.PagesChanged">RasterImage.PagesChanged</see>
            event will fire with an instance of the <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" /> class. This instance contains information on what pages has been changed.
            The following table will list the methods that would invoke the <see cref="E:Leadtools.RasterImage.PagesChanged">RasterImage.PagesChanged</see> event and what values are
            expected.
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Method</term>
              <description>Values Expected</description>
            </listheader>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">RasterImage.AddPage</see>
              </term>
              <description>
                <para>For the source image (the <strong>image</strong> parameter):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the current page (<see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see>) and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is 1.
            </para>
                <para>
            For the destination image (The this or Me in Visual basic image):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Added</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> since the pages are added at the end and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is 1.
            </para>
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)">RasterImage.AddPages</see>
              </term>
              <description>
                <para>For the source image (the <strong>image</strong> parameter):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>startIndex</strong> parameter and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the value of the <strong>count</strong> parameter.
            </para>
                <para>
            For the destination image (The this or Me in Visual basic image):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Added</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> since the pages are added at the end and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the value of the <strong>count</strong> parameter.
            </para>
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)">RasterImage.RemovePageAt</see>
              </term>
              <description>
                <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>pageIndex</strong> and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is 1.
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)">RasterImage.RemovePages</see>
              </term>
              <description>
                <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>startIndex</strong> parameter and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the value of the <strong>count</strong> parameter.
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.RemoveAllPages">RasterImage.RemoveAllPages</see>
              </term>
              <description>
                <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is 1 and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see>.
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)">RasterImage.InsertPage</see> and <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)">RasterImage.ReplacePages</see></term>
              <description>
                <para>For the source image (the <strong>image</strong> parameter):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the current page (<see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see>) and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is 1.
            </para>
                <para>
            For the destination image (The this or Me in Visual basic image):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Added</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>index</strong> parameter and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is 1.
            </para>
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)">RasterImage.InsertPages</see> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)">RasterImage.ReplacePages</see></term>
              <description>
                <para>For the source image (the <strong>image</strong> parameter):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>startIndex</strong> parameter and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the value of the <strong>count</strong> parameter.
            </para>
                <para>
            For the destination image (The this or Me in Visual basic image):
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Added</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is the value of the <strong>index</strong> parameter and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the value of the <strong>count</strong> parameter.
            </para>
              </description>
            </item>
            <item>
              <term>
                <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see>
              </term>
              <description>
                <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Action" /> is
            <see cref="T:Leadtools.RasterImagePagesChangedAction">RasterImagePagesChangedAction.Removed</see>,
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex" /> is 1 and
            <see cref="P:Leadtools.RasterImagePagesChangedEventArgs.Count" /> is the number of pages in the current <see cref="T:Leadtools.RasterImage" />.
              </description>
            </item>
          </list>
        </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PagesChangedExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim srcFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")

         ' Load the multi-page image
         Dim srcImage As RasterImage = codecs.Load(srcFileName1)
         AddHandler srcImage.PagesChanged, AddressOf Image_PagesChanged

         ' Show the number of pages in this file
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Show and change the active page
         Console.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 3
         Console.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 1

         ' Load a single page image and add it to the end
         Dim pageImage As RasterImage = codecs.Load(srcFileName2)
         AddHandler pageImage.PagesChanged, AddressOf Image_PagesChanged
         Console.WriteLine("Adding a single page")
         srcImage.AddPage(pageImage)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Load a multi page image and add a few pages to this image
         pageImage = codecs.Load(srcFileName1)
         AddHandler pageImage.PagesChanged, AddressOf Image_PagesChanged
         Console.WriteLine("Adding multi-pages")
         srcImage.AddPages(pageImage, 1, 2)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert a page in the middle
         Console.WriteLine("Inserting a page")
         srcImage.InsertPage(4, pageImage)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert the rest of the pages at the beginning
         Console.WriteLine("Inserting pages")
         srcImage.InsertPages(0, pageImage, 1, -1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the first page
         Console.WriteLine("Removing a page")
         srcImage.RemovePageAt(1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the last 3 pages
         Console.WriteLine("Removing pages")
         srcImage.RemovePages(srcImage.PageCount - 3, -1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove all the pages (leaves 1)
         Console.WriteLine("Removing all pages")
         srcImage.RemoveAllPages()
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         srcImage.Dispose()
         codecs.Dispose()
      End Sub

      Private Sub Image_PagesChanged(ByVal sender As Object, ByVal e As RasterImagePagesChangedEventArgs)
         Console.WriteLine("Added = {0}, Index = {1}, Count = {2}", e.Action, e.StartIndex, e.Count)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PagesChangedExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         string srcFileName2 = Path.Combine(LEAD_VARS.ImagesDir,"image1.cmp");

         // Load the multi-page image
         RasterImage srcImage = codecs.Load(srcFileName1);
         srcImage.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);

         // Show the number of pages in this file
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Show and change the active page
         Console.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 3;
         Console.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 1;

         // Load a single page image and add it to the end
         RasterImage pageImage = codecs.Load(srcFileName2);
         pageImage.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);
         Console.WriteLine("Adding a single page");
         srcImage.AddPage(pageImage);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Load a multi page image and add a few pages to this image
         pageImage = codecs.Load(srcFileName1);
         pageImage.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);
         Console.WriteLine("Adding multi-pages");
         srcImage.AddPages(pageImage, 1, 2);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert a page in the middle
         Console.WriteLine("Inserting a page");
         srcImage.InsertPage(4, pageImage);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert the rest of the pages at the beginning
         Console.WriteLine("Inserting pages");
         srcImage.InsertPages(0, pageImage, 1, -1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the first page
         Console.WriteLine("Removing a page");
         srcImage.RemovePageAt(1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the last 3 pages
         Console.WriteLine("Removing pages");
         srcImage.RemovePages(srcImage.PageCount - 3, -1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove all the pages (leaves 1)
         Console.WriteLine("Removing all pages");
         srcImage.RemoveAllPages();
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         srcImage.Dispose();
         codecs.Dispose();
      }

      void Image_PagesChanged(object sender, RasterImagePagesChangedEventArgs e)
      {
         Console.WriteLine("Added = {0}, Index = {1}, Count = {2}", e.Action, e.StartIndex, e.Count);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void PagesChangedExample(RasterImage srcImage, RasterImage pageImage1, RasterImage pageImage2)
      {
         // srcImage is the multi-page image
         srcImage.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);
         // Show the number of pages in this file
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Show and change the active page
         Debug.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 3;
         Debug.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 1;

         // pageImage1 is a single page image, add it to the end
         pageImage1.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);
         Debug.WriteLine("Adding a single page");
         srcImage.AddPage(pageImage1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Load a multi page image and add a few pages to this image
         pageImage2.PagesChanged += new EventHandler&lt;RasterImagePagesChangedEventArgs&gt;(Image_PagesChanged);
         Debug.WriteLine("Adding multi-pages");
         srcImage.AddPages(pageImage2, 1, 2);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert a page in the middle
         Debug.WriteLine("Inserting a page");
         srcImage.InsertPage(4, pageImage2);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert the rest of the pages at the beginning
         Debug.WriteLine("Inserting pages");
         srcImage.InsertPages(0, pageImage2, 1, -1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the first page
         Debug.WriteLine("Removing a page");
         srcImage.RemovePageAt(1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the last 3 pages
         Debug.WriteLine("Removing pages");
         srcImage.RemovePages(srcImage.PageCount - 3, -1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove all the pages (leaves 1)
         Debug.WriteLine("Removing all pages");
         srcImage.RemoveAllPages();
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         srcImage.Dispose();
         pageImage1.Dispose();
         pageImage2.Dispose();
      }

      void Image_PagesChanged(object sender, RasterImagePagesChangedEventArgs e)
      {
         Debug.WriteLine("Added = {0}, Index = {1}, Count = {2}", e.Action, e.StartIndex, e.Count);
      }</code>
        <code lang="SilverlightVB">      Public Sub PagesChangedExample(ByVal srcImage As RasterImage, ByVal pageImage1 As RasterImage, ByVal pageImage2 As RasterImage)
         ' srcImage is the multi-page image
         AddHandler srcImage.PagesChanged, AddressOf Image_PagesChanged
         ' Show the number of pages in this file
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Show and change the active page
         Debug.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 3
         Debug.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 1

         ' pageImage1 is a single page image, add it to the end
         AddHandler pageImage1.PagesChanged, AddressOf Image_PagesChanged
         Debug.WriteLine("Adding a single page")
         srcImage.AddPage(pageImage1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Load a multi page image and add a few pages to this image
         AddHandler pageImage2.PagesChanged, AddressOf Image_PagesChanged
         Debug.WriteLine("Adding multi-pages")
         srcImage.AddPages(pageImage2, 1, 2)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert a page in the middle
         Debug.WriteLine("Inserting a page")
         srcImage.InsertPage(4, pageImage2)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert the rest of the pages at the beginning
         Debug.WriteLine("Inserting pages")
         srcImage.InsertPages(0, pageImage2, 1, -1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the first page
         Debug.WriteLine("Removing a page")
         srcImage.RemovePageAt(1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the last 3 pages
         Debug.WriteLine("Removing pages")
         srcImage.RemovePages(srcImage.PageCount - 3, -1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove all the pages (leaves 1)
         Debug.WriteLine("Removing all pages")
         srcImage.RemoveAllPages()
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         srcImage.Dispose()
         pageImage1.Dispose()
         pageImage2.Dispose()
      End Sub

      Private Sub Image_PagesChanged(ByVal sender As Object, ByVal e As RasterImagePagesChangedEventArgs)
         Debug.WriteLine("Added = {0}, Index = {1}, Count = {2}", e.Action, e.StartIndex, e.Count)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImagePagesChangedEventArgs.#ctor(Leadtools.RasterImagePagesChangedAction,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="action">Indicates whether pages are added, removed or inserted.</param>
      <param name="startIndex">The index of the first page being added, removed or inserted.</param>
      <param name="count">The number of pages being added, removed or inserted.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="P:Leadtools.RasterImagePagesChangedEventArgs.Action">
      <summary>Indicates whether pages are added, removed or inserted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImagePagesChangedAction" /> enumeration that specifies whether pages are added, removed or inserted.</value>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="P:Leadtools.RasterImagePagesChangedEventArgs.StartIndex">
      <summary>The index of the index of the first page being added, removed inserted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A integer value that specifies the index of the first page being added, removed or inserted.</value>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="P:Leadtools.RasterImagePagesChangedEventArgs.Count">
      <summary>The number of pages being added, removed inserted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A integer value that specifies the number of pages added, removed or inserted.</value>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RotateCommandFlags">
      <summary>Flags for the <see cref="P:Leadtools.ImageProcessing.RotateCommand.Flags">RotateCommand.Flags</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> and <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags..Bicubic</see> can be combined
            with <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see>, but they can not be combined with each other. Therefore, you can pass
            <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> Or <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see>,
            but not <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> | <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags..Bicubic</see>.</para>
        <para>If <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see> is set, then the image is resized. Otherwise, the image is cropped.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.RotateCommandFlags.None">
      <summary>
            Default, do not resize the image, crop it.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RotateCommandFlags.Resize">
      <summary>
            Size resulting image as needed.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RotateCommandFlags.Resample">
      <summary>
             Perform bilinear interpolation when rotating.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RotateCommandFlags.Bicubic">
      <summary>
            Perform bicubic interpolation when rotating.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.RotateCommand">
      <summary>Rotates an image by the number of degrees specified. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Rotating</keywords>
      <remarks>
        <para>This command has the following features:</para>
        <list type="bullet">
          <item>
            <description>It uses the center of the image as the center of
                        rotation.</description>
          </item>
          <item>
            <description>It can rotate the image clockwise or counterclockwise up to
                        360 degrees in 100th-degree increments.</description>
          </item>
          <item>
            <description>It can resize the image to accommodate the rotated height and
                        width, or it can retain the original height and width, cropping the image
                        as necessary.</description>
          </item>
          <item>
            <description>
                            It uses <see cref="P:Leadtools.ImageProcessing.RotateCommand.FillColor" /> as the background
                            color to fill any new area created by the rotation.
                        </description>
          </item>
        </list>
        <para>
          <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> and
                    <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Bicubic</see> can be combined
                    with <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see>, but they
                    can not be combined with each other.
                </para>
        <para>
                    If <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see> is set, then
                    the image is resized. Otherwise, the image is cropped.
                </para>
        <para>
                    Interpolation can be done while rotating certain images. This produces superior
                    output, eliminating the jaggedness occurring when rotating images at angles
                    that are not multiples of 90. (ie when
                    <see cref="P:Leadtools.ImageProcessing.RotateCommand.Angle">RotateCommand.Angle</see> is not a multiple of
                    9000).
                </para>
        <para>The only images that are interpolated are:</para>
        <list type="bullet">
          <item>
            <description>
                            8-bit grayscale images (for best results, all gray values should be in
                            the image palette). If the rotation doesn not give the expected
                            results, you can use <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" /> with
                            <see cref="P:Leadtools.ImageProcessing.GrayscaleCommand.BitsPerPixel">GrayscaleCommand.BitsPerPixel</see>
                            = 8 to change the image into a proper grayscale image.
                        </description>
          </item>
          <item>
            <description>
                            12-bit and 16-bit grayscale images that do not have a palette.
                            Grayscale image can have a palette if they have been loaded from
                            certain DICOM images or if the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" />
                            has been used. Use <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" /> with
                            <see cref="P:Leadtools.ImageProcessing.GrayscaleCommand.BitsPerPixel">GrayscaleCommand.BitsPerPixel</see>
                            = 12 or <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" /> with
                            <see cref="P:Leadtools.ImageProcessing.GrayscaleCommand.BitsPerPixel">GrayscaleCommand.BitsPerPixel</see>
                            = 16 if <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> does not seem to do any
                            interpolation during the rotation.
                        </description>
          </item>
          <item>
            <description>16-bit color images</description>
          </item>
          <item>
            <description>24-bit, 32-bit, 48-bit and 64-bit color images</description>
          </item>
        </list>
        <para>
                    For all other images, <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> ignores the resampling
                    flags and the rotate is performed without interpolation.
                </para>
        <para>
                    For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Processing an
                    Image</see>.
                </para>
      </remarks>
      <example>
        <para>This example will load an image, rotate it by 45 degrees and then save it back to disk</para>
        <code lang="VB">        Public Sub RotateCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "RotateCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Rotate the image by 45 degrees
         Dim command As RotateCommand = New RotateCommand()
         command.Angle = 45 * 100
         command.FillColor = New RasterColor(255, 255, 255)
         command.Flags = RotateCommandFlags.Bicubic
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RotateCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "RotateCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Rotate the image by 45 degrees
         RotateCommand command = new RotateCommand();
         command.Angle = 45 * 100;
         command.FillColor = new RasterColor(255, 255, 255);
         command.Flags = RotateCommandFlags.Bicubic;
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RotateCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Rotate the image by 45 degrees
         RotateCommand command = new RotateCommand();
         command.Angle = 45 * 100;
         command.FillColor = new RasterColor(255, 255, 255);
         command.Flags = RotateCommandFlags.Bicubic;
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RotateCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Rotate the image by 45 degrees
         Dim command As RotateCommand = New RotateCommand()
         command.Angle = 45 * 100
         command.FillColor = New RasterColor(255, 255, 255)
         command.Flags = RotateCommandFlags.Bicubic
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RotateCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RotateCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RotateCommand.#ctor(System.Int32,Leadtools.ImageProcessing.RotateCommandFlags,Leadtools.RasterColor)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="angle">Hundredths of degrees to rotate (+/-). This can be a number from 1 to 36,000. 
            A positive value will rotate the image in a clockwise rotation, while a negative value will rotate 
            the image in a counter-clockwise rotation.</param>
      <param name="flags">Flag to keep the resulting image the same size as the original image or to resize 
            according to the rotation direction specified.</param>
      <param name="fillColor">The background fill color.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RotateCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RotateCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.RotateCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.RotateCommand.Angle">
      <summary>Gets or sets the rotation angle <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Hundredths of degrees to rotate (+/-). This can be a number from 1 to 36,000. 
            A positive value will rotate the image in a clockwise rotation, while a negative value will rotate 
            the image in a counter-clockwise rotation.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RotateCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RotateCommand.Flags">
      <summary>Gets or sets the flag to keep the resulting image the same size as the original image or to resize 
            according to the rotation direction specified. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Flag to keep the resulting image the same size as the original image or to resize 
            according to the rotation direction specified.</value>
      <remarks>
        <para>
          <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> and <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags..Bicubic</see> can be combined
            with <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see>, but they can not be combined with each other. Therefore, you can pass
            <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> Or <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see>,
            but not <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resample</see> | <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags..Bicubic</see>.</para>
        <para>If <see cref="T:Leadtools.ImageProcessing.RotateCommandFlags">RotateCommandFlags.Resize</see> is set, then the image is resized. Otherwise, the image is cropped.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RotateCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RotateCommand.FillColor">
      <summary>Gets or sets the background fill color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The background fill color.</value>
      <remarks>Used to fill any new area created by the rotation.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RotateCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.FillCommand">
      <summary>Fills the specified image with the specified color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Filling|Fills|Colors</keywords>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image then fill it with blue color</para>
        <code lang="VB">        Public Sub FillCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "FillCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Fill the image with blue color
         Dim command As FillCommand = New FillCommand()
         command.Color = New RasterColor(0, 0, 255)
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FillCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "FillCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Fill the image with blue color
         FillCommand command = new FillCommand();
         command.Color = new RasterColor(0, 0, 255);
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void FillCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Fill the image with blue color
         FillCommand command = new FillCommand();
         command.Color = new RasterColor(0, 0, 255);
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FillCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Fill the image with blue color
         Dim command As FillCommand = New FillCommand()
         command.Color = New RasterColor(0, 0, 255)
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.FillCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.FillCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.FillCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.FillCommand.#ctor(Leadtools.RasterColor)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.FillCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="color">The fill color.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.FillCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.FillCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.FillCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.FillCommand.Color">
      <summary>Gets or sets the fill color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The fill color.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.FillCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CopyDataCommand">
      <summary>Copies image data from one image to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Combining images|Copying</keywords>
      <remarks>
        <para>The destination image must accurately identify the copied data. Therefore, the following properties must specify the same values for 
            both the source and destination images:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
          </list>
        </para>
        <para>The <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" /> works by copying the image data from the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method to the image
            passed in the <see cref="P:Leadtools.ImageProcessing.CopyDataCommand.DestinationImage" /> property.</para>
      </remarks>
      <example>
        <para>This example will use the CopyDataCommand to copy the image data from a source image to an existing image</para>
        <code lang="VB">        Public Sub CopyDataCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CopyDataCommand.bmp")

         ' Load the source image from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Create the destination image with same dimension as the source image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         ' Copy the image data from the source image to the destination image
         Dim command As CopyDataCommand = New CopyDataCommand()
         command.DestinationImage = destImage
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CopyDataCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CopyDataCommand.bmp");

         // Load the source image from disk
         RasterImage srcImage = codecs.Load(srcFileName);

         // Create the destination image with same dimension as the source image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         // Copy the image data from the source image to the destination image
         CopyDataCommand command = new CopyDataCommand();
         command.DestinationImage = destImage;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CopyDataCommandExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create the destination image with same dimension as the source image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         // Copy the image data from the source image to the destination image
         CopyDataCommand command = new CopyDataCommand();
         command.DestinationImage = destImage;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CopyDataCommandExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create the destination image with same dimension as the source image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         ' Copy the image data from the source image to the destination image
         Dim command As CopyDataCommand = New CopyDataCommand()
         command.DestinationImage = destImage
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyDataCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" /> with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyDataCommand.#ctor(Leadtools.RasterImage)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" /> with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="destinationImage">The destination image for the copy.</param>
      <remarks>
        <paramref name="destinationImage" /> will hold the result of copying the image data from the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyDataCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyDataCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CopyDataCommand.DestinationImage">
      <summary>Gets or sets the destination image <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The destination <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The source image data (the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method) will be copied into this image.</para>
        <para>The destination image must accurately identify the copied data. Therefore, the following properties must specify the same values for 
            both the source and destination images:</para>
        <para>
          <list>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.BitsPerPixel">RasterImage.BitsPerPixel</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see>
              </description>
            </item>
            <item>
              <description>
                <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see>
              </description>
            </item>
          </list>
        </para>
        <para>The <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" /> works by copying the image data from the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method to the image
            passed in the <see cref="P:Leadtools.ImageProcessing.CopyDataCommand.DestinationImage" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterRleCompressor">
      <summary>Provides support for working with compressed image data buffers. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.CompressRow(System.UInt16[],System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE compression of 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.</param>
      <param name="buffer">The input buffer, which contains the 1-bit image data to be compressed.</param>
      <param name="bufferOffset">Zero-based index into <paramref name="buffer" />.</param>
      <param name="column">Column offset within the row to be processed. The method skips this many pixels before it begins processing.</param>
      <param name="width">The number of pixels to process.</param>
      <remarks>
        <para>Use this method to process all or part of a single line of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.CompressRow(System.UInt16[],System.IntPtr,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE compression of unmanaged 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.</param>
      <param name="buffer">The unmanaged input buffer, which contains the 1-bit image data to be compressed.</param>
      <param name="column">Column offset within the row to be processed. The method skips this many pixels before it begins processing.</param>
      <param name="width">The number of pixels to process.</param>
      <remarks>
        <para>Use this method to process all or part of a single line of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.CompressRows(System.UInt16[],System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE compression of 1-bit image data <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.</param>
      <param name="buffer">The input buffer, which contains the 1-bit image data to be compressed.</param>
      <param name="bufferOffset">Zero-based index into <paramref name="buffer" />.</param>
      <param name="width">The number of pixels to process.</param>
      <param name="rows">The number of rows to process.</param>
      <remarks>
        <para>Use this method to process multiple lines of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.CompressRows(System.UInt16[],System.IntPtr,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE compression of unmanaged 1-bit image data <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.</param>
      <param name="buffer">The unmanaged input buffer, which contains the 1-bit image data to be compressed.</param>
      <param name="width">The number of pixels to process.</param>
      <param name="rows">The number of rows to process.</param>
      <remarks>
            .<para>Use this method to process multiple lines of image data. This method is available in the
             <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para><para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
             For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.ExpandRow(System.UInt16[],System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE decompression of 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The input buffer containing 1-bit compressed image data.</param>
      <param name="buffer">The output buffer, which is to be filled with 1-bit image data.</param>
      <param name="bufferOffset">Zero-based index into <paramref name="buffer" />.</param>
      <param name="column">Column offset within the row to be processed. The method skips this many pixels before it begins processing.</param>
      <param name="width">The number of pixels to process.</param>
      <remarks>
        <para>Use this method to process all or part of a single line of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.ExpandRow(System.UInt16[],System.IntPtr,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE decompression of unmanaged 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The input buffer containing 1-bit compressed image data.</param>
      <param name="buffer">The unmanaged output buffer, which is to be filled with 1-bit image data.</param>
      <param name="column">Column offset within the row to be processed. The method skips this many pixels before it begins processing.</param>
      <param name="width">The number of pixels to process.</param>
      <remarks>
        <para>Use this method to process all or part of a single line of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.ExpandRows(System.UInt16[],System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE decompression of 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The input buffer containing 1-bit compressed image data.</param>
      <param name="buffer">The output buffer, which is to be filled with 1-bit image data.</param>
      <param name="bufferOffset">Zero-based index into <paramref name="buffer" />.</param>
      <param name="width">The number of pixels in each row.</param>
      <param name="rows">The number of rows to process.</param>
      <remarks>
        <para>Use this method to process multiple lines of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterRleCompressor.ExpandRows(System.UInt16[],System.IntPtr,System.Int32,System.Int32)">
      <summary>Performs buffer-to-buffer RLE decompression of unmanaged 1-bit image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="runBuffer">The input buffer containing 1-bit compressed image data.</param>
      <param name="buffer">The unmanaged output buffer, which is to be filled with 1-bit image data.</param>
      <param name="width">The number of pixels in each row.</param>
      <param name="rows">The number of rows to process.</param>
      <remarks>
        <para>Use this method to process multiple lines of image data. This method is available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Toolkits</see>.</para>
        <para>This function is useful for working with 1-bit images that are loaded in their compressed formats for faster loading and display.
            For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="T:Leadtools.RasterMetadataRational">
      <summary>Encapsulates a rational value, for use with classes derived from <see cref="T:Leadtools.RasterMetadata" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterMetadataRational.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMetadataRational" /> class with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="numerator">The value for the numerator.</param>
      <param name="denominator">The value for the denominator.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataRational.Empty">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMetadataRational" /> class with zero values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of the <see cref="T:Leadtools.RasterMetadataRational" /> class with zero values.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataRational.Numerator">
      <summary>Gets and sets the numerator value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The numerator value.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataRational.Denominator">
      <summary>Gets and sets the denominator value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The denominator value.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="T:Leadtools.RasterMetadataURational">
      <summary>Encapsulates an unsinged rational value, for use with classes derived from <see cref="T:Leadtools.RasterMetadata" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterMetadataURational.#ctor(System.UInt32,System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMetadataURational" /> class with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="numerator">The value for the numerator.</param>
      <param name="denominator">The value for the denominator.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataURational.Empty">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMetadataURational" /> class with zero values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A new instance of the <see cref="T:Leadtools.RasterMetadataURational" /> class with zero values.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataURational.Numerator">
      <summary>Gets and sets the numerator value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The numerator value.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterMetadataURational.Denominator">
      <summary>Gets and sets the denominator value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The denominator value.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="T:Leadtools.RasterCommentMetadataDataType">
      <summary>Indicates the data type for a metadata comment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to <see cref="T:L.Topics.IPTCComments">IPTC Comments</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.JPEGAndLEADFileComments">JPEG and LEAD File Comments</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCommentMetadataDataType.Ascii">
      <summary>
            ASCII character string
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataDataType.URational">
      <summary>
            Unsigned rational
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataDataType.Rational">
      <summary>
            Rational
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataDataType.Byte">
      <summary>
            Byte
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataDataType.Int16">
      <summary>
            16-bit integer
            </summary>
    </member>
    <member name="T:Leadtools.RasterCommentMetadataType">
      <summary>List of available metadata comments. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Exif file comments|Exif files|TIFF files|JPEG files|GPS|DICOM</keywords>
      <remarks>
        <para>When reading or updating Exif comments, you must specify the comment type. Comment fields are constrained by their Exif data type.</para>
        <para>
            All Exif files (TIFF and JPG) can contain the designated TIFF comments. Each TIFF comment field can contain a character string. The maximum field size is 32K, except for the date-time field, which is always 20.</para>
        <para>
          <strong>NOTE:</strong> Please refer to the EXIF specification for all possible values for EXIF comments.</para>
        <para>For more information, refer to <see cref="T:L.Topics.GIFFileComments">GIF File Comments</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.PNGFileComments">PNG File Comments</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.TIFFFileComments">TIFF File Comments</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Artist">
      <summary>
            Person who created the image. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Copyright">
      <summary>
            Copyright notice. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.DateTime">
      <summary>
            Date and time (YYYY:MM:DD HH:MM:SS). The field length is 20, counting the NULL terminator. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Description">
      <summary>
            Description of the image. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.HostComputer">
      <summary>
            Computer and operating system in use. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Make">
      <summary>
            Manufacturer of the equipment used to create the image. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Model">
      <summary>
            Model name and number of the equipment. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.NameOfDocument">
      <summary>
            Name of the document from which the image was scanned. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.NameOfPage">
      <summary>
            Page name from which the image was scanned. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Software">
      <summary>
            Name and version of the software package used to create the image. (TIFF Comment)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.PatientName">
      <summary>
            Patient name (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.PatientId">
      <summary>
            Patient ID (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.PatientBirthdate">
      <summary>
            Patient birth date (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.PatientSex">
      <summary>
            Patient sex (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.StudyInstance">
      <summary>
            Study instance ID (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.StudyDate">
      <summary>
            Study date (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.StudyTime">
      <summary>
            Study time (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.StudyReferringPhysician">
      <summary>
            Referring physician (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SeriesModality">
      <summary>
            Series modality (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SeriesId">
      <summary>
            Series ID (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SeriesNumber">
      <summary>
            Series number (DICOM)
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExifVersion">
      <summary>
            Exif version. LEADTOOLS always writes this value as 0110, meaning version 1.1. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 4.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.DateTimeOriginal">
      <summary>
            Date and time the original image is captured. The format is YYYY:MM:DD HH:MM:SS. The time is in a 24-hour format, and a blank space is left between the date and the time. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 20.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.DateTimeDigitized">
      <summary>
            Date and time the file is generated. If the file is generated directly, as with a digital camera, this is the same as the time the original image is captured. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 20.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ShutterSpeedValue">
      <summary>
            Shutter speed. The unit of measure is APEX. Data type: RasterCommentMetadataDataType.Rational. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Aperture">
      <summary>
            Aperture value. This is the ratio of lens aperture for the focal length. The unit of measure is APEX. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Brightness">
      <summary>
            Brightness value. Data type: RasterCommentMetadataDataType.Rational. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExposureBias">
      <summary>
            Exposure bias. This is the value for correcting a biased exposure. The unit of measure is APEX. Data type: RasterCommentMetadataDataType.Rational. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.MaxAperture">
      <summary>
            Minimum lens f-number. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubjectDistance">
      <summary>
            Distance from lens to subject (in meters). Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.MeteringMode">
      <summary>
        <para>Photometry mode. Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Unidentified</description>
            </item>
            <item>
              <term>1</term>
              <description>Average</description>
            </item>
            <item>
              <term>2</term>
              <description>Center Weighted Average</description>
            </item>
            <item>
              <term>3</term>
              <description>Spot</description>
            </item>
            <item>
              <term>4</term>
              <description>MultiSpot</description>
            </item>
            <item>
              <term>5</term>
              <description>Pattern</description>
            </item>
            <item>
              <term>6</term>
              <description>Partial</description>
            </item>
            <item>
              <term>255</term>
              <description>Others</description>
            </item>
          </list>
        </para>
        <para>Data type: SHORT. Length: 1.</para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.LightSource">
      <summary>
        <para>Light source. Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Unidentified</description>
            </item>
            <item>
              <term>1</term>
              <description>Daylight</description>
            </item>
            <item>
              <term>2</term>
              <description>Florescence light</description>
            </item>
            <item>
              <term>3</term>
              <description>Tungsten Lamp</description>
            </item>
            <item>
              <term>17</term>
              <description>Standard light source A</description>
            </item>
            <item>
              <term>18</term>
              <description>Standard light source B</description>
            </item>
            <item>
              <term>19</term>
              <description>Standard light source C</description>
            </item>
            <item>
              <term>20</term>
              <description>D55</description>
            </item>
            <item>
              <term>21</term>
              <description>D65</description>
            </item>
            <item>
              <term>22</term>
              <description>D75</description>
            </item>
            <item>
              <term>255</term>
              <description>Others</description>
            </item>
          </list>
        </para>
        <para>Data type: SHORT. Length: 1.</para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Flash">
      <summary>
            Flash On/Off. Possible values are 1 for on or 0 for off. Data type: SHORT. Length: 1.<br></br>
            Please refer to the EXIF specification for all possible values for EXIF comments.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FocalLength">
      <summary>
            Focal length, measured in millimeters. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExposureTime">
      <summary>
            Exposure time, expressed as a fraction of a second. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FNumber">
      <summary>
            The actual lens F stop (ratio of lens aperture to focal length). Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.MakerNote">
      <summary>
            Maker note. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. The creator of the file determines the data format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.UserComment">
      <summary>
        <para>User comment. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable. The first eight bytes specify the data format, and the
            remainder of the comment is in the specified format. The first eight bytes can be any of the following:</para>
        <para>
          <list type="table">
            <item>
              <term>41 53 43 49 49 00 00 00</term>
              <description>ASCII</description>
            </item>
            <item>
              <term>4A 49 53 00 00 00 00 00</term>
              <description>JIS (Japanese)</description>
            </item>
            <item>
              <term>00 00 00 00 00 00 00 00</term>
              <description>Undefined</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubSecTime">
      <summary>
            Decimal extension for seconds that are specified in the RasterCommentMetadataType.DateTime field. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable.                       
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubSecTimeOriginal">
      <summary>
            Decimal extension for seconds that are specified in the RasterCommentMetadataType.DateTimeOriginal field. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubSecTimeDigitized">
      <summary>
            Decimal extension for seconds that are specified in the RasterCommentMetadataType. DateTimeDigitized field. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SupportedFlashPixVersion">
      <summary>
            Supported FlashPix version (Exif 2.0). LEADTOOLS always writes 0100 here. Data type: RasterCommentMetadataDataType. Undefined. Length: 4
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ColorSpace">
      <summary>
        <para>Color space (Exif 2.0). Specifies whether the color is calibrated or not. LEADTOOLS always writes this value as 1. Data type: SHORT.
            Length: 1 Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>1</term>
              <description>sRGB (PC monitor conditions)</description>
            </item>
            <item>
              <term>0xFFFF</term>
              <description>Uncalibrated</description>
            </item>
            <item>
              <term>Other</term>
              <description>reserved</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExposureProgram">
      <summary>
        <para>Exposure program (Exif 2.0) The class of the program used by the camera to set exposure when the picture is taken. Data type: SHORT.
            Length = 1. Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>0</term>
              <description>Not defined</description>
            </item>
            <item>
              <term>1</term>
              <description>Manual</description>
            </item>
            <item>
              <term>2</term>
              <description>Aperture priority</description>
            </item>
            <item>
              <term>4</term>
              <description>Shutter priority</description>
            </item>
            <item>
              <term>5</term>
              <description>Creative program (biased toward depth of field)</description>
            </item>
            <item>
              <term>6</term>
              <description>Action program (biased toward fast shutter speed)</description>
            </item>
            <item>
              <term>7</term>
              <description>Portrait mode (for closeup photos with the background out of focus)</description>
            </item>
            <item>
              <term>Other</term>
              <description>Reserved</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SpectralSensitivity">
      <summary>
            Spectral sensitivity (Exif) - The spectral sensitivity of each channel of the camera used. It is an ASCII string compatible with the standard developed by the ASTM technical committee. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: any
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IsoSpeedRatings">
      <summary>
            ISO speed ratings (Exif) - the ISO speed and the ISO Latitude of the camera or input device as specified in ISO 12232 Data type: SHORT. Length: any
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.OptoElectricCoefficient">
      <summary>
            Optoelectric coefficient (Exif) - Opto-Electric Conversion function specified in ISO 14524. OECF is the relationship between the camera optical input and the image values. Data type: RasterCommentMetadataDataType. Undefined. Length: ANY. This is an array of m rows and n columns.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.RelatedSoundFile">
      <summary>
            Related audio file (Exif) - the name of an audio file related to the image data. The name should be 8 ASCII chars + '.' + 3 chars for extension + NULL. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 13.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FlashEnergy">
      <summary>
            Flash energy (Exif) - the strobe energy at the time the image iscaptured, as measured in Beam Candle Power Seconds (BPCS) Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SpatialFrequencyResponse">
      <summary>
            Spatial frequency response (Exif) - the camera or input device spatial frequency table and SFR values in the direction of image width, image height and diagonal direction, as specified in ISO 12233. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: ANY  This is an array of m rows and n columns.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FocalPlaneXResolution">
      <summary>
            Focal plane X Resolution (Exif) - the number of dots per resolution unit on the camera focal plane in the image width (X) direction
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FocalPlaneResolutionUnit">
      <summary>
            Focal plane resolution unit (Exif). This is the resolution unit for the <see cref="T:Leadtools.RasterCommentMetadataType">RasterCommentMetadataType.FocalPlaneXResolution</see>
            and <see cref="T:Leadtools.RasterCommentMetadataType">RasterCommentMetadataType.FocalPlaneYResolution</see> comments.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FocalPlaneYResolution">
      <summary>
            Focal plane Y Resolution (Exif) - the number of dots per inch on the camera focal plane in the image height (Y) direction
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubjectLocation">
      <summary>
            Subject location (Exif) - the location of the main subject in the scene. The first value is the X column number and the second is the Y row number. Data type: SHORT. Length: 2
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExposureIndex">
      <summary>
            Exposure index (Exif) - the image sensor type on the camera or input device. Data type: SHORT. Length: 1
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SensingMethod">
      <summary>
        <para>Sensing method (Exif) - the image sensor type on the camera or input device. Data type: SHORT. Length: 1 Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>1</term>
              <description>Not defined</description>
            </item>
            <item>
              <term>2</term>
              <description>One-chip color area sensor</description>
            </item>
            <item>
              <term>3</term>
              <description>Two-chip color area sensor</description>
            </item>
            <item>
              <term>4</term>
              <description>Three-chip color area sensor</description>
            </item>
            <item>
              <term>5</term>
              <description>Color sequential area sensor</description>
            </item>
            <item>
              <term>7</term>
              <description>Trilinear sensor</description>
            </item>
            <item>
              <term>8</term>
              <description>Color sequential sensor</description>
            </item>
            <item>
              <term>other</term>
              <description>Reserved</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FileSource">
      <summary>
        <para>File source (Exif) - the image source. If a digital camera recorded the image, the value will always be 3, to indicate that the image
            was recorded on a digital camera. Data type: SHORT. Length: 1 Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>3</term>
              <description>Image recorded on a DSC (Digital Still Camera)</description>
            </item>
            <item>
              <term>Other</term>
              <description>Reserved</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SceneType">
      <summary>
        <para>Scene type (Exif) - the type of scene. If a DSC recorded the image, this value will always be 1, indicating that the image was
            directly photographed. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 1 Possible values are:</para>
        <para>
          <list type="table">
            <item>
              <term>1</term>
              <description>A directly photographed image</description>
            </item>
            <item>
              <term>Other</term>
              <description>Reserved</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.CfaPattern">
      <summary>
            CFA Pattern (Exif) - the color filter array (CFA) geometric pattern of the image sensor when a one-chip color sensor was applied. It does not apply to any other sensing methods. Data type: RasterCommentMetadataDataType. Undefined. Length: ANY This is an array m x n (horz x vertical), where the pattern is repeated every m pixels on the horizontal and n pixels on the vertical.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubjectArea">
      <summary>
            Location and area of the main subject in the overall scene. Data type: SHORT. Count: 2 (Location of the subject is given in X, Y coordinates), 3 (Area of the main subject is given as a circle, X, Y, D, where X and Y are the center coordinates and D is the diameter.) and 4 (Area of the main subject is given as a rectangle, X, Y, W, H, where X and Y are the center coordinates, W is the width or the rectangle and H is the height of the rectangle.).
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.CustomRendered">
      <summary>
            Use of special processing on image data, such as rendering geared toward output. When special processing is performed, the reader is expected to disable or minimize any further processing. Data type: SHORT; Count: 1; Possible Values: 0 ( Normal process), 1 (Custom process), Other (Reserved). Default: 0;
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ExposureMode">
      <summary>
            Exposure mode set when the image was shot. In auto-bracketing mode the camera shoots a series of frames of the same scene at different exposure settings. Tag: 41986; Data type: SHORT; Count: 1; Possible values are: 0 (Auto exposure), 1 (Manual exposure), 2 (Auto-bracket), Other (Reserved); Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.WhiteBalance">
      <summary>
            White balance mode set when the image was shot. Data type: SHORT; Count: 1; Possible values are: 0 (Auto white balance), 1 (Manual white balance), Other (Reserved); Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.DigitalZoomRatio">
      <summary>
            Digital zoom ratio set when the image was shot. If the numerator of the recorded value is 0, the digital zoom was not used. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>; Count: 1; Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.FocalLengthIn35MMFilm">
      <summary>
            Equivalent focal length, assuming a 35mm film camera, in mm. A value of 0 means the focal length is unknown. Note that this comment is different from the RasterCommentMetadataType.FocalLength comment. Data type: SHORT; Count: 1; Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SceneCaptureType">
      <summary>
            Type of scene that was shot. It can also be used to record the mode in which the image was shot. Note that this differs from the RasterCommentMetadataType.SceneType comment. Data type: SHORT; Count: 1; Possible values are: 0 (Standard), 1 (Landscape), 2 (Portrait), 3 (Night scene), Other (Reserved); Default: 0.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GainControl">
      <summary>
            Degree of overall image gain adjustment. Data type: SHORT; Count: 1; Possible values are: 0 (None), 1 (Low gain up), 2 (High gain up), 3 (Low gain down), 4 (High gain down), Other (Reserved); Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Contrast">
      <summary>
            Direction of contrast processing applied by the camera when the image was shot. Data type: SHORT; Count: 1; Possible values are: 0 ( Normal), 1 (Soft), 2 (Hard), Other (Reserved); Default: 0.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Saturation">
      <summary>
            Direction of saturation processing applied by the camera when the image was shot. Data type: SHORT; Count: 1; Possible values are: 0 ( Normal), 1 (Low saturation), 2 (High saturation), Other (Reserved); Default: 0.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Sharpness">
      <summary>
            Direction of sharpness processing applied by the camera when the image was shot. Data type: SHORT; Count: 1; Possible values are: 0 ( Normal), 1 (Soft), 2 (Hard), Other (Reserved); Default: 0.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.DeviceSettingDescription">
      <summary>
            Information on the picture-taking conditions of a particular camera model. Used only to indicate the picture-taking conditions in the reader. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>; Count: Any; The data is recorded in Unicode using SHORT fro the number of display rows and columns and <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see> for the camera settings. The Unicode (UCS -2) string including Signature is NULL terminated. The specifics of the Unicode string are as given in ISO/IEC 10464-1. Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.SubjectDistanceRange">
      <summary>
            Distance to the subject. Data type: SHORT; Count: 1; Possible values are: 0 (Unknown), 1 (Macro), 2 (Close view), 3 (Distant view), Other (Reserved); Default: none.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.ImageUniqueId">
      <summary>
            Identifier assigned uniquely to each image. It is recorded as an ASCII string equivalent to hexadecimal notation and 128-bit fixed length. Tag: 42016; Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>; Count: 33; Default: none
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Gamma">
      <summary>
             Indicates the value of coefficient gamma. The formula of transfer function used for image reproduction is expressed as follows:<br />
             (Reproduced value) = (Input value) ^ (gamma).<br />
             (The Reproduced and Input values are normalized to be between 0 and 1). The gamma must be positive. Tag: 42240; Data Type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Rational</see>; Count: 1; Default: none.
             </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsVersionId">
      <summary>
            Version number of the GPS image file directory (IFD). The current version is 2.0.0.0. This comment must be included when any GPS comments are used. Unlike the RasterCommentMetadataType.ExifVersion comment, this comment is written in bytes. A version written as 2.0.0.0 is actually 0x02000000 when coded. Data type: BYTE. Length: 4.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsLatitudeRef">
      <summary>
            North or south latitude. Possible values are "N" for north and "S" for south. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsLatitude">
      <summary>
            Latitude, expressed as three <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see> values. When expressed in degrees, minutes, and seconds, latitude is written as dd/1,mm/1,ss/1. If degrees and minutes are used as the units, and minutes are written with fractions to two decimal places, then latitude is expressed as dd/1,mmmm/100,0/1. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsLongitudeRef">
      <summary>
            East or west longitude. Possible values are "E" for east and "W" for west. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsLongitude">
      <summary>
            The longitude, expressed as three <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see> values. When expressed in degrees, minutes and seconds, longitude is written as ddd/1,mm/1,ss/1. If degrees and minutes are used as the units, and minutes are written with fractions to two decimal places, then longitude is expressed as dd/1,mmmm/100,0/1. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsAltitudeRef">
      <summary>
            Reference altitude. In the current version, sea level is used as the reference, which must be zero. The reference unit is meters. Data type: BYTE. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsAltitude">
      <summary>
            Altitude, in meters, relative to the reference altitude. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsTimestamp">
      <summary>
            Time stamp in UTC (Coordinated Universal Time) time. The time is expressed as three <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see> values, for hours, minutes, and seconds. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsSatellites">
      <summary>
            GPS satellites used for measurement. The coding format is not stipulated. This comment can be used to code information such as the number of satellites, the satellite number, the satellite angle of elevation, its azimuth, and its SNR. If the GPS receiver cannot make a measurement, this comment is NULL. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsStatus">
      <summary>
            Status of the GPS receiver at when the image is recorded. Possible values are "A" when measurement in progress and "V" when measurement is interrupted. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsMeasureMode">
      <summary>
            GPS measurement mode. A value of "2" denotes two-dimensional measurement, and "3" denotes three-dimensional measurement. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDop">
      <summary>
            DOP (data precision) value. This comment is an HDOP value during two-dimensional measurement and a PDOP value during three-dimensional measurement. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsSpeedRef">
      <summary>
            Unit for measuring speed. Possible values are "K" for kilometers, "M" for miles, and "N" for knots. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsSpeed">
      <summary>
            Speed of the GPS receiver. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsTrackRef">
      <summary>
            Reference for direction of movement. Possible values are "T" for a true direction and "M" for a magnetic. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsTrack">
      <summary>
            Direction of GPS receiver movement. The range of values is 0.00 to 359.00. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsImageDirectionRef">
      <summary>
            Reference for the direction of photography in the recorded image. Possible values are "T" for a true direction and "M" for a magnetic. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsImageDirection">
      <summary>
            Direction of photography in the recorded image. The range of values is 0.00 to 359.00. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsMapDatum">
      <summary>
            Geodetic survey data used by the receiver. If the geodetic survey data is restricted to Japan, this tag value is " TOKYO " or "WGS-84". Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: variable.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationLatitudeRef">
      <summary>
            North or south latitude for the destination point. Possible values are "N" for north and "S" for south. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationLatitude">
      <summary>
            Latitude of the destination point. The latitude is expressed as three RasterCommentMetadataDataType.URationalvalues, indicating degrees, minutes and seconds. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationLongitudeRef">
      <summary>
            East or west longitude for the destination point. Possible values are "E" for east and "W" for west. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationLongitude">
      <summary>
            Longitude of the destination point. The longitude is expressed as three RasterCommentMetadataDataType.URationalvalues, indicating degrees, minutes and seconds. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationBearingRef">
      <summary>
            Reference for the bearing to the destination point. Possible values are "T" for a true direction and "M" for a magnetic. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationBearing">
      <summary>
            Bearing to the destination point. The range of values is 0.00 to 359.00. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationDistanceRef">
      <summary>
            Unit for measuring distance to the destination point. Possible values are "K" for kilometers, "M" for miles, and "N" for nautical miles. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Ascii</see>. Length: 2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDestinationDistance">
      <summary>
            Distance to the destination point. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.URational</see>. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsProcessingMethod">
      <summary>
            Processing method. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Byte</see>. Length: Any.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsAreaInformation">
      <summary>
            Area. Data type: <see cref="T:Leadtools.RasterCommentMetadataDataType">RasterCommentMetadataDataType.Byte</see>. Length: Any.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDateStamp">
      <summary>
            Date. Data type: SZ. Length: 11.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.GpsDifferential">
      <summary>
            Differential. Data type: Short. Length: 1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Title">
      <summary>
            Title of the image.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Disclaimer">
      <summary>
            String containing the disclaimer of the software used to create the image.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Warning">
      <summary>
            Warning statement associated with the software that created the image.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Misc">
      <summary>
            Miscellaneous information.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Jpeg2000Binary">
      <summary>
            JPEG 2000 binary comment.                         
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.Jpeg2000Latin">
      <summary>
            JPEG 2000 Latin comment.                          
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcFirst">
      <summary>
            The first IPTC comment To get all IPTC comments, use the comment type constant as a loop counter. The first constant is RasterCommentMetadataType.IptcFirst and the last is RasterCommentMetadataType.IptcLast.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcVersion">
      <summary>
            2:0, the version of IPTC comments (read-only). Non-repeatable, (min=2 bytes, max=2). This is the only comment that is binary. The first byte is the lower version number (usually 0) and the second byte is the high version number (the current version is 4 - binary 4, not ascii '4'). LEADTOOLS writes 4 here.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcObjectTypeReference">
      <summary>
            2:3, Object type reference. Non repeatable. Length = 3..67.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcObjectAttributeReference">
      <summary>
            2:4, Object Attribute Reference. Repeatable. Length = 4..68.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcObjectName">
      <summary>
            2:5, Object name. Non repeatable. Length = 1..64.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcEditStatus">
      <summary>
            2:7, Edit status. Non repeatable. Length = 1..64.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcEditorialUpdate">
      <summary>
            2:8, Editorial update. Non repeatable. Length = 2..2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcUrgency">
      <summary>
            2:10, Urgency. Non repeatable. '1' is most urgent, '5' = Normal, '8' is least urgent. Length = 1..1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcSubjectReference">
      <summary>
            2:12, Subject reference. Repeatable. Length = 13..236.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcCategory">
      <summary>
            2:15, Category. Non repeatable. Length = 1..3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcSupplementalCategory">
      <summary>
            2:20, Supplemental category. Repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcFixtureIdentifier">
      <summary>
            2:22, Fixture identifier. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcKeywords">
      <summary>
            2:25, Keywords. Repeatable. Length = 1..64.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcContentLocationCode">
      <summary>
            2:26, Content location code. Repeatable. Length = 3..3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcContentLocationName">
      <summary>
            2:27, Content location name. Repeatable. Length = 1..64.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcReleaseDate">
      <summary>
            2:30, Release date. Non repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcReleaseTime">
      <summary>
            2:35, Release time. Non repeatable. Length = 11..11.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcExpirationDate">
      <summary>
            2:37, Expiration date. Non repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcExpirationTime">
      <summary>
            2:38, Expiration time. Non repeatable. Length = 11..11.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcSpecialInstructions">
      <summary>
            2:40, Special instructions. Non repeatable. Length = 1..256.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcActionAdvised">
      <summary>
            2:42, Action advised. Non repeatable. Length = 2..2.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcReferenceService">
      <summary>
            2:45, Reference service. Repeatable. Length = 1..10.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcReferenceDate">
      <summary>
            2:47, Reference date. Repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcReferenceNumber">
      <summary>
            2:50, Reference number. Repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcDateCreated">
      <summary>
            2:55, Date created. Non repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcTimeCreated">
      <summary>
            2:60, Time created. Non repeatable. Length = 11..11.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcDigitalCreationDate">
      <summary>
            2:62, Digital creation date. Non repeatable. Length = 8..8.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcDigitalCreationTime">
      <summary>
            2:63, Digital creation time. Non repeatable. Length = 11..11.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcOriginatingProgram">
      <summary>
            2:65, Originating program. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcProgramVersion">
      <summary>
            2:70, Program version. Non repeatable. Length = 1..10.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcObjectCycle">
      <summary>
            2:75, Object cycle. Non repeatable. Length = 1..1.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcByline">
      <summary>
            2:80, By-line. Repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcBylineTitle">
      <summary>
            2:85, By-line title. Repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcCity">
      <summary>
            2:90, City Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcSubLocation">
      <summary>
            2:92, Sub-location. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcProvinceState">
      <summary>
            2:95, Province/State. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcPrimaryLocationCode">
      <summary>
            2:100, Country/Primary location code. Non repeatable. Length = 3..3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcPrimaryLocationName">
      <summary>
            2:101, Country/Primary location name. Non repeatable. Length = 1..64.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcOriginalTransmissionReference">
      <summary>
            2:103, Original transmission reference. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcHeadline">
      <summary>
            2:105, Headline. Non repeatable. Length = 1..256.                      
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcCredit">
      <summary>
            2:110, Credit. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcSource">
      <summary>
            2:115, Source. Non repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcCopyright">
      <summary>
            2:116, Copyright Notice. Non repeatable. Length = 1..128.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcContact">
      <summary>
            2:118, Contact. Repeatable. Length = 1..128.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcCaption">
      <summary>
            2:120, Caption/Abstract. Non repeatable. Length = 1..2000.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcAuthor">
      <summary>
            2:122, Writer/Editor. Repeatable. Length = 1..32.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcLanguageIdentifier">
      <summary>
            2:135, Language identifier. Non repeatable. Length = 2..3.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCommentMetadataType.IptcLast">
      <summary>
            The last IPTC comment.
            </summary>
    </member>
    <member name="T:Leadtools.RasterCommentMetadata">
      <summary>Extends the <see cref="T:Leadtools.RasterMetadata" /> class to provide functionality for dealing with comment metadata stored within various image file
            formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The TIFF file formats support a number of comments that are saved and loaded using predefined tags.</para>
        <para>If the comments do not meet your needs, you can define your own tag for saving additional non-raster data in a TIFF file. For example,
            you may want to define a tag to save annotations.</para>
        <para>The TIFF 6.0 Specification sets aside a range of private tags that developers can define. To avoid conflicts with files created by other
            developers, you can register your tag by contacting Adobe Developer Relations.  The E-Mail address posted on The Unofficial TIFF Home Page
            is <strong>gapdevsup@adobe.com</strong>.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the metadata. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <example>
        <para>This example will write comments of different data types to an existing tif file then read them as a test.</para>
        <code lang="VB">        Public Sub RasterCommentMetadataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_comments.tif")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24)

         image.Dispose()

         ' Write some comments to the existing tif file
         Dim comment As RasterCommentMetadata = New RasterCommentMetadata()
         comment.Type = RasterCommentMetadataType.Artist
         Dim artistNameWrite As String = "Artist name"
         comment.FromAscii(artistNameWrite)
         Console.WriteLine("Writing Artist")
         codecs.WriteComment(destFileName, 1, comment)

         comment.Type = RasterCommentMetadataType.GpsLatitude
         Dim rationalsWrite As RasterMetadataRational() = New RasterMetadataRational(2) {}
         Dim i As Integer = 0
         Do While i &lt; rationalsWrite.Length
            rationalsWrite(i) = New RasterMetadataRational(i + 3, i + 2)
            i += 1
         Loop

         comment.FromRational(rationalsWrite)
         Console.WriteLine("Writing GpsLatitude")
         codecs.WriteComment(destFileName, 1, comment)

         ' Now read the comments from the tif file

         ' read ASCII
         comment = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.Artist)
         Dim artistNameRead As String = comment.ToAscii()
         Console.WriteLine("Artist: {0}", artistNameRead)
         Debug.Assert(artistNameRead = artistNameWrite)

         ' read rationals
         comment = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.GpsLatitude)
         Dim rationalsRead As RasterMetadataRational() = comment.ToRational()

         Dim size As Integer = rationalsRead.Length
         Console.WriteLine("GpsLatitude: size = {0} ", size)
         i = 0
         Do While i &lt; size
            Console.WriteLine("{0}/{1}", rationalsRead(i).Numerator, rationalsRead(i).Denominator)
            i += 1
         Loop

         Debug.Assert(rationalsRead.Length = rationalsWrite.Length)
         i = 0
         Do While i &lt; rationalsRead.Length
            Debug.Assert(rationalsRead(i).Numerator = rationalsWrite(i).Numerator)
            Debug.Assert(rationalsRead(i).Denominator = rationalsWrite(i).Denominator)
            i += 1
         Loop
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterCommentMetadataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_comments.tif");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 24);

         image.Dispose();

         // Write some comments to the existing tif file
         RasterCommentMetadata comment = new RasterCommentMetadata();
         comment.Type = RasterCommentMetadataType.Artist;
         string artistNameWrite = "Artist name";
         comment.FromAscii(artistNameWrite);
         Console.WriteLine("Writing Artist");
         codecs.WriteComment(destFileName, 1, comment);

         comment.Type = RasterCommentMetadataType.GpsLatitude;
         RasterMetadataRational[] rationalsWrite = new RasterMetadataRational[3];
         for(int i = 0; i &lt; rationalsWrite.Length; i++)
            rationalsWrite[i] = new RasterMetadataRational(i + 3, i + 2);

         comment.FromRational(rationalsWrite);
         Console.WriteLine("Writing GpsLatitude");
         codecs.WriteComment(destFileName, 1, comment);

         // Now read the comments from the tif file

         // read ASCII
         comment = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.Artist);
         string artistNameRead = comment.ToAscii();
         Console.WriteLine("Artist: {0}", artistNameRead);
         Debug.Assert(artistNameRead == artistNameWrite);

         // read rationals
         comment = codecs.ReadComment(destFileName, 1, RasterCommentMetadataType.GpsLatitude);
         RasterMetadataRational[] rationalsRead = comment.ToRational();

         int size = rationalsRead.Length;
         Console.WriteLine("GpsLatitude: size = {0} ", size);
         for(int i = 0; i &lt; size; i++)
            Console.WriteLine("{0}/{1}", rationalsRead[i].Numerator, rationalsRead[i].Denominator);

         Debug.Assert(rationalsRead.Length == rationalsWrite.Length);
         for(int i = 0; i &lt; rationalsRead.Length; i++)
         {
            Debug.Assert(rationalsRead[i].Numerator == rationalsWrite[i].Numerator);
            Debug.Assert(rationalsRead[i].Denominator == rationalsWrite[i].Denominator);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterCommentMetadataExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24);
         image.Dispose();
         // Write some comments to the existing tif file
         RasterCommentMetadata comment = new RasterCommentMetadata();
         comment.Type = RasterCommentMetadataType.Artist;
         string artistNameWrite = "Artist name";
         comment.FromAscii(artistNameWrite);
         Debug.WriteLine("Writing Artist");
         codecs.WriteComment(destStream, 1, comment);

         comment.Type = RasterCommentMetadataType.GpsLatitude;
         RasterMetadataRational[] rationalsWrite = new RasterMetadataRational[3];
         for(int i = 0; i &lt; rationalsWrite.Length; i++)
            rationalsWrite[i] = new RasterMetadataRational(i + 3, i + 2);

         comment.FromRational(rationalsWrite);
         Debug.WriteLine("Writing GpsLatitude");
         codecs.WriteComment(destStream, 1, comment);

         // Now read the comments from the tif file

         // read ASCII
         comment = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.Artist);
         string artistNameRead = comment.ToAscii();
         Debug.WriteLine("Artist: {0}", artistNameRead);
         Debug.Assert(artistNameRead == artistNameWrite);

         // read rationals
         comment = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.GpsLatitude);
         RasterMetadataRational[] rationalsRead = comment.ToRational();

         int size = rationalsRead.Length;
         Debug.WriteLine("GpsLatitude: size = {0} ", size);
         for(int i = 0; i &lt; size; i++)
            Debug.WriteLine("{0}/{1}", rationalsRead[i].Numerator, rationalsRead[i].Denominator);

         Debug.Assert(rationalsRead.Length == rationalsWrite.Length);
         for(int i = 0; i &lt; rationalsRead.Length; i++)
         {
            Debug.Assert(rationalsRead[i].Numerator == rationalsWrite[i].Numerator);
            Debug.Assert(rationalsRead[i].Denominator == rationalsWrite[i].Denominator);
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterCommentMetadataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24)
         image.Dispose()
         ' Write some comments to the existing tif file
         Dim comment As RasterCommentMetadata = New RasterCommentMetadata()
         comment.Type = RasterCommentMetadataType.Artist
         Dim artistNameWrite As String = "Artist name"
         comment.FromAscii(artistNameWrite)
         Debug.WriteLine("Writing Artist")
         codecs.WriteComment(destStream, 1, comment)

         comment.Type = RasterCommentMetadataType.GpsLatitude
         Dim rationalsWrite As RasterMetadataRational() = New RasterMetadataRational(2){}
         Dim i As Integer = 0
         Do While i &lt; rationalsWrite.Length
            rationalsWrite(i) = New RasterMetadataRational(i + 3, i + 2)
            i += 1
         Loop

         comment.FromRational(rationalsWrite)
         Debug.WriteLine("Writing GpsLatitude")
         codecs.WriteComment(destStream, 1, comment)

         ' Now read the comments from the tif file

         ' read ASCII
         comment = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.Artist)
         Dim artistNameRead As String = comment.ToAscii()
         Debug.WriteLine("Artist: {0}", artistNameRead)
         Debug.Assert(artistNameRead = artistNameWrite)

         ' read rationals
         comment = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.GpsLatitude)
         Dim rationalsRead As RasterMetadataRational() = comment.ToRational()

         Dim size As Integer = rationalsRead.Length
         Debug.WriteLine("GpsLatitude: size = {0} ", size)
         i = 0
         Do While i &lt; size
            Debug.WriteLine("{0}/{1}", rationalsRead(i).Numerator, rationalsRead(i).Denominator)
            i += 1
         Loop

         Debug.Assert(rationalsRead.Length = rationalsWrite.Length)
         i = 0
         Do While i &lt; rationalsRead.Length
            Debug.Assert(rationalsRead(i).Numerator = rationalsWrite(i).Numerator)
            Debug.Assert(rationalsRead(i).Denominator = rationalsWrite(i).Denominator)
            i += 1
         Loop
      End Sub</code>
      </example>
    </member>
    <member name="T:Leadtools.RasterMetadata">
      <summary>Provides base functionality for dealing with metadata stored in various image file formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>"Metadata" refers to extra information that is stored with an image, but is not necessary for decoding the image.</para>
        <para>Metadata can contain information about the camera used to take the image, the author, date and time the image was taken,
            where the image was taken, whether the camera has GPS capabilities, etc. When an image is modified, you should 
            preserve the original information, if possible. Metadata includes <strong>markers</strong>, <strong>tags</strong> and
            <strong>comments</strong>.</para>
        <para>Classes which derive from <see cref="T:Leadtools.RasterMetadata" /> include:
            <list type="bullet"><item><description><see cref="T:Leadtools.RasterMarkerMetadata" /></description></item><item><description><see cref="T:Leadtools.RasterTagMetadata" /></description></item><item><description><see cref="T:Leadtools.RasterCommentMetadata" /></description></item></list></para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMetadata" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCommentMetadata.IptcSeparator">
      <summary>The separator when a file has two or more IPTC comments. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>
          <see cref="F:Leadtools.RasterCommentMetadata.IptcSeparator" /> has an Ascii code of 1 and cannot appear in any comment, so there is not a possibility of 
            confusion about this character is the separator or part of the comment. Do not confuse this with the character '1', whose Ascii code
            is 49!</para>
        <para>For more information, refer to <see cref="T:L.Topics.IPTCComments">IPTC Comments</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub CommentsSizeAndTypeExample()
         Console.WriteLine("IptcSeparator : {0}", RasterCommentMetadata.IptcSeparator)

         Console.WriteLine("Data type sizes:")
         Console.WriteLine("------------------")
         Dim dataTypes As Array = System.Enum.GetValues(GetType(RasterCommentMetadataDataType))
         For Each dataType As RasterCommentMetadataDataType In dataTypes
            Dim size As Integer = RasterCommentMetadata.GetDataTypeSize(dataType)
            Console.WriteLine("{0}: {1} bytes", dataType, size)
         Next dataType

         Console.WriteLine("Comment data types:")
         Console.WriteLine("------------------")
         Dim types As Array = System.Enum.GetValues(GetType(RasterCommentMetadataType))
         For Each type As RasterCommentMetadataType In types
            Dim dataType As RasterCommentMetadataDataType = RasterCommentMetadata.GetDataType(type)
            Console.WriteLine("{0}: {1}", type, dataType)
         Next type
      End Sub</code>
        <code lang="CS">      public void CommentsSizeAndTypeExample()
      {
         Console.WriteLine("IptcSeparator : {0}", RasterCommentMetadata.IptcSeparator);

         Console.WriteLine("Data type sizes:");
         Console.WriteLine("------------------");
         Array dataTypes = Enum.GetValues(typeof(RasterCommentMetadataDataType));
         foreach(RasterCommentMetadataDataType dataType in dataTypes)
         {
            int size = RasterCommentMetadata.GetDataTypeSize(dataType);
            Console.WriteLine("{0}: {1} bytes", dataType, size);
         }

         Console.WriteLine("Comment data types:");
         Console.WriteLine("------------------");
         Array types = Enum.GetValues(typeof(RasterCommentMetadataType));
         foreach(RasterCommentMetadataType type in types)
         {
            RasterCommentMetadataDataType dataType = RasterCommentMetadata.GetDataType(type);
            Console.WriteLine("{0}: {1}", type, dataType);
         }
      }</code>
        <code lang="SilverlightCSharp">      private static T[] GetEnumValues&lt;T&gt;()
      {
         Type enumType = typeof(T);
         if (!enumType.IsEnum)
         {
            throw new ArgumentException("Not an enum type: " + enumType.Name);
         }
         List&lt;T&gt; values = new List&lt;T&gt;();
         foreach (System.Reflection.FieldInfo field in enumType.GetFields())
         {
            if (field.IsLiteral)
               values.Add((T)field.GetValue(enumType));
         }
         return values.ToArray();
      }
      public void CommentsSizeAndTypeExample()
      {
         Debug.WriteLine("IptcSeparator : {0}", RasterCommentMetadata.IptcSeparator);

         Debug.WriteLine("Data type sizes:");
         Debug.WriteLine("------------------");
         RasterCommentMetadataType[] dataTypes = GetEnumValues&lt;RasterCommentMetadataType&gt;();
         foreach(RasterCommentMetadataDataType dataType in dataTypes)
         {
            int size = RasterCommentMetadata.GetDataTypeSize(dataType);
            Debug.WriteLine("{0}: {1} bytes", dataType, size);
         }

         Debug.WriteLine("Comment data types:");
         Debug.WriteLine("------------------");
         RasterCommentMetadataType[] types = GetEnumValues&lt;RasterCommentMetadataType&gt;();
         foreach (RasterCommentMetadataType type in types)
         {
            RasterCommentMetadataDataType dataType = RasterCommentMetadata.GetDataType(type);
            Debug.WriteLine("{0}: {1}", type, dataType);
         }
      }</code>
        <code lang="SilverlightVB">      Private Shared Function GetEnumValues(Of T)() As T()
         Dim enumType As Type = GetType(T)
         If (Not enumType.IsEnum) Then
            Throw New ArgumentException("Not an enum type: " &amp; enumType.Name)
         End If
         Dim values As List(Of T) = New List(Of T)()
         For Each field As System.Reflection.FieldInfo In enumType.GetFields()
            If field.IsLiteral Then
               values.Add(CType(field.GetValue(enumType), T))
            End If
         Next field
         Return values.ToArray()
      End Function
      Public Sub CommentsSizeAndTypeExample()
         Debug.WriteLine("IptcSeparator : {0}", RasterCommentMetadata.IptcSeparator)

         Debug.WriteLine("Data type sizes:")
         Debug.WriteLine("------------------")
         Dim dataTypes As RasterCommentMetadataType() = GetEnumValues(Of RasterCommentMetadataType)()
         For Each dataType As RasterCommentMetadataDataType In dataTypes
            Dim size As Integer = RasterCommentMetadata.GetDataTypeSize(dataType)
            Debug.WriteLine("{0}: {1} bytes", dataType, size)
         Next dataType

         Debug.WriteLine("Comment data types:")
         Debug.WriteLine("------------------")
         Dim types As RasterCommentMetadataType() = GetEnumValues(Of RasterCommentMetadataType)()
         For Each type As RasterCommentMetadataType In types
            Dim dataType As RasterCommentMetadataDataType = RasterCommentMetadata.GetDataType(type)
            Debug.WriteLine("{0}: {1}", type, dataType)
         Next type
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.GetDataTypeSize(Leadtools.RasterCommentMetadataDataType)">
      <summary>Gets the size (in bytes) of the specified <see cref="T:Leadtools.RasterCommentMetadataDataType" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="dataType">The <see cref="T:Leadtools.RasterCommentMetadataDataType" /> for which to get the size.</param>
      <returns>The size (in bytes) of <paramref name="dataType" />.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="F:Leadtools.RasterCommentMetadata.IptcSeparator" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.GetDataType(Leadtools.RasterCommentMetadataType)">
      <summary>Gets the <see cref="T:Leadtools.RasterCommentMetadataDataType" /> of the specified <see cref="T:Leadtools.RasterCommentMetadataType" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="type">The <see cref="T:Leadtools.RasterCommentMetadataType" /> for which to get its <see cref="T:Leadtools.RasterCommentMetadataDataType" />.</param>
      <returns>The <see cref="T:Leadtools.RasterCommentMetadataDataType" /> for the specified <see cref="T:Leadtools.RasterCommentMetadataType" />.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="F:Leadtools.RasterCommentMetadata.IptcSeparator" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterCommentMetadata" /> class with default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.#ctor(Leadtools.RasterCommentMetadataType,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterCommentMetadata" /> class with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="type">The type of comment to create.</param>
      <param name="data">The data for the comment.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.Clone">
      <summary>Makes an exact copy of this <see cref="T:Leadtools.RasterCommentMetadata" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterCommentMetadata" /> object that this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.GetData">
      <summary>Gets the data (an arry of bytes) for this comment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The data for this comment, stored as an array of bytes.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.SetData(System.Byte[])">
      <summary>Sets the data (an arry of bytes) for this comment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data for this comment, stored as an array of bytes.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.ToByte">
      <summary>Converts the comment data to an array of bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to an arry of bytes.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.FromByte(System.Byte[])">
      <summary>Sets the comment data to the specified array of bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.ToAscii">
      <summary>Converts the comment data to a string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to a string.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.FromAscii(System.String)">
      <summary>Sets the comment data to the specified string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.ToURational">
      <summary>Converts the comment data to an array of <see cref="T:Leadtools.RasterMetadataURational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to an array of <see cref="T:Leadtools.RasterMetadataURational" /> values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.FromURational(Leadtools.RasterMetadataURational[])">
      <summary>Sets the comment data to the specified <see cref="T:Leadtools.RasterMetadataURational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.ToRational">
      <summary>Converts the comment data to an array of <see cref="T:Leadtools.RasterMetadataRational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to an array of <see cref="T:Leadtools.RasterMetadataRational" /> values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.FromRational(Leadtools.RasterMetadataRational[])">
      <summary>Sets the comment data to the specified <see cref="T:Leadtools.RasterMetadataRational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.ToInt16">
      <summary>Converts the comment data to an array of integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to an array of integer values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterCommentMetadata.FromInt16(System.Int16[])">
      <summary>Sets the comment data to the specified integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="P:Leadtools.RasterCommentMetadata.Type">
      <summary>Gets or sets the type of comment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The type of comment.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteComment(System.IO.Stream,System.Int32,Leadtools.RasterCommentMetadata)" />.</example>
    </member>
    <member name="P:Leadtools.RasterCommentMetadata.DataType">
      <summary>Gets the data type for this comment. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The data type for this comment.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCommentMetadata" />.</example>
    </member>
    <member name="T:Leadtools.RasterImageAllocateData">
      <summary>Provides data for the <see cref="T:Leadtools.RasterImageAllocateCallback" /> callback. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>For information on when to use <see cref="T:Leadtools.RasterImageAllocateData" /> and <see cref="T:Leadtools.RasterImageAllocateCallback" />, refer to
            <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</para>
        <para>All members of this class is read-only except for <see cref="P:Leadtools.RasterImageAllocateData.MemoryFlags" />. In other words, you cannot change the
            width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.MemoryFlags">
      <summary>Gets or sets the memory model flags being used to create the <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>One or more <see cref="T:Leadtools.RasterMemoryFlags" /> enumeration members that represent the memory model to use when creating the
            <see cref="T:Leadtools.RasterImage" /> object.</value>
      <remarks>
        <para>You can inspect and change the memory model (conventional, disk, tiled, etc.) used when creating the <see cref="T:Leadtools.RasterImage" />
            object by using this property. Refer to the example of the
            <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.Width">
      <summary>Gets the width of the <see cref="T:Leadtools.RasterImage" /> object being created in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The width of the <see cref="T:Leadtools.RasterImage" /> object being created in pixels.</value>
      <remarks>
        <para>You cannot change the width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.Height">
      <summary>Gets the height of the <see cref="T:Leadtools.RasterImage" /> object being created in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The height of the <see cref="T:Leadtools.RasterImage" /> object being created in pixels.</value>
      <remarks>
        <para>You cannot change the width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.BitsPerPixel">
      <summary>Gets the bits per pixel of the <see cref="T:Leadtools.RasterImage" /> object being created. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The bits per pixel of the <see cref="T:Leadtools.RasterImage" /> object being created. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48 or 64.</value>
      <remarks>
        <para>You cannot change the width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.Order">
      <summary>Gets the byte order of the <see cref="T:Leadtools.RasterImage" /> object being created. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.RasterByteOrder" /> enumeration member that specifies the byte order of the <see cref="T:Leadtools.RasterImage" /> object being created.</value>
      <remarks>
        <para>You cannot change the width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="P:Leadtools.RasterImageAllocateData.Size">
      <summary>Gets the size of the data required by the <see cref="T:Leadtools.RasterImage" /> object being created in bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The size of the data required by the <see cref="T:Leadtools.RasterImage" /> object being created in bytes.</value>
      <remarks>
        <para>You cannot change the width, height, bits/pixel, order or size of the <see cref="T:Leadtools.RasterImage" /> object being created. You can however inspect
            and change the memory model (conventional, disk, tiled, etc.).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="T:Leadtools.RasterImageAllocateCallback">
      <summary>Callback to use when new <see cref="T:Leadtools.RasterImage" /> objects are crated by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="data">Parameters used when creating the <see cref="T:Leadtools.RasterImage" /> object.</param>
      <returns>
        <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.Success</see> to continue creating the <see cref="T:Leadtools.RasterImage" /> object,
            any other value will cause the toolkit to throw <see cref="T:Leadtools.RasterException" /> with code equals to this <see cref="T:Leadtools.RasterExceptionCode" />.</returns>
      <remarks>
        <para>For more information, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see> and
            <see cref="T:Leadtools.RasterImageAllocateData" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">RasterDefaults.SetRasterImageAllocateCallback</see>.</example>
    </member>
    <member name="T:Leadtools.RasterDefaults">
      <summary>Specifies the default extra values used when creating <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>
            You can use the <see cref="T:Leadtools.RasterDefaults" /> class to specify extra attributes used when creating a <see cref="T:Leadtools.RasterImage" /> object
            </para>
        <para>
            For example, you can use <see cref="P:Leadtools.RasterDefaults.XResolution" /> and <see cref="P:Leadtools.RasterDefaults.YResolution" /> to set the
            physical resolution (DPI) of all the <see cref="T:Leadtools.RasterImage" /> objects creates afterwards.
            </para>
        <para>
            You can use <see cref="P:Leadtools.RasterDefaults.DitheringMethod" /> to specifies the default dithering method to use when converting an
            image from 64, 48, 32, 24, or 16 bits per pixel to 8 bits per pixel or fewer.</para>
        <para>
          <see cref="P:Leadtools.RasterDefaults.MemoryFlags" /> and <see cref="P:Leadtools.RasterDefaults.MemoryThreshold" /> controls how newly created images
            use the system memory.  The <see cref="P:Leadtools.RasterDefaults.TemporaryDirectory" /> controls where disk-based images are stored.
            </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub RasterDefaultsExample()
         ShowValues()

         ' Create a raster image with current DPI
         Dim image1 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image1.XResolution, image1.YResolution)

         ' Change the resolution
         Dim xOldResolution As Integer = RasterDefaults.XResolution
         Dim yOldResolution As Integer = RasterDefaults.YResolution
         Dim xNewResolution As Integer = 196
         Dim yNewResolution As Integer = 196
         RasterDefaults.XResolution = xNewResolution
         RasterDefaults.YResolution = yNewResolution
         ShowValues()

         ' Create another raster image
         ' Create a raster image with current DPI
         Dim image2 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image2.XResolution, image2.YResolution)
         Debug.Assert(image2.XResolution = xNewResolution)
         Debug.Assert(image2.YResolution = yNewResolution)

         ' Reset old values
         RasterDefaults.XResolution = xOldResolution
         RasterDefaults.YResolution = yOldResolution

         image1.Dispose()
         image2.Dispose()
      End Sub

      Private Sub ShowValues()
         Console.WriteLine("Current defaults:")
         Console.WriteLine("MaximumThreadCount: {0}", RasterDefaults.MaximumThreadCount)
         Console.WriteLine("XResolution: {0}", RasterDefaults.XResolution)
         Console.WriteLine("YResolution: {0}", RasterDefaults.YResolution)
         Console.WriteLine("DitheringMethod: {0}", RasterDefaults.DitheringMethod)
         Console.WriteLine("MemoryFlags: {0}", RasterDefaults.MemoryFlags)

         Dim threshold As RasterMemoryThreshold = RasterDefaults.MemoryThreshold
         Console.WriteLine("MemoryThreshold.TiledThreshold: {0}", threshold.TiledThreshold)
         Console.WriteLine("MemoryThreshold.MaximumConventionalSize: {0}", threshold.MaximumConventionalSize)
         Console.WriteLine("MemoryThreshold.TileSize: {0}", threshold.TileSize)
         Console.WriteLine("MemoryThreshold.ConventionalTiles: {0}", threshold.ConventionalTiles)
         Console.WriteLine("MemoryThreshold.ConventionalBuffers: {0}", threshold.ConventionalBuffers)

         Console.WriteLine("TemporaryDirectory: {0}", RasterDefaults.TemporaryDirectory)
      End Sub</code>
        <code lang="CS">      public void RasterDefaultsExample()
      {
         ShowValues();

         // Create a raster image with current DPI
         RasterImage image1 = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image1.XResolution, image1.YResolution);

         // Change the resolution
         int xOldResolution = RasterDefaults.XResolution;
         int yOldResolution = RasterDefaults.YResolution;
         int xNewResolution = 196;
         int yNewResolution = 196;
         RasterDefaults.XResolution = xNewResolution;
         RasterDefaults.YResolution = yNewResolution;
         ShowValues();

         // Create another raster image
         // Create a raster image with current DPI
         RasterImage image2 = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image2.XResolution, image2.YResolution);
         Debug.Assert(image2.XResolution == xNewResolution);
         Debug.Assert(image2.YResolution == yNewResolution);

         // Reset old values
         RasterDefaults.XResolution = xOldResolution;
         RasterDefaults.YResolution = yOldResolution;

         image1.Dispose();
         image2.Dispose();
      }

      void ShowValues()
      {
         Console.WriteLine("Current defaults:");
         Console.WriteLine("MaximumThreadCount: {0}", RasterDefaults.MaximumThreadCount);
         Console.WriteLine("XResolution: {0}", RasterDefaults.XResolution);
         Console.WriteLine("YResolution: {0}", RasterDefaults.YResolution);
         Console.WriteLine("DitheringMethod: {0}", RasterDefaults.DitheringMethod);
         Console.WriteLine("MemoryFlags: {0}", RasterDefaults.MemoryFlags);

         RasterMemoryThreshold threshold = RasterDefaults.MemoryThreshold;
         Console.WriteLine("MemoryThreshold.TiledThreshold: {0}", threshold.TiledThreshold);
         Console.WriteLine("MemoryThreshold.MaximumConventionalSize: {0}", threshold.MaximumConventionalSize);
         Console.WriteLine("MemoryThreshold.TileSize: {0}", threshold.TileSize);
         Console.WriteLine("MemoryThreshold.ConventionalTiles: {0}", threshold.ConventionalTiles);
         Console.WriteLine("MemoryThreshold.ConventionalBuffers: {0}", threshold.ConventionalBuffers);

         Console.WriteLine("TemporaryDirectory: {0}", RasterDefaults.TemporaryDirectory);
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void RasterDefaultsExample()
      {
         ShowValues();
         // Create a raster image with current DPI
         RasterImage image1 = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image1.XResolution, image1.YResolution);

         // Change the resolution
         int xOldResolution = RasterDefaults.XResolution;
         int yOldResolution = RasterDefaults.YResolution;
         int xNewResolution = 196;
         int yNewResolution = 196;
         RasterDefaults.XResolution = xNewResolution;
         RasterDefaults.YResolution = yNewResolution;
         ShowValues();

         // Create another raster image
         // Create a raster image with current DPI
         RasterImage image2 = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image2.XResolution, image2.YResolution);
         Debug.Assert(image2.XResolution == xNewResolution);
         Debug.Assert(image2.YResolution == yNewResolution);

         // Reset old values
         RasterDefaults.XResolution = xOldResolution;
         RasterDefaults.YResolution = yOldResolution;

         image1.Dispose();
         image2.Dispose();
      }

      void ShowValues()
      {
         Console.WriteLine("Current defaults:");
         Console.WriteLine("XResolution: {0}", RasterDefaults.XResolution);
         Console.WriteLine("YResolution: {0}", RasterDefaults.YResolution);
         Console.WriteLine("DitheringMethod: {0}", RasterDefaults.DitheringMethod);
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub RasterDefaultsExample()
         ShowValues()
         ' Create a raster image with current DPI
         Dim image1 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image1.XResolution, image1.YResolution)

         ' Change the resolution
         Dim xOldResolution As Integer = RasterDefaults.XResolution
         Dim yOldResolution As Integer = RasterDefaults.YResolution
         Dim xNewResolution As Integer = 196
         Dim yNewResolution As Integer = 196
         RasterDefaults.XResolution = xNewResolution
         RasterDefaults.YResolution = yNewResolution
         ShowValues()

         ' Create another raster image
         ' Create a raster image with current DPI
         Dim image2 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Console.WriteLine("Resolution of created image is {0} by {1} DPI", image2.XResolution, image2.YResolution)
         Debug.Assert(image2.XResolution = xNewResolution)
         Debug.Assert(image2.YResolution = yNewResolution)

         ' Reset old values
         RasterDefaults.XResolution = xOldResolution
         RasterDefaults.YResolution = yOldResolution

         image1.Dispose()
         image2.Dispose()
      End Sub

      Private Sub ShowValues()
         Console.WriteLine("Current defaults:")
         Console.WriteLine("XResolution: {0}", RasterDefaults.XResolution)
         Console.WriteLine("YResolution: {0}", RasterDefaults.YResolution)
         Console.WriteLine("DitheringMethod: {0}", RasterDefaults.DitheringMethod)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)">
      <summary>Sets a global callback to be called whenever the toolkit is creating a new <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="callback">Method to be called whenever the toolkit is creating a new <see cref="T:Leadtools.RasterImage" /> object. You
            can pass null (Nothing in Visual Basic) to stop the toolkit from calling any callback.</param>
      <returns>The previous global callback set, or null (Nothing in Visual Basic) if no callback was set before (default).</returns>
      <remarks>
        <para>This method allows you to inspect (and change the memory model being used) whenever the toolkit is creating a new
            <see cref="T:Leadtools.RasterImage" /> object. Generally, you can use the <see cref="T:Leadtools.RasterMemoryFlags" /> argument to the 
            <see cref="T:Leadtools.RasterImage" /> constructor when creating new objects, however, in some instances, the toolkit will create images
            internally and you have no control on the memory model being passed. The callback set is global to all LEADTOOLS used in current process.</para>
        <para>This can be useful for debugging purposes or to control the memory model of an image being creating internally
            in LEADTOOLS, for example, as a result of an image processing operation as described in the example.</para>
        <para>The return value is the old callback set previously by the user, if no callback was set previously, this method
            will return null (Nothing in Visual Basic), this allow you to cascade callbacks together.</para>
        <para>By default, the toolkit does not set a callback, and calling this method the first time will always
            return null (Nothing in Visual Basic).</para>
        <para>When you are done when the callback, you can call this method with a null (Nothing in Visual Basic) reference to
            stop the toolkit from calling any methods when creating <see cref="T:Leadtools.RasterImage" /> objects.</para>
      </remarks>
      <example>
        <para>
          <para>The following example will show how to use the <see cref="M:Leadtools.RasterDefaults.SetRasterImageAllocateCallback(Leadtools.RasterImageAllocateCallback)" /> method to 
            stop LEADTOOLS from creating any disk images whatever. The <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> used in the example will
            internally create a new <see cref="T:Leadtools.RasterImage" /> object. By default, the user has no control on the memory
            model for this image, however, by using this callback, the user can control (and change) the memory model used.</para>
        </para>
        <code lang="VB">      Private Sub SetRasterImageAllocateCallbackExample()
         Try
            ' Set the LEADTOOLS temporary directory to a value we can watch easily
            RasterDefaults.TemporaryDirectory = "C:\Temp\LEADTOOLS"
            ' Install a callback to notify us when LEADTOOLS images are created
            ' IMPORTANT: SetRasterImageAllocateCallback is global and not thread safe. It will fire
            ' for each image being created after this point, so if the action you are performing in the
            ' callback requires synchronzation, add the required code. For what this sample is trying
            ' to accomplish, our solution is perfectly safe and no synchronization is needed.
            RasterDefaults.SetRasterImageAllocateCallback(AddressOf MyRasterImageAllocateCallback)

            ' We want conventional memory and nothing else
            Dim flags As RasterMemoryFlags = RasterMemoryFlags.Conventional Or RasterMemoryFlags.NoDisk Or RasterMemoryFlags.NoTiled
            ' Create a huge RasterImage
            Using img As RasterImage = New RasterImage(flags, 20000, 20000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
               ' Rotate it 90 degrees, this will have a memory size greater than the default
               ' size of conventional memory and cause LEADTOOLS to switch to a disk or tiled memory
               ' model. In the callback below, we instruct LEADTOOLS to only use conventional memory so the command
               ' will throw an out of memory exception as expected.
               Dim cmd As New RotateCommand
               cmd.Angle = 90 * 100
               ' Exception will be thrown inside here: No Memory since our callback
               ' will be called and we instruct LEADTOOLS to not use disk
               cmd.Run(img)
            End Using
         Catch ex As Exception
            ' Show the error
            Console.WriteLine(ex.Message)
         End Try
      End Sub

      Private Shared Function MyRasterImageAllocateCallback(ByVal data As RasterImageAllocateData) As RasterExceptionCode
         Console.WriteLine("Trying to allocate:")
         Console.WriteLine("   Memory: {0}", data.MemoryFlags)
         Console.WriteLine("   Size: {0} by {1}", data.Width, data.Height)
         Console.WriteLine("   BPP: {0}, Order: {1}", data.BitsPerPixel, data.Order)
         Console.WriteLine("   Size: {0}", data.Size)

         ' Note, all values beside MemoryFlags are read only and cannot be changed

         ' We want conventional memory and nothing else, so change this
         data.MemoryFlags = RasterMemoryFlags.Conventional Or RasterMemoryFlags.NoTiled Or RasterMemoryFlags.NoDisk

         ' If you remove the code above, the toolkit will most probably switch to disk or tiled memory model
         ' and creating this huge image will be successful, however, we only want conventional
         ' memory in this example, and out of memory exception is the expected behavior of this
         ' example

         ' Let LEADTOOLS continue with creating the image process
         ' You can return any other value to abort
         Return RasterExceptionCode.Success
      End Function</code>
        <code lang="CS">      private void SetRasterImageAllocateCallbackExample()
      {
         try
         {
            // Set the LEADTOOLS temporary directory to a value we can watch easily
            RasterDefaults.TemporaryDirectory = Path.Combine(LEAD_VARS.ImagesDir,@"Temp\LEADTOOLS");
            // Install a callback to notify us when LEADTOOLS images are created
            // IMPORTANT: SetRasterImageAllocateCallback is global and not thread safe. It will fire
            // for each image being created after this point, so if the action you are performing in the
            // callback requires synchronzation, add the required code. For what this sample is trying
            // to accomplish, our solution is perfectly safe and no synchronization is needed.
            RasterDefaults.SetRasterImageAllocateCallback(new RasterImageAllocateCallback(MyRasterImageAllocateCallback));

            // We want conventional memory and nothing else
            RasterMemoryFlags flags = RasterMemoryFlags.Conventional | RasterMemoryFlags.NoDisk | RasterMemoryFlags.NoTiled;
            // Create a huge RasterImage
            using(RasterImage img = new RasterImage(flags, 20000, 20000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0))
            {
               // Rotate it 90 degrees, this will have a memory size greater than the default
               // size of conventional memory and cause LEADTOOLS to switch to a disk or tiled memory
               // model. In the callback below, we instruct LEADTOOLS to only use conventional memory so the command
               // will throw an out of memory exception as expected.
               Leadtools.ImageProcessing.RotateCommand cmd = new Leadtools.ImageProcessing.RotateCommand();
               cmd.Angle = 90 * 100;
               // Exception will be thrown inside here: No Memory since our callback
               // will be called and we instruct LEADTOOLS to not use disk
               cmd.Run(img);
            }
         }
         catch(Exception ex)
         {
            // Show the error
            Console.WriteLine(ex.Message);
         }
      }

      private static RasterExceptionCode MyRasterImageAllocateCallback(RasterImageAllocateData data)
      {
         Console.WriteLine("Trying to allocate:");
         Console.WriteLine("   Memory: {0}", data.MemoryFlags);
         Console.WriteLine("   Size: {0} by {1}", data.Width, data.Height);
         Console.WriteLine("   BPP: {0}, Order: {1}", data.BitsPerPixel, data.Order);
         Console.WriteLine("   Size: {0}", data.Size);

         // Note, all values beside MemoryFlags are read only and cannot be changed

         // We want conventional memory and nothing else, so change this
         data.MemoryFlags = RasterMemoryFlags.Conventional | RasterMemoryFlags.NoTiled | RasterMemoryFlags.NoDisk;

         // If you remove the code above, the toolkit will most probably switch to disk or tiled memory model
         // and creating this huge image will be successful, however, we only want conventional
         // memory in this example, and out of memory exception is the expected behavior of this
         // example

         // Let LEADTOOLS continue with creating the image process
         // You can return any other value to abort
         return RasterExceptionCode.Success;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.MaximumThreadCount">
      <summary>Gets or sets the maximum number of threads used during processing. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int32" /> value that represents the maximum number of threads used during processing. Must be a value greater than or equals to 0. Default
            value is the number of CPUs/Cores in the current machine (<see cref="P:System.Environment.ProcessorCount">System.Environment.ProcessorCount</see>).</value>
      <remarks>
        <para>
          <strong>Note:</strong> this property is currently supported by LEADTOOLS for Silverlight only.</para>
        <para>Using two threads with a dual core machine or two CPUs will increase the processing speed significantly if the processing supports parallel
            processing. Currently only the LEADTOOLS JPEG2000 Encoder and Decoder are using this property. More LEADTOOLS encoders/decoders may use this
            property in the future.</para>
        <para>Possible values are:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>0</term>
            <description>
              <para>The toolkit will pick the proper number of running threads based on the number of CPUs/Cores of the current machines. Note:
            the toolkit will calculate this value internally and set it. Getting the value of this property will never return 0.</para>
            </description>
          </item>
          <item>
            <term>1</term>
            <description>Use one thread only. In this case, the toolkit will not create extra threads for the processing, instead, all operations
            will be performed in the main thread.</description>
          </item>
          <item>
            <term>2</term>
            <description>Use two threads. The toolkit will create a maximum of two threads for processing if needed.</description>
          </item>
          <item>
            <term>N</term>
            <description>Use N threads. The toolkit will create a maximum of N threads for processing if needed.</description>
          </item>
        </list>
        <para>Values less than zero will be rejected. Large values, more than the number of CPU/Cores, will not increase performance and might cause
            resource usage overload which could lead to processing failure.</para>
        <para>The <see cref="P:Leadtools.RasterDefaults.MaximumThreadCount" /> property is a global resource used by all LEADTOOLS and is not thread-safe. Make sure to
            use property thread synchronization if required.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub RasterDefaultsMaximumThreadCountExample()
         Using codecs As New RasterCodecs
            'This is a speed test using multithreading JPEG2000 load, to conduct this test correctly the machine has to have multiple CPUs/Cores.
            Dim image As RasterImage

            'This is just load the binaries.
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k"))

            'Load with MaximumThreadCount equal to the number of CPUs/Cores first.
            RasterDefaults.MaximumThreadCount = 0
            Dim time As DateTime = DateTime.Now
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k"))
            Console.WriteLine(" JPEG2000 load time {0} / thread {1}", DateTime.Now - time, RasterDefaults.MaximumThreadCount)

            'Load with MaximumThreadCount equal one.
            RasterDefaults.MaximumThreadCount = 1
            time = DateTime.Now
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k"))
            Console.WriteLine(" JPEG2000 load time {0} / thread {1}", DateTime.Now - time, RasterDefaults.MaximumThreadCount)
            image.Dispose()
         End Using
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void RasterDefaultsMaximumThreadCountExample()
      {
         using (RasterCodecs codecs = new RasterCodecs())
         {
            //This is a speed test using multithreading JPEG2000 load, to conduct this test correctly the machine has to have multiple CPUs/Cores.
            RasterImage image;
            //This is just load the binaries.
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k"));

            // Load with MaximumThreadCount equal to the number of CPUs/Cores first.
            RasterDefaults.MaximumThreadCount = 0;
            DateTime time = DateTime.Now;
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Image1.j2k"));
            Console.WriteLine(" JPEG2000 load time {0} / thread {1}", DateTime.Now - time, RasterDefaults.MaximumThreadCount);

            // Load with MaximumThreadCount equal one.
            RasterDefaults.MaximumThreadCount = 1;
            time = DateTime.Now;
            image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.j2k"));
            Console.WriteLine(" JPEG2000 load time {0} / thread {1}", DateTime.Now - time, RasterDefaults.MaximumThreadCount);
            image.Dispose();
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.XResolution">
      <summary>Gets or sets the horizontal resolution used when creating new <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that specifies the horizontal resolution used when creating new <see cref="T:Leadtools.RasterImage" /> objects.
            This value must be an integer value greater than zero.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.YResolution">
      <summary>Gets or sets the vertical resolution used when creating new <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that specifies the vertical resolution used when creating new <see cref="T:Leadtools.RasterImage" /> objects.
            This value must be an integer value greater than zero.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.DitheringMethod">
      <summary>Gets or sets a value that specifies the default dithering method to use when converting an image from 64, 48, 32, 24, or
            16 bits per pixel to 8 bits per pixel or fewer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A <see cref="T:Leadtools.RasterDitheringMethod" /> enumeration value that specifies the default dithering method to use when converting an image from 64, 48, 32, 24, or
            16 bits per pixel to 8 bits per pixel or fewer.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.MemoryFlags">
      <summary>Gets or sets a value that specifies the type of memory to use when creating new <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            A <see cref="T:Leadtools.RasterMemoryFlags" /> enumeration value that specifies the type of memory to use when creating new
            <see cref="T:Leadtools.RasterImage" /> objects.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.MemoryThreshold">
      <summary>Gets or sets a value that specifies the memory restrictions for allocating new <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            A <see cref="T:Leadtools.RasterMemoryThreshold" /> object that specifies the memory restrictions for allocating new
            <see cref="T:Leadtools.RasterImage" /> objects.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterDefaults.TemporaryDirectory">
      <summary>Gets or sets Sets a value that specifies the directory in which LEADTOOLS will create temporary files when creating
            disk-based <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            A value that specifies the directory in which LEADTOOLS will create temporary files when creating
            disk-based <see cref="T:Leadtools.RasterImage" /> objects.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.GrayscaleCommand">
      <summary>Converts a 1-, 4-, 8-, 16-, 24-, or 32-bit image to an 8-bit, 12-bit, or 16-bit grayscale image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Converting|Grayscale images|Lookup tables|LUTs|RGB</keywords>
      <remarks>
        <para>Support for 12 and 16-bit grayscale images is available only in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>The resulting image can be an 8-bit, 12-bit, or 16-bit grayscale image. Once the function is complete, the 
            <see cref="P:Leadtools.RasterImage.GrayscaleMode">RasterImage.GrayscaleMode</see> property will indicate the type of grayscale image.</para>
        <para>When converting to 12-bit or 16-bit grayscale, the <see cref="M:Leadtools.RasterImage.GetLookupTable">RasterImage.GetLookupTable</see> is not used.
            When converting to 8-bit grayscale, the <see cref="M:Leadtools.RasterImage.GetLookupTable">RasterImage.GetLookupTable</see> is used to get the RGB for each
            input pixel.  The grayscale value corresponding to that RGB triple is used in the destination image.</para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para>This example will load a 24-bit image then convert it to a grayscale image with 8, 12 and 16 bits/pixel</para>
        <code lang="VB">        Public Sub GrayscaleCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName8 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_grayscale8.jpg")
         Dim destFileName12 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_grayscale12.jpg")
         Dim destFileName16 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_grayscale16.jpg")

         ' Load the source image from disk as 24-bits/pixel
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)

         ' Check the grayscale mode
         Console.WriteLine("Grsyscale mode of original image = {0}", image.GrayscaleMode)

         ' Convert to 8-bit grayscale
         Dim command As GrayscaleCommand = New GrayscaleCommand()
         command.BitsPerPixel = 8
         command.Run(image)

         ' Check the grayscale mode
         Console.WriteLine("Grsyscale mode after grayscale command with 8 bpp = {0}", image.GrayscaleMode)

         ' Save it to disk

         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Save(image, destFileName8, RasterImageFormat.Jpeg, 8)
         image.Dispose()

         ' Load the image again this time grayscale to 12-bits/pixel
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         command.BitsPerPixel = 12
         command.Run(image)
         Console.WriteLine("Grsyscale mode after grayscale command with 12 bpp = {0}", image.GrayscaleMode)
         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Save(image, destFileName12, RasterImageFormat.Jpeg, 12)
         image.Dispose()

         ' Load the image again this time grayscale to 16-bits/pixel
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         command.BitsPerPixel = 16
         command.Run(image)
         Console.WriteLine("Grsyscale mode after grayscale command with 16 bpp = {0}", image.GrayscaleMode)

         ' When saving 16-bit jpegs, you must use lossless quality factor
         codecs.Options.Jpeg.Save.QualityFactor = 0
         codecs.Save(image, destFileName16, RasterImageFormat.Jpeg, 16)
         image.Dispose()

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GrayscaleCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName8 = Path.Combine(LEAD_VARS.ImagesDir,"Image1_grayscale8.jpg");
         string destFileName12 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_grayscale12.jpg");
         string destFileName16 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_grayscale16.jpg");

         // Load the source image from disk as 24-bits/pixel
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);

         // Check the grayscale mode
         Console.WriteLine("Grsyscale mode of original image = {0}", image.GrayscaleMode);

         // Convert to 8-bit grayscale
         GrayscaleCommand command = new GrayscaleCommand();
         command.BitsPerPixel = 8;
         command.Run(image);

         // Check the grayscale mode
         Console.WriteLine("Grsyscale mode after grayscale command with 8 bpp = {0}", image.GrayscaleMode);

         // Save it to disk

         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Save(image, destFileName8, RasterImageFormat.Jpeg, 8);
         image.Dispose();

         // Load the image again this time grayscale to 12-bits/pixel
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         command.BitsPerPixel = 12;
         command.Run(image);
         Console.WriteLine("Grsyscale mode after grayscale command with 12 bpp = {0}", image.GrayscaleMode);
         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Save(image, destFileName12, RasterImageFormat.Jpeg, 12);
         image.Dispose();

         // Load the image again this time grayscale to 16-bits/pixel
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         command.BitsPerPixel = 16;
         command.Run(image);
         Console.WriteLine("Grsyscale mode after grayscale command with 16 bpp = {0}", image.GrayscaleMode);

         // When saving 16-bit jpegs, you must use lossless quality factor
         codecs.Options.Jpeg.Save.QualityFactor = 0;
         codecs.Save(image, destFileName16, RasterImageFormat.Jpeg, 16);
         image.Dispose();

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GrayscaleCommandExample(RasterImage image, Stream destStream8, Stream destStream12, Stream destStream16)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage temp = image.Clone();
         // Check the grayscale mode
         Debug.WriteLine("Grsyscale mode of original image = {0}", image.GrayscaleMode);

         // Convert to 8-bit grayscale
         GrayscaleCommand command = new GrayscaleCommand();
         command.BitsPerPixel = 8;
         command.Run(image);

         // Check the grayscale mode
         Debug.WriteLine("Grsyscale mode after grayscale command with 8 bpp = {0}", image.GrayscaleMode);
         Debug.Assert(image.GrayscaleMode == RasterGrayscaleMode.OrderedInverse || image.GrayscaleMode == RasterGrayscaleMode.OrderedNormal);

         // Save it to disk
         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Save(image, destStream8, RasterImageFormat.Jpeg, 8);
         image.Dispose();

         // this time grayscale to 12-bits/pixel
         image = temp.Clone();
         command.BitsPerPixel = 12;
         command.Run(image);
         Debug.WriteLine("Grsyscale mode after grayscale command with 12 bpp = {0}", image.GrayscaleMode);
         codecs.Options.Jpeg.Save.QualityFactor = 2;
         codecs.Save(image, destStream12, RasterImageFormat.Jpeg, 12);
         image.Dispose();

         // this time grayscale to 16-bits/pixel
         image = temp.Clone();
         command.BitsPerPixel = 16;
         command.Run(image);
         Debug.WriteLine("Grsyscale mode after grayscale command with 16 bpp = {0}", image.GrayscaleMode);

         // When saving 16-bit jpegs, you must use lossless quality factor
         codecs.Options.Jpeg.Save.QualityFactor = 0;
         codecs.Save(image, destStream16, RasterImageFormat.Jpeg, 16);
         image.Dispose();

         // Clean Up
         temp.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayscaleCommandExample(ByVal image As RasterImage, ByVal destStream8 As Stream, ByVal destStream12 As Stream, ByVal destStream16 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim temp As RasterImage = image.Clone()
         ' Check the grayscale mode
         Debug.WriteLine("Grsyscale mode of original image = {0}", image.GrayscaleMode)

         ' Convert to 8-bit grayscale
         Dim command As GrayscaleCommand = New GrayscaleCommand()
         command.BitsPerPixel = 8
         command.Run(image)

         ' Check the grayscale mode
         Debug.WriteLine("Grsyscale mode after grayscale command with 8 bpp = {0}", image.GrayscaleMode)
         Debug.Assert(image.GrayscaleMode = RasterGrayscaleMode.OrderedInverse OrElse image.GrayscaleMode = RasterGrayscaleMode.OrderedNormal)

         ' Save it to disk
         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Save(image, destStream8, RasterImageFormat.Jpeg, 8)
         image.Dispose()

         ' this time grayscale to 12-bits/pixel
         image = temp.Clone()
         command.BitsPerPixel = 12
         command.Run(image)
         Debug.WriteLine("Grsyscale mode after grayscale command with 12 bpp = {0}", image.GrayscaleMode)
         codecs.Options.Jpeg.Save.QualityFactor = 2
         codecs.Save(image, destStream12, RasterImageFormat.Jpeg, 12)
         image.Dispose()

         ' this time grayscale to 16-bits/pixel
         image = temp.Clone()
         command.BitsPerPixel = 16
         command.Run(image)
         Debug.WriteLine("Grsyscale mode after grayscale command with 16 bpp = {0}", image.GrayscaleMode)

         ' When saving 16-bit jpegs, you must use lossless quality factor
         codecs.Options.Jpeg.Save.QualityFactor = 0
         codecs.Save(image, destStream16, RasterImageFormat.Jpeg, 16)
         image.Dispose()

         ' Clean Up
         temp.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.ImageProcessing.GrayscaleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.GrayscaleCommand.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="bitsPerPixel">Value indicating the number of bits in the destination image.  Valid values are 8, 12, or 16.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.GrayscaleCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.GrayscaleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.GrayscaleCommand.BitsPerPixel">
      <summary>Gets or sets a value indicating the number of bits in the destination image.  Valid values are 8, 12, or 16. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A value indicating the number of bits in the destination image.  Valid values are 8, 12, or 16.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CopyRectangleCommand">
      <summary>Copies a portion of an image to create another image that is the size of the rectangle that you specify. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Copying images|Palettes|Image coordinates|View perspective</keywords>
      <remarks>
        <para>This command duplicates the original image palette, if one is required in the new image.</para>
        <para>This command uses image coordinates to specify the area to be copied. Therefore, you must account for the 
            <see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see> of the image. For information about image coordinates, 
            refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>If a region is defined for the source image, the region is also copied, and the region is clipped if necessary.</para>
        <para>The <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" /> command works by creating a new image in the <see cref="P:Leadtools.ImageProcessing.CopyRectangleCommand.DestinationImage" /> property from
            the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.</para>
      </remarks>
      <example>
        <para>This example will create a new image from the top left portion of an existing image.</para>
        <code lang="VB">        Public Sub CopyRectangleCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CopyRectangleCommand.bmp")

         ' Load the source image from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Create an image from the top/right portion of this image
         Dim command As CopyRectangleCommand = New CopyRectangleCommand()
         command.Rectangle = New LeadRect(srcImage.Width \ 8, srcImage.Height \ 8, srcImage.Width \ 3, srcImage.Height \ 3)
         command.CreateFlags = RasterMemoryFlags.Conventional
         command.Run(srcImage)

         Dim destImage As RasterImage = command.DestinationImage

         ' Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CopyRectangleCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CopyRectangleCommand.bmp");

         // Load the source image from disk
         RasterImage srcImage = codecs.Load(srcFileName);

         // Create an image from the top/right portion of this image
         CopyRectangleCommand command = new CopyRectangleCommand();
         command.Rectangle = new LeadRect(
            srcImage.Width / 8,
            srcImage.Height / 8,
            srcImage.Width / 3,
            srcImage.Height / 3);
         command.CreateFlags = RasterMemoryFlags.Conventional;
         command.Run(srcImage);

         RasterImage destImage = command.DestinationImage;

         // Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CopyRectangleCommandExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create an image from the top/right portion of this image
         CopyRectangleCommand command = new CopyRectangleCommand();
         command.Rectangle = new LeadRect(
            srcImage.Width / 8,
            srcImage.Height / 8,
            srcImage.Width / 3,
            srcImage.Height / 3);
         command.CreateFlags = RasterMemoryFlags.Conventional;
         command.Run(srcImage);

         RasterImage destImage = command.DestinationImage;

         // Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CopyRectangleCommandExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create an image from the top/right portion of this image
         Dim command As CopyRectangleCommand = New CopyRectangleCommand()
         command.Rectangle = New LeadRect(srcImage.Width / 8, srcImage.Height / 8, srcImage.Width / 3, srcImage.Height / 3)
         command.CreateFlags = RasterMemoryFlags.Conventional
         command.Run(srcImage)

         Dim destImage As RasterImage = command.DestinationImage

         ' Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyRectangleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyRectangleCommand.#ctor(Leadtools.LeadRect,Leadtools.RasterMemoryFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rc">The rectangle to copy (in pixels).</param>
      <param name="createFlags">Flags that control memory allocation for the destination image.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyRectangleCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CopyRectangleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CopyRectangleCommand.DestinationImage">
      <summary>Gets the resulting image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resulting <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" /> command works by creating a new image in the <see cref="P:Leadtools.ImageProcessing.CopyRectangleCommand.DestinationImage" /> property from
            the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CopyRectangleCommand.Rectangle">
      <summary>Gets or sets the rectangle area to copy (in pixels). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The rectangle area to copy (in pixels).</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CopyRectangleCommand.CreateFlags">
      <summary>Gets or sets the flags that control memory allocation for the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Flags that control memory allocation for the destination image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterHsvColor">
      <summary>Describes a color consisting of relative intensities of hue, saturation, value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>HSV|RGB</keywords>
      <remarks>
        <p>
            For more information on how to use this structure, refer to the <see cref="M:Leadtools.RasterImage.AddColorHsvRangeToRegion(Leadtools.RasterHsvColor,Leadtools.RasterHsvColor,Leadtools.RasterRegionCombineMode)" /> method.
            </p>
        <p>
            This structure does not support signed images.
            </p>
      </remarks>
      <example>
        <para>This example converts between HSV and RGB colors and back.</para>
        <code lang="VB">        Public Sub Example()
         Dim rgb1 As RasterColor = New RasterColor(50, 100, 200)
         Console.WriteLine("rgb1 = {0}, {1}, {2}", rgb1.R, rgb1.G, rgb1.B)

         Dim hsv1 As RasterHsvColor = RasterHsvColor.FromRasterColor(rgb1)
         Console.WriteLine("hsv1 = {0}, {1}, {2}", hsv1.H, hsv1.S, hsv1.V)

         Dim hsv2 As RasterHsvColor = New RasterHsvColor(hsv1.H, hsv1.S, hsv1.V)
         Console.WriteLine("hsv2 = {0}, {1}, {2}", hsv2.H, hsv2.S, hsv2.V)

         Dim rgb2 As RasterColor = hsv2.ToRasterColor()
         Console.WriteLine("rgb2 = {0}, {1}, {2}", rgb2.R, rgb2.G, rgb2.B)
      End Sub</code>
        <code lang="CS">      public void Example()
      {
         RasterColor rgb1 = new RasterColor(50, 100, 200);
         Console.WriteLine("rgb1 = {0}, {1}, {2}", rgb1.R, rgb1.G, rgb1.B);

         RasterHsvColor hsv1 = RasterHsvColor.FromRasterColor(rgb1);
         Console.WriteLine("hsv1 = {0}, {1}, {2}", hsv1.H, hsv1.S, hsv1.V);

         RasterHsvColor hsv2 = new RasterHsvColor(hsv1.H, hsv1.S, hsv1.V);
         Console.WriteLine("hsv2 = {0}, {1}, {2}", hsv2.H, hsv2.S, hsv2.V);

         RasterColor rgb2 = hsv2.ToRasterColor();
         Console.WriteLine("rgb2 = {0}, {1}, {2}", rgb2.R, rgb2.G, rgb2.B);
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void Example()
      {
         RasterColor rgb1 = new RasterColor(50, 100, 200);
         Console.WriteLine("rgb1 = {0}, {1}, {2}", rgb1.R, rgb1.G, rgb1.B);
         RasterHsvColor hsv1 = RasterHsvColor.FromRasterColor(rgb1);
         Console.WriteLine("hsv1 = {0}, {1}, {2}", hsv1.H, hsv1.S, hsv1.V);

         RasterHsvColor hsv2 = new RasterHsvColor(hsv1.H, hsv1.S, hsv1.V);
         Console.WriteLine("hsv2 = {0}, {1}, {2}", hsv2.H, hsv2.S, hsv2.V);

         RasterColor rgb2 = hsv2.ToRasterColor();
         Console.WriteLine("rgb2 = {0}, {1}, {2}", rgb2.R, rgb2.G, rgb2.B);
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub Example()
         Dim rgb1 As RasterColor = New RasterColor(50, 100, 200)
         Console.WriteLine("rgb1 = {0}, {1}, {2}", rgb1.R, rgb1.G, rgb1.B)
         Dim hsv1 As RasterHsvColor = RasterHsvColor.FromRasterColor(rgb1)
         Console.WriteLine("hsv1 = {0}, {1}, {2}", hsv1.H, hsv1.S, hsv1.V)

         Dim hsv2 As RasterHsvColor = New RasterHsvColor(hsv1.H, hsv1.S, hsv1.V)
         Console.WriteLine("hsv2 = {0}, {1}, {2}", hsv2.H, hsv2.S, hsv2.V)

         Dim rgb2 As RasterColor = hsv2.ToRasterColor()
         Console.WriteLine("rgb2 = {0}, {1}, {2}", rgb2.R, rgb2.G, rgb2.B)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterHsvColor.FromRasterColor(Leadtools.RasterColor)">
      <summary>Creates a new instance of the <see cref="T:Leadtools.RasterHsvColor" /> from a specific <see cref="T:Leadtools.RasterColor" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="color">The source <see cref="T:Leadtools.RasterColor" />.</param>
      <returns>The <see cref="T:Leadtools.RasterHsvColor" /> object this method creates.</returns>
      <keywords>HSV|RGB</keywords>
      <remarks>
        <para>
            This method does not support signed images.
            </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterHsvColor.#ctor(Leadtools.RasterColor)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterHsvColor" /> object from the specified <see cref="T:Leadtools.RasterColor" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="color">The source color</param>
      <keywords>HSV|RGB</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="M:Leadtools.RasterHsvColor.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterHsvColor" /> object from the specified h, s, and v values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="h">The hue value.</param>
      <param name="s">The saturation value.</param>
      <param name="v">The value value.</param>
      <keywords>HSV|RGB</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="M:Leadtools.RasterHsvColor.ToRasterColor">
      <summary>Converts the <see cref="T:Leadtools.RasterHsvColor" /> object to a <see cref="T:Leadtools.RasterColor" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterColor" /> object.</returns>
      <keywords>HSV|RGB</keywords>
      <remarks>
        <para>
            This method does not support signed images.
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="P:Leadtools.RasterHsvColor.Empty">
      <summary>Represents an <see cref="T:Leadtools.RasterHsvColor" /> that is a null reference (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An <see cref="T:Leadtools.RasterHsvColor" /> that is a null reference (Nothing in Visual Basic).
            </value>
      <keywords>HSV|RGB</keywords>
      <remarks>An empty <see cref="T:Leadtools.RasterHsvColor" /> object has all its values set to zero.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterHsvColor.H">
      <summary>Gets or sets the hue value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The hue value.</value>
      <keywords>HSV|RGB</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="P:Leadtools.RasterHsvColor.S">
      <summary>Gets or sets the saturation value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The saturation value.</value>
      <keywords>HSV|RGB</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="P:Leadtools.RasterHsvColor.V">
      <summary>Gets or sets the value value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The value value.</value>
      <keywords>HSV|RGB</keywords>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="P:Leadtools.RasterHsvColor.Reserved">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            For internal use by LEADTOOLS.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterHsvColor" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterCommandProcessorCancel">
      <summary>Indicates whether or not to continue with the image processing command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterCommandProcessorCancel.None">
      <summary>
            Default, continue normally.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterCommandProcessorCancel.Command">
      <summary>
            Stop the current command, but continue with the next command in the collection.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterCommandProcessorCancel.Image">
      <summary>
            Stop the current command, but only for the current image.  Continue with the current command on the next image in
            the collection.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterCommandProcessorCancel.All">
      <summary>
            Stop the process completely, aborting all commands on all images.
            </summary>
    </member>
    <member name="T:Leadtools.RasterPaletteWindowLevelFlags">
      <summary>Indicates how the range is used to fill and type of the the lookup table and whether it contains signed or unsigned data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            These flags have a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.
            <para>You can use a bitwise OR (|) to specify one flag from each group.</para><table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate how the range is used to fill the LUT</td><td>Inside, Outside</td></tr><tr><td>Flags that indicate the LUT type</td><td>Linear, Exponential, Logarithmic, Sigmoid</td></tr><tr><td>Flags that indicate whether the LUT contains signed or unsigned data</td><td>Signed</td></tr><tr><td>Flag that indicate whether to fill the LUT only using the <paramref name="startColor" /> and <paramref name="endColor" /> colors parameters of <see cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)" /> as used in DICOM
            applications.</td><td>DicomStyle</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Inside">
      <summary>
            Fill the lookup table between Low and High. ( inside the Low...High range )
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Outside">
      <summary>
            Fill the LUT below the <paramref name="low" /> and above <paramref name="high" /> parameters of
            <see cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)" /> and everything in between.
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Linear">
      <summary>
            Lookup table is linear
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Exponential">
      <summary>
            Lookup table is exponential
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Logarithmic">
      <summary>
            Lookup table is logarithmic
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Sigmoid">
      <summary>
            Lookup table is sigmoid
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.Signed">
      <summary>
            The lookup table data is signed
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaletteWindowLevelFlags.DicomStyle">
      <summary>
            Fill using the <paramref name="startColor" /> and <paramref name="endColor" /> parameters of
            <see cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)" /> colors only.
            </summary>
    </member>
    <member name="T:Leadtools.RasterPalette">
      <summary>Encapsulates and provides support for managing image palettes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The palette is an array that contains the colors for displaying the image.</para>
        <para>For more details, refer to <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction: Palette Handling</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /> and <see cref="M:Leadtools.RasterPalette.Netscape" />.</example>
    </member>
    <member name="M:Leadtools.RasterPalette.Fixed(System.Int32)">
      <summary>Creates an array of <see cref="T:Leadtools.RasterColor" /> objects that represent the LEAD Fixed palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="count">The number of colors to add to the fixed palette.</param>
      <returns>The LEAD Fixed palette.</returns>
      <remarks>
            The number of colors specified in <paramref name="count" /> controls the type and size of the returned palette:
            <list type="table"><listheader><term>count</term><description>LEAD Fixed palette</description></listheader><item><term>2</term><description>1-bit palette, with 2 colors, black and white.</description></item><item><term>4</term><description>2-bit palette, with 4 colors.</description></item><item><term>8</term><description>3-bit palette, with 8 colors.</description></item><item><term>16</term><description>4-bit palette, with 16 colors.</description></item><item><term>32</term><description>5-bit palette, with 32 colors.</description></item><item><term>64</term><description>6-bit palette, with 64 colors.</description></item><item><term>128</term><description>7-bit palette, with 128 colors.</description></item><item><term>256</term><description>8-bit palette, with 256 colors.</description></item></list></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /></example>
    </member>
    <member name="M:Leadtools.RasterPalette.Netscape">
      <summary>Creates an array of <see cref="T:Leadtools.RasterColor" /> objects that represent the Netscape Fixed palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The Netscape Fixed palette.</value>
      <noremarks />
      <example>
        <para />
        <code lang="VB">        Public Sub NetscapePaletteExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Netscape.bmp")

         ' Load the source image as 8 bits/pixel
         Dim srcImage As RasterImage = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1)

         ' Get the netscape palette
         Dim netscapePalette As RasterColor() = RasterPalette.Netscape()

         ' Create the new palletized image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 8, srcImage.Order, srcImage.ViewPerspective, netscapePalette, IntPtr.Zero, 0)

         ' Set the dithering method.
         srcImage.DitheringMethod = RasterDitheringMethod.StevensonArce

         srcImage.Access()
         destImage.Access()

         ' Initialize the dithering process.
         srcImage.StartDithering(netscapePalette, 256)

         ' Allocate the output buffer for 8-bit data.
         Dim inBuffer As Byte() = New Byte(srcImage.Width * 3 - 1) {} ' Buffer to hold the input row.
         Dim outBuffer As Byte() = New Byte(srcImage.Width - 1) {} ' Buffer to hold the output row.

         ' Use DitherLine method to process each row in the image.
         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, inBuffer, 0, srcImage.BytesPerLine)
            srcImage.DitherLine(inBuffer, 0, outBuffer, 0)
            destImage.SetRow(i, outBuffer, 0, destImage.BytesPerLine)
            i += 1
         Loop

         ' End the dithering process.
         srcImage.StopDithering()

         destImage.Release()
         srcImage.Release()

         ' Save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 8)

         ' Cleanup
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void NetscapePaletteExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Netscape.bmp");

         // Load the source image as 8 bits/pixel
         RasterImage srcImage = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1);

         // Get the netscape palette
         RasterColor[] netscapePalette = RasterPalette.Netscape();

         // Create the new palletized image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            8,
            srcImage.Order,
            srcImage.ViewPerspective,
            netscapePalette,
            IntPtr.Zero,
            0);

         // Set the dithering method.
         srcImage.DitheringMethod = RasterDitheringMethod.StevensonArce;

         srcImage.Access();
         destImage.Access();

         // Initialize the dithering process.
         srcImage.StartDithering(netscapePalette, 256);

         // Allocate the output buffer for 8-bit data.
         byte[] inBuffer  = new byte [srcImage.Width * 3];  // Buffer to hold the input row.
         byte[] outBuffer = new byte [srcImage.Width];      // Buffer to hold the output row.

         // Use DitherLine method to process each row in the image.
         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, inBuffer, 0, srcImage.BytesPerLine);
            srcImage.DitherLine(inBuffer, 0, outBuffer, 0);
            destImage.SetRow(i, outBuffer, 0, destImage.BytesPerLine);
         }

         // End the dithering process.
         srcImage.StopDithering();

         destImage.Release();
         srcImage.Release();

         // Save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 8);

         // Cleanup
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void NetscapePaletteExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // Get the netscape palette
         RasterColor[] netscapePalette = RasterPalette.Netscape();

         // Create the new palletized image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            8,
            srcImage.Order,
            srcImage.ViewPerspective,
            netscapePalette,
            null,
            0);

         // Set the dithering method.
         srcImage.DitheringMethod = RasterDitheringMethod.StevensonArce;

         srcImage.Access();
         destImage.Access();

         // Initialize the dithering process.
         srcImage.StartDithering(netscapePalette, 256);

         // Allocate the output buffer for 8-bit data.
         byte[] inBuffer  = new byte [srcImage.Width * 3];  // Buffer to hold the input row.
         byte[] outBuffer = new byte [srcImage.Width];      // Buffer to hold the output row.

         // Use DitherLine method to process each row in the image.
         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, inBuffer, 0, srcImage.BytesPerLine);
            srcImage.DitherLine(inBuffer, 0, outBuffer, 0);
            destImage.SetRow(i, outBuffer, 0, destImage.BytesPerLine);
         }

         // End the dithering process.
         srcImage.StopDithering();

         destImage.Release();
         srcImage.Release();

         // Save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 8);

         // Cleanup
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub NetscapePaletteExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' Get the netscape palette
         Dim netscapePalette As RasterColor() = RasterPalette.Netscape()

         ' Create the new palletized image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 8, srcImage.Order, srcImage.ViewPerspective, netscapePalette, Nothing, 0)

         ' Set the dithering method.
         srcImage.DitheringMethod = RasterDitheringMethod.StevensonArce

         srcImage.Access()
         destImage.Access()

         ' Initialize the dithering process.
         srcImage.StartDithering(netscapePalette, 256)

         ' Allocate the output buffer for 8-bit data.
         Dim inBuffer As Byte() = New Byte (srcImage.Width * 3 - 1){} ' Buffer to hold the input row.
         Dim outBuffer As Byte() = New Byte (srcImage.Width - 1){} ' Buffer to hold the output row.

         ' Use DitherLine method to process each row in the image.
         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, inBuffer, 0, srcImage.BytesPerLine)
            srcImage.DitherLine(inBuffer, 0, outBuffer, 0)
            destImage.SetRow(i, outBuffer, 0, destImage.BytesPerLine)
            i += 1
         Loop

         ' End the dithering process.
         srcImage.StopDithering()

         destImage.Release()
         srcImage.Release()

         ' Save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 8)

         ' Cleanup
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)">
      <summary>Fills the user-allocated 8-bit LUT with values ranging between the <paramref name="startColor" /> and <paramref name="endColor" />
            colors according to the selected LUT type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="lookupTable">
            Pointer to an array to be updated with the 8-bit RGB quad (i.e. lookup table). 
            </param>
      <param name="startColor">Starting color value for the gradient.</param>
      <param name="endColor">Ending color value for the gradient.</param>
      <param name="low">The low value of the window width, in pixels.</param>
      <param name="high">The high value for the window width, in pixels.</param>
      <param name="lowBit">
        <para>Value indicating the low bit used for leveling.</para>
            This is normally 0 and should be less than the <paramref name="highBit" />.
            </param>
      <param name="highBit">
        <para>Value indicating the high bit used for leveling.</para>
            This should be greater than or equal to <paramref name="lowBit" /> and less than 11 for 12-bit grayscale or 15 for 16-bit grayscale.
            </param>
      <param name="minValue">The image minimum value. This value can be obtained using <see cref="T:Leadtools.ImageProcessing.Core.MinMaxValuesCommand" />.</param>
      <param name="maxValue">The image maximum value. This value can be obtained using <see cref="T:Leadtools.ImageProcessing.Core.MinMaxValuesCommand" />.</param>
      <param name="factor">
        <para>Value that indicates the factor to be applied in the method operation specified in the <paramref name="flags" /> parameter.</para>
        <para>This parameter is used only if <paramref name="flags" /> is <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Exponential</see>, 
            <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Logarithmic</see> or <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Sigmoid</see>.</para>
        <para>If <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Exponential</see> or <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Sigmoid</see> is specified,
            its value can be any integer (+/-). If <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Logarithmic</see> is specified, its value should 
            be <c>&gt;&gt;= 0</c>. If <paramref name="factor" /> = 0, the lookup table will be filled linearly.</para>
      </param>
      <param name="flags">Flags that indicate how the range is used to fill and the type of the lookup table and whether it contains
            signed or unsigned data.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Medical Toolkits</see>.</para>
        <para>Use this method to fill in the lookup table, used in <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see>,
            according to the lookup table type flag.</para>
        <para>The lookup table will be filled as follows:</para>
        <para>
          <table>
            <tr>
              <th>Inside/Outside</th>
              <th>MinValue-Low</th>
              <th>Low-High</th>
              <th>High-MaxValue</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Inside</see>
              </td>
              <td>solid black (0,0,0)</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>solid white (255,255,255)</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Outside</see>
              </td>
              <td>solid color (<paramref name="startColor" />)</td>
              <td>grayscale values from solid black (0,0,0) to solid white (255, 255, 255)</td>
              <td>solid color (<paramref name="endColor" />)</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Inside</see> | <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.DicomStyle</see></td>
              <td>None</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>None</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Outside</see> | <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.DicomStyle</see></td>
              <td>solid color (<paramref name="startColor" />)</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>solid color (<paramref name="endColor" />)</td>
            </tr>
          </table>
        </para>
        <para>To fill a 16-bit lookup table use <see cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTableExt(Leadtools.RasterColor16[],Leadtools.RasterColor16,Leadtools.RasterColor16,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)" />.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled.</para>
        <para>Images can be window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> for the <paramref name="flags" /> parameter,
            by using the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file format that supports Window Leveling.</para>
        <para>If a window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>LEADTOOLS supports two types of LUTs for 10-16-bit grayscale images (8-bit LUT and 16-bit LUT). 
            Typical grayscale image display and processing is done using an 8-bit LUT.  But, you can also use a 16-bit LUT, which offers more precision. 
            Some special video cards and monitors also support display of grayscale images using a 16-bit LUT.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub WindowLevelFillLookupTableExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WindowLevel.tif")

         ' Load an image as 8 bits/pixel
         Dim image As RasterImage = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1)

         ' change the image to be 16-bit grayscale
         Dim grayscaleCmd As GrayscaleCommand = New GrayscaleCommand(16)
         grayscaleCmd.Run(image)

         ' get the lookup table size
         Dim lookupTableSize As Integer = 1 &lt;&lt; (image.HighBit - image.LowBit + 1)

         ' get low/hight bits and minimum/maximum value of this grayscale image
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)
         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' create the lookup table
         Dim lookupTable As RasterColor() = New RasterColor(lookupTableSize - 1) {}

         Dim flags As RasterPaletteWindowLevelFlags = RasterPaletteWindowLevelFlags.Inside Or RasterPaletteWindowLevelFlags.Linear

         If image.Signed Then
            flags = flags Or RasterPaletteWindowLevelFlags.Signed
         End If

         ' initialize the fill lookup table parameters
         Dim startColor As RasterColor = RasterColor.FromKnownColor(RasterKnownColor.Red)
         Dim endColor As RasterColor = RasterColor.FromKnownColor(RasterKnownColor.Blue)

         Dim low As Integer = 23000
         Dim high As Integer = 45000
         Dim factor As Integer = 10

         ' fill the lookup table
         RasterPalette.WindowLevelFillLookupTable(lookupTable, startColor, endColor, low, high, lowBit, highBit, minVal, maxVal, factor, flags)

         ' now do window level on the image
         image.WindowLevel(lowBit, highBit, lookupTable, RasterWindowLevelMode.PaintAndProcessing)

         ' save it back on disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 16)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void WindowLevelFillLookupTableExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WindowLevel.tif");

         // Load an image as 8 bits/pixel
         RasterImage image = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1);

         // change the image to be 16-bit grayscale
         GrayscaleCommand grayscaleCmd = new GrayscaleCommand(16);
         grayscaleCmd.Run(image);

         // get the lookup table size
         int lookupTableSize = 1 &lt;&lt; (image.HighBit - image.LowBit + 1);

         // get low/hight bits and minimum/maximum value of this grayscale image
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit= minMaxBitsCmd.MaximumBit;

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);
         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // create the lookup table
         RasterColor[] lookupTable = new RasterColor[lookupTableSize];

         RasterPaletteWindowLevelFlags flags =
            RasterPaletteWindowLevelFlags.Inside |
            RasterPaletteWindowLevelFlags.Linear;

         if(image.Signed)
            flags |= RasterPaletteWindowLevelFlags.Signed;

         // initialize the fill lookup table parameters
         RasterColor startColor= RasterColor.FromKnownColor(RasterKnownColor.Red);
         RasterColor endColor = RasterColor.FromKnownColor(RasterKnownColor.Blue);

         int low = 23000;
         int high = 45000;
         int factor = 10;

         // fill the lookup table
         RasterPalette.WindowLevelFillLookupTable(
            lookupTable,
            startColor,
            endColor,
            low,
            high,
            lowBit,
            highBit,
            minVal,
            maxVal,
            factor,
            flags);

         // now do window level on the image
         image.WindowLevel(
            lowBit,
            highBit,
            lookupTable,
            RasterWindowLevelMode.PaintAndProcessing);

         // save it back on disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 16);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void WindowLevelFillLookupTableExample(RasterImage image, Stream destStream)
      {
         // image should be 8 bits/pixel
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // change the image to be 16-bit grayscale
         GrayscaleCommand grayscaleCmd = new GrayscaleCommand(16);
         grayscaleCmd.Run(image);

         // get the lookup table size
         int lookupTableSize = 1 &lt;&lt; (image.HighBit - image.LowBit + 1);

         // get low/hight bits and minimum/maximum value of this grayscale image
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit= minMaxBitsCmd.MaximumBit;

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);
         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // create the lookup table
         RasterColor[] lookupTable = new RasterColor[lookupTableSize];

         RasterPaletteWindowLevelFlags flags =
            RasterPaletteWindowLevelFlags.Inside |
            RasterPaletteWindowLevelFlags.Linear;

         if(image.Signed)
            flags |= RasterPaletteWindowLevelFlags.Signed;

         // initialize the fill lookup table parameters
         RasterColor startColor = RasterColorConverter.FromColor(Colors.Red);
         RasterColor endColor = RasterColorConverter.FromColor(Colors.Blue);

         int low = 23000;
         int high = 45000;
         int factor = 10;

         // fill the lookup table
         RasterPalette.WindowLevelFillLookupTable(
            lookupTable,
            startColor,
            endColor,
            low,
            high,
            lowBit,
            highBit,
            minVal,
            maxVal,
            factor,
            flags);

         // now do window level on the image
         image.WindowLevel(
            lowBit,
            highBit,
            lookupTable,
            RasterWindowLevelMode.PaintAndProcessing);

         // save it back on disk
         codecs.Save(image, destStream, RasterImageFormat.Tif, 16);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub WindowLevelFillLookupTableExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' image should be 8 bits/pixel
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' change the image to be 16-bit grayscale
         Dim grayscaleCmd As GrayscaleCommand = New GrayscaleCommand(16)
         grayscaleCmd.Run(image)

         ' get the lookup table size
         Dim lookupTableSize As Integer = 1 &lt;&lt; (image.HighBit - image.LowBit + 1)

         ' get low/hight bits and minimum/maximum value of this grayscale image
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer= minMaxBitsCmd.MaximumBit

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)
         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' create the lookup table
         Dim lookupTable As RasterColor() = New RasterColor(lookupTableSize - 1){}

         Dim flags As RasterPaletteWindowLevelFlags = RasterPaletteWindowLevelFlags.Inside Or RasterPaletteWindowLevelFlags.Linear

         If image.Signed Then
            flags = flags Or RasterPaletteWindowLevelFlags.Signed
         End If

         ' initialize the fill lookup table parameters
         Dim startColor As RasterColor = RasterColorConverter.FromColor(Colors.Red)
         Dim endColor As RasterColor = RasterColorConverter.FromColor(Colors.Blue)

         Dim low As Integer = 23000
         Dim high As Integer = 45000
         Dim factor As Integer = 10

         ' fill the lookup table
         RasterPalette.WindowLevelFillLookupTable(lookupTable, startColor, endColor, low, high, lowBit, highBit, minVal, maxVal, factor, flags)

         ' now do window level on the image
         image.WindowLevel(lowBit, highBit, lookupTable, RasterWindowLevelMode.PaintAndProcessing)

         ' save it back on disk
         codecs.Save(image, destStream, RasterImageFormat.Tif, 16)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterPalette.WindowLevelFillLookupTableExt(Leadtools.RasterColor16[],Leadtools.RasterColor16,Leadtools.RasterColor16,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)">
      <summary>Fills the user-allocated 16-bit LUT with values ranging between the <paramref name="startColor" /> and <paramref name="endColor" />
            colors according to the selected LUT type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <param name="lookupTable">
            Pointer to an array to be updated with the 16-bit RGB quad (i.e. lookup table).
            </param>
      <param name="startColor">Starting color value for the gradient.</param>
      <param name="endColor">Ending color value for the gradient.</param>
      <param name="low">The low value of the window width, in pixels.</param>
      <param name="high">The high value for the window width, in pixels.</param>
      <param name="lowBit">
        <para>Value indicating the low bit used for leveling.</para>
            This is normally 0 and should be less than the <paramref name="highBit" />.
            </param>
      <param name="highBit">
        <para>Value indicating the high bit used for leveling.</para>
            This should be greater than or equal to <paramref name="lowBit" /> and less than 11 for 12-bit grayscale or 15 for 16-bit grayscale.
            </param>
      <param name="minValue">The image minimum value. This value can be obtained using <see cref="T:Leadtools.ImageProcessing.Core.MinMaxValuesCommand" />.</param>
      <param name="maxValue">The image maximum value. This value can be obtained using <see cref="T:Leadtools.ImageProcessing.Core.MinMaxValuesCommand" />.</param>
      <param name="factor">
        <para>Value that indicates the factor to be applied in the method operation specified in the <paramref name="flags" /> parameter.</para>
        <para>This parameter is used only if <paramref name="flags" /> is <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Exponential</see>, 
            <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Logarithmic</see> or <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Sigmoid</see>.</para>
        <para>If <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Exponential</see> or <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Sigmoid</see> is specified,
            its value can be any integer (+/-). If <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Logarithmic</see> is specified, its value should 
            be <c>&gt;&gt;= 0</c>. If <paramref name="factor" /> = 0, the lookup table will be filled linearly.</para>
      </param>
      <param name="flags">Flags that indicate how the range is used to fill and the type of the lookup table and whether it contains
            signed or unsigned data.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Medical Toolkits</see>.</para>
        <para>Use this method to fill in the lookup table, used in <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevelExtCommand</see>,
            according to the lookup table type flag.</para>
        <para>The lookup table will be filled as follows:</para>
        <para>
          <table>
            <tr>
              <th>Inside/Outside</th>
              <th>MinValue-Low</th>
              <th>Low-High</th>
              <th>High-MaxValue</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Inside</see>
              </td>
              <td>solid black (0,0,0)</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>solid white (255,255,255)</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Outside</see>
              </td>
              <td>solid color (<paramref name="startColor" />)</td>
              <td>grayscale values from solid black (0,0,0) to solid white (255, 255, 255)</td>
              <td>solid color (<paramref name="endColor" />)</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Inside</see> | <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.DicomStyle</see></td>
              <td>None</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>None</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.Outside</see> | <see cref="T:Leadtools.RasterPaletteWindowLevelFlags">RasterPaletteWindowLevelFlags.DicomStyle</see></td>
              <td>solid color (<paramref name="startColor" />)</td>
              <td>color gradient ranging from <paramref name="startColor" /> to <paramref name="endColor" /></td>
              <td>solid color (<paramref name="endColor" />)</td>
            </tr>
          </table>
        </para>
        <para>To fill an 8-bit lookup table use <see cref="M:Leadtools.RasterPalette.WindowLevelFillLookupTable(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.RasterColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterPaletteWindowLevelFlags)" />.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled.</para>
        <para>Images can be window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">RasterImage.WindowLevel</see> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> for the <paramref name="flags" /> parameter,
            by using the <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" /> or by loading an image from a file format that supports Window Leveling.</para>
        <para>If a window-leveled image is saved as any other file format, the image data will be converted before being saved. For more 
            information, refer to <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>LEADTOOLS supports two types of LUTs for 10-16-bit grayscale images (8-bit LUT and 16-bit LUT). 
            Typical grayscale image display and processing is done using an 8-bit LUT.  But, you can also use a 16-bit LUT, which offers more precision. 
            Some special video cards and monitors also support display of grayscale images using a 16-bit LUT.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub WindowLevelFillLookupTableExampleExt()
         Dim codecs As RasterCodecs = New RasterCodecs()

         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WindowLevel.tif")

         ' Load an image as 16-bit grayscale
         Dim image As RasterImage = codecs.Load(srcFileName, 16, CodecsLoadByteOrder.Gray, 1, 1)

         ' get the lookup table size
         Dim lookupTableSize As Integer = 1 &lt;&lt; (image.HighBit - image.LowBit + 1)

         ' get low/hight bits and minimum/maximum value of this grayscale image
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)
         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' create the lookup table
         Dim lookupTable As RasterColor16() = New RasterColor16(lookupTableSize - 1) {}

         Dim flags As RasterPaletteWindowLevelFlags = RasterPaletteWindowLevelFlags.Inside Or RasterPaletteWindowLevelFlags.Linear

         If image.Signed Then
            flags = flags Or RasterPaletteWindowLevelFlags.Signed
         End If

         ' initialize the fill lookup table parameters
         Dim startColor As RasterColor16 = New RasterColor16(RasterColor16.MaximumComponent, 0, 0) ' Red
         Dim endColor As RasterColor16 = New RasterColor16(0, 0, RasterColor16.MaximumComponent) ' Blue

         Dim low As Integer = 23000
         Dim high As Integer = 45000
         Dim factor As Integer = 10

         ' fill the lookup table
         RasterPalette.WindowLevelFillLookupTableExt(lookupTable, startColor, endColor, low, high, lowBit, highBit, minVal, maxVal, factor, flags)

         ' now do window level on the image
         image.WindowLevelExt(lowBit, highBit, lookupTable, RasterWindowLevelMode.PaintAndProcessing)

         ' save it back on disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 16)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void WindowLevelFillLookupTableExtExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_WindowLevel.tif");

         // Load an image as 16 bit grayscale
         RasterImage image = codecs.Load(srcFileName, 16, CodecsLoadByteOrder.Gray, 1, 1);

         // get the lookup table size
         int lookupTableSize = 1 &lt;&lt; (image.HighBit - image.LowBit + 1);

         // get low/hight bits and minimum/maximum value of this grayscale image
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit= minMaxBitsCmd.MaximumBit;

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);
         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // create the lookup table
         RasterColor16[] lookupTable = new RasterColor16[lookupTableSize];

         RasterPaletteWindowLevelFlags flags =
            RasterPaletteWindowLevelFlags.Inside |
            RasterPaletteWindowLevelFlags.Linear;

         if(image.Signed)
            flags |= RasterPaletteWindowLevelFlags.Signed;

         // initialize the fill lookup table parameters
         RasterColor16 startColor = new RasterColor16(RasterColor16.MaximumComponent, 0, 0); // red
         RasterColor16 endColor = new RasterColor16(0, 0, RasterColor16.MaximumComponent); // blue

         int low = 23000;
         int high = 45000;
         int factor = 10;

         // fill the lookup table
         RasterPalette.WindowLevelFillLookupTableExt(
            lookupTable,
            startColor,
            endColor,
            low,
            high,
            lowBit,
            highBit,
            minVal,
            maxVal,
            factor,
            flags);

         // now do window level on the image
         image.WindowLevelExt(
            lowBit,
            highBit,
            lookupTable,
            RasterWindowLevelMode.PaintAndProcessing);

         // save it back on disk
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 16);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void WindowLevelFillLookupTableExtExample(RasterImage image, Stream destStream)
      {
         // image should be 16 bit grayscale
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // get the lookup table size
         int lookupTableSize = 1 &lt;&lt; (image.HighBit - image.LowBit + 1);

         // get low/hight bits and minimum/maximum value of this grayscale image
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit= minMaxBitsCmd.MaximumBit;

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);
         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // create the lookup table
         RasterColor16[] lookupTable = new RasterColor16[lookupTableSize];

         RasterPaletteWindowLevelFlags flags =
            RasterPaletteWindowLevelFlags.Inside |
            RasterPaletteWindowLevelFlags.Linear;

         if(image.Signed)
            flags |= RasterPaletteWindowLevelFlags.Signed;

         // initialize the fill lookup table parameters
         RasterColor16 startColor = new RasterColor16(RasterColor16.MaximumComponent, 0, 0); // red
         RasterColor16 endColor = new RasterColor16(0, 0, RasterColor16.MaximumComponent); // blue

         int low = 23000;
         int high = 45000;
         int factor = 10;

         // fill the lookup table
         RasterPalette.WindowLevelFillLookupTableExt(
            lookupTable,
            startColor,
            endColor,
            low,
            high,
            lowBit,
            highBit,
            minVal,
            maxVal,
            factor,
            flags);

         // now do window level on the image
         image.WindowLevelExt(
            lowBit,
            highBit,
            lookupTable,
            RasterWindowLevelMode.PaintAndProcessing);

         // save it back on disk
         codecs.Save(image, destStream, RasterImageFormat.Tif, 16);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub WindowLevelFillLookupTableExtExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' image should be 16 bit grayscale
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' get the lookup table size
         Dim lookupTableSize As Integer = 1 &lt;&lt; (image.HighBit - image.LowBit + 1)

         ' get low/hight bits and minimum/maximum value of this grayscale image
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer= minMaxBitsCmd.MaximumBit

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)
         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' create the lookup table
         Dim lookupTable As RasterColor16() = New RasterColor16(lookupTableSize - 1){}

         Dim flags As RasterPaletteWindowLevelFlags = RasterPaletteWindowLevelFlags.Inside Or RasterPaletteWindowLevelFlags.Linear

         If image.Signed Then
            flags = flags Or RasterPaletteWindowLevelFlags.Signed
         End If

         ' initialize the fill lookup table parameters
         Dim startColor As RasterColor16 = New RasterColor16(RasterColor16.MaximumComponent, 0, 0) ' red
         Dim endColor As RasterColor16 = New RasterColor16(0, 0, RasterColor16.MaximumComponent) ' blue

         Dim low As Integer = 23000
         Dim high As Integer = 45000
         Dim factor As Integer = 10

         ' fill the lookup table
         RasterPalette.WindowLevelFillLookupTableExt(lookupTable, startColor, endColor, low, high, lowBit, highBit, minVal, maxVal, factor, flags)

         ' now do window level on the image
         image.WindowLevelExt(lowBit, highBit, lookupTable, RasterWindowLevelMode.PaintAndProcessing)

         ' save it back on disk
         codecs.Save(image, destStream, RasterImageFormat.Tif, 16)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="T:Leadtools.RasterExceptionCode">
      <summary>Used as a value for the <see cref="P:Leadtools.RasterException.Code">RasterException.Code</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Success">
      <summary>
            Successful.  No errors.
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Failure">
      <summary>
            Not successful
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SuccessDelete">
      <summary>
            Successful. Delete file before quitting
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SuccessRetry">
      <summary>
            Successful. Retry doing the failed operation
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SuccessPartialFailure">
      <summary>
            Method called recursively. A least one call was successful, but some failed
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidParameter">
      <summary>
            Invalid parameter passed
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidStructSize">
      <summary>
            The structure size is invalid
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BitsPerPixel">
      <summary>
            Invalid bits/pixel
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidRange">
      <summary>
            Invalid width/height
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoImage">
      <summary>
            Invalid bitmap handle
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NullPointer">
      <summary>
            A NULL pointer was passed
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NotInitialized">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SignedDataNotSupported">
      <summary>
            Signed image data not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BufferTooSmall">
      <summary>
            The buffer size is too small
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Exception">
      <summary>
            An unspecified exception occurred - could be memory access violations
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NothingToDo">
      <summary>
            There is nothing to do.  No items was found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ImageEmpty">
      <summary>
            Image is empty
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Internal">
      <summary>
            Internal error
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.QFactor">
      <summary>
            Invalid QFactor specified
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidHandle">
      <summary>
            Invalid handle
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadPointer">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Gray32Unsupported">
      <summary>
            32-bit Grayscale images not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidLutLength">
      <summary>
            The LUT length is invalid. LUT Length should be 1 &lt;&lt; (<see cref="P:Leadtools.RasterImage.HighBit" /> - <see cref="P:Leadtools.RasterImage.LowBit" /> + 1)
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidDib">
      <summary>
            The DIB is invalid
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BitmapFormatUnsupported">
      <summary>
            The bitmap format is not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SuccessAbort">
      <summary>
            Method successful. You can quit now
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.UserAbort">
      <summary>
            User has aborted operation
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NormalAbort">
      <summary>
            Escape key pressed - or user aborted operation
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoMemory">
      <summary>
            Not enough memory available
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MemoryTooLow">
      <summary>
            Not enough memory available
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FeatureNotSupported">
      <summary>
            Feature not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DocumentNotEnabled">
      <summary>
            Document capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MedicalNotEnabled">
      <summary>
            Medical Express capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ExtGrayNotEnabled">
      <summary>
            Extended grayscale support is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ProNotEnabled">
      <summary>
            LEADTOOLS Pro Features are not enabled
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.LzwLocked">
      <summary>
            The LZW capabilities are locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JbigNotEnabled">
      <summary>
            JBIG capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jbig2Locked">
      <summary>
            JBIG2 file format is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kLocked">
      <summary>
            J2K support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfNotEnabled">
      <summary>
            PDF capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CmwLocked">
      <summary>
            The CMW support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.AbcLocked">
      <summary>
            ABC file format is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MedicalNetNotEnabled">
      <summary>
            Medical Network Express capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NitfLocked">
      <summary>
            NITF support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DicomNotEnabled">
      <summary>
            DICOM support is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JpipLocked">
      <summary>
            JPEP support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FormsLocked">
      <summary>
            Forms support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DocumentWritersNotEnabled">
      <summary>
            Document Writers capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MediaWriterNotEnabled">
      <summary>
            Media writer capability is required to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DocumentWritersPdfNotEnabled">
      <summary>
            Document Writer PDF support is locked
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.LeadPrinterNotEnabled">
      <summary>
            LEADTOOLS Printer Driver capability is required to use this function
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.LeadPrinterServerNotEnabled">
      <summary>
            LEADTOOLS Printer Driver Server is required to use this function
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileNotFound">
      <summary>
            File not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileOpen">
      <summary>
            Not able to open file
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileWrite">
      <summary>
            Error writing file
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileGone">
      <summary>
            File not present - abort
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileRead">
      <summary>
            Error reading file
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileSeek">
      <summary>
            Error seeking to position 
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DiskIsFull">
      <summary>
            not enough disk space
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileReadOnly">
      <summary>
            File is read-only. Cannot open file with write access
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileFormat">
      <summary>
            Invalid file format
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidFileName">
      <summary>
            Invalid filename specified
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FileCreate">
      <summary>
            Error creating file
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DxfCodecMissing">
      <summary>
            The DXF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JbigCodecMissing">
      <summary>
            The JBIG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.WmfCodecMissing">
      <summary>
            WMF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CmwCodecMissing">
      <summary>
            CMW codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CmpCodecMissing">
      <summary>
            CMP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FaxCodecMissing">
      <summary>
            FAX codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfCodecMissing">
      <summary>
            PDF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TifCodecMissing">
      <summary>
            TIF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DcfCodecMissing">
      <summary>
            DCF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DcrCodecMissing">
      <summary>
            DCR codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.KdcCodecMissing">
      <summary>
            KDC codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DcsCodecMissing">
      <summary>
            DCS codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.AbcCodecMissing">
      <summary>
            ABC codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.AbiCodecMissing">
      <summary>
            ABI (ABIC) codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jb2CodecMissing">
      <summary>
            JB2 (JBIG2) codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kCodecMissing">
      <summary>
            J2K codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PngCodecMissing">
      <summary>
            PNG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ColorConversionDllMissing">
      <summary>
            Color conversion DLL is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.VectorKernelMissing">
      <summary>
            Vector kernel DLL is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SegmentationDllMissing">
      <summary>
            Segmentation DLL is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.AnnotationDllMissing">
      <summary>
            Annotation DLL is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ImageProcessingDllMissing">
      <summary>
            Image Processing DLL is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BmpCodecMissing">
      <summary>
            BMP codec is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.RawCodecMissing">
      <summary>
            RAW codec is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ClrCodecMissing">
      <summary>
            Leadtools.ColorConversion.dll assembly is not loaded
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.RtfCodecMissing">
      <summary>
            RTF codec is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfEngineMissing">
      <summary>
            Leadtools.PdfEngine.dll assembly is not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CgmCodecMissing">
      <summary>
            CGM codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ClpCodecMissing">
      <summary>
            CLP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CrwCodecMissing">
      <summary>
            CRW codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DrwCodecMissing">
      <summary>
            DRW codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DwfCodecMissing">
      <summary>
            DWF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DwgCodecMissing">
      <summary>
            DWG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.EpsCodecMissing">
      <summary>
            EPS codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FitCodecMissing">
      <summary>
            FIT codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.FlcCodecMissing">
      <summary>
            FLC codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.GifCodecMissing">
      <summary>
            GIF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.HdpCodecMissing">
      <summary>
            HDP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.IffCodecMissing">
      <summary>
            IFF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jp2CodecMissing">
      <summary>
            JP2 codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JpmCodecMissing">
      <summary>
            JPM codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CinCodecMissing">
      <summary>
            CIN codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.LmbCodecMissing">
      <summary>
            LMB codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MifCodecMissing">
      <summary>
            MIF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MngCodecMissing">
      <summary>
            MNG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MspCodecMissing">
      <summary>
            MSP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NtfCodecMissing">
      <summary>
            NTF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PcdCodecMissing">
      <summary>
            PCD codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PcxCodecMissing">
      <summary>
            PCX codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PsdCodecMissing">
      <summary>
            PSD codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PspCodecMissing">
      <summary>
            PSP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.RasCodecMissing">
      <summary>
            RAS codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SffCodecMissing">
      <summary>
            SFF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SgiCodecMissing">
      <summary>
            SGI codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SgmCodecMissing">
      <summary>
            SGM codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ShpCodecMissing">
      <summary>
            SHP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SnpCodecMissing">
      <summary>
            SNP codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SvgCodecMissing">
      <summary>
            SVG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TdbCodecMissing">
      <summary>
            TDB codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TgaCodecMissing">
      <summary>
            TGA codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.VecCodecMissing">
      <summary>
            VEC codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.VpgCodecMissing">
      <summary>
            VPG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.WfxCodecMissing">
      <summary>
            WFX codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.WmzCodecMissing">
      <summary>
            WMZ codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.WpgCodecMissing">
      <summary>
            WPG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.XpsCodecMissing">
      <summary>
            XPS codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.XwdCodecMissing">
      <summary>
            XWD codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ItgCodecMissing">
      <summary>
            ITG codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.VffCodecMissing">
      <summary>
            VFF codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JxrCodecMissing">
      <summary>
            JXR codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.JlsCodecMissing">
      <summary>
            JLS codec is needed to use this method
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoOverlay">
      <summary>
            The overlay does not exist
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.OverlayIndex">
      <summary>
            Something is wrong with the overlay index
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.WindowSize">
      <summary>
            Invalid window size
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidCodecName">
      <summary>
            Invalid codec name
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PageNotFound">
      <summary>
            Page not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DeleteLastPage">
      <summary>
            You cannot delete a page from a file containing only one page
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ImageType">
      <summary>
            Image format recognized, but sub-type not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadDecodeState">
      <summary>
            premature end-of-line code
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.LayerMissing">
      <summary>
            The PSD Layer is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.OutputType">
      <summary>
            Invalid compression format
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.VersionNumber">
      <summary>
            bad version number
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ChannelMissing">
      <summary>
            The PSD Channel is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jp2Failure">
      <summary>
            Error in JP2 Box values
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jp2Signature">
      <summary>
            The header does not match the JP2 signature - not a JP2 file
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.Jp2Unsupported">
      <summary>
            JP2 file has a feature that is unsupported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kFailure">
      <summary>
            Invalid save options were specified to the encoder
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kNoSoc">
      <summary>
            File header does not contain SOC marker
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kNoSot">
      <summary>
            File contains complete header but no compressed image data
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kInformationSet">
      <summary>
            Invalid save options were specified or file includes invalid encoded values
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kLowTargetSize">
      <summary>
            Compression ratio, target file size, or tile size was too small for encoder
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kDecompositionLevel">
      <summary>
            Specified Wavelet decomposition level was too high
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kMarkerValue">
      <summary>
            Decoder could not translate J2K marker - file is corrupt or invalid
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kUnsupported">
      <summary>
            J2K file has image with more than 30 bits per component
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.J2kBoxNotAvailable">
      <summary>
            The required J2K box is not available
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoStamp">
      <summary>
            Stamp not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidStampSize">
      <summary>
            Stamp size is too big or invalid bits/pixel, etc
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadStamp">
      <summary>
            Stamp is present but data is corrupted
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadMarker">
      <summary>
            Bad JPEG marker
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadResyncMarker">
      <summary>
            Bad JPEG Resync marker
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MarkerSizeTooBig">
      <summary>
            The size of the JPEG marker cannot exceed 64K
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MarkerMissing">
      <summary>
            The required JPEG marker is missing
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MarkerIndex">
      <summary>
            The marker index is invalid (too big)
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.AudioMissing">
      <summary>
            The audio data is not present
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ExtensionsMissing">
      <summary>
            This file does not contain Exif extensions
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoChange">
      <summary>
            The image has not changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ImageSize">
      <summary>
            Image size not sufficient
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoMessage">
      <summary>
            There is no message
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidPassword">
      <summary>
            Invalid password
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NotEnoughImages">
      <summary>
            Not enough images
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.UnknownCompression">
      <summary>
            Unknown compression format
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CompactAborted">
      <summary>
            The compact method was finished without copying all the pages
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.BadTag">
      <summary>
            Bad TIFF tag
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TagMissing">
      <summary>
            Tag not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CUBusy">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidTableType">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidBuffer">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MissingTileData">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidQValue">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidData">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidCompressedType">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidComponentNumber">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidPixelType">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidPixelSampling">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidImageDimensions">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidTileDimension">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidPixBufferDimensions">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.SegmentOverflow">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidSubsampling">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidQVisTable">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidDCCodeTable">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidACCodeTable">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InsufficientData">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MissingFunctionPointer">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TooManyDCCodeTables">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TooManyACCodeTables">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidSubImage">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidAbortion">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CUNoSupport">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CUFailure">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CompressedDataFailure">
      <summary>
            Internal error - call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfFileEncrypted">
      <summary>
            PDF Error - The file is encrypted and password is not supplied
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfInvalidPassword">
      <summary>
            PDF Error - Invalid password specified
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfFaxNotEnabled">
      <summary>
            PDF Error - FAX support is required for this operation
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfJpegNotEnabled">
      <summary>
            PDF Error - JPEG support is required for this operation
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfInvDocStructuringComments">
      <summary>
            PDF Error - Invalid Document Structuring comments (Ps and EPS)
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfFontsDirectoryNotFound">
      <summary>
            PDF Error - Could not find Fonts directory
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfCannotEditFile">
      <summary>
            PDF Error - Cannot insert, delete, append or replace pages
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfBadContent">
      <summary>
            PDF Error - File is corrupted
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PdfBadInitializationFiles">
      <summary>
            PDF Error - Either the files required for initializing the PDF engine were not found or they were found but incorrect
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidColorspace">
      <summary>
            Color Conversion Error - Invalid colorspace
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidFormat">
      <summary>
            Color Conversion - Invalid format
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.UnsupportedMethod">
      <summary>
            Color Conversion - Method not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.OpeningProfile">
      <summary>
            Color Conversion - Error opening profile
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidColorProfile">
      <summary>
            Color Conversion - Invalid color profile
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.UVNotMultiples">
      <summary>
            Color Conversion - U and V not multiples
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoNonplanarVerticalSubsamplingSupported">
      <summary>
            No non planar vertical sub sampling supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PlanarAlignmentNotSupported">
      <summary>
            Color Conversion - Planar alignment not supported
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.UnsupportedConversion">
      <summary>
            Color Conversion - Unsupported conversion
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TruncateHeight">
      <summary>
            Color Conversion - Truncate height
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TruncateWidth">
      <summary>
            Color Conversion - Truncate width
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.TruncateWidthAndHeight">
      <summary>
            Color Conversion - Truncate width and height
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ICCUnknownTag">
      <summary>
            Color Conversion - Unknown ICC profile Tag
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ICCUnknownType">
      <summary>
            Color Conversion - Unknown ICC profile Type
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ICCUnknownTagAndType">
      <summary>
            Color Conversion - Unknown ICC profile Tag and Type
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.InvalidICCProfile">
      <summary>
            Color Conversion - Invalid ICC profile
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.ICCImageNotSupported">
      <summary>
            Color Conversion - Invalid ICC profile
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.NoProfile">
      <summary>
            Color Conversion - The ICC profile was not found
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.CorruptProfile">
      <summary>
            Color Conversion - The ICC profile was invalid
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.DecodingProfile">
      <summary>
            Color Conversion - An error has occured while decoding the profile
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessBadState">
      <summary>
            Preprocessing engine is in bad state. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessInit">
      <summary>
            Preprocessing engine initialization error or no appropriate license. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessCantScaleEdgeSteps">
      <summary>
            Preprocessing engine attempted to scale an edge steps format word. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessWrongWord">
      <summary>
            Preprocessing engine word does not have blobs of that type. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessCantFindPointBand">
      <summary>
            Preprocessing engine cannot find point band. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessUnmatchedBlockRight">
      <summary>
            Preprocessing engine unmatched block right. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessUnmatchedBlockLeft">
      <summary>
            Preprocessing engine unmatched block left. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessUnmatchedBlockRightRemaining">
      <summary>
            Preprocessing engine unmatched block right remaining. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessCodesIllegalsum">
      <summary>
            Preprocessing engine illegal sum of chain codes. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalSampleSize">
      <summary>
            Preprocessing engine illegal sample size. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalCircularSpec">
      <summary>
            Preprocessing engine illegal circular/linear specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalEssentialSpec">
      <summary>
            Preprocessing engine illegal essential/non-essential specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalMinMaxSpec">
      <summary>
            Preprocessing engine illegal min or max specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalSampleCount">
      <summary>
            Preprocessing engine illegal sample count. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalMeadnSpec">
      <summary>
            Preprocessing engine illegal prototype mean. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalVarianceSpec">
      <summary>
            Preprocessing engine illegal prototype variance. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalDistribution">
      <summary>
            Preprocessing engine illegal prototype distribution. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalSignificanceSpec">
      <summary>
            Preprocessing engine illegal significance specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalStyleSpec">
      <summary>
            Preprocessing engine illegal prototype style specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalFloat">
      <summary>
            Preprocessing engine illegal float specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalNumSets">
      <summary>
            Preprocessing engine illegal number of feature sets. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalShortName">
      <summary>
            Preprocessing engine illegal short name for a feature. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalFeatureParam">
      <summary>
            Preprocessing engine illegal feature parameter spec. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalNumFeatures">
      <summary>
            Preprocessing engine illegal number of features in set. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessHeapFull">
      <summary>
            Preprocessing engine heap size exceeded. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessIllegalAmbiguitySpecification">
      <summary>
            Preprocessing engine illegal ambiguity specification. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessInvalidUnicodeCharset">
      <summary>
            Preprocessing engine invalid Unicode character set. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessBadOkMode">
      <summary>
            Preprocessing engine bad OK mode. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessBadRejectMode">
      <summary>
            Preprocessing engine bad reject mode. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessReadingTemplateFile">
      <summary>
            Preprocessing engine error reading template file. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessReadingEdgesFile">
      <summary>
            Preprocessing engine error while reading edges from file. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.PreProcessCantOpenChoiceFile">
      <summary>
            Preprocessing engine could not open choice file. Call LEAD
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MedicalViewerActionNotAdded">
      <summary>
            The sepcified action is not added to the Image Viewer Cell
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.MedicalViewerActionAlreadyAdded">
      <summary>
            The sepcified action is already added to the Image Viewer Cell
            </summary>
    </member>
    <member name="F:Leadtools.RasterExceptionCode.KernelExpired">
      <summary>
            The LEADTOOLS Kernel has expired
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.ClearCommand">
      <summary>Sets all bits to 0 in the specified image, making it a black image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Black|Clearing|Setting all bits to 0</keywords>
      <remarks>
        <para>Sets all bits to 0, in the specified image.  If the image has a palette, all pixels will be the color of the first palette entry.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example will clear an image before saving it back to disk.</para>
        <code lang="VB">      Public Sub ClearCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_clear.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Clear the image
         Dim cmd As ClearCommand = New ClearCommand()
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ClearCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_clear.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Clear the image
         ClearCommand cmd = new ClearCommand();
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            destFileName,
            RasterImageFormat.Bmp,
            24);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ClearCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Clear the image
         ClearCommand cmd = new ClearCommand();
         cmd.Run(image);

         // Save the image to disk
         codecs.Save(
            image,
            destStream,
            RasterImageFormat.Bmp,
            24);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ClearCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Clear the image
         Dim cmd As ClearCommand = New ClearCommand()
         cmd.Run(image)

         ' Save the image to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ClearCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ClearCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ClearCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.RasterImageInformationFlags">
      <summary>Indicates which members of the <see cref="T:Leadtools.RasterImageMemoryInformation" /> structure are valid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.Memory">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.MemoryFlags" /> property is valid
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.TileSize">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.TileSize" /> property is valid
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.TotalTiles">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.TotalTiles" /> property is valid
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.ConventionalTiles">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.ConventionalTiles" /> property is valid
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.MaximumTileViews">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.MaximumTileViews" /> property is valid
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageInformationFlags.TileViews">
      <summary>
        <see cref="P:Leadtools.RasterImageMemoryInformation.TileViews" /> property is valid
            </summary>
    </member>
    <member name="T:Leadtools.RasterImageMemoryInformation">
      <summary>Stores information about the memory allocated for the <see cref="T:Leadtools.RasterImage" />'s data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.Empty">
      <summary>Creates a new instance of the <see cref="T:Leadtools.RasterImageMemoryInformation" /> structure with all members set to 0. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterImageMemoryInformation" /> object this property creates.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.MemoryFlags">
      <summary>Gets or sets type of memory allocated for the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A combination of the <see cref="T:Leadtools.RasterMemoryFlags" /> enumeration members that specify the type of memory allocated
            for the image data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.TileSize">
      <summary>Gets or sets the size for the tile. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the size for the tile.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.TotalTiles">
      <summary>Gets or sets the number of tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifes the number of tiles.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.ConventionalTiles">
      <summary>Gets or sets the number of conventional tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the number of conventional tiles.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.MaximumTileViews">
      <summary>Gets or sets maximum number of swap buffers for the disk tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifes maximum number of swap buffers for the disk tiles.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.TileViews">
      <summary>Gets or sets the number of swap buffers for the disk tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifes the number of swap buffers for the disk tiles.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="P:Leadtools.RasterImageMemoryInformation.Flags">
      <summary>Gets or sets a value that specify which members of the structure are valid. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A combination of the <see cref="T:Leadtools.RasterImageInformationFlags" /> enumeration members that specify which members
            of the structure are valid.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.MemoryInformation" />.</example>
    </member>
    <member name="T:Leadtools.RasterGrayscaleMode">
      <summary>Indicates the kind of grayscale palette, if any, that an image has. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterGrayscaleMode.None">
      <summary>
            Not grayscale
            </summary>
    </member>
    <member name="F:Leadtools.RasterGrayscaleMode.OrderedNormal">
      <summary>
            Normally ordered grayscale (dark to light)
            </summary>
    </member>
    <member name="F:Leadtools.RasterGrayscaleMode.OrderedInverse">
      <summary>
            Reverse ordered grayscale (light to dark)
            </summary>
    </member>
    <member name="F:Leadtools.RasterGrayscaleMode.NotOrdered">
      <summary>
            Unordered grayscale
            </summary>
    </member>
    <member name="T:Leadtools.RasterImageChangedFlags">
      <summary>Indicates the type(s) of change that has occurred in a <see cref="T:Leadtools.RasterImage">RasterImage</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.None">
      <summary>
            No change
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Data">
      <summary>
            Image data changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Size">
      <summary>
            Dimension (width and/or height) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.BitsPerPixel">
      <summary>
            Bits/Pixel changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.ViewPerspective">
      <summary>
            View perspective changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Order">
      <summary>
            Color order changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Palette">
      <summary>
            Palette changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.LookupTablePalette">
      <summary>
            Palette lookup table (LUT) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Region">
      <summary>
            Region changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Resolution">
      <summary>
            Resolution (DPI) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.LowHighBit">
      <summary>
            Low bit and/or High bit changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.MinMaxValue">
      <summary>
            Minimum value and/or maximum value changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.NoRegionClip">
      <summary>
            For internal use
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.PaintLookupTable">
      <summary>
            Paint lookup table (LUT) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.PaintParameters">
      <summary>
            Paint Parameters changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.DitheringMethod">
      <summary>
            Dithering method changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.UseLookupTable">
      <summary>
            Use of palette lookup table (LUT) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.UsePaintLookupTable">
      <summary>
            Use of paint palette lookup table (LUT) changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.TransparentColor">
      <summary>
            Transparent color changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.OverlaysInfo">
      <summary>
            Overlay information changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.PlayParameters">
      <summary>
            Animation play parameters changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Page">
      <summary>
            Current page changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.PageCount">
      <summary>
            Number of pages changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Tag">
      <summary>
            Tag changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Comment">
      <summary>
            Comment changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Marker">
      <summary>
            Marker changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.GeoKey">
      <summary>
            Geo keys changed
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.Format">
      <summary>
            Format changedd
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageChangedFlags.AnimationProperties">
      <summary>
            Any of the Animation properties has changed
            </summary>
    </member>
    <member name="T:Leadtools.RasterViewPerspective">
      <summary>Indicates the view perspective of the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterViewPerspective.TopLeft">
      <summary>
            Top-left of image is first in memory.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.BottomLeft">
      <summary>
            Bottom-left of image is first in memory.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.TopRight">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the right side, first column is top side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.BottomLeft180">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>TopLeft</strong>, which is <strong>BottomLeft</strong> rotated clockwise by 180 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.BottomRight">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the right side, first column is the bottom side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.TopLeft180">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>BottomRight</strong>, which is <strong>TopLeft</strong> rotated clockwise by 180 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.RightTop">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the right side, first column is top side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.TopLeft90">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>RightTop</strong>, which is <strong>TopLeft</strong> rotated clockwise by 90 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.LeftBottom">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the left side, first column is top side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.TopLeft270">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>LeftBottom</strong>, which is <strong>TopLeft</strong> rotated clockwise by 270 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.LeftTop">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the left side, first column is the top side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.BottomLeft90">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>LeftTop</strong>, which is <strong>BottomLeft</strong> rotated clockwise by 90 degrees.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.RightBottom">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> First row is the right side, first column is the bottom side.
            </summary>
    </member>
    <member name="F:Leadtools.RasterViewPerspective.BottomLeft270">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Same as <strong>RightBottom</strong>, which is <strong>BottomLeft</strong> rotated clockwise by 270 degrees.
            </summary>
    </member>
    <member name="T:Leadtools.RasterByteOrder">
      <summary>Indicates the color byte order of the image data <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterByteOrder.Rgb">
      <summary>
            RGB
            </summary>
    </member>
    <member name="F:Leadtools.RasterByteOrder.Bgr">
      <summary>
            BGR (inverse of RGB)
            </summary>
    </member>
    <member name="F:Leadtools.RasterByteOrder.Gray">
      <summary>
            Grayscale
            </summary>
    </member>
    <member name="F:Leadtools.RasterByteOrder.Romm">
      <summary>
            ROMM (BGR)
            </summary>
    </member>
    <member name="T:Leadtools.RasterDitheringMethod">
      <summary>Indicates the dithering method used for the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.None">
      <summary>
            No dithering
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.FloydStein">
      <summary>
            Floyd-Steinberg method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Stucki">
      <summary>
            Stucki method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Burkes">
      <summary>
            Burkes method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Sierra">
      <summary>
            Sierra method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.StevensonArce">
      <summary>
            Stevenson-Arce method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Jarvis">
      <summary>
            Jarvis method
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Ordered">
      <summary>
            Ordered dithering, which is faster than other methods but is lower in quality
            </summary>
    </member>
    <member name="F:Leadtools.RasterDitheringMethod.Clustered">
      <summary>
            Clustered dithering
            </summary>
    </member>
    <member name="T:Leadtools.RasterRegionCombineMode">
      <summary>Controls the creation of an image region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.And">
      <summary>
        <para>The resulting region includes only the intersection of the existing region and the new one. The following example shows the result, where the rectangles represent the existing region, the ellipse represents the new one, and the shaded area represents the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_And.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.Set">
      <summary>
        <para>The resulting region includes only the new region. The existing region, if any, is discarded. The following example shows the result, where the ellipse is the new region and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_Set.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.AndNotImage">
      <summary>
        <para>The resulting region includes the intersection of the area outside the existing region and the area inside the new region. The following example shows the result, where the rectangle is the existing region, the ellipse is the new one, and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_AndNotImage.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.AndNotRegion">
      <summary>
        <para>The resulting region includes the intersection of the area inside the existing region and the area outside the new region. The following example shows the result, where the rectangle is the existing region, the ellipse is the new one, and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_AndNotRegion.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.Or">
      <summary>
        <para>The resulting region includes the area inside the existing region and the area inside the new region. The following example shows the result, where the rectangle is the existing region, the ellipse is the new one, and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_Or.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.Xor">
      <summary>
        <para>The resulting region includes the area inside the existing region and the area inside the new region, except for any areas where the two intersect. The following example shows the result, where the rectangle is the existing region, the ellipse is the new one, and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_Xor.gif" />
        </para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterRegionCombineMode.SetNot">
      <summary>
        <para>The resulting region includes everything in the image, except the new region. The existing region, if any, is discarded. The following example shows the result, where the ellipse is the new region and the shaded area is the resulting region.</para>
        <para>
          <img src="RasterRegionCombineMode_SetNot.gif" />
        </para>
      </summary>
    </member>
    <member name="T:Leadtools.RasterMemoryFlags">
      <summary>Indicates the type of memory to allocate. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.MemoryStorageTypesForImages">Memory Storage Types for Images</see>.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.None">
      <summary>
            No flags.
            </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.Conventional">
      <summary>
            Use conventional memory.
            </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.User">
      <summary>
        <para>Create an image where the user maintains the data pointer.</para>
        <para>Some image processing commands, such as <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> and
            <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />, need to re-allocate the image data. If you create a bitmap with
            <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>, and pass it to these command, they will change the bitmap
            to <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Conventional</see> and re-allocate memory.  Your original memory will no
            longer be used.</para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.Tiled">
      <summary>
            Create an image where the data pointers are maintained in tiles, useful for very large images. <strong>This is currently not supported by LEADTOOLS for Silverlight.</strong></summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.NoTiled">
      <summary>
            Do not allow tiled images.
            </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.Disk">
      <summary>
            Do not use managed memory. Swap to disk only. <strong>This is currently not supported by LEADTOOLS for Silverlight.</strong>
            If the image is allocated as Disk, then the image should not be used in multiple threads.
            </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.NoDisk">
      <summary>
            Do not swap to disk using LEAD virtual memory. Windows virtual memory is not affected.
            </summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.Compressed">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Allocate an RLE-compressed image. You can use this flag with <strong>None</strong> or <strong>NoDisk</strong>. For more information, refer to Speeding Up 1-Bit Documents. <strong>This is currently not supported by LEADTOOLS for Silverlight.</strong></summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.SuperCompressed">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Allocate a CMP-compressed image. You can use this flag with <strong>None</strong> or <strong>NoDisk</strong>. <strong>This is currently not supported by LEADTOOLS for Silverlight.</strong></summary>
    </member>
    <member name="F:Leadtools.RasterMemoryFlags.WriteableBitmap">
      <summary>
        <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Use a Silverlight <see cref="F:Leadtools.RasterMemoryFlags.WriteableBitmap" /> for memory storage.<br /><strong>This option works only for 32-bit images.<br />This is supported only in LEADTOOLS for Silverlight.</strong>.
            </summary>
    </member>
    <member name="T:Leadtools.RasterWindowLevelMode">
      <summary>Indicates whether window level changes are used by the paint and image processing functions or only by the paint functions. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterWindowLevelMode.Paint">
      <summary>
            Window level changes used only by the paint functions
            </summary>
    </member>
    <member name="F:Leadtools.RasterWindowLevelMode.PaintAndProcessing">
      <summary>
            Window level changes used for both paint and image processing functions
            </summary>
    </member>
    <member name="T:Leadtools.RasterCompression">
      <summary>Indicates the compression type for the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCompression.None">
      <summary>
            Image data is not compressed in memory.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCompression.Rle">
      <summary>
            Image data is RLE compressed in memory.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCompression.Super">
      <summary>
            Image data is compressed in memory using LEAD propriatary compression.
            </summary>
    </member>
    <member name="T:Leadtools.RasterConvertToDibType">
      <summary>Options for converting image to Windows Device Independent Bitmap (DIB). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterConvertToDibType.BitmapInfoHeader">
      <summary>
            DIB that uses a BITMAPINFOHEADER.
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertToDibType.BitmapV4Header">
      <summary>
            DIB that uses a BITMAPV4HEADER. (Introduced in Windows 95 and Windows NT 4.0).
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertToDibType.BitmapV5Header">
      <summary>
            DIB that uses a BITMAPV5HEADER (Introduced in Windows 2000 and Windows 98).
            </summary>
    </member>
    <member name="T:Leadtools.RasterImageUnderlayFlags">
      <summary>Indicators of how the underlying image is to be positioned. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The underlying image can either be stretched or tiled to fill the target image, as shown in the following illustration:</para>
        <para>
          <img src="Underlay.gif" />
        </para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterImageUnderlayFlags.None">
      <summary>
            Tile the underlay. This repeats the underlying image, so that it fills the target image. This function does not do any resizing; you are responsible for the size of the tiles
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageUnderlayFlags.Stretch">
      <summary>
            Stretch the underlay to fit the dimensions of the target image
            </summary>
    </member>
    <member name="T:Leadtools.RasterMetadataFlags">
      <summary>Indicates the type of metadata. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.Comments">
      <summary>
            Comments
            </summary>
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.Tags">
      <summary>
            Tags
            </summary>
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.Markers">
      <summary>
            Markers
            </summary>
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.GeoKeys">
      <summary>
            GeoKeys
            </summary>
    </member>
    <member name="F:Leadtools.RasterMetadataFlags.All">
      <summary>
            All (Comments, Tags, Markers and GeoKeys)
            </summary>
    </member>
    <member name="T:Leadtools.RasterGetSetOverlayImageMode">
      <summary>Determines how to set or retrieve the overlay <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This enumeration is used for the <paramref name="mode" /> parameter for
            <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)">RasterImage.GetOverlayImage</see> and
            <see cref="M:Leadtools.RasterImage.SetOverlayImage(System.Int32,Leadtools.RasterImage,Leadtools.RasterGetSetOverlayImageMode)">RasterImage.SetOverlayImage</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayImageMode.Copy">
      <summary>
            A copy of the overlay image is retrieved/inserted from/into the overlay list.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayImageMode.NoCopy">
      <summary>
            The actual overlay image is retrieved/inserted. No copy is made.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayImageMode.Move">
      <summary>
        <para>For <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)">RasterImage.GetOverlayImage</see>, the actual overlay
            image is retrieved. The image is also removed from the overlay list</para>
        <para>For <see cref="M:Leadtools.RasterImage.SetOverlayImage(System.Int32,Leadtools.RasterImage,Leadtools.RasterGetSetOverlayImageMode)">RasterImage.SetOverlayImage</see>, the overlay image is
            moved into the overlay list. It will also be reset, so you cannot make changes to it.</para>
      </summary>
    </member>
    <member name="T:Leadtools.RasterUpdateOverlayBitsFlags">
      <summary>Determines whether the main image or the overlay image should be updated. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterUpdateOverlayBitsFlags.None">
      <summary>
            No action.
            </summary>
    </member>
    <member name="F:Leadtools.RasterUpdateOverlayBitsFlags.FromOverlay">
      <summary>
            Update the main image bits for the corresponding bitplane using the data from the overlay image.
            </summary>
    </member>
    <member name="F:Leadtools.RasterUpdateOverlayBitsFlags.FromImage">
      <summary>
            Update the overlay image with the bits from the corresponding bit plane of the main image. Can be or-ed with <strong>Clear</strong></summary>
    </member>
    <member name="F:Leadtools.RasterUpdateOverlayBitsFlags.Clear">
      <summary>
            Clears the bits from the bitplane associated with the overlay that are not contained in the overlay image
            (use only in combination with <strong>FromOverlay</strong>)
            </summary>
    </member>
    <member name="T:Leadtools.RasterGetSetOverlayAttributesFlags">
      <summary>Determines which attributes are to be retrieved or changed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This enumeration is used with the <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.GetOverlayAttributes</see>
            and the <see cref="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">RasterImage.UpdateOverlayAttributes</see> methods.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.None">
      <summary>
            No action.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.Origin">
      <summary>
            The top-left position should be retrieved/changed. <see cref="P:Leadtools.RasterOverlayAttributes.Origin">RasterOverlayAttributes.Origin</see> contains/will be updated with the new top-left offset.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.Color">
      <summary>
            The color should be retrieved/changed.
            <see cref="P:Leadtools.RasterOverlayAttributes.Color">RasterOverlayAttributes.Color</see> contains/will be updated with the
            new color.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.Flags">
      <summary>
            The flags should be retrieved/changed.
            <para>The following properties should be retrieved/changed:</para><list type="bullet"><item><description><see cref="P:Leadtools.RasterOverlayAttributes.AutoPaint">RasterOverlayAttributes.AutoPaint</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.AutoProcess">RasterOverlayAttributes.AutoProcess</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.UseBitPlane">RasterOverlayAttributes.UseBitPlane</see></description></item></list></summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.BitIndex">
      <summary>
            The corresponding bitplane position should be retrieved/changed.
            <see cref="P:Leadtools.RasterOverlayAttributes.BitPosition">RasterOverlayAttributes.BitPosition</see> contains/will be updated with the
            new bitplane index.
            </summary>
    </member>
    <member name="F:Leadtools.RasterGetSetOverlayAttributesFlags.Dicom">
      <summary>
            The DICOM-related attributes should be retrieved/changed.
            <para>The following properties should be retrieved/changed:</para><list type="bullet"><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Rows">RasterOverlayAttributes.Rows</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Columns">RasterOverlayAttributes.Columns</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Type">RasterOverlayAttributes.Type</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.BitsAllocated">RasterOverlayAttributes.BitsAllocated</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Description">RasterOverlayAttributes.Description</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Subtype">RasterOverlayAttributes.Subtype</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.Label">RasterOverlayAttributes.Label</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.RoiArea">RasterOverlayAttributes.RoiArea</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.RoiMean">RasterOverlayAttributes.RoiMean</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.RoiStandardDeviation">RasterOverlayAttributes.ROIStandardDeviation</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.FramesInOverlay">RasterOverlayAttributes.FramesInOverlay</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.ImageFrameOrigin">RasterOverlayAttributes.ImageFrameOrigin</see></description></item><item><description><see cref="P:Leadtools.RasterOverlayAttributes.ActivationLayer">RasterOverlayAttributes.ActivationLayer</see></description></item></list></summary>
    </member>
    <member name="T:Leadtools.RasterPaintSizeMode">
      <summary>Determines how to fit the image in the destination rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Used by the the <see cref="M:Leadtools.RasterImage.CalculatePaintModeRectangle(System.Int32,System.Int32,Leadtools.LeadRect,Leadtools.RasterPaintSizeMode,Leadtools.RasterPaintAlignMode,Leadtools.RasterPaintAlignMode)">RasterImage.CalculatePaintModeRectangle</see> method to
            determines how to fit the image in the destination rectangle.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterPaintSizeMode.Normal">
      <summary>
            Normal, no sizing
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintSizeMode.Fit">
      <summary>
            Fit the image into the destination rectangle while maintaining the aspect ratio.  If the image size is smaller than the destination rectangle, no resizing is done
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintSizeMode.FitAlways">
      <summary>
            Always fit the image into the destination rectangle while maintaining the aspect ratio even if the image size is smaller than the destination rectangle
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintSizeMode.FitWidth">
      <summary>
            Fit the image width to be the size of the width of the destination rectangle while maintaining the aspect ratio
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintSizeMode.Stretch">
      <summary>
            Fit the image to fill the destination rectangle.  Aspect ratio might not be maintained.
            </summary>
    </member>
    <member name="T:Leadtools.RasterPaintAlignMode">
      <summary>Determines how to align the image in the destination rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Used by the the <see cref="M:Leadtools.RasterImage.CalculatePaintModeRectangle(System.Int32,System.Int32,Leadtools.LeadRect,Leadtools.RasterPaintSizeMode,Leadtools.RasterPaintAlignMode,Leadtools.RasterPaintAlignMode)">RasterImage.CalculatePaintModeRectangle</see> method to
            determines how to align the image in the destination rectangle.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterPaintAlignMode.Near">
      <summary>
            Align the image to the left (if this is the horizontal alignment) or top (if this is the vertical alignment) of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintAlignMode.Center">
      <summary>
            Center the image in the middle of the destination rectangle. If the image size is greater than the destination rectangle size then do not center the image.
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintAlignMode.CenterAlways">
      <summary>
            Center the image in the middle of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.RasterPaintAlignMode.Far">
      <summary>
            Align the image to the right (if this is the horizontal alignment) or bottom (if this is the vertical alignment) of the destination rectangle.
            </summary>
    </member>
    <member name="T:Leadtools.RasterSizeFlags">
      <summary>Flags which control the behaviour of image resize methods. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterSizeFlags.None">
      <summary>
            Resize normally
            </summary>
    </member>
    <member name="F:Leadtools.RasterSizeFlags.FavorBlack">
      <summary>
        <para>
          <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Preserve black objects when making the image smaller. This option
            affects only 1-bit, black-and-white images, where it prevents the disappearance of thin lines. You can use a bitwise OR ( | ) to combine
            this flag with another one. For example, <c><strong>Resample</strong> | <strong>FavorBlack</strong></c> causes color images to be resampled, 
            but applies the favor-black option to 1-bit, black-and-white images.</para>
        <para>If you apply this flag to an image that has more than 1 bit per pixel, then the behavior is undefined.</para>
      </summary>
    </member>
    <member name="F:Leadtools.RasterSizeFlags.Resample">
      <summary>
            Use linear interpolation and averaging to produce a higher-quality image
            </summary>
    </member>
    <member name="F:Leadtools.RasterSizeFlags.Bicubic">
      <summary>
            Use bicubic interpolation and averaging to produce a higher quality image. This is slower than <strong>Resample</strong></summary>
    </member>
    <member name="T:Leadtools.RasterImageAnimationDisposalMethod">
      <summary>Used for the disposal methods used after rendering each frame in an animated image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImageAnimator" /> class will take care of interpreting the value of the disposal method and update the target image accordingly.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationOffset">RasterImage.AnimationOffset</see></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput">RasterImage.AnimationWaitUserInput</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset">RasterImage.AnimationOffset</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay">RasterImage.AnimationDelay</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground">RasterImage.AnimationBackground</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod">RasterImage.AnimationDisposalMethod</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop">RasterImage.AnimationGlobalLoop</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize">RasterImage.AnimationGlobalSize</seealso>
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground">RasterImage.AnimationGlobalSize</seealso>
      <seealso cref="T:Leadtools.RasterImageAnimator">RasterImageAnimator</seealso>
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="F:Leadtools.RasterImageAnimationDisposalMethod.None">
      <summary>
            Do nothing
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimationDisposalMethod.Leave">
      <summary>
            Leave the target image as is
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimationDisposalMethod.RestoreBackground">
      <summary>
            Restore the background
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageAnimationDisposalMethod.RestorePrevious">
      <summary>
            Restore the previous frame
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.CombineWarpCommandFlags">
      <summary>Flags for the <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.Flags">CombineWarpCommand.Flags</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.None">
      <summary>
            Default (No interpolation).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Bilinear">
      <summary>
            Bilinear interpolation. This value is only valid if the bits per pixel of the image is 1-bit, 
            8-bit grayscale, 12-bit without a lookup table, 16-bit without a lookup table, 24, 32, 48, or 64.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved1">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved2">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved3">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved4">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved5">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved6">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved7">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved8">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineWarpCommandFlags.Reserved9">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.CombineWarpCommand">
      <summary>Combines image data from the source image (the slave) and the destination image (the master), using a perspective warp. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Combining images|Warping</keywords>
      <remarks>
        <para>You can warp the entire source image, or a portion of the source image. To warp a portion of the source 
            image, set <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.SourceRectangle" /> accordingly. To warp the entire source image, set the following:</para>
        <para>
          <code>
            CombineWarp.Command.SourceRectangle = new LeadRect(0, 0, RasterImage.Width, RasterImage.Height);
            </code>
        </para>
        <para>The warp area in the destination image is specified in <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" />.
            The polygon specified in <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" /> must:</para>
        <para>
          <list>
            <item>
              <description>Be concave</description>
            </item>
            <item>
              <description>Fit entirely on the destination bitmap</description>
            </item>
          </list>
        </para>
        <para>If either of these conditions is false, this class will throw an exception.</para>
        <para>The ordering of the points in <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" /> can affect the resulting warp. For example, if the 
            source image is the following:</para>
        <para>
          <img src="WarpEx1.gif" />
        </para>
        <para>then ordering the points in <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" /> as shown below results in the following warp:</para>
        <para>
          <img src="WarpEx2.gif" />
        </para>
        <para>while ordering the points in <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" /> as shown below, results in the following warp:</para>
        <para>
          <img src="WarpEx3.gif" />
        </para>
        <para>The <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" /> works by combining the image in the <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.DestinationImage" /> property with the image
            passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.  The <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.DestinationImage" /> will then hold the result of the combine operation..</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>This command does not support signed data images.</para>
      </remarks>
      <example>
        <para>This example will warp combines two images.</para>
        <code lang="VB">        Public Sub CombineWarpCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim srcFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CombineWarpCommand.bmp")

         ' Load the source images from disk
         Dim parentImage As RasterImage = codecs.Load(srcFileName1)
         Dim childImage As RasterImage = codecs.Load(srcFileName2)

         ' Combine them
         Dim command As CombineWarpCommand = New CombineWarpCommand()

         Dim destPoints As LeadPoint() = {New LeadPoint(100, 100), New LeadPoint(200, 75), New LeadPoint(200, 250), New LeadPoint(100, 200)}

         command.DestinationImage = parentImage
         command.SetDestinationPoints(destPoints)
         command.SourceRectangle = New LeadRect(0, 0, childImage.Width, childImage.Height)
         command.Flags = CombineWarpCommandFlags.Bilinear
         command.Run(childImage)

         ' Save it to disk
         codecs.Save(parentImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         parentImage.Dispose()
         childImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CombineWarpCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string srcFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CombineWarpCommand.bmp");

         // Load the source images from disk
         RasterImage parentImage = codecs.Load(srcFileName1);
         RasterImage childImage = codecs.Load(srcFileName2);

         // Combine them
         CombineWarpCommand command = new CombineWarpCommand();

         LeadPoint[] destPoints =
         {
            new LeadPoint(100,100),
            new LeadPoint(200,75),
            new LeadPoint(200,250),
            new LeadPoint(100,200)
         };

         command.DestinationImage = parentImage;
         command.SetDestinationPoints(destPoints);
         command.SourceRectangle = new LeadRect(0, 0, childImage.Width, childImage.Height);
         command.Flags = CombineWarpCommandFlags.Bilinear;
         command.Run(childImage);

         // Save it to disk
         codecs.Save(parentImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         parentImage.Dispose();
         childImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadPoint[],Leadtools.LeadRect,Leadtools.ImageProcessing.CombineWarpCommandFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /> with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="destinationImage">The destination image for the command.</param>
      <param name="destinationPoints">An array that contains the four points that define the warp area in the destination image.</param>
      <param name="sourceRectangle">Defines the area of the source image to be warped.</param>
      <param name="flags">Flags that indicate the type of interpolation to use, if interpolation is used.</param>
      <remarks>
        <paramref name="destinationImage" /> will hold the result of combing this image with the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.GetDestinationPoints">
      <summary>Gets an array that contains the four points that define the warp area in the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>An array that contains the four points that define the warp area in the destination image.</returns>
      <remarks>
            Use the <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])" /> method to set the array of points.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.SetDestinationPoints(Leadtools.LeadPoint[])">
      <summary>Sets an array that contains the four points that define the warp area in the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="value">An array that contains the four points that define the warp area in the destination image.</param>
      <remarks>Use the <see cref="M:Leadtools.ImageProcessing.CombineWarpCommand.GetDestinationPoints" /> method to get the array of points.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineWarpCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineWarpCommand.DestinationImage">
      <summary>Gets or sets the destination image <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The destination <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" /> works by combining the image in the <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.DestinationImage" /> property with
            the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.  The <see cref="P:Leadtools.ImageProcessing.CombineWarpCommand.DestinationImage" /> will then the result of the combine operation..</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineWarpCommand.SourceRectangle">
      <summary>Gets or sets the area of the source image to be warped. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.LeadRect" /> which defines the area of the source image to be warped.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineWarpCommand.Flags">
      <summary>Gets or sets the flags that indicate the type of interpolation to use, if interpolation is used. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>Flags that indicate the type of interpolation to use, if interpolation is used.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineWarpCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterNativeBuffer">
      <summary>Holds a native (unmanaged) pointer and its length. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterNativeBuffer.GetData(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from this <see cref="T:Leadtools.RasterNativeBuffer" /> object to a byte array. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="offset">Offset into this <see cref="T:Leadtools.RasterNativeBuffer" /> data at which copying begins.</param>
      <param name="buffer">The buffer that receives the data.</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> at which storing begins.</param>
      <param name="bytes">Number of bytes to copy.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterNativeBuffer.SetData(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from a byte array into this <see cref="T:Leadtools.RasterNativeBuffer" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="offset">Offset into this <see cref="T:Leadtools.RasterNativeBuffer" /> data at which storing begins.</param>
      <param name="buffer">The buffer that contains the data to copy.</param>
      <param name="bufferOffset">Offset into <paramref name="buffer" /> at which copying begins.</param>
      <param name="bytes">Number of bytes to store.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterNativeBuffer.Empty">
      <summary>Gets an empty <see cref="T:Leadtools.RasterNativeBuffer" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterNativeBuffer" /> object that has all the members reset to their default values.</value>
      <remarks>
            The <see cref="T:Leadtools.RasterNativeBuffer" /> object returned from this property will have the <see cref="P:Leadtools.RasterNativeBuffer.Data" /> property set to IntPtr.Zero and
            the <see cref="P:Leadtools.RasterNativeBuffer.Length" /> property set to 0.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterNativeBuffer.Data">
      <summary>Gets or sets the native (unmanaged) data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.IntPtr" /> that represents the native (unmanaged) data.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterNativeBuffer.Length">
      <summary>Gets or sets the native (unmanage) data length (size in bytes). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An <see cref="T:System.Int64" /> value that represents the native (unmanaged) data length (size in bytes).</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.RasterCollectionEventArgs`1">
      <summary>Provides information for <see cref="E:Leadtools.RasterCollection`1.ItemAdded">RasterCollection&lt;T&gt;.ItemAdded</see> and
            <see cref="E:Leadtools.RasterCollection`1.ItemRemoved">RasterCollection&lt;T&gt;.ItemRemoved</see> methods. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <typeparam name="T">A generic <see cref="T:System.Type" /> parameter.</typeparam>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterCollectionEventArgs`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterCollectionEventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> class with the specified parameters.
            </summary>
      <param name="item">The object that has been added or removed.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterCollectionEventArgs`1.Item">
      <summary>The object that has been added or removed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The object that has been added or removed.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.RasterCollection`1">
      <summary>Represents a generic collection of objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <typeparam name="T">A generic <see cref="T:System.Type" /> parameter.</typeparam>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterCollection`1" /> class provides a generic collection class that implements the .NET <see cref="T:System.Collections.Generic.IList`1" />,
            <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces.</para>
        <para>The class contains the <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> and <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" />
            events.  These events will fire whenever objects are added or removed to/from the collection.</para>
      </remarks>
      <example>
        <para>Sample to test the RasterCollection class.</para>
        <code lang="VB">       Public Sub RasterCollectionExample()
         Dim rc As RasterCollection(Of String) = New RasterCollection(Of String)()
         AddHandler rc.ItemAdded, AddressOf rasterCollection_ItemAdded
         AddHandler rc.ItemRemoved, AddressOf rasterCollection_ItemRemoved

         ' add a few items
         Dim item1 As String = "item 1"
         Dim item2 As String = "item 2"
         Dim item3 As String = "item 3"

         rc.Add(item1)
         rc.Add(item2)
         rc.Add(item3)

         ' insert an item
         Dim newItem2 As String = "new item 2"
         rc.Insert(1, newItem2)

         ' check if collection contains this new item
         Debug.Assert(rc.Contains(newItem2))

         ' remove this new item
         rc.Remove(newItem2)
         Debug.Assert((Not rc.Contains(newItem2)))

         ' remove the last item
         rc.RemoveAt(rc.Count - 1)
         Debug.Assert(rc.Count = 2)

         ' send the first item to the end of the collection
         rc.SendToBack(item1, True)
         Debug.Assert(rc.IndexOf(item1) = rc.Count - 1)

         ' bring it back to the front
         rc.BringToFront(item1, True)
         Debug.Assert(rc.IndexOf(item1) = 0)

         ' copy to an array
         Dim items As String() = New String(rc.Count - 1) {}
         rc.CopyTo(items, 0)
         Debug.Assert(items.Length = rc.Count)
         Dim i As Integer = 0
         Do While i &lt; items.Length
            Debug.Assert(items(i) = rc(i))
            i += 1
         Loop

         ' loop throw the items and show them
         For Each str As String In rc
            Console.WriteLine(str)
         Next str

         ' clean the collection
         rc.Clear()
         Debug.Assert(rc.Count = 0)
      End Sub

      Private Sub rasterCollection_ItemAdded(ByVal sender As System.Object, ByVal e As RasterCollectionEventArgs(Of String))
         Console.WriteLine("The Item ((" &amp; e.Item.ToString() &amp; ")) Has been added to the collection")
      End Sub

      Private Sub rasterCollection_ItemRemoved(ByVal sender As System.Object, ByVal e As RasterCollectionEventArgs(Of String))
         Console.WriteLine("The Item ((" &amp; e.Item.ToString() &amp; ")) Has been removed from the collection")
      End Sub</code>
        <code lang="CS">      public void RasterCollectionExample()
      {
         RasterCollection&lt;string&gt; rc = new RasterCollection&lt;string&gt;();
         rc.ItemAdded += new EventHandler&lt;RasterCollectionEventArgs&lt;string&gt;&gt;(rasterCollection_ItemAdded);
         rc.ItemRemoved += new EventHandler&lt;RasterCollectionEventArgs&lt;string&gt;&gt;(rasterCollection_ItemRemoved);

         // add a few items
         string item1 = "item 1";
         string item2 = "item 2";
         string item3 = "item 3";

         rc.Add(item1);
         rc.Add(item2);
         rc.Add(item3);

         // insert an item
         string newItem2 = "new item 2";
         rc.Insert(1, newItem2);

         // check if collection contains this new item
         Debug.Assert(rc.Contains(newItem2));

         // remove this new item
         rc.Remove(newItem2);
         Debug.Assert(!rc.Contains(newItem2));

         // remove the last item
         rc.RemoveAt(rc.Count - 1);
         Debug.Assert(rc.Count == 2);

         // send the first item to the end of the collection
         rc.SendToBack(item1, true);
         Debug.Assert(rc.IndexOf(item1) == rc.Count - 1);

         // bring it back to the front
         rc.BringToFront(item1, true);
         Debug.Assert(rc.IndexOf(item1) == 0);

         // copy to an array
         string[] items = new string[rc.Count];
         rc.CopyTo(items, 0);
         Debug.Assert(items.Length == rc.Count);
         for(int i = 0; i &lt; items.Length; i++)
            Debug.Assert(items[i] == rc[i]);

         // loop throw the items and show them
         foreach(string str in rc)
            Console.WriteLine(str);

         // clean the collection
         rc.Clear();
         Debug.Assert(rc.Count == 0);
      }

      private void rasterCollection_ItemAdded(System.Object sender, RasterCollectionEventArgs&lt;string&gt; e)
      {
         Console.WriteLine("The Item ((" + e.Item.ToString() + ")) Has been added to the collection");
      }

      private void rasterCollection_ItemRemoved(System.Object sender, RasterCollectionEventArgs&lt;string&gt; e)
      {
         Console.WriteLine("The Item ((" + e.Item.ToString() + ")) Has been removed from the collection");
      }</code>
        <code lang="SilverlightCSharp">      public void RasterCollectionExample()
      {
         RasterCollection&lt;string&gt; rc = new RasterCollection&lt;string&gt;();
         rc.ItemAdded += new EventHandler&lt;RasterCollectionEventArgs&lt;string&gt;&gt;(rasterCollection_ItemAdded);
         rc.ItemRemoved += new EventHandler&lt;RasterCollectionEventArgs&lt;string&gt;&gt;(rasterCollection_ItemRemoved);
         // add a few items
         string item1 = "item 1";
         string item2 = "item 2";
         string item3 = "item 3";

         rc.Add(item1);
         rc.Add(item2);
         rc.Add(item3);

         // insert an item
         string newItem2 = "new item 2";
         rc.Insert(1, newItem2);

         // check if collection contains this new item
         Debug.Assert(rc.Contains(newItem2));

         // remove this new item
         rc.Remove(newItem2);
         Debug.Assert(!rc.Contains(newItem2));

         // remove the last item
         rc.RemoveAt(rc.Count - 1);
         Debug.Assert(rc.Count == 2);

         // send the first item to the end of the collection
         rc.SendToBack(item1, true);
         Debug.Assert(rc.IndexOf(item1) == rc.Count - 1);

         // bring it back to the front
         rc.BringToFront(item1, true);
         Debug.Assert(rc.IndexOf(item1) == 0);

         // copy to an array
         string[] items = new string[rc.Count];
         rc.CopyTo(items, 0);
         Debug.Assert(items.Length == rc.Count);
         for(int i = 0; i &lt; items.Length; i++)
            Debug.Assert(items[i] == rc[i]);

         // loop throw the items and show them
         foreach(string str in rc)
            Console.WriteLine(str);

         // clean the collection
         rc.Clear();
         Debug.Assert(rc.Count == 0);
      }

      private void rasterCollection_ItemAdded(System.Object sender, RasterCollectionEventArgs&lt;string&gt; e)
      {
         Console.WriteLine("The Item ((" + e.Item.ToString() + ")) Has been added to the collection");
      }

      private void rasterCollection_ItemRemoved(System.Object sender, RasterCollectionEventArgs&lt;string&gt; e)
      {
         Console.WriteLine("The Item ((" + e.Item.ToString() + ")) Has been removed from the collection");
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterCollectionExample()
         Dim rc As RasterCollection(Of String) = New RasterCollection(Of String)()
         AddHandler rc.ItemAdded, AddressOf rasterCollection_ItemAdded
         AddHandler rc.ItemRemoved, AddressOf rasterCollection_ItemRemoved
         ' add a few items
         Dim item1 As String = "item 1"
         Dim item2 As String = "item 2"
         Dim item3 As String = "item 3"

         rc.Add(item1)
         rc.Add(item2)
         rc.Add(item3)

         ' insert an item
         Dim newItem2 As String = "new item 2"
         rc.Insert(1, newItem2)

         ' check if collection contains this new item
         Debug.Assert(rc.Contains(newItem2))

         ' remove this new item
         rc.Remove(newItem2)
         Debug.Assert((Not rc.Contains(newItem2)))

         ' remove the last item
         rc.RemoveAt(rc.Count - 1)
         Debug.Assert(rc.Count = 2)

         ' send the first item to the end of the collection
         rc.SendToBack(item1, True)
         Debug.Assert(rc.IndexOf(item1) = rc.Count - 1)

         ' bring it back to the front
         rc.BringToFront(item1, True)
         Debug.Assert(rc.IndexOf(item1) = 0)

         ' copy to an array
         Dim items As String() = New String(rc.Count - 1){}
         rc.CopyTo(items, 0)
         Debug.Assert(items.Length = rc.Count)
         Dim i As Integer = 0
         Do While i &lt; items.Length
            Debug.Assert(items(i) = rc(i))
            i += 1
         Loop

         ' loop throw the items and show them
         For Each str As String In rc
            Console.WriteLine(str)
         Next str

         ' clean the collection
         rc.Clear()
         Debug.Assert(rc.Count = 0)
      End Sub

      Private Sub rasterCollection_ItemAdded(ByVal sender As System.Object, ByVal e As RasterCollectionEventArgs(Of String))
         Console.WriteLine("The Item ((" &amp; e.Item.ToString() &amp; ")) Has been added to the collection")
      End Sub

      Private Sub rasterCollection_ItemRemoved(ByVal sender As System.Object, ByVal e As RasterCollectionEventArgs(Of String))
         Console.WriteLine("The Item ((" &amp; e.Item.ToString() &amp; ")) Has been removed from the collection")
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.OnItemAdded(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Raises the <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <strong>Notes to Inheritors:</strong> When overriding <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> in a derived class, be sure to call the base 
            class <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> method so that registered delegates receive the event.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterCollection`1.OnItemRemoved(Leadtools.RasterCollectionEventArgs{`0})">
      <summary>
            Raises the <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.RasterCollectionEventArgs`1" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <strong>Notes to Inheritors:</strong> When overriding <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> in a derived class, be sure to call the base 
            class <a href="Leadtools~Leadtools.RasterCollection`1~OnItemAdded.html">OnItemAdded</a> method so that registered delegates receive the event.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterCollection`1.#ctor">
      <summary>Creates a new instance of <see cref="T:Leadtools.RasterCollection`1" /> with default settings. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.DisableEvents">
      <summary>Called to disable raising the <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> and <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> events. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Calling <see cref="M:Leadtools.RasterCollection`1.DisableEvents" /> will increment an internal counter.  When the internal counter is 0,
            <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> or <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> event will be raised when items are added or removed
            to/from this <see cref="T:Leadtools.RasterCollection`1" />.</para>
        <para>When the internal counter is not 0, <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> and <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> events will not be
            raised.  Therefore, for each call to <see cref="M:Leadtools.RasterCollection`1.DisableEvents" />, there should be a corresponding call to
            <see cref="M:Leadtools.RasterCollection`1.EnableEvents" /> in order to restore the raising of events.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.EnableEvents">
      <summary>Called to enable raising the <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> and <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> events. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Calling <see cref="M:Leadtools.RasterCollection`1.DisableEvents" /> will increment an internal counter.  When the internal counter is 0,
            <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> or <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> event will be raised when items are added or removed
            to/from this <see cref="T:Leadtools.RasterCollection`1" />.</para>
        <para>When the internal counter is not 0, <see cref="E:Leadtools.RasterCollection`1.ItemAdded" /> and <see cref="E:Leadtools.RasterCollection`1.ItemRemoved" /> events will not be
            raised.  Therefore, for each call to <see cref="M:Leadtools.RasterCollection`1.DisableEvents" />, there should be a corresponding call to
            <see cref="M:Leadtools.RasterCollection`1.EnableEvents" /> in order to restore the raising of events.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.IndexOf(`0)">
      <summary>
            Returns the index of the specified item if it is found in the collection.
            </summary>
      <param name="item">Object to test.</param>
      <returns>The index of the specified item if it is found in the collection.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.Insert(System.Int32,`0)">
      <summary>
            Inserts the specified item at the specified index.
            </summary>
      <param name="index">Index at which to insert the item.</param>
      <param name="item">Item to insert.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.RemoveAt(System.Int32)">
      <summary>Removes the item from the specified index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">Index of the item to remove.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.Add(`0)">
      <summary>
            Adds the specified item to the end of the collection.
            </summary>
      <param name="item">Object to add.</param>
      <returns>The index of the newly added item.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.Clear">
      <summary>Removes all items from the collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.Contains(`0)">
      <summary>
            Determines whether or not the specified item is contained in the collection.
            </summary>
      <param name="item">Object to test.</param>
      <returns>true if the item is found in the collection; otherwise, it is false.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies all the elements of the collection to the specified one-dimensional array starting at the specified destination array index.
            </summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the current collection. </param>
      <param name="arrayIndex">The index at which copying begins.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.Remove(`0)">
      <summary>
            Removes the specified item.
            </summary>
      <param name="item">Item to remove.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            Returns an enumerator that can iterate through the <see cref="T:Leadtools.RasterCollection`1" />.
            </summary>
      <returns>An enumerator that can iterate through the <see cref="T:Leadtools.RasterCollection`1" />.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.GetEnumerator">
      <summary>Returns a generic enumerator that can iterate through the <see cref="T:Leadtools.RasterCollection`1" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A generic enumerator that can iterate through the <see cref="T:Leadtools.RasterCollection`1" />.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.AddRange(System.Collections.Generic.ICollection{`0})">
      <summary>
            Adds the elements of an <see cref="T:System.Collections.ICollection" /> to the end of the collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose elements should be added to the end of the collection.</param>
      <remarks>
            The collection itself cannot be a null reference (<strong>Nothing</strong> in Visual Basic), but it can contain
            elements that are a null reference (<strong>Nothing</strong>).
            </remarks>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.SendToBack(`0,System.Boolean)">
      <summary>
            Sends the specified item back in the collection.
            </summary>
      <param name="item">The item to move.</param>
      <param name="last">true to make the item the last item in the collection; false to move the item back one index.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="M:Leadtools.RasterCollection`1.BringToFront(`0,System.Boolean)">
      <summary>
            Brings the specified item forward in the collection.
            </summary>
      <param name="item">The item to move.</param>
      <param name="first">true to make the item the first item in the collection; false to move the item forward one index.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="E:Leadtools.RasterCollection`1.ItemAdded">
      <summary>Occurs when an item is added to the collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="E:Leadtools.RasterCollection`1.ItemRemoved">
      <summary>Occurs when an item is removed from the collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="P:Leadtools.RasterCollection`1.Item(System.Int32)">
      <summary>
            Gets and sets the item at the specified index from within the collection.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <value>The item at the specified index.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="P:Leadtools.RasterCollection`1.Count">
      <summary>Gets the number of items in the collection. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of items in the collection.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="P:Leadtools.RasterCollection`1.IsReadOnly">
      <summary>Specifies whether or not the collection is Read Only. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the collection is read only; otherwise it is false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterCollection`1" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterColorChannel">
      <summary>Indicates the channel that will be used in image processing methods. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterColorChannel.Master">
      <summary>
            All channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterColorChannel.Red">
      <summary>
            Red channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterColorChannel.Green">
      <summary>
            Green channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.RasterColorChannel.Blue">
      <summary>
            Blue channel only.
            </summary>
    </member>
    <member name="T:Leadtools.RasterMemoryThreshold">
      <summary>Holds the memory restrictions used when allocating new <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Memory|Memory Threshold|Memory Allocation|Thresholds|Conventional Memory| Allocate|Conventional Buffers</keywords>
      <remarks>
            Use the <see cref="T:Leadtools.RasterDefaults" /> class to get or set the memory restrictions used
            when allocating new <see cref="T:Leadtools.RasterImage" /> objects.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.Empty">
      <summary>Returns a new empty <see cref="T:Leadtools.RasterMemoryThreshold" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The <see cref="T:Leadtools.RasterMemoryThreshold" /> object this property creates.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.TiledThreshold">
      <summary>Gets or sets a value that specifies the minimum amount of free memory required to allow the allocation of conventional
            images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            An integer value that specifies the minimum amount of free memory required to allow the allocation of conventional
            images.  Default value is 0.
            </value>
      <remarks>
        <para>If the amount of free memory falls below this threshold, all images will be allocated as tiled. The exception is
            when the image size is smaller than the tile size – in this case, the image will be allocated in conventional memory.
            </para>
        <para>
            Values less than –100 are not allowed.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" /> value is &lt; 0, it represents the required number of free bytes.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" /> value is 0, then there is no minimum requirement for free memory, all
            images are allocated as conventional if there is enough memory.
            </para>
        <para>
            Tiled images use a combination of memory tiles and disk tiles. When an image is allocated, LEADTOOLS decides
            how many conventional memory tiles and how many disk tiles should be allocated. The <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" /> value
            influences the number of conventional tiles allocated as follows: the toolkit will not allocate any more conventional
            tiles when the amount of memory falls below <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" />. When the amount of memory falls below 
            <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" />, disk tiles will be allocated and several swap buffers might back these disk tiles. For each
            image there will be at least one swap tile.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.TiledThreshold" /> value is &gt; 0, then it represents a percentage of free memory out of the total
            memory. For example, when you pass –20, tiled images will be used when the amount of free physical and swap memory will
            drop below 20 percent of the total memory.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.MaximumConventionalSize">
      <summary>Gets or sets a value that specifies the maximum size for a conventional image (default is 0x7FFFFFFF). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the maximum size for a conventional image (default is 0x7FFFFFFF).</value>
      <remarks>
        <para>
            Any images with a size bigger than this will be allocated as tiled.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.MaximumConventionalSize" /> value is &gt; 0, then it represents the maximum size in bytes.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.MaximumConventionalSize" /> value is &lt; 0, then it represents the maximum size in percentage of
            the total memory (physical and swap).
            </para>
        <para>
            Values less than –100 are not allowed.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.TileSize">
      <summary>Gets or sets a value that specifies the size for a size of the tile for tiled images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the size for a size of the tile for tiled images. Default is 0</value>
      <remarks>
        <para>
            The value for <see cref="P:Leadtools.RasterMemoryThreshold.TileSize" /> must be less than the value of <see cref="P:Leadtools.RasterMemoryThreshold.MaximumConventionalSize" />.
            </para>
        <para>
            All images with a size smaller than <see cref="P:Leadtools.RasterMemoryThreshold.TileSize" /> will be allocated as conventional. (A tiled image of a size
            smaller than <see cref="P:Leadtools.RasterMemoryThreshold.TileSize" /> would consist of only small tile, which is the equivalent of the conventional image).
            </para>
        <para>
            If <see cref="P:Leadtools.RasterMemoryThreshold.TileSize" /> is 0, then LEADTOOLS will pick a default size for the tile. (Currently it is 16MB)
            </para>
        <para>
            The tiles will be smaller than this value and will be a complete number of rows. No rows will be split between tiles.
            </para>
        <para>
            Values less than 0 are not allowed.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.ConventionalTiles">
      <summary>Gets or sets a value that specifies the maximum number of tiles that will reside in conventional memory at any time. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the maximum number of tiles that will reside in conventional memory at any time.
            Default is 0.
            </value>
      <remarks>
        <para>
          <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalTiles" /> is used when working with a tiled image. The tiles that do not reside in conventional
            memory will be on disk. (Default is –100 = all tiles are in memory)
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalTiles" /> value is &gt; 0, then this parameter represents the number of tiles.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalTiles" /> value is 0, then all the tiles in a tiled image will be disk tiles.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalTiles" /> value is &lt; 0, then this parameter represents the percentage of tiles that will
            reside in memory.
            </para>
        <para>
            Values less than -100 are not allowed.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers">
      <summary>Gets or sets a value that specifies the number of buffers in conventional memory that will cache the disk tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An integer value that specifies the number of buffers in conventional memory that will cache the disk tiles.
            Default is 1 (one swap buffer will be used to cache the disk tiles).
            </value>
      <remarks>
        <para>
          <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> is used when working with tiled images which have disk tiles. The swap buffers will
            greatly improve the access to these disk tiles.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> value is &gt; 0, <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> indicates the number of swap
            buffers.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> value is &lt; 0, -<see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> indicates the percentage of
            the total of disk tiles. For example, -50 means the number of buffers is half of the disk tiles will be used.
            </para>
        <para>
            If the <see cref="P:Leadtools.RasterMemoryThreshold.ConventionalBuffers" /> value is 0, no swap buffers will be used. This uses the least amount of memory.
            </para>
        <para>
            It is useful to have more than one swap buffer when you have an algorithm that constantly reads data going up and down.
            Usually, the data is read in one direction (from top to bottom or bottom to top) – in this case, one swap buffer will be
            enough. Also, if you only view a certain portion of the image, you might benefit from having enough swap buffers to cache
            the visible portion of the image (or the image’s region).
            </para>
        <para>
            The buffers are dynamic: when data is being read/written to a disk tile, a cache buffer is created (if permitted and there
            is enough memory). If the maximum number of cache buffers for that image has been reached, the cache buffer for the last
            used tile will be deleted and used for the new tile.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterDefaults" />.
            </example>
    </member>
    <member name="T:Leadtools.RasterConvertBufferFlags">
      <summary>Options for the <see cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</see> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.None">
      <summary>
            Default
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.SourceGray">
      <summary>
            Source buffer has grayscale data
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.DestinationGray">
      <summary>
            Destination buffer has grayscale data
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.SourceUseBits">
      <summary>
            LowBit and HighBit apply to the source image
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.DestinationUseBits">
      <summary>
            LowBit and HighBit apply to the destination image
            </summary>
    </member>
    <member name="F:Leadtools.RasterConvertBufferFlags.AlphaInit">
      <summary>
            Initialize the alpha values when destination buffer is 32 or 64 bits or pixels
            </summary>
    </member>
    <member name="T:Leadtools.RasterBufferConverter">
      <summary>Provides support for converting image data buffers. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para>This example loads an image at 24 bits per pixel, and creates a new image at 16 bits per pixel, and uses the <see cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">Convert method</see> to convert data from 24 bits per pixel to 16 bits per pixel.</para>
        <code lang="VB">        Public Sub RasterBufferConverterExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_16bits.bmp")

         ' Load the image, at 24 bit per pixel.
         Dim srcImage As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Debug.Assert(srcImage.BitsPerPixel = 24)

         Dim buffer As Byte() = New Byte(srcImage.BytesPerLine - 1) {}

         ' Create a new 16-bit image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 16, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         Debug.Assert(destImage.BitsPerPixel = 16)

         ' Process each row from src to dest image
         srcImage.Access()
         destImage.Access()

         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine)

            RasterBufferConverter.Convert(buffer, 0, srcImage.Width, srcImage.BitsPerPixel, destImage.BitsPerPixel, srcImage.Order, destImage.Order, Nothing, Nothing, 0)

            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine)
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' Save the destination image back to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 16)

         ' Clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterBufferConverterExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName =  Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"); 
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_16bits.bmp");

         // Load the image, at 24 bit per pixel.
         RasterImage srcImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Debug.Assert(srcImage.BitsPerPixel == 24);

         byte[] buffer  = new byte[srcImage.BytesPerLine];

         // Create a new 16-bit image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            16,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         Debug.Assert(destImage.BitsPerPixel == 16);

         // Process each row from src to dest image
         srcImage.Access();
         destImage.Access();

         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine);

            RasterBufferConverter.Convert(
               buffer,
               0,
               srcImage.Width,
               srcImage.BitsPerPixel,
               destImage.BitsPerPixel,
               srcImage.Order,
               destImage.Order,
               null,
               null,
               0);

            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine);
         }

         destImage.Release();
         srcImage.Release();

         // Save the destination image back to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 16);

         // Clean up
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterBufferConverterExample(RasterImage srcImage, Stream destStream)
      {
         // srcImage should be 24 bits per pixel.
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // Load the image, at 24 bit per pixel.
         Debug.Assert(srcImage.BitsPerPixel == 24);

         byte[] buffer  = new byte[srcImage.BytesPerLine];

         // Create a new 16-bit image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            16,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         Debug.Assert(destImage.BitsPerPixel == 16);

         // Process each row from src to dest image
         srcImage.Access();
         destImage.Access();

         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine);

            RasterBufferConverter.Convert(
               buffer,
               0,
               srcImage.Width,
               srcImage.BitsPerPixel,
               destImage.BitsPerPixel,
               srcImage.Order,
               destImage.Order,
               null,
               null,
               0);

            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine);
         }

         destImage.Release();
         srcImage.Release();

         // Save the destination image back to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 16);

         // Clean up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterBufferConverterExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         ' srcImage should be 24 bits per pixel.
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' Load the image, at 24 bit per pixel.
         Debug.Assert(srcImage.BitsPerPixel = 24)

         Dim buffer As Byte() = New Byte(srcImage.BytesPerLine - 1){}

         ' Create a new 16-bit image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 16, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         Debug.Assert(destImage.BitsPerPixel = 16)

         ' Process each row from src to dest image
         srcImage.Access()
         destImage.Access()

         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine)

            RasterBufferConverter.Convert(buffer, 0, srcImage.Width, srcImage.BitsPerPixel, destImage.BitsPerPixel, srcImage.Order, destImage.Order, Nothing, Nothing, 0)

            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine)
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' Save the destination image back to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 16)

         ' Clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Calculates the size required for output buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="inWidth">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outWidth">Width in pixels of the desired output image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <returns>The size in bytes of the required output buffer.</returns>
      <remarks>
            You can use this method to calculate the required size of the output buffer for image data conversions.
            </remarks>
      <example>
        <para>This example loads an image at 24 bits per pixel, and creates a new image at 4 bits per pixel, and uses the <see cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">Convert method</see> to convert data from 24 bits per pixel to 4 bits per pixel.</para>
        <code lang="VB">        Public Sub CalculateConvertSizeExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_4bits.bmp")

         ' Load the image, at 24 bit per pixel.
         Dim srcImage As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Debug.Assert(srcImage.BitsPerPixel = 24)

         ' Create a new 4-bit image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 4, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)
         Debug.Assert(destImage.BitsPerPixel = 4)

         Dim bufferSize As Integer = RasterBufferConverter.CalculateConvertSize(srcImage.Width, srcImage.BitsPerPixel, destImage.Width, destImage.BitsPerPixel)

         ' Allocate the buffer in unmanaged memory
         Dim buffer As IntPtr = Marshal.AllocHGlobal(bufferSize)

         ' Process each row from srcImage to destImage.
         srcImage.Access()
         destImage.Access()

         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, buffer, srcImage.BytesPerLine)
            RasterBufferConverter.Convert(buffer, srcImage.Width, srcImage.BitsPerPixel, destImage.BitsPerPixel, srcImage.Order, destImage.Order, Nothing, Nothing, 0, 8, 0, RasterConvertBufferFlags.None)
            destImage.SetRow(i, buffer, destImage.BytesPerLine)
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' Save the destination image back to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 4)

         ' Clean up
         Marshal.FreeHGlobal(buffer)
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CalculateConvertSizeExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_4bits.bmp");

         // Load the image, at 24 bit per pixel.
         RasterImage srcImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Debug.Assert(srcImage.BitsPerPixel == 24);

         // Create a new 4-bit image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            4,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);
         Debug.Assert(destImage.BitsPerPixel == 4);

         int bufferSize = RasterBufferConverter.CalculateConvertSize(
            srcImage.Width,
            srcImage.BitsPerPixel,
            destImage.Width,
            destImage.BitsPerPixel);

         // Allocate the buffer in unmanaged memory
         IntPtr buffer = Marshal.AllocHGlobal(bufferSize);

         // Process each row from srcImage to destImage.
         srcImage.Access();
         destImage.Access();

         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, buffer, srcImage.BytesPerLine);
            RasterBufferConverter.Convert(
               buffer,
               srcImage.Width,
               srcImage.BitsPerPixel,
               destImage.BitsPerPixel,
               srcImage.Order,
               destImage.Order,
               null,
               null,
               0,
               8,
               0,
               RasterConvertBufferFlags.None);
            destImage.SetRow(i, buffer, destImage.BytesPerLine);
         }

         destImage.Release();
         srcImage.Release();

         // Save the destination image back to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 4);

         // Clean up
         Marshal.FreeHGlobal(buffer);
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CalculateConvertSizeExample(RasterImage srcImage, Stream destStream)
      {
         // srcImage should be 24 bits per pixel.
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // Create a new 4-bit image.
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            4,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);
         Debug.Assert(destImage.BitsPerPixel == 4);

         int bufferSize = RasterBufferConverter.CalculateConvertSize(
            srcImage.Width,
            srcImage.BitsPerPixel,
            destImage.Width,
            destImage.BitsPerPixel);

         // Allocate the buffer
         byte[] buffer = new byte[bufferSize];

         // Process each row from srcImage to destImage.
         srcImage.Access();
         destImage.Access();

         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine);
            RasterBufferConverter.Convert(
               buffer,
               0,
               srcImage.Width,
               srcImage.BitsPerPixel,
               destImage.BitsPerPixel,
               srcImage.Order,
               destImage.Order,
               null,
               null,
               0,
               8,
               0,
               RasterConvertBufferFlags.None);
            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine);
         }

         destImage.Release();
         srcImage.Release();

         // Save the destination image back to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 4);

         // Clean up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CalculateConvertSizeExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         ' srcImage should be 24 bits per pixel.
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' Create a new 4-bit image.
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 4, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)
         Debug.Assert(destImage.BitsPerPixel = 4)

         Dim bufferSize As Integer = RasterBufferConverter.CalculateConvertSize(srcImage.Width, srcImage.BitsPerPixel, destImage.Width, destImage.BitsPerPixel)

         ' Allocate the buffer
         Dim buffer As Byte() = New Byte(bufferSize - 1){}

         ' Process each row from srcImage to destImage.
         srcImage.Access()
         destImage.Access()

         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            srcImage.GetRow(i, buffer, 0, srcImage.BytesPerLine)
            RasterBufferConverter.Convert(buffer, 0, srcImage.Width, srcImage.BitsPerPixel, destImage.BitsPerPixel, srcImage.Order, destImage.Order, Nothing, Nothing, 0, 8, 0, RasterConvertBufferFlags.None)
            destImage.SetRow(i, buffer, 0, destImage.BytesPerLine)
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' Save the destination image back to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 4)

         ' Clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">
      <summary>Converts data in the specified buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="bufferOffset">The zero-based offset into the <paramref name="buffer" /> where conversion should start.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="lowBit">Value indicating the low bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="highBit">Value indicating the high bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <param name="flags">Flags indicating whether to treat 16 bit data as grayscale or color.</param>
      <remarks>
        <para>
          <strong>Note:</strong> This method will also work for 12 and 16-bit grayscale images, but only in the 
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.  If you attempt to use this
            method with a 12 or 16-bit grayscale image, but you do not have a Medical Imaging edition, it will throw an exception.</para>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>If nBitsPerPixelSrc is 12, it is assumed to be grayscale.  However, the <paramref name="flags" /> parameter should also reflect that it is
            grayscale for future compatibility. If the source is grayscale, <paramref name="inPalette" /> can be set to a palette.  The palette should contain N 
            entries.  If the source uses <paramref name="lowBit" /> and <paramref name="highBit" />, then N equals 2 raised to the power of 
            (<paramref name="highBit" /> - <paramref name="lowBit" /> + 1).  Otherwise, N equals 2 raised to the power of <paramref name="inBitsPerPixel" />.</para>
        <para>The <paramref name="flags" /> parameter supersedes <paramref name="inOrder" /> and <paramref name="outOrder" />.  If you specify <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> for
            <paramref name="inOrder" />, but use <see cref="T:Leadtools.RasterConvertBufferFlags">RasterConvertBufferFlags.SourceGray</see> in <paramref name="flags" />, it will be assumed that the source buffer
            contains grayscale data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],Leadtools.RasterColor16[],Leadtools.RasterColor16[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">
      <summary>Converts data in the specified buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="bufferOffset">The zero-based offset into the <paramref name="buffer" /> where conversion should start.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="inPalette16">The 16-bit LUT for the existing data, before conversion. Use NULL for no 16-bit LUT.</param>
      <param name="outPalette16">The 16-bit LUT for the converted data. Reserved for future use. Use NULL.</param>
      <param name="lowBit">Value indicating the low bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="highBit">Value indicating the high bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <param name="flags">Flags indicating whether to treat 16 bit data as grayscale or color.</param>
      <remarks>
        <para>
          <strong>Note:</strong> This method will also work for 12 and 16-bit grayscale images, but only in the 
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.  If you attempt to use this
            method with a 12 or 16-bit grayscale image, but you do not have a Medical Imaging edition, it will throw an exception.</para>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>If nBitsPerPixelSrc is 12, it is assumed to be grayscale.  However, the <paramref name="flags" /> parameter should also reflect that it is
            grayscale for future compatibility. If the source is grayscale, <paramref name="inPalette" /> can be set to a palette.  The palette should contain N 
            entries.  If the source uses <paramref name="lowBit" /> and <paramref name="highBit" />, then N equals 2 raised to the power of 
            (<paramref name="highBit" /> - <paramref name="lowBit" /> + 1).  Otherwise, N equals 2 raised to the power of <paramref name="inBitsPerPixel" />.</para>
        <para>The <paramref name="flags" /> parameter supersedes <paramref name="inOrder" /> and <paramref name="outOrder" />.  If you specify <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> for
            <paramref name="inOrder" />, but use <see cref="T:Leadtools.RasterConvertBufferFlags">RasterConvertBufferFlags.SourceGray</see> in <paramref name="flags" />, it will be assumed that the source buffer
            contains grayscale data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32)">
      <summary>Converts data in the specified buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="bufferOffset">The zero-based offset into the <paramref name="buffer" /> where conversion should start.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <remarks>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.IntPtr,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">
      <summary>Converts data in the specified unmanaged memory buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="lowBit">Value indicating the low bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="highBit">Value indicating the high bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <param name="flags">Flags indicating whether to treat 16 bit data as grayscale or color.</param>
      <remarks>
        <para>
          <strong>Note:</strong> This method will also work for 12 and 16-bit grayscale images, but only in the 
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.  If you attempt to use this
            method with a 12 or 16-bit grayscale image, but you do not have a Medical Imaging edition, it will throw an exception.</para>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>If nBitsPerPixelSrc is 12, it is assumed to be grayscale.  However, the <paramref name="flags" /> parameter should also reflect that it is
            grayscale for future compatibility. If the source is grayscale, <paramref name="inPalette" /> can be set to a palette.  The palette should contain N 
            entries.  If the source uses <paramref name="lowBit" /> and <paramref name="highBit" />, then N equals 2 raised to the power of 
            (<paramref name="highBit" /> - <paramref name="lowBit" /> + 1).  Otherwise, N equals 2 raised to the power of <paramref name="inBitsPerPixel" />.</para>
        <para>The <paramref name="flags" /> parameter supersedes <paramref name="inOrder" /> and <paramref name="outOrder" />.  If you specify <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> for
            <paramref name="inOrder" />, but use <see cref="T:Leadtools.RasterConvertBufferFlags">RasterConvertBufferFlags.SourceGray</see> in <paramref name="flags" />, it will be assumed that the source buffer
            contains grayscale data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.IntPtr,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],Leadtools.RasterColor16[],Leadtools.RasterColor16[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">
      <summary>Converts data in the specified unmanaged memory buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="inPalette16">The 16-bit LUT for the existing data, before conversion. Use NULL for no 16-bit LUT.</param>
      <param name="outPalette16">The 16-bit LUT for the converted data. Reserved for future use. Use NULL.</param>
      <param name="lowBit">Value indicating the low bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="highBit">Value indicating the high bit in the source buffer, if the source buffer contains grayscale data.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <param name="flags">Flags indicating whether to treat 16 bit data as grayscale or color.</param>
      <remarks>
        <para>
          <strong>Note:</strong> This method will also work for 12 and 16-bit grayscale images, but only in the 
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.  If you attempt to use this
            method with a 12 or 16-bit grayscale image, but you do not have a Medical Imaging edition, it will throw an exception.</para>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>If nBitsPerPixelSrc is 12, it is assumed to be grayscale.  However, the <paramref name="flags" /> parameter should also reflect that it is
            grayscale for future compatibility. If the source is grayscale, <paramref name="inPalette" /> can be set to a palette.  The palette should contain N 
            entries.  If the source uses <paramref name="lowBit" /> and <paramref name="highBit" />, then N equals 2 raised to the power of 
            (<paramref name="highBit" /> - <paramref name="lowBit" /> + 1).  Otherwise, N equals 2 raised to the power of <paramref name="inBitsPerPixel" />.</para>
        <para>The <paramref name="flags" /> parameter supersedes <paramref name="inOrder" /> and <paramref name="outOrder" />.  If you specify <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see> for
            <paramref name="inOrder" />, but use <see cref="T:Leadtools.RasterConvertBufferFlags">RasterConvertBufferFlags.SourceGray</see> in <paramref name="flags" />, it will be assumed that the source buffer
            contains grayscale data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterBufferConverter.Convert(System.IntPtr,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32)">
      <summary>Converts data in the specified unmanaged memory buffer to the specified bits per pixel and color order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Bits per pixel|Color order|Palette|Resolution|Bit-depth|Color resolution|Grayscale</keywords>
      <param name="buffer">The input buffer.</param>
      <param name="width">Width in pixels of the input image data.</param>
      <param name="inBitsPerPixel">BitsPerPixel of the input image data.</param>
      <param name="outBitsPerPixel">BitsPerPixel of the desired output image data.</param>
      <param name="inOrder">The input color order.</param>
      <param name="outOrder">The output color order.</param>
      <param name="inPalette">The palette or 8-bit LUT for the existing data, before conversion. If the input data is not palettized and not grayscale, use NULL.</param>
      <param name="outPalette">The palette for the converted data. If the data is converted to 16 or 24 bits per pixel color, use NULL for no palette.</param>
      <param name="alpha">The alpha value if the destination bits per pixel contains an alpha component</param>
      <remarks>
        <para>The conversion uses only one buffer, which must be large enough to hold the data before and after conversion.</para>
        <para>Image data that is 8 bits per pixel or less must use a palette, and this method can use such data as input, output, or both.
            Therefore, you may need to specify the palette for the input, or for the output, or both.</para>
        <para>If either <paramref name="inBitsPerPixel" /> or <paramref name="outBitsPerPixel" /> is 16, <paramref name="flags" /> is used to determine whether the data should be treated as
            color or grayscale.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.RasterBufferConverter" /> and <see cref="M:Leadtools.RasterBufferConverter.CalculateConvertSize(System.Int32,System.Int32,System.Int32,System.Int32)" /></example>
      <seealso cref="T:Leadtools.ImageProcessing.ColorResolutionCommand">ColorResolutionCommand</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Introduction: Color Resolution and Dithering</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
    </member>
    <member name="T:Leadtools.RasterCurveType">
      <summary>Indicates the type of curve that is being defined. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCurveType.Bezier">
      <summary>
            A series of Bezier curves that use the points as control points. In this case, the number of points must be 3n + 1,
            where n &gt;= 1. For example, number of points can be 4, 7, 10, 13, and so on. The first four points define the first Bezier curve,
            and each subsequent group of three points defines the next Bezier curve, using the last point of the previous Bezier curve as the
            starting point.
            </summary>
    </member>
    <member name="F:Leadtools.RasterCurveType.Standard">
      <summary>
            A smooth curve that goes through all of the points. In this case, there must be at least three points.
            </summary>
    </member>
    <member name="T:Leadtools.RasterCurveClose">
      <summary>Indicates how to close the curve. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterCurveClose.NoClose">
      <summary>
            For n points, draw (n - 3) segments. For example, for points {P0, P1, P2, P3, P4}, draw segments P1P2 and P2P3
            </summary>
    </member>
    <member name="F:Leadtools.RasterCurveClose.Close">
      <summary>
            For n points draw (n) segments. For example, for points {P0, P1, P2, P3, P4}, draw segments P0P1, P1P2, P2P3, P3P4, P4P0
            </summary>
    </member>
    <member name="F:Leadtools.RasterCurveClose.PartialClose">
      <summary>
            For n points draw (n - 1) segments. For example, for points {P0, P1, P2, P3, P4}, draw segments P0P1, P1P2, P2P3, P3P4 (but not P4P0)
            </summary>
    </member>
    <member name="T:Leadtools.RasterCurve">
      <summary>Defines a curve. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterCurve" /> class defines the curve to be used with the <see cref="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCurve,Leadtools.RasterRegionCombineMode)" /> method to 
            draw a curve using an array of <see cref="T:Leadtools.LeadPoint" /> objects. The <see cref="M:Leadtools.RasterCurve.ToBezierPoints" /> method is used to convert a
            curve to a Bezier. The <see cref="T:Leadtools.RasterCurve" /> class can define two types of curves, <see cref="T:Leadtools.RasterCurveType">RasterCurveType.Standard</see> and
            <see cref="T:Leadtools.RasterCurveType">RasterCurveType.Bezier</see>.</para>
      </remarks>
      <example>
        <para>This sample creates a smooth region that goes through five points, and inverts the region.</para>
        <code lang="VB">        Public Sub RasterCurveExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' load an image
         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_curveinverted.bmp")
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' create a new curve object
         Dim curve As RasterCurve = New RasterCurve()

         ' define the the curve
         curve.Points.Add(New LeadPoint(30, 30))
         curve.Points.Add(New LeadPoint(30, 200))
         curve.Points.Add(New LeadPoint(130, 130))
         curve.Points.Add(New LeadPoint(75, 75))
         curve.Points.Add(New LeadPoint(130, 30))

         curve.Type = RasterCurveType.Standard
         curve.FillMode = LeadFillMode.Winding
         curve.Tension = 0.5
         curve.Close = RasterCurveClose.Close

         image.AddCurveToRegion(Nothing, curve, RasterRegionCombineMode.Set)

         ' do something with the region
         Dim cmd As InvertCommand = New InvertCommand()
         cmd.Run(image)

         ' save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         ' Cleanup
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterCurveExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // load an image
         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_curveinverted.bmp");
         RasterImage image = codecs.Load(srcFileName);

         // create a new curve object
         RasterCurve curve = new RasterCurve();

         // define the the curve
         curve.Points.Add(new LeadPoint(30, 30));
         curve.Points.Add(new LeadPoint(30, 200));
         curve.Points.Add(new LeadPoint(130, 130));
         curve.Points.Add(new LeadPoint(75, 75));
         curve.Points.Add(new LeadPoint(130, 30));

         curve.Type = RasterCurveType.Standard;
         curve.FillMode = LeadFillMode.Winding;
         curve.Tension = 0.5;
         curve.Close = RasterCurveClose.Close;

         image.AddCurveToRegion(null, curve, RasterRegionCombineMode.Set);

         // do something with the region
         InvertCommand cmd = new InvertCommand();
         cmd.Run(image);

         // save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         // Cleanup
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterCurve.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterCurve" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterCurve.ToBezierPoints">
      <summary>Converts the curve points to an array of Bezier points. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>An array of <see cref="T:Leadtools.LeadPoint" /> values that contain the Bezier points.</returns>
      <keywords>Bezier curves|Bezier splines</keywords>
      <remarks>
        <para>This method is used to convert a standard curve to an array of Bezier control points. A 
            standard curve (<see cref="T:Leadtools.RasterCurveType">RasterCurveType.Standard</see>)
            is defined by the current <see cref="T:Leadtools.RasterCurve" />. The standard curve passes through all of 
            the points in the <see cref="P:Leadtools.RasterCurve.Points" />
            collection, and is continuous at each point. This method can be used to draw a curve by 
            converting it to an array of Bezier points,
            using <see cref="M:System.Drawing.Graphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">System.Drawing.Graphics.DrawBeziers</see> to draw the equivalent 
            Bezier(s).</para>
      </remarks>
      <example>
        <para>This sample draws a smooth closed curve on a graphics that goes through five points.</para>
        <code lang="VB">        Public Sub ToBezierPointsExample()
         ' Define the curve
         Dim curve As RasterCurve = New RasterCurve()

         curve.Points.Add(New LeadPoint(130, 130))
         curve.Points.Add(New LeadPoint(130, 300))
         curve.Points.Add(New LeadPoint(230, 230))
         curve.Points.Add(New LeadPoint(175, 175))
         curve.Points.Add(New LeadPoint(230, 130))

         curve.Type = RasterCurveType.Standard
         curve.FillMode = LeadFillMode.Winding
         curve.Tension = 0.5
         curve.Close = RasterCurveClose.Close

         ' convert this curve into bezier points
         Dim bezierPoints As LeadPoint() = curve.ToBezierPoints()

         ' Draw this curve on a bitmap
         Using btmp As New System.Drawing.Bitmap(400, 400)
            Using g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(btmp)
               g.FillRectangle(System.Drawing.Brushes.White, New System.Drawing.Rectangle(0, 0, 400, 400))

               ' Convert the LeadPoint array to a Point array
               Dim pts(bezierPoints.Length - 1) As System.Drawing.Point
               For i As Integer = 0 To bezierPoints.Length - 1
                  pts(i) = New System.Drawing.Point(bezierPoints(i).X, bezierPoints(i).Y)
               Next

               g.DrawBeziers(System.Drawing.Pens.Black, pts)
            End Using

            ' save this image to disk
            Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ToBezierPoints.bmp")
            btmp.Save(fileName, System.Drawing.Imaging.ImageFormat.Bmp)

         End Using
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ToBezierPointsExample()
      {
         // Define the curve
         RasterCurve curve = new RasterCurve();

         curve.Points.Add(new LeadPoint(130, 130));
         curve.Points.Add(new LeadPoint(130, 300));
         curve.Points.Add(new LeadPoint(230, 230));
         curve.Points.Add(new LeadPoint(175, 175));
         curve.Points.Add(new LeadPoint(230, 130));

         curve.Type = RasterCurveType.Standard;
         curve.FillMode = LeadFillMode.Winding;
         curve.Tension = 0.5;
         curve.Close = RasterCurveClose.Close;

         // convert this curve into bezier points
         LeadPoint[] bezierPoints = curve.ToBezierPoints();

         // Draw this curve on a bitmap
         using(System.Drawing.Bitmap btmp = new System.Drawing.Bitmap(400, 400))
         {
            using(System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(btmp))
            {
               g.FillRectangle(System.Drawing.Brushes.White, new System.Drawing.Rectangle(0, 0, 400, 400));

               // Convert the LeadPoint array to a Point array
               System.Drawing.Point[] pts = new System.Drawing.Point[bezierPoints.Length];
               for(int i = 0; i &lt; bezierPoints.Length; i++)
               {
                  pts[i] = new System.Drawing.Point(bezierPoints[i].X, bezierPoints[i].Y);
               }

               g.DrawBeziers(System.Drawing.Pens.Black, pts);
            }

            // save this image to disk
            string fileName = Path.Combine(LEAD_VARS.ImagesDir, "ToBezierPoints.bmp");
            btmp.Save(fileName, System.Drawing.Imaging.ImageFormat.Bmp);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterCurve.Type">
      <summary>Gets or sets a value that indicates the type of curve being defined. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterCurveType" /> enumeration value that indicates the type of curve being defined.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterCurve.Points">
      <summary>The curve points. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A collection of <see cref="T:Leadtools.LeadPoint" /> objects that define the curve points.</value>
      <remarks>
            The number of points in the <see cref="P:Leadtools.RasterCurve.Points" /> collection obey the following rules:
            <list type="bullet"><item><description>If <see cref="P:Leadtools.RasterCurve.Type" /> is <see cref="T:Leadtools.RasterCurveType">RasterCurveType.Bezier</see>, the number of points in <see cref="P:Leadtools.RasterCurve.Points" /> must be
            3n + 1, where n &gt;= 1. For example, the number of points can be 4, 7, 10, 13, and so on.</description></item><item><description>If <see cref="P:Leadtools.RasterCurve.Type" /> is <see cref="T:Leadtools.RasterCurveType">RasterCurveType.Standard</see>, the number of points in <see cref="P:Leadtools.RasterCurve.Points" /> must be
            greater than or equal to 3. For example, the number of points can be 3, 4, 5, 6, and so on.</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterCurve.FillMode">
      <summary>Gets or sets a value that indicates how to handle complex crossing lines. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.LeadFillMode" /> enumeration value that indicates how to handle complex crossing lines.</value>
      <remarks>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </term>
              <description>All pixels that are inside the resulting exterior lines are in the region.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </term>
              <description>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</description>
            </item>
          </list>
        </para>
        <para>
          <img src="CurveFillMode.gif" />
        </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterCurve.Tension">
      <summary>Gets or sets a value that indicates how straight to make the curves that connect points. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>An <see cref="T:System.Double" /> value that indicates how straight to make the curves that connect points.  Valid
            values are between 0.0 and 1.0.</value>
      <remarks>
        <para>This value is used only when <see cref="P:Leadtools.RasterCurve.Type" /> is <see cref="T:Leadtools.RasterCurveType">RasterCurveType.Standard</see>. Valid values are between 0.0 and 1.0, where 0.0
            indicates straight lines, and 1.0 indicates lines with the highest curvature. A typical value for dTension is 0.5.</para>
        <para>
          <img src="CurveTension.gif" />
        </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterCurve.Close">
      <summary>Gets or sets a value that indicates how the curve is closed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterCurveClose" /> enumeration value that indicates how the curve is closed.</value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.RasterCurveClose" /> for more information.</para>
        <para>In the following diagram, the resulting region is shown in gray:</para>
        <para>
          <img src="CurveClose.gif" />
        </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterCurve" />.
            </example>
    </member>
    <member name="T:Leadtools.RasterColorSpaceFormat8">
      <summary>Indicates the raster image data 8-bit colorspace format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Rgb">
      <summary>
            Image data is in the RGB format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Yuv">
      <summary>
            Image data is in the YUV format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Cmyk">
      <summary>
            Image data is in the CMYK format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Hsv">
      <summary>
            Image data is in the HSV format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Hls">
      <summary>
            Image data is in the HLS format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Yiq">
      <summary>
            Image data is in the YIQ format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Cmy">
      <summary>
            Image data is in the CMY format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Lab">
      <summary>
            Image data is in the LAB format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Xyz">
      <summary>
            Image data is in the XYZ format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Ycck">
      <summary>
            Image data is in the YCCK format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Bgr">
      <summary>
            Image data is in the BGR format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Y41p">
      <summary>
            Image data is in the Y41P format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Uyvy">
      <summary>
            Image data is in the UYVY format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Yuy2">
      <summary>
            Image data is in the YUY2 format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Yvu9">
      <summary>
            Image data is in the YVU9 format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat8.Ycc">
      <summary>
            Image data is in the YCC format.
            </summary>
    </member>
    <member name="T:Leadtools.RasterColorSpaceFormat16">
      <summary>Indicates the raster image data 16-bit colorspace format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Rgb">
      <summary>
            Image data is in the RGB format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Yuv">
      <summary>
            Image data is in the YUV format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Yiq">
      <summary>
            Image data is in the YIQ format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Hsv">
      <summary>
            Image data is in the HSV format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Hls">
      <summary>
            Image data is in the HLS format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Cmy">
      <summary>
            Image data is in the CMY format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Cmyk">
      <summary>
            Image data is in the CMYK format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterColorSpaceFormat16.Ihs">
      <summary>
            Image data is in the IHS format.
            </summary>
    </member>
    <member name="T:Leadtools.RasterColorSpace">
      <summary>Provides support for converting buffered image data from one color space to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para>This example will load an image, resizes each line then saves the resized image back to disk.</para>
        <code lang="VB">        Public Sub RasterColorSpaceExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' load an image
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim image As RasterImage = codecs.Load(fileName)

         ' Allocate the input buffer for 24-bit RGB data 
         Dim inBuffer As Byte() = New Byte(image.Width * 3 - 1) {}

         ' Allocate the output buffer for 32-bit CMYK data
         Dim outBuffer As Byte() = New Byte(image.Width * 4 - 1) {}

         ' Get one row of data from the bitmap
         image.Access()
         image.GetRow(0, inBuffer, 0, image.BytesPerLine)
         image.Release()

         ' Convert the data from RGB in inBuffer to CMYK in outBuffer
         RasterColorSpace.Convert8(inBuffer, 0, outBuffer, 0, image.Width, RasterColorSpaceFormat8.Rgb, RasterColorSpaceFormat8.Cmyk)

         ' Cleanup
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterColorSpaceExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // load an image
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         RasterImage image = codecs.Load(fileName);

         // Allocate the input buffer for 24-bit RGB data 
         byte[] inBuffer = new byte[image.Width * 3];

         // Allocate the output buffer for 32-bit CMYK data
         byte[] outBuffer = new byte[image.Width * 4];

         // Get one row of data from the bitmap
         image.Access();
         image.GetRow(0, inBuffer, 0, image.BytesPerLine);
         image.Release();

         // Convert the data from RGB in inBuffer to CMYK in outBuffer
         RasterColorSpace.Convert8(inBuffer, 0, outBuffer, 0, image.Width, RasterColorSpaceFormat8.Rgb, RasterColorSpaceFormat8.Cmyk);

         // Cleanup
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterColorSpaceExample(RasterImage image)
      {
         // Allocate the input buffer for 24-bit RGB data 
         byte[] inBuffer = new byte[image.Width * 3];
         // Allocate the output buffer for 32-bit CMYK data
         byte[] outBuffer = new byte[image.Width * 4];

         // Get one row of data from the bitmap
         image.Access();
         image.GetRow(0, inBuffer, 0, image.BytesPerLine);
         image.Release();

         // Convert the data from RGB in inBuffer to CMYK in outBuffer
         RasterColorSpace.Convert8(inBuffer, 0, outBuffer, 0, image.Width, RasterColorSpaceFormat8.Rgb, RasterColorSpaceFormat8.Cmyk);

         // Cleanup
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterColorSpaceExample(ByVal image As RasterImage)
         ' Allocate the input buffer for 24-bit RGB data 
         Dim inBuffer As Byte() = New Byte(image.Width * 3 - 1){}
         ' Allocate the output buffer for 32-bit CMYK data
         Dim outBuffer As Byte() = New Byte(image.Width * 4 - 1){}

         ' Get one row of data from the bitmap
         image.Access()
         image.GetRow(0, inBuffer, 0, image.BytesPerLine)
         image.Release()

         ' Convert the data from RGB in inBuffer to CMYK in outBuffer
         RasterColorSpace.Convert8(inBuffer, 0, outBuffer, 0, image.Width, RasterColorSpaceFormat8.Rgb, RasterColorSpaceFormat8.Cmyk)

         ' Cleanup
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColorSpace.Convert8(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.RasterColorSpaceFormat8,Leadtools.RasterColorSpaceFormat8)">
      <summary>Converts 8-bit image data from one color space to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="inBuffer">An array of bytes containing the source image data</param>
      <param name="inBufferOffset">Zero-based index into <paramref name="inBuffer" /></param>
      <param name="outBuffer">An array of bytes to be filled with the converted image data</param>
      <param name="outBufferOffset">Zero-based index into <paramref name="outBuffer" /></param>
      <param name="width">Image width, in pixels</param>
      <param name="inFormat">The format of the input data</param>
      <param name="outFormat">The desired format of the converted data</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColorSpace" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterColorSpace.Convert16(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,Leadtools.RasterColorSpaceFormat16,Leadtools.RasterColorSpaceFormat16)">
      <summary>Converts 16-bit image data from one color space to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="inBuffer">An array of bytes containing the source image data</param>
      <param name="inBufferOffset">Zero-based index into <paramref name="inBuffer" /></param>
      <param name="outBuffer">An array of bytes to be filled with the converted image data</param>
      <param name="outBufferOffset">Zero-based index into <paramref name="outBuffer" /></param>
      <param name="width">Image width, in pixels</param>
      <param name="inFormat">The format of the input data</param>
      <param name="outFormat">The desired format of the converted data</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColorSpace" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterColorSpace.Convert8(System.IntPtr,System.IntPtr,System.Int32,Leadtools.RasterColorSpaceFormat8,Leadtools.RasterColorSpaceFormat8)">
      <summary>Converts 8-bit unmanaged image data from one color space to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inBuffer">An unmanaged pointer containing the source image data</param>
      <param name="outBuffer">An array of bytes to be filled with the converted image data</param>
      <param name="width">Image width, in pixels</param>
      <param name="inFormat">The format of the input data</param>
      <param name="outFormat">The desired format of the converted data</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColorSpace" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterColorSpace.Convert16(System.IntPtr,System.IntPtr,System.Int32,Leadtools.RasterColorSpaceFormat16,Leadtools.RasterColorSpaceFormat16)">
      <summary>Converts 16-bit unmanaged image data from one color space to another. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="inBuffer">An unmanaged pointer containing the source image data</param>
      <param name="outBuffer">An array of bytes to be filled with the converted image data</param>
      <param name="width">Image width, in pixels</param>
      <param name="inFormat">The format of the input data</param>
      <param name="outFormat">The desired format of the converted data</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterColorSpace" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.ResizeCommand">
      <summary>Resizes the image from an existing image, and puts the resized image into a destination image, leaving the original image intact. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Resizing</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.ResizeCommand" /> command works by resizing the image data passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method into the image
            passed to the <see cref="P:Leadtools.ImageProcessing.ResizeCommand.DestinationImage" /> property.</para>
        <para>The destination image must be intialized with the correct <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see> and
            <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see> of the new, resized image.</para>
        <para>This command does not change the source image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method. If you want to resize an image without creating
            a new version, use the <see cref="T:Leadtools.ImageProcessing.SizeCommand" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image then resize into an existing smaller image</para>
        <code lang="VB">        Public Sub ResizeCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "ResizeCommand.bmp")

         ' Load the source image from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         ' Resize the source image into the destination image
         Dim command As ResizeCommand = New ResizeCommand()
         command.DestinationImage = destImage
         command.Flags = RasterSizeFlags.Bicubic
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ResizeCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "ResizeCommand.bmp");

         // Load the source image from disk
         RasterImage srcImage = codecs.Load(srcFileName);

         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         // Resize the source image into the destination image
         ResizeCommand command = new ResizeCommand();
         command.DestinationImage = destImage;
         command.Flags = RasterSizeFlags.Bicubic;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ResizeCommandExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         // Resize the source image into the destination image
         ResizeCommand command = new ResizeCommand();
         command.DestinationImage = destImage;
         command.Flags = RasterSizeFlags.Bicubic;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ResizeCommandExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         ' Resize the source image into the destination image
         Dim command As ResizeCommand = New ResizeCommand()
         command.DestinationImage = destImage
         command.Flags = RasterSizeFlags.Bicubic
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ResizeCommand.#ctor">
      <summary>Initializes a instance of the <see cref="T:Leadtools.ImageProcessing.ResizeCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ResizeCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ResizeCommand.#ctor(Leadtools.RasterImage,Leadtools.RasterSizeFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ResizeCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="destinationImage">The destination image for the resize.</param>
      <param name="flags">Flags that determine resizing options.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.ResizeCommand" /> command works by resizing the image data passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method into the image
            passed to <paramref name="destinationImage" />.</para>
        <para>The destination image must be intialized with the correct <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see> and
            <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see> of the new, resized image.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ResizeCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ResizeCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ResizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.ResizeCommand.DestinationImage">
      <summary>Gets or sets the destination image for the resize. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The destination image for the resize.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.ResizeCommand" /> command works by resizing the image data passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method into the image
            passed to <see cref="P:Leadtools.ImageProcessing.ResizeCommand.DestinationImage" /> property.</para>
        <para>The destination image must be intialized with the correct <see cref="P:Leadtools.RasterImage.Width">RasterImage.Width</see> and
            <see cref="P:Leadtools.RasterImage.Height">RasterImage.Height</see> of the new, resized image.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ResizeCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ResizeCommand.Flags">
      <summary>Flags that determine resizing options. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Flags that determine resizing options.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ResizeCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CropCommand">
      <summary>Crops the image, resulting in an image that is the size of the specified rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Trim|Crop|Cropping</keywords>
      <remarks>
        <para>If a region is defined for the image, the region is also cropped if necessary.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example trims 100 pixels off of each side of an image.</para>
        <code lang="VB">        Public Sub CropCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CropCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Crop 100 pixels from each side of the image
         Dim command As CropCommand = New CropCommand()
         command.Rectangle = New LeadRect(100, 100, image.Width - 100, image.Height - 100)
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CropCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CropCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Crop 100 pixels from each side of the image
         CropCommand command = new CropCommand();
         command.Rectangle = new LeadRect(
            100,
            100,
            image.Width - 100,
            image.Height - 100);
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CropCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Crop 100 pixels from each side of the image
         CropCommand command = new CropCommand();
         command.Rectangle = new LeadRect(
            100,
            100,
            image.Width - 100,
            image.Height - 100);
         command.Run(image);

         // Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CropCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Crop 100 pixels from each side of the image
         Dim command As CropCommand = New CropCommand()
         command.Rectangle = New LeadRect(100, 100, image.Width - 100, image.Height - 100)
         command.Run(image)

         ' Save it to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CropCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CropCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CropCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CropCommand.#ctor(Leadtools.LeadRect)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rc">The rectangle area to which the image will be cropped.</param>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CropCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CropCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CropCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CropCommand.Rectangle">
      <summary>Gets or sets the rectangle area to which the image will be cropped. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The rectangle area to which the image will be cropped.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CropCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand">
      <summary>Converts a 1-, 4-, 8-, 16-, 24-, or 32-bit <see cref="T:Leadtools.RasterImage" /> to an 8-bit, 12-bit, or 16-bit grayscale image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Grayscale images|Lookup tables|LUTs|RGB</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" /> command works by creating a new image in the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.DestinationImage" />
            property from the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.</para>
        <para>The destination image will have either 8, 12, or 16 bits/pixel grayscale values.</para>
        <para>When converting to 12-bit or 16-bit grayscale, a Lookup table (LUT) is not used. When converting to 8-bit grayscale, a
            LUT is used to get the RGB for each input pixel. The grayscale value corresponding to that RGB triple is used in the
            destination image</para>
        <para>
          <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.LowBit" /> and <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.HighBit" /> are used when
            converting to 12-bit or 16-bit grayscale, So the appropriate values must set before calling the
            <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.</para>
        <para>This command does not support 32-bit grayscale images.</para>
        <para>This command does not support signed images.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>
      <example>
        <para>This example loads an image and changes it to 16-bit grayscale.</para>
        <code lang="VB">      Public Sub CreateGrayscaleImageCommandExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGrayscaleImage.bmp")

         ' Load the source image from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Create a grayscale image
         Dim cmd As New CreateGrayscaleImageCommand()
         cmd.BitsPerPixel = 16
         cmd.LowBit = 0
         cmd.HighBit = 15
         cmd.Run(srcImage)

         Dim destImage As RasterImage = cmd.DestinationImage

         ' Save the image to disk
         codecs.Save( _
            destImage, _
            destFileName, _
            RasterImageFormat.Bmp, _
            16)

         ' Clean up
         destImage.Dispose()
         srcImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateGrayscaleImageCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateGrayscaleImage.bmp");

         // Load the source image from disk
         RasterImage srcImage = codecs.Load(srcFileName);

         // Create a grayscale image
         CreateGrayscaleImageCommand cmd = new CreateGrayscaleImageCommand();
         cmd.BitsPerPixel = 16;
         cmd.LowBit = 0;
         cmd.HighBit = 15;
         cmd.Run(srcImage);

         RasterImage destImage = cmd.DestinationImage;

         // Save the image to disk
         codecs.Save(
            destImage,
            destFileName,
            RasterImageFormat.Bmp,
            16);

         // Clean up
         destImage.Dispose();
         srcImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CreateGrayscaleImageCommandExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create a grayscale image
         CreateGrayscaleImageCommand cmd = new CreateGrayscaleImageCommand();
         cmd.BitsPerPixel = 16;
         cmd.LowBit = 0;
         cmd.HighBit = 15;
         cmd.Run(srcImage);

         RasterImage destImage = cmd.DestinationImage;

         // Save the image to disk
         codecs.Save(
            destImage,
            destStream,
            RasterImageFormat.Bmp,
            16);

         // Clean up
         destImage.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CreateGrayscaleImageCommandExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create a grayscale image
         Dim cmd As CreateGrayscaleImageCommand = New CreateGrayscaleImageCommand()
         cmd.BitsPerPixel = 16
         cmd.LowBit = 0
         cmd.HighBit = 15
         cmd.Run(srcImage)

         Dim destImage As RasterImage = cmd.DestinationImage

         ' Save the image to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 16)

         ' Clean up
         destImage.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="bitsPerPixel">Value that indicates the number of bits for the destination image. Valid values are 8, 12, or 16.</param>
      <param name="lowBit">Value that indicates the low bit used for window leveling when the <paramref name="bitsPerPixel" />
            is 12 or 16.</param>
      <param name="highBit">Value that indicates the high bit used for window leveling when the <paramref name="bitsPerPixel" />
            is 12 or 16.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.BitsPerPixel">
      <summary>Gets or sets the number of bits for the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of bits for the destination image. Valid values are 8, 12, or 16.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.LowBit">
      <summary>Gets or sets the low bit used for window leveling when the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.BitsPerPixel" /> is 12 or 16. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The low bit used for window leveling when the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.BitsPerPixel" /> is 12 or 16.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.HighBit">
      <summary>Gets or sets the high bit used for window leveling when the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.BitsPerPixel" /> is 12 or 16. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The high bit used for window leveling when the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.BitsPerPixel" /> is 12 or 16.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.DestinationImage">
      <summary>Gets the resulting image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resulting <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" /> command works by creating a new image in the <see cref="P:Leadtools.ImageProcessing.CreateGrayscaleImageCommand.DestinationImage" /> property from
            the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CreateGrayscaleImageCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterBufferResize">
      <summary>Provides support for resizing image data buffers. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para>This example will load an image, resizes each line then saves the resized image back to disk.</para>
        <code lang="VB">        Public Sub RasterBufferResizeExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_resized.bmp")

         ' Load the source image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         Dim destWidth As Integer = srcImage.Width \ 2
         Dim destHeight As Integer = srcImage.Height \ 2

         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         ' allocate buffer for one scanline from source image
         Dim scanLine As Byte() = New Byte(srcImage.BytesPerLine - 1) {}

         ' resize it
         Dim bufferResize As RasterBufferResize = New RasterBufferResize()

         ' Initialize the resize process.
         bufferResize.Start(srcImage.Width, srcImage.Height, destImage.Width, destImage.Height)

         srcImage.Access()
         destImage.Access()

         ' Current destination row number
         Dim destRow As Integer = 0
         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            ' Get a scanline from the source image and resize it
            srcImage.GetRow(i, scanLine, 0, srcImage.BytesPerLine)
            bufferResize.ResizeBuffer(scanLine, 0, i, srcImage.BitsPerPixel)

            ' Output as many or as few rows as ResizeBuffer supplies
            Dim j As Integer = 0
            Do While j &lt; bufferResize.CopyRepetitions
               destImage.SetRow(destRow, scanLine, 0, bufferResize.LineWidth * 3)
               destRow += 1
               j += 1
            Loop
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         bufferResize.Stop()

         ' Save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterBufferResizeExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_resized.bmp");

         // Load the source image
         RasterImage srcImage = codecs.Load(srcFileName);

         int destWidth = srcImage.Width / 2;
         int destHeight = srcImage.Height / 2;

         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         // allocate buffer for one scanline from source image
         byte[] scanLine = new byte[srcImage.BytesPerLine];

         // resize it
         RasterBufferResize bufferResize = new RasterBufferResize();

         // Initialize the resize process.
         bufferResize.Start(srcImage.Width, srcImage.Height, destImage.Width, destImage.Height);

         srcImage.Access();
         destImage.Access();

         // Current destination row number
         int destRow = 0;
         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            // Get a scanline from the source image and resize it
            srcImage.GetRow(i, scanLine, 0, srcImage.BytesPerLine);
            bufferResize.ResizeBuffer(scanLine, 0, i, srcImage.BitsPerPixel);

            // Output as many or as few rows as ResizeBuffer supplies
            for(int j = 0; j &lt; bufferResize.CopyRepetitions; j++)
            {
               destImage.SetRow(destRow, scanLine, 0, bufferResize.LineWidth * 3);
               destRow++;
            }
         }

         destImage.Release();
         srcImage.Release();

         bufferResize.Stop();

         // Save the destination image
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean up
         srcImage.Dispose();
         destImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterBufferResizeExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         int destWidth = srcImage.Width / 2;
         int destHeight = srcImage.Height / 2;

         // Create the destination image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            destWidth,
            destHeight,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         // allocate buffer for one scanline from source image
         byte[] scanLine = new byte[srcImage.BytesPerLine];

         // resize it
         RasterBufferResize bufferResize = new RasterBufferResize();

         // Initialize the resize process.
         bufferResize.Start(srcImage.Width, srcImage.Height, destImage.Width, destImage.Height);

         srcImage.Access();
         destImage.Access();

         // Current destination row number
         int destRow = 0;
         for(int i = 0; i &lt; srcImage.Height; i++)
         {
            // Get a scanline from the source image and resize it
            srcImage.GetRow(i, scanLine, 0, srcImage.BytesPerLine);
            bufferResize.ResizeBuffer(scanLine, 0, i, srcImage.BitsPerPixel);

            // Output as many or as few rows as ResizeBuffer supplies
            for(int j = 0; j &lt; bufferResize.CopyRepetitions; j++)
            {
               destImage.SetRow(destRow, scanLine, 0, bufferResize.LineWidth * 3);
               destRow++;
            }
         }

         destImage.Release();
         srcImage.Release();

         bufferResize.Stop();

         // Save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24);

         // Clean up
         srcImage.Dispose();
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterBufferResizeExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         Dim destWidth As Integer = srcImage.Width / 2
         Dim destHeight As Integer = srcImage.Height / 2

         ' Create the destination image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, destWidth, destHeight, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         ' allocate buffer for one scanline from source image
         Dim scanLine As Byte() = New Byte(srcImage.BytesPerLine - 1){}

         ' resize it
         Dim bufferResize As RasterBufferResize = New RasterBufferResize()

         ' Initialize the resize process.
         bufferResize.Start(srcImage.Width, srcImage.Height, destImage.Width, destImage.Height)

         srcImage.Access()
         destImage.Access()

         ' Current destination row number
         Dim destRow As Integer = 0
         Dim i As Integer = 0
         Do While i &lt; srcImage.Height
            ' Get a scanline from the source image and resize it
            srcImage.GetRow(i, scanLine, 0, srcImage.BytesPerLine)
            bufferResize.ResizeBuffer(scanLine, 0, i, srcImage.BitsPerPixel)

            ' Output as many or as few rows as ResizeBuffer supplies
            Dim j As Integer = 0
            Do While j &lt; bufferResize.CopyRepetitions
               destImage.SetRow(destRow, scanLine, 0, bufferResize.LineWidth * 3)
               destRow += 1
               j += 1
            Loop
            i += 1
         Loop

         destImage.Release()
         srcImage.Release()

         bufferResize.Stop()

         ' Save the destination image
         codecs.Save(destImage, destStream, RasterImageFormat.Bmp, 24)

         ' Clean up
         srcImage.Dispose()
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterBufferResize.#ctor">
      <summary>Initializes a new <see cref="T:Leadtools.RasterBufferResize" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets up information for the <see cref="M:Leadtools.RasterBufferResize.ResizeBuffer(System.Byte[],System.Int32,System.Int32,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="oldWidth">Specifies the original width of the image.</param>
      <param name="oldHeight">Specifies the original height of the image.</param>
      <param name="newWidth">Specifies the new width for the image.</param>
      <param name="newHeight">Specifies the new height for the image.</param>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterBufferResize.ResizeBuffer(System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>Resizes a buffer to the new size specified with the <see cref="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="buffer">The buffer containing the original scanline to resized.</param>
      <param name="bufferOffset">Zero-based index into <paramref name="buffer" />.</param>
      <param name="row">Current row of the original bitmap.</param>
      <param name="bitsPerPixel">Bits per pixel, which is the same for the original and the resized bitmap.</param>
      <remarks>
        <para>
          <paramref name="buffer" /> contains the buffer containing a line from the original image to be resized. Your code must allocate the
            buffer and copy the data into it before calling this method.</para>
        <para>The same buffer holds the data before and after it is resized. Therefore, the buffer must be big enough to hold whichever is
            larger. (The original line is larger when reducing an image; the resulting line is larger when enlarging the image.)</para>
        <para>Before calling this function, you must call the <see cref="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para>
        <para>When all lines have been processed, you must call the <see cref="M:Leadtools.RasterBufferResize.Stop" /> method.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterBufferResize.ResizeBuffer(System.IntPtr,System.Int32,System.Int32)">
      <summary>Resizes an unmanaged buffer to the new size specified with the <see cref="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="buffer">The unmanaged buffer containing the original scanline to resized.</param>
      <param name="row">Current row of the original bitmap.</param>
      <param name="bitsPerPixel">Bits per pixel, which is the same for the original and the resized bitmap.</param>
      <remarks>
        <para>
          <paramref name="buffer" /> contains the buffer containing a line from the original image to be resized. Your code must allocate the
            buffer and copy the data into it before calling this method.</para>
        <para>The same buffer holds the data before and after it is resized. Therefore, the buffer must be big enough to hold whichever is
            larger. (The original line is larger when reducing an image; the resulting line is larger when enlarging the image.)</para>
        <para>Before calling this function, you must call the <see cref="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)" /> method.</para>
        <para>When all lines have been processed, you must call the <see cref="M:Leadtools.RasterBufferResize.Stop" /> method.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="M:Leadtools.RasterBufferResize.Stop">
      <summary>Cleans up all data variables and buffers allocated by the <see cref="M:Leadtools.RasterBufferResize.Start(System.Int32,System.Int32,System.Int32,System.Int32)" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>You must call the <see cref="M:Leadtools.RasterBufferResize.Stop" /> method when all resizing operations is completed.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterBufferResize.LineWidth">
      <summary>Holds the resulting line width of the resized image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resulting line width of the resized image data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="P:Leadtools.RasterBufferResize.CopyRepetitions">
      <summary>Holds the required number of copy repetitions. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The number of times needed to copy the new resized line buffer to the new image.
            </value>
      <remarks>
        <para>When an image is being enlarged, some lines must be copied more than once. When an image is being 
            reduced, some lines must be eliminated (not copied at all).</para>
        <para>For example:
            <list type="bullet"><item><description>A value of 0 means that the line should not be copied.</description></item><item><description>A value of 1 means that the line should be copied once.</description></item><item><description>A value of 2 means that the line should be copied twice.</description></item><item><description>And so on ....</description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterBufferResize" />.</example>
    </member>
    <member name="T:Leadtools.RasterKernelType">
      <summary>Indicates the Leadtools Kernel type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterKernelType.Release">
      <summary>
            Kernel is a Release build
            </summary>
    </member>
    <member name="F:Leadtools.RasterKernelType.Evaluation">
      <summary>
            Kernel is an Evaluation build, and will expire at some point in the future.  Kernel will also display an evaluation message box during
            execution
            </summary>
    </member>
    <member name="F:Leadtools.RasterKernelType.Nag">
      <summary>
            Kernel is an Release build of the specialized products, which require additional licensing, and will display a specialized product notice
            message box during execution.
            </summary>
    </member>
    <member name="T:Leadtools.RasterSupportType">
      <summary>Indicates the optional LEADTOOLS feature to check. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see> and <see cref="T:Leadtools.Topics.ASpecialNoteaboutLoading12and16BitGrayscaleImages">A Special Note about Loading 12 and 16 Bit Grayscale Images</see>.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterSupportType.Document">
      <summary>
            Support for LEADTOOLS Document features (ABC, ABIC, JPEG 2000, JBIG2, NITF, CMW, Document Cleanup, Annotations, Windows Phone, Silverlight, JPIP and more). A LEADTOOLS Document license is required.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Barcodes1D">
      <summary>
            Support for reading and writing Linear bar codes. This is available in the LEADTOOLS Barcode 1D Module.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Barcodes2D">
      <summary>
            Support for reading and writing 2D bar codes. This is available in the LEADTOOLS Barcode 2D Module.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.RasterPdfRead">
      <summary>
            Support for loading PDF, PS and EPS file formats as raster images. Available in the LEADTOOLS PDF Plug in. If this support is locked, the PDF, PS and EPS files will not be loaded.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.RasterPdfSave">
      <summary>
            Support for saving raster images as a PDF file. Available in selected LEADTOOLS products.  Includes support for MRC PDF compression and JBIG2 support.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.PdfAdvanced">
      <summary>
            Support for advanced PDF  features.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Jbig2">
      <summary>
            Support for the JBIG2 file format.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrAdvantage">
      <summary>
            Support for the OCR features provided by the OCR Advantage engine. OCR add-on to Document and Medical Imaging toolkits.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrPlus">
      <summary>
            Support for the OCR features provided by the OCR Plus engine. OCR add-on to Document and Medical Imaging toolkits.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrProfessional">
      <summary>
            Support for the OCR features provided by the OCR Professional engine. OCR add-on to Document and Medical Imaging toolkits.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrProfessionalAsian">
      <summary>
            Support for the OCR Professional engine to recognize Asian text. Available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrArabic">
      <summary>
            Support for Arabic OCR.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrAdvantagePdfOutput">
      <summary>
            Support for saving OCR results from the OCR Advantage engine as a PDF file. This license is in addition to the cost of the OCR Plugin or Document Imaging.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrPlusPdfOutput">
      <summary>
            Support for saving OCR results from the OCR Plus engine as a PDF file. This license is in addition to the cost of the OCR Plugin or Document Imaging.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrProfessionalPdfOutput">
      <summary>
            Support for saving OCR results from the OCR Professional and Professional Asian engines as a PDF file. This license is in addition to the cost of the OCR Plugin or Document Imaging.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.OcrArabicPdfOutput">
      <summary>
            Support for saving OCR results from the OCR Arabic engine as a PDF file. This license is in addition to the cost of the OCR Plugin or Document Imaging.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Omr">
      <summary>
            Support for the LEADTOOLS OMR Module. This supports the recognition of check boxes. Available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.IcrPlus">
      <summary>
            Support for the ICR Module within the OCR Plus engine. This supports the recognition of handwritten text. Available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.IcrProfessional">
      <summary>
            Support for the ICR Module within the OCR Professional engine. This supports the recognition of handwritten text. Available in selected LEADTOOLS products
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.DocumentWriters">
      <summary>
            Support for LEADTOOLS Document Writer functionality.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.DocumentWritersPdf">
      <summary>
            Support for PDF output when using the LEADTOOLS Document Writer functionality.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.PrintDriver">
      <summary>
            Support for LEADTOOLS Virtual Printer Driver functionality.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.PrintDriverServer">
      <summary>
            Support for LEADTOOLS Virtual Printer Driver functionality on Windows Server.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.PrintDriverNetwork">
      <summary>
            Support for LEADTOOLS Virtual Network Printer Driver functionality.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Forms">
      <summary>
            Support for Forms Recognition and Processing functionality. Available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.MediaWriter">
      <summary>
            Support for Data DVD Writing.  Available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Medical">
      <summary>
            Support for the DICOM file format, document, and all medical features excluding DICOM Communication. Also includes support for 12 bit grayscale, 16-bit grayscale, 48-bit color and 64-bit images.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Medical3d">
      <summary>
            Support for Medical 3D features.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.DicomCommunication">
      <summary>
            Support for everything unlocked by L_SUPPORT_MEDICAL, plus support for DICOM Network Communication.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Ccow">
      <summary>
            Support for CCOW features.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Vector">
      <summary>
            Support for the Vector Features and Vector file formats. available in selected LEADTOOLS products.
            </summary>
    </member>
    <member name="F:Leadtools.RasterSupportType.Cloud">
      <summary>
            Support for LEADTOOLS Cloud SDK.
            </summary>
    </member>
    <member name="T:Leadtools.RasterSupport">
      <summary>The <see cref="T:Leadtools.RasterSupport" /> class provides methods for setting a LEADTOOLS runtime license and unlocking support for optional LEADTOOLS features,
            such as LEADTOOLS Document/Medical capabilities. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.
            </remarks>
      <example>
        <para>This example will set a runtime license and check for Document support.  You must obtain the proper license and developer key from LEAD.</para>
        <code lang="VB">      Dim MY_LICENSE_FILE As String = "d:\temp\TestLic.lic"
      Dim MY_DEVELOPER_KEY As String = "xyz123abc"

        Public Sub SetLicenseFileExample()
            RasterSupport.SetLicense(MY_LICENSE_FILE, MY_DEVELOPER_KEY)
            Dim isLocked As Boolean = RasterSupport.IsLocked(RasterSupportType.Document)
            If (isLocked) Then
                Console.WriteLine("Document support is locked")
            Else
                Console.WriteLine("Document support is unlocked")
            End If
        End Sub</code>
        <code lang="CS">      string MY_LICENSE_FILE = "d:\\temp\\TestLic.lic";
      string MY_DEVELOPER_KEY = "xyz123abc";

      public void SetLicenseFileExample()
      {
         RasterSupport.SetLicense(MY_LICENSE_FILE, MY_DEVELOPER_KEY);
         bool isLocked = RasterSupport.IsLocked(RasterSupportType.Document);
         if(isLocked)
            Console.WriteLine("Document support is locked");
         else
            Console.WriteLine("Document support is unlocked");
      }</code>
        <code lang="SilverlightCSharp">      internal static Uri GetPackResourceUri(string resourcePath)
      {
         System.Reflection.Assembly a = System.Reflection.Assembly.GetCallingAssembly();

         // Pull out the short name.
         string assemblyShortName = a.ToString().Split(',')[0];

         string uriString = "/" + assemblyShortName + ";component/" + resourcePath;
         return new Uri(uriString, UriKind.Relative);
      }

      [TestMethod]
      public void UnlockDocumentSupportExample()
      {
         //The license file should be added as a Resource to your project.
         System.Windows.Resources.StreamResourceInfo licenseInfo = Application.GetResourceStream(GetPackResourceUri("Resources/License.lic"));
         string developerKey = "Place Developer Key here";
         RasterSupport.SetLicense(licenseInfo.Stream, developerKey);

         // Check if the support is locked now
         bool isLocked = RasterSupport.IsLocked(RasterSupportType.Document);
         if(isLocked)
            Console.WriteLine("Document support is locked");
         else
            Console.WriteLine("Document support is unlocked");
      }</code>
        <code lang="SilverlightVB">     Friend Shared Function GetPackResourceUri(ByVal resourcePath As String) As Uri
       Dim a As System.Reflection.Assembly = System.Reflection.Assembly.GetCallingAssembly()

       ' Pull out the short name.
       Dim assemblyShortName As String = a.ToString().Split(","c)(0)

       Dim uriString As String = "/" &amp; assemblyShortName &amp; ";component/" &amp; resourcePath
       Return New Uri(uriString, UriKind.Relative)
     End Function


      &lt;TestMethod()&gt; _
     Public Sub UnlockDocumentSupportExample()
       'The license file should be added as a Resource to your project.
       Dim licenseInfo As System.Windows.Resources.StreamResourceInfo = Application.GetResourceStream(GetPackResourceUri("Resources/License.lic"))
       Dim developerKey As String = "Place Developer Key here"
       RasterSupport.SetLicense(licenseInfo.Stream, developerKey)

       ' Check if the support is locked now
       Dim isLocked As Boolean = RasterSupport.IsLocked(RasterSupportType.Document)
       If isLocked Then
         Console.WriteLine("Document support is locked")
       Else
         Console.WriteLine("Document support is unlocked")
       End If
     End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterSupport.Unlock(Leadtools.RasterSupportType,System.String)">
      <summary>
        <para>
            Unlocks support for an optional feature, such as LEADTOOLS Document/Medical capabilities.
            </para>
        <para>
          <strong>NOTE: This method has been marked as obsolete and no longer serves any purpose.</strong>
        </para>
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html">
          <img src="dotnet.png" alt=".NET support" border="0" />
        </a>
        <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html">
          <img src="silverlight.png" alt="Silverlight support" border="0" />
        </a>
      </summary>
      <param name="support">Support type</param>
      <param name="key">key string</param>
      <remarks>
        <para>
          <strong>NOTE: This method has been marked as obsolete and no longer serves any purpose.</strong>
        </para>
        <para>In order to set a runtime license and unlock optional features such as 
            <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">LEADTOOLS Imaging Pro, Document and Medical</see> capabilities, 
            or PDF support, you must use <see cref="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)">SetLicense</see>.</para>
        <para>For information about LEADTOOLS Document/Medical capabilities, contact LEAD.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterSupport.IsLocked(Leadtools.RasterSupportType)">
      <summary>Indicates whether support is locked for an optional feature, such as LEADTOOLS Document/Medical capabilities. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="support">Support type</param>
      <returns>true or false</returns>
      <remarks>
        <para>To set a runtime license and unlock a feature, use the <see cref="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)" /> method.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see> 
            and <see cref="T:Leadtools.Topics.ASpecialNoteaboutLoading12and16BitGrayscaleImages">A Special Note about Loading 12 and 16 Bit Grayscale Images</see>.</para>
        <para>For information about LEADTOOLS Document/Medical capabilities, contact LEAD.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterSupport" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)">
      <summary>Sets the runtime license for LEADTOOLS and unlocks support for optional features such as <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">LEADTOOLS Imaging Pro, Document and Medical</see> capabilities, or PDF support. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="licenseFile">Character string containing the name of the LEADTOOLS runtime license file to load.</param>
      <param name="developerKey">Character string containing the developer key.</param>
      <remarks>
        <para>
            You must use this function to set the runtime license for LEADTOOLS and to unlock support for any optional features that you have licensed. 
            If you do not set a runtime license, your application will display a "nag" message dialog at runtime, indicating that you have developed the 
            application without a valid runtime license.
            </para>
        <para>
            In order to obtain a runtime license and developer key, you must contact LEAD. For more information, refer to About LEADTOOLS Runtime Licenses.
            </para>
        <para>
            For information about LEADTOOLS Document/Medical capabilities, contact LEAD.
            </para>
        <para>
            To determine if support for optional features has been unlocked, use <see cref="M:Leadtools.RasterSupport.IsLocked(Leadtools.RasterSupportType)" /></para>
        <para>
            To set the runtime license from a memory buffer instead of disk file, use <see cref="M:Leadtools.RasterSupport.SetLicense(System.Byte[],System.String)">SetLicense(byte[] licenseBuffer, string developerKey)</see>.
            </para>
        <para>
          <b>NOTE:</b> As an alternative to calling RasterSupport.SetLicense, you can specify your runtime
            license in the Leadtools.dll.config file.  For more information, see <see cref="T:Leadtools.Topics.LEADTOOLSConfigLicense">LEADTOOLS Config License</see>.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterSupport" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterSupport.SetLicense(System.IO.Stream,System.String)">
      <summary>Sets the runtime license for LEADTOOLS and unlocks support for optional features such as <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">LEADTOOLS Imaging Pro, Document and Medical</see> capabilities, or PDF support. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="licenseStream">
        <see cref="T:System.IO.Stream" /> containing the LEADTOOLS runtime license to load.</param>
      <param name="developerKey">Character string containing the developer key.</param>
      <remarks>
        <para>
            You must use this function to set the runtime license for LEADTOOLS and to unlock support for any optional features that you have licensed. 
            If you do not set a runtime license, your application will display a "nag" message dialog at runtime, indicating that you have developed the 
            application without a valid runtime license.
            </para>
        <para>
            In order to obtain a runtime license and developer key, you must contact LEAD. For more information, refer to About LEADTOOLS Runtime Licenses.
            </para>
        <para>
            For information about LEADTOOLS Document/Medical capabilities, contact LEAD.
            </para>
        <para>
            To determine if support for optional features has been unlocked, use <see cref="M:Leadtools.RasterSupport.IsLocked(Leadtools.RasterSupportType)" /></para>
        <para>
            To set the runtime license from a memory buffer instead of stream, use <see cref="M:Leadtools.RasterSupport.SetLicense(System.Byte[],System.String)">SetLicense(byte[] licenseBuffer, string developerKey)</see>.
            </para>
        <para>
          <b>NOTE:</b> As an alternative to calling RasterSupport.SetLicense, you can specify your runtime
            license in the Leadtools.dll.config file.  For more information, see <see cref="T:Leadtools.Topics.LEADTOOLSConfigLicense">LEADTOOLS Config License</see>.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterSupport" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterSupport.SetLicense(System.Byte[],System.String)">
      <summary>Sets the runtime license for LEADTOOLS and unlocks support for optional features such as <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">LEADTOOLS Imaging Pro, Document and Medical</see> capabilities, or PDF support. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="licenseBuffer">Byte array containing the LEADTOOLS runtime license to load.</param>
      <param name="developerKey">Character string containing the developer key.</param>
      <remarks>
        <para>
            You must use this function to set the runtime license for LEADTOOLS and to unlock support for any optional features that you have licensed. 
            If you do not set a runtime license, your application will display a "nag" message dialog at runtime, indicating that you have developed the 
            application without a valid runtime license.
            </para>
        <para>
            In order to obtain a runtime license and developer key, you must contact LEAD. For more information, refer to About LEADTOOLS Runtime Licenses.
            </para>
        <para>
            For information about LEADTOOLS Document/Medical capabilities, contact LEAD.
            </para>
        <para>
            To determine if support for optional features has been unlocked, use <see cref="M:Leadtools.RasterSupport.IsLocked(Leadtools.RasterSupportType)" /></para>
        <para>
            To set the runtime license from a disk file instead of memory buffer, use <see cref="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)">SetLicense(string licenseFile, string developerKey)</see>.
            </para>
        <para>
          <b>NOTE:</b> As an alternative to calling RasterSupport.SetLicense, you can specify your runtime
            license in the Leadtools.dll.config file.  For more information, see <see cref="T:Leadtools.Topics.LEADTOOLSConfigLicense">LEADTOOLS Config License</see>.
            </para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterSupport" />.
            </example>
    </member>
    <member name="M:Leadtools.RasterSupport.ResetLicense">
      <summary>Clears any LEADTOOLS runtime licenes that were previous set by calling <see cref="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            To set a LEADTOOLS runtime license, call <see cref="M:Leadtools.RasterSupport.SetLicense(System.String,System.String)" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterSupport.KernelType">
      <summary>Gets the type of the LEADTOOLS kernel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Aa <see cref="T:Leadtools.RasterKernelType" /> enumeration member indicating the LEADTOOLS kernel type.</value>
      <remarks>
            There are 3 types of LEADTOOLS kernels, as described in the following table:
            <list type="table"><listheader><term>Kernel</term><description>Description</description></listheader><item><term>Release</term><description>
                 This is the Release kernel.
                 </description></item><item><term>Nag</term><description>
                 This is a special build of the kernel, which has specialty features (such as Document Imaging and Medical Imaging)
                 unlocked. This kernel is provided to Document and Medical imaging customers, and displays a "nag" message during execution.
                 To remove the nag, you must sign a royalty agreement.  For more information, contact
                 <a href="mailto::sales@leadtools.com">sales@leadtools.com</a>.
                 </description></item><item><term>Evaluation</term><description>
                 This is the Evaluation kernel, which has all features unlocked, but displays an "eval" message during execution.
                 This kernel will also expire.
                 </description></item></list></remarks>
      <example>
        <para>This example will check the LEADTOOLS kernel type and whether it has expired</para>
        <code lang="VB">        Public Sub LeadtoolsKernelExample()
         ' show current kernel
         Select Case RasterSupport.KernelType
            Case RasterKernelType.Release
               Console.WriteLine("Release kernel")

            Case RasterKernelType.Evaluation
               Console.WriteLine("Evaluation kernel")
               ' show if the kernel has expired
               If RasterSupport.KernelExpired Then
                  Console.WriteLine("Evaluation kernel has expired")
               Else
                  Console.WriteLine("Evaluation kernel has not expired yet")
               End If
         End Select
      End Sub</code>
        <code lang="CS">      public void LeadtoolsKernelExample()
      {
         // show current kernel
         switch(RasterSupport.KernelType)
         {
            case RasterKernelType.Release:
               Console.WriteLine("Release kernel");
               break;

            case RasterKernelType.Evaluation:
               Console.WriteLine("Evaluation kernel");
               // show if the kernel has expired
               if(RasterSupport.KernelExpired)
                  Console.WriteLine("Evaluation kernel has expired");
               else
                  Console.WriteLine("Evaluation kernel has not expired yet");
               break;
         }
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      public void LeadtoolsKernelExample()
      {
         // show current kernel
         switch(RasterSupport.KernelType)
         {
            case RasterKernelType.Release:
               Console.WriteLine("Release kernel");
               break;
            case RasterKernelType.Evaluation:
               Console.WriteLine("Evaluation kernel");
               // show if the kernel has expired
               if(RasterSupport.KernelExpired)
                  Console.WriteLine("Evaluation kernel has expired");
               else
                  Console.WriteLine("Evaluation kernel has not expired yet");
               break;
         }
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod&gt; _
      Public Sub LeadtoolsKernelExample()
         ' show current kernel
         Select Case RasterSupport.KernelType
            Case RasterKernelType.Release
               Console.WriteLine("Release kernel")
            Case RasterKernelType.Evaluation
               Console.WriteLine("Evaluation kernel")
               ' show if the kernel has expired
               If RasterSupport.KernelExpired Then
                  Console.WriteLine("Evaluation kernel has expired")
               Else
                  Console.WriteLine("Evaluation kernel has not expired yet")
               End If
         End Select
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterSupport.KernelExpired">
      <summary>Checks whether the LEADTOOLS kernel has expired. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the LEADTOOLS kernel has expired; false otherwise.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.RasterSupport.KernelType" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterSupport.ConfigLicenseStatus">
      <summary>Gets the status of the <see cref="T:Leadtools.Topics.LEADTOOLSConfigLicense">LEADTOOLS Config License</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value> A <see cref="T:Leadtools.RasterExceptionCode" /> value the indicates if a valid license is found and set. If the license is found and set it returns <stong>Success</stong>. Otherwise, it will return an error, typically <strong>InvalidParameter</strong>.</value>
      <remarks>
            Check this property to determine the status of the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">LEADTOOLS Runtime License</see> 
            that was set in the <see cref="T:Leadtools.Topics.LEADTOOLSConfigLicense">LEADTOOLS Config License</see>.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.RasterRegionXForm">
      <summary>Provides data for translating between region coordinates and external representations of those coordinates. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>All region methods accept a null reference (Nothing in Visual Basic). In that case, no transformation occurs. The scalar fields default to
             1, the offsets default to 0, and the view perspective defaults to the image view perspective.</para>
        <para>Several of the LEADTOOLS methods for creating and working with an image region use coordinates from an external representation of the
             region, such as a shape drawn in a device context. To compensate for possible differences in view perspective, scaling, and display offsets,
             these LEADTOOLS methods require that you provide translation information in an <see cref="T:Leadtools.RasterRegionXForm" /> object.</para>
        <para>In most cases, the external representation of an image region is scaled and positioned relative to the display coordinates of a
             LEADTOOLS painting method. Therefore, the following table describes the fields to set in the <see cref="T:Leadtools.RasterRegionXForm" /> object, based on
             the parameters of the display methods.</para>
        <para>
             When assigning an external representation to an image, every point (Xa, Ya) in the an external representation is transformed
             (by <see cref="T:Leadtools.RasterRegionXForm" />) to point (Xc, Yc) in the image region as follows:</para>
        <para>
          <code>
             1. Add offsets:
                  Xb = Xa + XForm.XOffset
                  Yb = Ya + XForm.YOffset
            
             2. Multiply by scalars:
                  Xc = (Xb * XForm.XScalarNumerator) / XForm.XScalarDenominator
                  Yc = (Yb * XForm.YScalarNumerator) / XForm.YScalarDenominator
            
             3. Compensate for view perspective (updating Xc and Yc in place):
                  PointToImage(XForm.ViewPerspective, Xc, Yc)
             </code>
        </para>
        <para>
             When retrieving an external representation from an image, every point (Xa, Ya) in the image region is transformed
             (by <see cref="T:Leadtools.RasterRegionXForm" />) to point (Xc, Yc) in the external region as follows:</para>
        <para>
          <code>
             1. Compensate for view perspective (updating Xa and Ya in place):
                  PointFromImage(XForm.ViewPerspective, Xa, Ya)
            
             2. Mulitply by scalars:
                  Xb = (Xa * XForm.XScalarNumerator) / XForm.XScalarDenominator
                  Yb = (Ya * XForm.YScalarNumerator) / XForm.YScalarDenominator
            
             3. Add offsets:
                  Xc = Xb + XForm.XOffset
                  Yc = Yb + XForm.YOffset
             </code>
        </para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region.</see>.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.CreatingaRegion">Creating an Image Region</seealso>
      <seealso cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Image Region</seealso>
      <seealso cref="T:Leadtools.Topics.MethodsThatTransformTheRegionAndtheImage">Commands and Methods That Transform The Region And the Image</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="M:Leadtools.RasterRegionXForm.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterRegionXForm" /> class with default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="M:Leadtools.RasterRegionXForm.Clone">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.RasterRegionXForm" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterRegionXForm" /> this method creates</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterRegionXForm.Default">
      <summary>Returns the default <see cref="T:Leadtools.RasterRegionXForm" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An <see cref="T:Leadtools.RasterRegionXForm" /> initialized to the default values.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.ViewPerspective">
      <summary>The view perspective of the external representation. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The view perspective of the external representation.</value>
      <remarks>
        <para>With LEADTOOLS painting methods, the view perspective is always <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.XScalarNumerator">
      <summary>The numerator for the X scaling factor. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The numerator for the X scaling factor.</value>
      <remarks>
        <para>When translating information from the image, you can use the width of the painting method destination rectangle for this value.</para>
        <para>Methods that translate in this direction are <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegion(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> and <see cref="M:Leadtools.RasterImage.GetRegionBounds(Leadtools.RasterRegionXForm)" />.</para>
        <para>When translating information to the image, you can use the width of the painting method source rectangle for this value.
            (By default, it is the image width.)</para>
        <para>
            Methods that translate in this direction include:
            <list type="bullet"><item><description><see cref="M:Leadtools.RasterImage.AddRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)" /></description></item><item><description><see cref="M:Leadtools.RasterImage.AddRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)" /></description></item><item><description><see cref="M:Leadtools.RasterImage.AddRoundRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.LeadSize,Leadtools.RasterRegionCombineMode)" /></description></item><item><description><see cref="M:Leadtools.RasterImage.AddPolygonToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)" /></description></item><item><description><see cref="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCurve,Leadtools.RasterRegionCombineMode)" /></description></item><item><description><see cref="M:Leadtools.RasterImage.AddBeziersToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)" /></description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.XScalarDenominator">
      <summary>The denominator for the X scaling factor. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The denominator for the X scaling factor.</value>
      <remarks>
        <para>When translating information from the image, you can use the width of the painting method source rectangle for this value.
            (By default, it is the image width.)</para>
        <para>When translating information to the image, you can use the width of the painting method destination rectangle for this value.</para>
        <para>Refer to the <see cref="P:Leadtools.RasterRegionXForm.XScalarNumerator" /> property to see which methods translate which direction.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.YScalarNumerator">
      <summary>The denominator for the Y scaling factor.<br /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The denominator for the Y scaling factor.</value>
      <remarks>
        <para>When translating information from the image, you can use the height of the painting method destination rectangle for this value.</para>
        <para>When translating information to the image, you can use the height of the painting method source rectangle for this value. (By default,
            it is the image height.)</para>
        <para>Refer to the <see cref="P:Leadtools.RasterRegionXForm.XScalarNumerator" /> property to see which methods translate which direction.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.YScalarDenominator">
      <summary>The denominator for the Y scaling factor.<br /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The denominator for the Y scaling factor.</value>
      <remarks>
        <para>When translating information from the image, you can use the height of the painting method source rectangle for this value.
            (By default, it is the image height.)</para>
        <para>When translating information to the image, you can use the height of the painting method destination rectangle for this value.</para>
        <para>Refer to the <see cref="P:Leadtools.RasterRegionXForm.XScalarNumerator" /> property to see which methods translate which direction.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.XOffset">
      <summary>The X offset of the external representation.<br /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The X offset of the external representation.</value>
      <remarks>
        <para>When translating information from the image, you can use the left value of the painting method destination rectangle.</para>
        <para>When translating information to the image, you can negate the left value of the painting method destination rectangle (-left).</para>
        <para>Refer to the <see cref="P:Leadtools.RasterRegionXForm.XScalarNumerator" /> property to see which methods translate which direction.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="P:Leadtools.RasterRegionXForm.YOffset">
      <summary>The Y offset of the external representation.<br /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The Y offset of the external representation.</value>
      <remarks>
        <para>When translating information from the image, you can use the top value of the painting method destination rectangle.</para>
        <para>When translating information to the image, you can negate the top value of the painting method destination rectangle (-top).</para>
        <para>Refer to the <see cref="P:Leadtools.RasterRegionXForm.XScalarNumerator" /> property to see which methods translate which direction.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.TranslatingCoordinatesForARegion">Translating Coordinates for a Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">RasterRegion.Transform</see>.</example>
    </member>
    <member name="T:Leadtools.RasterTagMetadataDataType">
      <summary>Indicates the data type for a metadata tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.RasterCommentMetadata">RasterCommentMetadataType Enumeration</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NotesOnExifData">Notes on Exif Data</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Byte">
      <summary>
            Byte
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Ascii">
      <summary>
            ASCII character string
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.SByte">
      <summary>
            Signed byte
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Undefined">
      <summary>
            Undefined
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.UInt16">
      <summary>
            Unsigned 16-bit integer
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Int16">
      <summary>
            Signed 16-bit integer
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.UInt32">
      <summary>
            Unsigned 32-bit integer
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Int32">
      <summary>
            Signed 32-bit integer
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Single">
      <summary>
            Single precision float
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.URational">
      <summary>
            Unsigned rational
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Rational">
      <summary>
            Rational
            </summary>
    </member>
    <member name="F:Leadtools.RasterTagMetadataDataType.Double">
      <summary>
            Double precision float
            </summary>
    </member>
    <member name="T:Leadtools.RasterTagMetadata">
      <summary>Extends the <see cref="T:Leadtools.RasterMetadata" /> class to provide functionality for dealing with tag metadata stored within various image file formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The TIFF file formats support a number of comments that are saved and loaded using predefined tags.</para>
        <para>If the comments do not meet your needs, you can define your own tag for saving additional non-raster data in a TIFF file. For example,
            you may want to define a tag to save annotations.</para>
        <para>The TIFF 6.0 Specification sets aside a range of private tags that developers can define. To avoid conflicts 
            with files created by other developers, you can register your tag by contacting Adobe Developer Relations. 
            The E-Mail address posted on The Unofficial TIFF Home Page is <strong>gapdevsup@adobe.com</strong>.</para>
        <p>Some restrictions apply to this function if you use an IFD to indicate to which page to write the metadata. 
            See the <see cref="T:L.Topics.LoadingAndSavingLargeTIFFFiles">Loading And Saving Large TIFF Files</see> topic for more information.</p>
      </remarks>
      <example>
        <para>This example will save then load some tags to/from a tif file.</para>
        <code lang="VB">        Public Sub RasterTagMetadataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_tags.tif")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' add the tags
         Const tagSoftware As Integer = &amp;H131

         Dim tag As RasterTagMetadata

         ' Ascii
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Ascii
         tag.FromAscii("Test String")
         image.Tags.Add(tag)

         ' Byte
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Byte
         Dim byteArray As Byte() = New Byte(0) {}
         byteArray(0) = 10
         tag.FromByte(byteArray)
         image.Tags.Add(tag)

         ' SByte
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.SByte
         Dim sbyteArray As SByte() = New SByte(0) {}
         sbyteArray(0) = -45
         tag.FromSByte(sbyteArray)
         image.Tags.Add(tag)

         ' Int16
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Int16
         Dim shortArray As Short() = New Short(0) {}
         shortArray(0) = 64
         tag.FromInt16(shortArray)
         image.Tags.Add(tag)

         ' Uint16
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.UInt16
         Dim uint16Array As System.UInt16() = New System.UInt16(0) {}
         uint16Array(0) = 50
         tag.FromUInt16(uint16Array)
         image.Tags.Add(tag)

         ' Int32
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Int32
         Dim intArray As Integer() = New Integer(0) {}
         intArray(0) = -1326
         tag.FromInt32(intArray)
         image.Tags.Add(tag)

         ' Uint32
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.UInt32
         Dim uintArray As System.UInt32() = New System.UInt32(0) {}
         uintArray(0) = 1326
         tag.FromUInt32(uintArray)
         image.Tags.Add(tag)

         ' single
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Single
         Dim singleArray As Single() = New Single(0) {}
         singleArray(0) = 4.53F
         tag.FromSingle(singleArray)
         image.Tags.Add(tag)

         ' Double
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Double
         Dim doubleArray As Double() = New Double(0) {}
         doubleArray(0) = 7.1
         tag.FromDouble(doubleArray)
         image.Tags.Add(tag)

         ' Rational
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Rational
         Dim rational As RasterMetadataRational() = New RasterMetadataRational(0) {}
         rational(0) = New RasterMetadataRational()
         rational(0).Numerator = 3
         rational(0).Denominator = 2
         tag.FromRational(rational)
         image.Tags.Add(tag)

         ' URational
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.URational
         Dim urational As RasterMetadataURational() = New RasterMetadataURational(0) {}
         urational(0) = New RasterMetadataURational(3, 2)
         tag.FromURational(urational)
         image.Tags.Add(tag)

         ' Save the image and its tags to the destination tiff file
         codecs.Options.Save.Tags = True
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1)

         ' Enumerate the tags from the file
         AddHandler codecs.TagFound, AddressOf codecs_TagFound
         codecs.EnumTags(destFileName, 1)

         ' clean up
         image.Dispose()
      End Sub

      Private Sub codecs_TagFound(ByVal sender As Object, ByVal e As CodecsEnumTagsEventArgs)
         Console.WriteLine("Found tag id = {0}, count = {1}, type = {2}", e.Id, e.Count, e.MetadataType)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterTagMetadataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_tags.tif");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // add the tags
         const int tagSoftware = 0x131;

         RasterTagMetadata tag;

         // Ascii
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Ascii;
         tag.FromAscii("Test String");
         image.Tags.Add(tag);

         // Byte
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Byte;
         byte[] byteArray = new byte[1];
         byteArray[0] = 10;
         tag.FromByte(byteArray);
         image.Tags.Add(tag);

         // SByte
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.SByte;
         sbyte[] sbyteArray = new sbyte[1];
         sbyteArray[0] = -45;
         tag.FromSByte(sbyteArray);
         image.Tags.Add(tag);

         // Int16
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Int16;
         short[] shortArray = new short[1];
         shortArray[0] = 64;
         tag.FromInt16(shortArray);
         image.Tags.Add(tag);

         // Uint16
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.UInt16;
         ushort[] uint16Array = new ushort[1];
         uint16Array[0] = 50;
         tag.FromUInt16(uint16Array);
         image.Tags.Add(tag);

         // Int32
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Int32;
         int[] intArray = new int[1];
         intArray[0] = -1326;
         tag.FromInt32(intArray);
         image.Tags.Add(tag);

         // Uint32
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.UInt32;
         uint[] uintArray = new uint[1];
         uintArray[0] = 1326;
         tag.FromUInt32(uintArray);
         image.Tags.Add(tag);

         // single
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Single;
         float[] singleArray = new float[1];
         singleArray[0] = 4.53f;
         tag.FromSingle(singleArray);
         image.Tags.Add(tag);

         // Double
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Double;
         double[] doubleArray = new double[1];
         doubleArray[0] = 7.1;
         tag.FromDouble(doubleArray);
         image.Tags.Add(tag);

         // Rational
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Rational;
         RasterMetadataRational[] rational = new RasterMetadataRational[1];
         rational[0] = new RasterMetadataRational();
         rational[0].Numerator = 3;
         rational[0].Denominator = 2;
         tag.FromRational(rational);
         image.Tags.Add(tag);

         // URational
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.URational;
         RasterMetadataURational[] urational = new RasterMetadataURational[1];
         urational[0] = new RasterMetadataURational(3, 2);
         tag.FromURational(urational);
         image.Tags.Add(tag);

         // Save the image and its tags to the destination tiff file
         codecs.Options.Save.Tags = true;
         codecs.Save(image, destFileName, RasterImageFormat.Tif, 1);

         // Enumerate the tags from the file
         codecs.TagFound += new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);
         codecs.EnumTags(destFileName, 1);

         // clean up
         image.Dispose();
      }

      void codecs_TagFound(object sender, CodecsEnumTagsEventArgs e)
      {
         Console.WriteLine("Found tag id = {0}, count = {1}, type = {2}", e.Id, e.Count, e.MetadataType);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterTagMetadataExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // add the tags
         const int tagSoftware = 0x131;

         RasterTagMetadata tag;

         // Ascii
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Ascii;
         tag.FromAscii("Test String");
         image.Tags.Add(tag);

         // Byte
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Byte;
         byte[] byteArray = new byte[1];
         byteArray[0] = 10;
         tag.FromByte(byteArray);
         image.Tags.Add(tag);

         // SByte
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.SByte;
         sbyte[] sbyteArray = new sbyte[1];
         sbyteArray[0] = -45;
         tag.FromSByte(sbyteArray);
         image.Tags.Add(tag);

         // Int16
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Int16;
         short[] shortArray = new short[1];
         shortArray[0] = 64;
         tag.FromInt16(shortArray);
         image.Tags.Add(tag);

         // Uint16
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.UInt16;
         ushort[] uint16Array = new ushort[1];
         uint16Array[0] = 50;
         tag.FromUInt16(uint16Array);
         image.Tags.Add(tag);

         // Int32
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Int32;
         int[] intArray = new int[1];
         intArray[0] = -1326;
         tag.FromInt32(intArray);
         image.Tags.Add(tag);

         // Uint32
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.UInt32;
         uint[] uintArray = new uint[1];
         uintArray[0] = 1326;
         tag.FromUInt32(uintArray);
         image.Tags.Add(tag);

         // single
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Single;
         float[] singleArray = new float[1];
         singleArray[0] = 4.53f;
         tag.FromSingle(singleArray);
         image.Tags.Add(tag);

         // Double
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Double;
         double[] doubleArray = new double[1];
         doubleArray[0] = 7.1;
         tag.FromDouble(doubleArray);
         image.Tags.Add(tag);

         // Rational
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.Rational;
         RasterMetadataRational[] rational = new RasterMetadataRational[1];
         rational[0] = new RasterMetadataRational();
         rational[0].Numerator = 3;
         rational[0].Denominator = 2;
         tag.FromRational(rational);
         image.Tags.Add(tag);

         // URational
         tag = new RasterTagMetadata();
         tag.Id = tagSoftware;
         tag.DataType = RasterTagMetadataDataType.URational;
         RasterMetadataURational[] urational = new RasterMetadataURational[1];
         urational[0] = new RasterMetadataURational(3, 2);
         tag.FromURational(urational);
         image.Tags.Add(tag);

         // Save the image and its tags to the destination tiff file
         codecs.Options.Save.Tags = true;
         codecs.Save(image, destStream, RasterImageFormat.Tif, 1);

         // Enumerate the tags from the file
         codecs.TagFound += new EventHandler&lt;CodecsEnumTagsEventArgs&gt;(codecs_TagFound);
         codecs.EnumTags(destStream, 1);

         // clean up
         image.Dispose();
      }

      void codecs_TagFound(object sender, CodecsEnumTagsEventArgs e)
      {
         Debug.WriteLine("Found tag id = {0}, count = {1}, type = {2}", e.Id, e.Count, e.MetadataType);
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterTagMetadataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' add the tags
         Const tagSoftware As Integer = &amp;H131

         Dim tag As RasterTagMetadata

         ' Ascii
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Ascii
         tag.FromAscii("Test String")
         image.Tags.Add(tag)

         ' Byte
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Byte
         Dim byteArray As Byte() = New Byte(0){}
         byteArray(0) = 10
         tag.FromByte(byteArray)
         image.Tags.Add(tag)

         ' SByte
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.SByte
         Dim sbyteArray As SByte() = New SByte(0){}
         sbyteArray(0) = -45
         tag.FromSByte(sbyteArray)
         image.Tags.Add(tag)

         ' Int16
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Int16
         Dim shortArray As Short() = New Short(0){}
         shortArray(0) = 64
         tag.FromInt16(shortArray)
         image.Tags.Add(tag)

         ' Uint16
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.UInt16
         Dim uint16Array As UShort() = New UShort(0){}
         uint16Array(0) = 50
         tag.FromUInt16(uint16Array)
         image.Tags.Add(tag)

         ' Int32
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Int32
         Dim intArray As Integer() = New Integer(0){}
         intArray(0) = -1326
         tag.FromInt32(intArray)
         image.Tags.Add(tag)

         ' Uint32
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.UInt32
         Dim uintArray As UInteger() = New UInteger(0){}
         uintArray(0) = 1326
         tag.FromUInt32(uintArray)
         image.Tags.Add(tag)

         ' single
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Single
         Dim singleArray As Single() = New Single(0){}
         singleArray(0) = 4.53f
         tag.FromSingle(singleArray)
         image.Tags.Add(tag)

         ' Double
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Double
         Dim doubleArray As Double() = New Double(0){}
         doubleArray(0) = 7.1
         tag.FromDouble(doubleArray)
         image.Tags.Add(tag)

         ' Rational
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.Rational
         Dim rational As RasterMetadataRational() = New RasterMetadataRational(0){}
         rational(0) = New RasterMetadataRational()
         rational(0).Numerator = 3
         rational(0).Denominator = 2
         tag.FromRational(rational)
         image.Tags.Add(tag)

         ' URational
         tag = New RasterTagMetadata()
         tag.Id = tagSoftware
         tag.DataType = RasterTagMetadataDataType.URational
         Dim urational As RasterMetadataURational() = New RasterMetadataURational(0){}
         urational(0) = New RasterMetadataURational(3, 2)
         tag.FromURational(urational)
         image.Tags.Add(tag)

         ' Save the image and its tags to the destination tiff file
         codecs.Options.Save.Tags = True
         codecs.Save(image, destStream, RasterImageFormat.Tif, 1)

         ' Enumerate the tags from the file
         AddHandler codecs.TagFound, AddressOf codecs_TagFound
         codecs.EnumTags(destStream, 1)

         ' clean up
         image.Dispose()
      End Sub

      Private Sub codecs_TagFound(ByVal sender As Object, ByVal e As CodecsEnumTagsEventArgs)
         Debug.WriteLine("Found tag id = {0}, count = {1}, type = {2}", e.Id, e.Count, e.MetadataType)
      End Sub</code>
      </example>
    </member>
    <member name="F:Leadtools.RasterTagMetadata.Copyright">
      <summary>Constant which represents the Copyright tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterTagMetadata.GeneralExif">
      <summary>Constant which represents the General Exif tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterTagMetadata.ExifGps">
      <summary>Constant which represents the Exif Gps tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterTagMetadata.AnnotationTiff">
      <summary>Constant which represents the Annotation tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterTagMetadata.#ctor">
      <summary>Initializes a new instance of <see cref="T:Leadtools.RasterTagMetadata" /> with default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.#ctor(System.Int32,Leadtools.RasterTagMetadataDataType,System.Byte[])">
      <summary>Initializes a new instance of <see cref="T:Leadtools.RasterTagMetadata" /> with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="id">The tag id</param>
      <param name="dataType">The data type of the tag</param>
      <param name="data">The data for the tag</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.Clone">
      <summary>Makes an exact copy of this <see cref="T:Leadtools.RasterTagMetadata" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterTagMetadata" /> that this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterTagMetadata.#ctor" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.GetData">
      <summary>Gets the tag data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of bytes containing the data for the tag.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.IO.Stream,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.SetData(System.Byte[])">
      <summary>Sets the tag data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">An array of bytes containing the data for the tag.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.IO.Stream,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.GetDataTypeSize(Leadtools.RasterTagMetadataDataType)">
      <summary>Gets the size of the specified <see cref="T:Leadtools.RasterTagMetadataDataType" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="dataType">The <see cref="T:Leadtools.RasterTagMetadataDataType" /> for which to get the size.</param>
      <returns>The size in bytes of the specified <see cref="T:Leadtools.RasterTagMetadataDataType" />.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToByte">
      <summary>Converts the tag data to an array of bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an arry of bytes.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromByte(System.Byte[])">
      <summary>Sets the tag data to the specified array of bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterTagMetadata.#ctor" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToSByte">
      <summary>Converts the tag data to an array of signed bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an arry of signed bytes.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromSByte(System.SByte[])">
      <summary>Sets the tag data to the specified array of signed bytes. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToAscii">
      <summary>Converts the tag data to a string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The comment data converted to a string.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromAscii(System.String)">
      <summary>Sets the tag data to the specified string. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToUInt16">
      <summary>Converts the tag data to an array of unsigned integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of unsigned integer values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromUInt16(System.UInt16[])">
      <summary>Sets the tag data to the specified unsigned integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToInt16">
      <summary>Converts the tag data to an array of integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of integer values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromInt16(System.Int16[])">
      <summary>Sets the tag data to the specified integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToUInt32">
      <summary>Converts the tag data to an array of unsigned integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of unsigned integer values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromUInt32(System.UInt32[])">
      <summary>Sets the tag data to the specified unsigned integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToInt32">
      <summary>Converts the tag data to an array of integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of integer values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.StartDecompress(Leadtools.Codecs.CodecsStartDecompressOptions)" />.</example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromInt32(System.Int32[])">
      <summary>Sets the tag data to the specified unsigned integer values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToURational">
      <summary>Converts the tag data to an array of <see cref="T:Leadtools.RasterMetadataURational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of <see cref="T:Leadtools.RasterMetadataURational" /> values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromURational(Leadtools.RasterMetadataURational[])">
      <summary>Sets the tag data to the specified <see cref="T:Leadtools.RasterMetadataURational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToRational">
      <summary>Converts the tag data to an array of <see cref="T:Leadtools.RasterMetadataRational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of <see cref="T:Leadtools.RasterMetadataRational" /> values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromRational(Leadtools.RasterMetadataRational[])">
      <summary>Sets the tag data to the specified <see cref="T:Leadtools.RasterMetadataRational" /> values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToSingle">
      <summary>Converts the tag data to an array of single precision values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of single precision values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromSingle(System.Single[])">
      <summary>Sets the tag data to the specified single precision values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.ToDouble">
      <summary>Converts the tag data to an array of double precision values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The tag data converted to an array of double precision values.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterTagMetadata.FromDouble(System.Double[])">
      <summary>Sets the tag data to the specified double precision values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The data to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterTagMetadata" /></example>
    </member>
    <member name="P:Leadtools.RasterTagMetadata.Id">
      <summary>Gets or sets the tag id. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The tag id.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)" />.</example>
    </member>
    <member name="P:Leadtools.RasterTagMetadata.DataType">
      <summary>Gets or sets the data type for the tag. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The data type for the tag.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTag(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)" />.</example>
    </member>
    <member name="P:Leadtools.RasterTagMetadata.Count">
      <summary>Gets the size (in bytes) of the tag data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size in bytes of the tag data.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.Codecs.RasterCodecs.ReadTag(System.IO.Stream,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CombineFastCommandFlags">
      <summary>Flags for the <see cref="P:Leadtools.ImageProcessing.CombineFastCommand.Flags">CombineFastCommand.Flags</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>These flags are divided into four groupings: source (SRC) flags, destination
                (DST) flags, operation (OP) flags, and resulting image (RES) flags. The flags apply
                only to the defined rectangles (not necessarily the whole image). The flags are
                applied in the following order:</para>
        <list type="number">
          <item>Operations on the source and destination rectangles are applied. These
                    are implemented at the same time.</item>
          <item>Combining operations are performed.</item>
          <item>Operations on the resulting rectangle are applied.</item>
        </list>
        <para>
                    You can use a bitwise OR (|) to specify one flag from each group. 
                    <list type="table"><item><term><b>Group</b></term><description><b>Flags</b></description></item><item><term>Flags that define treatment of the source rectangle</term><description>None, SourceNot, Source0, Source1</description></item><item><term>Flags that define treatment of the destination rectangle</term><description>DestinationNot, Destination0, Destination1</description></item><item><term>Flags that define the operation to use when combining the
                            data</term><description>OperationOr, OperationXor, OperationAdd,
                            OperationSubtractSource, OperationSubtractDestination,
                            OperationMultiply, OperationDivideSource, OperationDivideDestination,
                            OperationAverage, OperationMinimum, OperationMaximum</description></item><item><term>Flags that define treatment of the resulting image
                            rectangle</term><description>ResultNot, Result0, Result1, SourceCopy</description></item></list></para>
        <para>
                    For more options use <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
                </para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.None">
      <summary>
            No change.
            Part of the group of flags that define treatment of the source rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.SourceNot">
      <summary>
            Invert the color, resulting in its complement.
            Part of the group of flags that define treatment of the source rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Source0">
      <summary>
            Change all bits to 0.
            Part of the group of flags that define treatment of the source rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Source1">
      <summary>
            Change all bits to 1.
            Part of the group of flags that define treatment of the source rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.DestinationNot">
      <summary>
            Invert the color, resulting in its complement.
            Part of the group of flags that define treatment of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Destination0">
      <summary>
            Change all bits to 0.
            Part of the group of flags that define treatment of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Destination1">
      <summary>
            Change all bits to 1.
            Part of the group of flags that define treatment of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationOr">
      <summary>
            Combine each set of bytes using a bitwise OR ( | ).
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationXor">
      <summary>
            Combine each set of bytes using a bitwise exclusive OR (^).
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationAdd">
      <summary>
            Add the byte values, allowing a maximum of 255.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationSubtractSource">
      <summary>
            Subtract the source from the destination, allowing a minimum of 0.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationSubtractDestination">
      <summary>
            Subtract the destination from the source, allowing a minimum of 0.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationMultiply">
      <summary>
            Multiply the byte values, allowing a maximum of 255. The result is calculated as follows: <c>result = (source * dest) / 255</c>.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationDivideSource">
      <summary>
            Divide the destination by the source. If source &gt; 0, then the result is calculated as follows: <c>result = min( (dest / source) * 255, 255 )</c>. Otherwise, if <c>source = 0</c>, then <c>result = 255</c>.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationDivideDestination">
      <summary>
            Divide the source by the destination. If dest &gt; 0, then the result is calculated as follows: <c>result = min( (source / dest) * 255, 255 )</c>.
            Otherwise, if <c>dest = 0</c>, then <c>result = 255</c>.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationAverage">
      <summary>
            Use the average of the two values.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationMinimum">
      <summary>
            Use the lesser of the two values.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.OperationMaximum">
      <summary>
            Use the greater of the two values.
            Part of the group of flags that define the operation to use when combining the data.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.ResultNot">
      <summary>
            Invert the color, resulting in its complement.
            Part of the group of flags that define treatment of the resulting image rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Result0">
      <summary>
            Change all bits to 0.
            Part of the group of flags that define treatment of the resulting image rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.Result1">
      <summary>
            Change all bits to 1.
            Part of the group of flags that define treatment of the resulting image rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.CombineFastCommandFlags.SourceCopy">
      <summary>
            Copies the source image to the destination image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.CombineFastCommand">
      <summary>Combines image data from two images (source and destination), letting you specify
            the areas to be combined and the operations to be performed when combining the
            data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Combining images|Color planes</keywords>
      <remarks>
        <para>
                    As an example, suppose you use <see cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand" /> class to
                    apply an edge detection filter. You can then use this class to combine the
                    resulting image with the original one to produce an image with hard edges.
                </para>
        <para>
                    The CombineFastCommand class works by combining the image in the
                    <see cref="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationImage" /> property with the image passed to the
                    <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method. The
                    <see cref="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationImage" /> will then hold the result of the combine
                    operation.
                </para>
        <para>The CombineFastCommand flags are divided into four groupings: source (SRC)
                flags, destination (DST) flags, operation (OP) flags, and resulting image (RES)
                flags. The flags apply only to the defined rectangles (not necessarily the whole
                image). The flags are applied in the following order:</para>
        <list type="number">
          <item>Operations on the source and destination rectangles are applied. These
                    are implemented at the same time.</item>
          <item>Combining operations are performed.</item>
          <item>Operations on the resulting rectangle are applied.</item>
        </list>
        <para>
                    You can use a bitwise OR (|) to specify one flag from each group. 
                    <list type="table"><item><term><b>Group</b></term><description><b>Flags</b></description></item><item><term>Flags that define treatment of the source rectangle</term><description>None, SourceNot, Source0, Source1</description></item><item><term>Flags that define treatment of the destination rectangle</term><description>DestinationNot, Destination0, Destination1</description></item><item><term>Flags that define the operation to use when combining the
                            data</term><description>OperationOr, OperationXor, OperationAdd,
                            OperationSubtractSource, OperationSubtractDestination,
                            OperationMultiply, OperationDivideSource, OperationDivideDestination,
                            OperationAverage, OperationMinimum, OperationMaximum</description></item><item><term>Flags that define treatment of the resulting image
                            rectangle</term><description>ResultNot, Result0, Result1, SourceCopy</description></item></list></para>
        <para>Certain flags when combined have no meaning:</para>
        <list type="bullet">
          <item>Setting the flag (RES flags) to either CB_RES_0 or CB_RES_1 will render
                    the rest of the flags useless.</item>
          <item>Setting the SRC and DST flags to CB_SRC_0 and CB_DST_0 respectively, then
                    the OP flags (the operation flags) will be useless.</item>
          <item>Setting the SRC and DST flags to CB_SRC_1 and CB_DST_1 respectively, then
                    the OP flags (the operation flags) will be useless.</item>
          <item>Setting the flag (OP Flags) to CB_OP_ADD or CB_OP_OR or CB_OP_MAX, while
                    setting the (SRC flags) to CB_SRC_1 will make the (DST flags) useless.</item>
          <item>Setting the flag (OP Flags) to CB_OP_ADD or CB_OP_OR or CB_OP_MAX, while
                    setting the (DST flags) to CB_SRC_1 will make the (SRC flags) useless.</item>
          <item>Setting the flag (OP Flags) to CB_OP_AND or CB_OP_SUBDST or CB_OP_MIN,
                    while setting the (SRC flags) to CB_SRC_0 will make the (DST flags)
                    useless.</item>
          <item>Setting the flag (OP Flags) to CB_OP_AND or CB_OP_SUBSRC or CB_OP_MIN,
                    while setting the (DST flags) to CB_SRC_0 will make the (SRC flags)
                    useless.</item>
        </list>
        <para>
                    For more options, like specifying the color plane, use
                    <see cref="T:Leadtools.ImageProcessing.Effects.CombineCommand" />.
                </para>
        <para>
                    For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Processing an
                    Image</see>.
                </para>
      </remarks>
      <example>
        <para>The following example loads two images and combines them using an "AND"
            operation.</para>
        <code lang="VB">        Public Sub CombineFastCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim srcFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "CombineFastCommand.bmp")

         ' Load the source images from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName1)
         Dim destImage As RasterImage = codecs.Load(srcFileName2)

         ' Combine them
         Dim command As CombineFastCommand = New CombineFastCommand()

         ' Specify a position in the destination image
         command.DestinationRectangle = New LeadRect(destImage.Width \ 8, destImage.Height \ 8, destImage.Width, destImage.Height)
         command.SourcePoint = LeadPoint.Empty
         command.DestinationImage = destImage
         command.Flags = CombineFastCommandFlags.OperationAdd Or CombineFastCommandFlags.Destination0
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         destImage.Dispose()
         srcImage.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CombineFastCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string srcFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "CombineFastCommand.bmp");

         // Load the source images from disk
         RasterImage srcImage = codecs.Load(srcFileName1);
         RasterImage destImage = codecs.Load(srcFileName2);

         // Combine them
         CombineFastCommand command = new CombineFastCommand();

         // Specify a position in the destination image
         command.DestinationRectangle = new LeadRect(
            destImage.Width / 8,
            destImage.Height / 8,
            destImage.Width,
            destImage.Height);
         command.SourcePoint = LeadPoint.Empty;
         command.DestinationImage = destImage;
         command.Flags = CombineFastCommandFlags.OperationAdd | CombineFastCommandFlags.Destination0;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         destImage.Dispose();
         srcImage.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CombineFastCommandExample(RasterImage srcImage, RasterImage destImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Combine them
         CombineFastCommand command = new CombineFastCommand();

         // Specify a position in the destination image
         command.DestinationRectangle = new LeadRect(
            destImage.Width / 8,
            destImage.Height / 8,
            destImage.Width,
            destImage.Height);
         command.SourcePoint = LeadPoint.Empty;
         command.DestinationImage = destImage;
         command.Flags = CombineFastCommandFlags.OperationAdd | CombineFastCommandFlags.Destination0;
         command.Run(srcImage);

         // Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Png, 24);

         // Clean Up
         destImage.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CombineFastCommandExample(ByVal srcImage As RasterImage, ByVal destImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Combine them
         Dim command As CombineFastCommand = New CombineFastCommand()

         ' Specify a position in the destination image
         command.DestinationRectangle = New LeadRect(destImage.Width / 8, destImage.Height / 8, destImage.Width, destImage.Height)
         command.SourcePoint = LeadPoint.Empty
         command.DestinationImage = destImage
         command.Flags = CombineFastCommandFlags.OperationAdd Or CombineFastCommandFlags.Destination0
         command.Run(srcImage)

         ' Save it to disk
         codecs.Save(destImage, destStream, RasterImageFormat.Png, 24)

         ' Clean Up
         destImage.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineFastCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Default values are as follows:</para>
        <blockquote dir="ltr" style="MARGIN-RIGHT: 0px">
          <para>
            <span lang="EN">Flags: SourceCopy</span>
          </para>
          <para>
            <span lang="EN">SourcePoint: {X=0,Y=0}</span>
          </para>
          <para>
            <span lang="EN">DestinationRectangle:
                    {X=0,Y=0,Width=0,Height=0}</span>
          </para>
          <para>
            <span lang="EN">DestinationImage: null</span>
          </para>
          <para>
            <span lang="EN">HasProgress: False</span>
          </para>
        </blockquote>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineFastCommand.#ctor(Leadtools.RasterImage,Leadtools.LeadRect,Leadtools.LeadPoint,Leadtools.ImageProcessing.CombineFastCommandFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <paramref name="destinationImage" /> will hold the result of combining this image with the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
      <param name="destinationImage">The destination image for the command.</param>
      <param name="destinationRectangle">The rectangle for the destination image.</param>
      <param name="sourcePoint">The origin point for the source rectangle.</param>
      <param name="flags">Flags which control the combine command.</param>
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineFastCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CombineFastCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationImage">
      <summary>Gets or sets the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The destination <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /> works by combining the image in the <see cref="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationImage" /> property with the image passed to the
            <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method.  The <see cref="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationImage" /> will then the result of the combine operation..</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineFastCommand.DestinationRectangle">
      <summary>Gets or sets the rectangle in the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The rectangle in the destination image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineFastCommand.SourcePoint">
      <summary>Gets or sets the origin of the source rectangle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The origin of the source rectangle.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CombineFastCommand.Flags">
      <summary>Gets or sets the flags which control the combine command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The flags which control the combine command.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">
      <summary>Palette options, for the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags">ColorResolutionCommand.PaletteFlags</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The palette options are useful only when the resulting image requires a palette (when it is 8 bits per pixel or less).</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction: Palette Handling</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.Fixed">
      <summary>
            Use the LEAD Fixed palette.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.Optimized">
      <summary>
            Create an optimized palette, or if you supply a palette in <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])">ColorResolutionCommand.SetPalette</see>, supply optimized
            colors for specified entries in the palette.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.Identity">
      <summary>
            Insert the Windows system palette.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.UsePalette">
      <summary>
            Use the palette specified in <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])">ColorResolutionCommand.SetPalette</see>, without supplying optimized colors.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.FastMatch">
      <summary>
            Use a predefined table to speed conversion using your own palette. Refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.Netscape">
      <summary>
            Use the fixed palette that is employed by Netscape Navigator and by Microsoft Internet Explorer.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.SlowMatch">
      <summary>
            Use with <strong>Optimized</strong> to use a slower but more accurate matching process.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags.FavorPureColors">
      <summary>
            Give colors that occur frequently in the image palette entries of their own in the optimized palette.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs">
      <summary>Provides data for the <see cref="E:Leadtools.ImageProcessing.ColorResolutionCommand.Data">ColorResolutionCommand.Data</see> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para>This example will convert an image from 24 to 1 bits/pixel saving the data into an external image manually</para>
        <code lang="VB">        Public Sub ColorResolutionCommandDataEventArgsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorresData.bmp")

         ' Load the source image from disk
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Create the destination image
         _row = 0
         _destImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 1, RasterByteOrder.Rgb, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)

         ' Color-res the image to 1 bits/pixel, we will save the data ourselves into
         ' the destination image
         Dim command As ColorResolutionCommand = New ColorResolutionCommand()
         command.BitsPerPixel = 1
         command.DitheringMethod = RasterDitheringMethod.FloydStein
         AddHandler command.Data, AddressOf command_Data
         command.Run(srcImage)
         RemoveHandler command.Data, AddressOf command_Data

         ' Save it to disk
         codecs.Save(_destImage, destFileName, RasterImageFormat.Bmp, 4)
         _destImage.Dispose()

         ' Clean Up
         srcImage.Dispose()
      End Sub

      Private _destImage As RasterImage
      Private _row As Integer

      Private Sub command_Data(ByVal sender As Object, ByVal e As ColorResolutionCommandDataEventArgs)
         ' Set the data into the destination image
         _destImage.SetRow(_row, e.Data, _destImage.BytesPerLine * e.Lines)
         _row += e.Lines

         ' If you want the data in a managed buffer,
         ' you can do this
         ' byte[] data = new byte[_destImage.BytesPerLine * e.Lines];
         ' System.Runtime.InteropServices.Marshal.Copy(e.Data, data, 0, data.Length);
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ColorResolutionCommandDataEventArgsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorresData.bmp");

         // Load the source image from disk
         RasterImage srcImage = codecs.Load(srcFileName);

         // Create the destination image
         _row = 0;
         _destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            1,
            RasterByteOrder.Rgb,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);

         // Color-res the image to 1 bits/pixel, we will save the data ourselves into
         // the destination image
         ColorResolutionCommand command = new ColorResolutionCommand();
         command.BitsPerPixel = 1;
         command.DitheringMethod = RasterDitheringMethod.FloydStein;
         command.Data += new EventHandler&lt;ColorResolutionCommandDataEventArgs&gt;(command_Data);
         command.Run(srcImage);
         command.Data -= new EventHandler&lt;ColorResolutionCommandDataEventArgs&gt;(command_Data);

         // Save it to disk
         codecs.Save(_destImage, destFileName, RasterImageFormat.Bmp, 4);
         _destImage.Dispose();

         // Clean Up
         srcImage.Dispose();
      }

      RasterImage _destImage;
      int _row;

      void command_Data(object sender, ColorResolutionCommandDataEventArgs e)
      {
         // Set the data into the destination image
         _destImage.SetRow(_row, e.Data, _destImage.BytesPerLine * e.Lines);
         _row += e.Lines;

         // If you want the data in a managed buffer,
         // you can do this
         // byte[] data = new byte[_destImage.BytesPerLine * e.Lines];
         // System.Runtime.InteropServices.Marshal.Copy(e.Data, data, 0, data.Length);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ColorResolutionCommandDataEventArgsExample(RasterImage srcImage, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create the destination image
         _row = 0;
         _destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            1,
            RasterByteOrder.Rgb,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);

         // Color-res the image to 1 bits/pixel, we will save the data ourselves into
         // the destination image
         ColorResolutionCommand command = new ColorResolutionCommand();
         command.BitsPerPixel = 1;
         command.DitheringMethod = RasterDitheringMethod.FloydStein;
         command.Data += new EventHandler&lt;ColorResolutionCommandDataEventArgs&gt;(command_Data);
         command.Run(srcImage);
         command.Data -= new EventHandler&lt;ColorResolutionCommandDataEventArgs&gt;(command_Data);

         // Save it to disk
         codecs.Save(_destImage, destStream, RasterImageFormat.Bmp, 4);
         _destImage.Dispose();

         // Clean Up
         srcImage.Dispose();
      }

      RasterImage _destImage;
      int _row;

      void command_Data(object sender, ColorResolutionCommandDataEventArgs e)
      {
         // Set the data into the destination image
         _destImage.SetRow(_row, e.DataArray, 0, _destImage.BytesPerLine * e.Lines);
         _row += e.Lines;
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorResolutionCommandDataEventArgsExample(ByVal srcImage As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Create the destination image
         _row = 0
         _destImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, 1, RasterByteOrder.Rgb, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)

         ' Color-res the image to 1 bits/pixel, we will save the data ourselves into
         ' the destination image
         Dim command As ColorResolutionCommand = New ColorResolutionCommand()
         command.BitsPerPixel = 1
         command.DitheringMethod = RasterDitheringMethod.FloydStein
         AddHandler command.Data, AddressOf command_Data
         command.Run(srcImage)
         RemoveHandler command.Data, AddressOf command_Data

         ' Save it to disk
         codecs.Save(_destImage, destStream, RasterImageFormat.Bmp, 4)
         _destImage.Dispose()

         ' Clean Up
         srcImage.Dispose()
      End Sub

      Private _destImage As RasterImage
      Private _row As Integer

      Private Sub command_Data(ByVal sender As Object, ByVal e As ColorResolutionCommandDataEventArgs)
         ' Set the data into the destination image
         _destImage.SetRow(_row, e.DataArray, 0, _destImage.BytesPerLine * e.Lines)
         _row += e.Lines
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Image">
      <summary>Gets the source image being converted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The source <see cref="T:Leadtools.RasterImage" />being converted.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Lines">
      <summary>Gets the number of lines in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Data" /> or <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.DataArray" />buffers. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The number of lines in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Data" /> or <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.DataArray" />buffers.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Data">
      <summary>Gets the unmanaged buffer containing one or more lines of output image data that the command has already converted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            The buffer containing one or more lines of output image data that the command has already converted.
            </value>
      <remarks>
        <para>This property returns the data in an unmanaged buffer.  You can use the <see cref="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">Marshal.Copy</see> method to copy this
            data to a managed buffer.</para>
        <para>To get the data in a managed array, use the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.DataArray" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.DataArray">
      <summary>Gets the managed buffer containing one or more lines of output image data that the command has already converted. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The buffer containing one or more lines of output image data that the command has already converted.
            </value>
      <remarks>
        <para>This property returns the data in a managed buffer. To get the data in an unmanaged buffer, use the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Data" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs.Cancel">
      <summary>Gets or sets a value indicating whether to abort the color resolution command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to abort the color resolution command, false to continue.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.CloneCommand">
      <summary>Creates a copy of a a <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Copying|Cloning</keywords>
      <remarks>
        <para>After the command is run, a copy of the current page of the source image will be in the <see cref="P:Leadtools.ImageProcessing.CloneCommand.DestinationImage">CloneCommand.DestinationImage</see> property. This property will
            hold a copy of the image, so the user is responsible for freeing this image after using it.</para>
        <para>If a region is defined for the image, the region is also copied.</para>
        <para>If the source image has more than one page, then you can use the <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages">CloneCommand.AllPages</see> property
            to control whether to clone all the pages in the image or only the current page.</para>
        <para>You can use the <see cref="M:Leadtools.RasterImage.Clone">RasterImage.Clone</see> method instead of this command to create a clone of an image. If
            you need to clone a multi-page <see cref="T:Leadtools.RasterImage" /> object, then use the <see cref="M:Leadtools.RasterImage.CloneAll">RasterImage.CloneAll</see> method.
            These methods will also clone any metadata (tags, comments and markers) located in the source image however, you lose the benefit of using a progress monitor.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load an image and then clone it before saving it back to disk. For an example on how to clone a multi-page image and
            show the overall progress monitor, refer to the <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages">CloneCommand.AllPages</see> property.</para>
        </para>
        <code lang="VB">        Public Sub CloneCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Clone it, first, into conventional memory
         Dim command As CloneCommand = New CloneCommand()
         command.CreateFlags = RasterMemoryFlags.Conventional
         command.Run(image)

         Dim destImage1 As RasterImage = command.DestinationImage

         ' Make sure it is in conventional memory
         Console.WriteLine("Memory is: {0}", destImage1.MemoryInformation.MemoryFlags)

         ' Clone it again this time to disk memory
         command.CreateFlags = RasterMemoryFlags.Disk
         command.Run(image)

         Dim destImage2 As RasterImage = command.DestinationImage

         ' Make sure it is in disk memory
         Console.WriteLine("Memory is: {0}", destImage2.MemoryInformation.MemoryFlags)

         ' Clean Up
         destImage1.Dispose()
         destImage2.Dispose()
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CloneCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Clone it, first, into conventional memory
         CloneCommand command = new CloneCommand();
         command.CreateFlags = RasterMemoryFlags.Conventional;
         command.Run(image);

         RasterImage destImage1 = command.DestinationImage;

         // Make sure it is in conventional memory
         Console.WriteLine("Memory is: {0}", destImage1.MemoryInformation.MemoryFlags);

         // Clone it again this time to disk memory
         command.CreateFlags = RasterMemoryFlags.Disk;
         command.Run(image);

         RasterImage destImage2 = command.DestinationImage;

         // Make sure it is in disk memory
         Console.WriteLine("Memory is: {0}", destImage2.MemoryInformation.MemoryFlags);

         // Clean Up
         destImage1.Dispose();
         destImage2.Dispose();
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CloneCommandExample(RasterImage image)
      {
         // Clone it, first, into conventional memory
         CloneCommand command = new CloneCommand();
         command.CreateFlags = RasterMemoryFlags.Conventional;
         command.Run(image);
         RasterImage destImage1 = command.DestinationImage;

         // Make sure it is in conventional memory
         Debug.WriteLine("Memory is: {0}", destImage1.IsConventionalMemory);
         Debug.Assert(destImage1.IsConventionalMemory);

         // Clone it again this time to disk memory
         command.CreateFlags = RasterMemoryFlags.Disk;
         command.Run(image);

         RasterImage destImage2 = command.DestinationImage;

         // Make sure it is in disk memory
         Debug.WriteLine("Memory is: {0}", destImage2.IsDiskMemory);
         Debug.Assert(destImage1.IsDiskMemory);

         // Clean Up
         destImage1.Dispose();
         destImage2.Dispose();
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CloneCommandExample(ByVal image As RasterImage)
         ' Clone it, first, into conventional memory
         Dim command As CloneCommand = New CloneCommand()
         command.CreateFlags = RasterMemoryFlags.Conventional
         command.Run(image)
         Dim destImage1 As RasterImage = command.DestinationImage

         ' Make sure it is in conventional memory
         Debug.WriteLine("Memory is: {0}", destImage1.IsConventionalMemory)
         Debug.Assert(destImage1.IsConventionalMemory)

         ' Clone it again this time to disk memory
         command.CreateFlags = RasterMemoryFlags.Disk
         command.Run(image)

         Dim destImage2 As RasterImage = command.DestinationImage

         ' Make sure it is in disk memory
         Debug.WriteLine("Memory is: {0}", destImage2.IsDiskMemory)
         Debug.Assert(destImage1.IsDiskMemory)

         ' Clean Up
         destImage1.Dispose()
         destImage2.Dispose()
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CloneCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CloneCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CloneCommand.#ctor(Leadtools.RasterMemoryFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.CloneCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="createFlags">Flags that control memory allocation for the destination image.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.CloneCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.CloneCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.CloneCommand.DestinationImage">
      <summary>Gets the resulting image of this command <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resulting <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
            After the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method is executed, the result cloned image is in located in the <see cref="P:Leadtools.ImageProcessing.CloneCommand.DestinationImage" />
            property.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" /> (or <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" /> for an example on cloning a multi-page image).</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CloneCommand.CreateFlags">
      <summary>Gets or sets the flags that control memory allocation for the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <see cref="T:Leadtools.RasterMemoryFlags" /> flags that control memory allocation for the destination image.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CloneCommand.AllPages">
      <summary>Gets or sets a value that indicates whether to clone all the pages if the source image is multi-page. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to clone all the pages if the source image is multi-page, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>If the source image (the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)">RasterCommand.Run</see> method) contains multiple pages, then you can use the <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" />
            property to control whether the <see cref="T:Leadtools.ImageProcessing.CloneCommand" /> will create a copy of the current active page or all the pages in the image.</para>
        <para>Note that when the source image has multiple pages and the value of <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" /> was set to <strong>true</strong>, then the <see cref="E:Leadtools.ImageProcessing.RasterCommand.Progress">RasterCommand.Progress</see>
            event will fire from 0 to 100 for each page processed. If an overall progress percentage is desired, then you can inspect the
            <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> and <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> properties of the
            <see cref="P:Leadtools.ImageProcessing.CloneCommand.SourceImage" /> property to calculate this value as shown in the example below.</para>
        <para>The default value of this property is <strong>false</strong> to clone only the current page.</para>
      </remarks>
      <example>
        <para>
          <para>This example will clone a multi-page image and shows the over-all progress value.</para>
        </para>
        <code lang="VB">      Private Sub CloneAllTest()
         Dim codecs As New RasterCodecs()
         ' Create a multi-page image for testing purposes
         Dim image As RasterImage = Nothing
         For i As Integer = 1 To 4
            Dim pageImage As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "\OCR" + i.ToString() + ".tif"))
            If IsNothing(image) Then
               image = pageImage
            Else
               image.AddPage(pageImage)
               pageImage.Dispose()
            End If
         next

         Console.WriteLine("Input image has {0} pages", image.PageCount)

         ' Clone all pages
         Dim cloneCmd As New CloneCommand()
         cloneCmd.AllPages = True
         AddHandler cloneCmd.Progress, AddressOf cloneCmd_Progress
         cloneCmd.Run(image)
         RemoveHandler cloneCmd.Progress, AddressOf cloneCmd_Progress

         Dim destinationImage As RasterImage = cloneCmd.DestinationImage
         Console.WriteLine("Cloned image has {0} pages", destinationImage.PageCount)

         destinationImage.Dispose()
         image.Dispose()
         codecs.Dispose()
      End Sub

      Private Sub cloneCmd_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         ' By using the SourceImage property of the CloneCommand we can find out
         ' the progress for the current page as well as the overall
         Dim cmd As CloneCommand = DirectCast(sender, CloneCommand)

         Dim overallPercent As Integer

         If cmd.AllPages AndAlso cmd.SourceImage.PageCount &gt; 1 Then
            ' For multiple-pages, the command will fire the Progress event from 0 to 100 for each page
            ' Use the source image Page property to find out where we are in overall completetion
            overallPercent = ((cmd.SourceImage.Page - 1) * 100 + e.Percent) \ cmd.SourceImage.PageCount
         Else
            ' Otherwise, the percent is the same as the current page
            overallPercent = e.Percent
         End If

         Console.WriteLine("Current page completion: {0} of {1} - {2}% - Overall image completion {3}%", cmd.SourceImage.Page, cmd.SourceImage.PageCount, e.Percent, overallPercent)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void CloneAllTest()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Create a multi-page image for testing purposes
         RasterImage image = null;
         for(int i = 1; i &lt;= 4; i++)
         {
            RasterImage pageImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"OCR" + i.ToString() + ".tif"));
            if(image == null)
               image = pageImage;
            else
            {
               image.AddPage(pageImage);
               pageImage.Dispose();
            }
         }

         Console.WriteLine("Input image has {0} pages", image.PageCount);

         // Clone all pages
         CloneCommand cloneCmd = new CloneCommand();
         cloneCmd.AllPages = true;
         cloneCmd.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);
         cloneCmd.Run(image);
         cloneCmd.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);

         RasterImage destinationImage = cloneCmd.DestinationImage;
         Console.WriteLine("Cloned image has {0} pages", destinationImage.PageCount);

         destinationImage.Dispose();
         image.Dispose();
         codecs.Dispose();
      }

      private void cloneCmd_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         // By using the SourceImage property of the CloneCommand we can find out
         // the progress for the current page as well as the overall
         CloneCommand cmd = sender as CloneCommand;

         int overallPercent;

         if(cmd.AllPages &amp;&amp; cmd.SourceImage.PageCount &gt; 1)
         {
            // For multiple-pages, the command will fire the Progress event from 0 to 100 for each page
            // Use the source image Page property to find out where we are in overall completetion
            overallPercent = ((cmd.SourceImage.Page - 1) * 100 + e.Percent) / cmd.SourceImage.PageCount;
         }
         else
         {
            // Otherwise, the percent is the same as the current page
            overallPercent = e.Percent;
         }

         Console.WriteLine("Current page completion: {0} of {1} - {2}% - Overall image completion {3}%", cmd.SourceImage.Page, cmd.SourceImage.PageCount, e.Percent, overallPercent);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void CloneAllTest(RasterImage image1, RasterImage image2, RasterImage image3, RasterImage image4)
      {
         // Create a multi-page image for testing purposes
         RasterImage image = null;
         image = image1;
         image.AddPage(image2);
         image.AddPage(image3);
         image.AddPage(image4);
         Debug.WriteLine("Input image has {0} pages", image.PageCount);

         // Clone all pages
         CloneCommand cloneCmd = new CloneCommand();
         cloneCmd.AllPages = true;
         cloneCmd.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);
         cloneCmd.Run(image);
         cloneCmd.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);

         RasterImage destinationImage = cloneCmd.DestinationImage;
         Debug.WriteLine("Cloned image has {0} pages", destinationImage.PageCount);

         destinationImage.Dispose();
         image.Dispose();
         image1.Dispose();
         image2.Dispose();
         image3.Dispose();
         image4.Dispose();
      }

      private void cloneCmd_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         // By using the SourceImage property of the CloneCommand we can find out
         // the progress for the current page as well as the overall
         CloneCommand cmd = sender as CloneCommand;

         int overallPercent;

         if(cmd.AllPages &amp;&amp; cmd.SourceImage.PageCount &gt; 1)
         {
            // For multiple-pages, the command will fire the Progress event from 0 to 100 for each page
            // Use the source image Page property to find out where we are in overall completetion
            overallPercent = ((cmd.SourceImage.Page - 1) * 100 + e.Percent) / cmd.SourceImage.PageCount;
         }
         else
         {
            // Otherwise, the percent is the same as the current page
            overallPercent = e.Percent;
         }

         Debug.WriteLine("Current page completion: {0} of {1} - {2}% - Overall image completion {3}%", cmd.SourceImage.Page, cmd.SourceImage.PageCount, e.Percent, overallPercent);
      }</code>
        <code lang="SilverlightVB">      Private Sub CloneAllTest(ByVal image1 As RasterImage, ByVal image2 As RasterImage, ByVal image3 As RasterImage, ByVal image4 As RasterImage)
         ' Create a multi-page image for testing purposes
         Dim image As RasterImage = Nothing
         image = image1
         image.AddPage(image2)
         image.AddPage(image3)
         image.AddPage(image4)
         Debug.WriteLine("Input image has {0} pages", image.PageCount)

         ' Clone all pages
         Dim cloneCmd As CloneCommand = New CloneCommand()
         cloneCmd.AllPages = True
         AddHandler cloneCmd.Progress, AddressOf cloneCmd_Progress
         cloneCmd.Run(image)
         RemoveHandler cloneCmd.Progress, AddressOf cloneCmd_Progress

         Dim destinationImage As RasterImage = cloneCmd.DestinationImage
         Debug.WriteLine("Cloned image has {0} pages", destinationImage.PageCount)

         destinationImage.Dispose()
         image.Dispose()
         image1.Dispose()
         image2.Dispose()
         image3.Dispose()
         image4.Dispose()
      End Sub

      Private Sub cloneCmd_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         ' By using the SourceImage property of the CloneCommand we can find out
         ' the progress for the current page as well as the overall
         Dim cmd As CloneCommand = TryCast(sender, CloneCommand)

         Dim overallPercent As Integer

         If cmd.AllPages AndAlso cmd.SourceImage.PageCount &gt; 1 Then
            ' For multiple-pages, the command will fire the Progress event from 0 to 100 for each page
            ' Use the source image Page property to find out where we are in overall completetion
            overallPercent = ((cmd.SourceImage.Page - 1) * 100 + e.Percent) / cmd.SourceImage.PageCount
         Else
            ' Otherwise, the percent is the same as the current page
            overallPercent = e.Percent
         End If

         Debug.WriteLine("Current page completion: {0} of {1} - {2}% - Overall image completion {3}%", cmd.SourceImage.Page, cmd.SourceImage.PageCount, e.Percent, overallPercent)
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.CloneCommand.SourceImage">
      <summary>Gets the source image used in this <see cref="T:Leadtools.ImageProcessing.CloneCommand" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that references the source image used in this command (the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)">RasterCommand.Run</see> method).</value>
      <remarks>
        <para>If the source image (the image passed to the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)">RasterCommand.Run</see> method) contains multiple pages, then you can use the <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" />
            property to control whether the <see cref="T:Leadtools.ImageProcessing.CloneCommand" /> will create a copy of the current active page or all the pages in the image.</para>
        <para>Note that when the source image has multiple pages and the value of <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" /> was set to <strong>true</strong>, then the <see cref="E:Leadtools.ImageProcessing.RasterCommand.Progress">RasterCommand.Progress</see>
            event will fire from 0 to 100 for each page processed. If an overall progress percentage is desired, then you can inspect the
            <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> and <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> properties of the
            <see cref="P:Leadtools.ImageProcessing.CloneCommand.SourceImage" /> property to calculate this value as shown in the <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" /> example.</para>
        <para>The default value of this property is <strong>false</strong>.</para>
      </remarks>
      <example>
        <para>For an example, refer to <see cref="P:Leadtools.ImageProcessing.CloneCommand.AllPages" />.</para>
      </example>
    </member>
    <member name="T:Leadtools.RasterColorTypeConverter">
      <summary>Converts <see cref="T:Leadtools.RasterColor" /> objects from one data type to another. Access this class through the <see cref="T:System.ComponentModel.TypeConverter" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>To convert a <see cref="T:Leadtools.RasterColor" /> to a string value, use the <see cref="M:Leadtools.RasterColor.ToString">RasterColor.ToString</see> method.</para>
        <para>You can use the members of this class to convert a string to a <see cref="T:Leadtools.RasterColor" /> value. You can also use the
            helper static (Shared) <see cref="M:Leadtools.RasterColorTypeConverter.ConvertFromString(System.String)">RasterColorTypeConverter.ConvertFromString</see> method directly withought
            creating a <see cref="T:System.ComponentModel.TypeConverter" /> instance.</para>
        <para>Currently, this class supports converting a <see cref="T:Leadtools.RasterColor" /> to and from a string type only. The string can be in an HTML compatible format.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterColorTypeConverterExample()
         Dim clr As RasterColor

         ' Convert different type of color string representation to RasterColor objects
         clr = RasterColorTypeConverter.ConvertFromString("Red")
         Console.WriteLine("Red: " + clr.ToString())
         clr = RasterColorTypeConverter.ConvertFromString("BLUE")
         Console.WriteLine("BLUE: " + clr.ToString())
         clr = RasterColorTypeConverter.ConvertFromString("#F3AABBCC")
         Console.WriteLine("#F3AABBCC: " + clr.ToString())

         ' Convert this last color back to string
         Dim temp As String = clr.ToString()
         ' Convert it back to color
         clr = RasterColorTypeConverter.ConvertFromString(temp)
         Console.WriteLine(temp + ": " + clr.ToString())
      End Sub</code>
        <code lang="CS">      public void RasterColorTypeConverterExample()
      {
         RasterColor clr;

         // Convert different type of color string representation to RasterColor objects
         clr = RasterColorTypeConverter.ConvertFromString("Red");
         Console.WriteLine("Red: " + clr.ToString());
         clr = RasterColorTypeConverter.ConvertFromString("BLUE");
         Console.WriteLine("BLUE: " + clr.ToString());
         clr = RasterColorTypeConverter.ConvertFromString("#F3AABBCC");
         Console.WriteLine("#F3AABBCC: " + clr.ToString());

         // Convert this last color back to string
         string temp = clr.ToString();
         // Convert it back to color
         clr = RasterColorTypeConverter.ConvertFromString(temp);
         Console.WriteLine(temp + ": " + clr.ToString());
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterColorTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if this converter can convert an object in the given source type to the native type of the converter <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type from which you want to convert.</param>
      <returns>
        <strong>true</strong> if this object can perform the conversion; otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>For more information, refer to <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">TypeConverter.CanConvertFrom</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColorTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object to the given destination type using the context. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to which you want to convert.</param>
      <returns>
        <strong>true</strong> if this converter can perform the operation; otherwise, <strong>false</strong>.</returns>
      <remarks>
        <para>For more information, refer to <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">TypeConverter.CanConvertFrom</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColorTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the given object to the converter's native type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">A <see cref="T:System.ComponentModel.TypeConverter" /> that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the color.</param>
      <param name="value">The object to convert.</param>
      <returns>An <see cref="T:System.Object" /> representing the converted value.</returns>
      <remarks>
        <para>For more information, refer to <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">TypeConverter.ConvertFrom</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterColorTypeConverter.ConvertFromString(System.String)">
      <summary>Converts the specified text to a <see cref="T:Leadtools.RasterColor" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">A <see cref="T:System.String" /> containing the text value. This must be an HTML compatible string representation of a color.</param>
      <returns>The <see cref="T:Leadtools.RasterColor" /> this method creates. If the string is null (Nothing in Visual Basic), then an empty <see cref="T:Leadtools.RasterColor" /> will be returned with all color components set to zero.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterColorTypeConverter" />.</example>
    </member>
    <member name="M:Leadtools.RasterColorTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified object to another type. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="context">A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is nullNothingnullptra null reference (Nothing in Visual Basic). Also, properties on the context object may return nullNothingnullptra null reference (Nothing in Visual Basic)</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> that specifies the culture to represent the color.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <returns>An Object representing the converted value.</returns>
      <remarks>
        <para>For more information, refer to <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">TypeConverter.ConvertFrom</see></para>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.RasterImage">
      <summary>The <see cref="T:Leadtools.RasterImage" /> class serves as a working area for image manipulation and conversion. LEADTOOLS functions use
            this class for accessing the image in memory and for maintaining the characteristics of the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Raster Image|Image|Bitmap</keywords>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> class is used to work with images defined by pixel data.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class contains methods and properties for dealing with images in memory.
            You can use this class to create images from scratch or load them from disk based files.  Also, various other components of 
            LEADTOOLS for .NET creates <see cref="T:Leadtools.RasterImage" /> objects from operations such as scanning and OCRing.  Morever, the 
            <see cref="T:Leadtools.RasterImage" /> class is the main LEADTOOLS object used when passing image data between different parts of the
            toolkit.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class lets you deal with individual rows or pixels of the image data.  This class also
            contains methods and properties for the following:
            <list type="bullet"><item><description>Creating images</description></item><item><description>Accessing the image data</description></item><item><description>Adding regions to the image</description></item><item><description>Setting/Changing the palette for an image</description></item><item><description>Converting an image to a GDI or GDI+ Image through the <see cref="T:Leadtools.Drawing.RasterImageConverter">Leadtools.Drawing.RasterImageConverter</see> class</description></item><item><description>Creating a GDI HDC or GDI+ Graphics object from an image through the <see cref="T:Leadtools.Drawing.RasterImagePainter">Leadtools.Drawing.RasterImagePainter</see> class</description></item><item><description>Painting an image to a GDI or GDI+ surface through the  through the <see cref="T:Leadtools.Drawing.RasterImagePainter">Leadtools.Drawing.RasterImagePainter</see> class</description></item><item><description>Converting an image to a WPF or Silverlight Image through the <see cref="T:Leadtools.Windows.Media.RasterImageConverter">Leadtools.Windows.Media.RasterImageConverter</see> class</description></item></list></para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and thus supports
            standard .NET serialization. For more information and examples regarding serialization of an
            <see cref="T:Leadtools.RasterImage" /> object, refer to <see cref="T:Leadtools.Topics.RasterImageSerialization">RasterImage Serialization</see>.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class also implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImage" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN, the <see cref="P:Leadtools.RasterImage.IsDisposed" /> property and the
            <see cref="E:Leadtools.RasterImage.Disposed">RasterImage.Disposed</see> event.</para>
        <para>The LEADTOOLS <see cref="T:Leadtools.RasterImage" /> class supports storing images in memory in the following bits per pixel: 
            1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 38 and 64. A 16-bpp image may be color or grayscale. If you are working with a 16-bit
            grayscale image.  Support for 8-bit and 12-bit grayscale images is also provided.</para>
        <para>The data of a <see cref="T:Leadtools.RasterImage" /> object can be stored in memory as uncompressed, RLE compressed or super
            compressed. Support for super compressing bitmaps is available only in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can also store its data in disk-based swap files when conventional memory is not
            enough.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object also contains a region of interest value that can be used to limit the portion
            available to update when using the image processing command. The region can be set using a geometric shape such as
            <see cref="M:Leadtools.RasterImage.AddRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)" /> and <see cref="M:Leadtools.RasterImage.AddEllipseToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)" /> or with image data
            attributes such as <see cref="M:Leadtools.RasterImage.AddColorToRegion(Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)" /> and <see cref="M:Leadtools.RasterImage.AddMaskToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterImage,Leadtools.RasterRegionCombineMode)" />.</para>
      </remarks>
      <seealso cref="T:LD.Topics.RasterImageAndGdiGdiPlus">RasterImage and GDI/GDI+</seealso>
      <seealso cref="T:WM.Topics.RasterImageAndWpfSilverlight">RasterImage and WPF/Silverlight</seealso>
      <example>
        <para>This example loads an image file from a disk file, and processes the image data before saving it back to disk.</para>
        <code lang="VB">      Public Sub RasterImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImage1.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImage2.bmp")

         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Creates a new image in memory with same dimensions as the source image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), IntPtr.Zero, 0)

         ' Copy the data from the source image to the destination image
         srcImage.Access()
         destImage.Access()

         Dim buffer As Byte() = New Byte(srcImage.BytesPerLine - 1) {}

         Dim y As Integer = 0
         Do While y &lt; srcImage.Height
            srcImage.GetRow(y, buffer, 0, buffer.Length)
            destImage.SetRow(y, buffer, 0, buffer.Length)
            y += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' We do not need the source image anymore
         srcImage.Dispose()

         ' save the destination image
         codecs.Save(destImage, destFileName1, RasterImageFormat.Bmp, 24)

         ' perform image processing on the image

         Dim flipCmd As FlipCommand = New FlipCommand()
         flipCmd.Horizontal = False
         flipCmd.Run(destImage)

         ' save it
         codecs.Save(destImage, destFileName2, RasterImageFormat.Bmp, 24)

         ' Clean up
         destImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImage1.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RasterImage2.bmp");

         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         // Creates a new image in memory with same dimensions as the source image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            IntPtr.Zero,
            0);

         // Copy the data from the source image to the destination image
         srcImage.Access();
         destImage.Access();

         byte[] buffer = new byte[srcImage.BytesPerLine];

         for(int y = 0; y &lt; srcImage.Height; y++)
         {
            srcImage.GetRow(y, buffer, 0, buffer.Length);
            destImage.SetRow(y, buffer, 0, buffer.Length);
         }

         destImage.Release();
         srcImage.Release();

         // We do not need the source image anymore
         srcImage.Dispose();

         // save the destination image
         codecs.Save(destImage, destFileName1, RasterImageFormat.Bmp, 24);

         // perform image processing on the image

         FlipCommand flipCmd = new FlipCommand();
         flipCmd.Horizontal = false;
         flipCmd.Run(destImage);

         // save it
         codecs.Save(destImage, destFileName2, RasterImageFormat.Bmp, 24);

         // Clean up
         destImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterImageExample(RasterImage srcImage, Stream outputStream1, Stream outputStream2)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Creates a new image in memory with same dimensions as the source image
         RasterImage destImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            srcImage.Width,
            srcImage.Height,
            srcImage.BitsPerPixel,
            srcImage.Order,
            srcImage.ViewPerspective,
            srcImage.GetPalette(),
            null,
            0);

         // Copy the data from the source image to the destination image
         srcImage.Access();
         destImage.Access();

         byte[] buffer = new byte[srcImage.BytesPerLine];

         for (int y = 0; y &lt; srcImage.Height; y++)
         {
            srcImage.GetRow(y, buffer, 0, buffer.Length);
            destImage.SetRow(y, buffer, 0, buffer.Length);
         }

         destImage.Release();
         srcImage.Release();

         // We do not need the source image anymore
         srcImage.Dispose();

         // save the destination image
         codecs.Save(destImage, outputStream1, RasterImageFormat.Bmp, 0);

         // perform image processing on the image

         FlipCommand flipCmd = new FlipCommand();
         flipCmd.Horizontal = false;
         flipCmd.Run(destImage);

         // save it
         codecs.Save(destImage, outputStream2, RasterImageFormat.Bmp, 0);

         // Clean up
         destImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterImageExample(ByVal srcImage As RasterImage, ByVal outputStream1 As Stream, ByVal outputStream2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Creates a new image in memory with same dimensions as the source image
         Dim destImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, srcImage.Width, srcImage.Height, srcImage.BitsPerPixel, srcImage.Order, srcImage.ViewPerspective, srcImage.GetPalette(), Nothing, 0)

         ' Copy the data from the source image to the destination image
         srcImage.Access()
         destImage.Access()

         Dim buffer As Byte() = New Byte(srcImage.BytesPerLine - 1){}

         Dim y As Integer = 0
         Do While y &lt; srcImage.Height
            srcImage.GetRow(y, buffer, 0, buffer.Length)
            destImage.SetRow(y, buffer, 0, buffer.Length)
            y += 1
         Loop

         destImage.Release()
         srcImage.Release()

         ' We do not need the source image anymore
         srcImage.Dispose()

         ' save the destination image
         codecs.Save(destImage, outputStream1, RasterImageFormat.Bmp, 0)

         ' perform image processing on the image

         Dim flipCmd As FlipCommand = New FlipCommand()
         flipCmd.Horizontal = False
         flipCmd.Run(destImage)

         ' save it
         codecs.Save(destImage, outputStream2, RasterImageFormat.Bmp, 0)

         ' Clean up
         destImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.#ctor(Leadtools.RasterMemoryFlags,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,Leadtools.RasterColor[],System.IntPtr,System.Int64)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterImage" /> object using the specified parameters and optional unmanaged memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="flags">
            A combination of the <see cref="T:Leadtools.RasterMemoryFlags" /> enumeration members indicating the type of memory to allocate
            for the image data.
            </param>
      <param name="width">
            Width of the image in pixels.
            </param>
      <param name="height">
            Height of the image in pixels.
            </param>
      <param name="bitsPerPixel">
        <para>The number of bits per pixel.</para>
        <para>Valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48, and 64.</para>
        <para>Use 0 to create an 8-bit grayscale image. In that case, the method ignores the <paramref name="order" /> and
            the <paramref name="palette" /> parameters.</para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48- and 64-bit images.</para>
        <para>If the resultant image is less than 16 bits per pixel, this will have no effect since palletized images have
            no order.</para>
      </param>
      <param name="viewPerspective">
        <para>Specifies where the beginning of the image is stored.</para>
        <para>Most file formats start in the lower left corner while some formats start in the upper left corner.</para>
      </param>
      <param name="palette">
            The palette that the image will use. You can specify your own palette, or use null
            (Nothing in Visual Basic) for LEAD's fixed palette.  The <paramref name="palette" /> member is used only when 
            <paramref name="bitsPerPixel" /> is less than or equal to 8.
            </param>
      <param name="userData">
        <para>Unmanaged data pointer that will contain the image data when <paramref name="flags" /> is <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>.</para>
        <para>This data must be aligned on a four byte boundary. If <paramref name="userData" /> is IntPtr.Zero, the data pointer 
            must be passed later, by calling the <see cref="M:Leadtools.RasterImage.SetUserData(System.IntPtr,System.Int64)" /> method, before the image can be used.</para>
      </param>
      <param name="userDataLength">Length in bytes of the data passed to <paramref name="userData" />. Only when used when 
            <paramref name="userData" /> is not IntPtr.Zero and <paramref name="flags" /> is <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>.
            </param>
      <remarks>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>There is some speed penalty (loss) for accessing <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Tiled</see> images. Therefore, it is not
            recommended for use with all images.</para>
        <para>The <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Tiled</see> images are not used by default. LEADTOOLS will create them only if it
            failed to create <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Conventional</see> images and <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.NoTiled</see> was not
            specified.</para>
        <para>The following lists the distinct types of bitmaps:
            <list type="bullet"><item><description>Conventional (uncompressed and contiguous) This is the most common type.</description></item><item><description>Compressed (1-bit only)</description></item><item><description>Tiled (uncompressed, stored internally as up to 64MB tiles)</description></item></list></para>
        <para>If you pass <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>, you are responsible for freeing the image data.</para>
        <para>Creating an image of type <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see> does not allocate memory for the image data.
            Instead, the data pointer <paramref name="userData" /> is used. When you create a <see cref="T:Leadtools.RasterImage" /> with user data, the <see cref="P:Leadtools.RasterImage.IsConventionalMemory" /> and
            <see cref="P:Leadtools.RasterImage.IsMirrored" /> flags will both be set to <strong>true</strong>. Some image processing commands, such as <see cref="T:Leadtools.ImageProcessing.RotateCommand" />, need to re-allocate the image data. If you
            create an image with <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>, and pass it to these methods, the data will be re-allocated internally
            by LEADTOOLS and the image object will stop using the data in <paramref name="userData" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.#ctor(Leadtools.RasterMemoryFlags,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,Leadtools.RasterColor[],System.Byte[],System.Int32)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterImage" /> object using the specified parameters and optional managed memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="flags">
            A combination of the <see cref="T:Leadtools.RasterMemoryFlags" /> enumeration members indicating the type of memory to allocate
            for the image data.
            </param>
      <param name="width">
            Width of the image in pixels.
            </param>
      <param name="height">
            Height of the image in pixels.
            </param>
      <param name="bitsPerPixel">
        <para>The number of bits per pixel.</para>
        <para>Valid values are 0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48, and 64.</para>
        <para>Use 0 to create an 8-bit grayscale image. In that case, the method ignores the <paramref name="order" /> and
            the <paramref name="palette" /> parameters.</para>
      </param>
      <param name="order">
        <para>Color order for 16-, 24-, 32-, 48- and 64-bit images.</para>
        <para>If the resultant image is less than 16 bits per pixel, this will have no effect since palletized images have
            no order.</para>
      </param>
      <param name="viewPerspective">
        <para>Specifies where the beginning of the image is stored.</para>
        <para>Most file formats start in the lower left corner while some formats start in the upper left corner.</para>
      </param>
      <param name="palette">
            The palette that the image will use. You can specify your own palette, or use null
            (Nothing in Visual Basic) for LEAD's fixed palette.  The <paramref name="palette" /> member is used only when 
            <paramref name="bitsPerPixel" /> is less than or equal to 8.
            </param>
      <param name="userData">
        <para>Managed data array that will contain the image data when <paramref name="flags" /> is <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>.</para>
        <para>This data must be aligned on a four byte boundary. If <paramref name="userData" /> is null (Nothing in Visual Basic), the data pointer 
            must be passed later, by calling the <see cref="M:Leadtools.RasterImage.SetUserData(System.IntPtr,System.Int64)" /> method, before the image can be used.</para>
      </param>
      <param name="userDataLength">Length in bytes of the data passed to <paramref name="userData" />. Only when used when 
            <paramref name="userData" /> is not null and <paramref name="flags" /> is <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>.
            </param>
      <remarks>
        <para>Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>There is some speed penalty (loss) for accessing <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Tiled</see> images. Therefore, it is not
            recommended for use with all images.</para>
        <para>The <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Tiled</see> images are not used by default. LEADTOOLS will create them only if it
            failed to create <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Conventional</see> images and <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.NoTiled</see> was not
            specified.</para>
        <para>The following lists the distinct types of bitmaps:
            <list type="bullet"><item><description>Conventional (uncompressed and contiguous) This is the most common type.</description></item><item><description>Compressed (1-bit only)</description></item><item><description>Tiled (uncompressed, stored internally as up to 64MB tiles)</description></item></list></para>
        <para>Creating an image of type <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see> does not allocate memory for the image data.
            Instead, the data pointer <paramref name="userData" /> is used. When you create a <see cref="T:Leadtools.RasterImage" /> with user data, the <see cref="P:Leadtools.RasterImage.IsConventionalMemory" /> and
            <see cref="P:Leadtools.RasterImage.IsMirrored" /> flags will both be set to <strong>true</strong>. Some image processing commands, such as <see cref="T:Leadtools.ImageProcessing.RotateCommand" />, need to re-allocate the image data. If you
            create an image with <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>, and pass it to these methods, the data will be re-allocated internally
            by LEADTOOLS and the image object will stop using the data in <paramref name="userData" />.</para>
        <para>
          <strong>Important:</strong> The above discussion is valid only for the LEADTOOLS Silverlight toolkit. LEADTOOLS for .NET does not support
            user memory of type array of <see cref="T:System.Byte" />. Instead, calling this method in LEADTOOLS for .NET will create a regular conventional 
            memory image then copy the data passed through <paramref name="userData" /> to the internal image data. <paramref name="userData" /> will
            not be used after this method returns. To create a true user-memory raster images in LEADTOOLS for .NET, use the
            <see cref="M:Leadtools.RasterImage.#ctor(Leadtools.RasterMemoryFlags,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,Leadtools.RasterColor[],System.IntPtr,System.Int64)">RasterImage(..., IntPtr userData, ...)</see> constructor.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.#ctor(Leadtools.RasterImage)">
      <summary>Constructs a new <see cref="T:Leadtools.RasterImage" /> from the specified existing <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="srcImage">The <see cref="T:Leadtools.RasterImage" /> from which to create the new <see cref="T:Leadtools.RasterImage" />.</param>
      <remarks>
        <para>This constructor will "pull" all the internal data (image pages, metadata, etc) from <paramref name="srcImage" /> and
            puts a copy of them into the newly created <see cref="T:Leadtools.RasterImage" />.</para>
        <para>After calling this constructor, <paramref name="srcImage" /> remains valid and changes to its properties or data will not
            affect the newly created <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>This constructor is useful when deriving your own classes from <see cref="T:Leadtools.RasterImage" /> as shown in the example below.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para>This example derives a new class from then use the RasterImage(RasterImage) constructor.</para>
        <code lang="VB">      ' A class that derives from RasterImage
      Public Class MyRasterImage : Inherits RasterImage
         Private _myData As Integer
         Public Sub New(ByVal src As RasterImage)

            MyBase.New(src)
            _myData = 0
         End Sub

         Public Property MyData() As Integer
            Get
               Return _myData
            End Get
            Set(ByVal value As Integer)
               _myData = Value
            End Set
         End Property
      End Class


      Public Sub DerivedRasterImage()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the image
         Dim img As RasterImage = codecs.Load(srcFileName)

         ' create a new MyRasterImage instance out of this image
         Dim myImage As MyRasterImage = New MyRasterImage(img)

         ' img is inavlid now and shoule be disposed
         img.Dispose()

         ' Now you can use myImage just like any other RasterImage but with your own data
         myImage.PaintGamma = 50 ' RasterImage property
         myImage.MyData = 10 ' MyRasterImage property

         Debug.Assert(myImage.PaintGamma = 50)
         Debug.Assert(myImage.MyData = 10)

         ' Clean up
         myImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // A class that derives from RasterImage
      public class MyRasterImage : RasterImage
      {
         private int _myData;
         public MyRasterImage(RasterImage src)
            :
            base(src)
         {
            _myData = 0;
         }

         public int MyData
         {
            get
            {
               return _myData;
            }
            set
            {
               _myData = value;
            }
         }
      }


      public void DerivedRasterImage()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the image
         RasterImage img = codecs.Load(srcFileName);

         // create a new MyRasterImage instance out of this image
         MyRasterImage myImage = new MyRasterImage(img);

         // img is inavlid now and shoule be disposed
         img.Dispose();

         // Now you can use myImage just like any other RasterImage but with your own data
         myImage.PaintGamma = 50;   // RasterImage property
         myImage.MyData = 10;       // MyRasterImage property

         Debug.Assert(myImage.PaintGamma == 50);
         Debug.Assert(myImage.MyData == 10);

         // Clean up
         myImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      // A class that derives from RasterImage
      public class MyRasterImage : RasterImage
      {
         private int _myData;
         public MyRasterImage(RasterImage src)
            :
            base(src)
         {
            _myData = 0;
         }

         public int MyData
         {
            get
            {
               return _myData;
            }
            set
            {
               _myData = value;
            }
         }
      }

      public void DerivedRasterImage(RasterImage srcImage)
      {
         // create a new MyRasterImage instance out of this image
         MyRasterImage myImage = new MyRasterImage(srcImage);

         // srcImage is inavlid now and should be disposed
         srcImage.Dispose();

         // Now you can use myImage just like any other RasterImage but with your own data
         myImage.TransparentColor = RasterColorConverter.FromColor(Colors.Blue);   // RasterImage property
         myImage.MyData = 10;       // MyRasterImage property

         Debug.Assert(myImage.MyData == 10);

         // Clean up
         myImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      ' A class that derives from RasterImage
      Public Class MyRasterImage : Inherits RasterImage
         Private _myData As Integer
         Public Sub New(ByVal src As RasterImage)

   MyBase.New(src)
            _myData = 0
         End Sub

         Public Property MyData() As Integer
            Get
               Return _myData
            End Get
            Set
               _myData = Value
            End Set
         End Property
      End Class

      Public Sub DerivedRasterImage(ByVal srcImage As RasterImage)
         ' create a new MyRasterImage instance out of this image
         Dim myImage As MyRasterImage = New MyRasterImage(srcImage)

         ' srcImage is inavlid now and should be disposed
         srcImage.Dispose()

         ' Now you can use myImage just like any other RasterImage but with your own data
         myImage.TransparentColor = RasterColorConverter.FromColor(Colors.Blue) ' RasterImage property
         myImage.MyData = 10 ' MyRasterImage property

         Debug.Assert(myImage.MyData = 10)

         ' Clean up
         myImage.Dispose()
        End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImage" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN, the <see cref="P:Leadtools.RasterImage.IsDisposed" /> property and the
            <see cref="E:Leadtools.RasterImage.Disposed">RasterImage.Disposed</see> event.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImage" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN, the <see cref="P:Leadtools.RasterImage.IsDisposed" /> property and the
            <see cref="E:Leadtools.RasterImage.Disposed">RasterImage.Disposed</see> event.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="disposing">
        <strong>True</strong> to release both managed and unmanaged resources; <strong>False</strong> to release only unmanaged resources.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImage" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN, the <see cref="P:Leadtools.RasterImage.IsDisposed" /> property and the
            <see cref="E:Leadtools.RasterImage.Disposed">RasterImage.Disposed</see> event.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)">
      <summary>Raises the <see cref="E:Leadtools.RasterImage.Changed" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="e">A <see cref="T:Leadtools.RasterImageChangedEventArgs" /> that contains the event data. </param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <see cref="M:Leadtools.RasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)" /> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>Notes to Inheritors:  When overriding <see cref="M:Leadtools.RasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)" /> in a derived class, be sure to call the base class's
            <see cref="M:Leadtools.RasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)" /> method so that registered delegates receive the event.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.DisableEvents">
      <summary>Disables raising the <see cref="E:Leadtools.RasterImage.Changed" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Calling <see cref="M:Leadtools.RasterImage.DisableEvents" /> will increment an internal counter.  When the internal counter is 0,
            the <see cref="E:Leadtools.RasterImage.Changed" /> events will be raised for changes to the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>When the internal counter is != 0, <see cref="E:Leadtools.RasterImage.Changed" /> will not be raised. Therefore, for each call to
            <see cref="M:Leadtools.RasterImage.DisableEvents" />, there should be a corresponding call to <see cref="M:Leadtools.RasterImage.EnableEvents" /> in order to restore the
            raising of events.</para>
        <para>You can temporary disable the <see cref="E:Leadtools.RasterImage.Changed" /> event when performing multiple operations on a
            <see cref="T:Leadtools.RasterImage" /> object then re-enabling it once the operations are done.  This way, any listeners to the 
            <see cref="E:Leadtools.RasterImage.Changed" /> event will be notified only once thus optimizing the performance.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.EnableEvents">
      <summary>Enables raising the <see cref="E:Leadtools.RasterImage.Changed" /> event. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Calling <see cref="M:Leadtools.RasterImage.DisableEvents" /> will increment an internal counter.  When the internal counter is 0,
            the <see cref="E:Leadtools.RasterImage.Changed" /> events will be raised for changes to the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>When the internal counter is != 0, <see cref="E:Leadtools.RasterImage.Changed" /> will not be raised. Therefore, for each call to
            <see cref="M:Leadtools.RasterImage.DisableEvents" />, there should be a corresponding call to <see cref="M:Leadtools.RasterImage.EnableEvents" /> in order to restore the
            raising of events.</para>
        <para>You can temporary disable the <see cref="E:Leadtools.RasterImage.Changed" /> event when performing multiple operations on a
            <see cref="T:Leadtools.RasterImage" /> object then re-enabling it once the operations are done.  This way, any listeners to the 
            <see cref="E:Leadtools.RasterImage.Changed" /> event will be notified only once thus optimizing the performance.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.Clone">
      <summary>Creates an exact copy of the current page of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterImage" /> this method creates.</returns>
      <remarks>
        <para>You can also use the <see cref="M:Leadtools.RasterImage.#ctor(Leadtools.RasterImage)" /> constructor to create an exact copy of an existing
            <see cref="T:Leadtools.RasterImage" />.</para>
        <para>To create a copy of an object while maintaining a progress status, refer to the <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</para>
        <para>This method copies only the current active page and no metadata information is copied.  To create an exact copy of a
            <see cref="T:Leadtools.RasterImage" /> object use the <see cref="M:Leadtools.RasterImage.CloneAll" /> method.</para>
        <para>To clone an image with support for a progress event, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</para>
      </remarks>
      <example>
        <para>This example loads a multi-page image and clones it in 3 different ways.</para>
        <code lang="VB">      Public Sub CloneExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")

         ' Load the multi-page image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)
         Console.WriteLine("Pages in source image: {0}", srcImage.PageCount)

         ' Use the Clone method to clone this image
         ' Notice, this method only clones the current active page only
         Dim destImage1 As RasterImage = srcImage.Clone()
         Console.WriteLine("Pages in image created with Clone: {0}", destImage1.PageCount)
         Debug.Assert(destImage1.PageCount = 1)

         ' Use the Clone rectangle method to clone this image
         ' Notice, this method also clones the current active page only
         Dim rc As LeadRect = New LeadRect(0, 0, srcImage.Width \ 2, srcImage.Height \ 2)
         Console.WriteLine("Cloning with a rectangle = {0}", rc.ToString())
         Dim destImage2 As RasterImage = srcImage.Clone(rc)
         Console.WriteLine("Pages in image created with Clone(LeadRect): {0}", destImage2.PageCount)
         Console.WriteLine("Image created with Clone(LeadRect) size = {0} by {1}", destImage2.Width, destImage2.Height)
         Debug.Assert(destImage2.PageCount = 1)
         Debug.Assert(destImage2.Width = srcImage.Width \ 2)
         Debug.Assert(destImage2.Height = srcImage.Height \ 2)

         ' Use the CloneAll method, this should create a copy
         ' of all the pages
         Dim destImage3 As RasterImage = srcImage.CloneAll()
         Console.WriteLine("Pages in image created with CloneAll: {0}", destImage3.PageCount)
         Debug.Assert(destImage3.PageCount = srcImage.PageCount)

         ' Use the CloneCommand, this allows you to have a progress
         ' bar as well as control the memory flags, here
         ' we will create a destination image using disk memory.
         Dim cloneCmd As CloneCommand = New CloneCommand()
         AddHandler cloneCmd.Progress, AddressOf cloneCmd_Progress
         cloneCmd.CreateFlags = RasterMemoryFlags.Disk
         cloneCmd.Run(srcImage)
         RemoveHandler cloneCmd.Progress, AddressOf cloneCmd_Progress

         Dim destImage4 As RasterImage = cloneCmd.DestinationImage
         Console.WriteLine("Pages in image created with CloneCommand: {0}", destImage4.PageCount)
         Console.WriteLine("Disk memory model of image created with CloneCommand: {0}", destImage4.IsDiskMemory)
         Debug.Assert(destImage4.PageCount = 1)
         Debug.Assert(destImage4.IsDiskMemory)

         ' Clean up
         destImage4.Dispose()
         destImage3.Dispose()
         destImage2.Dispose()
         destImage1.Dispose()
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

      Private Sub cloneCmd_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         If e.Percent = 0 Then
            Console.WriteLine("Clone progress started")
         End If
         If e.Percent = 100 Then
            Console.WriteLine("Clone progress ended")
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CloneExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");

         // Load the multi-page image
         RasterImage srcImage = codecs.Load(srcFileName);
         Console.WriteLine("Pages in source image: {0}", srcImage.PageCount);

         // Use the Clone method to clone this image
         // Notice, this method only clones the current active page only
         RasterImage destImage1 = srcImage.Clone();
         Console.WriteLine("Pages in image created with Clone: {0}", destImage1.PageCount);
         Debug.Assert(destImage1.PageCount == 1);

         // Use the Clone rectangle method to clone this image
         // Notice, this method also clones the current active page only
         LeadRect rc = new LeadRect(0, 0, srcImage.Width / 2, srcImage.Height / 2);
         Console.WriteLine("Cloning with a rectangle = {0}", rc.ToString());
         RasterImage destImage2 = srcImage.Clone(rc);
         Console.WriteLine("Pages in image created with Clone(LeadRect): {0}", destImage2.PageCount);
         Console.WriteLine("Image created with Clone(LeadRect) size = {0} by {1}", destImage2.Width, destImage2.Height);
         Debug.Assert(destImage2.PageCount == 1);
         Debug.Assert(destImage2.Width == srcImage.Width / 2);
         Debug.Assert(destImage2.Height == srcImage.Height / 2);

         // Use the CloneAll method, this should create a copy
         // of all the pages
         RasterImage destImage3 = srcImage.CloneAll();
         Console.WriteLine("Pages in image created with CloneAll: {0}", destImage3.PageCount);
         Debug.Assert(destImage3.PageCount == srcImage.PageCount);

         // Use the CloneCommand, this allows you to have a progress
         // bar as well as control the memory flags, here
         // we will create a destination image using disk memory.
         CloneCommand cloneCmd = new CloneCommand();
         cloneCmd.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);
         cloneCmd.CreateFlags = RasterMemoryFlags.Disk;
         cloneCmd.Run(srcImage);
         cloneCmd.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);

         RasterImage destImage4 = cloneCmd.DestinationImage;
         Console.WriteLine("Pages in image created with CloneCommand: {0}", destImage4.PageCount);
         Console.WriteLine("Disk memory model of image created with CloneCommand: {0}", destImage4.IsDiskMemory);
         Debug.Assert(destImage4.PageCount == 1);
         Debug.Assert(destImage4.IsDiskMemory);

         // Clean up
         destImage4.Dispose();
         destImage3.Dispose();
         destImage2.Dispose();
         destImage1.Dispose();
         srcImage.Dispose();
         codecs.Dispose();
      }

      void cloneCmd_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         if(e.Percent == 0)
            Console.WriteLine("Clone progress started");
         if(e.Percent == 100)
            Console.WriteLine("Clone progress ended");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CloneExample(RasterImage image)
      {
         RasterImage srcImage = image; // should be a multi-page image (eye.gif)
         Debug.WriteLine("Pages in source image: {0}", srcImage.PageCount);

         // Use the Clone method to clone this image
         // Notice, this method only clones the current active page only
         RasterImage destImage1 = srcImage.Clone();
         Debug.WriteLine("Pages in image created with Clone: {0}", destImage1.PageCount);
         Debug.Assert(destImage1.PageCount == 1);

         // Use the Clone rectangle method to clone this image
         // Notice, this method also clones the current active page only
         LeadRect rc = new LeadRect(0, 0, srcImage.Width / 2, srcImage.Height / 2);
         Debug.WriteLine("Cloning with a rectangle = {0}", rc.ToString());
         RasterImage destImage2 = srcImage.Clone(rc);
         Debug.WriteLine("Pages in image created with Clone(Rectangle): {0}", destImage2.PageCount);
         Debug.WriteLine("Image created with Clone(Rectangle) size = {0} by {1}", destImage2.Width, destImage2.Height);
         Debug.Assert(destImage2.PageCount == 1);
         Debug.Assert(destImage2.Width == srcImage.Width / 2);
         Debug.Assert(destImage2.Height == srcImage.Height / 2);

         // Use the CloneAll method, this should create a copy
         // of all the pages
         RasterImage destImage3 = srcImage.CloneAll();
         Debug.WriteLine("Pages in image created with CloneAll: {0}", destImage3.PageCount);
         Debug.Assert(destImage3.PageCount == srcImage.PageCount);

         // Use the CloneCommand, this allows you to have a progress
         // bar as well as control the memory flags, here
         // we will create a destination image using conventional memory.
         CloneCommand cloneCmd = new CloneCommand();
         cloneCmd.Progress += new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);
         cloneCmd.CreateFlags = RasterMemoryFlags.Conventional;
         cloneCmd.Run(srcImage);
         cloneCmd.Progress -= new EventHandler&lt;RasterCommandProgressEventArgs&gt;(cloneCmd_Progress);

         RasterImage destImage4 = cloneCmd.DestinationImage;
         Debug.WriteLine("Pages in image created with CloneCommand: {0}", destImage4.PageCount);
         Debug.WriteLine("Disk memory model of image created with CloneCommand: {0}", destImage4.IsDiskMemory);
         Debug.Assert(destImage4.PageCount == 1);
         Debug.Assert(destImage4.IsConventionalMemory);

         // Clean up
         destImage4.Dispose();
         destImage3.Dispose();
         destImage2.Dispose();
         destImage1.Dispose();
         srcImage.Dispose();
      }

      void cloneCmd_Progress(object sender, RasterCommandProgressEventArgs e)
      {
         if (e.Percent == 0)
            Debug.WriteLine("Clone progress started");
         if (e.Percent == 100)
            Debug.WriteLine("Clone progress ended");
      }</code>
        <code lang="SilverlightVB">      Public Sub CloneExample(ByVal image As RasterImage)
         Dim srcImage As RasterImage = image ' should be a multi-page image (eye.gif)
         Debug.WriteLine("Pages in source image: {0}", srcImage.PageCount)

         ' Use the Clone method to clone this image
         ' Notice, this method only clones the current active page only
         Dim destImage1 As RasterImage = srcImage.Clone()
         Debug.WriteLine("Pages in image created with Clone: {0}", destImage1.PageCount)
         Debug.Assert(destImage1.PageCount = 1)

         ' Use the Clone rectangle method to clone this image
         ' Notice, this method also clones the current active page only
         Dim rc As LeadRect = New LeadRect(0, 0, srcImage.Width / 2, srcImage.Height / 2)
         Debug.WriteLine("Cloning with a rectangle = {0}", rc.ToString())
         Dim destImage2 As RasterImage = srcImage.Clone(rc)
         Debug.WriteLine("Pages in image created with Clone(Rectangle): {0}", destImage2.PageCount)
         Debug.WriteLine("Image created with Clone(Rectangle) size = {0} by {1}", destImage2.Width, destImage2.Height)
         Debug.Assert(destImage2.PageCount = 1)
         Debug.Assert(destImage2.Width = srcImage.Width / 2)
         Debug.Assert(destImage2.Height = srcImage.Height / 2)

         ' Use the CloneAll method, this should create a copy
         ' of all the pages
         Dim destImage3 As RasterImage = srcImage.CloneAll()
         Debug.WriteLine("Pages in image created with CloneAll: {0}", destImage3.PageCount)
         Debug.Assert(destImage3.PageCount = srcImage.PageCount)

         ' Use the CloneCommand, this allows you to have a progress
         ' bar as well as control the memory flags, here
         ' we will create a destination image using conventional memory.
         Dim cloneCmd As CloneCommand = New CloneCommand()
         AddHandler cloneCmd.Progress, AddressOf cloneCmd_Progress
         cloneCmd.CreateFlags = RasterMemoryFlags.Conventional
         cloneCmd.Run(srcImage)
         RemoveHandler cloneCmd.Progress, AddressOf cloneCmd_Progress

         Dim destImage4 As RasterImage = cloneCmd.DestinationImage
         Debug.WriteLine("Pages in image created with CloneCommand: {0}", destImage4.PageCount)
         Debug.WriteLine("Disk memory model of image created with CloneCommand: {0}", destImage4.IsDiskMemory)
         Debug.Assert(destImage4.PageCount = 1)
         Debug.Assert(destImage4.IsConventionalMemory)

         ' Clean up
         destImage4.Dispose()
         destImage3.Dispose()
         destImage2.Dispose()
         destImage1.Dispose()
         srcImage.Dispose()
      End Sub

      Private Sub cloneCmd_Progress(ByVal sender As Object, ByVal e As RasterCommandProgressEventArgs)
         If e.Percent = 0 Then
            Debug.WriteLine("Clone progress started")
         End If
         If e.Percent = 100 Then
            Debug.WriteLine("Clone progress ended")
         End If
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CloneAll">
      <summary>Creates an exact copy of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterImage" /> this method creates.</returns>
      <remarks>
        <para>You can also use the <see cref="M:Leadtools.RasterImage.#ctor(Leadtools.RasterImage)">RasterImage(RasterImage)</see> constructor to create an exact copy of an existing
            <see cref="T:Leadtools.RasterImage" />.</para>
        <para>To create a copy of an object while maintaining a progress status, refer to the <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</para>
        <para>This method copies all the pages and any metadata contained in the <see cref="T:Leadtools.RasterImage" />. To create a copy of only the
            current active page (no metadata information), use the <see cref="M:Leadtools.RasterImage.Clone" /> method.</para>
        <para>To clone an image with support for a progress event, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.Clone" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.Clone(Leadtools.LeadRect)">
      <summary>Creates a new <see cref="T:Leadtools.RasterImage" /> object by copying an area of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rc">Specifies the area to copy.</param>
      <remarks>
        <para>This method copies only the current active page.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.Clone" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.CreateThumbnail(System.Int32,System.Int32,System.Int32,Leadtools.RasterViewPerspective,Leadtools.RasterSizeFlags)">
      <summary>Creates a thumbnail image of this <b>RasterImage</b>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="thumbnailWidth">The desired maximum width of the thumbnail image in pixels.</param>
      <param name="thumbnailHeight">The desired maximum height of the thumbnail image in pixels.</param>
      <param name="bitsPerPixel">The desired bits per pixel.</param>
      <param name="viewPerspective">The desired view perspective.</param>
      <param name="sizeFlags">Flags that control the resize operation.</param>
      <returns>A new <b>RasterImage</b> that is the thumbnail image.</returns>
      <remarks>
        <para>
            If the image width and height is less than <i>thumbnailWidth</i> and <i>thumbnailHeight</i>, then this method returns a copy of the 
            image in the original size.
            </para>
        <para>
            If the image width or height is greater than <i>thumbnailWidth</i> and <i>thumbnailHeight</i>, then this method will return the biggest 
            thumbnail it can fit into the dimensions specified by <i>thumbailWidth</i> and <i>thumbnailHeight</i>, keeping the original image 
            aspect ratio.
            </para>
        <para>The result image will always have a resolution of 96 by 96 regardless of the resolution this <see cref="T:Leadtools.RasterImage" /> and will never return a thumbnail bigger
            than the original image.
            </para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CreateThumbnailExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")

         ' Load the image
         Dim srcImage As RasterImage = codecs.Load(srcFileName)

         ' Use the CreateTumbnail method to create a thumbnail of this image
         Dim thumbnail As RasterImage = srcImage.CreateThumbnail(200, 200, 24, RasterViewPerspective.TopLeft, RasterSizeFlags.Bicubic)
         Debug.Assert(thumbnail.PageCount = 1)

         ' Clean up
         thumbnail.Dispose()
         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateThumbnailExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");

         // Load the image
         RasterImage srcImage = codecs.Load(srcFileName);

         // Use the CreateTumbnail method to create a thumbnail of this image
         RasterImage thumbnail = srcImage.CreateThumbnail(200, 200, 24, RasterViewPerspective.TopLeft, RasterSizeFlags.Bicubic);
         Debug.Assert(thumbnail.PageCount == 1);

         // Clean up
         thumbnail.Dispose();
         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CreateThumbnailExample(RasterImage srcImage)
      {
         // Use the CreateTumbnail method to create a thumbnail of this image
         RasterImage thumbnail = srcImage.CreateThumbnail(200, 200, 24, RasterViewPerspective.TopLeft, RasterSizeFlags.Bicubic);
         Debug.Assert(thumbnail.PageCount == 1);
         // Clean up
         thumbnail.Dispose();
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CreateThumbnailExample(ByVal srcImage As RasterImage)
         ' Use the CreateTumbnail method to create a thumbnail of this image
         Dim thumbnail As RasterImage = srcImage.CreateThumbnail(200, 200, 24, RasterViewPerspective.TopLeft, RasterSizeFlags.Bicubic)
         Debug.Assert(thumbnail.PageCount = 1)
         ' Clean up
         thumbnail.Dispose()
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">
      <summary>Adds a new page to this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image to add.</param>
      <remarks>
        <para>This method pulls the current active page from <paramref name="image" /> and appends it at the end of the pages
            list of this <see cref="T:Leadtools.RasterImage" /> object.  The number of pages in <paramref name="image" /> is decremented by one, if
            <paramref name="image" /> had only one page prior to calling this method, then the <paramref name="image" /> object is disposed
            of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>Adds one or more images to this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the pages to add.</param>
      <param name="startIndex">The 1-based index starting from which to begin adding.</param>
      <param name="count">Total number of images to add. Specify <c>-1</c> to add all images.</param>
      <remarks>
        <para>This method pulls the pages from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
            <paramref name="count" /> from <paramref name="image" /> and appends it at the end of the pages
            list of this <see cref="T:Leadtools.RasterImage" /> object.  The number of pages in <paramref name="image" /> is decremented by 
            <paramref name="count" />, if <paramref name="image" /> had only <paramref name="count" /> number of pages prior to calling
            this method, then the <paramref name="image" /> object is disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.RemovePageAt(System.Int32)">
      <summary>Removes the page at the specified index from this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="pageIndex">The 1-based index of the page to remove.</param>
      <remarks>
        <para>All pages after <paramref name="pageIndex" /> will be moved up in this <see cref="T:Leadtools.RasterImage" /> list of pages.</para>
        <para>You cannot have a <see cref="T:Leadtools.RasterImage" /> with no pages, therefore, an exception will occur if you attempt to remove
            the only page left in a <see cref="T:Leadtools.RasterImage" /> object</para>
        <para>This method pulls the pages from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
            <paramref name="count" /> from <paramref name="image" /> and appends it at the end of the pages
            list of this <see cref="T:Leadtools.RasterImage" /> object.  The number of pages in <paramref name="image" /> is decremented by 
            <paramref name="count" />, if <paramref name="image" /> had only <paramref name="count" /> number of pages prior to calling
            this method, then the <paramref name="image" /> object is disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)">
      <summary>Removes one or more pages from this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="startIndex">1-based index of the first page to remove.</param>
      <param name="count">Number of pages to remove. Specify <c>-1</c> to remove all pages.</param>
      <remarks>
        <para>All pages after <paramref name="pageIndex" /> will be moved up in this <see cref="T:Leadtools.RasterImage" /> list of pages.</para>
        <para>You cannot have a <see cref="T:Leadtools.RasterImage" /> with no pages, therefore, an exception will occur if you attempt to remove
            the only page left in a <see cref="T:Leadtools.RasterImage" /> object</para>
        <para>This method pulls the pages from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
            <paramref name="count" /> from <paramref name="image" /> and appends it at the end of the pages
            list of this <see cref="T:Leadtools.RasterImage" /> object.  The number of pages in <paramref name="image" /> is decremented by 
            <paramref name="count" />, if <paramref name="image" /> had only <paramref name="count" /> number of pages prior to calling
            this method, then the <paramref name="image" /> object is disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.RemoveAllPages">
      <summary>Removes all pages from this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This method will remove all but the current active page from this <see cref="T:Leadtools.RasterImage" />.  The current active
            page is the page with index equal to <see cref="P:Leadtools.RasterImage.Page" />.  Since you cannot have a <see cref="T:Leadtools.RasterImage" /> with
            no pages, calling this method will result in a <see cref="T:Leadtools.RasterImage" /> object with exactly 1 page.</para>
        <para>This method pulls the pages from <paramref name="startIndex" /> to <paramref name="startIndex" /> +
            <paramref name="count" /> from <paramref name="image" /> and appends it at the end of the pages
            list of this <see cref="T:Leadtools.RasterImage" /> object.  The number of pages in <paramref name="image" /> is decremented by 
            <paramref name="count" />, if <paramref name="image" /> had only <paramref name="count" /> number of pages prior to calling
            this method, then the <paramref name="image" /> object is disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)">
      <summary>Inserts a new page into this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The 1-based index of the page from <paramref name="image" /> to insert. If <paramref name="index" /> is
            equal to <c>-1</c>, the page is inserted at the end. Use <paramref name="index" /> = 0 to insert the new page as the beginning (first).</param>
      <param name="image">The image to add.</param>
      <returns>The 1-based index of the newly inserted page.</returns>
      <remarks>
        <para>This method pulls the current active page of <paramref name="image" /> and inserts into the current
            <see cref="T:Leadtools.RasterImage" /> object at index = <paramref name="index" />. The number of pages in
            <paramref name="image" /> is decremented by one, if <paramref name="image" /> had only one page prior to calling this method, then the <paramref name="image" /> object is disposed
            of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>Inserts one or more pages into this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">1-based index of the page from <paramref name="image" /> to insert.</param>
      <param name="image">The image containing the source pages.</param>
      <param name="startIndex">1-based index of the first page to insert. Use <paramref name="index" /> = 0 to insert the new page as the beginning (first).</param>
      <param name="count">Number of pages to insert. Specify <c>-1</c> to insert all pages.</param>
      <remarks>
        <para>This method pulls the pages from <paramref name="index" /> to <paramref name="index" /> + <paramref name="count" /> from
            <paramref name="image" /> and inserts them into the current <see cref="T:Leadtools.RasterImage" /> object at
            index = <paramref name="index" />. The number of pages in <paramref name="image" /> is decremented by <paramref name="count" />
            if <paramref name="image" /> had only one page prior to calling this method, then the <paramref name="image" /> object is
            disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)">
      <summary>Replaces an existing page in this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The 1-based index of the page from <paramref name="image" /> to replace. If <paramref name="index" /> is
            equal to <c>-1</c>, the last page in the image will be replaced.</param>
      <param name="image">The source image to replace with.</param>
      <remarks>
        <para>This method pulls the current active page of <paramref name="image" /> and inserts into the current
            <see cref="T:Leadtools.RasterImage" /> object at page number = <paramref name="index" />. The number of pages in
            <paramref name="image" /> is decremented by one, if <paramref name="image" /> had only one page prior to calling this method, then the <paramref name="image" /> object is disposed
            of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub TestReplacePage()
         ' Create a mult-page image from the following files:

         Dim pageFileNames() As String = _
         { _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample2.cmp"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample3.cmp"), _
            Path.Combine(LEAD_VARS.ImagesDir, "Sample4.cmp") _
         }

         Dim newPageFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         Dim codecs As New RasterCodecs()

         Dim image As RasterImage = Nothing
         For Each pageFileName As String In pageFileNames
            Dim page As RasterImage = codecs.Load(pageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)

            If Not IsNothing(image) Then
               image.AddPage(page)
            Else
               image = page
            End If
         Next

         ' Show the image now
         ShowMultiPageImageInfo("Original image", image)

         ' Load the page to replace
         Dim newPage As RasterImage = codecs.Load(newPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)

         Console.WriteLine("Loaded a new page of size {0} by {1}", newPage.Width, newPage.Height)

         ' Replace the second page on the image with this page
         image.ReplacePage(2, newPage)

         ' Show the list now
         ShowMultiPageImageInfo("New image after replacing page number 2", image)

         image.Dispose()
         codecs.Dispose()
      End Sub

      Private Shared Sub ShowMultiPageImageInfo(ByVal message As String, ByVal image As RasterImage)
         Console.WriteLine(message)

         Dim savePage As Integer = image.Page

         For i As Integer = 1 To image.PageCount
            image.Page = i
            Console.WriteLine("  {0}: Size {1} by {2} pixels", i, image.Width, image.Height)
         Next

         image.Page = savePage

         Console.WriteLine("----------------")
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void TestReplacePage()
      {
         // Create a mult-page image from the following files:

         string[] pageFileNames =
         {
            Path.Combine(LEAD_VARS.ImagesDir,"Sample1.cmp"),
            Path.Combine(LEAD_VARS.ImagesDir,"Sample2.cmp"),
            Path.Combine(LEAD_VARS.ImagesDir,"Sample3.cmp"),
            Path.Combine(LEAD_VARS.ImagesDir,"Sample4.cmp")
         };
         string newPageFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");

         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = null;
         foreach(string pageFileName in pageFileNames)
         {
            RasterImage page = codecs.Load(pageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);

            if(image != null)
            {
               image.AddPage(page);
            }
            else
            {
               image = page;
            }
         }

         // Show the image now
         ShowMultiPageImageInfo("Original image", image);

         // Load the page to replace
         RasterImage newPage = codecs.Load(newPageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         Console.WriteLine("Loaded a new page of size {0} by {1}", newPage.Width, newPage.Height);

         // Replace the second page on the image with this page
         image.ReplacePage(2, newPage);

         // Show the list now
         ShowMultiPageImageInfo("New image after replacing page number 2", image);

         image.Dispose();
         codecs.Dispose();
      }

      private static void ShowMultiPageImageInfo(string message, RasterImage image)
      {
         Console.WriteLine(message);

         int savePage = image.Page;

         for(int i = 1; i &lt;= image.PageCount; i++)
         {
            image.Page = i;
            Console.WriteLine("  {0}: Size {1} by {2} pixels", i, image.Width, image.Height);
         }

         image.Page = savePage;

         Console.WriteLine("----------------");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)">
      <summary>Replaces one or more pages of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">1-based index of the page from <paramref name="image" /> to replace.</param>
      <param name="image">The image containing the source pages.</param>
      <param name="startIndex">1-based index of the first page to replace from.</param>
      <param name="count">Number of pages to replace. Specify <c>-1</c> to replace all pages.</param>
      <remarks>
        <para>This method pulls the pages from <paramref name="index" /> to <paramref name="index" /> + <paramref name="count" /> from
            <paramref name="image" /> and replaces the pages in the current <see cref="T:Leadtools.RasterImage" /> object at
            index = <paramref name="index" />. The number of pages in <paramref name="image" /> is decremented by <paramref name="count" />
            if <paramref name="image" /> had only one page prior to calling this method, then the <paramref name="image" /> object is
            disposed of and should not be used afterwards.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.GetImageWidthDpi(System.Boolean)">
      <summary>Gets the width of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> and <see cref="P:Leadtools.RasterImage.XResolution" /> into account. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="useDpi">true to take into account the resolution (DPI) of the image; false to ignore the DPI.</param>
      <returns>The width of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> and <see cref="P:Leadtools.RasterImage.XResolution" /> into account.</returns>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImage.Width" /> to get the actual width of the image data scanlines.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetImageHeightDpi(System.Boolean)">
      <summary>Gets the height of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> into account. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="useDpi">true to take into account the resolution (DPI) of the image; false to ignore the DPI.</param>
      <returns>The height of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> into account.</returns>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImage.Height" /> to get the actual height of the image data scanlines.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetImageSizeDpi(System.Boolean)">
      <summary>Gets the size in pixels of this <see cref="T:Leadtools.RasterImage" /> object, taking <see cref="P:Leadtools.RasterImage.YResolution" /> into account. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="useDpi">true to take into account the resolution (DPI) of the image; false to ignore the DPI.</param>
      <returns>The size in pixels of this <see cref="T:Leadtools.RasterImage" /> object, taking <see cref="P:Leadtools.RasterImage.YResolution" /> into account.</returns>
      <remarks>
            The size in pixels is <see cref="P:Leadtools.RasterImage.Width" /> by <see cref="P:Leadtools.RasterImage.Height" /> pixels.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetPalette">
      <summary>Gets a copy of the palette of this <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An array of <see cref="T:Leadtools.RasterColor" /> containing the palette for this <see cref="T:Leadtools.RasterImage" /> object.  If this
            <see cref="T:Leadtools.RasterImage" /> object does not contain a palette, null (Nothing in Visual Basic) is returned.</value>
      <remarks>
        <para>The palette is used for 1-8 bit color or grayscale image rendering. Image is grayscale when red, green and blue (R=G=B) components for each palette entry has the same value.</para>
        <para>The image data of a <see cref="T:Leadtools.RasterImage" /> object with <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> values of 1, 2, 3, 4, 5, 6,
            7 or 8 consists of an index into the image palette. You can get a copy of the palette used by using the
            <see cref="M:Leadtools.RasterImage.GetPalette" /> method.</para>
        <para>You can change the palette used by the <see cref="T:Leadtools.RasterImage" /> object with the <see cref="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)" /> method.</para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.RasterPalette" /> and
            <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction: Palette Handling</see>.</para>
        <para>For information on 10 to 16-bit grayscale image, refer to the <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)">
      <summary>Sets the palette of this <see cref="T:Leadtools.RasterImage" /> object that will be used by 1-8 bit color or grayscale image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="palette">An array of <see cref="T:Leadtools.RasterColor" /> containing the new palette to use.</param>
      <param name="startIndex">Index of the first palette entry to replace.</param>
      <param name="count">Number of palette entries to replace.</param>
      <remarks>
        <para>The image data of a <see cref="T:Leadtools.RasterImage" /> object with <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> values of 1, 2, 3, 4, 5, 6,
            7 or 8 consists of an index into the image palette. You can get a copy of the palette used by using the
            <see cref="M:Leadtools.RasterImage.GetPalette" /> method.</para>
        <para>You can change the palette used by the <see cref="T:Leadtools.RasterImage" /> object with the <see cref="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)" /> method.</para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.RasterPalette" /> and
            <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction: Palette Handling</see>.</para>
        <para>For information on 10 to 16-bit grayscale image, refer to the <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub PaletteExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RedPalette.bmp")

         ' Load the image as 8 bits/pixel
         Dim image As RasterImage = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1)

         ' Get the palette of this image and change it to shades of red
         Dim palette As RasterColor() = image.GetPalette()
         Dim i As Integer = 0
         Do While i &lt; palette.Length
            palette(i) = New RasterColor(i, 0, 0)
            i += 1
         Loop

         ' Set the palette back in the image then save the file
         image.SetPalette(palette, 0, palette.Length)
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, image.BitsPerPixel)

         image.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PaletteExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_RedPalette.bmp");

         // Load the image as 8 bits/pixel
         RasterImage image = codecs.Load(srcFileName, 8, CodecsLoadByteOrder.Rgb, 1, 1);

         // Get the palette of this image and change it to shades of red
         RasterColor[] palette = image.GetPalette();
         for(int i = 0; i &lt; palette.Length; i++)
            palette[i] = new RasterColor(i, 0, 0);

         // Set the palette back in the image then save the file
         image.SetPalette(palette, 0, palette.Length);
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, image.BitsPerPixel);

         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void PaletteExample(RasterImage image, Stream destStream)
      {
         // image should be loaded as 8 bits/pixel
         // Get the palette of this image and change it to shades of red
         RasterColor[] palette = image.GetPalette();
         for (int i = 0; i &lt; palette.Length; i++)
            palette[i] = new RasterColor(i, 0, 0);

         // Set the palette back in the image then save the file
         image.SetPalette(palette, 0, palette.Length);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub PaletteExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' image should be loaded as 8 bits/pixel
         ' Get the palette of this image and change it to shades of red
         Dim palette As RasterColor() = image.GetPalette()
         Dim i As Integer = 0
         Do While i &lt; palette.Length
            palette(i) = New RasterColor(i, 0, 0)
            i += 1
         Loop

         ' Set the palette back in the image then save the file
         image.SetPalette(palette, 0, palette.Length)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetLookupTable">
      <summary>Gets the 8-bit lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>LUT|Lookup Table</keywords>
      <returns>An array of <see cref="T:Leadtools.RasterColor" /> structures which represent the lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />.</returns>
      <remarks>
        <para>The lookup table (LUT) is used when the value of <see cref="P:Leadtools.RasterImage.UseLookupTable" /> is set to true.</para>
        <para>The 8-bit and 16-bit lookup tables are synchronized, so when you change one, the other is changed as well
            The 16-bit lookup table (<see cref="M:Leadtools.RasterImage.GetLookupTable16" />)
            has more precision so it is recommended you use the 16-bit LUT instead of the 8-bit LUT.
            </para>
        <para>LUT is also used for displaying extended Palette color image such as bit stored is 16-bit and LUT contains color value. This is typical of Ultra Sound image.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])" />.</example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])">
      <summary>Sets the 8-bit lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>LUT|Lookup Table</keywords>
      <param name="value">An array of <see cref="T:Leadtools.RasterColor" /> structures which represent the lookup table (LUT) of this
            <see cref="T:Leadtools.RasterImage" />.</param>
      <remarks>
        <para>The lookup table (LUT) is used when the value of <see cref="P:Leadtools.RasterImage.UseLookupTable" /> is set to true.</para>
        <para>The 8-bit and 16-bit lookup tables are synchronized, so when you change one, the other is changed as well
            The 16-bit lookup table (<see cref="M:Leadtools.RasterImage.SetLookupTable16(Leadtools.RasterColor16[])" />)
            has more precision so it is recommended you use the 16-bit LUT instead of the 8-bit LUT.</para>
        <para>LUT is only used for 10-16 bit extended grayscale image or 10-16 bit palette color image. To update the palette in 1-8 bit image use <see cref="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)" />. For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
        <para>LUT is also used for displaying extended Palette color image such as bit stored is 16-bit and LUT contains color value. This is typical of Ultra Sound image.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub SetLookupTable()
         DicomEngine.Startup()

         ' Get the path of the LEADTOOLS images directory
         Dim strImagesDirectory As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) &amp; "//LEADTOOLS Images//"

         ' Create a RasterCodecs class for saving out images
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' Load a dataset
         Dim ds As DicomDataSet = New DicomDataSet()
         ds.Load(strImagesDirectory &amp; "IMAGE3.dcm", DicomDataSetLoadFlags.None)

         ' Get the image but do NOT auto-apply any of the LUTs
         Dim element As DicomElement = ds.FindFirstElement(Nothing, DicomTag.PixelData, True)
         Dim image As RasterImage = ds.GetImage(element, 0, 16, RasterByteOrder.Gray, DicomGetImageFlags.None)
         image.UseLookupTable = True

         ' Save out the image without any LUTs applied.  It should be black
         codecs.Save(image, strImagesDirectory &amp; "BeforeSetLookupTable.bmp", RasterImageFormat.Bmp, 8)

         ' Create a LUT
         Dim lut As RasterColor() = New RasterColor(CInt(Math.Pow(2, 16)) - 1) {}

         ' Get the Minimum and Maximum values so we can calculate appropriate LUT values.
         Dim cmdMinMax As MinMaxValuesCommand = New MinMaxValuesCommand()
         cmdMinMax.Run(image)
         Dim maxVal As Integer = cmdMinMax.MaximumValue
         Dim minVal As Integer = cmdMinMax.MinimumValue

         Dim i As Integer = 0
         Do While i &lt; lut.Length
            lut(i).R = Convert.ToByte(Math.Min(255, ((i - minVal) * 255 / (maxVal - minVal))))
            lut(i).G = lut(i).R
            lut(i).B = lut(i).R
            i += 1
         Loop

         ' Set the new lookup table
         image.SetLookupTable(lut)

         ' Save out the image with the LUT applied.  It should look normal
         codecs.Save(image, strImagesDirectory &amp; "AfterSetLookupTable.bmp", RasterImageFormat.Bmp, 8)

         DicomEngine.Shutdown()
      End Sub</code>
        <code lang="CS">      public void SetLookupTable()
      {
         DicomEngine.Startup();

         // Create a RasterCodecs class for saving out images
         RasterCodecs codecs = new RasterCodecs();

         // Load a dataset
         DicomDataSet ds = new DicomDataSet();
         ds.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE3.dcm"), DicomDataSetLoadFlags.None);

         // Get the image but do NOT auto-apply any of the LUTs
         DicomElement element = ds.FindFirstElement(null, DicomTag.PixelData, true);
         RasterImage image = ds.GetImage(element, 0, 16, RasterByteOrder.Gray, DicomGetImageFlags.None);
         image.UseLookupTable = true;

         // Save out the image without any LUTs applied.  It should be black
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "BeforeSetLookupTable.bmp"), RasterImageFormat.Bmp, 8);

         // Create a LUT
         RasterColor[] lut = new RasterColor[(int)Math.Pow(2, 16)];

         // Get the Minimum and Maximum values so we can calculate appropriate LUT values.
         MinMaxValuesCommand cmdMinMax = new MinMaxValuesCommand();
         cmdMinMax.Run(image);
         int maxVal = cmdMinMax.MaximumValue;
         int minVal = cmdMinMax.MinimumValue;

         for(int i = 0; i &lt; lut.Length; i++)
         {
            lut[i].R = Convert.ToByte(Math.Min(255, ((i - minVal) * 255 / (maxVal - minVal))));
            lut[i].G = lut[i].R;
            lut[i].B = lut[i].R;
         }

         // Set the new lookup table
         image.SetLookupTable(lut);

         // Save out the image with the LUT applied.  It should look normal
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "AfterSetLookupTable.bmp"), RasterImageFormat.Bmp, 8);

         DicomEngine.Shutdown();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SetLookupTable(Stream dataSetStream, Stream destStream1, Stream destStream2)
      {
         // Create a RasterCodecs class for saving out images
         RasterCodecs codecs = new RasterCodecs();
         // Load a dataset
         DicomDataSet ds = new DicomDataSet();
         ds.Load(dataSetStream, DicomDataSetLoadFlags.None);

         // Get the image but do NOT auto-apply any of the LUTs
         DicomElement element = ds.FindFirstElement(null, DicomTag.PixelData, true);
         RasterImage image = ds.GetImage(element, 0, 16, RasterByteOrder.Gray, DicomGetImageFlags.None);
         image.UseLookupTable = true;

         // Save out the image without any LUTs applied.  It should be black
         codecs.Save(image, destStream1, RasterImageFormat.Bmp, 8);

         // Create a LUT
         RasterColor[] lut = new RasterColor[(int)Math.Pow(2, 16)];

         // Get the Minimum and Maximum values so we can calculate appropriate LUT values.
         MinMaxValuesCommand cmdMinMax = new MinMaxValuesCommand();
         cmdMinMax.Run(image);
         int maxVal = cmdMinMax.MaximumValue;
         int minVal = cmdMinMax.MinimumValue;

         for (int i = 0; i &lt; lut.Length; i++)
         {
            lut[i].R = Convert.ToByte(Math.Min(255, ((i - minVal) * 255 / (maxVal - minVal))));
            lut[i].G = lut[i].R;
            lut[i].B = lut[i].R;
         }

         // Set the new lookup table
         image.SetLookupTable(lut);

         // Save out the image with the LUT applied.  It should look normal
         codecs.Save(image, destStream2, RasterImageFormat.Bmp, 8);

         DicomEngine.Shutdown();
      }</code>
        <code lang="SilverlightVB">      Public Sub SetLookupTable(ByVal dataSetStream As Stream, ByVal destStream1 As Stream, ByVal destStream2 As Stream)
         ' Create a RasterCodecs class for saving out images
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load a dataset
         Dim ds As DicomDataSet = New DicomDataSet()
         ds.Load(dataSetStream, DicomDataSetLoadFlags.None)

         ' Get the image but do NOT auto-apply any of the LUTs
         Dim element As DicomElement = ds.FindFirstElement(Nothing, DicomTag.PixelData, True)
         Dim image As RasterImage = ds.GetImage(element, 0, 16, RasterByteOrder.Gray, DicomGetImageFlags.None)
         image.UseLookupTable = True

         ' Save out the image without any LUTs applied.  It should be black
         codecs.Save(image, destStream1, RasterImageFormat.Bmp, 8)

         ' Create a LUT
         Dim lut As RasterColor() = New RasterColor(CInt(Math.Pow(2, 16)) - 1){}

         ' Get the Minimum and Maximum values so we can calculate appropriate LUT values.
         Dim cmdMinMax As MinMaxValuesCommand = New MinMaxValuesCommand()
         cmdMinMax.Run(image)
         Dim maxVal As Integer = cmdMinMax.MaximumValue
         Dim minVal As Integer = cmdMinMax.MinimumValue

         Dim i As Integer = 0
         Do While i &lt; lut.Length
            lut(i).R = Convert.ToByte(Math.Min(255, ((i - minVal) * 255 / (maxVal - minVal))))
            lut(i).G = lut(i).R
            lut(i).B = lut(i).R
            i += 1
         Loop

         ' Set the new lookup table
         image.SetLookupTable(lut)

         ' Save out the image with the LUT applied.  It should look normal
         codecs.Save(image, destStream2, RasterImageFormat.Bmp, 8)

         DicomEngine.Shutdown()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.GetPaintLookupTable">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.SetPaintLookupTable(System.Byte[])">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">An array of bytes representing the paint lookup table to use.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetLookupTable16">
      <summary>Gets the 16-bit lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <keywords>LUT|Lookup Table</keywords>
      <returns>An array of <see cref="T:Leadtools.RasterColor16" /> structures which represent the lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />.</returns>
      <remarks>
        <para>The lookup table (LUT) is used when the value of <see cref="P:Leadtools.RasterImage.UseLookupTable" /> is set to true.</para>
        <para>The 8-bit (<see cref="M:Leadtools.RasterImage.GetLookupTable" />) and 16-bit lookup tables are synchronized,
            so when you change one, the other is changed as well. The 16-bit lookup table  
            has more precision so it is recommended you use the 16-bit LUT instead of the 8-bit LUT.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.Drawing.RasterPaintCallbacks">RasterPaintCallbacks</see>.
            </example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.SetLookupTable16(Leadtools.RasterColor16[])">
      <summary>Sets the 16-bit lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <keywords>LUT|Lookup Table|LUT16</keywords>
      <param name="value">An array of <see cref="T:Leadtools.RasterColor16" /> structures which represent the lookup table (LUT) of this
            <see cref="T:Leadtools.RasterImage" />.</param>
      <remarks>
        <para>The lookup table (LUT) is used when the value of <see cref="P:Leadtools.RasterImage.UseLookupTable" /> is set to true.</para>
        <para>The 8-bit (<see cref="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])" />) and 16-bit lookup tables are synchronized,
            so when you change one, the other is changed as well. The 16-bit lookup table 
            has more precision so it is recommended you use the 16-bit LUT instead of the 8-bit LUT.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])" />.</example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.GetPaintLookupTable16">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.SetPaintLookupTable16(System.UInt16[])">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <noremarks />
      <noexample />
      <exclude />
    </member>
    <member name="M:Leadtools.RasterImage.MakeRegionEmpty">
      <summary>Removes the region from the image and frees the memory used for the region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.HasRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.CalculateRegionMaximumClipSegments">
      <summary>Gets the number of elements required to hold the clip segments for any row in the region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The maximum number of segments in a row within the region.</returns>
      <remarks>
        <para>Use this method in conjunction with <see cref="M:Leadtools.RasterImage.GetRegionClipSegments(System.Int32,System.Int32[],System.Int32)" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRegionClipSegments(System.Int32,System.Int32[],System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRegionClipSegments(System.Int32,System.Int32[],System.Int32)">
      <summary>Gets the segments contained in the region for a particular row. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row for which to get the segments. The first row is 0, and the last row is 1 less
            than the image height.</param>
      <param name="segmentsBuffer">Buffer to be updated with the segments from <paramref name="row" /> contained in the region.</param>
      <param name="segmentsBufferOffset">Zero based index into <paramref name="segmentsBuffer" />.</param>
      <returns>The number of segments from <paramref name="row" /> that are contained in the region.</returns>
      <remarks>
        <para>To use this method, first call <see cref="M:Leadtools.RasterImage.GetRegionBounds(Leadtools.RasterRegionXForm)" /> with <paramref name="xform" /> set to null
            (Nothing in Visual Basic), to get the image boundaries. The bounding rectangle will indicate which rows are
            contained in the region. Go through all the rows contained in the region to get the segments contained in the region.</para>
        <para>The segments are returned as an array of pairs of horizontal offsets. The first point in the pair is the beginning
            of the segment (it is contained in the region). The last point in the pair is the end of the segment. To follow the
            Windows rules, the end of the segment is the first point NOT CONTAINED in the region.</para>
        <para>In most regions, there will be one segment per row. However, some regions can have 0, 1, 2 or more segments.</para>
        <para>For example, assume that for a particular row there are two segments. <paramref name="segmentBuffer" /> will be
            filled with 4 values. Let's call them x0, x1, x2, x3. In this case:
            <list><item><description>portion from 0 to x0 - 1 is OUTSIDE the region</description></item><item><description>portion from x0 to x1 - 1 is INSIDE the region</description></item><item><description>portion from x1 to x2 - 1 is OUTSIDE the region</description></item><item><description>portion from x2 to x3 - 1 is INSIDE the region</description></item><item><description>portion from x3 to <see cref="P:Leadtools.RasterImage.Width" /> - 1 is OUTSIDE the region</description></item></list></para>
      </remarks>
      <example>
        <para>This example sets the value of pixels inside a region to half intensity.</para>
        <code lang="VB">      Public Sub GetRegionClipSegmentsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GetRegionClipSegments.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Set the pixels inside the region to black

         ' Get the maximum number of elements in a row,
         ' so we know how big the array of segments should be
         Dim maxClipSegments As Integer = image.CalculateRegionMaximumClipSegments()

         ' Get the region bounds, so we know which is the first row
         Dim rgnBounds As LeadRect = image.GetRegionBounds(Nothing)

         ' Allocate an array large enough to store the maximum number of segments.
         Dim segmentBuffer As Integer() = New Integer(maxClipSegments - 1) {}

         ' Loop through the region rows
         Dim y As Integer = rgnBounds.Top
         Do While y &lt; rgnBounds.Bottom
            ' Get the segments for the row
            image.GetRegionClipSegments(y, segmentBuffer, 0)

            ' Do something with the pixels
            Dim i As Integer = 0
            Do While i &lt; maxClipSegments / 2
               Dim j As Integer = segmentBuffer(i)
               Do While j &lt; segmentBuffer(i + 1)
                  Dim clr As RasterColor = image.GetPixelColor(y, j)
                  clr = New RasterColor(clr.R \ 2, clr.G \ 2, clr.B \ 2)
                  image.SetPixelColor(y, j, clr)
                  j += 1
               Loop
               i += 1
            Loop
            y += 1
         Loop

         ' Save the image back to file
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRegionClipSegmentsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GetRegionClipSegments.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a region to the image
         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // Set the pixels inside the region to black

         // Get the maximum number of elements in a row,
         // so we know how big the array of segments should be
         int maxClipSegments = image.CalculateRegionMaximumClipSegments();

         // Get the region bounds, so we know which is the first row
         LeadRect rgnBounds = image.GetRegionBounds(null);

         // Allocate an array large enough to store the maximum number of segments.
         int[] segmentBuffer = new int[maxClipSegments];

         // Loop through the region rows
         for(int y = rgnBounds.Top; y &lt; rgnBounds.Bottom; y++)
         {
            // Get the segments for the row
            image.GetRegionClipSegments(y, segmentBuffer, 0);

            // Do something with the pixels
            for(int i = 0; i &lt; maxClipSegments / 2; i++)
            {
               for(int j = segmentBuffer[i]; j &lt; segmentBuffer[i + 1]; j++)
               {
                  RasterColor clr = image.GetPixelColor(y, j);
                  clr = new RasterColor(clr.R / 2, clr.G / 2, clr.B / 2);
                  image.SetPixelColor(y, j, clr);
               }
            }
         }

         // Save the image back to file
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetRegionClipSegmentsExample(RasterImage image, Stream destStream)
      {
         // Add a region to the image
         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);
         // Set the pixels inside the region to black

         // Get the maximum number of elements in a row,
         // so we know how big the array of segments should be
         int maxClipSegments = image.CalculateRegionMaximumClipSegments();

         // Get the region bounds, so we know which is the first row
         LeadRect rgnBounds = image.GetRegionBounds(null);

         // Allocate an array large enough to store the maximum number of segments.
         int[] segmentBuffer = new int[maxClipSegments];

         // Loop through the region rows
         for (int y = rgnBounds.Top; y &lt; rgnBounds.Bottom; y++)
         {
            // Get the segments for the row
            image.GetRegionClipSegments(y, segmentBuffer, 0);

            // Do something with the pixels
            for (int i = 0; i &lt; maxClipSegments / 2; i++)
            {
               for (int j = segmentBuffer[i]; j &lt; segmentBuffer[i + 1]; j++)
               {
                  RasterColor clr = image.GetPixelColor(y, j);
                  clr = new RasterColor(clr.R / 2, clr.G / 2, clr.B / 2);
                  image.SetPixelColor(y, j, clr);
               }
            }
         }

         // Save the image back to file
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetRegionClipSegmentsExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)
         ' Set the pixels inside the region to black

         ' Get the maximum number of elements in a row,
         ' so we know how big the array of segments should be
         Dim maxClipSegments As Integer = image.CalculateRegionMaximumClipSegments()

         ' Get the region bounds, so we know which is the first row
         Dim rgnBounds As LeadRect = image.GetRegionBounds(Nothing)

         ' Allocate an array large enough to store the maximum number of segments.
         Dim segmentBuffer As Integer() = New Integer(maxClipSegments - 1){}

         ' Loop through the region rows
         Dim y As Integer = rgnBounds.Top
         Do While y &lt; rgnBounds.Bottom
            ' Get the segments for the row
            image.GetRegionClipSegments(y, segmentBuffer, 0)

            ' Do something with the pixels
            Dim i As Integer = 0
            Do While i &lt; maxClipSegments / 2
               Dim j As Integer = segmentBuffer(i)
               Do While j &lt; segmentBuffer(i + 1)
                  Dim clr As RasterColor = image.GetPixelColor(y, j)
                  clr = New RasterColor(clr.R / 2, clr.G / 2, clr.B / 2)
                  image.SetPixelColor(y, j, clr)
                  j += 1
               Loop
               i += 1
            Loop
            y += 1
         Loop

         ' Save the image back to file
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CalculateRegionArea">
      <summary>Gets the total number of pixels in the image region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The pixel count.</returns>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CalculateRegionAreaExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Get the number of pixels in the region
         Dim area As Integer = CInt(image.CalculateRegionArea())
         Console.WriteLine("Number of pixels in region after a region is added: {0}", area)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CalculateRegionAreaExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a region to the image
         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // Get the number of pixels in the region
         long area = image.CalculateRegionArea();
         Console.WriteLine("Number of pixels in region after a region is added: {0}", area);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CalculateRegionAreaExample()
      {
         // create a new image to work with
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // Add a region to the image
         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);

         // Get the number of pixels in the region
         long area = image.CalculateRegionArea();
         Debug.WriteLine("Number of pixels in region after a region is added: {0}", area);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CalculateRegionAreaExample()
         ' create a new image to work with
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Get the number of pixels in the region
         Dim area As Long = image.CalculateRegionArea()
         Debug.WriteLine("Number of pixels in region after a region is added: {0}", area)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRegionBounds(Leadtools.RasterRegionXForm)">
      <summary>Gets the bounding rectangle of the image region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <returns>The bounding rectangle.</returns>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub GetRegionBoundsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GetRegionBounds.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add an ellipse inside a rectangle region to the image

         Dim rc As LeadRect = New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         rc = image.GetRegionBounds(Nothing)

         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Xor)

         ' Invert the region area and save the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRegionBoundsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_GetRegionBounds.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add an ellipse inside a rectangle region to the image

         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         rc = image.GetRegionBounds(null);

         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Xor);

         // Invert the region area and save the image
         InvertCommand command = new InvertCommand();
         command.Run(image);
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetRegionBoundsExample(Stream destStream)
      {
         // create a new image to work with
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // Add an rectanle inside a rectangle region to the image

         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);

         rc = image.GetRegionBounds(null);

         rc = new LeadRect(image.Width / 4, image.Height / 4, image.Width / 4, image.Height / 4);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Xor);

         // Invert the region area and save the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image back to file
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetRegionBoundsExample(ByVal destStream As Stream)
         ' create a new image to work with
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Add an rectanle inside a rectangle region to the image

         Dim rc As LeadRect = New LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         rc = image.GetRegionBounds(Nothing)

         rc = New LeadRect(image.Width / 4, image.Height / 4, image.Width / 4, image.Height / 4)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Xor)

         ' Invert the region area and save the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image back to file
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRegionBoundsClipped(Leadtools.RasterRegionXForm)">
      <summary>Gets the bounding rectangle of the image region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <returns>The bounding rectangle.</returns>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.RegionContains(System.Int32,System.Int32)">
      <summary>Determines whether the specified pixel is in the image region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The row number of the pixel.</param>
      <param name="col">The column number of the pixel.</param>
      <returns>true if the specified pixel is in the region, otherwise; false.</returns>
      <remarks>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for
            the view perspective of the image.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RegionContainsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RegionContains.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add an ellipse inside a rectangle region to the image

         Dim rc As LeadRect = New LeadRect(image.Width \ 3, image.Height \ 3, image.Width \ 3, image.Height \ 3)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Loop through the image and turn all pixels in the region to double intensity
         Dim y As Integer = 0
         Do While y &lt; image.Height
            Dim x As Integer = 0
            Do While x &lt; image.Width
               If image.RegionContains(y, x) Then
                  Dim clr As RasterColor = image.GetPixelColor(y, x)
                  clr = New RasterColor(clr.R * 2, clr.G * 2, clr.B * 2)
                  image.SetPixelColor(y, x, clr)
               End If
               x += 1
            Loop
            y += 1
         Loop

         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RegionContainsExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_RegionContains.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add an ellipse inside a rectangle region to the image

         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // Loop through the image and turn all pixels in the region to double intensity
         for(int y = 0; y &lt; image.Height; y++)
         {
            for(int x = 0; x &lt; image.Width; x++)
            {
               if(image.RegionContains(y, x))
               {
                  RasterColor clr = image.GetPixelColor(y, x);
                  clr = new RasterColor(clr.R * 2, clr.G * 2, clr.B * 2);
                  image.SetPixelColor(y, x, clr);
               }
            }
         }

         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RegionContainsExample(Stream destStream)
      {
         // create a new image to work with
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // Add a rectangle region to the image

         LeadRect rc = new LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);

         // Loop through the image and turn all pixels in the region to double intensity
         for (int y = 0; y &lt; image.Height; y++)
         {
            for (int x = 0; x &lt; image.Width; x++)
            {
               if (image.RegionContains(y, x))
               {
                  RasterColor clr = image.GetPixelColor(y, x);
                  clr = new RasterColor(clr.R * 2, clr.G * 2, clr.B * 2);
                  image.SetPixelColor(y, x, clr);
               }
            }
         }

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RegionContainsExample(ByVal destStream As Stream)
         ' create a new image to work with
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Add a rectangle region to the image

         Dim rc As LeadRect = New LeadRect(image.Width / 3, image.Height / 3, image.Width / 3, image.Height / 3)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Loop through the image and turn all pixels in the region to double intensity
         Dim y As Integer = 0
         Do While y &lt; image.Height
            Dim x As Integer = 0
            Do While x &lt; image.Width
               If image.RegionContains(y, x) Then
                  Dim clr As RasterColor = image.GetPixelColor(y, x)
                  clr = New RasterColor(clr.R * 2, clr.G * 2, clr.B * 2)
                  image.SetPixelColor(y, x, clr)
               End If
               x += 1
            Loop
            y += 1
         Loop

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.OffsetRegion(System.Int32,System.Int32)">
      <summary>Moves the image region by the specified number of rows and columns. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rowOffset">The number of rows to move the region.</param>
      <param name="colOffset">The number of columns to move the region.</param>
      <remarks>
        <para>The move does not affect the pixels in the region.</para>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for
            the view perspective of the image.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.FlipRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.FlipRegion">
      <summary>Flips the image region (top to bottom). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>
        <para />
        <code lang="VB">      Public Sub FlipRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_OriginalRegion.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_OffsetRegion.bmp")
         Dim destFileName3 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_FlipRegion.bmp")
         Dim destFileName4 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_ReverseRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add an ellipse inside a rectangle region to the image

         Dim rc As LeadRect = New LeadRect(0, 0, image.Width \ 3, image.Height \ 6)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' Clone this image and run an image proccesing command on it
         Dim command As InvertCommand = New InvertCommand()

         Dim imageWithRegion As RasterImage = image.Clone()
         command.Run(imageWithRegion)
         codecs.Save(imageWithRegion, destFileName1, RasterImageFormat.Bmp, 24)
         imageWithRegion.Dispose()

         ' Offset the region
         image.OffsetRegion(100, 50)
         imageWithRegion = image.Clone()
         command.Run(imageWithRegion)
         codecs.Save(imageWithRegion, destFileName2, RasterImageFormat.Bmp, 24)
         imageWithRegion.Dispose()

         ' Flip the region
         image.FlipRegion()
         imageWithRegion = image.Clone()
         command.Run(imageWithRegion)
         codecs.Save(imageWithRegion, destFileName3, RasterImageFormat.Bmp, 24)
         imageWithRegion.Dispose()

         ' Reverse the region
         image.ReverseRegion()
         imageWithRegion = image.Clone()
         command.Run(imageWithRegion)
         codecs.Save(imageWithRegion, destFileName4, RasterImageFormat.Bmp, 24)
         imageWithRegion.Dispose()

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void FlipRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_OriginalRegion.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_OffsetRegion.bmp");
         string destFileName3 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_FlipRegion.bmp");
         string destFileName4 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_ReverseRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add an ellipse inside a rectangle region to the image

         LeadRect rc = new LeadRect(0, 0, image.Width / 3, image.Height / 6);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // Clone this image and run an image proccesing command on it
         InvertCommand command = new InvertCommand();

         RasterImage imageWithRegion = image.Clone();
         command.Run(imageWithRegion);
         codecs.Save(imageWithRegion, destFileName1, RasterImageFormat.Bmp, 24);
         imageWithRegion.Dispose();

         // Offset the region
         image.OffsetRegion(100, 50);
         imageWithRegion = image.Clone();
         command.Run(imageWithRegion);
         codecs.Save(imageWithRegion, destFileName2, RasterImageFormat.Bmp, 24);
         imageWithRegion.Dispose();

         // Flip the region
         image.FlipRegion();
         imageWithRegion = image.Clone();
         command.Run(imageWithRegion);
         codecs.Save(imageWithRegion, destFileName3, RasterImageFormat.Bmp, 24);
         imageWithRegion.Dispose();

         // Reverse the region
         image.ReverseRegion();
         imageWithRegion = image.Clone();
         command.Run(imageWithRegion);
         codecs.Save(imageWithRegion, destFileName4, RasterImageFormat.Bmp, 24);
         imageWithRegion.Dispose();

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void FlipRegionExample(RasterImage image, Stream destStream1, Stream destStream2, Stream destStream3, Stream destStream4)
      {
         // Add a rectangle region to the image
         LeadRect rc = new LeadRect(0, 0, image.Width / 3, image.Height / 6);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);

         using (IsolatedStorageFile isf = IsolatedStorageFile.GetUserStoreForApplication())
         {
            // Clone this image and run an image proccesing command on it
            InvertCommand command = new InvertCommand();

            RasterCodecs codecs = new RasterCodecs();
            RasterImage imageWithRegion = image.Clone();
            command.Run(imageWithRegion);
            codecs.Save(image, destStream1, RasterImageFormat.Bmp, 0);
            imageWithRegion.Dispose();

            // Offset the region
            image.OffsetRegion(100, 50);
            imageWithRegion = image.Clone();
            command.Run(imageWithRegion);
            codecs.Save(image, destStream2, RasterImageFormat.Bmp, 0);
            imageWithRegion.Dispose();

            // Flip the region
            image.FlipRegion();
            imageWithRegion = image.Clone();
            command.Run(imageWithRegion);
            codecs.Save(image, destStream3, RasterImageFormat.Bmp, 0);
            imageWithRegion.Dispose();

            // Reverse the region
            image.ReverseRegion();
            imageWithRegion = image.Clone();
            command.Run(imageWithRegion);
            codecs.Save(image, destStream4, RasterImageFormat.Bmp, 0);
            imageWithRegion.Dispose();

            image.Dispose();
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub FlipRegionExample(ByVal image As RasterImage, ByVal destStream1 As Stream, ByVal destStream2 As Stream, ByVal destStream3 As Stream, ByVal destStream4 As Stream)
         ' Add a rectangle region to the image
         Dim rc As LeadRect = New LeadRect(0, 0, image.Width / 3, image.Height / 6)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         Using isf As IsolatedStorageFile = IsolatedStorageFile.GetUserStoreForApplication()
            ' Clone this image and run an image proccesing command on it
            Dim command As InvertCommand = New InvertCommand()

            Dim codecs As RasterCodecs = New RasterCodecs()
            Dim imageWithRegion As RasterImage = image.Clone()
            command.Run(imageWithRegion)
            codecs.Save(image, destStream1, RasterImageFormat.Bmp, 0)
            imageWithRegion.Dispose()

            ' Offset the region
            image.OffsetRegion(100, 50)
            imageWithRegion = image.Clone()
            command.Run(imageWithRegion)
            codecs.Save(image, destStream2, RasterImageFormat.Bmp, 0)
            imageWithRegion.Dispose()

            ' Flip the region
            image.FlipRegion()
            imageWithRegion = image.Clone()
            command.Run(imageWithRegion)
            codecs.Save(image, destStream3, RasterImageFormat.Bmp, 0)
            imageWithRegion.Dispose()

            ' Reverse the region
            image.ReverseRegion()
            imageWithRegion = image.Clone()
            command.Run(imageWithRegion)
            codecs.Save(image, destStream4, RasterImageFormat.Bmp, 0)
            imageWithRegion.Dispose()

            image.Dispose()
         End Using
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.ReverseRegion">
      <summary>Flips the image region (left to right). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.FlipRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRegion(Leadtools.RasterRegionXForm)">
      <summary>Gets the <see cref="T:Leadtools.RasterRegion" /> object that describes this <see cref="T:Leadtools.RasterImage" /> current region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you
            specify <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and
            the view perspective defaults to the image view perspective.</param>
      <returns>An <see cref="T:Leadtools.RasterRegion" /> object that describes this <see cref="T:Leadtools.RasterImage" /> current region.</returns>
      <remarks>
        <para>To set or updated the <see cref="T:Leadtools.RasterRegion" /> object that describes the current image region, use <see cref="M:Leadtools.RasterImage.SetRegion(Leadtools.RasterRegionXForm,Leadtools.RasterRegion,Leadtools.RasterRegionCombineMode)" />.</para>
        <para>If the image does not have a region, this method will return an empty <see cref="T:Leadtools.RasterRegion" /> object.</para>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of a region of interest in an image that can be used in any
            platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. The <see cref="T:Leadtools.RasterRegion" /> class contains extensive methods and properties 
            to manipulate the region data and save/load it to a byte array.</para>
        <para>To convert a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object to/from a device dependent region, you can use the following helper classes:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Drawing.RasterRegionConverter">Leadtools.Drawing.RasterRegionConverter</see> to convert to/from a System.Drawing (GDI+) <see cref="T:System.Drawing.Region">System.Drawing.Region</see> or Windows HRGN objects.</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Windows.Media.RasterRegionConverter">Leadtools.Windows.Media.RasterRegionConverter</see> to convert to/from a WPF and Silverlight <see cref="T:System.Windows.Media.Geometry">System.Windows.Media.Geometry</see> object.</description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, so you must call <see cref="M:System.IDisposable.Dispose" /> on any
            region objects you create after using it.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRegion(Leadtools.RasterRegionXForm,Leadtools.RasterRegion,Leadtools.RasterRegionCombineMode)">
      <summary>Sets or updates the <see cref="T:Leadtools.RasterRegion" /> object that describes this <see cref="T:Leadtools.RasterImage" /> current region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display coordinates and image coordinates. If you
            specify <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for this parameter, the scalar fields default to 1, the offsets default to 0, and
            the view perspective defaults to the image view perspective.</param>
      <param name="region">A <see cref="T:Leadtools.RasterRegion" /> object to set or update into this <see cref="T:Leadtools.RasterImage" />. If this parameter is an empty region or null
            (Nothing in Visual Basic), then the current region in the image will be deleted (this is the equivalant of calling <see cref="M:Leadtools.RasterImage.MakeRegionEmpty" />.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To get the <see cref="T:Leadtools.RasterRegion" /> object that describes the current image region, use <see cref="M:Leadtools.RasterImage.GetRegion(Leadtools.RasterRegionXForm)" />.</para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of a region of interest in an image that can be used in any
            platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight. The <see cref="T:Leadtools.RasterRegion" /> class contains extensive methods and properties 
            to manipulate the region data and save/load it to a byte array.</para>
        <para>To convert a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object to/from a device dependent region, you can use the following helper classes:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Drawing.RasterRegionConverter">Leadtools.Drawing.RasterRegionConverter</see> to convert to/from a System.Drawing (GDI+) <see cref="T:System.Drawing.Region">System.Drawing.Region</see> or Windows HRGN objects.</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Windows.Media.RasterRegionConverter">Leadtools.Windows.Media.RasterRegionConverter</see> to convert to/from a WPF and Silverlight <see cref="T:System.Windows.Media.Geometry">System.Windows.Media.Geometry</see> object.</description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, so you must call <see cref="M:System.IDisposable.Dispose" /> on any
            region objects you create after using it.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.AddRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a rectangular region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="rc">A <see cref="T:Leadtools.LeadRect" /> that specifies the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example loads an image, adds a rectangle region to it, and runs the 
            <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddRectangleToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRectangleToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a rectangle region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim rc As LeadRect = New LeadRect(image.ImageWidth \ 4, image.ImageHeight \ 4, image.ImageWidth \ 3, image.ImageHeight \ 3)
         image.AddRectangleToRegion(xform, rc, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddRectangleToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRectangleToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a rectangle region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadRect rc = new LeadRect(image.ImageWidth / 4, image.ImageHeight / 4, image.ImageWidth / 3, image.ImageHeight / 3);
         image.AddRectangleToRegion(xform, rc, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void AddRectangleToRegionExample(RasterImage image, Stream destStream)
      {
         // Add a rectangle region
         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadRect rc = new LeadRect(image.ImageWidth / 4, image.ImageHeight / 4, image.ImageWidth / 3, image.ImageHeight / 3);
         image.AddRectangleToRegion(xform, rc, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Png, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddRectangleToRegionExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Add a rectangle region
         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim rc As LeadRect = New LeadRect(image.ImageWidth / 4, image.ImageHeight / 4, image.ImageWidth / 3, image.ImageHeight / 3)
         image.AddRectangleToRegion(xform, rc, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Png, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddEllipseToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding an elliptical region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="rc">A <see cref="T:Leadtools.LeadRect" /> that represents the bounding rectangle that defines the ellipse.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds an elliptical region to it, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddEllipseToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddEllipseToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add an elliptical region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim rc As LeadRect = New LeadRect(image.ImageWidth \ 4, image.ImageHeight \ 4, image.ImageWidth \ 3, image.ImageHeight \ 3)
         image.AddEllipseToRegion(xform, rc, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddEllipseToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddEllipseToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add an elliptical region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadRect rc = new LeadRect(image.ImageWidth / 4, image.ImageHeight / 4, image.ImageWidth / 3, image.ImageHeight / 3);
         image.AddEllipseToRegion(xform, rc, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddRoundRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.LeadSize,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a rounded rectangular region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="rc">A <see cref="T:Leadtools.LeadRect" /> that specifies the bounding rectangle of the region.</param>
      <param name="ellipse">Specifies the width and height of the ellipse that describes the arc of the rounded corners.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a round rectangle region to it, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddRoundRectangleToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRoundRectangleToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a round rectangle region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim rc As LeadRect = New LeadRect(image.ImageWidth \ 4, image.ImageHeight \ 4, image.ImageWidth \ 3, image.ImageHeight \ 3)
         Dim sz As LeadSize = New LeadSize(rc.Width \ 4, rc.Height \ 4)
         image.AddRoundRectangleToRegion(xform, rc, sz, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddRoundRectangleToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddRoundRectangleToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a round rectangle region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadRect rc = new LeadRect(image.ImageWidth / 4, image.ImageHeight / 4, image.ImageWidth / 3, image.ImageHeight / 3);
         LeadSize sz = new LeadSize(rc.Width / 4, rc.Height / 4);
         image.AddRoundRectangleToRegion(xform, rc, sz, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddPolygonToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCollection{Leadtools.LeadPoint},Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates the image region by adding a polygonal region.
            </summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="points">A collection of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the collection must be in the order in
            which the vertices of the polygon are connected. To create the line that closes the polygon, the last point in the
            collection is connected to the first point of the collection.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadPoint.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a polygon region to it, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddPolygonToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddPolygonToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a polygon region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim x1 As Integer = image.ImageWidth \ 4
         Dim y1 As Integer = image.ImageHeight \ 4
         Dim x2 As Integer = image.ImageWidth \ 3
         Dim y2 As Integer = image.ImageHeight \ 3

         Dim pts As LeadPoint() = {New LeadPoint(x1, y1), New LeadPoint(x2, y1), New LeadPoint(x1, y2), New LeadPoint(x2, y2)}

         image.AddPolygonToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddPolygonToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddPolygonToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a polygon region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         int x1 = image.ImageWidth / 4;
         int y1 = image.ImageHeight / 4;
         int x2 = image.ImageWidth / 3;
         int y2 = image.ImageHeight / 3;

         LeadPoint[] pts =
         {
            new LeadPoint(x1, y1),
            new LeadPoint(x2, y1),
            new LeadPoint(x1, y2),
            new LeadPoint(x2, y2)
         };

         image.AddPolygonToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddPolygonToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a polygonal region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="pts">Array of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the array must be in the order in which
            the vertices of the polygon are connected. To create the line that closes the polygon,
            the last point in the array is connected to the first point of the array.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, add a polygon region to it, and run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddPolygonToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddPolygonToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a polygon region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim x1 As Integer = image.ImageWidth \ 4
         Dim y1 As Integer = image.ImageHeight \ 4
         Dim x2 As Integer = image.ImageWidth \ 3
         Dim y2 As Integer = image.ImageHeight \ 3

         Dim pts As LeadPoint() = {New LeadPoint(x1, y1), New LeadPoint(x2, y1), New LeadPoint(x1, y2), New LeadPoint(x2, y2)}

         image.AddPolygonToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddPolygonToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddPolygonToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a polygon region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         int x1 = image.ImageWidth / 4;
         int y1 = image.ImageHeight / 4;
         int x2 = image.ImageWidth / 3;
         int y2 = image.ImageHeight / 3;

         LeadPoint[] pts =
         {
            new LeadPoint(x1, y1),
            new LeadPoint(x2, y1),
            new LeadPoint(x1, y2),
            new LeadPoint(x2, y2)
         };

         image.AddPolygonToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCurve,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a curved region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="curve">A <see cref="T:Leadtools.RasterCurve" /> object that specifies the curve region. You specify the curve using
            device context coordinates, and LEADTOOLS translates the coordinates using the values specified in the <paramref name="xform" />.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterCurve" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCollection{Leadtools.LeadPoint},System.Single,Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates the image region by adding a curved region.
            </summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="points">Collection of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the array must be in the order in which
            the vertices of the polygon are connected. To create the line that closes the polygon,
            the last point in the array is connected to the first point of the array.</param>
      <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater
            than 1 produce unpredictable results.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],System.Single,Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.AddCurveToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],System.Single,Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a curved region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="pts">Array of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the array must be in the order in which
            the vertices of the polygon are connected. To create the line that closes the polygon,
            the last point in the array is connected to the first point of the array.</param>
      <param name="tension">A value that specifies the amount that the curve bends between control points. Values greater
            than 1 produce unpredictable results.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a curve region to it, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddCurveToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddCurveToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a curve region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim pts As LeadPoint() = {New LeadPoint(30, 30), New LeadPoint(30, 200), New LeadPoint(130, 130), New LeadPoint(75, 75), New LeadPoint(130, 30)}

         image.AddCurveToRegion(xform, pts, 0.5F, LeadFillMode.Winding, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddCurveToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName =Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddCurveToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a curve region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadPoint[] pts =
         {
            new LeadPoint(30, 30),
            new LeadPoint(30, 200),
            new LeadPoint(130, 130),
            new LeadPoint(75, 75),
            new LeadPoint(130, 30)
         };

         image.AddCurveToRegion(xform, pts, 0.5f, LeadFillMode.Winding, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddBeziersToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterCollection{Leadtools.LeadPoint},Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>
            Creates or updates the image region by adding a bezier region.
            </summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="points">A collection of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the collection must be in the order in
            which the vertices of the polygon are connected. To create the line that closes the polygon,
            the last point in the collection is connected to the first point of the collection.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.AddBeziersToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.AddBeziersToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadPoint[],Leadtools.LeadFillMode,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a bezier region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate
            between display coordinates and image coordinates. If you specify null (Nothing in Visual Basic) in this parameter,
            the scalar fields default to 1, the offsets default to 0, and the view perspective defaults
            to the image view perspective.</param>
      <param name="pts">An array of <see cref="T:Leadtools.LeadPoint" /> objects. The points in the collection must be in the order in
            which the vertices of the polygon are connected. To create the line that closes the polygon,
            the last point in the collection is connected to the first point of the collection.</param>
      <param name="fillMode">
        <para>Indicates how to handle complex crossing lines.</para>
        <para>
          <table>
            <tr>
              <th>Value</th>
              <th>Meaning</th>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Winding</see>
              </td>
              <td>All pixels that are inside the resulting exterior lines are in the region.</td>
            </tr>
            <tr>
              <td>
                <see cref="T:Leadtools.LeadFillMode">LeadFillMode.Alternate</see>
              </td>
              <td>The region includes the area between odd-numbered and even-numbered polygon sides on each scan line.</td>
            </tr>
          </table>
          <para>
            <img src="FillMode.gif" />
          </para>
        </para>
      </param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a bezier curve region to it, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddBeziersToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddBeziersToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add a bezier curve region

         Dim xform As RasterRegionXForm = New RasterRegionXForm()
         xform.ViewPerspective = RasterViewPerspective.TopLeft
         xform.XOffset = 0
         xform.YOffset = 0
         xform.XScalarDenominator = 1
         xform.XScalarNumerator = 1
         xform.YScalarDenominator = 1
         xform.YScalarNumerator = 1

         Dim pts() As LeadPoint = {New LeadPoint(30, 30), New LeadPoint(30, 200), New LeadPoint(130, 130), New LeadPoint(75, 75), New LeadPoint(130, 30), New LeadPoint(200, 75), New LeadPoint(130, 200)}

         image.AddBeziersToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddBeziersToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddBeziersToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add a bezier curve region

         RasterRegionXForm xform = new RasterRegionXForm();
         xform.ViewPerspective = RasterViewPerspective.TopLeft;
         xform.XOffset = 0;
         xform.YOffset = 0;
         xform.XScalarDenominator = 1;
         xform.XScalarNumerator = 1;
         xform.YScalarDenominator = 1;
         xform.YScalarNumerator = 1;

         LeadPoint[] pts =
         {
            new LeadPoint(30, 30),
            new LeadPoint(30, 200),
            new LeadPoint(130, 130),
            new LeadPoint(75, 75),
            new LeadPoint(130, 30),
            new LeadPoint(200, 75),
            new LeadPoint(130, 200),
         };

         image.AddBeziersToRegion(xform, pts, LeadFillMode.Winding, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddColorRgbRangeToRegion(Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a region that consists of all the pixels that fall in the given RGB color range. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="lowerColor">Specifies the minimum (inclusive) R, G and B values.
            A pixel must have R,G, and B all greater than or equal to <paramref name="lowerColor" /> and less than or equal to
            <paramref name="upperColor" /> to be included in the region.</param>
      <param name="upperColor">Specifies the maximum (inclusive) R, G and B values.
            A pixel must have R,G, and B all greater than or equal to <paramref name="lowerColor" /> and less than or equal to
            <paramref name="upperColor" /> to be included in the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <keywords>RGB</keywords>
      <remarks>
        <para>This method uses the RGB color model to set a region based on a color range.</para>
        <para>To be added to the region a color must fall in the range <paramref name="lowerColor" />..<paramref name="upperColor" />.
            To set a region for all pure red, specify <paramref name="lowerColor" /> and <paramref name="upperColor" /> as follows:</para>
        <para>
          <code>
            lowerColor RGB(1,0,0)
            upperColor RGB(255,0,0)
            </code>
        </para>
        <para>Note that this would fail to include many colors that look red to the eye (like RGB(255,4,4)).</para>
        <para>This method supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale
            and 48 and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a region corresponding to all colors that have an rgb that includes green but no red and no blue, run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddColorRgbRangeToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorRgbRangeToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add the region
         Dim lowerColor As RasterColor = New RasterColor(0, 1, 0)
         Dim upperColor As RasterColor = New RasterColor(0, 255, 0)

         image.AddColorRgbRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddColorRgbRangeToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorRgbRangeToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add the region
         RasterColor lowerColor = new RasterColor(0, 1, 0);
         RasterColor upperColor = new RasterColor(0, 255, 0);

         image.AddColorRgbRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void AddColorRgbRangeToRegionExample(RasterImage image, Stream destStream)
      {
         // Add the region
         RasterColor lowerColor = new RasterColor(0, 1, 0);
         RasterColor upperColor = new RasterColor(0, 255, 0);
         image.AddColorRgbRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Png, 24);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddColorRgbRangeToRegionExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Add the region
         Dim lowerColor As RasterColor = New RasterColor(0, 1, 0)
         Dim upperColor As RasterColor = New RasterColor(0, 255, 0)
         image.AddColorRgbRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Png, 24)

         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Gray Scale Images</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionBitsPerPixel">Introduction: Bits Per Pixel and Related Ideas</seealso>
      <seealso cref="T:Leadtools.Topics.UsingColorValuesInLEADTOOLS">Using Color Values in LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.AddColorHsvRangeToRegion(Leadtools.RasterHsvColor,Leadtools.RasterHsvColor,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a region that consists of all the pixels that fall in the given HSV color range. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="lowerColor">Specifies the minimum (inclusive) R, G and B values.
            A pixel must have H,S, and V all greater than or equal to <paramref name="lowerColor" /> and less than or equal to
            <paramref name="upperColor" /> to be included in the region.</param>
      <param name="upperColor">Specifies the maximum (inclusive) R, G and B values.
            A pixel must have H,S, and V all greater than or equal to <paramref name="lowerColor" /> and less than or equal to
            <paramref name="upperColor" /> to be included in the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <keywords>HSV|RGB</keywords>
      <remarks>
        <para>This method uses the HSV color model to set a region based on a color range.</para>
        <para>It is useful for identifying all shades of a certain color.  For example, this method could be used to set a region of
            all green colors including:</para>
        <para>
          <table>
            <tr>
              <td>RGB(0,1,0)</td>
              <td>
              </td>
              <td>
              </td>
            </tr>
            <tr>
              <td>RGB(0,2,0)</td>
              <td>RGB(1,2,1)</td>
              <td>
              </td>
            </tr>
            <tr>
              <td>RGB(0,1,0)</td>
              <td>
              </td>
              <td>
              </td>
            </tr>
            <tr>
              <td>RGB(0,3,0)</td>
              <td>RGB(1,3,1)</td>
              <td>RGB(2,3,2)</td>
            </tr>
            <tr>
              <td>RGB(0,255,0)</td>
              <td>RGB(1,255,1)</td>
              <td>RGB(2,255,2)</td>
            </tr>
          </table>
        </para>
        <para>The diagram below shows how S and V affect the color green (H = 85):</para>
        <para>
          <img src="HueTable.gif" />
        </para>
        <para>To be added to the region a color must fall in the range <paramref name="lowerColor" />...<paramref name="upperColor" />.
            If you want to set a region for all red (and colors near red), you could specify <paramref name="lowerColor" /> 
            and <paramref name="upperColor" /> as follows:</para>
        <para>
          <code>
            lowerColor (250,1,1)
            upperColor (5,255,255)
            </code>
        </para>
        <para>The hue for the lowerColor is 250 and the hue for the upperColor is 5.  For the hue to fall in this range it must be 250, 251, 252, 253, 254, 255, 
            1, 2, 3, 4, or 5. Note that the values for hue wrap from 255 to 1.</para>
        <para>This method supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale
            and 48 and 64-bit color images is available only in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>This method does not support signed data images.</para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, adds a region corresponding to all pure green (Hue = 85) and colors near green (+/- 10), run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</see> to show the affected area before saving the image back to disk.</para>
        <code lang="VB">      Public Sub AddColorHsvRangeToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorHsvRangeToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Add the region
         Dim lowerColor As RasterHsvColor = New RasterHsvColor(75, 40, 40)
         Dim upperColor As RasterHsvColor = New RasterHsvColor(95, 255, 255)

         image.AddColorHsvRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddColorHsvRangeToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorHsvRangeToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Add the region
         RasterHsvColor lowerColor = new RasterHsvColor(75, 40, 40);
         RasterHsvColor upperColor = new RasterHsvColor(95, 255, 255);

         image.AddColorHsvRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void AddColorHsvRangeToRegionExample(RasterImage image, Stream destStream)
      {
         // Add the region
         RasterHsvColor lowerColor = new RasterHsvColor(75, 40, 40);
         RasterHsvColor upperColor = new RasterHsvColor(95, 255, 255);
         image.AddColorHsvRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Draw something on the image
         InvertCommand command = new InvertCommand();
         command.Run(image);

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Png, 24);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddColorHsvRangeToRegionExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Add the region
         Dim lowerColor As RasterHsvColor = New RasterHsvColor(75, 40, 40)
         Dim upperColor As RasterHsvColor = New RasterHsvColor(95, 255, 255)
         image.AddColorHsvRangeToRegion(lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Draw something on the image
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Png, 24)

         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Gray Scale Images</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionBitsPerPixel">Introduction: Bits Per Pixel and Related Ideas</seealso>
      <seealso cref="T:Leadtools.Topics.UsingColorValuesInLEADTOOLS">Using Color Values in LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.AddColorToRegion(Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a region that consists of all the pixels of a specified color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="color">Specifies the color to use for the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>You can use this method to simulate the use of a transparent color as follows:</para>
        <para>
          <list type="number">
            <item>
              <description>Call <see cref="M:Leadtools.RasterImage.AddColorToRegion(Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)" />, with the transparent color in the <paramref name="color" />
            parameter and <see cref="T:Leadtools.RasterRegionCombineMode">RasterRegionCombineMode.SetNot</see> in the combineMode parameter.</description>
            </item>
            <item>
              <description>Call <see cref="M:Leadtools.Drawing.RasterImagePainter.PaintRegion(Leadtools.RasterImage,System.IntPtr,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.LeadRect,Leadtools.Drawing.RasterPaintProperties)" /> to paint the resulting region, which includes everything in the image,
            except the transparent color.</description>
            </item>
          </list>
        </para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
        <para>
            This function does not support signed images.
            </para>
      </remarks>
      <example>
        <para>This example will load an image, adds a region all pixels of a specified color. It then fills the region with blue before saving it back to disk.</para>
        <code lang="VB">      Public Sub AddColorToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)

         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth \ 8, image.ImageHeight \ 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Get the color of the specified pixel
         Dim regionColor As RasterColor = image.GetPixelColor(pt.Y, pt.X)

         ' Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set)

         ' Fill the region with blue
         Dim fill As FillCommand = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue))
         fill.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddColorToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddColorToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);

         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Get the color of the specified pixel
         RasterColor regionColor = image.GetPixelColor(pt.Y, pt.X);

         // Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set);

         // Fill the region with blue
         FillCommand fill = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue));
         fill.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void AddColorToRegionExample(RasterImage image, Stream destStream)
      {
         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);
         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Get the color of the specified pixel
         RasterColor regionColor = image.GetPixelColor(pt.Y, pt.X);

         // Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set);

         // Fill the region with blue
         FillCommand fill = new FillCommand(RasterColorConverter.FromColor(Colors.Blue));
         fill.Run(image);

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Png, 24);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddColorToRegionExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)
         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Get the color of the specified pixel
         Dim regionColor As RasterColor = image.GetPixelColor(pt.Y, pt.X)

         ' Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set)

         ' Fill the region with blue
         Dim fill As FillCommand = New FillCommand(RasterColorConverter.FromColor(Colors.Blue))
         fill.Run(image)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Png, 24)

         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Gray Scale Images</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionBitsPerPixel">Introduction: Bits Per Pixel and Related Ideas</seealso>
      <seealso cref="T:Leadtools.Topics.UsingColorValuesInLEADTOOLS">Using Color Values in LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.CreateMaskFromRegion">
      <summary>Creates a 1-bit mask image from the region that is defined in the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> which will be updated with a 1-bit, black-and-white image,
            where pixels from the region are white, and all others are black.
            </returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingTransparency">Implementing Transparency</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load an image, sets a color region using black, and then creates a 1-bit mask image from that image and saves it to disk.</para>
        </para>
        <code lang="VB">      Public Sub CreateMaskFromRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateMaskFromRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)

         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth \ 8, image.ImageHeight \ 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Get the color of the specified pixel
         Dim regionColor As RasterColor = image.GetPixelColor(pt.Y, pt.X)

         ' Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set)

         Dim maskImage As RasterImage = image.CreateMaskFromRegion()

         codecs.Save(maskImage, destFileName, RasterImageFormat.Bmp, 1)

         maskImage.Dispose()
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateMaskFromRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CreateMaskFromRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);

         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Get the color of the specified pixel
         RasterColor regionColor = image.GetPixelColor(pt.Y, pt.X);

         // Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set);

         RasterImage maskImage = image.CreateMaskFromRegion();

         codecs.Save(maskImage, destFileName, RasterImageFormat.Bmp, 1);

         maskImage.Dispose();
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CreateMaskFromRegionExample(RasterImage image, Stream destStream)
      {
         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);
         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Get the color of the specified pixel
         RasterColor regionColor = image.GetPixelColor(pt.Y, pt.X);

         // Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set);

         RasterImage maskImage = image.CreateMaskFromRegion();

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(maskImage, destStream, RasterImageFormat.Png, 0);

         maskImage.Dispose();
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CreateMaskFromRegionExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)
         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Get the color of the specified pixel
         Dim regionColor As RasterColor = image.GetPixelColor(pt.Y, pt.X)

         ' Create a region that includes all pixels of that color
         image.AddColorToRegion(regionColor, RasterRegionCombineMode.Set)

         Dim maskImage As RasterImage = image.CreateMaskFromRegion()

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(maskImage, destStream, RasterImageFormat.Png, 0)

         maskImage.Dispose()
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.AddMaskToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterImage,Leadtools.RasterRegionCombineMode)">
      <summary>Creates or updates the image region by adding a region that consists of all the white pixels in a 1-bit mask image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">
        <see cref="T:Leadtools.RasterRegionXForm" /> object that LEADTOOLS uses to translate between display
            coordinates and image coordinates.</param>
      <param name="maskImage">The 1-bit black-and-white <see cref="T:Leadtools.RasterImage" /> used as a mask.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.CreateMaskFromRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.AddMagicWandToRegion(System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)">
      <summary>Sets a region based on the color found at point x, y in the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="left">X coordinate of a point. The color of the specified point will be used to set the region.</param>
      <param name="top">Y coordinate of a point. The color of the specified point will be used to set the region.</param>
      <param name="lowerToleranceColor">Lower tolerance values that set the lower stopping point for the region.</param>
      <param name="upperToleranceColor">Upper tolerance values that set the upper stopping point for the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>For color bitmaps: </para>
        <para>If the value of the pixel at (x, y) is (125, 125, 125) and lowerToleranceColor is (20,30,15), 
            then the lower stopping point is (105, 95, 110). If upperToleranceColor is (20,30,15), 
            then the upper stopping point is (145,155,140).</para>
        <para>For gray scale bitmaps:</para>
        <para>The minimum channel tolerance value of <paramref name="lowerToleranceColor" /> will be used to set the lower
            stopping point, and the value of <paramref name="upperToleranceColor" /> will be used to set the upper stopping
            point. For example, if the value of the pixel at (x, y) is (125, 125, 125) and <paramref name="lowerToleranceColor" />
            is (20,30,15), the smallest value of the triplet (15) will be used to create the lower stopping
            point of (110,110,110). If <paramref name="upperToleranceColor" /> is (10,25,20), the smallest value of that 
            triplet (10) will be used to create the upper stopping point of (135,135,135).</para>
        <para>This function supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 
            48 and 64-bit color images is available in <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see>.</para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter. For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image, sets a magic wand region to it, fills the region with blue before saving the image back to disk</para>
        <code lang="VB">      Public Sub AddMagicWandToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddMagicWandToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)

         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth \ 8, image.ImageHeight \ 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Create a magic wand region at this point
         Dim lowerColor As RasterColor = New RasterColor(20, 30, 150)
         Dim upperColor As RasterColor = New RasterColor(15, 30, 10)
         image.AddMagicWandToRegion(pt.X, pt.Y, lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Fill the region with blue
         Dim fill As FillCommand = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue))
         fill.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddMagicWandToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddMagicWandToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);

         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Create a magic wand region at this point
         RasterColor lowerColor = new RasterColor(20, 30, 150);
         RasterColor upperColor = new RasterColor(15, 30, 10);
         image.AddMagicWandToRegion(pt.X, pt.Y, lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Fill the region with blue
         FillCommand fill = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue));
         fill.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Gray Scale Images</seealso>
      <seealso cref="T:Leadtools.Topics.IntroductionBitsPerPixel">Introduction: Bits Per Pixel and Related Ideas</seealso>
      <seealso cref="T:Leadtools.Topics.UsingColorValuesInLEADTOOLS">Using Color Values in LEADTOOLS</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.AddBorderToRegion(System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)">
      <summary>Creates a region of pixels with values that fall within a range defined by the value of a specific
            pixel and a lower and upper tolerance value but are not equal to the <paramref name="borderColor" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="left">X coordinate of a point. The color of the specified point will be used to set the region.</param>
      <param name="top">Y coordinate of a point. The color of the specified point will be used to set the region.</param>
      <param name="borderColor">Border color.</param>
      <param name="lowerToleranceColor">Lower tolerance values that set the lower stopping point for the region.</param>
      <param name="upperToleranceColor">Upper tolerance values that set the lower stopping point for the region.</param>
      <param name="combineMode">The action to take regarding the existing image region, if one is defined.</param>
      <remarks>
        <para>For color bitmaps:</para>
        <para>If the value of the pixel at (x, y) is (125, 125, 125) and <paramref name="lowerToleranceColor" /> is (20,30,15),
            then the lower stopping point is (105, 95, 110). If <paramref name="upperToleranceColor" /> is (20,30,15), then the
            upper stopping point is (145,155,140). In this case, the pixels with values between (105,95,110)
            and (145,155,140) are non-border pixels and will be included in the region. Any pixel with a
            value outside this range or equal to <paramref name="borderColor" /> is considered a border pixel.</para>
        <para>For gray scale bitmaps:</para>
        <para>The minimum channel tolerance value of <paramref name="lowerToleranceColor" /> will be used to set the lower
            stopping point, and the minimum channel tolerance value of <paramref name="upperToleranceColor" /> will be used to set
            the upper stopping point. For example, if the value of the pixel at (x, y) is (125, 125, 125)
            and <paramref name="lowerToleranceColor" /> is (20,30,15), the smallest value of the triplet (15) will be used to
            create the lower stopping point of (110,110,110). If <paramref name="upperToleranceColor" /> is (10,25,20), the
            smallest value of that triplet (10) will be used to create the upper stopping point of
            (135,135,135). In this case, the pixels with values between (110, 110, 110) and (135,135,135)
            are non-border pixels and will be included in the region. Any pixel with a value outside this 
            range or equal to <paramref name="borderColor" /> is considered a border pixel.</para>
        <para>This method does not support signed data images.</para>
        <para>To update an existing region, you specify how the new region is to be combined with the existing one using the
            <paramref name="combineMode" /> parameter.  For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub AddBorderToRegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_AddBorderToRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Posterize the image to decrease the number of colors
         Dim posterize As PosterizeCommand = New PosterizeCommand(16)
         posterize.Run(image)

         ' Specify a pixel in the upper left of the displayed image
         Dim pt As LeadPoint = New LeadPoint(image.ImageWidth \ 8, image.ImageHeight \ 8)

         ' Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt)

         ' Create a border region at this point
         Dim borderColor As RasterColor = image.GetPixelColor(pt.Y, pt.X)
         Dim lowerColor As RasterColor = New RasterColor(20, 30, 150)
         Dim upperColor As RasterColor = New RasterColor(15, 30, 10)
         image.AddBorderToRegion(pt.X, pt.Y, borderColor, lowerColor, upperColor, RasterRegionCombineMode.Set)

         ' Fill the region with blue
         Dim fill As FillCommand = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue))
         fill.Run(image)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void AddBorderToRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1_AddBorderToRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Posterize the image to decrease the number of colors
         PosterizeCommand posterize = new PosterizeCommand(16);
         posterize.Run(image);

         // Specify a pixel in the upper left of the displayed image
         LeadPoint pt = new LeadPoint(image.ImageWidth / 8, image.ImageHeight / 8);

         // Adjust the point in case the view perspective is not TopLeft
         pt = image.PointToImage(RasterViewPerspective.TopLeft, pt);

         // Create a border region at this point
         RasterColor borderColor = image.GetPixelColor(pt.Y, pt.X);
         RasterColor lowerColor = new RasterColor(20, 30, 150);
         RasterColor upperColor = new RasterColor(15, 30, 10);
         image.AddBorderToRegion(pt.X, pt.Y, borderColor, lowerColor, upperColor, RasterRegionCombineMode.Set);

         // Fill the region with blue
         FillCommand fill = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Blue));
         fill.Run(image);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.Access">
      <summary>Provides exclusive access to the image data contained in this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>If the image data of this <see cref="T:Leadtools.RasterImage" /> object is stored in a global Windows handle, then use the
            <see cref="M:Leadtools.RasterImage.Access" /> method to lock the memory. If you do not call this method before accessing the data with a low-level
            method like <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /> or <see cref="M:Leadtools.RasterImage.SetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" />the application might fail.</para>
        <para>To make the most of available system resources, you should only keep a <see cref="T:Leadtools.RasterImage" /> object locked when
            you need to access the image data. Call <see cref="M:Leadtools.RasterImage.Release" /> to unlock the image data for more efficient use of
            system memory resources.</para>
        <para>If the image data of this <see cref="T:Leadtools.RasterImage" /> is not stored in a global Windows handle, then this method
            will do nothing and calling it will not have any affect on the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>Use <see cref="P:Leadtools.RasterImage.IsGlobalMemory" /> to determine whether the image data of this <see cref="T:Leadtools.RasterImage" /> is stored
            in a global Windows handle.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.Release">
      <summary>Releases memory locked with <see cref="M:Leadtools.RasterImage.Access" /> back to the system. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>If the image data of this <see cref="T:Leadtools.RasterImage" /> object is stored in a global Windows handle, then use the
            <see cref="M:Leadtools.RasterImage.Release" /> method along with <see cref="M:Leadtools.RasterImage.Access" /> to control the access to image data in memory. Any attempt
            to access the image data after calling <see cref="M:Leadtools.RasterImage.Release" /> will result in an application error.</para>
        <para>To make the most of available system resources, you should only keep a <see cref="T:Leadtools.RasterImage" /> object locked when
            you need to access the image data. Call <see cref="M:Leadtools.RasterImage.Release" /> to unlock the image data for more efficient use of
            system memory resources.</para>
        <para>You should call this method whenever the image is not used, so that Windows can manage its memory properly.</para>
        <para>If the image data of this <see cref="T:Leadtools.RasterImage" /> is not stored in a global Windows handle, then this method
            will do nothing and calling it will not have any affect on the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>Use <see cref="P:Leadtools.RasterImage.IsGlobalMemory" /> to determine if the image data of this <see cref="T:Leadtools.RasterImage" /> is stored
            in a global Windows handle or not.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Retrieves a row or more of image data from this <see cref="T:Leadtools.RasterImage" /> into a managed memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the
            image height.</param>
      <param name="buffer">Buffer to hold the image data that this method gets.  The size of this buffer must be large
            enough to hold the image data.</param>
      <param name="bufferIndex">The zero-based index into the <paramref name="buffer" /> where the get operation should start.</param>
      <param name="bufferCount">
        <para>The number of bytes in the row to retrieve. To get a full row, use the value in the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property</para>
        <para>When getting less than full row, you must consider the bits per pixel. For a 1-bit image, each byte represents 8
            pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit image, each byte represents 1 pixel. For a 16-bit image,
            every 2 bytes represents one pixel. For 24-bit images, every three bytes represents one pixel. For a 32-bit image,
            every four bytes represents one pixel. For 48-bit images, every six bytes represents one pixel. For 64-bit images,
            every eight bytes represents one pixel.</para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate the number of bytes needed for a
            particular number of pixels. For example:</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if((Image.BitsPerPixel * NumberOfPixels) % 8)
               NumberOfBytes = NumberOfBytes + 1; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>This method copies image data from the <see cref="T:Leadtools.RasterImage" /> object to a buffer that you specify. The data is copied
            exactly as it is stored in the image. The image memory must be locked when you use this method. Normally, you can call
            <see cref="M:Leadtools.RasterImage.Access" /> to lock the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" />
            when the operation is finished.</para>
        <para>
          <strong>Note</strong>: The data in the buffer will be padded to <see cref="P:Leadtools.RasterImage.BytesPerLine" />.</para>
        <para>Use the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property of the <see cref="T:Leadtools.RasterImage" /> object to determine the byte count of
            each line. Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property. This value can be
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images. Support for
            12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
      </remarks>
      <example>
        <para>This example uses Get/SetRow to flip the image data.</para>
        <code lang="VB">      Public Sub GetRowTest()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         Dim row1 As Byte() = New Byte(image.BytesPerLine - 1) {}
         Dim row2 As Byte() = New Byte(image.BytesPerLine - 1) {}

         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim y As Integer = 0
         Do While y &lt; image.Height \ 2
            image.GetRow(y, row1, 0, row1.Length)
            image.GetRow(image.Height - y - 1, row2, 0, row2.Length)

            image.SetRow(y, row2, 0, row2.Length)
            image.SetRow(image.Height - y - 1, row1, 0, row1.Length)
            y += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrow.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowTest()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         byte[] row1 = new byte[image.BytesPerLine];
         byte[] row2 = new byte[image.BytesPerLine];

         if(image.IsGlobalMemory)
            image.Access();
         for(int y = 0; y &lt; image.Height / 2; y++)
         {
            image.GetRow(y, row1, 0, row1.Length);
            image.GetRow(image.Height - y - 1, row2, 0, row2.Length);

            image.SetRow(y, row2, 0, row2.Length);
            image.SetRow(image.Height - y - 1, row1, 0, row1.Length);
         }
         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrow.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetRowTest(RasterImage image, Stream destStream)
      {
         byte[] row1 = new byte[image.BytesPerLine];
         byte[] row2 = new byte[image.BytesPerLine];
         if (image.IsGlobalMemory)
            image.Access();
         for (int y = 0; y &lt; image.Height / 2; y++)
         {
            image.GetRow(y, row1, 0, row1.Length);
            image.GetRow(image.Height - y - 1, row2, 0, row2.Length);

            image.SetRow(y, row2, 0, row2.Length);
            image.SetRow(image.Height - y - 1, row1, 0, row1.Length);
         }
         if (image.IsGlobalMemory)
            image.Release();

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetRowTest(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim row1 As Byte() = New Byte(image.BytesPerLine - 1){}
         Dim row2 As Byte() = New Byte(image.BytesPerLine - 1){}
         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim y As Integer = 0
         Do While y &lt; image.Height / 2
            image.GetRow(y, row1, 0, row1.Length)
            image.GetRow(image.Height - y - 1, row2, 0, row2.Length)

            image.SetRow(y, row2, 0, row2.Length)
            image.SetRow(image.Height - y - 1, row1, 0, row1.Length)
            y += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRow(System.Int32,System.IntPtr,System.Int32)">
      <summary>Retrieves a row or more of image data from this <see cref="T:Leadtools.RasterImage" /> into un unmanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the
            image height.</param>
      <param name="buffer">Pointer to an unmanaged memory buffer to hold the image data that this method gets.  The size of
            this buffer must be large enough to hold the image data.</param>
      <param name="bufferCount">
        <para>The number of bytes in the row to retrieve. To get a full row, use the value in the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property</para>
        <para>When getting less than full row, you must consider the bits per pixel. For a 1-bit image, each byte represents 8
            pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit image, each byte represents 1 pixel. For a 16-bit image,
            every 2 bytes represents one pixel. For 24-bit images, every three bytes represents one pixel. For a 32-bit image,
            every four bytes represents one pixel. For 48-bit images, every six bytes represents one pixel. For 64-bit images,
            every eight bytes represents one pixel.</para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate the number of bytes needed for a
            particular number of pixels. For example:</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if((Image.BitsPerPixel * NumberOfPixels) % 8)
               NumberOfBytes = NumberOfBytes + 1; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>This method copies image data from the <see cref="T:Leadtools.RasterImage" /> object to a buffer that you specify. The data is copied
            exactly as it is stored in the image. The image memory must be locked when you use this method. Normally, you can call
            <see cref="M:Leadtools.RasterImage.Access" /> to lock the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" />
            when the operation is finished.</para>
        <para>
          <strong>Note</strong>: The data in the buffer will be padded to <see cref="P:Leadtools.RasterImage.BytesPerLine" />.</para>
        <para>Use the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property of the <see cref="T:Leadtools.RasterImage" /> object to determine the byte count of
            each line. Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property. This value can be
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images. Support for
            12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRow(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies a row or more of image data to this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="buffer">Buffer containing the image data. The data is copied exactly as it is stored in the buffer. The buffer
            should contain uncompressed data regardless of whether the image is compressed or not.</param>
      <param name="bufferIndex">The zero-based index into the <paramref name="buffer" /> where the set operation should start.</param>
      <param name="bufferCount">Number of bytes to set. Use the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property of thiss
            <see cref="T:Leadtools.RasterImage" /> to determine the byte count of each line.</param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>The image memory must be locked when you use this method. Normally, you can call
            <see cref="M:Leadtools.RasterImage.Access" /> to lock the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" />
            when the operation is finished.</para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property of the image to determine the number of bytes to set the
            <paramref name="bufferCount" /> parameter. If the image is 8-bit then each byte is an index to the palette. If the image is
            a 24-bit image, then each three bytes represents one pixel element. Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" />
            property of the <see cref="T:Leadtools.RasterImage" /> object. This value can be
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRow(System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies a row or more of image data from an unmanaged memory buffer to this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="buffer">Pointer to unmanaged memory buffer containing the image data. The buffer
            should contain uncompressed data regardless of whether the image is compressed or not.</param>
      <param name="bufferCount">Number of bytes to set. Use the <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property of thiss
            <see cref="T:Leadtools.RasterImage" /> to determine the byte count of each line.</param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>The image memory must be locked when you use this method. Normally, you can call
            <see cref="M:Leadtools.RasterImage.Access" /> to lock the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" />
            when the operation is finished.</para>
        <para>You can use the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property of the image to determine the number of bytes to set the
            <paramref name="bufferCount" /> parameter. If the image is 8-bit then each byte is an index to the palette. If the image is
            a 24-bit image, then each three bytes represents one pixel element. Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" />
            property of the <see cref="T:Leadtools.RasterImage" /> object. This value can be
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.IntPtr,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRowColumn(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Accepts a column offset to retrieve data from an image and place it in a buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column offset
            is 1 less than the image width</param>
      <param name="buffer">Buffer to hold the image data that this method gets. The buffer will be filled with uncompressed data.</param>
      <param name="bufferIndex">0-based index into the output buffer. This is the start location of output data.</param>
      <param name="bufferCount">
        <para>The number of bytes to retrieve. Consider the bits per pixel, and avoid specifying a number that goes past the end of
            the row.</para>
        <para>For a 1-bit image, each byte represents 8 pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit
            image, each byte represents 1 pixel. For a 16-bit image, every 2 bytes represents one pixel. For 24-bit images, every
            three bytes represents one pixel. For a 32-bit image, every four bytes represents one pixel. For 48-bit images, every six
            bytes represents one pixel. For 64-bit images, every eight bytes represents one pixel.</para>
        <para>You can use the image <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate the number of bytes needed
            for a particular number of pixels. For example</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if((Image.BitsPerPixel * NumberOfPixels) % 8)
               NumberOfBytes = NumberOfBytes + 1; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>By using this low-level method to get any part of a row, you can write a procedure that accesses a single pixel or a
            rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length
            (<paramref name="bufferCount" />) in bytes. Therefore, you must consider the bits per pixel of the image when specifying
            these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>Bits Per Pixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0, 8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>The image memory must be locked when you use this method. Normally, you can call <see cref="M:Leadtools.RasterImage.Access" /> to lock
            the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" /> when the operation is
            finished.</para>
        <para>Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property of the <see cref="T:Leadtools.RasterImage" /> object. This value
            can be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example is designed to work with images that have a bottom-left or top-left view perspective. 
            This example uses GetRowColumn and <see cref="M:Leadtools.RasterImage.SetRowColumn(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)" /> to invert the colors of a rectangle in the upper 
            left part of the displayed image.</para>
        <code lang="VB">      Public Sub GetRowColumnExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Specify a rectangle in the top left part of the displayed image.
         Dim xOffset As Integer = Convert.ToInt32(image.Width / 8) ' Column offset of the rectangle to process.
         Dim xSize As Integer = Convert.ToInt32(image.Width \ 3) ' Pixel width of the rectangle to process.
         Dim yOffset As Integer = Convert.ToInt32(image.Height / 8) ' Row offset of the rectangle to process.
         Dim ySize As Integer = Convert.ToInt32(image.Height \ 3) ' Pixel height of the rectangle to process.

         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         ' Allocate the buffer.
         Dim Buffer As Byte() = New Byte(xSize * 3 - 1) {}

         ' Invert the colors of pixels in the rectangle.
         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim i As Integer = yOffset
         Do While i &lt; yOffset + ySize
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3)

            Dim col As Integer = 0
            Do While col &lt; xSize * 3
               Buffer(col) = Buffer(col) Xor Convert.ToByte(&amp;HFF)
               col += 1
            Loop

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3)
            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcol.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowColumnExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Specify a rectangle in the top left part of the displayed image.
         int xOffset = Convert.ToInt32(image.Width / 8); // Column offset of the rectangle to process.
         int xSize = Convert.ToInt32(image.Width / 3); // Pixel width of the rectangle to process.
         int yOffset = Convert.ToInt32(image.Height / 8); // Row offset of the rectangle to process.
         int ySize = Convert.ToInt32(image.Height / 3); // Pixel height of the rectangle to process.

         // Adjust the YOffset if the view perspective is bottom left.
         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
            yOffset = image.Height - yOffset - ySize;

         // Allocate the buffer.
         byte[] Buffer = new byte[xSize * 3];

         // Invert the colors of pixels in the rectangle.
         if(image.IsGlobalMemory)
            image.Access();
         for(int i = yOffset; i &lt; yOffset + ySize; i++)
         {
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3);

            for(int col = 0; col &lt; xSize * 3; col++)
               Buffer[col] ^= 0xFF;

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3);
         }
         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcol.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetRowColumnExample(RasterImage image, Stream destStream)
      {
         // This example does not work with rotated view perspectives.
         if ((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);
         // Specify a rectangle in the top left part of the displayed image.
         int xOffset = Convert.ToInt32(image.Width / 8); // Column offset of the rectangle to process.
         int xSize = Convert.ToInt32(image.Width / 3); // Pixel width of the rectangle to process.
         int yOffset = Convert.ToInt32(image.Height / 8); // Row offset of the rectangle to process.
         int ySize = Convert.ToInt32(image.Height / 3); // Pixel height of the rectangle to process.

         // Adjust the YOffset if the view perspective is bottom left.
         if (image.ViewPerspective == RasterViewPerspective.BottomLeft)
            yOffset = image.Height - yOffset - ySize;

         // Allocate the buffer.
         byte[] Buffer = new byte[xSize * 3];

         // Invert the colors of pixels in the rectangle.
         if (image.IsGlobalMemory)
            image.Access();
         for (int i = yOffset; i &lt; yOffset + ySize; i++)
         {
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3);

            for (int col = 0; col &lt; xSize * 3; col++)
               Buffer[col] ^= 0xFF;

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3);
         }
         if (image.IsGlobalMemory)
            image.Release();

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetRowColumnExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If
         ' Specify a rectangle in the top left part of the displayed image.
         Dim xOffset As Integer = Convert.ToInt32(image.Width / 8) ' Column offset of the rectangle to process.
         Dim xSize As Integer = Convert.ToInt32(image.Width / 3) ' Pixel width of the rectangle to process.
         Dim yOffset As Integer = Convert.ToInt32(image.Height / 8) ' Row offset of the rectangle to process.
         Dim ySize As Integer = Convert.ToInt32(image.Height / 3) ' Pixel height of the rectangle to process.

         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         ' Allocate the buffer.
         Dim Buffer As Byte() = New Byte(xSize * 3 - 1){}

         ' Invert the colors of pixels in the rectangle.
         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim i As Integer = yOffset
         Do While i &lt; yOffset + ySize
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3)

            Dim col As Integer = 0
            Do While col &lt; xSize * 3
               Buffer(col) = Buffer(col) Xor &amp;HFF
               col += 1
            Loop

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3)
            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRowColumn(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Accepts a column offset to retrieve data from an image and place it in an ummanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column offset
            is 1 less than the image width</param>
      <param name="buffer">Pointer to an unmanaged buffer to hold the image data that this method gets. The buffer will be
            filled with uncompressed data.</param>
      <param name="bufferCount">
        <para>The number of bytes to retrieve. Consider the bits per pixel, and avoid specifying a number that goes past the end of
            the row.</para>
        <para>For a 1-bit image, each byte represents 8 pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit
            image, each byte represents 1 pixel. For a 16-bit image, every 2 bytes represents one pixel. For 24-bit images, every
            three bytes represents one pixel. For a 32-bit image, every four bytes represents one pixel. For 48-bit images, every six
            bytes represents one pixel. For 64-bit images, every eight bytes represents one pixel.</para>
        <para>You can use the image <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> property with integer math to calculate the number of bytes needed
            for a particular number of pixels. For example</para>
        <para>
          <code>
            NumberOfBytes = (Image.BitsPerPixel * NumberOfPixels) / 8;
            if((Image.BitsPerPixel * NumberOfPixels) % 8)
               NumberOfBytes = NumberOfBytes + 1; // Round up if necessary for a 1- or 4-bit image
            </code>
        </para>
      </param>
      <returns>The number of bytes copied.</returns>
      <remarks>
        <para>By using this low-level method to get any part of a row, you can write a procedure that accesses a single pixel or a
            rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length
            (<paramref name="bufferCount" />) in bytes. Therefore, you must consider the bits per pixel of the image when specifying
            these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>Bits Per Pixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0, 8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>The image memory must be locked when you use this method. Normally, you can call <see cref="M:Leadtools.RasterImage.Access" /> to lock
            the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" /> when the operation is
            finished.</para>
        <para>Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property of the <see cref="T:Leadtools.RasterImage" /> object. This value
            can be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example is designed to work with images that have a bottom-left or top-left view perspective. 
            This example uses GetRowColumn and <see cref="M:Leadtools.RasterImage.SetRowColumn(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)" /> to invert the colors of a rectangle in the upper 
            left part of the displayed image.</para>
        <code lang="VB">      Public Sub GetRowColumnExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Specify a rectangle in the top left part of the displayed image.
         Dim xOffset As Integer = Convert.ToInt32(image.Width / 8) ' Column offset of the rectangle to process.
         Dim xSize As Integer = Convert.ToInt32(image.Width \ 3) ' Pixel width of the rectangle to process.
         Dim yOffset As Integer = Convert.ToInt32(image.Height / 8) ' Row offset of the rectangle to process.
         Dim ySize As Integer = Convert.ToInt32(image.Height \ 3) ' Pixel height of the rectangle to process.

         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         ' Allocate the buffer.
         Dim Buffer As Byte() = New Byte(xSize * 3 - 1) {}

         ' Invert the colors of pixels in the rectangle.
         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim i As Integer = yOffset
         Do While i &lt; yOffset + ySize
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3)

            Dim col As Integer = 0
            Do While col &lt; xSize * 3
               Buffer(col) = Buffer(col) Xor Convert.ToByte(&amp;HFF)
               col += 1
            Loop

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3)
            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcol.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowColumnExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Specify a rectangle in the top left part of the displayed image.
         int xOffset = Convert.ToInt32(image.Width / 8); // Column offset of the rectangle to process.
         int xSize = Convert.ToInt32(image.Width / 3); // Pixel width of the rectangle to process.
         int yOffset = Convert.ToInt32(image.Height / 8); // Row offset of the rectangle to process.
         int ySize = Convert.ToInt32(image.Height / 3); // Pixel height of the rectangle to process.

         // Adjust the YOffset if the view perspective is bottom left.
         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
            yOffset = image.Height - yOffset - ySize;

         // Allocate the buffer.
         byte[] Buffer = new byte[xSize * 3];

         // Invert the colors of pixels in the rectangle.
         if(image.IsGlobalMemory)
            image.Access();
         for(int i = yOffset; i &lt; yOffset + ySize; i++)
         {
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3);

            for(int col = 0; col &lt; xSize * 3; col++)
               Buffer[col] ^= 0xFF;

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3);
         }
         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcol.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetRowColumnExample(RasterImage image, Stream destStream)
      {
         // This example does not work with rotated view perspectives.
         if ((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);
         // Specify a rectangle in the top left part of the displayed image.
         int xOffset = Convert.ToInt32(image.Width / 8); // Column offset of the rectangle to process.
         int xSize = Convert.ToInt32(image.Width / 3); // Pixel width of the rectangle to process.
         int yOffset = Convert.ToInt32(image.Height / 8); // Row offset of the rectangle to process.
         int ySize = Convert.ToInt32(image.Height / 3); // Pixel height of the rectangle to process.

         // Adjust the YOffset if the view perspective is bottom left.
         if (image.ViewPerspective == RasterViewPerspective.BottomLeft)
            yOffset = image.Height - yOffset - ySize;

         // Allocate the buffer.
         byte[] Buffer = new byte[xSize * 3];

         // Invert the colors of pixels in the rectangle.
         if (image.IsGlobalMemory)
            image.Access();
         for (int i = yOffset; i &lt; yOffset + ySize; i++)
         {
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3);

            for (int col = 0; col &lt; xSize * 3; col++)
               Buffer[col] ^= 0xFF;

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3);
         }
         if (image.IsGlobalMemory)
            image.Release();

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetRowColumnExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If
         ' Specify a rectangle in the top left part of the displayed image.
         Dim xOffset As Integer = Convert.ToInt32(image.Width / 8) ' Column offset of the rectangle to process.
         Dim xSize As Integer = Convert.ToInt32(image.Width / 3) ' Pixel width of the rectangle to process.
         Dim yOffset As Integer = Convert.ToInt32(image.Height / 8) ' Row offset of the rectangle to process.
         Dim ySize As Integer = Convert.ToInt32(image.Height / 3) ' Pixel height of the rectangle to process.

         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         ' Allocate the buffer.
         Dim Buffer As Byte() = New Byte(xSize * 3 - 1){}

         ' Invert the colors of pixels in the rectangle.
         If image.IsGlobalMemory Then
            image.Access()
         End If
         Dim i As Integer = yOffset
         Do While i &lt; yOffset + ySize
            image.GetRowColumn(i, xOffset, Buffer, 0, xSize * 3)

            Dim col As Integer = 0
            Do While col &lt; xSize * 3
               Buffer(col) = Buffer(col) Xor &amp;HFF
               col += 1
            Loop

            image.SetRowColumn(i, xOffset, Buffer, 0, xSize * 3)
            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowColumn(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from a buffer into an image, with an offset to the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to update. The first column offset is 0, and the last column offset
            is 1 less than the image width.</param>
      <param name="buffer">Buffer containing the image data. The buffer should contain uncompressed data regardless of whether
            the image is compressed or not.</param>
      <param name="bufferIndex">0-based index into the output buffer. This is the start location of input data.</param>
      <param name="bufferCount">
        <para>The number of bytes to update. Consider the bits per pixel, and avoid specifying a number that goes past the end
            of the row.</para>
        <para>For a 1-bit image, each byte represents 8 pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit image,
            each byte represents 1 pixel. For a 16-bit image, every 2 bytes represents one pixel. For 24-bit images, every three bytes
            represents one pixel. For a 32-bit image, every four bytes represents one pixel. For a 48-bit image, every six bytes
            represents one pixel. For a 64-bit image, every eight bytes represents one pixel.</para>
      </param>
      <returns>The number of bytes put.</returns>
      <remarks>
        <para>By using this low-level method to update any part of a row, you can write a procedure that updates a single pixel or a
            rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length
            (<paramref name="bufferCount" />) in bytes. Therefore, you must consider the bits per pixel of the image when specifying
            these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>Bits Per Pixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0, 8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>The image memory must be locked when you use this method. Normally, you can call <see cref="M:Leadtools.RasterImage.Access" /> to lock
            the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" /> when the operation is
            finished.</para>
        <para>Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property of the <see cref="T:Leadtools.RasterImage" /> object. This value
            can be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowColumn(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowColumn(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from an unmanaged memory buffer to an image, with an offset to the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to update. The first column offset is 0, and the last column offset
            is 1 less than the image width.</param>
      <param name="buffer">Pointer to an unmanaged memory buffer containing the image data. The buffer should contain uncompressed
            data regardless of whether the image is compressed or not.</param>
      <param name="bufferCount">
        <para>The number of bytes to update. Consider the bits per pixel, and avoid specifying a number that goes past the end
            of the row.</para>
        <para>For a 1-bit image, each byte represents 8 pixels. For a 4-bit image, each byte represents 2 pixels. For an 8-bit image,
            each byte represents 1 pixel. For a 16-bit image, every 2 bytes represents one pixel. For 24-bit images, every three bytes
            represents one pixel. For a 32-bit image, every four bytes represents one pixel. For a 48-bit image, every six bytes
            represents one pixel. For a 64-bit image, every eight bytes represents one pixel.</para>
      </param>
      <returns>The number of bytes put.</returns>
      <remarks>
        <para>By using this low-level method to update any part of a row, you can write a procedure that updates a single pixel or a
            rectangular area within the image.</para>
        <para>This method accepts an offset parameter (<paramref name="column" />) in pixels and a length
            (<paramref name="bufferCount" />) in bytes. Therefore, you must consider the bits per pixel of the image when specifying
            these parameters. The following table describes the rules:</para>
        <para>
          <table>
            <tr>
              <th>Bits Per Pixel</th>
              <th>Column Offset (in Pixels)</th>
              <th>Bytes to Get</th>
            </tr>
            <tr>
              <td>1</td>
              <td>Must be a multiple of 8 (such as 0, 8, or 16).</td>
              <td>Can be any number up to the end of the row. Consider that there are 8 pixels per byte.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>Must be an even number (such as 0, 2, or 4).</td>
              <td>Can be any number up to the end of the row. Consider that there are 2 pixels per byte.</td>
            </tr>
            <tr>
              <td>8</td>
              <td>Can be any column within the image.</td>
              <td>Can be any number up to the end of the row. Consider that there is 1 pixel per byte.</td>
            </tr>
            <tr>
              <td>16</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 2 (such as 2, 4, or 6), because there are 2 bytes per pixel.</td>
            </tr>
            <tr>
              <td>24</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 3 (such as 3, 6, or 9), because there are 3 bytes per pixel.</td>
            </tr>
            <tr>
              <td>32</td>
              <td>Can be any column within the image.</td>
              <td>Must be a multiple of 4 (such as 4, 8, or 12), because there are 4 bytes per pixel.</td>
            </tr>
          </table>
        </para>
        <para>The image memory must be locked when you use this method. Normally, you can call <see cref="M:Leadtools.RasterImage.Access" /> to lock
            the memory before starting an operation that uses this method, then call <see cref="M:Leadtools.RasterImage.Release" /> when the operation is
            finished.</para>
        <para>Color order is determined by the <see cref="P:Leadtools.RasterImage.Order" /> property of the <see cref="T:Leadtools.RasterImage" /> object. This value
            can be <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see>, <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>,
            or <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see>.</para>
        <para>
          <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> is only valid for 12 and 16-bit grayscale images.
            Support for 12 and 16-bit grayscale images is only available in the
            <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowColumn(System.Int32,System.Int32,System.IntPtr,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowSegments(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32[],System.Int32,System.Int32,System.Boolean)">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">0-based row index</param>
      <param name="column">0-based column index</param>
      <param name="buffer">The scanline buffer</param>
      <param name="bufferOffset">0-based index into <paramref name="buffer" /></param>
      <param name="segments">Segments buffer</param>
      <param name="segmentsOffset">0-based index into <paramref name="segments" /></param>
      <param name="segmentCount">Number of segments in <paramref name="segments" /></param>
      <param name="preserveAlpha">A value indicating whether to preserve the alpha values in 32 and 64-bit images.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.SetRowSegments(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.Boolean)">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">0-based row index</param>
      <param name="column">0-based column index</param>
      <param name="buffer">The scanline buffer</param>
      <param name="segments">Segments buffer</param>
      <param name="segmentCount">Number of segments in <paramref name="segments" /></param>
      <param name="preserveAlpha">A value indicating whether to preserve the alpha values in 32 and 64-bit images.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Retrieves a row (or part of a row) of 1-bit compressed data from an image that has been loaded in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Optional work buffer. Allocating the work buffer speeds processing if you call this method
            more than once, because if you do not allocate a work buffer, the method allocates and frees a
            temporary buffer each time it is called. The size of this buffer should be the same as the
            <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass a null reference (Nothing in Visual Basic) to <paramref name="runBuffer" />
            if you do not want to use a work buffer.</param>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.
            Calculate the required size of this buffer as follows: bytes required = (<see cref="P:Leadtools.RasterImage.Width" /> + 3) * 2.</param>
      <param name="runBufferOffset">Index into <paramref name="runBuffer" /> where the get operation should start.</param>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image
            height.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column
            offset is 1 less than the image width.</param>
      <param name="width">The number of pixels to retrieve.</param>
      <returns>The number of pixels processed.</returns>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see>.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for
            faster loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>
        <para>This example demonstrates the low-level methods for accessing 1-bit compressed bitmap data. 
            It demonstrates the ability to get and set partial rows, and the ability to process partial rows 
            in buffer-to-buffer processing. The result of the method is an inverted rectangle in the middle of the image.</para>
        <code lang="VB">      Public Sub GetRowColumnCompressedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, CodecsLoadByteOrder.Bgr, 1, 1)

         Dim xOffset As Integer ' Column offset of the rectangle to process.
         Dim xSize As Integer ' Pixel width of the rectangle to process.
         Dim yOffset As Integer ' Row offset of the rectangle to process.
         Dim ySize As Integer ' Pixel height of the rectangle to process.
         Dim i, n As Integer ' Counters.

         Dim buffer As Byte() ' Buffer to hold the expanded row.
         Dim runBuffer As System.UInt16() ' Buffer to hold the compressed row.
         Dim workBuffer As Byte() ' Work buffer.

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Specify a rectangle in the middle right part of the displayed image.
         xOffset = image.Width \ 3
         xSize = image.Width - xOffset
         yOffset = image.Height \ 3
         ySize = image.Height \ 3
         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         If image.IsGlobalMemory Then
            image.Access()
         End If
         ' Allocate the buffers.
         buffer = New Byte((xSize + 7) \ 8 - 1) {}
         runBuffer = New System.UInt16((xSize + 3) * 2 - 1) {}
         workBuffer = New Byte(image.BytesPerLine - 1) {}
         ' Invert the colors of pixels in the left half of the rectangle.
         ' Notice that we get the whole rectangle, but process only half of it.
         i = yOffset
         Do While i &lt; (yOffset + ySize)
            image.GetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize)
            RasterRleCompressor.ExpandRow(runBuffer, buffer, 0, 0, xSize)
            n = 0
            Do While n &lt; (xSize / 16)
               buffer(n) = buffer(n) Xor Convert.ToByte(&amp;HFF)
               n += 1
            Loop
            RasterRleCompressor.CompressRow(runBuffer, buffer, 0, 0, xSize)
            image.SetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize)

            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcolcompresed.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowColumnCompressedExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, Leadtools.Codecs.CodecsLoadByteOrder.Bgr, 1, 1);

         int xOffset;   // Column offset of the rectangle to process.
         int xSize;     // Pixel width of the rectangle to process.
         int yOffset;   // Row offset of the rectangle to process.
         int ySize;     // Pixel height of the rectangle to process.
         int i, n;       // Counters.

         byte[] buffer;      // Buffer to hold the expanded row.
         ushort[] runBuffer; // Buffer to hold the compressed row.
         byte[] workBuffer;  // Work buffer.

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Specify a rectangle in the middle right part of the displayed image.
         xOffset = image.Width / 3;
         xSize = image.Width - xOffset;
         yOffset = image.Height / 3;
         ySize = image.Height / 3;
         // Adjust the YOffset if the view perspective is bottom left.
         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
         {
            yOffset = image.Height - yOffset - ySize;
         }

         if(image.IsGlobalMemory)
            image.Access();
         // Allocate the buffers.
         buffer = new Byte[(xSize + 7) / 8];
         runBuffer = new ushort[(xSize + 3) * 2];
         workBuffer = new Byte[image.BytesPerLine];
         // Invert the colors of pixels in the left half of the rectangle.
         // Notice that we get the whole rectangle, but process only half of it.
         for(i = yOffset; i &lt; (yOffset + ySize); i++)
         {
            image.GetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize);
            RasterRleCompressor.ExpandRow(runBuffer, buffer, 0, 0, xSize);
            for(n = 0; n &lt; (xSize / 16); n++)
               buffer[n] ^= 0xFF;
            RasterRleCompressor.CompressRow(runBuffer, buffer, 0, 0, xSize);
            image.SetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize);

         }
         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcolcompresed.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRowColumnCompressed(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>Retrieves (into an unmanaged memory buffer) a row (or part of a row) of 1-bit compressed data from an image that
            has been loaded in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Pointer to optional unmanaged memory work buffer. Allocating the work buffer speeds
            processing if you call this method more than once, because if you do not allocate a work buffer, the method
            allocates and frees a temporary buffer each time it is called. The size of this buffer should be the same as the
            <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass IntPtr.Zero for <paramref name="workBuffer" /> if you do not want to use
            the work buffer</param>
      <param name="runBuffer">Pointer to the output unmanaged memory buffer, which will be filled with 1-bit compressed image data.
            Calculate the required size of this buffer as follows: bytes required = (<see cref="P:Leadtools.RasterImage.Width" /> + 3) * 2.</param>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image
            height.</param>
      <param name="column">The column offset within the row to retrieve. The first column offset is 0, and the last column
            offset is 1 less than the image width.</param>
      <param name="width">The number of pixels to retrieve.</param>
      <returns>The number of pixels processed.</returns>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see>.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for
            faster loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>
        <para>This example demonstrates the low-level methods for accessing 1-bit compressed bitmap data. 
            It demonstrates the ability to get and set partial rows, and the ability to process partial rows in 
            buffer-to-buffer processing. The result of the method is an inverted rectangle in the middle of the image.</para>
        <code lang="VB">      Public Sub GetRowColumnCompressedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, CodecsLoadByteOrder.Bgr, 1, 1)

         Dim xOffset As Integer ' Column offset of the rectangle to process.
         Dim xSize As Integer ' Pixel width of the rectangle to process.
         Dim yOffset As Integer ' Row offset of the rectangle to process.
         Dim ySize As Integer ' Pixel height of the rectangle to process.
         Dim i, n As Integer ' Counters.

         Dim buffer As Byte() ' Buffer to hold the expanded row.
         Dim runBuffer As System.UInt16() ' Buffer to hold the compressed row.
         Dim workBuffer As Byte() ' Work buffer.

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Specify a rectangle in the middle right part of the displayed image.
         xOffset = image.Width \ 3
         xSize = image.Width - xOffset
         yOffset = image.Height \ 3
         ySize = image.Height \ 3
         ' Adjust the YOffset if the view perspective is bottom left.
         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            yOffset = image.Height - yOffset - ySize
         End If

         If image.IsGlobalMemory Then
            image.Access()
         End If
         ' Allocate the buffers.
         buffer = New Byte((xSize + 7) \ 8 - 1) {}
         runBuffer = New System.UInt16((xSize + 3) * 2 - 1) {}
         workBuffer = New Byte(image.BytesPerLine - 1) {}
         ' Invert the colors of pixels in the left half of the rectangle.
         ' Notice that we get the whole rectangle, but process only half of it.
         i = yOffset
         Do While i &lt; (yOffset + ySize)
            image.GetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize)
            RasterRleCompressor.ExpandRow(runBuffer, buffer, 0, 0, xSize)
            n = 0
            Do While n &lt; (xSize / 16)
               buffer(n) = buffer(n) Xor Convert.ToByte(&amp;HFF)
               n += 1
            Loop
            RasterRleCompressor.CompressRow(runBuffer, buffer, 0, 0, xSize)
            image.SetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize)

            i += 1
         Loop
         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcolcompresed.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowColumnCompressedExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, Leadtools.Codecs.CodecsLoadByteOrder.Bgr, 1, 1);

         int xOffset;   // Column offset of the rectangle to process.
         int xSize;     // Pixel width of the rectangle to process.
         int yOffset;   // Row offset of the rectangle to process.
         int ySize;     // Pixel height of the rectangle to process.
         int i, n;       // Counters.

         byte[] buffer;      // Buffer to hold the expanded row.
         ushort[] runBuffer; // Buffer to hold the compressed row.
         byte[] workBuffer;  // Work buffer.

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Specify a rectangle in the middle right part of the displayed image.
         xOffset = image.Width / 3;
         xSize = image.Width - xOffset;
         yOffset = image.Height / 3;
         ySize = image.Height / 3;
         // Adjust the YOffset if the view perspective is bottom left.
         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
         {
            yOffset = image.Height - yOffset - ySize;
         }

         if(image.IsGlobalMemory)
            image.Access();
         // Allocate the buffers.
         buffer = new Byte[(xSize + 7) / 8];
         runBuffer = new ushort[(xSize + 3) * 2];
         workBuffer = new Byte[image.BytesPerLine];
         // Invert the colors of pixels in the left half of the rectangle.
         // Notice that we get the whole rectangle, but process only half of it.
         for(i = yOffset; i &lt; (yOffset + ySize); i++)
         {
            image.GetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize);
            RasterRleCompressor.ExpandRow(runBuffer, buffer, 0, 0, xSize);
            for(n = 0; n &lt; (xSize / 16); n++)
               buffer[n] ^= 0xFF;
            RasterRleCompressor.CompressRow(runBuffer, buffer, 0, 0, xSize);
            image.SetRowColumnCompressed(workBuffer, runBuffer, 0, i, xOffset, xSize);

         }
         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcolcompresed.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)">
      <summary>Retrieves one or more rows of 1-bit compressed data from an image that has been loaded in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Optional work buffer. Allocating the work buffer speeds processing if you call this method
            more than once, because if you do not allocate a work buffer, the method allocates and frees a
            temporary buffer each time it is called. bytes required = <paramref name="lines" /> * ((<see cref="P:Leadtools.RasterImage.Width" /> + 3) * 2).
            Pass a null reference (Nothing in Visual Basic) to <paramref name="runBuffer" /> if you do not want to use a work buffer.</param>
      <param name="runBuffer">The output buffer, which will be filled with 1-bit compressed image data.</param>
      <param name="runBufferOffset">Offset into <paramref name="runBuffer" /> where the copy operation should start.</param>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="lines">Number of rows to retrieve.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for faster
            loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>
        <para>This example demonstrates the low-level methods for accessing 1-bit compressed image data. 
            It demonstrates the ability to get and put rows, and the ability to process rows in 
            buffer-to-buffer processing. The result of the function is an the first 50 lines are inverted.</para>
        <code lang="VB">      Public Sub GetRowCompressedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, CodecsLoadByteOrder.Bgr, 1, 1)

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Adjust the YOffset if the view perspective is bottom left.
         Dim nRow As Integer = 500 ' first row to get.
         Dim nYSize As Integer = 500 ' number of rows to get.

         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            nRow = image.Height - nRow - nYSize
         End If

         ' Allocate the buffers.
         Dim pBuffer As Byte() = New Byte(Convert.ToInt32((((image.Width + 31) And Not (31)) / 8)) * nYSize - 1) {} ' Buffer to hold the expanded row.
         Dim pRunBuffer As System.UInt16() = New System.UInt16(((image.Width + 3) * 2) * nYSize - 1) {} ' Buffer to hold the compressed row.

         If image.IsGlobalMemory Then
            image.Access()
         End If
         ' Get the top nRow lines.
         image.GetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)
         ' Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)
         ' Invert the data.

         Dim n As Integer = 0
         Do While n &lt; (image.BytesPerLine * nYSize)
            pBuffer(n) = pBuffer(n) Xor Convert.ToByte(&amp;HFF)
            n += 1
         Loop


         ' Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)

         ' Put the inverted, compressed data back into the image.
         image.SetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)

         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowCompressedExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, Leadtools.Codecs.CodecsLoadByteOrder.Bgr, 1, 1);

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Adjust the YOffset if the view perspective is bottom left.
         int nRow = 500; // first row to get.
         int nYSize = 500; // number of rows to get.

         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
            nRow = image.Height - nRow - nYSize;

         // Allocate the buffers.
         byte[] pBuffer = new byte[Convert.ToInt32((((image.Width + 31) &amp; ~(31)) / 8)) * nYSize]; // Buffer to hold the expanded row.
         ushort[] pRunBuffer = new ushort[((image.Width + 3) * 2) * nYSize]; // Buffer to hold the compressed row.

         if(image.IsGlobalMemory)
            image.Access();
         // Get the top nRow lines.
         image.GetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);
         // Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);
         // Invert the data.

         for(int n = 0; n &lt; (image.BytesPerLine * nYSize); n++)
            pBuffer[n] ^= 0xff;


         // Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);

         // Put the inverted, compressed data back into the image.
         image.SetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);

         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image,Path.Combine(LEAD_VARS.ImagesDir,"IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetRowCompressed(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
      <summary>Retrieves (into an unmanaged memory buffer) one or more rows of 1-bit compressed data from an image that has been loaded
            in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Pointer to optional work unmanaged memory buffer. Allocating the work buffer speeds processing
            if you call this method more than once, because if you do not allocate a work buffer, the method allocates and frees a
            temporary buffer each time it is called. bytes required = <paramref name="lines" /> * ((<see cref="P:Leadtools.RasterImage.Width" /> + 3) * 2).
            Pass IntPtr.Zero for <paramref name="workBuffer" /> if you do not want to use the work buffer</param>
      <param name="runBuffer">Pointer to the output unmanaged memory buffer, which will be filled with 1-bit compressed image
            data.</param>
      <param name="row">The number of the row to retrieve. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="lines">Number of rows to retrieve.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for faster
            loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>
        <para>This example demonstrates the low-level methods for accessing 1-bit compressed image data. 
            It demonstrates the ability to get and put rows, and the ability to process rows in 
            buffer-to-buffer processing. The result of the function is an the first 50 lines are inverted.</para>
        <code lang="VB">      Public Sub GetRowCompressedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, CodecsLoadByteOrder.Bgr, 1, 1)

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Adjust the YOffset if the view perspective is bottom left.
         Dim nRow As Integer = 500 ' first row to get.
         Dim nYSize As Integer = 500 ' number of rows to get.

         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            nRow = image.Height - nRow - nYSize
         End If

         ' Allocate the buffers.
         Dim pBuffer As Byte() = New Byte(Convert.ToInt32((((image.Width + 31) And Not (31)) / 8)) * nYSize - 1) {} ' Buffer to hold the expanded row.
         Dim pRunBuffer As System.UInt16() = New System.UInt16(((image.Width + 3) * 2) * nYSize - 1) {} ' Buffer to hold the compressed row.

         If image.IsGlobalMemory Then
            image.Access()
         End If
         ' Get the top nRow lines.
         image.GetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)
         ' Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)
         ' Invert the data.

         Dim n As Integer = 0
         Do While n &lt; (image.BytesPerLine * nYSize)
            pBuffer(n) = pBuffer(n) Xor Convert.ToByte(&amp;HFF)
            n += 1
         Loop


         ' Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)

         ' Put the inverted, compressed data back into the image.
         image.SetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)

         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowCompressedExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, Leadtools.Codecs.CodecsLoadByteOrder.Bgr, 1, 1);

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Adjust the YOffset if the view perspective is bottom left.
         int nRow = 500; // first row to get.
         int nYSize = 500; // number of rows to get.

         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
            nRow = image.Height - nRow - nYSize;

         // Allocate the buffers.
         byte[] pBuffer = new byte[Convert.ToInt32((((image.Width + 31) &amp; ~(31)) / 8)) * nYSize]; // Buffer to hold the expanded row.
         ushort[] pRunBuffer = new ushort[((image.Width + 3) * 2) * nYSize]; // Buffer to hold the compressed row.

         if(image.IsGlobalMemory)
            image.Access();
         // Get the top nRow lines.
         image.GetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);
         // Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);
         // Invert the data.

         for(int n = 0; n &lt; (image.BytesPerLine * nYSize); n++)
            pBuffer[n] ^= 0xff;


         // Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);

         // Put the inverted, compressed data back into the image.
         image.SetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);

         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image,Path.Combine(LEAD_VARS.ImagesDir,"IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Puts a row (or part of a row) of 1-bit compressed data from a buffer into an image that is maintained in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Optional work buffer. Allocating the work buffer speeds processing if you
            call this method more than once, because if you do not allocate a work buffer, the method 
            allocates and frees a temporary buffer each time it is called. The size of this buffer should 
            be the same as the image's <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass a null reference (Nothing in Visual Basic)
            to <paramref name="runBuffer" /> if you do not want to use a work buffer.</param>
      <param name="runBuffer">Input buffer, which contains 1-bit compressed image data.</param>
      <param name="runBufferOffset">Offset into <paramref name="runBuffer" /> where the set operation should start.</param>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to update. The first column offset is 0, and the last column
            offset is 1 less than the image width.</param>
      <param name="width">The number of pixels to retrieve.</param>
      <returns>The number of pixels processed.</returns>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for faster
            loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowColumnCompressed(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32)">
      <summary>Puts a row (or part of a row) of 1-bit compressed data from an unmanaged memory buffer to an image that is maintained
            in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Pointer to optional work unmanaged memory buffer. Allocating the work buffer speeds processing
            if you call this method more than once, because if you do not allocate a work buffer, the method 
            allocates and frees a temporary buffer each time it is called. The size of this buffer should 
            be the same as the image's <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass IntPtr.Zero for <paramref name="workBuffer" /> if you
            do not want to use the work buffer</param>
      <param name="runBuffer">Pointer to input unmanaged memory buffer, which contains 1-bit compressed image data.</param>
      <param name="row">The number of the row to update. The first row is 0, and the last row is 1 less than the image height.</param>
      <param name="column">The column offset within the row to update. The first column offset is 0, and the last column
            offset is 1 less than the image width.</param>
      <param name="width">The number of pixels to retrieve.</param>
      <returns>The number of pixels processed.</returns>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats for faster
            loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowColumnCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)">
      <summary>Puts one or more rows of 1-bit compressed data from a buffer into an image that is maintained in its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Optional work buffer. Allocating the work buffer speeds processing if you 
            call this method more than once, because if you do not allocate a work buffer, the method 
            allocates and frees a temporary buffer each time it is called. The size of this buffer should 
            be the same as the image's <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass a null reference (Nothing in Visual Basic)
            to <paramref name="runBuffer" /> if you do not want to use a work buffer.</param>
      <param name="runBuffer">Input buffer, which contains 1-bit compressed image data.</param>
      <param name="runBufferOffset">Offset into <paramref name="runBuffer" /> where the set operation shoule start.</param>
      <param name="row">Number of the first row to update.</param>
      <param name="lines">Number of rows to update.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats 
            for faster loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.Byte[],System.UInt16[],System.Int32,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.SetRowCompressed(System.IntPtr,System.IntPtr,System.Int32,System.Int32)">
      <summary>Puts one or more rows of 1-bit compressed data from an unmanaged memory buffer to an image that is maintained in
            its compressed format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="workBuffer">Pointer to unmanaged memory optional work buffer. Allocating the work buffer speeds processing
            if you call this method more than once, because if you do not allocate a work buffer, the method allocates and frees a
            temporary buffer each time it is called. The size of this buffer should be the same as the image's
            <see cref="P:Leadtools.RasterImage.BytesPerLine" /> property. Pass IntPtr.Zero to <paramref name="runBuffer" /> if you do not want to use a
            work buffer.</param>
      <param name="runBuffer">Input buffer, which contains 1-bit compressed image data.</param>
      <param name="row">Number of the first row to update.</param>
      <param name="lines">Number of rows to update.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method is useful for working with 1-bit images that are loaded in their compressed formats 
            for faster loading and display.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRowCompressed(System.IntPtr,System.IntPtr,System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.ChangeCompression(Leadtools.RasterCompression)">
      <summary>Compresses or decompresses this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="compression">Indicates the type of compression to use on the image.</param>
      <remarks>
        <para>This method is available only in <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> toolkits.</para>
        <para>For more information, refer to <see cref="T:FO.Topics.SpeedingUp1BitDocuments">Speeding Up 1-Bit Documents</see>.</para>
        <para>
            This method does not support signed images.
            </para>
      </remarks>
      <example>
        <para>This example toggles image compression.</para>
        <code lang="VB">      Public Sub ChangeCompressionTest()
         ' This method toggles image compression.
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' Load the image compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"))
         Dim str As String
         If image.IsCompressed Then
            str = "BEFORE - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("Compressed")
         Else
            str = "BEFORE - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("UnCompressed")
         End If
         Console.WriteLine(str, "ChangeCompression")
         If (image.IsCompressed = True) Then
            image.ChangeCompression(RasterCompression.None)
         Else
            image.ChangeCompression(RasterCompression.Rle)
         End If
         If image.IsCompressed Then
            str = "AFTER - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("Compressed")
         Else
            str = "AFTER - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("UnCompressed")
         End If
         Console.WriteLine(str, "ChangeCompression")

         ' Load the image super-compressed
         codecs.Options.Load.SuperCompressed = True
         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))
         If image.IsSuperCompressed Then
            str = "BEFORE - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("Compressed")
         Else
            str = "BEFORE - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("UnCompressed")
         End If
         Console.WriteLine(str, "ChangeCompression")
         If (image.IsSuperCompressed = True) Then
            image.ChangeCompression(RasterCompression.None)
         Else
            image.ChangeCompression(RasterCompression.Super)
         End If
         If image.IsSuperCompressed Then
            str = "AFTER - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("Compressed")
         Else
            str = "AFTER - ImageSize: " &amp; image.DataSize &amp; " bytes, Type: " &amp; ("UnCompressed")
         End If
         Console.WriteLine(str, "ChangeCompression")

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangeCompressionTest()
      {
         // This method toggles image compression.
         RasterCodecs codecs = new RasterCodecs();

         // Load the image compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"));
         String str = "BEFORE - ImageSize: " + image.DataSize + " bytes, Type: " + (image.IsCompressed ? "Compressed" : "UnCompressed");
         Console.WriteLine(str, "ChangeCompression");
         image.ChangeCompression((image.IsCompressed == true) ? RasterCompression.None : RasterCompression.Rle);
         str = "AFTER - ImageSize: " + image.DataSize + " bytes, Type: " + (image.IsCompressed ? "Compressed" : "UnCompressed");
         Console.WriteLine(str, "ChangeCompression");

         // Load the image super-compressed
         codecs.Options.Load.SuperCompressed = true;
         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));
         str = "BEFORE - ImageSize: " + image.DataSize + " bytes, Type: " + (image.IsSuperCompressed ? "Compressed" : "UnCompressed");
         Console.WriteLine(str, "ChangeCompression");
         image.ChangeCompression((image.IsSuperCompressed == true) ? RasterCompression.None : RasterCompression.Super);
         str = "AFTER - ImageSize: " + image.DataSize + " bytes, Type: " + (image.IsSuperCompressed ? "Compressed" : "UnCompressed");
         Console.WriteLine(str, "ChangeCompression");

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CreateAlphaImage">
      <summary>Creates a grayscale image from this <see cref="T:Leadtools.RasterImage" /> alpha channel data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The newly create image, which contains the source image alpha channel data.</returns>
      <remarks>
        <para>Only 16-, 32-, and 64-bit images can have an alpha channel. If the source image has another color resolution,
            the result is an image filled with zeros.</para>
        <para>Typically, the alpha channel contains a mask that is used for transparency.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingTransparency">Implementing Transparency</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CreateAlphaImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the image, at 16 bit per pixel.
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"), 16, CodecsLoadByteOrder.Bgr, 1, 1)

         ' Specify a rectangle to define the region.
         Dim EllipseRectangle As LeadRect = New LeadRect(image.Width \ 8, image.Height \ 8, image.Width \ 2, image.Height \ 2)

         ' Create an elliptical region in the AlphaImage.
         image.AddEllipseToRegion(Nothing, EllipseRectangle, RasterRegionCombineMode.Set)

         ' Create a mask image from the region.
         Dim alphaImage As RasterImage = image.CreateMaskFromRegion()

         ' Update the alpha channel in the main image.
         image.SetAlphaImage(alphaImage)

         ' Save the image at 16 bits per pixel to keep the alpha channel.
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "TestAlpha.TIF"), RasterImageFormat.Tif, 24, 1, 1, 1, CodecsSavePageMode.Overwrite)

         ' Load the bitmap that we just saved and get its alpha channel.
         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "TestAlpha.TIF"), 16, CodecsLoadByteOrder.Bgr, 1, 1)

         alphaImage = image.CreateAlphaImage()

         ' Use the AlphaBitmap as a mask to set the region in the MainBitmap.
         image.AddMaskToRegion(Nothing, alphaImage, RasterRegionCombineMode.Set)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateAlphaImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the image, at 16 bit per pixel.
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"), 16, CodecsLoadByteOrder.Bgr, 1, 1);

         // Specify a rectangle to define the region.
         LeadRect ellipseRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width / 2, image.Height / 2);

         // Create an elliptical region in the AlphaImage.
         image.AddEllipseToRegion(null, ellipseRectangle, RasterRegionCombineMode.Set);

         // Create a mask image from the region.
         RasterImage alphaImage = image.CreateMaskFromRegion();

         // Update the alpha channel in the main image.
         image.SetAlphaImage(alphaImage);

         // Save the image at 16 bits per pixel to keep the alpha channel.
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "TestAlpha.TIF"), RasterImageFormat.Tif, 24, 1, 1, 1, CodecsSavePageMode.Overwrite);

         // Load the bitmap that we just saved and get its alpha channel.
         image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"TestAlpha.TIF"), 16, CodecsLoadByteOrder.Bgr, 1, 1);

         alphaImage = image.CreateAlphaImage();

         // Use the AlphaBitmap as a mask to set the region in the MainBitmap.
         image.AddMaskToRegion(null, alphaImage, RasterRegionCombineMode.Set);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CreateAlphaImageExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Specify a rectangle to define the region.
         LeadRect EllipseRectangle = new LeadRect(image.Width / 8, image.Height / 8, image.Width / 2, image.Height / 2);

         // Create a region in the AlphaImage.
         image.AddRectangleToRegion(null, EllipseRectangle, RasterRegionCombineMode.Set);

         // Create a mask image from the region.
         RasterImage alphaImage = image.CreateMaskFromRegion();

         // Update the alpha channel in the main image.
         image.SetAlphaImage(alphaImage);

         // Save the image at 16 bits per pixel to keep the alpha channel.
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24, 1, 1, 1, CodecsSavePageMode.Overwrite);

         // Load the bitmap that we just saved and get its alpha channel.
         image = codecs.Load(destStream, 16, CodecsLoadByteOrder.Bgr, 1, 1);

         alphaImage = image.CreateAlphaImage();

         // Use the AlphaBitmap as a mask to set the region in the MainBitmap.
         image.AddMaskToRegion(null, alphaImage, RasterRegionCombineMode.Set);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CreateAlphaImageExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Specify a rectangle to define the region.
         Dim EllipseRectangle As LeadRect = New LeadRect(image.Width / 8, image.Height / 8, image.Width / 2, image.Height / 2)

         ' Create a region in the AlphaImage.
         image.AddRectangleToRegion(Nothing, EllipseRectangle, RasterRegionCombineMode.Set)

         ' Create a mask image from the region.
         Dim alphaImage As RasterImage = image.CreateMaskFromRegion()

         ' Update the alpha channel in the main image.
         image.SetAlphaImage(alphaImage)

         ' Save the image at 16 bits per pixel to keep the alpha channel.
         codecs.Save(image, destStream, RasterImageFormat.Tif, 24, 1, 1, 1, CodecsSavePageMode.Overwrite)

         ' Load the bitmap that we just saved and get its alpha channel.
         image = codecs.Load(destStream, 16, CodecsLoadByteOrder.Bgr, 1, 1)

         alphaImage = image.CreateAlphaImage()

         ' Use the AlphaBitmap as a mask to set the region in the MainBitmap.
         image.AddMaskToRegion(Nothing, alphaImage, RasterRegionCombineMode.Set)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetAlphaImage(Leadtools.RasterImage)">
      <summary>Replaces existing alpha channel data or creates new alpha channel data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="alphaImage">Source <see cref="T:Leadtools.RasterImage" /> which references the image that is used to create or
            replace the alpha channel data.</param>
      <remarks>
        <para>Typically, an alpha channel contains a mask that is used for transparency. This method, together with
            <see cref="M:Leadtools.RasterImage.CreateAlphaImage" /> and the LEADTOOLS region processing methods, lets you use the alpha channel to
            implement transparency.</para>
        <para>Only 16-, 32- and 64-bit images can have an alpha channel. If the image is of any other color resolution,
            this method converts the image to 32-bit before it replaces the alpha channel. (If you want 16-bit, you should change
            it using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />, if necessary, before calling this method.)</para>
        <para>For 64-bit images, the <paramref name="alphaImage" /> parameter is converted to 16 bit grayscale before replacing
            the alpha channel. If the image is 48-bit, it will be converted to 64-bit and then have the alpha information added to it.</para>
        <para>The <paramref name="alphaImage" /> parameter does not have to be grayscale. This method converts the data from the 
            <paramref name="alphaImage" /> parameter to the necessary grayscale or 1-bit format as it replaces the alpha channel 
            in the image. (The <paramref name="alphaImage" />, itself, remains unchanged.)</para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingTransparency">Implementing Transparency</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.CreateAlphaImage" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.TranslateColor(Leadtools.RasterImage,System.Int32)">
      <summary>Translates the specified color in the image, and returns the nearest matching color in the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="destImage">Destination <see cref="T:Leadtools.RasterImage" /> object.</param>
      <param name="rgb">Value that specifies the color in the image to be translated.</param>
      <returns>The color value or the palette index of the nearest matching color in the destination image. If the destination
            image is 8 bits per pixel or less, this is always the palette index. Otherwise, it is the color value.</returns>
      <remarks>
        <para>When creating a target image for animation, you can use this method to ensure that the correct color is specified as the background color.</para>
        <para>The reverse of this method (to get a true RGB color value from a palette index color), use <see cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" />.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub TranslateColorExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' load an 8 bpp image and a 24 bpp image
         Dim myImage1 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ulay1.bmp"))
         Dim myImage2 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))

         ' translate the top-left pixel of the 24 bpp image to a palette index in the first
         Dim win32Color As Integer = ColorTranslator.ToWin32(RasterColorConverter.ToColor(myImage2.GetPixelColor(0, 0)))
         Dim index As Integer = myImage2.TranslateColor(myImage1, win32Color) And &amp;HEFFFFFF
         Console.WriteLine(String.Format("Palette index: {0}", index))

         myImage2.Dispose()
         myImage1.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void TranslateColorExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // load an 8 bpp image and a 24 bpp image
         RasterImage myImage1 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ulay1.bmp"));
         RasterImage myImage2 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"));

         // translate the top-left pixel of the 24 bpp image to a palette index in the first
         int win32Color = ColorTranslator.ToWin32(RasterColorConverter.ToColor(myImage2.GetPixelColor(0, 0)));
         int index = myImage2.TranslateColor(myImage1, win32Color) &amp; 0x0EFFFFFF;
         Console.WriteLine(string.Format("Palette index: {0}", index));

         myImage2.Dispose();
         myImage1.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
      <seealso cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" />
    </member>
    <member name="M:Leadtools.RasterImage.TranslateColor(Leadtools.RasterImage,Leadtools.RasterColor)">
      <summary>Translates the specified color in the image, and returns the nearest matching color in the destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="destImage">Destination <see cref="T:Leadtools.RasterImage" /> object.</param>
      <param name="color">Value that specifies the color in the image to be translated.</param>
      <returns>The color value or the palette index of the nearest matching color in the destination image. If the destination
            image is 8 bits per pixel or less, this is always the palette index (The value of the <see cref="P:Leadtools.RasterColor.IsPaletteIndex">RasterColor.IsPaletteIndex</see>
            is <strong>true</strong>). Otherwise, it is the color value.</returns>
      <remarks>
        <para>When creating a target image for animation, you can use this method to ensure that the correct color is specified as the background color.</para>
        <para>The reverse of this method (to get a true RGB color value from a palette index color), use <see cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.TransparentColor" /></example>
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
      <seealso cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" />
    </member>
    <member name="M:Leadtools.RasterImage.ChangeHeight(System.Int32)">
      <summary>Increases or decreases the allocated height of an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="height">New height in pixels.</param>
      <remarks>
            You can use this method in a callback routine to adjust the allocation when loading an image of unknown height.
            </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub ChangeHeightExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         Console.WriteLine(String.Format("Height: {0}", image.Height))
         image.ChangeHeight(image.Height \ 2)
         Console.WriteLine(String.Format("Height: {0}", image.Height))

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangeHeightExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         Console.WriteLine(string.Format("Height: {0}", image.Height));
         image.ChangeHeight(image.Height / 2);
         Console.WriteLine(string.Format("Height: {0}", image.Height));

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ChangeHeightExample(RasterImage image)
      {
         Debug.WriteLine(string.Format("Height: {0}", image.Height));
         int newHeight = image.Height / 2;
         image.ChangeHeight(newHeight);
         Debug.WriteLine(string.Format("Height: {0}", image.Height));
         Debug.Assert(image.Height == newHeight);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeHeightExample(ByVal image As RasterImage)
         Debug.WriteLine(String.Format("Height: {0}", image.Height))
         Dim newHeight As Integer = image.Height / 2
         image.ChangeHeight(newHeight)
         Debug.WriteLine(String.Format("Height: {0}", image.Height))
         Debug.Assert(image.Height = newHeight)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CopyPaletteTo(Leadtools.RasterImage)">
      <summary>Copies the palette of this <see cref="T:Leadtools.RasterImage" /> into a destination image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="destImage">The destination image into which the palette will be copied. You must have a valid image loaded
            for this method to work.</param>
      <remarks>
        <para>Only the palette the image is copied.</para>
        <para>
          <paramref name="destImage" /> must be allocated and must be 8-bit or less before this method is called.
            The source image (this <see cref="T:Leadtools.RasterImage" /> object and <paramref name="destImage" /> must have the same
            <see cref="P:Leadtools.RasterImage.BitsPerPixel" />.</para>
        <para>
          <paramref name="destImage" /> existing palette will be destroyed before the copy is made.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CopyDataCommand" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetPixelColor(System.Int32,System.Int32)">
      <summary>Returns the color of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <returns>This method returns a <see cref="T:Leadtools.RasterColor" /> value which may represent an index into a image palette, a
            grayscale value (Medical Imaging only), or red, green, and blue color values.</returns>
      <remarks>
        <para>The standard Windows values for <see cref="T:Leadtools.RasterColor" /> represent either red, green, and blue color values, or an
            index into the image palette. A <see cref="T:Leadtools.RasterColor" /> value with the RGB value of 0x00BBGGRR represents the blue, green,
            and red color values for the specified pixel, where 0xBB is the blue value, 0xGG is the green value and 0xRR is the red
            value. If 0x01000000 is set in the RGB value of <see cref="T:Leadtools.RasterColor" /> (0x010000ZZ), the lower 8 bits (0xZZ) represent
            an index into the image palette which holds the color value.</para>
        <para>You can use the <see cref="M:Leadtools.RasterImage.SetPixelColor(System.Int32,System.Int32,Leadtools.RasterColor)" /> method to assign the returned value to another pixel.</para>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view perspective
            of the image.</para>
        <para>If you specify a pixel that is outside the image or outside the region (if the image has one), this method throws
            an exception.</para>
        <para>This method does not support alpha values for 32 and 64-bit color images and the alpha value of the returned color should not be used.
            Instead, use the <see cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" /> and <see cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" /> methods.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" />
      <example>
        <para>This example uses GetPixelColor and <see cref="M:Leadtools.RasterImage.SetPixelColor(System.Int32,System.Int32,Leadtools.RasterColor)" /> to invert the colors of the pixels in a line 
            in the upper left part of the displayed image.</para>
        <code lang="VB">      Public Sub GetPixelColorExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' Specify a line of pixels.
         Dim Offset As LeadPoint = New LeadPoint(image.Width \ 8, image.Height \ 8)
         Dim XSize As Integer = image.Width \ 3

         ' Invert the colors of pixels in the line.
         Dim i As Integer = 0
         Do While i &lt; XSize
            Dim OldOffset As LeadPoint = New LeadPoint(Offset.X, Offset.Y)
            ' Adjust the XOffset and YOffset  in case the view perspective is not TopLeft.
            Offset = image.PointToImage(RasterViewPerspective.TopLeft, Offset)
            Dim PixelColor As RasterColor = image.GetPixelColor(Offset.Y, Offset.X)
            PixelColor.R = CByte(255 - PixelColor.R)
            PixelColor.G = CByte(255 - PixelColor.G)
            PixelColor.B = CByte(255 - PixelColor.B)
            image.SetPixelColor(Offset.Y, Offset.X, PixelColor)

            Offset = OldOffset ' Restore Offset
            Offset.X = Offset.X + 1
            i += 1
         Loop

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelColor.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetPixelColorExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // Specify a line of pixels.
         LeadPoint offset = new LeadPoint(image.Width / 8, image.Height / 8);
         int XSize = image.Width / 3;

         // Invert the colors of pixels in the line.
         for(int i = 0; i &lt; XSize; i++)
         {
            LeadPoint oldOffset = new LeadPoint(offset.X, offset.Y);
            // Adjust the XOffset and YOffset  in case the view perspective is not TopLeft.
            offset = image.PointToImage(Leadtools.RasterViewPerspective.TopLeft, offset);
            RasterColor pixelColor = image.GetPixelColor(offset.Y, offset.X);
            pixelColor.R = (byte)(255 - pixelColor.R);
            pixelColor.G = (byte)(255 - pixelColor.G);
            pixelColor.B = (byte)(255 - pixelColor.B);
            image.SetPixelColor(offset.Y, offset.X, pixelColor);

            offset = oldOffset; // Restore Offset
            offset.X = offset.X + 1;
         }

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelColor.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetPixelColorExample(RasterImage image, Stream destStream)
      {
         // Specify a line of pixels.
         LeadPoint Offset = new LeadPoint(image.Width / 8, image.Height / 8);
         int XSize = image.Width / 3;
         // Invert the colors of pixels in the line.
         for (int i = 0; i &lt; XSize; i++)
         {
            LeadPoint OldOffset = new LeadPoint(Offset.X, Offset.Y);
            // Adjust the XOffset and YOffset  in case the view perspective is not TopLeft.
            Offset = image.PointToImage(Leadtools.RasterViewPerspective.TopLeft, Offset);
            RasterColor PixelColor = image.GetPixelColor(Offset.Y, Offset.X);
            PixelColor.R = (byte)(255 - PixelColor.R);
            PixelColor.G = (byte)(255 - PixelColor.G);
            PixelColor.B = (byte)(255 - PixelColor.B);
            image.SetPixelColor(Offset.Y, Offset.X, PixelColor);

            Offset = OldOffset; // Restore Offset
            Offset.X = Offset.X + 1;
         }

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetPixelColorExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Specify a line of pixels.
         Dim Offset As LeadPoint = New LeadPoint(image.Width / 8, image.Height / 8)
         Dim XSize As Integer = image.Width / 3
         ' Invert the colors of pixels in the line.
         Dim i As Integer = 0
         Do While i &lt; XSize
            Dim OldOffset As LeadPoint = New LeadPoint(Offset.X, Offset.Y)
            ' Adjust the XOffset and YOffset  in case the view perspective is not TopLeft.
            Offset = image.PointToImage(RasterViewPerspective.TopLeft, Offset)
            Dim PixelColor As RasterColor = image.GetPixelColor(Offset.Y, Offset.X)
            PixelColor.R = CByte(255 - PixelColor.R)
            PixelColor.G = CByte(255 - PixelColor.G)
            PixelColor.B = CByte(255 - PixelColor.B)
            image.SetPixelColor(Offset.Y, Offset.X, PixelColor)

            Offset = OldOffset ' Restore Offset
            Offset.X = Offset.X + 1
            i += 1
         Loop

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetPixelColor(System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>Changes the color value of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <param name="color">The color to assign to the pixel.</param>
      <remarks>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view
            perspective of the image. If you specify a pixel that is outside the image or outside the region
            (if the image has one), this method throws an exception.</para>
        <para>Use the <see cref="M:Leadtools.RasterImage.GetPixelColor(System.Int32,System.Int32)" /> method to get the color value of a certain pixel.</para>
        <para>This method does not support alpha values for 32 and 64-bit color images and the alpha value of <paramref name="color" /> is not be used.
            Instead, use the <see cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" /> and <see cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" /> methods.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetPixelColor(System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)">
      <summary>Returns the color of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <returns>This method returns a <see cref="T:Leadtools.RasterColor" /> value which may represent an index into a image palette, a
            grayscale value (Medical Imaging only), or red, green, and blue color values. Alpha value for 32 and 64-bit images are also returned.</returns>
      <remarks>
        <para>The standard Windows values for <see cref="T:Leadtools.RasterColor" /> represent either red, green, and blue color values, or an
            index into the image palette. A <see cref="T:Leadtools.RasterColor" /> value with the RGB value of 0x00BBGGRR represents the blue, green,
            and red color values for the specified pixel, where 0xBB is the blue value, 0xGG is the green value and 0xRR is the red
            value. If 0x01000000 is set in the RGB value of <see cref="T:Leadtools.RasterColor" /> (0x010000ZZ), the lower 8 bits (0xZZ) represent
            an index into the image palette which holds the color value.</para>
        <para>For 32 and 64-bit images, an alpha value is also available in the image. This method will return the alpha value in the returned
            <see cref="T:Leadtools.RasterColor" /> object <see cref="P:Leadtools.RasterColor.A" /> property. For 32-bit images, this will be the exact byte value of the alpha
            for the pixel. For 64-bit images, the alpha is 16-bit and since <see cref="P:Leadtools.RasterColor.A">RasterColor.A</see> is an 8-bit value, the returned
            alpha is normalized from its 16-bit value to 8-bit. For other bits/pixel values, the value returned from this method is identical to the value
            returned from <see cref="M:Leadtools.RasterImage.GetPixelColor(System.Int32,System.Int32)" />.</para>
        <para>You can use the <see cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" /> method to assign the returned value to another pixel.</para>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view perspective
            of the image.</para>
        <para>If you specify a pixel that is outside the image or outside the region (if the image has one), this method throws
            an exception.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" />
      <example>
        <para>
          <para>This example uses will load an image as 32-bit, use <see cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" /> and <see cref="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)" /> to set the alpha value for each
            pixel to 128 (half transparent) and save the result as PNG.</para>
        </para>
        <code lang="VB">      Public Sub GetSetPixelExample()
         Dim sourceFile As String = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp")
         Dim destFile As String = Path.Combine(LEAD_VARS.ImagesDir, "GetSetPixelExample.png")

         Dim codecs As New RasterCodecs()

         ' Load the source image as 32-bit (with alpha)
         Dim image As RasterImage = codecs.Load(sourceFile, 32, CodecsLoadByteOrder.Bgr, 1, 1)

         ' Loop through each pixel and set its alpha value to 128 (half transparent)
         For row As Integer = 0 To image.Height - 1
            For col As Integer = 0 To image.Width - 1
               Dim color As RasterColor = image.GetPixel(row, col)
               color.A = 128
               image.SetPixel(row, col, color)
            Next
         Next

         ' Save the image as PNG with these new alpha values
         codecs.Save(image, destFile, RasterImageFormat.Png, 32)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetSetPixelExample()
      {
         string sourceFile = Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp");
         string destFile = Path.Combine(LEAD_VARS.ImagesDir, "GetSetPixelExample.png");

         RasterCodecs codecs = new RasterCodecs();

         // Load the source image as 32-bit (with alpha)
         RasterImage image = codecs.Load(sourceFile, 32, CodecsLoadByteOrder.Bgr, 1, 1);

         // Loop through each pixel and set its alpha value to 128 (half transparent)
         for(int row = 0; row &lt; image.Height; row++)
         {
            for(int col = 0; col &lt; image.Width; col++)
            {
               RasterColor color = image.GetPixel(row, col);
               color.A = 128;
               image.SetPixel(row, col, color);
            }
         }

         // Save the image as PNG with these new alpha values
         codecs.Save(image, destFile, RasterImageFormat.Png, 32);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetPixel(System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>Changes the color value of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <param name="color">The color to assign to the pixel. If the image has 32 or 64-bits per pixel, the alpha value of this parameter is used in the
            pixel data.</param>
      <remarks>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view
            perspective of the image. If you specify a pixel that is outside the image or outside the region
            (if the image has one), this method throws an exception.</para>
        <para>Use the <see cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" /> method to get the color value of a certain pixel.</para>
        <para>For 32 and 64-bit images, an alpha value is also available in the image. This method will use the alpha value in <paramref name="color" />
            (<see cref="P:Leadtools.RasterColor.A" />). For 32-bit images, this will be the exact byte value of the alpha
            for the pixel. For 64-bit images, the alpha is 16-bit and since <see cref="P:Leadtools.RasterColor.A">RasterColor.A</see> is an 8-bit value, the
            alpha is normalized from its 16-bit value to 8-bit. For other bits/pixel values, the method is identical to
            returned from <see cref="M:Leadtools.RasterImage.SetPixelColor(System.Int32,System.Int32,Leadtools.RasterColor)" />.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetPixel(System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32)">
      <summary>Returns the pixel data of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel</param>
      <returns>This method returns a byte array which may represent an index into an images's palette,
            a grayscale value <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see>, or red, green, and blue color values.
            </returns>
      <remarks>
        <para>No transformations are performed on the pixel data.</para>
        <para>This method should be called only for 8, 16, 24, 32, 48 and 64-bit images. It works as follows:</para>
        <para>
          <list type="bullet">
            <item>
              <description>For 8-bit images, this method will retrieve the palette index for the specified pixel.</description>
            </item>
            <item>
              <description>For 16-bit images, this method will retrieve the 2-byte value that forms the pixel.</description>
              <list type="bullet">
                <item>
                  <description>For grayscale 16-bit images, the data will contain the gray value. <see cref="P:Leadtools.RasterImage.LowBit" /> and
                 <see cref="P:Leadtools.RasterImage.HighBit" /> properties indicate the valid pixel data.</description>
                </item>
                <item>
                  <description>For color 16-bit images, the data contains packed 5-bit R, G and B values. The high bit contains
                 the alpha information. The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR.</description>
                </item>
              </list>
            </item>
            <item>
              <description>For 24-bit images, this method will retrieve the 3 bytes containing the pixel color.
            The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR.</description>
            </item>
            <item>
              <description>For 32-bit images, this method will retrieve the 4 bytes containing the pixel color and alpha
            information. The first 3 bytes contain the pixel color. The  The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data in the
            first 3 bytes is RGB or BGR. The 4th byte is the alpha channel information.</description>
            </item>
            <item>
              <description>For 48-bit images, this method will retrieve the 6 bytes containing the pixel color. The
            <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR. Each color component is stored as a 16-bit value, where
            0 corresponds to black and 0xFFFF corresponds to full white.</description>
            </item>
            <item>
              <description>For 64-bit images, this method will retrieve the 8 bytes containing the pixel color and alpha
            information. The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data in the first 6 bytes is RGB or BGR. Each color component
            is stored as a 16-bit value, where 0 corresponds to black and 0xFFFF corresponds to full white. The last two bytes
            contain the alpha information (also stored as a short value).</description>
            </item>
          </list>
        </para>
        <para>The minimum size of the returned byte array is calculated:</para>
        <para>
          <c>(<see cref="P:Leadtools.RasterImage.BitsPerPixel" /> + 7) / 8</c>
        </para>
        <para>You can use the <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])" /> method to assign the returned value to another pixel.</para>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view perspective of
            the image.  If you specify a pixel that is outside the image or outside the region (if the image has one), this method
            throws an exception.</para>
        <para>The <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])" /> method changes the data of the specified pixel.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>
        <para>This example uses GetPixelData and <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])" /> methods to swap the R and G values for a particular pixel.</para>
        <code lang="VB">      Public Sub GetPixelDataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         If image.BitsPerPixel = 24 Then
            Dim Data As Byte()
            Dim Value As Byte
            Dim Row As Integer = 10, Column As Integer = 20

            Data = image.GetPixelData(Row, Column)
            ' swap the R and B values
            Value = Data(0)
            Data(0) = Data(2)
            Data(2) = Value

            ' put back the transformed pixel
            image.SetPixelData(Row, Column, Data)
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelData.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetPixelDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         if(image.BitsPerPixel == 24)
         {
            byte[] Data;
            byte Value;
            int Row = 10, Column = 20;

            Data = image.GetPixelData(Row, Column);
            // swap the R and B values
            Value = Data[0]; Data[0] = Data[2]; Data[2] = Value;

            // put back the transformed pixel
            image.SetPixelData(Row, Column, Data);
         }

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelData.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetPixelDataExample(RasterImage image, Stream destStream)
      {
         if (image.BitsPerPixel == 24)
         {
            byte[] Data;
            byte Value;
            int Row = 10, Column = 20;
            Data = image.GetPixelData(Row, Column);
            // swap the R and B values
            Value = Data[0]; Data[0] = Data[2]; Data[2] = Value;

            // put back the transformed pixel
            image.SetPixelData(Row, Column, Data);
         }

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetPixelDataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         If image.BitsPerPixel = 24 Then
            Dim Data As Byte()
            Dim Value As Byte
            Dim Row As Integer = 10, Column As Integer = 20
            Data = image.GetPixelData(Row, Column)
            ' swap the R and B values
            Value = Data(0)
            Data(0) = Data(2)
            Data(2) = Value

            ' put back the transformed pixel
            image.SetPixelData(Row, Column, Data)
         End If

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])">
      <summary>Changes the data of the specified pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <param name="data">Buffer that contains the pixel data to set. This buffer should contain
            <c>((BitsPerPixel + 7) / 8)</c> bytes.</param>
      <remarks>
        <para>No transformations are performed on the pixel data.</para>
        <para>This method should be called only for 8, 16, 24, 32, 48 and 64-bit images.</para>
        <para>Use the <see cref="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32)" /> method to get data of a specified pixel.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="P:Leadtools.RasterImage.BitsPerPixel">BitsPerPixel</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies the pixel data of the specified pixel into an unmanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel</param>
      <param name="data">Pointer to unmanaged memory buffer to copy the pixel data to.</param>
      <param name="dataSize">Size of bytes the buffer in <paramref name="data" />.</param>
      <remarks>
        <para>No transformations are performed on the pixel data.</para>
        <para>The pixel data copied may represent an index into an images's palette, a grayscale value
            (<see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see>, or red, green, and blue color values.</para>
        <para>This method should be called only for 8, 16, 24, 32, 48 and 64-bit images. It works as follows:</para>
        <para>
          <list type="bullet">
            <item>
              <description>For 8-bit images, this method will retrieve the palette index for the specified pixel.</description>
            </item>
            <item>
              <description>For 16-bit images, this method will retrieve the 2-byte value that forms the pixel.</description>
              <list type="bullet">
                <item>
                  <description>For grayscale 16-bit images, the data will contain the gray value. <see cref="P:Leadtools.RasterImage.LowBit" /> and
                 <see cref="P:Leadtools.RasterImage.HighBit" /> properties indicate the valid pixel data.</description>
                </item>
                <item>
                  <description>For color 16-bit images, the data contains packed 5-bit R, G and B values. The high bit contains
                 the alpha information. The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR.</description>
                </item>
              </list>
            </item>
            <item>
              <description>For 24-bit images, this method will retrieve the 3 bytes containing the pixel color.
            The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR.</description>
            </item>
            <item>
              <description>For 32-bit images, this method will retrieve the 4 bytes containing the pixel color and alpha
            information. The first 3 bytes contain the pixel color. The  The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data in the
            first 3 bytes is RGB or BGR. The 4th byte is the alpha channel information.</description>
            </item>
            <item>
              <description>For 48-bit images, this method will retrieve the 6 bytes containing the pixel color. The
            <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data is RGB or BGR. Each color component is stored as a 16-bit value, where
            0 corresponds to black and 0xFFFF corresponds to full white.</description>
            </item>
            <item>
              <description>For 64-bit images, this method will retrieve the 8 bytes containing the pixel color and alpha
            information. The <see cref="P:Leadtools.RasterImage.Order" /> determines whether the data in the first 6 bytes is RGB or BGR. Each color component
            is stored as a 16-bit value, where 0 corresponds to black and 0xFFFF corresponds to full white. The last two bytes
            contain the alpha information (also stored as a short value).</description>
            </item>
          </list>
        </para>
        <para>The minimum size of the returned byte array is calculated:</para>
        <para>
          <c>(<see cref="P:Leadtools.RasterImage.BitsPerPixel" /> + 7) / 8</c>
        </para>
        <para>You can use the <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)" /> method to assign the returned value to another pixel.</para>
        <para>This method uses image coordinates to specify the pixel. Therefore, you must account for the view perspective of
            the image.  If you specify a pixel that is outside the image or outside the region (if the image has one), this method
            throws an exception.</para>
        <para>The <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)" /> method changes the data of the specified pixel.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>
        <para>This example uses GetPixelData and <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])" /> methods to swap the R and G values for a particular pixel.</para>
        <code lang="VB">      Public Sub GetPixelDataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         If image.BitsPerPixel = 24 Then
            Dim Data As Byte()
            Dim Value As Byte
            Dim Row As Integer = 10, Column As Integer = 20

            Data = image.GetPixelData(Row, Column)
            ' swap the R and B values
            Value = Data(0)
            Data(0) = Data(2)
            Data(2) = Value

            ' put back the transformed pixel
            image.SetPixelData(Row, Column, Data)
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelData.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetPixelDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         if(image.BitsPerPixel == 24)
         {
            byte[] Data;
            byte Value;
            int Row = 10, Column = 20;

            Data = image.GetPixelData(Row, Column);
            // swap the R and B values
            Value = Data[0]; Data[0] = Data[2]; Data[2] = Value;

            // put back the transformed pixel
            image.SetPixelData(Row, Column, Data);
         }

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GetPixelData.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetPixelDataExample(RasterImage image, Stream destStream)
      {
         if (image.BitsPerPixel == 24)
         {
            byte[] Data;
            byte Value;
            int Row = 10, Column = 20;
            Data = image.GetPixelData(Row, Column);
            // swap the R and B values
            Value = Data[0]; Data[0] = Data[2]; Data[2] = Value;

            // put back the transformed pixel
            image.SetPixelData(Row, Column, Data);
         }

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetPixelDataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         If image.BitsPerPixel = 24 Then
            Dim Data As Byte()
            Dim Value As Byte
            Dim Row As Integer = 10, Column As Integer = 20
            Data = image.GetPixelData(Row, Column)
            ' swap the R and B values
            Value = Data(0)
            Data(0) = Data(2)
            Data(2) = Value

            ' put back the transformed pixel
            image.SetPixelData(Row, Column, Data)
         End If

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Changes the data of the specified pixel by copying from an unmanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="row">The zero-based row number of the pixel.</param>
      <param name="column">The zero-based column number of the pixel.</param>
      <param name="data">Pointer to an unmanaged memory buffer that contains the pixel data to set.
            This buffer should contain <c>((BitsPerPixel + 7) / 8)</c> bytes.</param>
      <param name="dataSize">Size of the <paramref name="data" /> unmanaged memory buffer.</param>
      <remarks>
        <para>No transformations are performed on the pixel data.</para>
        <para>This method should be called only for 8, 16, 24, 32, 48 and 64-bit images.</para>
        <para>Use the <see cref="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)" /> method to get data of a specified pixel.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <seealso cref="P:Leadtools.RasterImage.BitsPerPixel">BitsPerPixel</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetPixelData(System.Int32,System.Int32,System.IntPtr,System.Int32)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.CopyData(System.Byte[],System.Int32)">
      <summary>Updates the data of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="data">Buffer containing the image new data.</param>
      <param name="dataOffset">Offset into <paramref name="data" /> where the copy operation should begin.</param>
      <remarks>
        <para>The byte array that you specify will be copied.</para>
        <para>The data is copied as is into the internal memory of this <see cref="T:Leadtools.RasterImage" />.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CopyDataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         Dim data As Byte() = New Byte(image.BytesPerLine * image.Height - 1) {}
         Dim val As Integer = 0
         Dim x As Integer = 0
         Do While x &lt; data.Length
            data(x) = CByte(val)
            val += 1
            If val &gt; 255 Then
               val = 0
            End If
            x += 1
         Loop
         image.CopyData(data, 0)

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "CopyData.bmp"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CopyDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         byte[] data = new byte[image.BytesPerLine * image.Height];
         int val = 0;
         for(int x = 0; x &lt; data.Length; x++)
         {
            data[x] = (byte)val;
            val++;
            if(val &gt; 255)
               val = 0;
         }
         image.CopyData(data, 0);

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "CopyData.bmp"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CopyDataExample(RasterImage image, Stream destStream)
      {
         byte[] data = new byte[image.BytesPerLine * image.Height];
         int val = 0;
         for (int x = 0; x &lt; data.Length; x++)
         {
            data[x] = (byte)val;
            val++;
            if (val &gt; 255)
               val = 0;
         }
         image.CopyData(data, 0);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Png, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CopyDataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim data As Byte() = New Byte(image.BytesPerLine * image.Height - 1){}
         Dim val As Integer = 0
         Dim x As Integer = 0
         Do While x &lt; data.Length
            data(x) = CByte(val)
            val += 1
            If val &gt; 255 Then
               val = 0
            End If
            x += 1
         Loop
         image.CopyData(data, 0)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Png, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetUserData(System.IntPtr,System.Int64)">
      <summary>Sets the data for the image to the specified unmanaged memory buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <param name="data">Pointer to the unmanaged memory buffer containing the image new data.</param>
      <param name="size">Number of bytes in <paramref name="data" />.</param>
      <remarks>
        <para>The data that you specify will not be copied, but instead will be referenced by the image until the image is
            disposed, or until you call this method again.</para>
        <para>To set up a <see cref="T:Leadtools.RasterImage" /> object with unmanaged user data, call the
            <see cref="M:Leadtools.RasterImage.#ctor(Leadtools.RasterMemoryFlags,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterViewPerspective,Leadtools.RasterColor[],System.IntPtr,System.Int64)" />
            constructor passing <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>to the <paramref name="flags" />
            parameter.</para>
        <para>Some image processing commands, such as <see cref="T:Leadtools.ImageProcessing.RotateCommand" /> and <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />, need
            to re-allocate the image data. If you create an image with <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.User</see>,
            and pass it to these command, they will change the image to
            <see cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.Conventional</see> and re-allocate memory.  Your original
            memory will no longer be used.</para>
        <para>You are responsible for managing the image data. <see cref="M:Leadtools.RasterImage.Dispose" /> will not free <paramref name="data" />.</para>
      </remarks>
      <example>
        <para>This example uses GetPixelData and <see cref="M:Leadtools.RasterImage.SetPixelData(System.Int32,System.Int32,System.Byte[])" /> methods to swap the R and G values for a particular pixel.</para>
        <code lang="VB">      Public Sub SetUserDataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "UserData.bmp")

         ' Create an image with user defined data
         Dim width As Integer = 40
         Dim height As Integer = 40
         Dim bitsPerPixel As Integer = 24
         Dim size As Integer = width * height * 3
         Dim data1 As IntPtr = Marshal.AllocHGlobal(size)

         ' Load the image
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.User, width, height, bitsPerPixel, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)

         ' Get a pointer to the internal data and fill it with gray shades
         Dim dataSize As Integer = CInt(image.DataSize)

         Dim buffer As Byte() = New Byte(dataSize - 1) {}
         Dim inc As Boolean = True
         Dim value As Byte = 0
         Dim i As Integer = 0
         Do While i &lt; buffer.Length
            buffer(i + 0) = value
            buffer(i + 1) = value
            buffer(i + 2) = value

            If inc Then
               If value = 255 Then
                  inc = False
                  value = 254
               Else
                  value = value + Convert.ToByte(1)
               End If
            Else
               If value = 0 Then
                  inc = True
                  value = 1
               Else
                  value = value - Convert.ToByte(1)
               End If
            End If
            i += 3
         Loop

         ' Copy this buffer to the image data
         Marshal.Copy(buffer, 0, data1, buffer.Length)

         ' Set the user data
         image.SetUserData(data1, dataSize)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         Marshal.FreeHGlobal(data1)
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SetUserDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "UserData.bmp");

         // Create an image with user defined data
         int width = 40;
         int height = 40;
         int bitsPerPixel = 24;
         int size = width * height * 3;
         IntPtr data1 = Marshal.AllocHGlobal(size);

         // Load the image
         RasterImage image = new RasterImage(
            RasterMemoryFlags.User,
            width,
            height,
            bitsPerPixel,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);

         // Get a pointer to the internal data and fill it with gray shades
         long dataSize = image.DataSize;

         byte[] buffer = new byte[dataSize];
         bool inc = true;
         byte value = 0;
         for(int i = 0; i &lt; buffer.Length; i += 3)
         {
            buffer[i + 0] = value;
            buffer[i + 1] = value;
            buffer[i + 2] = value;

            if(inc)
            {
               if(value == 255)
               {
                  inc = false;
                  value = 254;
               }
               else
                  value++;
            }
            else
            {
               if(value == 0)
               {
                  inc = true;
                  value = 1;
               }
               else
                  value--;
            }
         }

         // Copy this buffer to the image data
         Marshal.Copy(buffer, 0, data1, buffer.Length);

         // Set the user data
         image.SetUserData(data1, dataSize);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         Marshal.FreeHGlobal(data1);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SetUserDataExample(Stream destStream)
      {
         // Create an image with user defined data
         int width = 40;
         int height = 40;
         int bitsPerPixel = 24;
         // Create a user image
         RasterImage image = new RasterImage(
            RasterMemoryFlags.User,
            width,
            height,
            bitsPerPixel,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);

         // Create a data buffer for the image data
         // and fill the pixel values (gradient)
         int size = width * height * 3;
         byte[] buffer = new byte[size];

         bool inc = true;
         byte value = 0;
         for (int i = 0; i &lt; buffer.Length; i += 3)
         {
            buffer[i + 0] = value;
            buffer[i + 1] = value;
            buffer[i + 2] = value;

            if (inc)
            {
               if (value == 255)
               {
                  inc = false;
                  value = 254;
               }
               else
                  value++;
            }
            else
            {
               if (value == 0)
               {
                  inc = true;
                  value = 1;
               }
               else
                  value--;
            }
         }

         // Set the user data of the image
         image.CopyData(buffer, buffer.Length);

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SetUserDataExample(ByVal destStream As Stream)
         ' Create an image with user defined data
         Dim width As Integer = 40
         Dim height As Integer = 40
         Dim bitsPerPixel As Integer = 24
         ' Create a user image
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.User, width, height, bitsPerPixel, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)

         ' Create a data buffer for the image data
         ' and fill the pixel values (gradient)
         Dim size As Integer = width * height * 3
         Dim buffer As Byte() = New Byte(size - 1){}

         Dim inc As Boolean = True
         Dim value As Byte = 0
         Dim i As Integer = 0
         Do While i &lt; buffer.Length
            buffer(i + 0) = value
            buffer(i + 1) = value
            buffer(i + 2) = value

            If inc Then
               If value = 255 Then
                  inc = False
                  value = 254
               Else
                  value += 1
               End If
            Else
               If value = 0 Then
                  inc = True
                  value = 1
               Else
                  value -= 1
               End If
            End If
            i += 3
         Loop

         ' Set the user data of the image
         image.CopyData(buffer, buffer.Length)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 24)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.FlipViewPerspective(System.Boolean)">
      <summary>Flips this <see cref="T:Leadtools.RasterImage" /> image by changing its <see cref="P:Leadtools.RasterImage.ViewPerspective" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="horizontal">true to flip horizontally, false to flip vertically.</param>
      <remarks>
        <para>(<see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> only).</para>
        <para>This method achieves fast flip by changing only the <see cref="P:Leadtools.RasterImage.ViewPerspective" />.</para>
        <para>After using this method, you can reverse the result by restoring the original
            <see cref="P:Leadtools.RasterImage.ViewPerspective" />.</para>
        <para>Some methods must account for the view perspective. For more information refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.RotateViewPerspective(System.Int32)">
      <summary>Rotates this <see cref="T:Leadtools.RasterImage" /> by changing its <see cref="P:Leadtools.RasterImage.ViewPerspective" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="degrees">Degrees of rotation. Valid values +-90, +-180, +-270, or +-360. Positive values are
            clockwise; negative values are counterclockwise.</param>
      <remarks>
        <para>(<see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> only).</para>
        <para>This method achieves fast rotation by changing only the <see cref="P:Leadtools.RasterImage.ViewPerspective" />.</para>
        <para>After using this method, you can reverse the result by restoring the original <see cref="P:Leadtools.RasterImage.ViewPerspective" />.</para>
        <para>Some methods must account for the view perspective. For more information refer to
            <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.RasterImage.Changed" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.ChangeViewPerspective(Leadtools.RasterViewPerspective)">
      <summary>Rotates and flips the image data as necessary to achieve the desired view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="viewPerspective">Desired view perspective.</param>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.ViewPerspective" /> is the arrangement of pixels in the image. 
            This method references image coordinates, which are often different 
            from the display coordinates of an image. </para>
        <para>Use this method to change the data and the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> to simplify
            calculations that involve image coordinates. 
            This method does not affect the image display. 
            For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>The following values for <paramref name="viewPerspective" /> are supported in <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> only:
            <list type="bullet"><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.RightTop</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft90</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.LeftBottom</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft270</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.LeftTop</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft90</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.RightBottom</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft270</see></description></item></list></para>
      </remarks>
      <example>
        <para>This example demonstrates the low-level methods for accessing 1-bit compressed image data. 
            It demonstrates the ability to get and put rows, and the ability to process rows in 
            buffer-to-buffer processing. The result of the function is an the first 50 lines are inverted.</para>
        <code lang="VB">      Public Sub GetRowCompressedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = True
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, CodecsLoadByteOrder.Bgr, 1, 1)

         ' This example does not work with rotated view perspectives.
         If (image.ViewPerspective &lt;&gt; RasterViewPerspective.TopLeft) OrElse (image.ViewPerspective &lt;&gt; RasterViewPerspective.BottomLeft) Then
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft)
         End If

         ' Adjust the YOffset if the view perspective is bottom left.
         Dim nRow As Integer = 500 ' first row to get.
         Dim nYSize As Integer = 500 ' number of rows to get.

         If image.ViewPerspective = RasterViewPerspective.BottomLeft Then
            nRow = image.Height - nRow - nYSize
         End If

         ' Allocate the buffers.
         Dim pBuffer As Byte() = New Byte(Convert.ToInt32((((image.Width + 31) And Not (31)) / 8)) * nYSize - 1) {} ' Buffer to hold the expanded row.
         Dim pRunBuffer As System.UInt16() = New System.UInt16(((image.Width + 3) * 2) * nYSize - 1) {} ' Buffer to hold the compressed row.

         If image.IsGlobalMemory Then
            image.Access()
         End If
         ' Get the top nRow lines.
         image.GetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)
         ' Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)
         ' Invert the data.

         Dim n As Integer = 0
         Do While n &lt; (image.BytesPerLine * nYSize)
            pBuffer(n) = pBuffer(n) Xor Convert.ToByte(&amp;HFF)
            n += 1
         Loop


         ' Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize)

         ' Put the inverted, compressed data back into the image.
         image.SetRowCompressed(Nothing, pRunBuffer, 0, nRow, nYSize)

         If image.IsGlobalMemory Then
            image.Release()
         End If

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetRowCompressedExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load the bitmap, at 1 bit per pixel, compressed
         codecs.Options.Load.Compressed = true;
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"), 1, Leadtools.Codecs.CodecsLoadByteOrder.Bgr, 1, 1);

         // This example does not work with rotated view perspectives.
         if((image.ViewPerspective != RasterViewPerspective.TopLeft) || (image.ViewPerspective != RasterViewPerspective.BottomLeft))
            image.ChangeViewPerspective(RasterViewPerspective.TopLeft);

         // Adjust the YOffset if the view perspective is bottom left.
         int nRow = 500; // first row to get.
         int nYSize = 500; // number of rows to get.

         if(image.ViewPerspective == RasterViewPerspective.BottomLeft)
            nRow = image.Height - nRow - nYSize;

         // Allocate the buffers.
         byte[] pBuffer = new byte[Convert.ToInt32((((image.Width + 31) &amp; ~(31)) / 8)) * nYSize]; // Buffer to hold the expanded row.
         ushort[] pRunBuffer = new ushort[((image.Width + 3) * 2) * nYSize]; // Buffer to hold the compressed row.

         if(image.IsGlobalMemory)
            image.Access();
         // Get the top nRow lines.
         image.GetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);
         // Expand the compressed data.
         RasterRleCompressor.ExpandRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);
         // Invert the data.

         for(int n = 0; n &lt; (image.BytesPerLine * nYSize); n++)
            pBuffer[n] ^= 0xff;


         // Compress the inverted data.
         RasterRleCompressor.CompressRows(pRunBuffer, pBuffer, 0, image.Width, nYSize);

         // Put the inverted, compressed data back into the image.
         image.SetRowCompressed(null, pRunBuffer, 0, nRow, nYSize);

         if(image.IsGlobalMemory)
            image.Release();

         codecs.Save(image,Path.Combine(LEAD_VARS.ImagesDir,"IMAGE1_getrowcompresed.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.PointFromImage(Leadtools.RasterViewPerspective,Leadtools.LeadPoint)">
      <summary>Translates a point (x,y) from this <see cref="T:Leadtools.RasterImage" /> view perspective to the specified view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="viewPerspective">Destination view perspective to which the point should be translated.</param>
      <param name="pt">The point to translate.</param>
      <returns>The translated point.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
      </remarks>
      <example>
        <para>This example finds out where the origin of the image would be. Then it converts a known point to bitmap coordinates.</para>
        <code lang="VB">      Public Sub PointFromImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load an image that has BottomLeft ViewPerspective
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"))

         Dim ImagePoint As LeadPoint = New LeadPoint(0, 0)
         ImagePoint = image.PointFromImage(RasterViewPerspective.TopLeft, ImagePoint)
         Console.WriteLine(String.Format("{0},{1}", ImagePoint.X, ImagePoint.Y))

         ImagePoint.X = 0
         ImagePoint.Y = 0
         ImagePoint = image.PointToImage(RasterViewPerspective.TopLeft, ImagePoint)
         Console.WriteLine(String.Format("{0},{1}", ImagePoint.X, ImagePoint.Y))

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PointFromImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load an image that has BottomLeft ViewPerspective
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"));

         LeadPoint ImagePoint = new LeadPoint(0, 0);
         ImagePoint = image.PointFromImage(RasterViewPerspective.TopLeft, ImagePoint);
         Console.WriteLine(string.Format("{0},{1}", ImagePoint.X, ImagePoint.Y));

         ImagePoint.X = 0;
         ImagePoint.Y = 0;
         ImagePoint = image.PointToImage(RasterViewPerspective.TopLeft, ImagePoint);
         Console.WriteLine(string.Format("{0},{1}", ImagePoint.X, ImagePoint.Y));

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void PointFromImageExample(RasterImage image)
      {
         // image should be an image that has BottomLeft ViewPerspective (ulay1.bmp)
         LeadPoint ImagePoint = new LeadPoint(0, 0);
         ImagePoint = image.PointFromImage(RasterViewPerspective.TopLeft, ImagePoint);
         Debug.WriteLine(string.Format("{0},{1}", ImagePoint.X, ImagePoint.Y));

         ImagePoint.X = 0;
         ImagePoint.Y = 0;
         ImagePoint = image.PointToImage(RasterViewPerspective.TopLeft, ImagePoint);
         Debug.WriteLine(string.Format("{0},{1}", ImagePoint.X, ImagePoint.Y));

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub PointFromImageExample(ByVal image As RasterImage)
         ' image should be an image that has BottomLeft ViewPerspective (ulay1.bmp)
         Dim ImagePoint As LeadPoint = New LeadPoint(0, 0)
         ImagePoint = image.PointFromImage(RasterViewPerspective.TopLeft, ImagePoint)
         Debug.WriteLine(String.Format("{0},{1}", ImagePoint.X, ImagePoint.Y))

         ImagePoint.X = 0
         ImagePoint.Y = 0
         ImagePoint = image.PointToImage(RasterViewPerspective.TopLeft, ImagePoint)
         Debug.WriteLine(String.Format("{0},{1}", ImagePoint.X, ImagePoint.Y))

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.PointToImage(Leadtools.RasterViewPerspective,Leadtools.LeadPoint)">
      <summary>Translates a point (x,y) from the specified view perspective to this <see cref="T:Leadtools.RasterImage" /> view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="viewPerspective">Source view perspective from which the point should be translated.</param>
      <param name="pt">The point to translate.</param>
      <returns>The translated point.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.PointFromImage(Leadtools.RasterViewPerspective,Leadtools.LeadPoint)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.RectangleFromImage(Leadtools.RasterViewPerspective,Leadtools.LeadRect)">
      <summary>Translates a rectangle from this <see cref="T:Leadtools.RasterImage" /> view perspective to the specified view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="viewPerspective">Destination view perspective to which the rectangle should be translated.</param>
      <param name="rc">The rectangle to translate.</param>
      <returns>The translated rectangle.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
      </remarks>
      <example>
        <para>This example finds out where the selected rectangle of the image would be in a TopLeft ViewPerspective.</para>
        <code lang="VB">      Public Sub RectangleFromImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load an image that has BottomLeft ViewPerspective
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"))

         Dim ImageRectangle As LeadRect = New LeadRect(0, 0, image.Width - 1, image.Height - 1)
         ImageRectangle = image.RectangleFromImage(RasterViewPerspective.TopLeft, ImageRectangle)
         Console.WriteLine(String.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom))

         ImageRectangle = New LeadRect(0, 0, image.Width - 1, image.Height - 1)
         ImageRectangle = image.RectangleToImage(RasterViewPerspective.TopLeft, ImageRectangle)
         Console.WriteLine(String.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom))

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RectangleFromImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load an image that has BottomLeft ViewPerspective
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"));

         LeadRect imageRectangle = new LeadRect(0, 0, image.Width - 1, image.Height - 1);
         imageRectangle = image.RectangleFromImage(Leadtools.RasterViewPerspective.TopLeft, imageRectangle);
         Console.WriteLine(string.Format("{0},{1},{2},{3}", imageRectangle.Left, imageRectangle.Top, imageRectangle.Right, imageRectangle.Bottom));

         imageRectangle = new LeadRect(0, 0, image.Width - 1, image.Height - 1);
         imageRectangle = image.RectangleToImage(Leadtools.RasterViewPerspective.TopLeft, imageRectangle);
         Console.WriteLine(string.Format("{0},{1},{2},{3}", imageRectangle.Left, imageRectangle.Top, imageRectangle.Right, imageRectangle.Bottom));

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RectangleFromImageExample(RasterImage image)
      {
         // image should be an image that has BottomLeft ViewPerspective (ulay1.bmp)
         LeadRect ImageRectangle = new LeadRect(0, 0, image.Width - 1, image.Height - 1);
         ImageRectangle = image.RectangleFromImage(Leadtools.RasterViewPerspective.TopLeft, ImageRectangle);
         Debug.WriteLine(string.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom));

         ImageRectangle = new LeadRect(0, 0, image.Width - 1, image.Height - 1);
         ImageRectangle = image.RectangleToImage(Leadtools.RasterViewPerspective.TopLeft, ImageRectangle);
         Debug.WriteLine(string.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom));

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RectangleFromImageExample(ByVal image As RasterImage)
         ' image should be an image that has BottomLeft ViewPerspective (ulay1.bmp)
         Dim ImageRectangle As LeadRect = New LeadRect(0, 0, image.Width - 1, image.Height - 1)
         ImageRectangle = image.RectangleFromImage(RasterViewPerspective.TopLeft, ImageRectangle)
         Debug.WriteLine(String.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom))

         ImageRectangle = New LeadRect(0, 0, image.Width - 1, image.Height - 1)
         ImageRectangle = image.RectangleToImage(RasterViewPerspective.TopLeft, ImageRectangle)
         Debug.WriteLine(String.Format("{0},{1},{2},{3}", ImageRectangle.Left, ImageRectangle.Top, ImageRectangle.Right, ImageRectangle.Bottom))

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.RectangleToImage(Leadtools.RasterViewPerspective,Leadtools.LeadRect)">
      <summary>Translates a rectangle from a specified view perspective to this <see cref="T:Leadtools.RasterImage" /> view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="viewPerspective">Source view perspective from which the rectangle should be translated.</param>
      <param name="rc">The rectangle to translate.</param>
      <returns>The translated rectangle.</returns>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingImageCoordinates">Changing Image Coordinates</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.RectangleFromImage(Leadtools.RasterViewPerspective,Leadtools.LeadRect)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">
      <summary>Initializes the buffered dithering of an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Color resolution|Color depth|Dithering|Error diffusion|Floyd-Steinberg dithering|Stevenson and Arce dithering|Variations in Dithering Methods|Ordered dithering|Cluster dithering|Burkes|Stucki|Sierra|Jarvis|Palettes</keywords>
      <param name="palette">The palette this uses for dithering. You can specify your own palette, or use a null reference
            (Nothing in Visual Basic) for LEAD's fixed palette.</param>
      <param name="colors">Number of colors used in the palette. If the palette contains more colors, only the first
            <paramref name="colors" /> colors are used. Valid values are 2 to 256.</param>
      <remarks>
        <para>The following flow chart shows how the methods relate to each other:</para>
        <para>
          <img src="ditherflow.jpg" />
        </para>
        <para>The following properties from the <see cref="T:Leadtools.RasterImage" /> are used to control the dithering operation:
            <list type="bullet"><item><description><see cref="P:Leadtools.RasterImage.Width" /></description></item><item><description><see cref="P:Leadtools.RasterImage.Height" /></description></item><item><description><see cref="P:Leadtools.RasterImage.BitsPerPixel" /></description></item><item><description><see cref="P:Leadtools.RasterImage.Order" /> - if <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> is greater than 8</description></item><item><description><see cref="P:Leadtools.RasterImage.DitheringMethod" /> - if <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> is less than 16</description></item></list></para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>
        <para>This example dithers each line in one image and writes it to another image.</para>
        <code lang="VB">      Public Sub StartDitheringExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load an image that has BottomLeft ViewPerspective
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         Dim Palette As RasterColor() = RasterPalette.Fixed(8)

         ' Create the new palletized image.
         Dim destinationImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 8, image.Order, image.ViewPerspective, Palette, IntPtr.Zero, 0)

         ' Set the dithering method.
         image.DitheringMethod = RasterDitheringMethod.StevensonArce

         ' Initialize the dithering process.
         image.StartDithering(Palette, 256)

         ' Allocate the output buffer for 8-bit data.
         Dim InBuffer As Byte() = New Byte(image.Width * 3 - 1) {} ' Buffer to hold the input row.
         Dim OutBuffer As Byte() = New Byte(image.Width - 1) {} ' Buffer to hold the output row.

         ' Use DitherLine method to process each row in the image.
         Dim i As Integer = 0
         Do While i &lt; image.Height
            image.GetRow(i, InBuffer, 0, image.BytesPerLine)
            image.DitherLine(InBuffer, 0, OutBuffer, 0)
            destinationImage.SetRow(i, OutBuffer, 0, destinationImage.BytesPerLine)
            i += 1
         Loop
         ' End the dithering process.
         image.StopDithering()

         codecs.Save(destinationImage, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_DitherLine.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         destinationImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void StartDitheringExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load an image that has BottomLeft ViewPerspective
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         RasterColor[] Palette = RasterPalette.Fixed(256);

         // Create the new palletized image.
         RasterImage destinationImage = new RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 8, image.Order, image.ViewPerspective, Palette, IntPtr.Zero, 0);

         // Set the dithering method.
         image.DitheringMethod = RasterDitheringMethod.StevensonArce;

         // Initialize the dithering process.
         image.StartDithering(Palette, 256);

         // Allocate the output buffer for 8-bit data.
         byte[] InBuffer = new byte[image.Width * 3];// Buffer to hold the input row.
         byte[] OutBuffer = new byte[image.Width];// Buffer to hold the output row.

         // Use DitherLine method to process each row in the image.
         for(int i = 0; i &lt; image.Height; i++)
         {
            image.GetRow(i, InBuffer, 0, image.BytesPerLine);
            image.DitherLine(InBuffer, 0, OutBuffer, 0);
            destinationImage.SetRow(i, OutBuffer, 0, destinationImage.BytesPerLine);
         }
         // End the dithering process.
         image.StopDithering();

         codecs.Save(destinationImage, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_DitherLine.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         destinationImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void StartDitheringExample(RasterImage image, Stream destStream)
      {
         RasterColor[] Palette = RasterPalette.Fixed(256);
         // Create the new palletized image.
         RasterImage destinationImage = new RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 8, image.Order, image.ViewPerspective, Palette, null, 0);

         // Set the dithering method.
         image.DitheringMethod = RasterDitheringMethod.StevensonArce;

         // Initialize the dithering process.
         image.StartDithering(Palette, 256);

         // Allocate the output buffer for 8-bit data.
         byte[] InBuffer = new byte[image.Width * 3];// Buffer to hold the input row.
         byte[] OutBuffer = new byte[image.Width];// Buffer to hold the output row.

         // Use DitherLine method to process each row in the image.
         for (int i = 0; i &lt; image.Height; i++)
         {
            image.GetRow(i, InBuffer, 0, image.BytesPerLine);
            image.DitherLine(InBuffer, 0, OutBuffer, 0);
            destinationImage.SetRow(i, OutBuffer, 0, destinationImage.BytesPerLine);
         }
         // End the dithering process.
         image.StopDithering();

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(destinationImage, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
         destinationImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub StartDitheringExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim Palette As RasterColor() = RasterPalette.Fixed(256)
         ' Create the new palletized image.
         Dim destinationImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, image.Width, image.Height, 8, image.Order, image.ViewPerspective, Palette, Nothing, 0)

         ' Set the dithering method.
         image.DitheringMethod = RasterDitheringMethod.StevensonArce

         ' Initialize the dithering process.
         image.StartDithering(Palette, 256)

         ' Allocate the output buffer for 8-bit data.
         Dim InBuffer As Byte() = New Byte(image.Width * 3 - 1){} ' Buffer to hold the input row.
         Dim OutBuffer As Byte() = New Byte(image.Width - 1){} ' Buffer to hold the output row.

         ' Use DitherLine method to process each row in the image.
         Dim i As Integer = 0
         Do While i &lt; image.Height
            image.GetRow(i, InBuffer, 0, image.BytesPerLine)
            image.DitherLine(InBuffer, 0, OutBuffer, 0)
            destinationImage.SetRow(i, OutBuffer, 0, destinationImage.BytesPerLine)
            i += 1
         Loop
         ' End the dithering process.
         image.StopDithering()

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(destinationImage, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
         destinationImage.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">RasterImage.DitherLine method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">
      <summary>Used in a loop, dithers the line in a specified input buffer, and writes it to an output buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Color resolution|Color depth|Dithering|Error diffusion|Floyd-Steinberg dithering|Stevenson and Arce dithering|Variations in Dithering Methods|Ordered dithering|Cluster dithering|Burkes|Stucki|Sierra|Jarvis|Palettes</keywords>
      <param name="srcBuffer">The input buffer.</param>
      <param name="srcBufferOffset">Index to <paramref name="srcBuffer" /> where the source data is started.</param>
      <param name="destBuffer">The output buffer.</param>
      <param name="destBufferOffset">Index to <paramref name="destBuffer" /> where the destination data is started.</param>
      <remarks>
        <para>This method uses the dithering method specified in the <see cref="P:Leadtools.RasterImage.DitheringMethod" /> property. Therefore,
            it provides better 4- or 8-bit output than the
            <see cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</see> method.</para>
        <para>This method uses the palette that the <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /> method specifies. The output of the
            <see cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)" /> method is made up of 1-, 4-, or 8-bit indexes to the specified palette.
            <see cref="M:Leadtools.RasterImage.StopDithering" /> cleans up the allocated variables and buffers. For a description of how the
            methods relate to each other, refer to the <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.DitherLine(System.IntPtr,System.IntPtr)">
      <summary>Used in a loop, dithers the line in a specified unmanaged memory input buffer, and writes it to an
            unmanaged memory output buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Color resolution|Color depth|Dithering|Error diffusion|Floyd-Steinberg dithering|Stevenson and Arce dithering|Variations in Dithering Methods|Ordered dithering|Cluster dithering|Burkes|Stucki|Sierra|Jarvis|Palettes</keywords>
      <param name="srcBuffer">Pointer to the unmanaged memory input buffer.</param>
      <param name="destBuffer">Pointer to the unmanaged memory output buffer.</param>
      <remarks>
        <para>This method uses the dithering method specified in the <see cref="P:Leadtools.RasterImage.DitheringMethod" /> property. Therefore,
            it provides better 4- or 8-bit output than the
            <see cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</see> method.</para>
        <para>This method uses the palette that the <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /> method specifies. The output of the
            <see cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)" /> method is made up of 1-, 4-, or 8-bit indexes to the specified palette.
            <see cref="M:Leadtools.RasterImage.StopDithering" /> cleans up the allocated variables and buffers. For a description of how the
            methods relate to each other, refer to the <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</para>
        <para>This method does not support signed images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.StopDithering">
      <summary>Cleans up all data variables and buffers allocated by the <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /> and <see cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)" /> methods. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Color resolution|Color depth|Dithering|Error diffusion|Floyd-Steinberg dithering|Stevenson and Arce dithering|Variations in Dithering Methods|Ordered dithering|Cluster dithering|Burkes|Stucki|Sierra|Jarvis|Palettes</keywords>
      <remarks>
        <para>This method resets all internal variables to their default settings. For a description of how the methods relate to
            each other, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" /> method.</para>
        <p>
            This method does not support signed images.
            </p>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">RasterImage.DitherLine method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)">
      <summary>Sets up the paint or paint and image processing methods' window leveling options for this <see cref="T:Leadtools.RasterImage" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Window Leveling</keywords>
      <param name="lowBit">Value indicating the low bit used for leveling.
            0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" /> &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale).</param>
      <param name="highBit">Value indicating the high bit used for leveling.
            0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" /> &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale).</param>
      <param name="palette">
            Optional 8-bit lookup table that can be used to implement a user defined conversion.  For every intensity value
            between 0 and 2 raised to the power of (<see cref="P:Leadtools.RasterImage.HighBit" /> - <see cref="P:Leadtools.RasterImage.LowBit" /> + 1)-1 there should be a
            corresponding entry in the lookup table that contains a color.  If <paramref name="palette" /> is null (Nothing in
            Visual Basic), the conversion is a normal shift (right or left) and the painted image is 8-bit grayscale.  If
            <paramref name="palette" /> is not null (Nothing in Visual Basic), the painted image is a 24-bit image.
            </param>
      <param name="mode">Value indicating whether <paramref name="palette" /> is used by the paint and image processing
            methods or only by the paint methods.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>Provides "on demand" window leveling for the paint methods and does not alter the image data. To convert the image
            data to a window leveled image, use <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" />.</para>
        <para>If <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> is specified,
            then all image processing methods will take the <paramref name="palette" /> into account.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> for the 
            <paramref name="mode" /> parameter, by using the <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /> or by loading an image from a file
            format that supports Window Leveling. If a window-leveled  image is saved as any other file format, the image data
            will be converted before being saved. For more information, refer to
            <para>For a version of this function that uses an 8-bit palette, see <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" />.</para><see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>LEADTOOLS supports two types of LUTs for 10-16-bit grayscale images (8-bit LUT and 16-bit LUT). 
            Typical grayscale image display and processing is done using an 8-bit LUT.  But, you can also use a 16-bit LUT, which offers more precision. 
            Some special video cards and monitors also support display of grayscale images using a 16-bit LUT.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub WindowLevelExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load an image that has BottomLeft ViewPerspective
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' Change the image to 16-bit grayscale 
         Dim grayscaleCmd As GrayscaleCommand = New GrayscaleCommand(16)
         grayscaleCmd.Run(image)

         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim size As Integer = (1 &lt;&lt; (image.HighBit - image.LowBit + 1))
         Dim palette As RasterColor() = New RasterColor(size - 1) {}

         ' fill the first half of the LUT with RED
         Dim x As Integer = 0
         Do While x &lt; size / 2
            palette(x).R = 255
            palette(x).G = 0
            palette(x).B = 0
            palette(x).Reserved = 0
            x += 1
         Loop

         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' Fill the rest with gray values 
         x = (size \ 2)
         Do While x &lt; size
            palette(x).R = Convert.ToByte(Math.Min(255, ((x - minVal) * 255 / (maxVal - minVal))))
            palette(x).G = palette(x).R
            palette(x).B = palette(x).R
            palette(x).Reserved = 0
            x += 1
         Loop
         image.WindowLevel(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing)

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_WindowLevel.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void WindowLevelExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load an image that has BottomLeft ViewPerspective
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // Change the image to 16-bit grayscale 
         GrayscaleCommand grayscaleCmd = new GrayscaleCommand(16);
         grayscaleCmd.Run(image);

         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit = minMaxBitsCmd.MaximumBit;

         int size = (1 &lt;&lt; (image.HighBit - image.LowBit + 1));
         RasterColor[] palette = new RasterColor[size];

         // fill the first half of the LUT with RED
         for(int x = 0; x &lt; size / 2; x++)
         {
            palette[x].R = 255;
            palette[x].G = 0;
            palette[x].B = 0;
            palette[x].Reserved = 0;
         }

         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // Fill the rest with gray values 
         for(int x = (size / 2); x &lt; size; x++)
         {
            palette[x].R = Convert.ToByte(Math.Min(255, ((x - minVal) * 255 / (maxVal - minVal))));
            palette[x].G = palette[x].R;
            palette[x].B = palette[x].R;
            palette[x].Reserved = 0;
         }
         image.WindowLevel(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing);

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_WindowLevel.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void WindowLevelExample(RasterImage image, Stream destStream)
      {
         // Change the image to 16-bit grayscale 
         GrayscaleCommand grayscaleCmd = new GrayscaleCommand(16);
         grayscaleCmd.Run(image);
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit = minMaxBitsCmd.MaximumBit;

         int size = (1 &lt;&lt; (image.HighBit - image.LowBit + 1));
         RasterColor[] palette = new RasterColor[size];

         // fill the first half of the LUT with RED
         for (int x = 0; x &lt; size / 2; x++)
         {
            palette[x].R = 255;
            palette[x].G = 0;
            palette[x].B = 0;
            palette[x].Reserved = 0;
         }

         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // Fill the rest with gray values 
         for (int x = (size / 2); x &lt; size; x++)
         {
            palette[x].R = Convert.ToByte(Math.Min(255, ((x - minVal) * 255 / (maxVal - minVal))));
            palette[x].G = palette[x].R;
            palette[x].B = palette[x].R;
            palette[x].Reserved = 0;
         }
         image.WindowLevel(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing);

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub WindowLevelExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Change the image to 16-bit grayscale 
         Dim grayscaleCmd As GrayscaleCommand = New GrayscaleCommand(16)
         grayscaleCmd.Run(image)
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim size As Integer = (1 &lt;&lt; (image.HighBit - image.LowBit + 1))
         Dim palette As RasterColor() = New RasterColor(size - 1){}

         ' fill the first half of the LUT with RED
         Dim x As Integer = 0
         Do While x &lt; size / 2
            palette(x).R = 255
            palette(x).G = 0
            palette(x).B = 0
            palette(x).Reserved = 0
            x += 1
         Loop

         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' Fill the rest with gray values 
         x = (size / 2)
         Do While x &lt; size
            palette(x).R = Convert.ToByte(Math.Min(255, ((x - minVal) * 255 / (maxVal - minVal))))
            palette(x).G = palette(x).R
            palette(x).B = palette(x).R
            palette(x).Reserved = 0
            x += 1
         Loop
         image.WindowLevel(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing)

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" />
      <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" />
      <seealso cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" />
    </member>
    <member name="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)">
      <summary>Sets up the paint or paint and image processing methods' window leveling options for this <see cref="T:Leadtools.RasterImage" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Window Leveling</keywords>
      <isnew>2/28/2009</isnew>
      <param name="lowBit">Value indicating the low bit used for leveling.
            0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" /> &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale).</param>
      <param name="highBit">Value indicating the high bit used for leveling.
            0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" /> &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale).</param>
      <param name="palette">
            Optional 16-bit lookup table that can be used to implement a user defined conversion.  For every intensity value
            between 0 and 2 raised to the power of (<see cref="P:Leadtools.RasterImage.HighBit" /> - <see cref="P:Leadtools.RasterImage.LowBit" /> + 1)-1 there should be a
            corresponding entry in the lookup table that contains a color.  If <paramref name="palette" /> is null (Nothing in
            Visual Basic), the conversion is a normal shift (right or left) and the painted image is 8 or 16-bit grayscale. If
            <paramref name="palette" /> is not null (Nothing in Visual Basic), the painted image is a 48-bit image.
            </param>
      <param name="mode">Value indicating whether <paramref name="palette" /> is used by the paint and image processing
            methods or only by the paint methods.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>Provides "on demand" window leveling for the paint methods and does not alter the image data. To convert the image
            data to a window leveled image, use <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" />.</para>
        <para>If <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> is specified,
            then all image processing methods will take the <paramref name="palette" /> into account.</para>
        <para>Only TIFF and DICOM file formats are capable of saving images that have been window-leveled. Images can be
            window-leveled by calling <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" /> and specifying
            <see cref="T:Leadtools.RasterWindowLevelMode">RasterWindowLevelMode.PaintAndProcessing</see> for the 
            <paramref name="mode" /> parameter, by using the <see cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" /> or by loading an image from a file
            format that supports Window Leveling. If a window-leveled image is saved as any other file format, the image data
            will be converted before being saved. For more information, refer to
            <see cref="T:Leadtools.Topics.SavingWindowLeveledBitmaps">Saving Window-Leveled Images</see>.</para>
        <para>LEADTOOLS supports two types of LUTs for 10-16-bit grayscale images (8-bit LUT and 16-bit LUT). 
            Typical grayscale image display and processing is done using an 8-bit LUT.  But, you can also use a 16-bit LUT, which offers more precision. 
            Some special video cards and monitors also support display of grayscale images using a 16-bit LUT.</para>
        <para>For a version of this function that uses an 8-bit palette, see <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub WindowLevelExtExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Load a 16-bit grayscale image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.DCM"))

         ' Get the min and max values
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)

         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim size As Integer = (1 &lt;&lt; (image.HighBit - image.LowBit + 1))
         Dim palette As RasterColor16() = New RasterColor16(size - 1) {}

         ' fill the first half of the LUT with RED
         Dim x As Integer = 0
         Do While x &lt; size / 2
            palette(x).R = RasterColor16.MaximumComponent
            palette(x).G = 0
            palette(x).B = 0
            palette(x).Reserved = 0
            x += 1
         Loop

         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' Fill the rest with gray values 
         x = (size \ 2)
         Do While x &lt; size
            palette(x).R = Convert.ToUInt16(Math.Min(RasterColor16.MaximumComponent, (Convert.ToUInt32(x - minVal) * RasterColor16.MaximumComponent) / (maxVal - minVal)))
            palette(x).G = palette(x).R
            palette(x).B = palette(x).R
            palette(x).Reserved = 0
            x += 1
         Loop
         image.WindowLevelExt(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing)

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_WindowLevel.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void WindowLevelExtExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // Load a 16-bit grayscale image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"IMAGE2.DCM"));

         // Get the min and max values
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);

         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit = minMaxBitsCmd.MaximumBit;

         int size = (1 &lt;&lt; (image.HighBit - image.LowBit + 1));
         RasterColor16[] palette = new RasterColor16[size];

         // fill the first half of the LUT with RED
         for(int x = 0; x &lt; size / 2; x++)
         {
            palette[x].R = RasterColor16.MaximumComponent;
            palette[x].G = 0;
            palette[x].B = 0;
            palette[x].Reserved = 0;
         }

         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // Fill the rest with gray values 
         for(int x = (size / 2); x &lt; size; x++)
         {
            palette[x].R = Convert.ToUInt16(Math.Min(RasterColor16.MaximumComponent, (Convert.ToUInt32(x - minVal) * RasterColor16.MaximumComponent) / (maxVal - minVal)));
            palette[x].G = palette[x].R;
            palette[x].B = palette[x].R;
            palette[x].Reserved = 0;
         }
         image.WindowLevelExt(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing);

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_WindowLevel.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void WindowLevelExtExample(RasterImage image, Stream destStream)
      {
         // Get the min and max values
         MinMaxBitsCommand minMaxBitsCmd = new MinMaxBitsCommand();
         minMaxBitsCmd.Run(image);
         MinMaxValuesCommand minMaxValuesCmd = new MinMaxValuesCommand();
         minMaxValuesCmd.Run(image);

         int lowBit = minMaxBitsCmd.MinimumBit;
         int highBit = minMaxBitsCmd.MaximumBit;

         int size = (1 &lt;&lt; (image.HighBit - image.LowBit + 1));
         RasterColor16[] palette = new RasterColor16[size];

         // fill the first half of the LUT with RED
         for (int x = 0; x &lt; size / 2; x++)
         {
            palette[x].R = RasterColor16.MaximumComponent;
            palette[x].G = 0;
            palette[x].B = 0;
            palette[x].Reserved = 0;
         }

         int minVal = minMaxValuesCmd.MinimumValue;
         int maxVal = minMaxValuesCmd.MaximumValue;

         // Fill the rest with gray values 
         for (int x = (size / 2); x &lt; size; x++)
         {
            palette[x].R = Convert.ToUInt16(Math.Min(RasterColor16.MaximumComponent, (Convert.ToUInt32(x - minVal) * RasterColor16.MaximumComponent) / (maxVal - minVal)));
            palette[x].G = palette[x].R;
            palette[x].B = palette[x].R;
            palette[x].Reserved = 0;
         }
         image.WindowLevelExt(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing);

         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub WindowLevelExtExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Get the min and max values
         Dim minMaxBitsCmd As MinMaxBitsCommand = New MinMaxBitsCommand()
         minMaxBitsCmd.Run(image)
         Dim minMaxValuesCmd As MinMaxValuesCommand = New MinMaxValuesCommand()
         minMaxValuesCmd.Run(image)

         Dim lowBit As Integer = minMaxBitsCmd.MinimumBit
         Dim highBit As Integer = minMaxBitsCmd.MaximumBit

         Dim size As Integer = (1 &lt;&lt; (image.HighBit - image.LowBit + 1))
         Dim palette As RasterColor16() = New RasterColor16(size - 1){}

         ' fill the first half of the LUT with RED
         Dim x As Integer = 0
         Do While x &lt; size / 2
            palette(x).R = RasterColor16.MaximumComponent
            palette(x).G = 0
            palette(x).B = 0
            palette(x).Reserved = 0
            x += 1
         Loop

         Dim minVal As Integer = minMaxValuesCmd.MinimumValue
         Dim maxVal As Integer = minMaxValuesCmd.MaximumValue

         ' Fill the rest with gray values 
         x = (size / 2)
         Do While x &lt; size
            palette(x).R = Convert.ToUInt16(Math.Min(RasterColor16.MaximumComponent, (Convert.ToUInt32(x - minVal) * RasterColor16.MaximumComponent) / (maxVal - minVal)))
            palette(x).G = palette(x).R
            palette(x).B = palette(x).R
            palette(x).Reserved = 0
            x += 1
         Loop
         image.WindowLevelExt(lowBit, highBit, palette, RasterWindowLevelMode.PaintAndProcessing)

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" />
      <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" />
      <seealso cref="M:Leadtools.RasterImage.WindowLevelExt(System.Int32,System.Int32,Leadtools.RasterColor16[],Leadtools.RasterWindowLevelMode)" />
    </member>
    <member name="M:Leadtools.RasterImage.Underlay(Leadtools.RasterImage,Leadtools.RasterImageUnderlayFlags)">
      <summary>Combines two images so that one appears to be an underlying texture for the other. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="underlayImage">The image that will be used as the underlying image.
            This is the image that appears to be on bottom and is grayscaled as it is combined with
            the target image.</param>
      <param name="flags">Indicators of how the underlying image is to be positioned.</param>
      <remarks>
        <para>This is most effective when the underlying image is a filtered one, such as an embossed image.</para>
        <para>This method changes the colors of the underlay to grayscale as it combines the images. It updates this
            <see cref="T:Leadtools.RasterImage" />, leaving the <paramref name="underlayImage" /> unchanged. <paramref name="underlayImage" /> can
            either be stretched or tiled to fill the image, as shown in the following illustration:</para>
        <para>
          <img src="Underlay.gif" />
        </para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.</para>
      </remarks>
      <example>
        <para>This example draws an ellipse on the image.</para>
        <code lang="VB">      Public Sub UnderlayExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' Load underlay image
         Dim underlayImage As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"))
         ' Use underlayImage as a tiled underlay for image
         image.Underlay(underlayImage, RasterImageUnderlayFlags.None)

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_underlay.BMP"), RasterImageFormat.Bmp, 0)

         image.Dispose()
         underlayImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void UnderlayExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // Load underlay image
         RasterImage underlayImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"));
         // Use underlayImage as a tiled underlay for image
         image.Underlay(underlayImage, RasterImageUnderlayFlags.None);

         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_underlay.BMP"), RasterImageFormat.Bmp, 0);

         image.Dispose();
         underlayImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void UnderlayExample(RasterImage image, RasterImage underlayImage, Stream destStream)
      {
         // Use underlayImage as a tiled underlay for image
         image.Underlay(underlayImage, RasterImageUnderlayFlags.None);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0);

         image.Dispose();
         underlayImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub UnderlayExample(ByVal image As RasterImage, ByVal underlayImage As RasterImage, ByVal destStream As Stream)
         ' Use underlayImage as a tiled underlay for image
         image.Underlay(underlayImage, RasterImageUnderlayFlags.None)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 0)

         image.Dispose()
         underlayImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CalculatePaintModeRectangle(System.Int32,System.Int32,Leadtools.LeadRect,Leadtools.RasterPaintSizeMode,Leadtools.RasterPaintAlignMode,Leadtools.RasterPaintAlignMode)">
      <summary>Adjusts the given rectangle based on the given paint mode properties. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="sourceWidth">The width of the source rectangle.</param>
      <param name="sourceHeight">The height of the source rectangle.</param>
      <param name="destinationRectangle">Destination rectangle.</param>
      <param name="sizeMode">Controls how the source rectangle is positioned inside the destination rectangle.</param>
      <param name="horizontalAlignMode">Controls how the source rectangle is aligned horizontally inside the destination rectangle.</param>
      <param name="verticalAlignMode">Controls how the source rectangle is aligned vertically inside the destination rectangle.</param>
      <returns>The new destination rectangle adjusted based on the size mode and alignment.</returns>
      <remarks>
        <para>This method allows you to calculate how a source rectangle can be adjusted into a destination rectangle based on 
            a size mode and alignment.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CalculatePaintModeRectangleExample()
         ' assume image width/height of 3000 x 1000
         ' assume client rectangle of 500 x 500
         Dim client As LeadRect = New LeadRect(0, 0, 500, 500)
         Dim fit As LeadRect = RasterImage.CalculatePaintModeRectangle(3000, 1000, client, RasterPaintSizeMode.Fit, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near)
         Console.WriteLine("{0},{1},{2},{3}", fit.Left, fit.Top, fit.Right, fit.Bottom)
      End Sub</code>
        <code lang="CS">      public void CalculatePaintModeRectangleExample()
      {
         // assume image width/height of 3000 x 1000
         // assume client rectangle of 500 x 500
         LeadRect client = new LeadRect(0, 0, 500, 500);
         LeadRect fit = RasterImage.CalculatePaintModeRectangle(3000, 1000, client, RasterPaintSizeMode.Fit, RasterPaintAlignMode.Near, RasterPaintAlignMode.Near);
         Console.WriteLine("{0},{1},{2},{3}", fit.Left, fit.Top, fit.Right, fit.Bottom);
      }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.FromDib(System.IntPtr)">
      <summary>Creates a new image from the specified Windows device independent bitmap (DIB) stored in an unmanaged pointer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="hdib">Handle to the Windows DIB.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para> When this method is completed, there are two copies of the image in memory: the original DIB and the
            <see cref="T:Leadtools.RasterImage" /> it creates. Freeing one will not affect the other.</para>
        <para>This method supports the standard DIB formats (BI_RGB and BI_BITFIELDS) as well as some FOURCC (Four Character Code)
            formats that some capture cards output.</para>
        <para>These are the FOURCC that LEADTOOLS supports at the moment:</para>
        <para>YVU9 (YUV9), I420 (YUV12), YUV2 , YV12 , IF09 , IYUV , UYVY , cyuv, YUY2, YVYU, Y41P, Y211, Y41T, Y42T.</para>
        <para>
            This method does not support signed images.
            </para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.FromDibArray(System.Byte[],System.Int32)">
      <summary>Creates a new image from the specified Windows device independent bitmap (DIB) stored in a managed array. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="hdib">Handle to the Windows DIB.</param>
      <param name="offset">Byte offset into <paramref name="hdib" /> where the data starts.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para> When this method is completed, there are two copies of the image in memory: the original DIB and the
            <see cref="T:Leadtools.RasterImage" /> it creates. Freeing one will not affect the other.</para>
        <para>This method supports the standard DIB formats (BI_RGB and BI_BITFIELDS) as well as some FOURCC (Four Character Code)
            formats that some capture cards output.</para>
        <para>These are the FOURCC that LEADTOOLS supports at the moment:</para>
        <para>YVU9 (YUV9), I420 (YUV12), YUV2 , YV12 , IF09 , IYUV , UYVY , cyuv, YUY2, YVYU, Y41P, Y211, Y41T, Y42T.</para>
        <para>
            This method does not support signed images.
            </para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ToDibArray(Leadtools.RasterConvertToDibType)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)">
      <summary>Converts this <see cref="T:Leadtools.RasterImage" /> into a Windows device independent bitmap (DIB). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="type">Type of DIB to create.</param>
      <returns>A handle to the Windows DIB.</returns>
      <br />
      <remarks>
        <para>When this method is completed, there are two copies of the image in memory: the DIB and the original
            <see cref="T:Leadtools.RasterImage" />. Freeing one will not affect the other.</para>
        <para>This methods allocates a DIB bitmap and copies the <see cref="T:Leadtools.RasterImage" /> to the DIB.</para>
        <para>
          <strong>NOTE:</strong> This method returns the data in an unmanaged buffer. The caller is repsonsible for freeing the DIB's IntPtr when it is no longer needed. You can use <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">Marshal.FreeHGlobal</see>.</para>
        <para>A DIB consists of one of the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>a BITMAPFILEHEADER</description>
            </item>
            <item>
              <description>a BITMAPV4HEADER(introduced in Windows 95 and Windows NT 4.0)</description>
            </item>
            <item>
              <description>or a BITMAPV5HEADER (introduced in Windows 2000 and Windows 98)</description>
            </item>
          </list>
        </para>
        <para>followed by a color table and then the bitmap data. The resulting DIB type is determined by the value of the
            <paramref name="type" /> parameter.</para>
        <para>The orientation of the image and color order will depend on how the image was loaded into the
            <see cref="T:Leadtools.RasterImage" />.</para>
        <para>When you no longer need the DIB, you can free it using the Windows GlobalFree function or
            <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.IntroductionDIBsDDBsAndTheClipboard">Introduction: DIBs, DDBs, and the Clipboard</see>.</para>
        <para>This function does not support signed images.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDibArray(System.Byte[],System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.ToDibArray(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.FromHBitmap</seealso>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ToHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.ChangeFromHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ChangeToHBitmap</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub ToDibExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim dib As IntPtr
         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))
            dib = image.ToDib(RasterConvertToDibType.BitmapInfoHeader)
         End Using

         Using image As RasterImage = RasterImage.FromDib(dib)
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromDib.bmp"), RasterImageFormat.Bmp, 0)
         End Using

         Marshal.FreeHGlobal(dib)

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ToDibExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         IntPtr dib;

         using (RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")))
         {
            dib = image.ToDib(RasterConvertToDibType.BitmapInfoHeader);
         }

         using(RasterImage image = RasterImage.FromDib(dib))
         {
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromDib.bmp"), RasterImageFormat.Bmp, 0);
         }

         Marshal.FreeHGlobal(dib);

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.ToDibArray(Leadtools.RasterConvertToDibType)">
      <summary>Converts this <see cref="T:Leadtools.RasterImage" /> into a Windows device independent bitmap (DIB). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="type">Type of DIB to create.</param>
      <returns>An array of <see cref="T:System.Byte" /> that contains the handle to the Windows DIB.</returns>
      <br />
      <remarks>
        <para>When this method is completed, there are two copies of the image in memory: the DIB and the original
            <see cref="T:Leadtools.RasterImage" />. Freeing one will not affect the other.</para>
        <para>This methods allocates a DIB bitmap and copies the <see cref="T:Leadtools.RasterImage" /> to the DIB.</para>
        <para>A DIB consists of one of the following:</para>
        <para>
          <list type="bullet">
            <item>
              <description>a BITMAPFILEHEADER</description>
            </item>
            <item>
              <description>a BITMAPV4HEADER(introduced in Windows 95 and Windows NT 4.0)</description>
            </item>
            <item>
              <description>or a BITMAPV5HEADER (introduced in Windows 2000 and Windows 98)</description>
            </item>
          </list>
        </para>
        <para>followed by a color table and then the bitmap data. The resulting DIB type is determined by the value of the
            <paramref name="type" /> parameter.</para>
        <para>The orientation of the image and color order will depend on how the image was loaded into the
            <see cref="T:Leadtools.RasterImage" />.</para>
        <para>When you no longer need the DIB, you can free it using the Windows GlobalFree function or
            <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.IntroductionDIBsDDBsAndTheClipboard">Introduction: DIBs, DDBs, and the Clipboard</see>.</para>
        <para>This function does not support signed images.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDibArray(System.Byte[],System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.FromHBitmap</seealso>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ToHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.ChangeFromHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ChangeToHBitmap</seealso>
      <example>
        <para />
        <code lang="VB">      Public Sub ToDibArrayExample()
         Dim codecs As New RasterCodecs()

         Dim dibData() As Byte

         Using image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))
            dibData = image.ToDibArray(RasterConvertToDibType.BitmapInfoHeader)
         End Using

         Using image As RasterImage = RasterImage.FromDibArray(dibData, 0)
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromDibArray.bmp"), RasterImageFormat.Bmp, 0)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ToDibArrayExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         byte[] dibData;

         using(RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")))
         {
            dibData = image.ToDibArray(RasterConvertToDibType.BitmapInfoHeader);
         }

         using(RasterImage image = RasterImage.FromDibArray(dibData, 0))
         {
            codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "Image1_FromDibArray.bmp"), RasterImageFormat.Bmp, 0);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)">
      <summary>Changes a Windows device independent bitmap (DIB) to a LEAD <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>DDB|DIB|Device independent bitmap|Device dependent bitmap|Palettes|FOURCC|Four Character Code | YVU9|DIB|I420|YUV12|YUV9|YUV2|YV12|IF09 | IYUV|UYVY|cyuv|YUY2|YVYU|Y41P|Y211|Y41T|Y42T</keywords>
      <param name="hdib">The DIB handle to be changed.</param>
      <returns>The newly created <see cref="T:Leadtools.RasterImage" /> object.</returns>
      <remarks>
        <para>This method results in only one copy of the image, and it invalidates the DIB handle.</para>
        <para>This method supports the standard DIB formats (BI_RGB and BI_BITFIELDS) 
             as well as some FOURCC (Four Character Code) formats that some capture cards output.</para>
        <para>The following formats are the FOURCC formats that LEADTOOLS currently supports:</para>
        <list type="bullet">
          <item>
            <description>
             YVU9 (YUV9)
             </description>
          </item>
          <item>
            <description>
             I420 (YUV12)
             </description>
          </item>
          <item>
            <description>
             YUV2 
             </description>
          </item>
          <item>
            <description>
             YV12
             </description>
          </item>
          <item>
            <description>
             IF09
             </description>
          </item>
          <item>
            <description>
             IYUV
             </description>
          </item>
          <item>
            <description>
             UYVY
             </description>
          </item>
          <item>
            <description>
             cyuv
             </description>
          </item>
          <item>
            <description>
             YUY2
             </description>
          </item>
          <item>
            <description>
             YVYU
             </description>
          </item>
          <item>
            <description>
             Y41P
             </description>
          </item>
          <item>
            <description>
             Y211
             </description>
          </item>
          <item>
            <description>
             Y41T 
             </description>
          </item>
          <item>
            <description>
             Y42T
             </description>
          </item>
        </list>
        <para>This function does not support signed images.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDibArray(System.Byte[],System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.ToDibArray(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.FromHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ToHBitmap</seealso>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.ChangeFromHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ChangeToHBitmap</seealso>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.ChangeToDib(Leadtools.RasterConvertToDibType)">
      <summary>Changes a LEAD <see cref="T:Leadtools.RasterImage" /> object to a Windows Device Independent Bitmap (DIB). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>DDB|DIB|Device independent bitmap|Device dependent bitmap|Palettes|Clipboards|Copying|Pasting</keywords>
      <param name="type">
            Type of DIB to create. Possible values are:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term><see cref="T:Leadtools.RasterConvertToDibType">RasterConvertToDibType.BitmapInfoHeader</see></term><description>DIB that uses a BITMAPINFOHEADER</description></item><item><term><see cref="T:Leadtools.RasterConvertToDibType">RasterConvertToDibType.BitmapV4Header</see></term><description>DIB that uses a BITMAPV4HEADER. (Introduced in Windows 95 and Windows NT 4.0)</description></item><item><term><see cref="T:Leadtools.RasterConvertToDibType">RasterConvertToDibType.BitmapV5Header</see></term><description>DIB that uses a BITMAPV5HEADER (Introduced in Windows 2000 and Windows 98)</description></item></list></param>
      <returns>A handle to the device independent bitmap (DIB) this method creates.</returns>
      <remarks>
        <para>A DIB consists of one of the following:
            <list type="bullet"><item><description>a BITMAPFILEHEADER,</description></item><item><description>a BITMAPV4HEADER (introduced in Windows 95 and Windows NT 4.0),</description></item><item><description>or a BITMAPV5HEADER (introduced in Windows 2000 and Windows 98),</description></item></list></para>
        <para>followed by a color table and then the bitmap data. 
            The resulting DIB type is determined by the value of the <paramref name="type" /> parameter.</para>
        <para>The orientation of the image and color order will depend on how the 
            image was loaded into the <see cref="T:Leadtools.RasterImage" />.</para>
        <para>When you no longer need the DIB, you can free it using the 
            Windows <strong>GlobalFree</strong> function.</para>
        <para>This method does not support signed data images. It will throw 
            an exception of type <see cref="T:Leadtools.RasterException" /> with code value
            <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.SignedDataNotSupported</see> if this <see cref="T:Leadtools.RasterImage" /> has a signed data image.</para>
        <para>For more information on DDBs and DIBs, refer to <see cref="T:Leadtools.Topics.UsingDibsDdbsAndTheClipboard">Using DIBs, DDBs, and the Clipboard</see>.</para>
      </remarks>
      <seealso cref="M:Leadtools.RasterImage.FromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.RasterImage.FromDibArray(System.Byte[],System.Int32)" />
      <seealso cref="M:Leadtools.RasterImage.ToDibArray(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.FromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.FromHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ToDib(Leadtools.RasterConvertToDibType)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ToHBitmap</seealso>
      <seealso cref="M:Leadtools.RasterImage.ChangeFromDib(System.IntPtr)" />
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeFromHBitmap(System.IntPtr,System.IntPtr,System.IntPtr)">RasterImageConverter.ChangeFromHBitmap</seealso>
      <seealso cref="M:Leadtools.Drawing.RasterImageConverter.ChangeToHBitmap(Leadtools.RasterImage,System.IntPtr)">RasterImageConverter.ChangeToHBitmap</seealso>
      <example>
        <para>This example loads a <see cref="T:Leadtools.RasterImage" />, changes it to a V5 DIB and writes out the DIB as a bitmap file.</para>
        <code lang="VB">      &lt;DllImport("Kernel32", CharSet:=CharSet.Auto)&gt; _
      Shared Function GlobalSize(ByVal hMem As IntPtr) As IntPtr
      End Function
      &lt;DllImport("Kernel32", CharSet:=CharSet.Auto)&gt; _
      Shared Function GlobalLock(ByVal hMem As IntPtr) As IntPtr
      End Function

      &lt;DllImport("Kernel32", CharSet:=CharSet.Auto)&gt; _
      Shared Function GlobalUnlock(ByVal hMem As IntPtr) As Integer
      End Function

      &lt;DllImport("Kernel32", CharSet:=CharSet.Auto)&gt; _
      Shared Function GlobalFree(ByVal hMem As IntPtr) As IntPtr
      End Function

      &lt;StructLayout(LayoutKind.Sequential, Pack:=1)&gt; _
      Class BITMAPFILEHEADER
         Public bfType As UShort
         Public bfSize As UInteger
         Public bfReserved1 As UShort
         Public bfReserved2 As UShort
         Public bfOffBits As UInteger
      End Class

      &lt;StructLayout(LayoutKind.Sequential, Pack:=1)&gt; _
      Class BITMAPINFOHEADER
         Public biSize As UInteger
         Public biWidth As Integer
         Public biHeight As Integer
         Public biPlanes As UShort
         Public biBitCount As UShort
         Public biCompression As UInteger
         Public biSizeImage As UInteger
         Public biXPelsPerMeter As Integer
         Public biYPelsPerMeter As Integer
         Public biClrUsed As UInteger
         Public biClrImportant As UInteger
      End Class

      &lt;StructLayout(LayoutKind.Sequential, Pack:=1)&gt; _
      Class RGBQUAD
         Public rgbBlue As Byte
         Public rgbGreen As Byte
         Public rgbRed As Byte
         Public rgbReserved As Byte
      End Class


      Public Sub ChangeToDibExample()
         Dim codecs As New RasterCodecs()

         ' Load an image
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1)

         ' Change to DIB
         Dim hdib As IntPtr = image.ChangeToDib(RasterConvertToDibType.BitmapInfoHeader)

         ' Dispose the image since it is unusable now
         image.Dispose()

         ' Clean up
         codecs.Dispose()

         ' Save this DIB to disk as a BMP file

         Dim dibSize As Integer = GlobalSize(hdib).ToInt32()

         Dim bmfh As New BITMAPFILEHEADER()
         bmfh.bfType = &amp;H4D42  ' "BM"
         bmfh.bfSize = CUInt(Marshal.SizeOf(GetType(BITMAPFILEHEADER)) + dibSize)
         bmfh.bfReserved1 = 0
         bmfh.bfReserved2 = 0

         Dim pdib As IntPtr = GlobalLock(hdib)

         Dim bmih As New BITMAPINFOHEADER()
         Marshal.PtrToStructure(pdib, bmih)

         bmfh.bfOffBits = CUInt(Marshal.SizeOf(GetType(BITMAPFILEHEADER)) + bmih.biSize + bmih.biClrUsed * Marshal.SizeOf(GetType(RGBQUAD)))

         Using fs As FileStream = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "Image1_ToDib.bmp"))
            Dim writer As New BinaryWriter(fs)
            writer.Write(bmfh.bfType)
            writer.Write(bmfh.bfSize)
            writer.Write(bmfh.bfReserved1)
            writer.Write(bmfh.bfReserved2)
            writer.Write(bmfh.bfOffBits)

            Dim buffer(1023) As Byte
            Dim offset As Integer = 0
            While (offset &lt; dibSize)
               Dim bytes As Integer = Math.Min(dibSize - offset, buffer.Length)
               Marshal.Copy(New IntPtr(pdib.ToInt64() + offset), buffer, 0, bytes)
               fs.Write(buffer, 0, bytes)

               offset = offset + bytes
            End While
         End Using

         GlobalUnlock(hdib)
         GlobalFree(hdib)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      [DllImport("Kernel32", CharSet = CharSet.Auto)]
      static extern IntPtr GlobalSize(IntPtr hMem);
      [DllImport("Kernel32", CharSet = CharSet.Auto)]
      static extern IntPtr GlobalLock(IntPtr hMem);

      [DllImport("Kernel32", CharSet = CharSet.Auto)]
      static extern int GlobalUnlock(IntPtr hMem);

      [DllImport("Kernel32", CharSet = CharSet.Auto)]
      static extern IntPtr GlobalFree(IntPtr hMem);

      [StructLayout(LayoutKind.Sequential, Pack = 1)]
      class BITMAPFILEHEADER
      {
         public ushort bfType;
         public uint bfSize;
         public ushort bfReserved1;
         public ushort bfReserved2;
         public uint bfOffBits;
      }

      [StructLayout(LayoutKind.Sequential, Pack = 1)]
      class BITMAPINFOHEADER
      {
         public uint biSize;
         public int biWidth;
         public int biHeight;
         public ushort biPlanes;
         public ushort biBitCount;
         public uint biCompression;
         public uint biSizeImage;
         public int biXPelsPerMeter;
         public int biYPelsPerMeter;
         public uint biClrUsed;
         public uint biClrImportant;
      }

      [StructLayout(LayoutKind.Sequential, Pack = 1)]
      class RGBQUAD
      {
         public byte rgbBlue;
         public byte rgbGreen;
         public byte rgbRed;
         public byte rgbReserved;
      }


      public void ChangeToDibExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         // Load an image
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"), 24, CodecsLoadByteOrder.BgrOrGray, 1, 1);

         // Change to DIB
         IntPtr hdib = image.ChangeToDib(RasterConvertToDibType.BitmapInfoHeader);

         // Dispose the image since it is unusable now
         image.Dispose();

         // Clean up
         codecs.Dispose();

         // Save this DIB to disk as a BMP file

         int dibSize = GlobalSize(hdib).ToInt32();

         BITMAPFILEHEADER bmfh = new BITMAPFILEHEADER();
         bmfh.bfType = 0x4d42; // "BM"
         bmfh.bfSize = (uint)(Marshal.SizeOf(typeof(BITMAPFILEHEADER)) + dibSize);
         bmfh.bfReserved1 = 0;
         bmfh.bfReserved2 = 0;

         IntPtr pdib = GlobalLock(hdib);

         BITMAPINFOHEADER bmih = new BITMAPINFOHEADER();
         Marshal.PtrToStructure(pdib, bmih);

         bmfh.bfOffBits = (uint)(Marshal.SizeOf(typeof(BITMAPFILEHEADER)) + bmih.biSize + bmih.biClrUsed * Marshal.SizeOf(typeof(RGBQUAD)));

         using(FileStream fs = File.Create(Path.Combine(LEAD_VARS.ImagesDir, "Image1_ToDib.bmp")))
         {
            BinaryWriter writer = new BinaryWriter(fs);
            writer.Write(bmfh.bfType);
            writer.Write(bmfh.bfSize);
            writer.Write(bmfh.bfReserved1);
            writer.Write(bmfh.bfReserved2);
            writer.Write(bmfh.bfOffBits);

            byte[] buffer = new byte[1024];
            int offset = 0;
            while(offset &lt; dibSize)
            {
               int bytes = Math.Min(dibSize - offset, buffer.Length);
               Marshal.Copy(new IntPtr(pdib.ToInt64() + offset), buffer, 0, bytes);
               fs.Write(buffer, 0, bytes);

               offset += bytes;
            }
         }

         GlobalUnlock(hdib);
         GlobalFree(hdib);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.CopyMetadataTo(Leadtools.RasterImage,Leadtools.RasterMetadataFlags)">
      <summary>Copies the metadata (tags, comments, and markers) to the given image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">Destination image</param>
      <param name="flags">Type of metadata to copy</param>
      <remarks>
        <para>This methods copies the metadata found in the <see cref="P:Leadtools.RasterImage.Tags" />, <see cref="P:Leadtools.RasterImage.Comments" /> and/or
            <see cref="P:Leadtools.RasterImage.Markers" /> collections of this <see cref="T:Leadtools.RasterImage" /> to <paramref name="image" />.</para>
        <para>Before the copy operation, this method will clear any metadata already found in <paramref name="image" />.</para>
        <para>For more information on GeoKeys, refer to <see cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NonImageData">Non Image Data</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub CopyMetadataToExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' load 2 TIF images
         Dim image1 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"))
         Dim image2 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR2.TIF"))

         ' show the number of tags in each image
         MessageBox.Show(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         ' add a few tags to the first image
         Dim tag As RasterTagMetadata = New RasterTagMetadata(RasterTagMetadata.Copyright, RasterTagMetadataDataType.Byte, New Byte() {1, 2, 3})
         image1.Tags.Add(tag)

         tag = New RasterTagMetadata(RasterTagMetadata.ExifGps, RasterTagMetadataDataType.Byte, New Byte() {4, 5, 6})
         image1.Tags.Add(tag)

         ' show the number of tags in each image
         MessageBox.Show(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         ' copy the tags from first image to the second
         image1.CopyMetadataTo(image2, RasterMetadataFlags.Tags)

         ' show the number of tags in each image
         MessageBox.Show(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         image1.Dispose()
         image2.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CopyMetadataToExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // load 2 TIF images
         RasterImage image1 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"));
         RasterImage image2 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR2.TIF"));

         // show the number of tags in each image
         MessageBox.Show(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         // add a few tags to the first image
         RasterTagMetadata tag = new RasterTagMetadata(RasterTagMetadata.Copyright, RasterTagMetadataDataType.Byte, new byte[] { 1, 2, 3 });
         image1.Tags.Add(tag);

         tag = new RasterTagMetadata(RasterTagMetadata.ExifGps, RasterTagMetadataDataType.Byte, new byte[] { 4, 5, 6 });
         image1.Tags.Add(tag);

         // show the number of tags in each image
         MessageBox.Show(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         // copy the tags from first image to the second
         image1.CopyMetadataTo(image2, RasterMetadataFlags.Tags);

         // show the number of tags in each image
         MessageBox.Show(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         image1.Dispose();
         image2.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void CopyMetadataToExample(RasterImage image1, RasterImage image2)
      {
         // images should be 2 TIF images
         // show the number of tags in each image
         Debug.WriteLine(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         // add a few tags to the first image
         RasterTagMetadata tag = new RasterTagMetadata(RasterTagMetadata.Copyright, RasterTagMetadataDataType.Byte, new byte[] { 1, 2, 3 });
         image1.Tags.Add(tag);

         tag = new RasterTagMetadata(RasterTagMetadata.ExifGps, RasterTagMetadataDataType.Byte, new byte[] { 4, 5, 6 });
         image1.Tags.Add(tag);

         // show the number of tags in each image
         Debug.WriteLine(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         // copy the tags from first image to the second
         image1.CopyMetadataTo(image2, RasterMetadataFlags.Tags);

         // show the number of tags in each image
         Debug.WriteLine(string.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count));

         image1.Dispose();
         image2.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub CopyMetadataToExample(ByVal image1 As RasterImage, ByVal image2 As RasterImage)
         ' images should be 2 TIF images
         ' show the number of tags in each image
         Debug.WriteLine(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         ' add a few tags to the first image
         Dim tag As RasterTagMetadata = New RasterTagMetadata(RasterTagMetadata.Copyright, RasterTagMetadataDataType.Byte, New Byte() { 1, 2, 3 })
         image1.Tags.Add(tag)

         tag = New RasterTagMetadata(RasterTagMetadata.ExifGps, RasterTagMetadataDataType.Byte, New Byte() { 4, 5, 6 })
         image1.Tags.Add(tag)

         ' show the number of tags in each image
         Debug.WriteLine(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         ' copy the tags from first image to the second
         image1.CopyMetadataTo(image2, RasterMetadataFlags.Tags)

         ' show the number of tags in each image
         Debug.WriteLine(String.Format("Tags in image1: {0}, tags in image2: {1}", image1.Tags.Count, image2.Tags.Count))

         image1.Dispose()
         image2.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="F:Leadtools.RasterImage.MaxOverlays">
      <summary>Gets the maximum number of overlays allowed in a <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)">
      <summary>Gets the overlay image for the specified index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The index of the overlay being retrieved.  This index is zero-based and should be less or equal
            than <see cref="F:Leadtools.RasterImage.MaxOverlays" />.</param>
      <param name="mode">Determines how to retreive the image, possible values are:
            <list type="table"><listheader><term>
                    Mode
                 </term><description>
                    Description
                 </description></listheader><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Copy</see></term><description>
                    A copy of the overlay image is retrieved from the overlay list.
                 </description></item><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see></term><description>
                    The actual overlay image is retrieved. No copy is made. You should be careful when
                    modifying the returned overlay image because you can modify/invalidate the entry in the overlay bitmap list.
                    </description></item><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Move</see></term><description>
                    The actual overlay image is retrieved. The image is also removed from the overlay list. This is recommended
                    over <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see>.
                 </description></item></list></param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that represents the overlay image of the specified index.</returns>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method can be used to get a copy of the overlay image
            (<see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Copy</see>) or to get the image without making a copy
            (<see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see> or
            <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Move</see>).</para>
        <para>The quickest way to get the overlay image is to avoid making a copy. For more information on using
            <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see>, refer to the "Remarks" section of
            <see cref="M:Leadtools.RasterImage.SetOverlayImage(System.Int32,Leadtools.RasterImage,Leadtools.RasterGetSetOverlayImageMode)" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub GetOverlayImageExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' load an image and set an overlay
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.DCM"), 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
         Dim imageOverlay1 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"), 1, CodecsLoadByteOrder.Rgb, 1, 1)
         Dim imageOverlay2 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"), 1, CodecsLoadByteOrder.Rgb, 1, 1)
         image.SetOverlayImage(0, imageOverlay1, RasterGetSetOverlayImageMode.Copy)
         image.SetOverlayImage(1, imageOverlay2, RasterGetSetOverlayImageMode.Copy)

         ' update the attributes of one of the overlays
         Dim attributes As RasterOverlayAttributes = image.GetOverlayAttributes(0, RasterGetSetOverlayAttributesFlags.Color Or RasterGetSetOverlayAttributesFlags.Flags Or RasterGetSetOverlayAttributesFlags.Origin Or RasterGetSetOverlayAttributesFlags.BitIndex)

         attributes.Color = New RasterColor(255, 255, 255)
         attributes.AutoPaint = True
         attributes.AutoProcess = True
         attributes.Origin = New LeadPoint(5, 5)
         attributes.BitPosition = image.BitsPerPixel - 1

         image.UpdateOverlayAttributes(0, attributes, RasterGetSetOverlayAttributesFlags.Color Or RasterGetSetOverlayAttributesFlags.Flags Or RasterGetSetOverlayAttributesFlags.Origin Or RasterGetSetOverlayAttributesFlags.BitIndex)


         Dim count As Integer = image.OverlayCount
         Dim i As Integer = 0
         Do While i &lt; count
            Dim overlayTest As RasterImage = image.GetOverlayImage(i, RasterGetSetOverlayImageMode.NoCopy)
            Try
               Dim fileName As String = String.Format(Path.Combine(LEAD_VARS.ImagesDir, "overlay{0}_copy.bmp"), i)
               codecs.Save(overlayTest, fileName, RasterImageFormat.Bmp, 1)
            Finally
               CType(overlayTest, IDisposable).Dispose()
            End Try
            i += 1
         Loop

         image.Dispose()
         imageOverlay1.Dispose()
         imageOverlay2.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void GetOverlayImageExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         // load an image and set an overlay
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE2.DCM"), 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
         RasterImage imageOverlay1 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"), 1, CodecsLoadByteOrder.Rgb, 1, 1);
         RasterImage imageOverlay2 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "ULAY1.BMP"), 1, CodecsLoadByteOrder.Rgb, 1, 1);
         image.SetOverlayImage(0, imageOverlay1, RasterGetSetOverlayImageMode.Copy);
         image.SetOverlayImage(1, imageOverlay2, RasterGetSetOverlayImageMode.Copy);

         // update the attributes of one of the overlays
         RasterOverlayAttributes attributes = image.GetOverlayAttributes(0,
            RasterGetSetOverlayAttributesFlags.Color |
            RasterGetSetOverlayAttributesFlags.Flags |
            RasterGetSetOverlayAttributesFlags.Origin |
            RasterGetSetOverlayAttributesFlags.BitIndex);

         attributes.Color = new RasterColor(255, 255, 255);
         attributes.AutoPaint = true;
         attributes.AutoProcess = true;
         attributes.Origin = new LeadPoint(5, 5);
         attributes.BitPosition = image.BitsPerPixel - 1;

         image.UpdateOverlayAttributes(
            0,
            attributes,
            RasterGetSetOverlayAttributesFlags.Color |
            RasterGetSetOverlayAttributesFlags.Flags |
            RasterGetSetOverlayAttributesFlags.Origin |
            RasterGetSetOverlayAttributesFlags.BitIndex);


         int count = image.OverlayCount;
         for(int i = 0; i &lt; count; i++)
         {
            using(RasterImage overlayTest = image.GetOverlayImage(i, RasterGetSetOverlayImageMode.NoCopy))
            {               
               string fileName = string.Format(Path.Combine(LEAD_VARS.ImagesDir,"overlay{0}_copy.bmp"), i);
               codecs.Save(overlayTest, fileName, RasterImageFormat.Bmp, 1);
            }
         }

         image.Dispose();
         imageOverlay1.Dispose();
         imageOverlay2.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void GetOverlayImageExample(RasterImage image, RasterImage imageOverlay1, RasterImage imageOverlay2, Stream destStream1, Stream destStream2)
      {
         // for this sample:
         //  image         == 24-bit image (image1.cmp)
         //  imageOverlay1 == 1-bit image (ulay1.bmp)
         //  imageOverlay2 == 1-bit image (ulay2.bmp)
         image.SetOverlayImage(0, imageOverlay1, RasterGetSetOverlayImageMode.Copy);
         image.SetOverlayImage(1, imageOverlay2, RasterGetSetOverlayImageMode.Copy);
         // update the attributes of one of the overlays
         RasterOverlayAttributes attributes = image.GetOverlayAttributes(0,
            RasterGetSetOverlayAttributesFlags.Color |
            RasterGetSetOverlayAttributesFlags.Flags |
            RasterGetSetOverlayAttributesFlags.Origin |
            RasterGetSetOverlayAttributesFlags.BitIndex);

         attributes.Color = new RasterColor(255, 255, 255);
         attributes.AutoPaint = true;
         attributes.AutoProcess = true;
         attributes.Origin = new LeadPoint(5, 5);
         attributes.BitPosition = image.BitsPerPixel - 1;

         image.UpdateOverlayAttributes(
            0,
            attributes,
            RasterGetSetOverlayAttributesFlags.Color |
            RasterGetSetOverlayAttributesFlags.Flags |
            RasterGetSetOverlayAttributesFlags.Origin |
            RasterGetSetOverlayAttributesFlags.BitIndex);

         RasterCodecs codecs = new RasterCodecs();
         int count = image.OverlayCount;
         Debug.Assert(count == 2);

         RasterImage overlayTest = image.GetOverlayImage(0, RasterGetSetOverlayImageMode.NoCopy);
         codecs.Save(overlayTest, destStream1, RasterImageFormat.Png, 1);
         overlayTest = image.GetOverlayImage(0, RasterGetSetOverlayImageMode.NoCopy);
         codecs.Save(overlayTest, destStream2, RasterImageFormat.Png, 1);

         image.Dispose();
         overlayTest.Dispose();
         imageOverlay1.Dispose();
         imageOverlay2.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GetOverlayImageExample(ByVal image As RasterImage, ByVal imageOverlay1 As RasterImage, ByVal imageOverlay2 As RasterImage, ByVal destStream1 As Stream, ByVal destStream2 As Stream)
         ' for this sample:
         '  image         == 24-bit image (image1.cmp)
         '  imageOverlay1 == 1-bit image (ulay1.bmp)
         '  imageOverlay2 == 1-bit image (ulay2.bmp)
         image.SetOverlayImage(0, imageOverlay1, RasterGetSetOverlayImageMode.Copy)
         image.SetOverlayImage(1, imageOverlay2, RasterGetSetOverlayImageMode.Copy)
         ' update the attributes of one of the overlays
         Dim attributes As RasterOverlayAttributes = image.GetOverlayAttributes(0, RasterGetSetOverlayAttributesFlags.Color Or RasterGetSetOverlayAttributesFlags.Flags Or RasterGetSetOverlayAttributesFlags.Origin Or RasterGetSetOverlayAttributesFlags.BitIndex)

         attributes.Color = New RasterColor(255, 255, 255)
         attributes.AutoPaint = True
         attributes.AutoProcess = True
         attributes.Origin = New LeadPoint(5, 5)
         attributes.BitPosition = image.BitsPerPixel - 1

         image.UpdateOverlayAttributes(0, attributes, RasterGetSetOverlayAttributesFlags.Color Or RasterGetSetOverlayAttributesFlags.Flags Or RasterGetSetOverlayAttributesFlags.Origin Or RasterGetSetOverlayAttributesFlags.BitIndex)

         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim count As Integer = image.OverlayCount
         Debug.Assert(count = 2)

         Dim overlayTest As RasterImage = image.GetOverlayImage(0, RasterGetSetOverlayImageMode.NoCopy)
         codecs.Save(overlayTest, destStream1, RasterImageFormat.Png, 1)
         overlayTest = image.GetOverlayImage(0, RasterGetSetOverlayImageMode.NoCopy)
         codecs.Save(overlayTest, destStream2, RasterImageFormat.Png, 1)

         image.Dispose()
         overlayTest.Dispose()
         imageOverlay1.Dispose()
         imageOverlay2.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.SetOverlayImage(System.Int32,Leadtools.RasterImage,Leadtools.RasterGetSetOverlayImageMode)">
      <summary>Sets the overlay image for a certain index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The index of the overlay for which to set the image.  This index is zero-based and
            should be less than or equal to <see cref="F:Leadtools.RasterImage.MaxOverlays" />.</param>
      <param name="overlayImage">The new overlay image. This can be null (Nothing in Visual Basic), in which case
            the corresponding overlay image will be freed.</param>
      <param name="mode">Determines how to insert the image, possible values are:
            <list type="table"><listheader><term>
                    Mode
                 </term><description>
                    Description
                 </description></listheader><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Copy</see></term><description>
                    A copy of <paramref name="overlayImage" /> is inserted in the overlay list.
                 </description></item><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see></term><description><paramref name="overlayImage" /> is set into the overlay list without making a copy.  You should be careful when
                    modifying <paramref name="overlayImage" /> because you can modify/invalidate the entry in the overlay image list.
                    </description></item><item><term><see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Move</see></term><description><paramref name="overlayImage" /> is moved into the overlay list. It will also be disposed, so you cannot make changes to
                    it.  This is recommended over <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see>.
                 </description></item></list></param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>Calling this method with a valid image set in <paramref name="overlayImage" /> frees the old overlay image at the specified index
            and sets the overlay image at the index to the new image referenced by <paramref name="overlayImage" />.</para>
        <para>If <paramref name="overlayImage" /> is null (Nothing in Visual Basic), the old overlay image is freed and the size is reset to:</para>
        <para>
          <c>
            OverlayWidth = Image.ImageWidth - OverlayImage.Origin.X<br />
            OverlayHeight = Image.ImageHeight - OverlayImage.Origin.Y<br /></c>
        </para>
        <para>If <paramref name="mode" /> is <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.NoCopy</see> and <paramref name="overlayImage" />
            is not null (Nothing), the image is inserted as is into the overlay array. This means whenever you update the data from
            <paramref name="overlayImage" />, the overlay image is changed too. Great care should be taken when using this flag because you can
            invalidate the overlay image stored in the array. For example, if you dispose the overlay image, the data pointed to
            by the overlay image from the internal array is also freed, but the array does not know that this has happened and
            thinks the data pointer is still valid. If the overlay image is accessed in some way, a crash will occur. A safer way
            of quickly setting the data is to use <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Move</see>.</para>
        <para>If <paramref name="mode" /> is <see cref="T:Leadtools.RasterGetSetOverlayImageMode">RasterGetSetOverlayImageMode.Move</see>, the data from the
            <paramref name="overlayImage" /> is copied into the overlay array and then the <paramref name="overlayImage" /> object is disposed. This means
            that you can do anything with the <paramref name="overlayImage" /> object and the overlay image stored in the array will be
            unaffected. This is the most efficient way of setting the overlay image, because no copy will take place.</para>
        <para>
          <paramref name="overlayImage" /> must reference an image that is 1-bit, overwise, this method will throw an exception.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.SetOverlayImageSize(System.Int32,System.Int32,System.Int32)">
      <summary>Changes the size of the overlay image for a certain index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The index of the overlay for which to set the image size.  This index is zero-based and
            should be less than or equal to <see cref="F:Leadtools.RasterImage.MaxOverlays" />.</param>
      <param name="width">New image width in pixels</param>
      <param name="height">New image height in pixels.</param>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>Sets the size of the overlay image for a certain index.  If the image already has an overlay image at <paramref name="index" />,
            it will be freed and the overlay size will be set to <paramref name="width" /> by <paramref name="height" /> pixels.  
            If the image has no overlay image at <paramref name="index" />, a
            new empty overlay image will be created with size of <paramref name="width" /> and <paramref name="height" />.
            After calling SetOverlayImageSize, you must call <see cref="M:Leadtools.RasterImage.UpdateOverlayBits(System.Int32,Leadtools.RasterUpdateOverlayBitsFlags)" /> to allocate the overlay bitmap and set the data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)" /></example>
    </member>
    <member name="M:Leadtools.RasterImage.UpdateOverlayBits(System.Int32,Leadtools.RasterUpdateOverlayBitsFlags)">
      <summary>Updates the overlay image pixels with the bits from the corresponding bitplane of the main image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The index of the overlay used in the process.</param>
      <param name="flags">Flags that determine whether the main image or the overlay image should be updated.</param>
      <remarks>
        <para>This method can also update the main image's bitplane with the data from the overlay image.</para>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>The overlay at <paramref name="index" /> must have the corresponding bitplane set, otherwise this method will throw a
            <see cref="T:Leadtools.RasterException" /> with <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.OverlayIndex</see>.
            This index is zero-based and should be less than or equal to <see cref="F:Leadtools.RasterImage.MaxOverlays" />.</para>
        <para>If <see cref="T:Leadtools.RasterUpdateOverlayBitsFlags">RasterUpdateOverlayBitsFlags.FromOverlay</see> is set in <paramref name="flags" />, the bitplane in
            the main image will be updated to match the overlay image data. The left and top coordinates for the overlay image are
            used. If <see cref="T:Leadtools.RasterUpdateOverlayBitsFlags">RasterUpdateOverlayBitsFlags.Clear</see> is set, the bits from the bitplane associated with
            the overlay are set to 0 if they are not covered by the overlay. If <see cref="T:Leadtools.RasterUpdateOverlayBitsFlags">RasterUpdateOverlayBitsFlags.Clear</see>
            is not set, the bits from the bitplane associated with the overlay that are not covered by the overlay image are left
            unchanged.</para>
        <para>If <see cref="T:Leadtools.RasterUpdateOverlayBitsFlags">RasterUpdateOverlayBitsFlags.FromImage</see> is set in <paramref name="flags" />, the overlay image
            will be updated with the bits from the corresponding bitplane. The size of the overlay image is unchanged if it has
            ever been set. If the overlay image has never been set, the overlay image will be from left, top coordinate to the
            bottom-right corner of the image:</para>
        <para>
          <c>
            OverlayWidth = Image.ImageWidth - OverlayImage.Origin.X
            OverlayHeight = Image.ImageHeight - OverlayImage.Origin.Y
            </c>
        </para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetOverlayAttributes(System.Int32,Leadtools.RasterGetSetOverlayAttributesFlags)">
      <summary>Gets one or more overlay attributes for the specified index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The zero-based index of the overlay for which to get the attributes.</param>
      <param name="flags">Flags that determine which attributes to retrieve.</param>
      <returns>An <see cref="T:Leadtools.RasterOverlayAttributes" /> object filled with the attribute data requested or null (
            Nothing in Visual Basic) if the image does not have an overlay attribute at the specific index.</returns>
      <remarks>
        <para>The retrieved values will be stored in <paramref name="attributes" />. Only the members retrieved by the method
            will be updated. The other values are left unchanged.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)" /> example.
            </example>
    </member>
    <member name="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)">
      <summary>Updates the overlay attributes for the overlay at the specified index. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="index">The zero-based index of the overlay for which the attributes are being set.</param>
      <param name="attributes">An <see cref="T:Leadtools.RasterOverlayAttributes" /> object containing the overlay attributes to set.</param>
      <param name="flags">Flags that determine which attributes to set.</param>
      <remarks>
        <para>This method can be used to set some or all the overlay attributes.  Before calling this metod, initialize
            the <paramref name="attributes" /> object members with all the attributes to be set or changed.</para>
        <para>You do not need to initialize the object variables that you are not setting or changing.  For example, if 
            <see cref="T:Leadtools.RasterGetSetOverlayAttributesFlags">RasterGetSetOverlayAttributesFlags.Origin</see> is not set in
            <paramref name="flags" />, you do not need to initialize <see cref="P:Leadtools.RasterOverlayAttributes.Origin">RasterOverlayAttributes.Origin</see>
            member of <paramref name="attributes" />.</para>
        <para>There are several attributes in <paramref name="flags" /> and you cannot change only one flag. If you want to change only one
            flag, you will first have to get all the flags and change only the flag you want. See the example for more information.
            </para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>This constructor is required by <see cref="T:System.Runtime.Serialization.ISerializable" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="info">The data needed to serialize or deserialize an object.</param>
      <param name="context">The source and destination of a given serialized stream.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> class supports standard .NET serialization.  Serialization of a 
            <see cref="T:Leadtools.RasterImage" /> is the process of converting the state of a <see cref="T:Leadtools.RasterImage" /> object into a
            form that can be persisted or transported. The complement of serialization is deserialization, which converts a
            stream into an <see cref="T:Leadtools.RasterImage" /> object. Together, these processes allow the image data to be easily stored and
            transferred.</para>
        <para>When you serialize an <see cref="T:Leadtools.RasterImage" /> object, all the data inside the object are saved.  This
            includes the image data of all pages as well as the current page number, region information, low bit/high bit,
            palette data, metadata (tags, markers and comments), etc.  In other words, the <see cref="T:Leadtools.RasterImage" /> can
            be constructed back to its original state from the stream.</para>
        <para>For more information and examples regarding serialization of an <see cref="T:Leadtools.RasterImage" /> object, refer
            to <see cref="T:Leadtools.Topics.RasterImageSerialization">RasterImage Serialization</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub MyRasterImageSerializationTest()
         ' Load an image
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim img As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         ' create a new MyRasterImage instance out of this image
         Dim myImage As MyRasterImage = New MyRasterImage(img)

         ' Set our custom data
         myImage.MyIntegerData = 10
         myImage.MyStringData = "My string"
         Dim msg As String = String.Format("Before serialization.  MyIntegerData = {0}, MyStringData = {1}", myImage.MyIntegerData, myImage.MyStringData)
         MessageBox.Show(msg)

         ' img is invalid now and should be disposed
         img.Dispose()

         ' Serialize myImage
         Dim formatter As BinaryFormatter = New BinaryFormatter()
         Dim ms As MemoryStream = New MemoryStream()
         formatter.Serialize(ms, myImage)

         ' dispose myImage
         myImage.Dispose()
         myImage = Nothing

         ' Deserialize back from the stream
         ms.Position = 0
            myImage = CType(formatter.Deserialize(ms), MyRasterImage)

         msg = String.Format("After serialization.  MyIntegerData = {0}, MyStringData = {1}", myImage.MyIntegerData, myImage.MyStringData)
         MessageBox.Show(msg)

         ' re-save the image
         codecs.Save(myImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_MySerialized.bmp"), RasterImageFormat.Bmp, 24)

         ' Clean up
         ms.Close()
         myImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MyRasterImageSerializationTest()
      {
         // Load an image
         RasterCodecs codecs = new RasterCodecs();

         RasterImage img = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));

         // create a new MyRasterImage instance out of this image
         MyRasterImage myImage = new MyRasterImage(img);

         // Set our custom data
         myImage.MyIntegerData = 10;
         myImage.MyStringData = "My string";
         string msg = string.Format("Before serialization.  MyIntegerData = {0}, MyStringData = {1}", myImage.MyIntegerData, myImage.MyStringData);
         MessageBox.Show(msg);

         // img is invalid now and should be disposed
         img.Dispose();

         // Serialize myImage
         BinaryFormatter formatter = new BinaryFormatter();
         MemoryStream ms = new MemoryStream();
         formatter.Serialize(ms, myImage);

         // dispose myImage
         myImage.Dispose();
         myImage = null;

         // Deserialize back from the stream
         ms.Position = 0;
         myImage = formatter.Deserialize(ms) as MyRasterImage;

         msg = string.Format("After serialization.  MyIntegerData = {0}, MyStringData = {1}", myImage.MyIntegerData, myImage.MyStringData);
         MessageBox.Show(msg);

         // re-save the image
         codecs.Save(myImage, Path.Combine(LEAD_VARS.ImagesDir, "Image1_MySerialized.bmp"), RasterImageFormat.Bmp, 24);

         // Clean up
         ms.Close();
         myImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize this object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The contextual information about the source or destination of the serialization.</param>
      <remarks>
        <para>This method implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">ISerializable.GetObjectData</see>.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class supports standard .NET serialization.  Serialization a <see cref="T:Leadtools.RasterImage" />
            is the process of converting the state of an <see cref="T:Leadtools.RasterImage" /> object into a form that can be persisted or
            transported. The complement of serialization is deserialization, which converts a stream into an <see cref="T:Leadtools.RasterImage" />
            object. Together, these processes allow the image data to be easily stored and transferred.</para>
        <para>When you serialize an <see cref="T:Leadtools.RasterImage" /> object, all the data inside the object are saved.  This
            include the image data of all pages as well as the current page number, region information, low bit/high bit,
            palette data, metadata (tags, markers and comments), etc.  In other words, the <see cref="T:Leadtools.RasterImage" /> can
            be constructed back to its original state from the stream.</para>
        <para>For more information and examples regarding serialization of an <see cref="T:Leadtools.RasterImage" /> object, refer
            to <see cref="T:Leadtools.Topics.RasterImageSerialization">RasterImage Serialization</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</example>
    </member>
    <member name="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)">
      <summary>Gets the true (RGB) value of the specified color based on the current image palette. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="color">a <see cref="T:Leadtools.RasterColor" /> that specifies the source color</param>
      <returns>A <see cref="T:Leadtools.RasterColor" /> that is guaranteed to be a true color (has RGB value)</returns>
      <remarks>
        <para>Use this method to translate a color that is really a palette index (the value of the <see cref="P:Leadtools.RasterColor.IsPaletteIndex">RasterColor.IsPaletteIndex</see>
            property is <strong>true</strong>) to a true RGB color value</para>
        <para>The apposite of this method is <see cref="M:Leadtools.RasterImage.TranslateColor(Leadtools.RasterImage,System.Int32)" />.</para>
      </remarks>
      <example>
        <para>
          <para>This example will create transparent GIF file</para>
        </para>
        <code lang="VB">      Public Sub CreateTransparentGifExample()
         ' Create a 24 bpp image, we will draw on it first then convert it to 8 bpp
         Dim imageWidth As Integer = 256
         Dim imageHeight As Integer = 256
         Dim image As New RasterImage( _
            RasterMemoryFlags.Conventional, _
            imageWidth, _
            imageHeight, _
            24, _
            RasterByteOrder.Bgr, _
            RasterViewPerspective.BottomLeft, _
            Nothing, _
            IntPtr.Zero, _
            0)
         ' Fill this image with magenta color and draw some random ellipses on top
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
         Dim g As Graphics = Graphics.FromHdc(hdc)

         g.FillRectangle(Brushes.Magenta, 0, 0, imageWidth, imageHeight)

         Const ellipseWidth As Integer = 40
         Const ellipseHeight As Integer = 40

         Dim r As New Random()

         For i As Integer = 0 To 39
            Dim x As Integer = r.Next(imageWidth - ellipseWidth)
            Dim y As Integer = r.Next(imageHeight - ellipseHeight)

            Dim clr As Color = Color.FromArgb(r.Next(256), r.Next(256), r.Next(256))
            Dim brush As New SolidBrush(clr)
            g.FillEllipse(brush, x, y, ellipseWidth, ellipseHeight)
            brush.Dispose()
         Next

         g.Dispose()
         RasterImagePainter.DeleteLeadDC(hdc)

         ' Convert this image to 8 bits/pixel
         Dim cmd As New ColorResolutionCommand( _
            ColorResolutionCommandMode.InPlace, _
            8, _
            RasterByteOrder.Rgb, _
            RasterDitheringMethod.None, _
            ColorResolutionCommandPaletteFlags.Optimized, _
            Nothing)
         cmd.Run(image)

         ' Find the Magenta color and set it as the transparent color
         Dim transparentColor As RasterColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta)

         ' Get the true color used for Magenta inside this image (a palette index)
         transparentColor = image.TranslateColor(image, transparentColor)

         image.Transparent = True
         image.TransparentColor = transparentColor

         ' Initialize the RasterCodecs object
         Dim codecs As New RasterCodecs()

         ' Save this image as GIF
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "TransparentEllipses.gif")
         codecs.Save(image, fileName, RasterImageFormat.Gif, 8)

         ' Clean up
         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void CreateTransparentGifExample()
      {
         // Create a 24 bpp image, we will draw on it first then convert it to 8 bpp
         int imageWidth = 256;
         int imageHeight = 256;
         RasterImage image = new RasterImage(
            RasterMemoryFlags.Conventional,
            imageWidth,
            imageHeight,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.BottomLeft,
            null,
            IntPtr.Zero,
            0);

         // Fill this image with magenta color and draw some random ellipses on top
         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         Graphics g = Graphics.FromHdc(hdc);

         g.FillRectangle(Brushes.Magenta, 0, 0, imageWidth, imageHeight);

         const int ellipseWidth = 40;
         const int ellipseHeight = 40;

         Random r = new Random();

         for(int i = 0; i &lt; 40; i++)
         {
            int x = r.Next(imageWidth - ellipseWidth);
            int y = r.Next(imageHeight - ellipseHeight);

            Color clr = Color.FromArgb(r.Next(256), r.Next(256), r.Next(256));
            Brush brush = new SolidBrush(clr);
            g.FillEllipse(brush, x, y, ellipseWidth, ellipseHeight);
            brush.Dispose();
         }

         g.Dispose();
         RasterImagePainter.DeleteLeadDC(hdc);

         // Convert this image to 8 bits/pixel
         ColorResolutionCommand cmd = new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.Optimized,
            null);
         cmd.Run(image);

         // Find the Magenta color and set it as the transparent color
         RasterColor transparentColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta);

         // Get the true color used for Magenta inside this image (a palette index)
         transparentColor = image.TranslateColor(image, transparentColor);

         image.Transparent = true;
         image.TransparentColor = transparentColor;

         // Initialize the RasterCodecs object
         RasterCodecs codecs = new RasterCodecs();

         // Save this image as GIF
         string fileName = Path.Combine(LEAD_VARS.ImagesDir,"TransparentEllipses.gif");
         codecs.Save(image, fileName, RasterImageFormat.Gif, 8);

         // Clean up
         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
      <seealso cref="M:Leadtools.RasterImage.TranslateColor(Leadtools.RasterImage,System.Int32)" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="M:Leadtools.RasterImage.Create(System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterColor)">
      <summary>Creates a new <strong>RasterImage</strong> using the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="width">
            Width of the image in pixels.
            </param>
      <param name="height">
            Height of the image in pixels.
            </param>
      <param name="bitsPerPixel">
        <para>The number of bits per pixel.</para>
        <para>Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 16, 24, 32, 48, and 64.</para>
      </param>
      <param name="resolution">Value to be used as the x and y resolution for the image.</param>
      <param name="backgroundColor">
        <see cref="T:Leadtools.RasterColor" /> which will be used to fill the new image.</param>
      <returns>The newly created RasterImage object.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterImage.CreateGrayscale(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a new grayscale <strong>RasterImage</strong> using the specified parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="width">
            Width of the image in pixels.
            </param>
      <param name="height">
            Height of the image in pixels.
            </param>
      <param name="bitsPerPixel">
        <para>The number of bits per pixel.</para>
        <para>Valid values are 8, 12, 16.</para>
      </param>
      <param name="resolution">Value to be used as the x and y resolution for the image.</param>
      <returns>The newly created grayscale RasterImage object.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.RasterImage.Changed">
      <summary>Occurs when the image data or attributes has changed. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.RasterImageChangedEventArgs" /> containing data related to this
            event.
            </event>
      <remarks>
        <para>When the data or attributes of a <see cref="T:Leadtools.RasterImage" /> object changes, the <see cref="E:Leadtools.RasterImage.Changed" /> event is fired
            with information of what has changed.  For example, you can subscribe to this event to get notified when the
            <see cref="T:Leadtools.RasterImage" /> object has been changed and need to be updated in your user interface by re-painting it.</para>
        <para>For more information, refer to <see cref="T:Leadtools.RasterImageChangedEventArgs" />.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub ChangedExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the image
         Dim img As RasterImage = codecs.Load(srcFileName)

         ' Subscribe to the Changed event of this image
         AddHandler img.Changed, AddressOf img_Changed

         ' Call a few methods and image processing commands that changes the image
         Console.WriteLine("Calling FlipViewPerspective")
         img.FlipViewPerspective(True)

         Console.WriteLine("Calling RotateViewPerspective")
         img.RotateViewPerspective(90)

         Console.WriteLine("Calling FlipCommand")
         Dim flip As FlipCommand = New FlipCommand(True)
         flip.Run(img)

         ' Now disable firing the events and call the methods again
         Console.WriteLine("Disabling the events")
         img.DisableEvents()

         Console.WriteLine("Calling FlipViewPerspective")
         img.FlipViewPerspective(True)

         Console.WriteLine("Calling RotateViewPerspective")
         img.RotateViewPerspective(90)

         Console.WriteLine("Calling FlipCommand while")
         flip.Run(img)

         ' Re-enable the events and fire it manually
         Console.WriteLine("Re-enabling the events")
         img.EnableEvents()

         Console.WriteLine("Firing the event manually")
         Dim flags As RasterImageChangedFlags = RasterImageChangedFlags.Data Or RasterImageChangedFlags.ViewPerspective
         Dim e As RasterImageChangedEventArgs = New RasterImageChangedEventArgs(flags)

         img.OnChanged(e)

         ' Clean up
         RemoveHandler img.Changed, AddressOf img_Changed
         img.Dispose()
         codecs.Dispose()
      End Sub

      Private Sub img_Changed(ByVal sender As Object, ByVal e As RasterImageChangedEventArgs)
         ' Show the changed flags
         Console.WriteLine("Changed: {0}", e.Flags)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangedExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the image
         RasterImage img = codecs.Load(srcFileName);

         // Subscribe to the Changed event of this image
         img.Changed += new EventHandler&lt;RasterImageChangedEventArgs&gt;(img_Changed);

         // Call a few methods and image processing commands that changes the image
         Console.WriteLine("Calling FlipViewPerspective");
         img.FlipViewPerspective(true);

         Console.WriteLine("Calling RotateViewPerspective");
         img.RotateViewPerspective(90);

         Console.WriteLine("Calling FlipCommand");
         FlipCommand flip = new FlipCommand(true);
         flip.Run(img);

         // Now disable firing the events and call the methods again
         Console.WriteLine("Disabling the events");
         img.DisableEvents();

         Console.WriteLine("Calling FlipViewPerspective");
         img.FlipViewPerspective(true);

         Console.WriteLine("Calling RotateViewPerspective");
         img.RotateViewPerspective(90);

         Console.WriteLine("Calling FlipCommand while");
         flip.Run(img);

         // Re-enable the events and fire it manually
         Console.WriteLine("Re-enabling the events");
         img.EnableEvents();

         Console.WriteLine("Firing the event manually");
         RasterImageChangedFlags flags = RasterImageChangedFlags.Data | RasterImageChangedFlags.ViewPerspective;
         RasterImageChangedEventArgs e = new RasterImageChangedEventArgs(flags);

         img.OnChanged(e);

         // Clean up
         img.Changed -= new EventHandler&lt;RasterImageChangedEventArgs&gt;(img_Changed);
         img.Dispose();
         codecs.Dispose();
      }

      void img_Changed(object sender, RasterImageChangedEventArgs e)
      {
         // Show the changed flags
         Console.WriteLine("Changed: {0}", e.Flags);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ChangedExample()
      {
         // create a new image to work with
         RasterImage img = new RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // Subscribe to the Changed event of this image
         img.Changed += new EventHandler&lt;RasterImageChangedEventArgs&gt;(img_Changed);

         // Call a few methods and image processing commands that changes the image
         Debug.WriteLine("Calling FlipViewPerspective");
         img.FlipViewPerspective(true);

         Debug.WriteLine("Calling RotateViewPerspective");
         img.RotateViewPerspective(90);

         Debug.WriteLine("Calling FlipCommand");
         FlipCommand flip = new FlipCommand(true);
         flip.Run(img);

         // Now disable firing the events and call the methods again
         Debug.WriteLine("Disabling the events");
         img.DisableEvents();

         Debug.WriteLine("Calling FlipViewPerspective");
         img.FlipViewPerspective(true);

         Debug.WriteLine("Calling RotateViewPerspective");
         img.RotateViewPerspective(90);

         Debug.WriteLine("Calling FlipCommand while");
         flip.Run(img);

         // Re-enable the events and fire it manually
         Debug.WriteLine("Re-enabling the events");
         img.EnableEvents();

         Debug.WriteLine("Firing the event manually");
         RasterImageChangedFlags flags = RasterImageChangedFlags.Data | RasterImageChangedFlags.ViewPerspective;
         RasterImageChangedEventArgs e = new RasterImageChangedEventArgs(flags);

         img.OnChanged(e);

         // Clean up
         img.Changed -= new EventHandler&lt;RasterImageChangedEventArgs&gt;(img_Changed);
         img.Dispose();
      }

      void img_Changed(object sender, RasterImageChangedEventArgs e)
      {
         // Show the changed flags
         Debug.WriteLine("Changed: {0}", e.Flags);
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangedExample()
         ' create a new image to work with
         Dim img As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 500, 500, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Subscribe to the Changed event of this image
         AddHandler img.Changed, AddressOf img_Changed

         ' Call a few methods and image processing commands that changes the image
         Debug.WriteLine("Calling FlipViewPerspective")
         img.FlipViewPerspective(True)

         Debug.WriteLine("Calling RotateViewPerspective")
         img.RotateViewPerspective(90)

         Debug.WriteLine("Calling FlipCommand")
         Dim flip As FlipCommand = New FlipCommand(True)
         flip.Run(img)

         ' Now disable firing the events and call the methods again
         Debug.WriteLine("Disabling the events")
         img.DisableEvents()

         Debug.WriteLine("Calling FlipViewPerspective")
         img.FlipViewPerspective(True)

         Debug.WriteLine("Calling RotateViewPerspective")
         img.RotateViewPerspective(90)

         Debug.WriteLine("Calling FlipCommand while")
         flip.Run(img)

         ' Re-enable the events and fire it manually
         Debug.WriteLine("Re-enabling the events")
         img.EnableEvents()

         Debug.WriteLine("Firing the event manually")
         Dim flags As RasterImageChangedFlags = RasterImageChangedFlags.Data Or RasterImageChangedFlags.ViewPerspective
         Dim e As RasterImageChangedEventArgs = New RasterImageChangedEventArgs(flags)

         img.OnChanged(e)

         ' Clean up
         RemoveHandler img.Changed, AddressOf img_Changed
         img.Dispose()
      End Sub

      Private Sub img_Changed(ByVal sender As Object, ByVal e As RasterImageChangedEventArgs)
         ' Show the changed flags
         Debug.WriteLine("Changed: {0}", e.Flags)
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.RasterImage.PagesChanged">
      <summary>Occurs when pages are added, inserted or removed from this <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" /> containing data related to this
            event.
            </event>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImagePagesChangedEventArgs" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.PageCount">
      <summary>Gets the total number of pages in the this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The total number of pages in the this <see cref="T:Leadtools.RasterImage" />.
            </value>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.Page" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.Page">
      <summary>Gets or sets the current active page for this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The 1-based index of the current page for this <see cref="T:Leadtools.RasterImage" />.
            </value>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> object can hold multiple pages with different sizes.  The
            <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)" />, <see cref="M:Leadtools.RasterImage.AddPages(Leadtools.RasterImage,System.Int32,System.Int32)" />, <see cref="M:Leadtools.RasterImage.InsertPage(System.Int32,Leadtools.RasterImage)" /> and
            <see cref="M:Leadtools.RasterImage.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" /> methods allows adding new pages to an existing <see cref="T:Leadtools.RasterImage" />.</para>
        <para>The <see cref="M:Leadtools.RasterImage.RemovePageAt(System.Int32)" />, <see cref="M:Leadtools.RasterImage.RemovePages(System.Int32,System.Int32)" /> and
            <see cref="M:Leadtools.RasterImage.RemoveAllPages" /> methods allows removing existing pages from a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="M:Leadtools.RasterImage.ReplacePage(System.Int32,Leadtools.RasterImage)" /> and <see cref="M:Leadtools.RasterImage.ReplacePages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32)" />
            methods allows replace existing pages in a <see cref="T:Leadtools.RasterImage" /> object.</para>
        <para>The <see cref="P:Leadtools.RasterImage.PageCount" /> property holds the total number of pages in a <see cref="T:Leadtools.RasterImage" /> object while
            the <see cref="P:Leadtools.RasterImage.Page" /> property allows you to change the current active page.</para>
        <para>The current active page (The page indicated by the <see cref="P:Leadtools.RasterImage.Page" /> property) is used by default when
            accessing the data of a <see cref="T:Leadtools.RasterImage" /> object unless otherwise indicated.</para>
      </remarks>
      <example>
        <para>This example demonstrates how to deal with multi-page <see cref="T:Leadtools.RasterImage" /> objects.</para>
        <code lang="VB">      Public Sub PagesExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim srcFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp")

         ' Load the multi-page image
         Dim srcImage As RasterImage = codecs.Load(srcFileName1)

         ' Show the number of pages in this file
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Show and change the active page
         Console.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 3
         Console.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 1

         ' Load a single page image and add it to the end
         Dim pageImage As RasterImage = codecs.Load(srcFileName2)
         Console.WriteLine("Adding a single page")
         srcImage.AddPage(pageImage)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Load a multi page image and add a few pages to this image
         pageImage = codecs.Load(srcFileName1)
         Console.WriteLine("Adding multi-pages")
         srcImage.AddPages(pageImage, 1, 2)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert a page in the middle
         Console.WriteLine("Inserting a page")
         srcImage.InsertPage(4, pageImage)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert the rest of the pages at the beginning
         Console.WriteLine("Inserting pages")
         srcImage.InsertPages(0, pageImage, 1, -1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the first page
         Console.WriteLine("Removing a page")
         srcImage.RemovePageAt(1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the last 3 pages
         Console.WriteLine("Removing pages")
         srcImage.RemovePages(srcImage.PageCount - 3, -1)
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove all the pages (leaves 1)
         Console.WriteLine("Removing all pages")
         srcImage.RemoveAllPages()
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         srcImage.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void PagesExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         string srcFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp");

         // Load the multi-page image
         RasterImage srcImage = codecs.Load(srcFileName1);

         // Show the number of pages in this file
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Show and change the active page
         Console.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 3;
         Console.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 1;

         // Load a single page image and add it to the end
         RasterImage pageImage = codecs.Load(srcFileName2);
         Console.WriteLine("Adding a single page");
         srcImage.AddPage(pageImage);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Load a multi page image and add a few pages to this image
         pageImage = codecs.Load(srcFileName1);
         Console.WriteLine("Adding multi-pages");
         srcImage.AddPages(pageImage, 1, 2);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert a page in the middle
         Console.WriteLine("Inserting a page");
         srcImage.InsertPage(4, pageImage);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert the rest of the pages at the beginning
         Console.WriteLine("Inserting pages");
         srcImage.InsertPages(0, pageImage, 1, -1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the first page
         Console.WriteLine("Removing a page");
         srcImage.RemovePageAt(1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the last 3 pages
         Console.WriteLine("Removing pages");
         srcImage.RemovePages(srcImage.PageCount - 3, -1);
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove all the pages (leaves 1)
         Console.WriteLine("Removing all pages");
         srcImage.RemoveAllPages();
         Console.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         srcImage.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void PagesExample(RasterImage image)
      {
         RasterImage srcImage = image; // should be a multi-page image (eye.gif)
         // Show the number of pages in this file
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Show and change the active page
         Debug.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 3;
         Debug.WriteLine("Active page: {0}", srcImage.Page);
         srcImage.Page = 1;

         // create a new image and add it to the end
         RasterImage pageImage = new RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("Adding a single page");
         srcImage.AddPage(pageImage);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // create a multi page image and add a few pages to this image
         RasterImage multiPageImage = new RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // add a few more pages
         for (int x = 0; x &lt; 10; x++)
         {
            pageImage = new RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
            multiPageImage.AddPage(pageImage);
         }

         Debug.WriteLine("Adding multi-pages");
         srcImage.AddPages(multiPageImage, 1, 2);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert a page in the middle
         Debug.WriteLine("Inserting a page");
         srcImage.InsertPage(4, multiPageImage);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Insert the rest of the pages at the beginning
         Debug.WriteLine("Inserting pages");
         srcImage.InsertPages(0, multiPageImage, 1, -1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the first page
         Debug.WriteLine("Removing a page");
         srcImage.RemovePageAt(1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove the last 3 pages
         Debug.WriteLine("Removing pages");
         srcImage.RemovePages(srcImage.PageCount - 3, -1);
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         // Remove all the pages (leaves 1)
         Debug.WriteLine("Removing all pages");
         srcImage.RemoveAllPages();
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount);

         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub PagesExample(ByVal image As RasterImage)
         Dim srcImage As RasterImage = image ' should be a multi-page image (eye.gif)
         ' Show the number of pages in this file
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Show and change the active page
         Debug.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 3
         Debug.WriteLine("Active page: {0}", srcImage.Page)
         srcImage.Page = 1

         ' create a new image and add it to the end
         Dim pageImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("Adding a single page")
         srcImage.AddPage(pageImage)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' create a multi page image and add a few pages to this image
         Dim multiPageImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' add a few more pages
         For x As Integer = 0 To 9
            pageImage = New RasterImage(RasterMemoryFlags.Conventional, 200, 200, 8, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
            multiPageImage.AddPage(pageImage)
         Next x

         Debug.WriteLine("Adding multi-pages")
         srcImage.AddPages(multiPageImage, 1, 2)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert a page in the middle
         Debug.WriteLine("Inserting a page")
         srcImage.InsertPage(4, multiPageImage)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Insert the rest of the pages at the beginning
         Debug.WriteLine("Inserting pages")
         srcImage.InsertPages(0, multiPageImage, 1, -1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the first page
         Debug.WriteLine("Removing a page")
         srcImage.RemovePageAt(1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove the last 3 pages
         Debug.WriteLine("Removing pages")
         srcImage.RemovePages(srcImage.PageCount - 3, -1)
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         ' Remove all the pages (leaves 1)
         Debug.WriteLine("Removing all pages")
         srcImage.RemoveAllPages()
         Debug.WriteLine("Pages in the image: {0}", srcImage.PageCount)

         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.Width">
      <summary>Gets the width of this <see cref="T:Leadtools.RasterImage" /> in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width of this <see cref="T:Leadtools.RasterImage" /> in pixels.</value>
      <remarks>
        <para>This is the actual width of the image data scanline.</para>
        <para>Use <see cref="P:Leadtools.RasterImage.ImageWidth" /> to get the width of the image taking the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account. For
            more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.Height">
      <summary>Gets the height of this <see cref="T:Leadtools.RasterImage" /> in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height of this <see cref="T:Leadtools.RasterImage" /> in pixels.</value>
      <remarks>
        <para>This is the actual number of scanlines of image data.</para>
        <para>Use <see cref="P:Leadtools.RasterImage.ImageHeight" /> to get the height of the image taking the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account. For
            more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.ImageWidth">
      <summary>Gets the width of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The width of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImage.Width" /> to get the actual width of the image data scanlines.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.ImageHeight">
      <summary>Gets the height of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The height of this <see cref="T:Leadtools.RasterImage" /> in pixels, taking <see cref="P:Leadtools.RasterImage.ViewPerspective" /> into account.</value>
      <remarks>
        <para>Use <see cref="P:Leadtools.RasterImage.Height" /> to get the actual number of scanlines of image data.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.ImageSize">
      <summary>Gets the size in pixels of this <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size in pixels of this <see cref="T:Leadtools.RasterImage" /> object.</value>
      <remarks>
            The size in pixels is <see cref="P:Leadtools.RasterImage.Width" /> by <see cref="P:Leadtools.RasterImage.Height" /> pixels.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.BitsPerPixel">
      <summary>Gets the number of bits per pixel of this <see cref="T:Leadtools.RasterImage" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Number of bits per pixel of this <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> object supports image data of 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48 and 64 bits
            per pixel</para>
        <para>A 16-bpp image may be color or grayscale. If you are working with a 16-bit grayscale image, then use
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see> when creating the image. By default, the Order for a 16-bit image will be set to
            <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.BytesPerLine">
      <summary>Gets the number of bytes per scanline for the image data of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Number of bytes per per scanline for the image data of this <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.BytesPerLine" /> value is rounded upward to the nearest multiple of four.</para>
        <para>You can use this property to allocate the buffer size when manipulating the scanline data of a <see cref="T:Leadtools.RasterImage" />
            directly through the <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:Leadtools.RasterImage.SetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /> methods.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.ViewPerspective">
      <summary>Gets or sets the view perspective of the image data of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The view perspective of the image data of this <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The view perspective indicates where the beginning of the image is stored.  For more information,
            see <see cref="T:Leadtools.RasterViewPerspective" />.</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting For View Perspective</see>.</para>
        <para>Note: You should be careful when setting the view-perspective of an image using this property since it will not change the orientation of
            the data of the image. To do that, use <see cref="M:Leadtools.RasterImage.ChangeViewPerspective(Leadtools.RasterViewPerspective)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.Order">
      <summary>Gets or sets the color order of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The color order of this <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> object supports storing the image data in one of the following color orders:
            <list type="table"><listheader><term>Order</term><description>Notes</description></listheader><item><term><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb</see></term><description>
                 The image data contains the color in the RGB order.  For example, for 24-bits per pixel images
                 the data is stored as the 3 bytes representing the red, green and blue component respectively.  Palettized images
                 (with bits per pixel less than or qual to 8) will also report a byte order of RGB although the image data stored is
                 really indices into the palette.
                 <para>16-bit bitmaps use 5 bits for R, G and B components and one bit for alpha</para></description></item><item><term><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see></term><description>
                 The image data contains the color in the BGR order.  For example, for 24-bits per pixel images
                 the data is stored as the 3 bytes representing the blue, green and red component respectively.
                 </description></item><item><term><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Rgb565</see></term><description>
                 The image data contains the color in RGB color order with 5 bits for red and blue component and 6 bits for green component (16 bits per pixel).
                 There is no alpha information.
                 </description></item><item><term><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Gray</see></term><description>
                 The image data contains the grayscale colors.  For 12 and 16-bits per pixel images, the image data contains the 
                 grayscale values of the pixel, for 8-bits per pixel gray scale images, the image data contains an index into the
                 grayscale palette.
                 </description></item><item><term><see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Romm</see></term><description>
                 The image data is compressed in memory using ROMM.  Only valid for 24-bits per pixel images.
                 </description></item></list></para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub OrderExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the image as BGR (default) and get the first pixel value
         Dim image As RasterImage = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1)
         Console.WriteLine("Order is {0}", image.Order)
         image.Dispose()

         ' Load the image as RGB and get the first pixel value
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Rgb, 1, 1)
         Console.WriteLine("Order is {0}", image.Order)
         image.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void OrderExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the image as BGR (default) and get the first pixel value
         RasterImage image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Bgr, 1, 1);
         Console.WriteLine("Order is {0}", image.Order);
         image.Dispose();

         // Load the image as RGB and get the first pixel value
         image = codecs.Load(srcFileName, 24, CodecsLoadByteOrder.Rgb, 1, 1);
         Console.WriteLine("Order is {0}", image.Order);
         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void OrderExample()
      {
         // Create an image as BGR
         RasterImage srcImage = new RasterImage(RasterMemoryFlags.Conventional, 300, 300, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("Order is {0}", srcImage.Order);
         Debug.Assert(srcImage.Order == RasterByteOrder.Bgr);
         srcImage.Dispose();
         // Create an image as RGB
         srcImage = new RasterImage(RasterMemoryFlags.Conventional, 300, 300, 24, RasterByteOrder.Rgb, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("Order is {0}", srcImage.Order);
         Debug.Assert(srcImage.Order == RasterByteOrder.Rgb);
         srcImage.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub OrderExample()
         ' Create an image as BGR
         Dim srcImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 300, 300, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("Order is {0}", srcImage.Order)
         Debug.Assert(srcImage.Order = RasterByteOrder.Bgr)
         srcImage.Dispose()
         ' Create an image as RGB
         srcImage = New RasterImage(RasterMemoryFlags.Conventional, 300, 300, 24, RasterByteOrder.Rgb, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("Order is {0}", srcImage.Order)
         Debug.Assert(srcImage.Order = RasterByteOrder.Rgb)
         srcImage.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.HasRegion">
      <summary>Determines whether this <see cref="T:Leadtools.RasterImage" /> has a region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if this <see cref="T:Leadtools.RasterImage" /> has a region, otherwise; false.</value>
      <remarks>
        <para>When an image has a region, the LEADTOOLS methods that modify the pixel values (for example
            <see cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand" />) act on the region, rather than the whole image. In addition, the LEADTOOLS methods that
            flip, reverse, rotate, shear, or resize an image also transform the region to match the image. For example, if you were to
            shear the image that had a rectangular region, the region would become a parallelogram.</para>
        <para>To remove an image region, use <see cref="M:Leadtools.RasterImage.MakeRegionEmpty" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RegionExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_InvertRegion.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_InvertNoRegion.bmp")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' The image should have no region
         Console.WriteLine("After loading, HasRegion = {0}", image.HasRegion)
         Debug.Assert((Not image.HasRegion))

         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(0, 0, image.Width \ 4, image.Height \ 4)
         image.AddEllipseToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' The image should have a region now
         Console.WriteLine("After AddEllipseToRegion, HasRegion = {0}", image.HasRegion)
         Debug.Assert(image.HasRegion)

         ' Invert this image and save it to a file
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)
         codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24)

         ' Get rid of the region
         image.MakeRegionEmpty()

         ' The image should not have a region now
         Console.WriteLine("After MakeRegionEmpty, HasRegion = {0}", image.HasRegion)
         Debug.Assert((Not image.HasRegion))

         ' Invert again and save it
         command.Run(image)
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_InvertRegion.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_InvertNoRegion.bmp");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // The image should have no region
         Console.WriteLine("After loading, HasRegion = {0}", image.HasRegion);
         Debug.Assert(!image.HasRegion);

         // Add a region to the image
         LeadRect rc = new LeadRect(0, 0, image.Width / 4, image.Height / 4);
         image.AddEllipseToRegion(null, rc, RasterRegionCombineMode.Set);

         // The image should have a region now
         Console.WriteLine("After AddEllipseToRegion, HasRegion = {0}", image.HasRegion);
         Debug.Assert(image.HasRegion);

         // Invert this image and save it to a file
         InvertCommand command = new InvertCommand();
         command.Run(image);
         codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24);

         // Get rid of the region
         image.MakeRegionEmpty();

         // The image should not have a region now
         Console.WriteLine("After MakeRegionEmpty, HasRegion = {0}", image.HasRegion);
         Debug.Assert(!image.HasRegion);

         // Invert again and save it
         command.Run(image);
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RegionExample(RasterImage image, Stream destStream1, Stream destStream2)
      {
         RasterCodecs codecs = new RasterCodecs();
         // The image should have no region
         Debug.WriteLine("After loading, HasRegion = {0}", image.HasRegion);
         Debug.Assert(!image.HasRegion);

         // Add a region to the image
         LeadRect rc = new LeadRect(0, 0, image.Width / 4, image.Height / 4);
         image.AddRectangleToRegion(null, rc, RasterRegionCombineMode.Set);

         // The image should have a region now
         Debug.WriteLine("After AddRectangleToRegion, HasRegion = {0}", image.HasRegion);
         Debug.Assert(image.HasRegion);

         // Invert this image and save it to a file
         InvertCommand command = new InvertCommand();
         command.Run(image);
         codecs.Save(image, destStream1, RasterImageFormat.Bmp, 0);

         // Get rid of the region
         image.MakeRegionEmpty();

         // The image should not have a region now
         Debug.WriteLine("After MakeRegionEmpty, HasRegion = {0}", image.HasRegion);
         Debug.Assert(!image.HasRegion);

         // Invert again and save it
         command.Run(image);
         codecs.Save(image, destStream2, RasterImageFormat.Bmp, 0);

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RegionExample(ByVal image As RasterImage, ByVal destStream1 As Stream, ByVal destStream2 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' The image should have no region
         Debug.WriteLine("After loading, HasRegion = {0}", image.HasRegion)
         Debug.Assert((Not image.HasRegion))

         ' Add a region to the image
         Dim rc As LeadRect = New LeadRect(0, 0, image.Width / 4, image.Height / 4)
         image.AddRectangleToRegion(Nothing, rc, RasterRegionCombineMode.Set)

         ' The image should have a region now
         Debug.WriteLine("After AddRectangleToRegion, HasRegion = {0}", image.HasRegion)
         Debug.Assert(image.HasRegion)

         ' Invert this image and save it to a file
         Dim command As InvertCommand = New InvertCommand()
         command.Run(image)
         codecs.Save(image, destStream1, RasterImageFormat.Bmp, 0)

         ' Get rid of the region
         image.MakeRegionEmpty()

         ' The image should not have a region now
         Debug.WriteLine("After MakeRegionEmpty, HasRegion = {0}", image.HasRegion)
         Debug.Assert((Not image.HasRegion))

         ' Invert again and save it
         command.Run(image)
         codecs.Save(image, destStream2, RasterImageFormat.Bmp, 0)

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.XResolution">
      <summary>Gets or sets the image horizontal resolution, in dots per inch (DPI). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Horizontal resolution in dots per inch (DPI).</value>
      <remarks>Some file formats save this value in the file header.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.YResolution">
      <summary>Gets or sets the image vertical resolution, in dots per inch (DPI). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Vertical resolution in dots per inch (DPI).</value>
      <remarks>Some file formats save this value in the file header.</remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterImage" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.LowBit">
      <summary>Gets or sets the image window level low bit value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value indicating the low bit used for window leveling.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.LowBit" /> value will be: 0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" />
            &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale). A value of -1 will be treated as 0.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.HighBit">
      <summary>Gets or sets the image window level high bit value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value indicating the high bit used for window leveling.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.LowBit" /> value will be: 0 &lt;= <see cref="P:Leadtools.RasterImage.LowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.HighBit" />
            &lt;= (11 for 12-bit grayscale or 15 for 16-bit grayscale). A value of -1 will be treated as 0.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.MinValue">
      <summary>Gets or sets the images minimum grayscale value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Minimum grayscale value.</value>
      <remarks>
        <para>For every value between 0 and <see cref="P:Leadtools.RasterImage.MinValue" />, Black (RGB(0,0,0)) will be used.  For values between
            <see cref="P:Leadtools.RasterImage.MinValue" /> and <see cref="P:Leadtools.RasterImage.MaxValue" />, the gray value to be displayed is calculated by :
            gray = (index - <see cref="P:Leadtools.RasterImage.MinValue" />) * 255 / (<see cref="P:Leadtools.RasterImage.MaxValue" /> - <see cref="P:Leadtools.RasterImage.MinValue" />).</para>
        <para>index is the intensity value of the pixel.  If the intensity value is &gt; <see cref="P:Leadtools.RasterImage.MaxValue" />, the color will be
            White.  If the intensity value is &lt; <see cref="P:Leadtools.RasterImage.MinValue" />, the color will be Black.  For those intensity values between
            <see cref="P:Leadtools.RasterImage.MinValue" /> and <see cref="P:Leadtools.RasterImage.MaxValue" />, the above equation is used to determine the color, with index equal to
            the intensity value.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.MaxValue">
      <summary>Gets or sets the images maximum grayscale value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Maximum grayscale value.</value>
      <remarks>
        <para>For every value between 0 and <see cref="P:Leadtools.RasterImage.MinValue" />, Black (RGB(0,0,0)) will be used.  For values between
            <see cref="P:Leadtools.RasterImage.MinValue" /> and <see cref="P:Leadtools.RasterImage.MaxValue" />, the gray value to be displayed is calculated by :
            gray = (index - <see cref="P:Leadtools.RasterImage.MinValue" />) * 255 / (<see cref="P:Leadtools.RasterImage.MaxValue" /> - <see cref="P:Leadtools.RasterImage.MinValue" />).</para>
        <para>index is the intensity value of the pixel.  If the intensity value is &gt; <see cref="P:Leadtools.RasterImage.MaxValue" />, the color will be
            White.  If the intensity value is &lt; <see cref="P:Leadtools.RasterImage.MinValue" />, the color will be Black.  For those intensity values between
            <see cref="P:Leadtools.RasterImage.MinValue" /> and <see cref="P:Leadtools.RasterImage.MaxValue" />, the above equation is used to determine the color, with index equal to
            the intensity value.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /> and <see cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.PaintLowBit">
      <summary>Gets or sets the image paint low bit value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value indicating the low bit used for painting.</value>
      <remarks>
        <para>The low bit value will be: 0 &lt;= <see cref="P:Leadtools.RasterImage.PaintLowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.PaintHighBit" /> &lt;=
            (11 for 12-bit grayscale or 15 for 16-bit grayscale). A value of -1 will be treated as 0.</para>
        <para>This property along with <see cref="P:Leadtools.RasterImage.PaintHighBit" /> are used internally by LEADTOOLS when
            <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /> is called.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.PaintHighBit">
      <summary>Gets or sets the image paint low bit value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>Value indicating the low bit used for painting.</value>
      <remarks>
        <para>The low bit value will be: 0 &lt;= <see cref="P:Leadtools.RasterImage.PaintLowBit" /> &lt;= <see cref="P:Leadtools.RasterImage.PaintHighBit" /> &lt;=
            (11 for 12-bit grayscale or 15 for 16-bit grayscale). A value of -1 will be treated as 0.</para>
        <para>This property along with <see cref="P:Leadtools.RasterImage.PaintLowBit" /> are used internally by LEADTOOLS when
            <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /> is called.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.WindowLevel(System.Int32,System.Int32,Leadtools.RasterColor[],Leadtools.RasterWindowLevelMode)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.PaintGamma">
      <summary>Gets or sets the current gamma correction value for the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current gamma correction value.</value>
      <remarks>
        <para>The paint gamma value can be any number greater than 0. The default value is 100.</para>
        <para>Because this is an unsigned integer, it is 100 times the actual gamma value. For example, use 235 to set a gamma
            value of 2.35. Intensity values ideally follow a logarithmic progression, because the eye perceives changes in intensity
            as being equal when the ratio of change is equal. For example, we would see a change from 0.1 to 0.2 as being equal to a
            change from 0.2 to 0.4.</para>
        <para>Gamma is a standard constant that is used to calculate the progression. For most CRTs the gamma constant is in the
            range of 2.2 to 2.5.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub IntensityExample()
         Dim f As IntensityForm = New IntensityForm()
         f.ShowDialog()
      End Sub

      Private Class IntensityForm : Inherits Form
         Private viewer As RasterImageViewer
         Private gammaTrackBar As TrackBar
         Private contrastTrackBar As TrackBar
         Private intensityTrackBar As TrackBar

         Public Sub New()
            ' Create the controls
            Size = New Size(800, 600)
            Dim controlsPanel As Panel = New Panel()
            controlsPanel.Size = New Size(400, 0)
            controlsPanel.BorderStyle = BorderStyle.Fixed3D
            controlsPanel.Dock = DockStyle.Left

            Dim labelLeft As Integer = 8
            Dim y As Integer = 16
            Dim trackBarLeft As Integer = 100

            Dim gammaLabel As Label = New Label()
            gammaLabel.Text = "Gamma:"
            gammaLabel.Location = New Point(labelLeft, y)
            gammaLabel.AutoSize = True
            controlsPanel.Controls.Add(gammaLabel)

            gammaTrackBar = New TrackBar()
            gammaTrackBar.Minimum = 1
            gammaTrackBar.Maximum = 100
            gammaTrackBar.TickFrequency = (gammaTrackBar.Maximum - gammaTrackBar.Minimum) \ 10
            gammaTrackBar.Location = New Point(trackBarLeft, y)
            gammaTrackBar.Width = 200
            AddHandler gammaTrackBar.Scroll, AddressOf gammaTrackBar_Scroll
            controlsPanel.Controls.Add(gammaTrackBar)
            gammaLabel.Top = gammaTrackBar.Top + (gammaTrackBar.Height - gammaLabel.Height) \ 2
            y = gammaTrackBar.Bottom + 8

            Dim contrastLabel As Label = New Label()
            contrastLabel.Text = "Contrast:"
            contrastLabel.Location = New Point(labelLeft, y)
            contrastLabel.AutoSize = True
            controlsPanel.Controls.Add(contrastLabel)

            contrastTrackBar = New TrackBar()
            contrastTrackBar.Minimum = -1000
            contrastTrackBar.Maximum = 1000
            contrastTrackBar.TickFrequency = (contrastTrackBar.Maximum - contrastTrackBar.Minimum) \ 10
            contrastTrackBar.Location = New Point(trackBarLeft, y)
            contrastTrackBar.Width = 200
            AddHandler contrastTrackBar.Scroll, AddressOf contrastTrackBar_Scroll
            controlsPanel.Controls.Add(contrastTrackBar)
            contrastLabel.Top = contrastTrackBar.Top + (contrastTrackBar.Height - contrastLabel.Height) \ 2
            y = contrastTrackBar.Bottom + 8

            Dim intensityLabel As Label = New Label()
            intensityLabel.Text = "Intensity:"
            intensityLabel.Location = New Point(labelLeft, y)
            intensityLabel.AutoSize = True
            controlsPanel.Controls.Add(intensityLabel)
            y = intensityLabel.Bottom + 8

            intensityTrackBar = New TrackBar()
            intensityTrackBar.Minimum = -1000
            intensityTrackBar.Maximum = 1000
            intensityTrackBar.TickFrequency = (intensityTrackBar.Maximum - intensityTrackBar.Minimum) \ 10
            intensityTrackBar.Location = New Point(trackBarLeft, y)
            intensityTrackBar.Width = 200
            AddHandler intensityTrackBar.Scroll, AddressOf intensityTrackBar_Scroll
            controlsPanel.Controls.Add(intensityTrackBar)
            intensityLabel.Top = intensityTrackBar.Top + (intensityTrackBar.Height - intensityLabel.Height) \ 2
            y = intensityTrackBar.Bottom + 8

            Dim defaultButton As Button = New Button()
            defaultButton.Text = "Default"
            defaultButton.Location = New Point(labelLeft, y)
            AddHandler defaultButton.Click, AddressOf defaultButton_Click
            controlsPanel.Controls.Add(defaultButton)

            Controls.Add(controlsPanel)

            viewer = New RasterImageViewer()
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.SizeMode = RasterPaintSizeMode.Fit
            viewer.BringToFront()

            ' Load the image
            Dim codecs As RasterCodecs = New RasterCodecs()

            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
            viewer.Image = codecs.Load(srcFileName)

            codecs.Dispose()

            gammaTrackBar.Value = viewer.Image.PaintGamma
            contrastTrackBar.Value = viewer.Image.PaintContrast
            intensityTrackBar.Value = viewer.Image.PaintIntensity
            UpdateValues()
         End Sub

         Private Sub UpdateValues()
            Dim str As String = String.Format("Gamma = {0}, Contrast = {1}, Intensity = {2}", viewer.Image.PaintGamma, viewer.Image.PaintContrast, viewer.Image.PaintIntensity)
            Text = str
         End Sub

         Private Sub gammaTrackBar_Scroll(ByVal sender As Object, ByVal e As EventArgs)
            Dim tb As TrackBar = CType(IIf(TypeOf sender Is TrackBar, sender, Nothing), TrackBar)
            viewer.Image.PaintGamma = tb.Value
            UpdateValues()
         End Sub

         Private Sub contrastTrackBar_Scroll(ByVal sender As Object, ByVal e As EventArgs)
            Dim tb As TrackBar = CType(IIf(TypeOf sender Is TrackBar, sender, Nothing), TrackBar)
            viewer.Image.PaintContrast = tb.Value
            UpdateValues()
         End Sub

         Private Sub intensityTrackBar_Scroll(ByVal sender As Object, ByVal e As EventArgs)
            Dim tb As TrackBar = CType(IIf(TypeOf sender Is TrackBar, sender, Nothing), TrackBar)
            viewer.Image.PaintIntensity = tb.Value
            UpdateValues()
         End Sub

         Private Sub defaultButton_Click(ByVal sender As Object, ByVal e As EventArgs)
            viewer.Image.PaintGamma = 100
            viewer.Image.PaintIntensity = 0
            viewer.Image.PaintContrast = 0

            gammaTrackBar.Value = viewer.Image.PaintGamma
            contrastTrackBar.Value = viewer.Image.PaintContrast
            intensityTrackBar.Value = viewer.Image.PaintIntensity

            UpdateValues()
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void IntensityExample()
      {
         IntensityForm f = new IntensityForm();
         f.ShowDialog();
      }
      class IntensityForm : Form
      {
         RasterImageViewer viewer;
         TrackBar gammaTrackBar;
         TrackBar contrastTrackBar;
         TrackBar intensityTrackBar;

         public IntensityForm()
         {
            // Create the controls
            Size = new Size(800, 600);
            Panel controlsPanel = new Panel();
            controlsPanel.Size = new Size(400, 0);
            controlsPanel.BorderStyle = BorderStyle.Fixed3D;
            controlsPanel.Dock = DockStyle.Left;

            int labelLeft = 8;
            int y = 16;
            int trackBarLeft = 100;

            Label gammaLabel = new Label();
            gammaLabel.Text = "Gamma:";
            gammaLabel.Location = new Point(labelLeft, y);
            gammaLabel.AutoSize = true;
            controlsPanel.Controls.Add(gammaLabel);

            gammaTrackBar = new TrackBar();
            gammaTrackBar.Minimum = 1;
            gammaTrackBar.Maximum = 100;
            gammaTrackBar.TickFrequency = (gammaTrackBar.Maximum - gammaTrackBar.Minimum) / 10;
            gammaTrackBar.Location = new Point(trackBarLeft, y);
            gammaTrackBar.Width = 200;
            gammaTrackBar.Scroll += new EventHandler(gammaTrackBar_Scroll);
            controlsPanel.Controls.Add(gammaTrackBar);
            gammaLabel.Top = gammaTrackBar.Top + (gammaTrackBar.Height - gammaLabel.Height) / 2;
            y = gammaTrackBar.Bottom + 8;

            Label contrastLabel = new Label();
            contrastLabel.Text = "Contrast:";
            contrastLabel.Location = new Point(labelLeft, y);
            contrastLabel.AutoSize = true;
            controlsPanel.Controls.Add(contrastLabel);

            contrastTrackBar = new TrackBar();
            contrastTrackBar.Minimum = -1000;
            contrastTrackBar.Maximum = 1000;
            contrastTrackBar.TickFrequency = (contrastTrackBar.Maximum - contrastTrackBar.Minimum) / 10;
            contrastTrackBar.Location = new Point(trackBarLeft, y);
            contrastTrackBar.Width = 200;
            contrastTrackBar.Scroll += new EventHandler(contrastTrackBar_Scroll);
            controlsPanel.Controls.Add(contrastTrackBar);
            contrastLabel.Top = contrastTrackBar.Top + (contrastTrackBar.Height - contrastLabel.Height) / 2;
            y = contrastTrackBar.Bottom + 8;

            Label intensityLabel = new Label();
            intensityLabel.Text = "Intensity:";
            intensityLabel.Location = new Point(labelLeft, y);
            intensityLabel.AutoSize = true;
            controlsPanel.Controls.Add(intensityLabel);
            y = intensityLabel.Bottom + 8;

            intensityTrackBar = new TrackBar();
            intensityTrackBar.Minimum = -1000;
            intensityTrackBar.Maximum = 1000;
            intensityTrackBar.TickFrequency = (intensityTrackBar.Maximum - intensityTrackBar.Minimum) / 10;
            intensityTrackBar.Location = new Point(trackBarLeft, y);
            intensityTrackBar.Width = 200;
            intensityTrackBar.Scroll += new EventHandler(intensityTrackBar_Scroll);
            controlsPanel.Controls.Add(intensityTrackBar);
            intensityLabel.Top = intensityTrackBar.Top + (intensityTrackBar.Height - intensityLabel.Height) / 2;
            y = intensityTrackBar.Bottom + 8;

            Button defaultButton = new Button();
            defaultButton.Text = "Default";
            defaultButton.Location = new Point(labelLeft, y);
            defaultButton.Click += new EventHandler(defaultButton_Click);
            controlsPanel.Controls.Add(defaultButton);

            Controls.Add(controlsPanel);

            viewer = new RasterImageViewer();
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.SizeMode = RasterPaintSizeMode.Fit;
            viewer.BringToFront();

            // Load the image
            RasterCodecs codecs = new RasterCodecs();

            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
            viewer.Image = codecs.Load(srcFileName);

            codecs.Dispose();

            gammaTrackBar.Value = viewer.Image.PaintGamma;
            contrastTrackBar.Value = viewer.Image.PaintContrast;
            intensityTrackBar.Value = viewer.Image.PaintIntensity;
            UpdateValues();
         }

         void UpdateValues()
         {
            string str = string.Format(
               "Gamma = {0}, Contrast = {1}, Intensity = {2}",
               viewer.Image.PaintGamma, viewer.Image.PaintContrast, viewer.Image.PaintIntensity);
            Text = str;
         }

         void gammaTrackBar_Scroll(object sender, EventArgs e)
         {
            TrackBar tb = sender as TrackBar;
            viewer.Image.PaintGamma = tb.Value;
            UpdateValues();
         }

         void contrastTrackBar_Scroll(object sender, EventArgs e)
         {
            TrackBar tb = sender as TrackBar;
            viewer.Image.PaintContrast = tb.Value;
            UpdateValues();
         }

         void intensityTrackBar_Scroll(object sender, EventArgs e)
         {
            TrackBar tb = sender as TrackBar;
            viewer.Image.PaintIntensity = tb.Value;
            UpdateValues();
         }

         void defaultButton_Click(object sender, EventArgs e)
         {
            viewer.Image.PaintGamma = 100;
            viewer.Image.PaintIntensity = 0;
            viewer.Image.PaintContrast = 0;

            gammaTrackBar.Value = viewer.Image.PaintGamma;
            contrastTrackBar.Value = viewer.Image.PaintContrast;
            intensityTrackBar.Value = viewer.Image.PaintIntensity;

            UpdateValues();
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.PaintContrast">
      <summary>Gets or sets the current contrast value for the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current contrast value.</value>
      <remarks>
        <para>Amount of contrast change. Valid values are -1000 to +1000.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.PaintGamma" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.PaintIntensity">
      <summary>Gets or sets the current intensity value for the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The current intensity value.</value>
      <remarks>
        <para>Amount to change the intensity. Valid values are -1000 to +1000. A positive value increases (or lightens)
            the brightness of the display. A negative values decreases (or darkens) the brightness of the display.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.PaintGamma" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.TransparentColor">
      <summary>Gets or sets the transparent color used when painting this image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The transparent color used when painting this image.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.TransparentColor" /> of a <see cref="T:Leadtools.RasterImage" /> is used when the <see cref="P:Leadtools.RasterImage.Transparent" />
            property value is set to true.</para>
        <para>Note, transparent paint does not work with <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see>.  For more information, refer to
            <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</para>
        <para>If this <see cref="T:Leadtools.RasterImage" /> has a <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> value of 8 or less, then the image has a palette. For palettized images, the value
            of the <see cref="P:Leadtools.RasterImage.TransparentColor" /> can be an RGB value or a palette index.</para>
        <para>To set a palette index as the transparent color, use the <see cref="M:Leadtools.RasterColor.FromPaletteIndex(System.Int32)">RasterColor.FromPaletteIndex</see> method.</para>
        <para>If the color passed is a true RGB value(The value of see <see cref="P:Leadtools.RasterColor.IsPaletteIndex">RasterColor.IsPaletteIndex</see> is <strong>false</strong>
            and the image has a palette, then this <see cref="T:Leadtools.RasterImage" /> object will call <see cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" /> on the <see cref="P:Leadtools.RasterImage.TransparentColor" /> to
            translate it into the nearest palette index entry before using it to determine the actual transparent color in the image when painting.</para>
        <para>For more information, refer to <see cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</see>.</para>
      </remarks>
      <example>
        <para>
          <para>For an example of how to use this property when loading/saving images with transparent colors such as GIF, refer to <see cref="M:Leadtools.RasterImage.GetTrueColorValue(Leadtools.RasterColor)" />.</para>
        </para>
        <code lang="VB">      Public Sub TransparentColorExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Transparent.gif")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Change the image's palette to be Red and Blue
         Dim redBluePalette As RasterColor() = New RasterColor(1) {}
         redBluePalette(0) = RasterColor.FromKnownColor(RasterKnownColor.Red)
         redBluePalette(1) = RasterColor.FromKnownColor(RasterKnownColor.Blue)
         image.SetPalette(redBluePalette, 0, 2)

         ' make red the transparent color
         image.Transparent = True
         image.TransparentColor = redBluePalette(0)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Gif, 8)

         ' Now load Ocr1_Transparent.gif in Internet Explorer.
         ' Notice how red is treated as a transparent color.
         ' You should get Blue text on a white background
         '    (if IE's background color is white).

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void TransparentColorExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Ocr1_Transparent.gif");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);

         // Change the image's palette to be Red and Blue
         RasterColor[] redBluePalette = new RasterColor[2];
         redBluePalette[0] = RasterColor.FromKnownColor(RasterKnownColor.Red);
         redBluePalette[1] = RasterColor.FromKnownColor(RasterKnownColor.Blue);
         image.SetPalette(redBluePalette, 0, 2);

         // make red the transparent color
         image.Transparent = true;
         image.TransparentColor = redBluePalette[0];

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Gif, 8);

         // Now load Ocr1_Transparent.gif in Internet Explorer.
         // Notice how red is treated as a transparent color.
         // You should get Blue text on a white background
         //    (if IE's background color is white).

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void TransparentColorExample(RasterImage image, Stream destStream)
      {
         // Change the image's palette to be Red and Blue
         RasterColor[] redBluePalette = new RasterColor[2];
         redBluePalette[0] = RasterColorConverter.FromColor(Colors.Red);
         redBluePalette[1] = RasterColorConverter.FromColor(Colors.Blue);
         image.SetPalette(redBluePalette, 0, 2);
         // make red the transparent color
         image.Transparent = true;
         image.TransparentColor = redBluePalette[0];

         // Save the image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.Gif, 8);

         // Now load Ocr1_Transparent.gif in Internet Explorer.
         // Notice how red is treated as a transparent color.
         // You should get Blue text on a white background
         //    (if IE's background color is white).

         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub TransparentColorExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Change the image's palette to be Red and Blue
         Dim redBluePalette As RasterColor() = New RasterColor(1){}
         redBluePalette(0) = RasterColorConverter.FromColor(Colors.Red)
         redBluePalette(1) = RasterColorConverter.FromColor(Colors.Blue)
         image.SetPalette(redBluePalette, 0, 2)
         ' make red the transparent color
         image.Transparent = True
         image.TransparentColor = redBluePalette(0)

         ' Save the image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.Gif, 8)

         ' Now load Ocr1_Transparent.gif in Internet Explorer.
         ' Notice how red is treated as a transparent color.
         ' You should get Blue text on a white background
         '    (if IE's background color is white).

         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.DitheringMethod">
      <summary>Gets or sets the default dithering method, referenced by some internal LEADTOOLS methods. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The default dithering method used.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)" />.</example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">RasterImage.DitherLine method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.Data">
      <summary>Gets the data for the image in native format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The data for the image.</value>
      <remarks>
        <para>This value should only be used with images created with user-defined data.  Other type of images will return an
            undefined internal value.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub DataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Data.bmp")

         ' Create an image with user defined data
         Dim width As Integer = 40
         Dim height As Integer = 40
         Dim bitsPerPixel As Integer = 24
         Dim size As Integer = width * height * 3
         Dim data1 As IntPtr = Marshal.AllocHGlobal(size)

         ' Load the image
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.User, width, height, bitsPerPixel, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, data1, size)

         ' Get a pointer to the internal data and fill it with gray shades
         Dim dataSize As Integer = CInt(image.DataSize)

         Dim buffer As Byte() = New Byte(dataSize - 1) {}
         Dim inc As Boolean = True
         Dim value As Byte = 0
         Dim i As Integer = 0
         Do While i &lt; buffer.Length
            buffer(i + 0) = value
            buffer(i + 1) = value
            buffer(i + 2) = value

            If inc Then
               If value = 255 Then
                  inc = False
                  value = 254
               Else
                  value = value + Convert.ToByte(1)
               End If
            Else
               If value = 0 Then
                  inc = True
                  value = 1
               Else
                  value = value - Convert.ToByte(1)
               End If
            End If
            i += 3
         Loop

         ' Copy this buffer to the image data
         Dim data2 As IntPtr = CType(image.Data, IntPtr)
         Marshal.Copy(buffer, 0, data2, buffer.Length)

         ' Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)

         image.Dispose()
         Marshal.FreeHGlobal(data1)
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void DataExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Data.bmp");

         // Create an image with user defined data
         int width = 40;
         int height = 40;
         int bitsPerPixel = 24;
         int size = width * height * 3;
         IntPtr data1 = Marshal.AllocHGlobal(size);

         // Load the image
         RasterImage image = new RasterImage(
            RasterMemoryFlags.User,
            width,
            height,
            bitsPerPixel,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            data1,
            size);

         // Get a pointer to the internal data and fill it with gray shades
         long dataSize = image.DataSize;

         byte[] buffer = new byte[dataSize];
         bool inc = true;
         byte value = 0;
         for(int i = 0; i &lt; buffer.Length; i += 3)
         {
            buffer[i + 0] = value;
            buffer[i + 1] = value;
            buffer[i + 2] = value;

            if(inc)
            {
               if(value == 255)
               {
                  inc = false;
                  value = 254;
               }
               else
                  value++;
            }
            else
            {
               if(value == 0)
               {
                  inc = true;
                  value = 1;
               }
               else
                  value--;
            }
         }

         // Copy this buffer to the image data
         IntPtr data2 = (IntPtr)image.Data;
         Marshal.Copy(buffer, 0, data2, buffer.Length);

         // Save the image
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);

         image.Dispose();
         Marshal.FreeHGlobal(data1);
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.DataSize">
      <summary>Gets the size, in bytes, of the image data buffer. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The size, in bytes of the image data buffer.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ChangeCompression(Leadtools.RasterCompression)" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsConventionalMemory">
      <summary>Determines if the memory allocated for the image data is in conventional memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is in conventional memory, otherwise; false.</value>
      <noremarks />
      <example>
        <para>This example creates images with different RasterMemoryFlags types.</para>
        <code lang="VB">      Public Sub IsConventionalMemoryExample()
         ' create image with conventional memory 
         Dim imageConv As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
         Console.WriteLine("imageConv.IsConventionalMemory = {0}", imageConv.IsConventionalMemory.ToString())
         imageConv.Dispose()

         ' create image with disk memory
         Dim imageDisk As RasterImage = New RasterImage(RasterMemoryFlags.Disk, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
         Console.WriteLine("imageDisk.IsDiskMemory = {0}", imageDisk.IsDiskMemory.ToString())
         imageDisk.Dispose()

         ' create image with tiled memory
         Dim imageTiled As RasterImage = New RasterImage(RasterMemoryFlags.Tiled, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
         Console.WriteLine("imageTiled.IsTiled = {0}", imageTiled.IsTiled.ToString())
         imageTiled.Dispose()
      End Sub</code>
        <code lang="CS">      public void IsConventionalMemoryExample()
      {
         // create image with conventional memory 
         RasterImage imageConv = new RasterImage(RasterMemoryFlags.Conventional, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Console.WriteLine("imageConv.IsConventionalMemory = {0}", imageConv.IsConventionalMemory.ToString());
         imageConv.Dispose();

         // create image with disk memory
         RasterImage imageDisk = new RasterImage(RasterMemoryFlags.Disk, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Console.WriteLine("imageDisk.IsDiskMemory = {0}", imageDisk.IsDiskMemory.ToString());
         imageDisk.Dispose();

         // create image with tiled memory
         RasterImage imageTiled = new RasterImage(RasterMemoryFlags.Tiled, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Console.WriteLine("imageTiled.IsTiled = {0}", imageTiled.IsTiled.ToString());
         imageTiled.Dispose();
      }</code>
        <code lang="SilverlightCSharp">      public void IsConventionalMemoryExample()
      {
         // create image with conventional memory 
         RasterImage imageConv = new RasterImage(RasterMemoryFlags.Conventional, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("imageConv.IsConventionalMemory = {0}", imageConv.IsConventionalMemory.ToString());
         imageConv.Dispose();
         // create image with disk memory
         RasterImage imageDisk = new RasterImage(RasterMemoryFlags.Disk, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("imageDisk.IsDiskMemory = {0}", imageDisk.IsDiskMemory.ToString());
         imageDisk.Dispose();

         // create image with tiled memory
         RasterImage imageTiled = new RasterImage(RasterMemoryFlags.Tiled, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         Debug.WriteLine("imageTiled.IsTiled = {0}", imageTiled.IsTiled.ToString());
         imageTiled.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub IsConventionalMemoryExample()
         ' create image with conventional memory 
         Dim imageConv As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("imageConv.IsConventionalMemory = {0}", imageConv.IsConventionalMemory.ToString())
         imageConv.Dispose()
         ' create image with disk memory
         Dim imageDisk As RasterImage = New RasterImage(RasterMemoryFlags.Disk, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("imageDisk.IsDiskMemory = {0}", imageDisk.IsDiskMemory.ToString())
         imageDisk.Dispose()

         ' create image with tiled memory
         Dim imageTiled As RasterImage = New RasterImage(RasterMemoryFlags.Tiled, 3000, 3000, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         Debug.WriteLine("imageTiled.IsTiled = {0}", imageTiled.IsTiled.ToString())
         imageTiled.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.IsCompressed">
      <summary>Determines if the memory allocated for the image data is compressed memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is compressed memory, otherwise; false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ChangeCompression(Leadtools.RasterCompression)" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsDiskMemory">
      <summary>Determines if the memory allocated for the image data is allocated as a disk file rather than in physical memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is allocated as a disk file rather than in physical memory, otherwise; false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.IsConventionalMemory" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsTiled">
      <summary>Determines if the memory allocated for the image data is allocated in tiles. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is allocated in tiles.</value>
      <noremarks />
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.IsConventionalMemory" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsSuperCompressed">
      <summary>Determines if the memory allocated for the image data is super-compressed memory. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is super-compressed memory, otherwise; false.</value>
      <noremarks />
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.ChangeCompression(Leadtools.RasterCompression)" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsGlobalMemory">
      <summary>Determines if the memory allocated for the image data is a global Windows handle. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the memory allocated for the image data is a global Windows handle, otherwise; false.</value>
      <remarks>
            If the value of this property is set, you must use <see cref="M:Leadtools.RasterImage.Access" /> and <see cref="M:Leadtools.RasterImage.Release" /> when using low level
            methods that access the image data directly.  For more information, refer to <see cref="M:Leadtools.RasterImage.Access" />.<para>
            In Silverlight, a value of True indicates that the RasterImage object has stored the image data internally using a Silverlight WritableBitmap.
             For more information, see <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</see> and <see cref="P:Leadtools.Codecs.CodecsLoadOptions.UseNativeLoad">UseNativeLoad</see></para></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.Byte[],System.Int32,System.Int32)" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.Transparent">
      <summary>Gets or sets a value that indicates whether to use the transparent color. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to use the transparent color, otherwise; false.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterImage.TransparentColor" /> of a <see cref="T:Leadtools.RasterImage" /> is used when the <see cref="P:Leadtools.RasterImage.Transparent" />
            property value is set to true.</para>
        <para>Note, transparent paint does not work with <see cref="T:Leadtools.Drawing.RasterPaintEngine">RasterPaintEngine.Gdi</see>.  For more information, refer to
            <see cref="T:Leadtools.Drawing.RasterPaintProperties" />.</para>
        <para>For more information, refer to <see cref="T:L.Topics.PNGFilesAndTransparency">PNG Files and Transparency</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.TransparentColor" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.Signed">
      <summary>Determines if the image data contains signed values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image data contains signed (i.e. positive and negative) values, otherwise; fasle.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ClearNegativePixelsCommand" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.IsMirrored">
      <summary>Determines whether the image data is mirrored. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image data is mirrored, otherwise; false.</value>
      <remarks>
        <para>Mirrored data means the data is shared between this <see cref="T:Leadtools.RasterImage" /> and another object. When creating user-memory images for example,
            the <see cref="P:Leadtools.RasterImage.IsMirrored" /> and the <see cref="P:Leadtools.RasterImage.IsConventionalMemory" /> properties will both be <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.IsBasic" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.UseLookupTable">
      <summary>Enables or disables using the lookup table (LUT) of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>LUT|Lookup Table</keywords>
      <value>true to enable using the lookup table (LUT), false to disable it.</value>
      <remarks>
            You can access the lookup table (LUT) with the <see cref="M:Leadtools.RasterImage.GetLookupTable" /> and <see cref="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])" /> methods.
            <para>LUT is only used for 10-16 bit extended grayscale image or 10-16 bit palette color image. To update the palette in 1-8 bit image use <see cref="M:Leadtools.RasterImage.SetPalette(Leadtools.RasterColor[],System.Int32,System.Int32)" />. For mor information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para><para>If the value is true, the LUT will be used in all image processing commands and save. If the value is false, the LUT will be used only when painting and the LUT will be ignored when an image processing command is applied or when a file is saved.</para></remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterImage.SetLookupTable(Leadtools.RasterColor[])" />.</example>
      <seealso cref="T:Leadtools.Drawing.RasterPaintCallbacks" />
      <seealso cref="T:Leadtools.Topics.ImplementingCustomPaint">Implementing custom paint</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.UsePaintLookupTable">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            For internal use by LEADTOOLS.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterImage.NoRegionClip">
      <summary>Enables or disables clipping the image to the region. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to clip the image to the region, otherwise; false.</value>
      <remarks>
            This property is used internally by LEADTOOLS.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterImage.PremultiplyAlpha">
      <summary>Enables or disables automatic handling of premultiplied alpha channel values when using Silverlight <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to allow LEADTOOLS to automatically handle premultiplied alpha channel values; false otherwise.</value>
      <remarks>
        <para>
            This property is only supported in Silverlight versions.  This property only applies to 32-bit images.  This property only has an effect when using <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see> for memory storage of the image data.
            </para>
        <para>
            When this property is set to True, LEADTOOLS will automatically do the required conversions to store premultipled alpha values into the <see cref="T:Leadtools.RasterMemoryFlags">WriteableBitmap</see>.  If you are dealing with 32-bit images that do not have meaningful alpha channel values, you should simply set this property to false.
            </para>
        <para>
            Setting this property to True will slow down image processing functions.  You should only use this if you know your images have meaningful alpha channel values.
            </para>
      </remarks>
      <seealso cref="T:Leadtools.RasterMemoryFlags">RasterMemoryFlags.WriteableBitmap</seealso>
      <seealso cref="M:Leadtools.Windows.Media.RasterImageConverter.ConvertToSource(Leadtools.RasterImage,Leadtools.Windows.Media.ConvertToSourceOptions)">RasterImageConverter.ConvertToSource</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertToSourceOptions">ConvertToSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.Windows.Media.ConvertFromSourceOptions">ConvertFromSourceOptions.AutoDetectAlpha</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.DetectAlphaCommand">DetectAlphaCommand</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.UseWriteableBitmap">CodecsLoadOptions.UseWriteableBitmap</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsLoadOptions.AutoDetectAlpha">CodecsLoadOptions.AutoDetectAlpha</seealso>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterImage.IsBasic">
      <summary>Determines whether the image data is basic. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image data is basic, otherwise; false.</value>
      <remarks>
        <para>The image data is considered basic if the value of the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> is one of the following:
            <list type="bullet"><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft</see></description></item></list></para>
        <para>Otherwise, the image is either rotated (<see cref="P:Leadtools.RasterImage.IsRotated" />) or flipped (<see cref="P:Leadtools.RasterImage.IsFlipped" />).</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>
        <para>This example tests the various Image Info properties.</para>
        <code lang="VB">      Public Sub IsBasicExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"))

         Dim s As String = ("Is Mirrored " &amp; image.IsMirrored.ToString() + Constants.vbLf)
         s &amp;= ("Is Basic " &amp; image.IsBasic.ToString() + Constants.vbLf)
         s &amp;= ("Is Tiled " &amp; image.IsTiled.ToString() + Constants.vbLf)
         s &amp;= ("Is Global Memory " &amp; image.IsGlobalMemory.ToString() + Constants.vbLf)
         s &amp;= ("Is Gray " &amp; image.IsGray.ToString() + Constants.vbLf)
         s &amp;= ("No Region Clip " &amp; image.NoRegionClip.ToString() + Constants.vbLf)
         s &amp;= ("Transparent " &amp; image.Transparent.ToString() + Constants.vbLf)
         s &amp;= ("Transparent Color " &amp; image.TransparentColor.ToString() + Constants.vbLf)
         s &amp;= ("X resolution, Y Resolution (" &amp; image.XResolution &amp; ", " &amp; image.YResolution &amp; ") ")
         Console.WriteLine(s)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void IsBasicExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"));

         string s = ("Is Mirrored " + image.IsMirrored + "\n");
         s += ("Is Basic " + image.IsBasic + "\n");
         s += ("Is Tiled " + image.IsTiled + "\n");
         s += ("Is Global Memory " + image.IsGlobalMemory + "\n");
         s += ("Is Gray " + image.IsGray + "\n");
         s += ("No Region Clip " + image.NoRegionClip + "\n");
         s += ("Transparent " + image.Transparent + "\n");
         s += ("Transparent Color " + image.TransparentColor + "\n");
         s += ("X resolution, Y Resolution (" + image.XResolution + ", " + image.YResolution + ") ");
         Console.WriteLine(s);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void IsBasicExample(RasterImage image)
      {
         string s = ("Is Mirrored " + image.IsMirrored + "\n");
         s += ("Is Basic " + image.IsBasic + "\n");
         s += ("Is Tiled " + image.IsTiled + "\n");
         s += ("Is Global Memory " + image.IsGlobalMemory + "\n");
         s += ("Is Gray " + image.IsGray + "\n");
         s += ("No Region Clip " + image.NoRegionClip + "\n");
         s += ("Transparent " + image.Transparent + "\n");
         s += ("Transparent Color " + image.TransparentColor + "\n");
         s += ("X resolution, Y Resolution (" + image.XResolution + ", " + image.YResolution + ") ");
         Debug.WriteLine(s);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub IsBasicExample(ByVal image As RasterImage)
         Dim s As String = ("Is Mirrored " + image.IsMirrored + Constants.vbLf)
         s &amp;= ("Is Basic " + image.IsBasic + Constants.vbLf)
         s &amp;= ("Is Tiled " + image.IsTiled + Constants.vbLf)
         s &amp;= ("Is Global Memory " + image.IsGlobalMemory + Constants.vbLf)
         s &amp;= ("Is Gray " + image.IsGray + Constants.vbLf)
         s &amp;= ("No Region Clip " + image.NoRegionClip + Constants.vbLf)
         s &amp;= ("Transparent " + image.Transparent + Constants.vbLf)
         s &amp;= ("Transparent Color " + image.TransparentColor.ToString() + Constants.vbLf)
         s &amp;= ("X resolution, Y Resolution (" + image.XResolution &amp; ", " &amp; image.YResolution &amp; ") ")
         Debug.WriteLine(s)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.IsRotated">
      <summary>Determines whether the image has a rotated <see cref="P:Leadtools.RasterImage.ViewPerspective" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has a rotated <see cref="P:Leadtools.RasterImage.ViewPerspective" />, otherwise; false.</value>
      <remarks>
        <para>The image data is considered rotated if the value of the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> is one of the following:
            <list type="bullet"><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.RightTop</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft90</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.LeftBottom</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft270</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.LeftTop</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft90</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.RightBottom</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.BottomLeft270</see></description></item></list></para>
        <para>Otherwise, the image is either basic (<see cref="P:Leadtools.RasterImage.IsBasic" />) or flipped (<see cref="P:Leadtools.RasterImage.IsFlipped" />).</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.IsBasic" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.IsFlipped">
      <summary>Determines whether the image has a a flipped <see cref="P:Leadtools.RasterImage.ViewPerspective" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has a flipped <see cref="P:Leadtools.RasterImage.ViewPerspective" />, otherwise; false.</value>
      <remarks>
        <para>The image data is considered flipped if the value of the <see cref="P:Leadtools.RasterImage.ViewPerspective" /> is one of the following:
            <list type="bullet"><item><description><see cref="T:Leadtools.RasterViewPerspective">BottomLeft</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">LeftTop</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">BottomLeft90</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">TopRight</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">BottomLeft180</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">RightBottom</see></description></item><item><description><see cref="T:Leadtools.RasterViewPerspective">BottomLeft270</see></description></item></list></para>
        <para>Otherwise, the image is either basic (<see cref="P:Leadtools.RasterImage.IsBasic" />) or rotated (<see cref="P:Leadtools.RasterImage.IsRotated" />).</para>
        <para>For more information refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.IsBasic" /></example>
    </member>
    <member name="P:Leadtools.RasterImage.IsGray">
      <summary>Determines whether the image has a grayscale byte order. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if the image has a grayscale byte order, otherwise; false.</value>
      <remarks>
        <para>This property is used internally by LEADTOOLS and checks if the image has a grayscale byte order.</para>
        <para>To determine if the image data is grayscale, use the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterImage.DitherData">
      <summary>For internal use by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            For internal use by LEADTOOLS.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.RasterImage.GrayscaleMode">
      <summary>Determines if this <see cref="T:Leadtools.RasterImage" /> is a grayscale image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterGrayscaleMode" /> enumeration member to determine if this <see cref="T:Leadtools.RasterImage" /> is a
            grayscale image.</value>
      <remarks>
        <para>Use this property to determine if the data inside this <see cref="T:Leadtools.RasterImage" /> object is grayscale before
            calling methods and properties that rely on grayscale data.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.GrayscaleCommand" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.OriginalFormat">
      <summary>Gets or sets the original image format of this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The original image format of this <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>
        <para>When a <see cref="T:Leadtools.RasterImage" /> object is created by loading it from an image file, this property will hold
            the format type of the file as a <see cref="T:Leadtools.RasterImageFormat" /> enumeration member.</para>
        <para>If the <see cref="T:Leadtools.RasterImage" /> was created by other means (for example, through the <see cref="T:Leadtools.RasterImage" />
            constructor or scanning), the value of this property will be <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>.</para>
      </remarks>
      <example>
        <para>This example displays the OriginalFormat of the loaded image.</para>
        <code lang="VB">      Public Sub OriginalFormatExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"))

         Dim s As String = ("Original Format: " &amp; image.OriginalFormat)
         Console.WriteLine(s)

         image.Dispose()
         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void OriginalFormatExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "OCR1.TIF"));

         string s = ("Original Format: " + image.OriginalFormat);
         Console.WriteLine(s);

         image.Dispose();
         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void OriginalFormatExample(RasterImage image)
      {
         string s = ("Original Format: " + image.OriginalFormat);
         Debug.WriteLine(s);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub OriginalFormatExample(ByVal image As RasterImage)
         Dim s As String = ("Original Format: " &amp; image.OriginalFormat)
         Debug.WriteLine(s)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.MemoryInformation">
      <summary>Gets or sets information about the memory allocated for the image data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>
            Information about the memory allocated for the image data.
            </value>
      <remarks>
        <para>Refer to <see cref="T:Leadtools.RasterImageMemoryInformation" /> for description of the different memory modules used
            by LEADTOOLS when allocating images.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.MemoryStorageTypesForImages">Memory Storage Types for Images</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.CloneCommand" />.</example>
    </member>
    <member name="P:Leadtools.RasterImage.Tags">
      <summary>The collection of tag data used when reading and writing certain file formats (including TIFF). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> used when reading and writing certain file formats (including TIFF).
            </value>
      <remarks>
        <para>Several formats allow you to store non-image data such as comments, tags, and markers.</para>
        <para>You can manipulate the tags of an image by adding/removing <see cref="T:Leadtools.RasterTagMetadata" /> objects to
            this collection.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsSaveOptions.Tags">CodecsSaveOptions.Tags</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">RasterCodecs.Save</see>, you can save the tags in this collection when the image is
            saved into a file.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers">CodecsLoadOptions.Markers</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>, you can load all the markers (if any) into this collection when an
            image is loaded from a file.</para>
        <para>You can use the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteTags(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">RasterCodecs.WriteTags</see>
            method to save the tags directly to an existing file and the <see cref="M:Leadtools.Codecs.RasterCodecs.EnumTags(System.IO.Stream,System.Int32)">RasterCodecs.EnumTags</see>
            to load the tags stored in an existing file.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NonImageData">Non Image Data</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub DisplayTag(ByVal tag As RasterTagMetadata)
         Select Case tag.DataType
            Case RasterTagMetadataDataType.Ascii
               MessageBox.Show("Tag " &amp; tag.Id.ToString() &amp; " = " &amp; tag.ToAscii())
            Case RasterTagMetadataDataType.Byte
               MessageBox.Show("Tag " &amp; tag.Id.ToString() &amp; " = " &amp; tag.ToByte()(0).ToString())
         End Select
      End Sub
      Public Sub TagsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         'Ascii
         Dim tagDataAscii As RasterTagMetadata = New RasterTagMetadata()
         ' set the Copyright tag
         tagDataAscii.Id = &amp;H8000
         tagDataAscii.DataType = RasterTagMetadataDataType.Ascii
         tagDataAscii.FromAscii("Test String")
         image.Tags.Add(tagDataAscii)

         'Byte
         Dim tagDataByte As RasterTagMetadata = tagDataAscii.Clone()
         tagDataAscii.Id = &amp;H8001
         tagDataByte.DataType = RasterTagMetadataDataType.Byte
         Dim byteArray As Byte() = New Byte(0) {}
         byteArray(0) = 10
         tagDataByte.FromByte(byteArray)
         image.Tags.Add(tagDataByte)

         codecs.Options.Save.Tags = True
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), RasterImageFormat.Tif, 0)
         ' load the tags together with the image

         Dim tag As RasterTagMetadata = codecs.ReadTag(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), 1, &amp;H8000)
         DisplayTag(tag)
         tag = codecs.ReadTag(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), 1, &amp;H8001)
         DisplayTag(tag)

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void DisplayTag(RasterTagMetadata tag)
      {
         switch(tag.DataType)
         {
            case RasterTagMetadataDataType.Ascii:
               MessageBox.Show("Tag " + tag.Id.ToString() + " = " + tag.ToAscii());
               break;
            case RasterTagMetadataDataType.Byte:
               MessageBox.Show("Tag " + tag.Id.ToString() + " = " + tag.ToByte()[0].ToString());
               break;
         }
      }
      public void TagsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         //Ascii
         RasterTagMetadata tagDataAscii = new RasterTagMetadata();
         // set the Copyright tag
         tagDataAscii.Id = 0x8000;
         tagDataAscii.DataType = RasterTagMetadataDataType.Ascii;
         tagDataAscii.FromAscii("Test String");
         image.Tags.Add(tagDataAscii);

         //Byte
         RasterTagMetadata tagDataByte = tagDataAscii.Clone();
         tagDataAscii.Id = 0x8001;
         tagDataByte.DataType = RasterTagMetadataDataType.Byte;
         byte[] byteArray = new byte[1];
         byteArray[0] = 10;
         tagDataByte.FromByte(byteArray);
         image.Tags.Add(tagDataByte);

         codecs.Options.Save.Tags = true;
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), RasterImageFormat.Tif, 0);
         // load the tags together with the image

         RasterTagMetadata tag = codecs.ReadTag(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), 1, 0x8000);
         DisplayTag(tag);
         tag = codecs.ReadTag(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_TAGS.TIF"), 1, 0x8001);
         DisplayTag(tag);

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void DisplayTag(RasterTagMetadata tag)
      {
         switch (tag.DataType)
         {
            case RasterTagMetadataDataType.Ascii:
               Debug.WriteLine("Tag " + tag.Id.ToString() + " = " + tag.ToAscii());
               break;
            case RasterTagMetadataDataType.Byte:
               Debug.WriteLine("Tag " + tag.Id.ToString() + " = " + tag.ToByte()[0].ToString());
               break;
         }
      }
      public void TagsExample(RasterImage image, Stream destStream)
      {
         //Ascii
         RasterTagMetadata tagDataAscii = new RasterTagMetadata();
         // set the Copyright tag
         tagDataAscii.Id = 0x8000;
         tagDataAscii.DataType = RasterTagMetadataDataType.Ascii;
         tagDataAscii.FromAscii("Test String");
         image.Tags.Add(tagDataAscii);
         //Byte
         RasterTagMetadata tagDataByte = tagDataAscii.Clone();
         tagDataAscii.Id = 0x8001;
         tagDataByte.DataType = RasterTagMetadataDataType.Byte;
         byte[] byteArray = new byte[1];
         byteArray[0] = 10;
         tagDataByte.FromByte(byteArray);
         image.Tags.Add(tagDataByte);

         RasterCodecs codecs = new RasterCodecs();
         codecs.Options.Save.Tags = true;
         codecs.Save(image, destStream, RasterImageFormat.Tif, 0);
         // load the tags together with the image

         RasterTagMetadata tag = codecs.ReadTag(destStream, 1, 0x8000);
         DisplayTag(tag);
         tag = codecs.ReadTag(destStream, 1, 0x8001);
         DisplayTag(tag);
      }</code>
        <code lang="SilverlightVB">      Private Sub DisplayTag(ByVal tag As RasterTagMetadata)
         Select Case tag.DataType
            Case RasterTagMetadataDataType.Ascii
               Debug.WriteLine("Tag " &amp; tag.Id.ToString() &amp; " = " &amp; tag.ToAscii())
            Case RasterTagMetadataDataType.Byte
               Debug.WriteLine("Tag " &amp; tag.Id.ToString() &amp; " = " &amp; tag.ToByte()(0).ToString())
         End Select
      End Sub
      Public Sub TagsExample(ByVal image As RasterImage, ByVal destStream As Stream)
         'Ascii
         Dim tagDataAscii As RasterTagMetadata = New RasterTagMetadata()
         ' set the Copyright tag
         tagDataAscii.Id = &amp;H8000
         tagDataAscii.DataType = RasterTagMetadataDataType.Ascii
         tagDataAscii.FromAscii("Test String")
         image.Tags.Add(tagDataAscii)
         'Byte
         Dim tagDataByte As RasterTagMetadata = tagDataAscii.Clone()
         tagDataAscii.Id = &amp;H8001
         tagDataByte.DataType = RasterTagMetadataDataType.Byte
         Dim byteArray As Byte() = New Byte(0){}
         byteArray(0) = 10
         tagDataByte.FromByte(byteArray)
         image.Tags.Add(tagDataByte)

         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Options.Save.Tags = True
         codecs.Save(image, destStream, RasterImageFormat.Tif, 0)
         ' load the tags together with the image

         Dim tag As RasterTagMetadata = codecs.ReadTag(destStream, 1, &amp;H8000)
         DisplayTag(tag)
         tag = codecs.ReadTag(destStream, 1, &amp;H8001)
         DisplayTag(tag)
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.GeoKeys">
      <summary>The collection of GeoKeys used when reading and writing Geo TIFF files. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A collection of <see cref="T:Leadtools.RasterTagMetadata" /> GeoKeys used when reading and writing Geo TIFF files.
            </value>
      <remarks>
        <para>GeoTIFF files are TIFF files containing a few extra TIFF tags describing the image location, scale at
            which the picture was taken and many other information useful for topographic applications.</para>
        <para>Any GeoTIFF file that you save will include the GeoKey data set until you clear the GeoKey data. To save this data
            to  a file, save <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.GeoTiff</see> files.</para>
        <para>For more information, refer to <see cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</see>.</para>
        <para>To write the GeoKey data directly to an existing file, call
            <see cref="M:Leadtools.Codecs.RasterCodecs.WriteGeoKey(System.IO.Stream,System.Int32,Leadtools.RasterTagMetadata)">RasterCodecs.WriteGeoKey</see>. Note that LEADTOOLS does not verify the validity of
            the GeoKeys that you set. It is your responsibility to make sure you write correct values according to the GeoTIFF
            specification.</para>
        <para>You can manipulate the GeoKeys of an image by adding/removing <see cref="T:Leadtools.RasterTagMetadata" /> objects to
            this collection.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsSaveOptions.GeoKeys">CodecsSaveOptions.GeoKeys</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">RasterCodecs.Save</see>, you can save the GeoKeys in this collection when the image is
            saved into a file.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers">CodecsLoadOptions.Markers</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>, you can load all the markers (if any) into this collection when an
            image is loaded from a file.</para>
        <para>You can use the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteGeoKeys(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterTagMetadata})">RasterCodecs.WriteGeoKeys</see>
            method to save GeoKeys tags directly to an existing file and the
            <see cref="M:Leadtools.Codecs.RasterCodecs.EnumGeoKeys(System.IO.Stream,System.Int32)">RasterCodecs.EnumGeoKeys</see> to load the GeoKeys stored in an existing file.</para>
        <para>For more information on GeoKeys, refer to <see cref="T:L.Topics.ImplementingGeoKeys">Implementing GeoKeys (GeoTIFF tags)</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NonImageData">Non Image Data</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub DisplayGeoKey(ByVal key As RasterTagMetadata)
         Select Case key.DataType
            Case RasterTagMetadataDataType.Ascii
               MessageBox.Show("Key " &amp; key.Id.ToString() &amp; " = " &amp; key.ToAscii())
            Case RasterTagMetadataDataType.Byte
               MessageBox.Show("Key " &amp; key.Id.ToString() &amp; " = " &amp; key.ToByte()(0).ToString())
         End Select
      End Sub
      Public Sub GeoKeysExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         ' Ascii
         Dim keyDataAscii As RasterTagMetadata = New RasterTagMetadata()
         ' set the GTCitationGeoKey key, for more info, refer to the Geo TIFF spec.
         keyDataAscii.Id = 1026
         keyDataAscii.DataType = RasterTagMetadataDataType.Ascii
         keyDataAscii.FromAscii("Test String")
         image.GeoKeys.Add(keyDataAscii)

         codecs.Options.Save.GeoKeys = True
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GEOKEY.TIF"), RasterImageFormat.GeoTiff, 0)

         ' load the GeoKeys together with the image
         Dim key As RasterTagMetadata = codecs.ReadGeoKey(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GEOKEY.TIF"), 1, keyDataAscii.Id)
         DisplayGeoKey(key)

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void DisplayGeoKey(RasterTagMetadata key)
      {
         switch(key.DataType)
         {
            case RasterTagMetadataDataType.Ascii:
               MessageBox.Show("Key " + key.Id.ToString() + " = " + key.ToAscii());
               break;
            case RasterTagMetadataDataType.Byte:
               MessageBox.Show("Key " + key.Id.ToString() + " = " + key.ToByte()[0].ToString());
               break;
         }
      }
      public void GeoKeysExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         // Ascii
         RasterTagMetadata keyDataAscii = new RasterTagMetadata();
         // set the GTCitationGeoKey key, for more info, refer to the Geo TIFF spec.
         keyDataAscii.Id = 1026;
         keyDataAscii.DataType = RasterTagMetadataDataType.Ascii;
         keyDataAscii.FromAscii("Test String");
         image.GeoKeys.Add(keyDataAscii);

         codecs.Options.Save.GeoKeys = true;
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GEOKEY.TIF"), RasterImageFormat.GeoTiff, 0);

         // load the GeoKeys together with the image
         RasterTagMetadata key = codecs.ReadGeoKey(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_GEOKEY.TIF"), 1, keyDataAscii.Id);
         DisplayGeoKey(key);

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void DisplayGeoKey(RasterTagMetadata key)
      {
         switch (key.DataType)
         {
            case RasterTagMetadataDataType.Ascii:
               Debug.WriteLine("Key " + key.Id.ToString() + " = " + key.ToAscii());
               break;
            case RasterTagMetadataDataType.Byte:
               Debug.WriteLine("Key " + key.Id.ToString() + " = " + key.ToByte()[0].ToString());
               break;
         }
      }
      public void GeoKeysExample(RasterImage image, Stream destStream)
      {
         // Ascii
         RasterTagMetadata keyDataAscii = new RasterTagMetadata();
         // set the GTCitationGeoKey key, for more info, refer to the Geo TIFF spec.
         keyDataAscii.Id = 1026;
         keyDataAscii.DataType = RasterTagMetadataDataType.Ascii;
         keyDataAscii.FromAscii("Test String");
         image.GeoKeys.Add(keyDataAscii);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Options.Save.GeoKeys = true;
         codecs.Save(image, destStream, RasterImageFormat.GeoTiff, 0);

         // load the GeoKeys together with the image
         RasterTagMetadata key = codecs.ReadGeoKey(destStream, 1, keyDataAscii.Id);
         DisplayGeoKey(key);
      }</code>
        <code lang="SilverlightVB">      Private Sub DisplayGeoKey(ByVal key As RasterTagMetadata)
         Select Case key.DataType
            Case RasterTagMetadataDataType.Ascii
               Debug.WriteLine("Key " &amp; key.Id.ToString() &amp; " = " &amp; key.ToAscii())
            Case RasterTagMetadataDataType.Byte
               Debug.WriteLine("Key " &amp; key.Id.ToString() &amp; " = " &amp; key.ToByte()(0).ToString())
         End Select
      End Sub
      Public Sub GeoKeysExample(ByVal image As RasterImage, ByVal destStream As Stream)
         ' Ascii
         Dim keyDataAscii As RasterTagMetadata = New RasterTagMetadata()
         ' set the GTCitationGeoKey key, for more info, refer to the Geo TIFF spec.
         keyDataAscii.Id = 1026
         keyDataAscii.DataType = RasterTagMetadataDataType.Ascii
         keyDataAscii.FromAscii("Test String")
         image.GeoKeys.Add(keyDataAscii)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Options.Save.GeoKeys = True
         codecs.Save(image, destStream, RasterImageFormat.GeoTiff, 0)

         ' load the GeoKeys together with the image
         Dim key As RasterTagMetadata = codecs.ReadGeoKey(destStream, 1, keyDataAscii.Id)
         DisplayGeoKey(key)
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.Comments">
      <summary>The collection of comment data used when reading and writing certain file formats (including GIF). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A collection of <see cref="T:Leadtools.RasterCommentMetadata" /> used when reading and writing certain file formats
            (including GIF).
            </value>
      <remarks>
        <para>Several formats allow you to store non-image data such as comments, tags, and markers.</para>
        <para>You can manipulate the comments of an image by adding/removing <see cref="T:Leadtools.RasterCommentMetadata" /> objects to
            this collection.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsSaveOptions.Comments">CodecsSaveOptions.Comments</see> 
            property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">RasterCodecs.Save</see>, you can save the comments in this collection 
            when the image is
            saved into a file.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers">CodecsLoadOptions.Markers</see> property 
            to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>, you can load all the markers (if any) into 
            this collection when an
            image is loaded from a file.</para>
        <para>You can use the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">RasterCodecs.WriteMarkers</see>
            method to save the markers directly to an existing file.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NonImageData">Non Image Data</see> and 
            <see cref="T:L.Topics.FileComments">Types of File Comments</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub DisplayComment(ByVal comment As RasterCommentMetadata)
         Select Case comment.DataType
            Case RasterCommentMetadataDataType.Ascii
               MessageBox.Show("Comment of type " &amp; comment.Type.ToString() &amp; " = " &amp; comment.ToAscii())
         End Select
      End Sub
      Public Sub CommentsExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         'Ascii
         Dim commentDataAscii As RasterCommentMetadata = New RasterCommentMetadata()
         ' set the artist comment
         commentDataAscii.Type = RasterCommentMetadataType.Artist
         commentDataAscii.FromAscii("Test String")
         image.Comments.Add(commentDataAscii)

         codecs.Options.Save.Comments = True
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_COMMENTS.TIF"), RasterImageFormat.Tif, 0)
         ' load the comment together with the image

         Dim comment As RasterCommentMetadata = codecs.ReadComment(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_COMMENTS.TIF"), 1, RasterCommentMetadataType.Artist)
         DisplayComment(comment)

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void DisplayComment(RasterCommentMetadata comment)
      {
         switch(comment.DataType)
         {
            case RasterCommentMetadataDataType.Ascii:
               MessageBox.Show("Comment of type " + comment.Type.ToString() + " = " + comment.ToAscii());
               break;
         }
      }
      public void CommentsExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"));

         //Ascii
         RasterCommentMetadata commentDataAscii = new RasterCommentMetadata();
         // set the artist comment
         commentDataAscii.Type = RasterCommentMetadataType.Artist;
         commentDataAscii.FromAscii("Test String");
         image.Comments.Add(commentDataAscii);

         codecs.Options.Save.Comments = true;
         codecs.Save(image,Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_COMMENTS.TIF"), RasterImageFormat.Tif, 0);
         // load the comment together with the image

         RasterCommentMetadata comment = codecs.ReadComment(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_COMMENTS.TIF"), 1, RasterCommentMetadataType.Artist);
         DisplayComment(comment);

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      private void DisplayComment(RasterCommentMetadata comment)
      {
         switch (comment.DataType)
         {
            case RasterCommentMetadataDataType.Ascii:
               Debug.WriteLine("Comment of type " + comment.Type.ToString() + " = " + comment.ToAscii());
               break;
         }
      }
      public void CommentsExample(RasterImage image, Stream destStream)
      {
         //Ascii
         RasterCommentMetadata commentDataAscii = new RasterCommentMetadata();
         // set the artist comment
         commentDataAscii.Type = RasterCommentMetadataType.Artist;
         commentDataAscii.FromAscii("Test String");
         image.Comments.Add(commentDataAscii);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Options.Save.Comments = true;
         codecs.Save(image, destStream, RasterImageFormat.Tif, 0);
         // load the comment together with the image

         RasterCommentMetadata comment = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.Artist);
         DisplayComment(comment);
      }</code>
        <code lang="SilverlightVB">      Private Sub DisplayComment(ByVal comment As RasterCommentMetadata)
         Select Case comment.DataType
            Case RasterCommentMetadataDataType.Ascii
               Debug.WriteLine("Comment of type " &amp; comment.Type.ToString() &amp; " = " &amp; comment.ToAscii())
         End Select
      End Sub
      Public Sub CommentsExample(ByVal image As RasterImage, ByVal destStream As Stream)
         'Ascii
         Dim commentDataAscii As RasterCommentMetadata = New RasterCommentMetadata()
         ' set the artist comment
         commentDataAscii.Type = RasterCommentMetadataType.Artist
         commentDataAscii.FromAscii("Test String")
         image.Comments.Add(commentDataAscii)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Options.Save.Comments = True
         codecs.Save(image, destStream, RasterImageFormat.Tif, 0)
         ' load the comment together with the image

         Dim comment As RasterCommentMetadata = codecs.ReadComment(destStream, 1, RasterCommentMetadataType.Artist)
         DisplayComment(comment)
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.Markers">
      <summary>The collection of marker data used when reading and writing certain file formats (including JPEG). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A collection of <see cref="T:Leadtools.RasterMarkerMetadata" /> used when reading and writing certain file formats
            (including JPEG).
            </value>
      <remarks>
        <para>Several formats allow you to store non-image data such as comments, tags, and markers.</para>
        <para>You can manipulate the markers of an image by adding/removing <see cref="T:Leadtools.RasterMarkerMetadata" /> objects to
            this collection.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsSaveOptions.Markers">CodecsSaveOptions.Markers</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Save(Leadtools.RasterImage,System.Uri,Leadtools.RasterImageFormat,System.Int32,System.Int32,System.Int32)">RasterCodecs.Save</see>, you can save the markers in this collection when the image is
            saved into a file.</para>
        <para>By setting the <see cref="P:Leadtools.Codecs.CodecsLoadOptions.Markers">CodecsLoadOptions.Markers</see> property to true before calling
            <see cref="M:Leadtools.Codecs.RasterCodecs.Load(System.Uri,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32)">RasterCodecs.Load</see>, you can load all the markers (if any) into this collection when an
            image is loaded from a file.</para>
        <para>You can use the <see cref="M:Leadtools.Codecs.RasterCodecs.ReadMarkers(System.IO.Stream)">RasterCodecs.ReadMarkers</see> method to load the markers
            directly from an existing file and the <see cref="M:Leadtools.Codecs.RasterCodecs.WriteMarkers(System.IO.Stream,System.Int32,Leadtools.RasterCollection{Leadtools.RasterMarkerMetadata})">RasterCodecs.WriteMarkers</see>
            method to save the markers to an existing file.</para>
        <para>For more information, refer to <see cref="T:L.Topics.NonImageData">Non Image Data</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub MarkersExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1.CMP"))

         Dim byteData As Byte() = New Byte(0) {}
         byteData(0) = 40
         ' write APP5 (since nobody writes that)
         Dim markerData As RasterMarkerMetadata = New RasterMarkerMetadata(RasterMarkerMetadata.App0 + 5, byteData)
         image.Markers.Add(markerData)

         codecs.Options.Save.Markers = True
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_MARKERS.JPG"), RasterImageFormat.Jpeg, 0)

         ' load the marker together with the image
         Dim marker As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_MARKERS.JPG"))
         ' look for the APP5 marker, because there might be other markers (like APP0, APP1)
         For Each markerItem As RasterMarkerMetadata In marker
            If markerItem.Id = RasterMarkerMetadata.App0 + 5 Then
               MessageBox.Show("marker Id :" &amp; markerItem.Id.ToString() &amp; " = " &amp; markerItem.GetData().ToString())
            End If
         Next markerItem

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void MarkersExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"IMAGE1.CMP"));

         byte[] byteData = new byte[1];
         byteData[0] = 40;
         // write APP5 (since nobody writes that)
         RasterMarkerMetadata markerData = new RasterMarkerMetadata(RasterMarkerMetadata.App0 + 5, byteData);
         image.Markers.Add(markerData);

         codecs.Options.Save.Markers = true;
         codecs.Save(image, Path.Combine(LEAD_VARS.ImagesDir, "IMAGE1_MARKERS.JPG"), RasterImageFormat.Jpeg, 0);

         // load the marker together with the image
         RasterCollection&lt;RasterMarkerMetadata&gt; marker = codecs.ReadMarkers(Path.Combine(LEAD_VARS.ImagesDir,"IMAGE1_MARKERS.JPG"));
         // look for the APP5 marker, because there might be other markers (like APP0, APP1)
         foreach(RasterMarkerMetadata markerItem in marker)
            if(markerItem.Id == RasterMarkerMetadata.App0 + 5)
               MessageBox.Show("marker Id :" + markerItem.Id.ToString() + " = " + markerItem.GetData().ToString());

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void MarkersExample(RasterImage image, Stream destStream)
      {
         byte[] byteData = new byte[1];
         byteData[0] = 40;
         // write APP5 (since nobody writes that)
         RasterMarkerMetadata markerData = new RasterMarkerMetadata(RasterMarkerMetadata.App0 + 5, byteData);
         image.Markers.Add(markerData);
         RasterCodecs codecs = new RasterCodecs();
         codecs.Options.Save.Markers = true;
         codecs.Save(image, destStream, RasterImageFormat.Jpeg, 0);

         // load the marker together with the image
         RasterCollection&lt;RasterMarkerMetadata&gt; marker = codecs.ReadMarkers(destStream);
         // look for the APP5 marker, because there might be other markers (like APP0, APP1)
         foreach (RasterMarkerMetadata markerItem in marker)
            if (markerItem.Id == RasterMarkerMetadata.App0 + 5)
               Debug.WriteLine("marker Id :" + markerItem.Id.ToString() + " = " + markerItem.GetData().ToString());
      }</code>
        <code lang="SilverlightVB">      Public Sub MarkersExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim byteData As Byte() = New Byte(0){}
         byteData(0) = 40
         ' write APP5 (since nobody writes that)
         Dim markerData As RasterMarkerMetadata = New RasterMarkerMetadata(RasterMarkerMetadata.App0 + 5, byteData)
         image.Markers.Add(markerData)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Options.Save.Markers = True
         codecs.Save(image, destStream, RasterImageFormat.Jpeg, 0)

         ' load the marker together with the image
         Dim marker As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(destStream)
         ' look for the APP5 marker, because there might be other markers (like APP0, APP1)
         For Each markerItem As RasterMarkerMetadata In marker
            If markerItem.Id = RasterMarkerMetadata.App0 + 5 Then
               Debug.WriteLine("marker Id :" &amp; markerItem.Id.ToString() &amp; " = " &amp; markerItem.GetData().ToString())
            End If
         Next markerItem
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.OverlayCount">
      <summary>Gets the number of overlays that have been defined for this <see cref="T:Leadtools.RasterImage" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The number of overlays that have been defined for this <see cref="T:Leadtools.RasterImage" />.
            </value>
      <remarks>
        <para>This method is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">(Document/Medical only)</see> Toolkits.</para>
        <para>This method will count how many overlays have been defined.  The overlays are defined by calling
            <see cref="M:Leadtools.RasterImage.SetOverlayImage(System.Int32,Leadtools.RasterImage,Leadtools.RasterGetSetOverlayImageMode)" /> or <see cref="M:Leadtools.RasterImage.UpdateOverlayAttributes(System.Int32,Leadtools.RasterOverlayAttributes,Leadtools.RasterGetSetOverlayAttributesFlags)" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.OverlayOverview">Overlay Overview</see>.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.RasterImage.GetOverlayImage(System.Int32,Leadtools.RasterGetSetOverlayImageMode)" />.
            </example>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationWaitUserInput">
      <summary>Gets or sets a value indicating whether the <see cref="T:Leadtools.RasterImageAnimator" /> object should wait for user input in the current frame. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the <see cref="T:Leadtools.RasterImageAnimator" /> object should wait for user input in the current frame, otherwise; <strong>false</strong>.
            </value>
      <remarks>
        <para>The "Wait for user input" is supported by GIF89a and later standard. This flag gets set to the corresponding value if this image was loaded from
            a GIF file. Also, the value set in this property will be used if this image is saved as a GIF file. Otherwise, the LEADTOOLS toolkit will not use
            the value of this property.</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>
            There is currently no example for this property.
            </example>
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationOffset">
      <summary>Gets or sets a value indicating the animation offset for the current frame. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            A <see cref="T:Leadtools.LeadPoint" /> structure containing the animation offset for the current frame in <see cref="T:Leadtools.RasterViewPerspective">RasterViewPerspective.TopLeft</see>
            view perspective.
            </value>
      <remarks>
        <para>The value of this property is used by the <see cref="T:Leadtools.RasterImageAnimator" /> class to properly update the correct portion of the target image when rendering
            the current frame.</para>
        <para>GIF files can contain multiple frames of different size. The <see cref="P:Leadtools.RasterImage.AnimationGlobalSize" /> property contains the "global" size of the animated GIF image.
            Individual frames should be rendered inside this global size offseted by the value of <see cref="P:Leadtools.RasterImage.AnimationOffset" /> property.</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationDelay">
      <summary>Gets or sets a value indicating the animation delay in milliseconds (ms) for the current frame. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>An integer value indicating the animation delay in milliseconds (ms) for the current frame</value>
      <remarks>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationBackground">
      <summary>Gets or sets a value indicating the animation background color for the current frame. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure that indicate the animation background color for the current frame.</value>
      <remarks>
        <para>This is the background color used for the current frame. To get the global background color for the whole animation see <see cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />.</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationDisposalMethod">
      <summary>Gets or sets a value indicating the animation disposal method for the current frame. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterImageAnimationDisposalMethod" /> enumeration member that indicate the animation disposal method for the current frame.</value>
      <remarks>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationGlobalLoop">
      <summary>Gets or sets a value indicating the global loop count for animated images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that indicates the global loop count for animated images. The following are valid values:
            <list type="table"><listheader><term>Value</term><description>Meaning</description></listheader><item><term>-1</term><description>No looping. This is the default value and it means this image is not animated. This is the case with multi-page TIF files, for example.</description></item><item><term>0</term><description>Continuous looping. The animation should repeat itself indefinitely.</description></item><item><term>&lt; 0</term><description>N looping. The animation should repeat itself N times.</description></item></list></value>
      <remarks>
        <para>An image is considered to have animation if the value of <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /> is not -1 and the image has more than one
            frame (<see cref="P:Leadtools.RasterImage.PageCount" /> is greater than 1).</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example will create an animated GIF file that shows the frame number moving into the four corners</para>
        </para>
        <code lang="VB">      ' WIN32 API
      Const LOGPIXELSY As Integer = 90
      &lt;DllImport("gdi32")&gt; _
      Shared Function GetDeviceCaps(ByVal hdc As IntPtr, ByVal nIndex As Integer) As Integer
      End Function

      &lt;DllImport("kernel32")&gt; _
      Shared Function MulDiv(ByVal nNumber As Integer, ByVal nNumerator As Integer, ByVal nDenominator As Integer) As Integer
      End Function

      Sub AnimatedGIFExample()
         ' The GIF file will contain 4 frames
         Const frameCount As Integer = 4

         ' Each frame is 128 by 128 pixels (the GIF file will have double that size)
         Const frameWidth As Integer = 128
         Const frameHeight As Integer = 128

         ' Background colors
         Dim backColor() As RasterColor = _
         { _
            New RasterColor(&amp;HFF, &amp;H0, &amp;H0), _
            New RasterColor(&amp;H0, &amp;HFF, &amp;H0), _
            New RasterColor(&amp;H0, &amp;H0, &amp;HFF), _
            New RasterColor(&amp;HFF, &amp;HFF, &amp;H0) _
         }

         ' Foreground colors
         Dim foreColor() As RasterColor = _
         { _
            New RasterColor(&amp;HFF, &amp;HFF, &amp;H0), _
            New RasterColor(&amp;HFF, &amp;H0, &amp;H0), _
            New RasterColor(&amp;H0, &amp;HFF, &amp;H0), _
            New RasterColor(&amp;HFF, &amp;H0, &amp;H0) _
         }

         ' Delay in milliseconds
         Dim delay() As Integer = _
         { _
            1000, _
            1000, _
            1000, _
            1000 _
         }

         ' Left and top, we want the frames to move to each corner
         Dim offset() As LeadPoint = _
         { _
            New LeadPoint(0, 0), _
            New LeadPoint(frameWidth, 0), _
            New LeadPoint(frameWidth, frameHeight), _
            New LeadPoint(0, frameHeight) _
         }

         Dim disposalMethod() As RasterImageAnimationDisposalMethod = _
         { _
            RasterImageAnimationDisposalMethod.RestoreBackground, _
            RasterImageAnimationDisposalMethod.RestoreBackground, _
            RasterImageAnimationDisposalMethod.RestoreBackground, _
            RasterImageAnimationDisposalMethod.RestoreBackground _
         }

         Dim backgroundColor As RasterColor = RasterColor.FromKnownColor(RasterKnownColor.Yellow)

         Dim image As RasterImage = Nothing
         Dim myFont As Font = Nothing
         Dim myStringFormat As StringFormat = Nothing

         ' Create the frames
         For frame As Integer = 0 To frameCount - 1
            Dim frameImage As New RasterImage( _
               RasterMemoryFlags.Conventional, _
               frameWidth, _
               frameHeight, _
               24, _
               RasterByteOrder.Bgr, _
               RasterViewPerspective.BottomLeft, _
               Nothing, _
               IntPtr.Zero, _
               0)

            ' Set the frame properties
            frameImage.AnimationDelay = delay(frame)
            frameImage.AnimationOffset = offset(frame)
            frameImage.AnimationDisposalMethod = disposalMethod(frame)

            ' Background is white
            frameImage.AnimationBackground = backgroundColor

            ' Draw the number of the frame on its surface
            Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(frameImage)
            Dim g As Graphics = Graphics.FromHdc(hdc)
            Dim rc As New Rectangle(0, 0, frameWidth, frameHeight)

            Dim brush As New SolidBrush(RasterColorConverter.ToColor(backColor(frame)))
            g.FillRectangle(brush, rc)
            brush.Dispose()

            If (myFont Is Nothing) Then
               Dim fontHeight As Integer = MulDiv(72, GetDeviceCaps(hdc, LOGPIXELSY), 72)
               myFont = New Font("Consolas", fontHeight)

               myStringFormat = New StringFormat()
               myStringFormat.Alignment = StringAlignment.Center
               myStringFormat.LineAlignment = StringAlignment.Center
            End If

            Dim str As String = String.Format("{0}", frame + 1)

            brush = New SolidBrush(RasterColorConverter.ToColor(foreColor(frame)))
            g.DrawString(str, myFont, brush, rc, myStringFormat)
            brush.Dispose()

            g.Dispose()
            RasterImagePainter.DeleteLeadDC(hdc)

            If (image Is Nothing) Then
               image = frameImage
            Else
               image.AddPage(frameImage)
            End If
         Next

         myFont.Dispose()
         myStringFormat.Dispose()

         ' Setup the global image properties
         image.AnimationGlobalSize = New LeadSize(frameWidth * 2, frameHeight * 2)
         image.AnimationGlobalLoop = 0
         image.AnimationGlobalBackground = backgroundColor

         ' Convert this image to 8 bits/pixel
         Dim cmd As New ColorResolutionCommand( _
            ColorResolutionCommandMode.AllPages, _
            8, _
            RasterByteOrder.Rgb, _
            RasterDitheringMethod.None, _
            ColorResolutionCommandPaletteFlags.Optimized, _
            Nothing)
         cmd.Run(image)

         Dim codecs As New RasterCodecs()

         ' Setup the GIF save options
         Dim animationPalette() As RasterColor = image.GetPalette()
         codecs.Options.Gif.Save.SetAnimationPalette(animationPalette)
         codecs.Options.Gif.Save.UseAnimationPalette = True

         ' The GIF Animation width &amp; height, loop and background are
         ' pulled automatically from the image

         ' Save the file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "AnimatedGifFile.gif")
         codecs.Save(image, fileName, RasterImageFormat.Gif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite)

         image.Dispose()

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // WIN32 API
      const int LOGPIXELSY = 90;
      [DllImport("gdi32")]
      extern static int GetDeviceCaps(IntPtr hdc, int nIndex);

      [DllImport("kernel32")]
      extern static int MulDiv(int nNumber, int nNumerator, int nDenominator);


      public void AnimatedGIFExample()
      {
         // The GIF file will contain 4 frames
         const int frameCount = 4;

         // Each frame is 128 by 128 pixels (the GIF file will have double that size)
         const int frameWidth = 128;
         const int frameHeight = 128;

         // Background colors
         RasterColor[] backColor =
         {
            new RasterColor(0xFF, 0x00, 0x00),
            new RasterColor(0x00, 0xFF, 0x00),
            new RasterColor(0x00, 0x00, 0xFF),
            new RasterColor(0xFF, 0xFF, 0x00)
         };

         // Foreground colors
         RasterColor[] foreColor =
         {
            new RasterColor(0xFF, 0xFF, 0x00),
            new RasterColor(0xFF, 0x00, 0x00),
            new RasterColor(0x00, 0xFF, 0x00),
            new RasterColor(0xFF, 0x00, 0x00)
         };

         // Delay in milliseconds
         int[] delay =
         {
            1000,
            1000,
            1000,
            1000
         };

         // Left and top, we want the frames to move to each corner
         LeadPoint[] offset =
         {
            new LeadPoint(0, 0),
            new LeadPoint(frameWidth, 0),
            new LeadPoint(frameWidth, frameHeight),
            new LeadPoint(0, frameHeight),
         };

         RasterImageAnimationDisposalMethod[] disposalMethod =
         {
            RasterImageAnimationDisposalMethod.RestoreBackground,
            RasterImageAnimationDisposalMethod.RestoreBackground,
            RasterImageAnimationDisposalMethod.RestoreBackground,
            RasterImageAnimationDisposalMethod.RestoreBackground
         };

         RasterColor backgroundColor = RasterColor.FromKnownColor(RasterKnownColor.Yellow);

         RasterImage image = null;
         Font font = null;
         StringFormat stringFormat = null;

         // Create the frames
         for(int frame = 0; frame &lt; frameCount; frame++)
         {
            RasterImage frameImage = new RasterImage(
               RasterMemoryFlags.Conventional,
               frameWidth,
               frameHeight,
               24,
               RasterByteOrder.Bgr,
               RasterViewPerspective.BottomLeft,
               null,
               IntPtr.Zero,
               0);

            // Set the frame properties
            frameImage.AnimationDelay = delay[frame];
            frameImage.AnimationOffset = offset[frame];
            frameImage.AnimationDisposalMethod = disposalMethod[frame];

            // Background is white
            frameImage.AnimationBackground = backgroundColor;

            // Draw the number of the frame on its surface
            IntPtr hdc = RasterImagePainter.CreateLeadDC(frameImage);
            Graphics g = Graphics.FromHdc(hdc);
            Rectangle rc = new Rectangle(0, 0, frameWidth, frameHeight);

            Brush brush = new SolidBrush(RasterColorConverter.ToColor(backColor[frame]));
            g.FillRectangle(brush, rc);
            brush.Dispose();

            if(font == null)
            {
               int fontHeight = MulDiv(72, GetDeviceCaps(hdc, LOGPIXELSY), 72);
               font = new Font("Consolas", fontHeight);

               stringFormat = new StringFormat();
               stringFormat.Alignment = StringAlignment.Center;
               stringFormat.LineAlignment = StringAlignment.Center;
            }

            string str = string.Format("{0}", frame + 1);

            brush = new SolidBrush(RasterColorConverter.ToColor(foreColor[frame]));
            g.DrawString(str, font, brush, rc, stringFormat);
            brush.Dispose();

            g.Dispose();
            RasterImagePainter.DeleteLeadDC(hdc);

            if (image == null)
               image = frameImage;
            else
               image.AddPage(frameImage);
         }

         font.Dispose();
         stringFormat.Dispose();

         // Setup the global image properties
         image.AnimationGlobalSize = new LeadSize(frameWidth * 2, frameHeight * 2);
         image.AnimationGlobalLoop = 0;
         image.AnimationGlobalBackground = backgroundColor;

         // Convert this image to 8 bits/pixel
         ColorResolutionCommand cmd = new ColorResolutionCommand(
            ColorResolutionCommandMode.AllPages,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.Optimized,
            null);
         cmd.Run(image);

         RasterCodecs codecs = new RasterCodecs();

         // Setup the GIF save options
         RasterColor[] animationPalette = image.GetPalette();
         codecs.Options.Gif.Save.SetAnimationPalette(animationPalette);
         codecs.Options.Gif.Save.UseAnimationPalette = true;

         // The GIF Animation width &amp; height, loop and background are
         // pulled automatically from the image

         // Save the file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "AnimatedGifFile.gif");
         codecs.Save(image, fileName, RasterImageFormat.Gif, 8, 1, image.PageCount, 1, CodecsSavePageMode.Overwrite);

         image.Dispose();

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationGlobalSize">
      <summary>Gets or sets a value indicating the global size of the animation image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.LeadSize" /> structure that indicates the global size of the animation image. Default value is 0,0 meaning same size as the image</value>
      <remarks>
        <para>The value of this property is used by the <see cref="T:Leadtools.RasterImageAnimator" /> class to properly update the correct portion of the target image.</para>
        <para>GIF files can contain multiple frames of different size. The <see cref="P:Leadtools.RasterImage.AnimationGlobalSize" /> property contains the "global" size of the animated GIF image.
            Individual frames should be rendered inside this global size offseted by the value of <see cref="P:Leadtools.RasterImage.AnimationOffset" /> property.</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalBackground" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.AnimationGlobalBackground">
      <summary>Gets or sets a value indicating the global background color of the animation image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.LeadSize" /> structure that indicates global background color of the animation image.</value>
      <remarks>
        <para>This is the global background color used for entire image. For the background color used in individual frames, see <see cref="P:Leadtools.RasterImage.AnimationBackground" />.</para>
        <para>When the value of this property is changed, the <see cref="E:Leadtools.RasterImage.Changed" /> event will fire with <see cref="T:Leadtools.RasterImageChangedFlags" /> set to RasterImageChangedFlags.AnimationProperties.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.RasterImage.AnimationGlobalLoop" /></example>
      <seealso cref="P:Leadtools.RasterImage.AnimationWaitUserInput" />
      <seealso cref="P:Leadtools.RasterImage.AnimationOffset" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDelay" />
      <seealso cref="P:Leadtools.RasterImage.AnimationBackground" />
      <seealso cref="P:Leadtools.RasterImage.AnimationDisposalMethod" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalLoop" />
      <seealso cref="P:Leadtools.RasterImage.AnimationGlobalSize" />
      <seealso cref="T:Leadtools.RasterImageAnimator" />
      <seealso cref="T:Leadtools.Topics.ImplementingAnimation">Implementing Animation</seealso>
    </member>
    <member name="P:Leadtools.RasterImage.IsDisposed">
      <summary>Gets a value indicating whether the <see cref="T:Leadtools.RasterImage" /> object has been disposed of. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <isnew>2/28/2009</isnew>
      <value>
        <strong>true</strong> if the <see cref="T:Leadtools.RasterImage" /> object has been disposed of; otherwise, <strong>false</strong>.</value>
      <remarks>
        <para>When this property returns <strong>true</strong>, the <see cref="T:Leadtools.RasterImage" /> object is disposed of and can no longer be referenced as a valid object. Even though the
            instance of an object is disposed of, it is still maintained in memory until it is removed from memory through garbage collection. When an object is disposed, you should not
            check any other properties or call any other methods in the control or an <see cref="T:System.NullReferenceException" /> error will occur.</para>
        <para>If it is required to track when a <see cref="T:Leadtools.RasterImage" /> object is disposed, use the <see cref="E:Leadtools.RasterImage.Disposed" /> event.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterImage" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>
        <para>
          <para>This example will show the use of the <see cref="P:Leadtools.RasterImage.IsDisposed" /> property of a <see cref="T:Leadtools.RasterImage" /> object.</para>
        </para>
        <code lang="VB">      Public Sub IsDisposedTest()
         ' Create a RasterImage objects
         Dim image As New RasterImage( _
            RasterMemoryFlags.Conventional, _
            100, _
            100, _
            24, _
            RasterByteOrder.Bgr, _
            RasterViewPerspective.TopLeft, _
            Nothing, _
            IntPtr.Zero, _
            0)
         ' Check the IsDisposed property, should be false
         Debug.Assert(Not image.IsDisposed)
         MessageBox.Show("IsDisposed = " + image.IsDisposed.ToString())

         ' Now dispose the image
         image.Dispose()

         ' Re-check the IsDisposed property, should be true
         Debug.Assert(image.IsDisposed)
         MessageBox.Show("IsDisposed = " + image.IsDisposed.ToString())
      End Sub</code>
        <code lang="CS">      public void IsDisposedTest()
      {
         // Create a RasterImage objects
         RasterImage image = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            IntPtr.Zero,
            0);

         // Check the IsDisposed property, should be false
         Debug.Assert(!image.IsDisposed);
         MessageBox.Show("IsDisposed = " + image.IsDisposed.ToString());

         // Now dispose the image
         image.Dispose();

         // Re-check the IsDisposed property, should be true
         Debug.Assert(image.IsDisposed);
         MessageBox.Show("IsDisposed = " + image.IsDisposed.ToString());
      }</code>
        <code lang="SilverlightCSharp">      public void IsDisposedTest()
      {
         // Create a RasterImage objects
         RasterImage image = new RasterImage(
            RasterMemoryFlags.Conventional,
            100,
            100,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            null,
            null,
            0);
         // Check the IsDisposed property, should be false
         Debug.Assert(!image.IsDisposed);
         Debug.WriteLine("IsDisposed = " + image.IsDisposed.ToString());

         // Now dispose the image
         image.Dispose();

         // Re-check the IsDisposed property, should be true
         Debug.Assert(image.IsDisposed);
         Debug.WriteLine("IsDisposed = " + image.IsDisposed.ToString());
      }</code>
        <code lang="SilverlightVB">      Public Sub IsDisposedTest()
         ' Create a RasterImage objects
         Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Check the IsDisposed property, should be false
         Debug.Assert((Not image.IsDisposed))
         Debug.WriteLine("IsDisposed = " &amp; image.IsDisposed.ToString())

         ' Now dispose the image
         image.Dispose()

         ' Re-check the IsDisposed property, should be true
         Debug.Assert(image.IsDisposed)
         Debug.WriteLine("IsDisposed = " &amp; image.IsDisposed.ToString())
      End Sub</code>
      </example>
    </member>
    <member name="E:Leadtools.RasterImage.Disposed">
      <summary>Occurs when the image is disposed by a call to the <see cref="M:Leadtools.RasterImage.Dispose" /> method. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:System.EventArgs" /> containing data related to this event.
            </event>
      <remarks>
        <para>When you create a <see cref="E:Leadtools.RasterImage.Disposed" /> delegate, you identify the method that handles the event. To associate the event with your event
            handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.</para>
        <para>The <see cref="E:Leadtools.RasterImage.Disposed" /> event will fire whenver the <see cref="M:Leadtools.RasterImage.Dispose" /> method of this object is called. After this event occurs, the
            <see cref="T:Leadtools.RasterImage" /> object is disposed and should not be used anymore. It is recommedned that you remove the handler to the
            <see cref="M:Leadtools.RasterImage.Dispose" /> event so the .NET Garbage Collector runtime can remove the object from its internal use and mark it as "ununsed".</para>
        <para>If the <see cref="T:Leadtools.RasterImage" /> is being freed as a result of the .NET Garbage Collector, in other worlds, the object finalizer is being
            called, then this event will not occur.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Private Sub DisposedEventExample()
         ' Startup
         Dim codecs As New RasterCodecs()
         ' Load an image
         Dim image1 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         ' Add a handler to the Disposed event
         Console.WriteLine("Adding handler to Disposed for image with format " + image1.OriginalFormat.ToString())
         AddHandler image1.Disposed, AddressOf rasterImage_Disposed

         ' Now dispose the image
         Console.WriteLine("Calling .Dispose to image with format " + image1.OriginalFormat.ToString())
         image1.Dispose()

         ' Now use the "using" syntax
         Using image2 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "cannon.jpg"))
            ' Add a handler to the Disposed event
            Console.WriteLine("Adding handler to Disposed for image with format " + image2.OriginalFormat.ToString())
            AddHandler image2.Disposed, AddressOf rasterImage_Disposed

            ' The event should occur at the next line
            Console.WriteLine("Will be disposed after this, format " + image2.OriginalFormat.ToString())
         End Using

         ' Load another image
         Dim image3 As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"))

         ' Add a handler to the Disposed event
         Console.WriteLine("Adding handler to Disposed for image with format " + image3.OriginalFormat.ToString())
         AddHandler image3.Disposed, AddressOf rasterImage_Disposed

         ' Do not dispose the image
         Console.WriteLine("Never disposing image with format " + image3.OriginalFormat.ToString())

         ' Notice that the event will never occur for image3. The image is not going to be disposed
         ' only its finalizer called. The garbage collector cannot guarantee that our event handler
         ' is still a valid object. This scenario creates resource leaks and it is recommended that
         ' you always dispose and object that implements the IDisposable interface, like we did
         ' with image1 and image2

         codecs.Dispose()
      End Sub

      Private Sub rasterImage_Disposed(ByVal sender As Object, ByVal e As EventArgs)
         ' Get the RasterImage object being disposed
         Dim image As RasterImage = DirectCast(sender, RasterImage)
         Console.WriteLine("Being disposed, image with format " + image.OriginalFormat.ToString())

         ' Remove the handler to decouple the object from our application
         ' and let the garbage collector take over
         RemoveHandler image.Disposed, AddressOf rasterImage_Disposed
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void DisposedEventExample()
      {
         // Startup
         RasterCodecs codecs = new RasterCodecs();
         // Load an image
         RasterImage image1 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp"));

         // Add a handler to the Disposed event
         Console.WriteLine("Adding handler to Disposed for image with format " + image1.OriginalFormat);
         image1.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

         // Now dispose the image
         Console.WriteLine("Calling .Dispose to image with format " + image1.OriginalFormat);
         image1.Dispose();

         // Now use the "using" syntax
         using(RasterImage image2 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Master.jpg")))
         {
            // Add a handler to the Disposed event
            Console.WriteLine("Adding handler to Disposed for image with format " + image2.OriginalFormat);
            image2.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

            // The event should occur at the next line
            Console.WriteLine("Will be disposed after this, format " + image2.OriginalFormat);
         }

         // Load another image
         RasterImage image3 = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Ocr1.tif"));

         // Add a handler to the Disposed event
         Console.WriteLine("Adding handler to Disposed for image with format " + image3.OriginalFormat);
         image3.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

         // Do not dispose the image
         Console.WriteLine("Never disposing image with format " + image3.OriginalFormat);

         // Notice that the event will never occur for image3. The image is not going to be disposed
         // only its finalizer called. The garbage collector cannot guarantee that our event handler
         // is still a valid object. This scenario creates resource leaks and it is recommended that
         // you always dispose and object that implements the IDisposable interface, like we did
         // with image1 and image2

         codecs.Dispose();
      }

      private void rasterImage_Disposed(object sender, EventArgs e)
      {
         // Get the RasterImage object being disposed
         RasterImage image = sender as RasterImage;
         Console.WriteLine("Being disposed, image with format " + image.OriginalFormat);

         // Remove the handler to decouple the object from our application
         // and let the garbage collector take over
         image.Disposed -= new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void DisposedEventExample()
      {
         // Create an image
         RasterImage image1 = new RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);
         // Add a handler to the Disposed event
         Debug.WriteLine("Adding handler to Disposed for image with format " + image1.OriginalFormat);
         image1.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

         // Now dispose the image
         Debug.WriteLine("Calling .Dispose to image with format " + image1.OriginalFormat);
         image1.Dispose();

         // Now use the "using" syntax
         using (RasterImage image2 = new RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0))
         {
            // Add a handler to the Disposed event
            Debug.WriteLine("Adding handler to Disposed for image with format " + image2.OriginalFormat);
            image2.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

            // The event should occur at the next line
            Debug.WriteLine("Will be disposed after this, format " + image2.OriginalFormat);
         }

         // Load another image
         RasterImage image3 = new RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, null, 0);

         // Add a handler to the Disposed event
         Debug.WriteLine("Adding handler to Disposed for image with format " + image3.OriginalFormat);
         image3.Disposed += new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);

         // Do not dispose the image
         Debug.WriteLine("Never disposing image with format " + image3.OriginalFormat);

         // Notice that the event will never occur for image3. The image is not going to be disposed
         // only its finalizer called. The garbage collector cannot guarantee that our event handler
         // is still a valid object. This scenario creates resource leaks and it is recommended that
         // you always dispose and object that implements the IDisposable interface, like we did
         // with image1 and image2
      }

      private void rasterImage_Disposed(object sender, EventArgs e)
      {
         // Get the RasterImage object being disposed
         RasterImage image = sender as RasterImage;
         Debug.WriteLine("Being disposed, image with format " + image.OriginalFormat);

         // Remove the handler to decouple the object from our application
         // and let the garbage collector take over
         image.Disposed -= new EventHandler&lt;EventArgs&gt;(rasterImage_Disposed);
      }</code>
        <code lang="SilverlightVB">      Public Sub DisposedEventExample()
         ' Create an image
         Dim image1 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
         ' Add a handler to the Disposed event
         Debug.WriteLine("Adding handler to Disposed for image with format " &amp; image1.OriginalFormat)
         AddHandler image1.Disposed, AddressOf rasterImage_Disposed

         ' Now dispose the image
         Debug.WriteLine("Calling .Dispose to image with format " &amp; image1.OriginalFormat)
         image1.Dispose()

         ' Now use the "using" syntax
         Using image2 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)
            ' Add a handler to the Disposed event
            Debug.WriteLine("Adding handler to Disposed for image with format " &amp; image2.OriginalFormat)
            AddHandler image2.Disposed, AddressOf rasterImage_Disposed

            ' The event should occur at the next line
            Debug.WriteLine("Will be disposed after this, format " &amp; image2.OriginalFormat)
         End Using

         ' Load another image
         Dim image3 As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 100, 100, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, Nothing, 0)

         ' Add a handler to the Disposed event
         Debug.WriteLine("Adding handler to Disposed for image with format " &amp; image3.OriginalFormat)
         AddHandler image3.Disposed, AddressOf rasterImage_Disposed

         ' Do not dispose the image
         Debug.WriteLine("Never disposing image with format " &amp; image3.OriginalFormat)

         ' Notice that the event will never occur for image3. The image is not going to be disposed
         ' only its finalizer called. The garbage collector cannot guarantee that our event handler
         ' is still a valid object. This scenario creates resource leaks and it is recommended that
         ' you always dispose and object that implements the IDisposable interface, like we did
         ' with image1 and image2
      End Sub

      Private Sub rasterImage_Disposed(ByVal sender As Object, ByVal e As EventArgs)
         ' Get the RasterImage object being disposed
         Dim image As RasterImage = TryCast(sender, RasterImage)
         Debug.WriteLine("Being disposed, image with format " &amp; image.OriginalFormat)

         ' Remove the handler to decouple the object from our application
         ' and let the garbage collector take over
         RemoveHandler image.Disposed, AddressOf rasterImage_Disposed
      End Sub</code>
      </example>
    </member>
    <member name="P:Leadtools.RasterImage.IsLoading">
      <summary>Gets a value that determines whether this <see cref="T:Leadtools.RasterImage" /> object is still loading. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.RasterImage" /> object is still loading, otherwise; <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> class supports loading image files asynchronously using the
            <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> methods. When calling any of these methods, the caller thread
            will not be blocked and the method will return instantly with an instance <see cref="T:Leadtools.RasterImage" /> that is in a loading status
            (<see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> set to <strong>true</strong>). You should not use the other properties of this
            object while the object is in loading status.</para>
        <para>When the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object finishes loading the image, the various properties of the
            <see cref="T:Leadtools.RasterImage" /> will be populated with the image information and data and the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see>
            property will be set to <strong>false</strong>.</para>
        <para>It is recommended that you do not poll for the <see cref="P:Leadtools.RasterImage.IsLoading">RasterImage.IsLoading</see> property to check when the
            image is finished loaded, instead, subscribe to the <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see>
            event to get notification on when the <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)" /> operation is completed and if any errors occurred.</para>
        <para>The <see cref="E:Leadtools.Codecs.RasterCodecs.LoadAsyncCompleted">RasterCodecs.LoadAsyncCompleted</see> event data will also contain the same
            object returned from <see cref="M:Leadtools.Codecs.RasterCodecs.LoadAsync(System.String,Leadtools.LeadRect,System.Int32,Leadtools.Codecs.CodecsLoadByteOrder,System.Int32,System.Int32,System.Object)">RasterCodecs.LoadAsync</see> so you do not have to keep the original
            object in your application.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.Codecs.RasterCodecs.GetInformationAsyncCompleted">RasterCodecs.GetInformationAsyncCompleted</see>.</example>
    </member>
    <member name="E:Leadtools.RasterImage.LoadCompleted">
      <summary>For internal use by LEADTOOLS <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.RasterException">
      <summary>The exception that is thrown when a LEADTOOLS error occurs. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterException" /> class defines a <see cref="P:Leadtools.RasterException.Code" /> property that you can examine to determine what caused the error.</para>
        <para>Default messages are implemented for each <see cref="P:Leadtools.RasterException.Code" />, you can get the message through the <see cref="M:Leadtools.RasterException.GetCodeMessage(Leadtools.RasterExceptionCode)" /> method.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">        Public Sub Example()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         ' Prompt the user for an image
         Dim dlg As OpenFileDialog = New OpenFileDialog()
         dlg.Filter = "All Files|*.*"
         If dlg.ShowDialog() = DialogResult.OK Then
            ' Try to load this image
            Try
               Dim img As RasterImage = codecs.Load(dlg.FileName)
               MessageBox.Show(String.Format("Image in file {0} is loaded", dlg.FileName))
               img.Dispose()
            Catch ex As RasterException
               ' See if LEADTOOLS could not recognize this image format
               If ex.Code = RasterExceptionCode.FileFormat Then
                  MessageBox.Show(String.Format("File {0} does not contain an image format recognizable by LEADTOOLS", dlg.FileName))
               Else
                  ' Other LEADTOOLS error (file might be corrupted, read error, etc)
                  MessageBox.Show(String.Format("Could not load the file {0}.{1}Leadtools code: {2}{1}Message: {3}", dlg.FileName, Environment.NewLine, ex.Code, ex.Message))
               End If
            Catch ex As Exception
               ' Other errors
               MessageBox.Show(String.Format("Could not load the file {0}.{1}{2}", dlg.FileName, Environment.NewLine, ex.Message))
            End Try
         End If
      End Sub</code>
        <code lang="CS">      public void Example()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         // Prompt the user for an image
         OpenFileDialog dlg = new OpenFileDialog();
         dlg.Filter = "All Files|*.*";
         if(dlg.ShowDialog() == DialogResult.OK)
         {
            // Try to load this image
            try
            {
               RasterImage img = codecs.Load(dlg.FileName);
               MessageBox.Show(string.Format("Image in file {0} is loaded", dlg.FileName));
               img.Dispose();
            }
            catch(RasterException ex)
            {
               // See if LEADTOOLS could not recognize this image format
               if(ex.Code == RasterExceptionCode.FileFormat)
                  MessageBox.Show(string.Format("File {0} does not contain an image format recognizable by LEADTOOLS", dlg.FileName));
               else
               {
                  // Other LEADTOOLS error (file might be corrupted, read error, etc)
                  MessageBox.Show(string.Format("Could not load the file {0}.{1}Leadtools code: {2}{1}Message: {3}", dlg.FileName, Environment.NewLine, ex.Code, ex.Message));
               }
            }
            catch(Exception ex)
            {
               // Other errors
               MessageBox.Show(string.Format("Could not load the file {0}.{1}{2}", dlg.FileName, Environment.NewLine, ex.Message));
            }
         }
      }</code>
        <code lang="SilverlightCSharp">      public void Example()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;
         // Prompt the user for an image
         OpenFileDialog dlg = new OpenFileDialog();
         dlg.Filter = "All Files|*.*";
         if(dlg.ShowDialog() == true)
         {
            // Try to load this image
            try
            {
               using (FileStream fs = dlg.File.OpenRead())
               {
                  RasterImage img = codecs.Load(fs);
                  MessageBox.Show(string.Format("Image in file {0} is loaded", dlg.File.FullName));
                  img.Dispose();
               }
            }
            catch(RasterException ex)
            {
               // See if LEADTOOLS could not recognize this image format
               if(ex.Code == RasterExceptionCode.FileFormat)
                  MessageBox.Show(string.Format("File {0} does not contain an image format recognizable by LEADTOOLS", dlg.File.FullName));
               else
               {
                  // Other LEADTOOLS error (file might be corrupted, read error, etc)
                  MessageBox.Show(string.Format("Could not load the file {0}.{1}Leadtools code: {2}{1}Message: {3}", dlg.File.FullName, Environment.NewLine, ex.Code, ex.Message));
               }
            }
            catch(Exception ex)
            {
               // Other errors
               MessageBox.Show(string.Format("Could not load the file {0}.{1}{2}", dlg.File.FullName, Environment.NewLine, ex.Message));
            }
         }
      }</code>
        <code lang="SilverlightVB">      Public Sub Example()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True
         ' Prompt the user for an image
         Dim dlg As OpenFileDialog = New OpenFileDialog()
         dlg.Filter = "All Files|*.*"
         If dlg.ShowDialog() = True Then
            ' Try to load this image
            Try
               Using fs As FileStream = dlg.File.OpenRead()
                  Dim img As RasterImage = codecs.Load(fs)
                  MessageBox.Show(String.Format("Image in file {0} is loaded", dlg.File.FullName))
                  img.Dispose()
               End Using
            Catch ex As RasterException
               ' See if LEADTOOLS could not recognize this image format
               If ex.Code = RasterExceptionCode.FileFormat Then
                  MessageBox.Show(String.Format("File {0} does not contain an image format recognizable by LEADTOOLS", dlg.File.FullName))
               Else
                  ' Other LEADTOOLS error (file might be corrupted, read error, etc)
                  MessageBox.Show(String.Format("Could not load the file {0}.{1}Leadtools code: {2}{1}Message: {3}", dlg.File.FullName, Environment.NewLine, ex.Code, ex.Message))
               End If
            Catch ex As Exception
               ' Other errors
               MessageBox.Show(String.Format("Could not load the file {0}.{1}{2}", dlg.File.FullName, Environment.NewLine, ex.Message))
            End Try
         End If
      End Sub</code>
      </example>
    </member>
    <member name="T:Leadtools.LeadtoolsException">
      <summary>Base class for all exception classes thrown by LEADTOOLS. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            The <see cref="T:Leadtools.LeadtoolsException" /> is an abstract class that provide common functionality for all the exception classes used in LEADTOOLS
            such as <see cref="T:Leadtools.RasterException" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterException" /></example>
    </member>
    <member name="M:Leadtools.LeadtoolsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadtoolsException" /> class with the specified serialization and context information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="info">The data for serializing or de-serializing the object.</param>
      <param name="context">The source and destination for the object.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadtoolsException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadtoolsException" /> class with its <see cref="P:System.Exception.Message" /> string set to the empty
            string ("") and its inner exception set to a null reference (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.LeadtoolsException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadtoolsException" /> class with its <see cref="P:System.Exception.Message" /> string set to
            <paramref name="message" />, and its inner exception set to a null reference (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <remarks>
            The constructor initializes the <see cref="P:System.Exception.Message" /> property of the new instance using <paramref name="message" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.LeadtoolsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.LeadtoolsException" /> class with a specified error message and a reference to the inner
            exception that is the cause of this exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference
            (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException" /> property. The InnerException property returns the same value that is passed into the constructor,
            or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the
            constructor.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with its <see cref="P:Leadtools.RasterException.Message" /> string set to the empty string (""),
            its <see cref="P:Leadtools.RasterException.Code" /> set to <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.Success</see> and its inner exception set to a null reference
            (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with its <see cref="P:Leadtools.RasterException.Message" /> string set to <paramref name="message" />, its
            <see cref="P:Leadtools.RasterException.Code" /> set to <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.Success</see> and its inner exception set to a null reference
            (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.RasterException.Message" /> property of the new instance using <paramref name="message" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with a specified error message, its <see cref="P:Leadtools.RasterException.Code" /> set to 
            <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode.Success</see> and a reference to the inner exception that is the cause of this exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference
            (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the
            <see cref="P:System.Exception.InnerException" /> property. The InnerException property returns the same value that is passed into the constructor,
            or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the
            constructor.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with the specified serialization and context information. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="info">The data for serializing or de-serializing the object.</param>
      <param name="context">The source and destination for the object.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor(System.String,Leadtools.RasterExceptionCode)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with its <see cref="P:Leadtools.RasterException.Message" /> string set to <paramref name="message" />, its
            <see cref="P:Leadtools.RasterException.Code" /> set to <paramref name="code" /> and its inner exception set to a null reference (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="message">A <see cref="T:System.String" /> that describes the error. The content of message is intended to be understood by humans.
            The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="code">An <see cref="T:Leadtools.RasterExceptionCode" /> that specifies what caused this exception.</param>
      <remarks>
            The constructor initializes the <see cref="P:Leadtools.RasterException.Message" /> property of the new instance using <paramref name="message" /> and the <see cref="P:Leadtools.RasterException.Code" />
            property of the new instance using <paramref name="code" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.#ctor(Leadtools.RasterExceptionCode)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterException" /> class with its <see cref="P:Leadtools.RasterException.Message" /> string set to the default message
            that corresponds to <paramref name="code" /> and its inner exception set to a null reference (Nothing in Visual Basic). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="code">An <see cref="T:Leadtools.RasterExceptionCode" /> that specifies what caused this exception.</param>
      <remarks>
            The <see cref="T:Leadtools.RasterException" /> class contains an internal list of messages that correspond to each <see cref="T:Leadtools.RasterExceptionCode" />
            value.  This constructor initializes the <see cref="P:Leadtools.RasterException.Message" /> property of the new instance with the corresponding string for <paramref name="code" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.GetCodeMessage(Leadtools.RasterExceptionCode)">
      <summary>Gets the error string that corresponds to a specific <see cref="T:Leadtools.RasterExceptionCode">RasterExceptionCode</see>. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="code">A <see cref="T:Leadtools.RasterExceptionCode" /> value to get the string message for.</param>
      <returns>A <see cref="T:System.String" /> that contains the current message for <paramref name="code" /></returns>
      <remarks>
            By default, <see cref="T:Leadtools.RasterException" /> has a string message for each <see cref="T:Leadtools.RasterExceptionCode" />.  You can get this message by
            calling this method.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.RasterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <see cref="M:Leadtools.RasterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During
            de-serialization, the exception is reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.RasterException.Code">
      <summary>Gets or sets the code that caused this exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterExceptionCode" /> value that specifies what caused this exception.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterException" /></example>
    </member>
    <member name="P:Leadtools.RasterException.Message">
      <summary>Gets a message that describes the current exception. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The error message that explains the reason for the exception, or an empty string("").</value>
      <remarks>
        <para>Overrides <see cref="P:System.Exception.Message" />.</para>
        <para>If this <see cref="T:Leadtools.RasterException" /> instance was initialized with a specific <see cref="P:Leadtools.RasterException.Code" /> but no specific message,
            then this property will return the default error string that corresponds to <see cref="P:Leadtools.RasterException.Code" />.</para>
        <para>You can get the error string that corresponds to any <see cref="P:Leadtools.RasterException.Code" /> through the <see cref="M:Leadtools.RasterException.GetCodeMessage(Leadtools.RasterExceptionCode)" /> method.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.RasterException" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.DetectAlphaCommand">
      <summary>Determines if the image has meaningful alpha channel values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Alpha Channel</keywords>
      <noremarks />
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.DetectAlphaCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.DetectAlphaCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.DetectAlphaCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.DetectAlphaCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.DetectAlphaCommand.HasMeaningfulAlpha">
      <summary>Specifies whether or not the image contains meaningful alpha channel values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true if at least one alpha channel value is not equal to 0xFF, false if all alpha channel values are equal to 0xFF.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand">
      <summary>Rotates and flips the image data as necessary to achieve the desired view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>View perspective|Rotating|Flipping|Images|Image coordinates|Display coordinates</keywords>
      <remarks>
        <para>The <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.ViewPerspective" /> is the arrangement of pixels in the image. 
            This command references image coordinates, which are often different 
            from the display coordinates of an image. </para>
        <para>Use this command to change the data and the <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.ViewPerspective" /> to simplify
            calculations that involve image coordinates. 
            This method does not affect the image display. 
            For more information, refer to <see cref="T:Leadtools.Topics.AccountingForViewPerspective">Accounting for View Perspective</see>.</para>
      </remarks>
      <example>
        <para>This example will load an image and then change its view perspective.</para>
        <code lang="VB">        Public Sub ChangeViewPerspectiveCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Check the view perspective
         Console.WriteLine("Original view perspective = {0}", image.ViewPerspective)

         ' If the view perspective is TopLeft, change to BottomLeft and vise versa
         Dim viewPerspective As RasterViewPerspective = image.ViewPerspective
         If viewPerspective = RasterViewPerspective.TopLeft Then
            viewPerspective = RasterViewPerspective.BottomLeft
         Else
            viewPerspective = RasterViewPerspective.TopLeft
         End If

         ' Change the image view perspective
         Dim command As ChangeViewPerspectiveCommand = New ChangeViewPerspectiveCommand()
         command.ViewPerspective = viewPerspective
         command.InPlace = True

         command.Run(image)

         ' Re-check the view perspective
         Console.WriteLine("New view perspective = {0}", image.ViewPerspective)
         Debug.Assert(image.ViewPerspective = viewPerspective)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ChangeViewPerspectiveCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Check the view perspective
         Console.WriteLine("Original view perspective = {0}", image.ViewPerspective);

         // If the view perspective is TopLeft, change to BottomLeft and vise versa
         RasterViewPerspective viewPerspective = image.ViewPerspective;
         if(viewPerspective == RasterViewPerspective.TopLeft)
            viewPerspective = RasterViewPerspective.BottomLeft;
         else
            viewPerspective = RasterViewPerspective.TopLeft;

         // Change the image view perspective
         ChangeViewPerspectiveCommand command = new ChangeViewPerspectiveCommand();
         command.ViewPerspective = viewPerspective;
         command.InPlace = true;

         command.Run(image);

         // Re-check the view perspective
         Console.WriteLine("New view perspective = {0}", image.ViewPerspective);
         Debug.Assert(image.ViewPerspective == viewPerspective);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ChangeViewPerspectiveCommandExample(RasterImage image)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Check the view perspective
         Debug.WriteLine("Original view perspective = {0}", image.ViewPerspective);

         // If the view perspective is TopLeft, change to BottomLeft and vise versa
         RasterViewPerspective viewPerspective = image.ViewPerspective;
         if(viewPerspective == RasterViewPerspective.TopLeft)
            viewPerspective = RasterViewPerspective.BottomLeft;
         else
            viewPerspective = RasterViewPerspective.TopLeft;

         // Change the image view perspective
         ChangeViewPerspectiveCommand command = new ChangeViewPerspectiveCommand();
         command.ViewPerspective = viewPerspective;
         command.InPlace = true;

         command.Run(image);

         // Re-check the view perspective
         Debug.WriteLine("New view perspective = {0}", image.ViewPerspective);
         Debug.Assert(image.ViewPerspective == viewPerspective);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeViewPerspectiveCommandExample(ByVal image As RasterImage)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Check the view perspective
         Debug.WriteLine("Original view perspective = {0}", image.ViewPerspective)

         ' If the view perspective is TopLeft, change to BottomLeft and vise versa
         Dim viewPerspective As RasterViewPerspective = image.ViewPerspective
         If viewPerspective = RasterViewPerspective.TopLeft Then
            viewPerspective = RasterViewPerspective.BottomLeft
         Else
            viewPerspective = RasterViewPerspective.TopLeft
         End If

         ' Change the image view perspective
         Dim command As ChangeViewPerspectiveCommand = New ChangeViewPerspectiveCommand()
         command.ViewPerspective = viewPerspective
         command.InPlace = True

         command.Run(image)

         ' Re-check the view perspective
         Debug.WriteLine("New view perspective = {0}", image.ViewPerspective)
         Debug.Assert(image.ViewPerspective = viewPerspective)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.#ctor(System.Boolean,Leadtools.RasterViewPerspective)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="inPlace">true to convert the source image in place (no copy will be made). false, to
            leave the source image unchanged and place the result in the <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.DestinationImage" /> property.</param>
      <param name="viewPerspective">The desired view perspective.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.DestinationImage">
      <summary>Gets the resulting image, if <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.InPlace" /> is set to true. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The resulting image, if <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.InPlace" /> is set to true.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.InPlace">
      <summary>Determines whether or not the source image is converted in place (or a new image is created). <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>true to convert the source image in place (no copy will be made). false, to leave the source image unchanged
            and place the result in the <see cref="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.DestinationImage" /> property.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand.ViewPerspective">
      <summary>The desired view perspective. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The desired view perspective.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ChangeViewPerspectiveCommand" />.</example>
    </member>
    <member name="T:Leadtools.RasterImageFormat">
      <summary>Indicates the image file format. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>AFP for IM1|AFP|IM for AFP|IM1|IM</keywords>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.RasterImageFormat.Unknown">
      <summary>
            Unknown (or RAW Data).
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Pcx">
      <summary>
        <see cref="T:L.Topics.FileFormatsPCXFormats">ZSoft PCX</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Gif">
      <summary>
        <see cref="T:L.Topics.FileFormatsGif">GIF</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Tif">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (Tagged Image File Format)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Tga">
      <summary>
        <see cref="T:L.Topics.FileFormatsTargaFormat">Truevision TGA (TARGA)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cmp">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">LEAD Compressed (CMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Bmp">
      <summary>
        <see cref="T:L.Topics.FileFormatBMPFormats">Bitmap (BMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (JFIF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JpegRgb">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (JFIF) (RGB)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with JPEG compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Os2">
      <summary>
        <see cref="T:L.Topics.FileFormatBMPFormats">OS/2 Bitmap (OS/2 BMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Wmf">
      <summary>
        <see cref="T:L.Topics.FileFormatsWindowsMetafileFormats">Windows Metafile (WMF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Eps">
      <summary>
        <see cref="T:L.Topics.FileFormatsEPS">PostScript Raster (Encapsulated PostScript)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifLzw">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with LZW Compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (4-1-1)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with JPEG compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (4-2-2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with JPEG compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ccitt">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">TIFF CCITT</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Lead1Bit">
      <summary>
        <see cref="T:L.Topics.FileFormatsLEAD1BitFormat">LEAD 1-bit lossless format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.CcittGroup31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">TIFF CCITT Group 3 (1 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.CcittGroup32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">TIFF CCITT Group3 two dimensions</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.CcittGroup4">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">TIFF CCITT Group4 two dimensions 4</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Abc">
      <summary>
        <see cref="T:L.Topics.FileFormatsABC">LEAD Advanced Bitonal Compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cals">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">CALS Raster (Type 1)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Mac">
      <summary>
        <see cref="T:L.Topics.Miscellaneous1BitFormats">MacPaint (MAC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Img">
      <summary>
        <see cref="T:L.Topics.Miscellaneous1BitFormats">GEM Image (IMG)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Msp">
      <summary>
        <see cref="T:L.Topics.Miscellaneous1BitFormats">Microsoft Paint (MSP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Wpg">
      <summary>
        <see cref="T:L.Topics.FileFormatsWPG">WordPerfect (WPG)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ras">
      <summary>
        <see cref="T:L.Topics.FileFormatsSun">SUN Raster Format (RAS)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Fli">
      <summary>
        <see cref="T:L.Topics.FileFormatsFLC">Flic Animation (FLI)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.EpsTiff">
      <summary>
        <see cref="T:L.Topics.FileFormatsEPS">PostScript Raster TIFF (Encapsulated PostScript TIFF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.EpsWmf">
      <summary>
        <see cref="T:L.Topics.FileFormatsEPS">PostScript Raster WMF(Encapsulated PostScript WMF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FaxG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">FAX Group 3 (1 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FaxG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">FAX Group 3 (2 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FaxG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">FAX Group 4</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.WfxG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">WinFax Group 3 (1 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.WfxG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">WinFax Group 4</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (1 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (2 Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (Group 4)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Os22">
      <summary>
        <see cref="T:L.Topics.FileFormatBMPFormats">OS/2 Bitmap (OS/2 BMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Png">
      <summary>
        <see cref="T:L.Topics.FileFormatsPNGFormat">PNG (Portable Network Graphics)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawIcaG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (Group 3 1Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawIcaG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (Group 3 2Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawIcaG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (Group 4)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.BmpRle">
      <summary>
        <see cref="T:L.Topics.FileFormatBMPFormats">Bitmap (BMP) (With RLE)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF CMYK (With CMYK colorspace)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifLzwCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF LZW (CMYK)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifPackBits">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF Packbits</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifPackBitsCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF Packbits (CMYK)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifDxf">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with embedded DXF</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.WinIco">
      <summary>
        <see cref="T:L.Topics.FileFormatsIconsAndCursors">Windows Icon (ICO)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.WinCur">
      <summary>
        <see cref="T:L.Topics.FileFormatsIconsAndCursors">Windows Cursor (CUR)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifYcc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF YCC</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifLzwYcc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF LZW YCC</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifPackbitsYcc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF Packbits (YCC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Exif">
      <summary>
        <see cref="T:L.Topics.FileFormatsExifFormats">Exif</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.ExifYcc">
      <summary>
        <see cref="T:L.Topics.FileFormatsExifFormats">Exif (YCC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.ExifJpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsExifFormats">Exif (JPEG 4-2-2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.ExifJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsExifFormats">Exif (JPEG 4-2-2)</see>. This is the same as <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.ExifJpeg422</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.ExifJpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsExifFormats">Exif (JPEG 4-1-1)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PbmAscii">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PBM Ascii</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PbmBinary">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PBM Binary</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PgmAscii">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PGM Ascii</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PgmBinary">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PPGM Binary</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PpmAscii">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PPM Ascii</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PpmBinary">
      <summary>
        <see cref="T:L.Topics.FileFormatsPortableBitmapUtilities">PPM Binary</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cut">
      <summary>
        <see cref="T:L.Topics.FileFormatsCUT">Dr. Halo</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xpm">
      <summary>
        <see cref="T:L.Topics.FileFormatsXPicMapFormat">XPM Window PixMap</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xbm">
      <summary>
        <see cref="T:L.Topics.FileFormatsXBitMap">XWindows BitMap (XBM)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IffIlbm">
      <summary>
        <see cref="T:L.Topics.FileFormatsIFF">IFF (Amiga Interchange) (ILBM)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IffCat">
      <summary>
        <see cref="T:L.Topics.FileFormatsIFF">IFF (Amiga Interchange) (CAT)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xwd">
      <summary>
        <see cref="T:L.Topics.FileFormatsXWD">X Window Dump (XWD)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Clp">
      <summary>
        <see cref="T:L.Topics.FileFormatsCLP">Microsoft Windows Clipboard (CLP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jbig">
      <summary>
        <see cref="T:L.Topics.FileFormatsJBIGFormat">JBIG (JBG)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Emf">
      <summary>
        <see cref="T:L.Topics.FileFormatsWindowsMetafileFormats">Windows Enhanced Metafile (EMF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaIbmMmr">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (MMR Compressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawIcaIbmMmr">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (Raw MMR Compressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ani">
      <summary>
        <see cref="T:L.Topics.FileFormatsWindowsAnimatedCursorFormat">Windows Animated Cursor (ANI)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.LaserData">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">LaserView LaserData</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IntergraphRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">IntergraphRLE (ITG) (RLE compressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cals4">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">CALS Raster (Type 4)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cals2">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">CALS Raster (Type 2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cals3">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">CALS Raster (Type 3)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xwd10">
      <summary>
        <see cref="T:L.Topics.FileFormatsXWD">X Window Dump (XWD 10)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xwd11">
      <summary>
        <see cref="T:L.Topics.FileFormatsXWD">X Window Dump (XWD 11)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Flc">
      <summary>
        <see cref="T:L.Topics.FileFormatsFLC">Flic Animation (FLC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifCmp">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (with LEAD CMP compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJbig">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (with JBIG compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifUnknown">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (Unknown image data)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Sgi">
      <summary>
        <see cref="T:L.Topics.FileFormatsSGI">Silicon Graphics Image Format (SGI)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.SgiRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsSGI">Silicon Graphics Image Format (SGI) (RLE)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdf">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Adobe Portable Document Format (PDF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (Group 3 1-Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (Group 3 2-Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (Group 4)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (JPEG)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfJpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (JPEG 4-2-2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfJpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (JPEG 4-1-1)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfLzw">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (LZW Compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfJbig2">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (JBIG2 Compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (CMYK data)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasPdfLzwCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsPDF">Portable Document Format (PDF) (CMYK data - LZW Compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Raw">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see>. LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifCustom">
      <summary>
            Unsupported.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawRgb">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see>. LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawRle4">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (RLE 4-bit). LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawRle8">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (RLE 8-bit).LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawBitfields">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (BitField compressed). LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawPackBits">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (Packbits compressed). LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (JPEG compressed).
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FaxG31DimNoEol">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">FAX Group 3 (1 Dimensional) - with no EOL</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawCcitt">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">Raw Image Data</see> (CCITT compressed). LEADTOOLS can load and save raw compressed or uncompressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jp2">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JP2 – Lossy or Lossless</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.J2k">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">J2K – Lossy or Lossless</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cmw">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">LEAD CMW</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJ2k">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with JPEG 2000 compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifCmw">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with LEAD Wavelet CMW compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Mrc">
      <summary>
        <see cref="T:L.Topics.MrcT44Fmt">Standard MRC T44 format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.LeadMrc">
      <summary>
        <see cref="T:L.Topics.LeadMrcFmt">LEADTOOLS MRC format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifMrc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with standard MRC compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifLeadMrc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with LEAD MRC compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Wbmp">
      <summary>
        <see cref="T:L.Topics.FileFormatsWBMP">Wireless Bitmap Format (WBMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JpegLab">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (JFIF) (LAB)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JpegLab411">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (JFIF) (LAB 4-1-1)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JpegLab422">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG File Interchange Format (JFIF) (LAB 4-2-2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.GeoTiff">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (GeoTIFF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifLead1Bit">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with LEAD 1-bit compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifAbc">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with LEAD ABC 1-bit compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Postscript">
      <summary>
        <see cref="T:L.Topics.FileFormatsPostScriptDoc">PostScript Document Format (PS)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ptoca">
      <summary>
        <see cref="T:L.Topics.FileFormatsPTOCA">PTOCA Format (PTOCA)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Sct">
      <summary>
        <see cref="T:L.Topics.FileFormatsSCT">Scitex Continuous Tone Format (SCT)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Afp">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaUncompressed">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (uncompressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawIcaUncompressed">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA (ICA) (raw uncompressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Smp">
      <summary>
        <see cref="T:L.Topics.FileFormatsSMP">SMP Format (SMP)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.SmpG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsSMP">SMP Format (SMP) (Group 3 1-Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.SmpG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsSMP">SMP Format (SMP) (Group 3 2-Dimensional)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.SmpG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsSMP">SMP Format (SMP) (Group 4)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TgaRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsTargaFormat">Truevision TGA (TARGA) (RLE)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RasRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsSun">SUN Raster Format (RAS) (RLE)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.ClpRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsCLP">Microsoft Windows Clipboard (CLP)(RLE compressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Fit">
      <summary>
        <see cref="T:L.Topics.FileFormatsFIT">FITS Format (FIT)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Cin">
      <summary>
        <see cref="T:L.Topics.FileFormatsKODAKCineon">Cineon Format (CIN)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.EpsPostscript">
      <summary>
        <see cref="T:L.Topics.FileFormatsEPS">PostScript Raster (Encapsulated PostScript)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IntergraphCcittG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">IntergraphRLE (ITG) (CCITT Group 4 compressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Sff">
      <summary>
        <see cref="T:L.Topics.FileFormatsSFF">Structured Fax File Format (SFF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IffIlbmUncompressed">
      <summary>
        <see cref="T:L.Topics.FileFormatsIFF">IFF (Amiga Interchange) (ILBM uncompressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IffCatUncompressed">
      <summary>
        <see cref="T:L.Topics.FileFormatsIFF">IFF (Amiga Interchange) (CAT uncompressed)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIcaG31Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA Group3 1 Dimensional</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIcaG32Dim">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA Group3 2 Dimensional</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIcaG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA Group4</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIcaUncompressed">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA Uncompressed</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIcaIbmMmr">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA MMR Compressed</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.AfpIm1">
      <summary>
        <see cref="T:L.Topics.FileFormatsAFP">AFP Format (AFP) IOCA MMR Compressed</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Psd">
      <summary>
        <see cref="T:L.Topics.FileFormatsPSDFormat">Photoshop 3.0 (PSD)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jbig2">
      <summary>
        <see cref="T:L.Topics.FileFormatsJBIG2Format">JBIG2 (JB2)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Crw">
      <summary>
        <see cref="T:L.Topics.FileFormatsCRW">AFP Format (AFP) IOCA MMR Compressed</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfArw">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Sony Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfRaf">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Fujifilm Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfOrf">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Olympus Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfCr2">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Canon Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfNef">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Nikon Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfRw2">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Panasonic Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfCasio">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Casio Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DcfPentax">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCF">Pentax Digital Camera Format (DCF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Dcr">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCR">Kodak Professional Digital Camera System Format (DCR)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Dcs">
      <summary>
        <see cref="T:L.Topics.FileFormatsDCS">Kodak Professional Digital Camera System Format (DCS)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ecw">
      <summary>
        <see cref="T:L.Topics.FileFormatsECW">Enhanced Compressed Wavelet Format (ECW)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Kdc">
      <summary>
        <see cref="T:L.Topics.FileFormatsKDC">Kodak Digital Camera Format (KDC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Pcd">
      <summary>
        <see cref="T:L.Topics.FileFormatsFPX">PhotoCD (PCD)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Kdc120">
      <summary>
        <see cref="T:L.Topics.FileFormatsKDC">Kodak Digital Camera Format (KDC) (120)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Kdc40">
      <summary>
        <see cref="T:L.Topics.FileFormatsKDC">Kodak Digital Camera Format (KDC) (40)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Kdc50">
      <summary>
        <see cref="T:L.Topics.FileFormatsKDC">Kodak Digital Camera Format (KDC) (50)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RtfRaster">
      <summary>
        <see cref="T:L.Topics.FileFormatsRTF">Rich Text Format (RTF)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Awd">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Microsoft Fax (AWD)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Abic">
      <summary>
        <see cref="T:L.Topics.FileFormatsABIC">Raw ABIC Format (ABIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaAbic">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA with ABIC compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifAbic">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with ABIC compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifJbig2">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF with JBIG2 compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.RawLzw">
      <summary>
        <see cref="T:L.Topics.FileFormatsRAW">LZW Image Data</see>. LEADTOOLS can save raw lzw compressed data.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PdfLeadMrc">
      <summary>
        <see cref="T:L.Topics.FileFormatsPdfLeadMrc">PDF format with image segmentation using MRC</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Txt">
      <summary>
        <see cref="T:L.Topics.FileFormatsTXT">Text Format</see>. LEADTOOLS can load ASCII and Uncide text files as raster images. Refer to <see cref="T:Leadtools.Codecs.CodecsTxtLoadOptions" />.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Fpx">
      <summary>
        <see cref="T:L.Topics.FileFormatsFPX">Kodak Formats (PCD and FPX)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FpxSingleColor">
      <summary>
        <see cref="T:L.Topics.FileFormatsFPX">Kodak Formats (PCD and FPX)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FpxJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsFPX">Kodak Formats (PCD and FPX)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.FpxJpegQFactor">
      <summary>
        <see cref="T:L.Topics.FileFormatsFPX">Kodak Formats (PCD and FPX)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomColor">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomRleGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomRleColor">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomJpegGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomJpegColor">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomJ2kGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.DicomJ2kColor">
      <summary>
        <see cref="T:L.Topics.FileFormatsDICOM">DICOM Format (DIC)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Wmz">
      <summary>
        <see cref="T:L.Topics.FileFormatsWMZ">Compressed Windows Metafile Format (WMZ)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Pct">
      <summary>
        <see cref="T:L.Topics.FileFormatsPCT">Macintosh Pict Format (PCT)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxJbig">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxJbigT43">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxJbigT43ItuLab">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxJbigT43Gs">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxFaxG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxFaxG31D">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxFaxG32D">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifxJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsFax">Xerox Internet Fax File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Hdp">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.HdpGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.HdpCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PngIco">
      <summary>
        <see cref="T:L.Topics.FileFormatsIconsAndCursors">Windows Icon (ICO), PNG Compressed (VISTA)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TifZip">
      <summary>
        <see cref="T:L.Topics.FileFormatsTIFF">TIFF (with ZIP compression)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xps">
      <summary>
        <see cref="T:L.Topics.FileFormatsXPSFormat">Microsoft XML Paper Specification (XPS)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jpx">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">Jpeg 2000 extension part 2 (JPX)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.XpsJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsXPSFormat">XML Paper Specification (XPS) - with JPEG (4-4-4) Compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.XpsJpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsXPSFormat">XML Paper Specification (XPS) - with JPEG (4-2-2) Compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.XpsJpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsXPSFormat">XML Paper Specification (XPS) - with JPEG (4-1-1) Compression</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Mng">
      <summary>
        <see cref="T:L.Topics.FileFormatsMNG">Multiple Network Graphics (MNG)</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.MngGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsMNG">Multiple Network Graphics (MNG) - Gray</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.MngJng">
      <summary>
        <see cref="T:L.Topics.FileFormatsMNG">Multiple Network Graphics (MNG) - YUV 4-4-4</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.MngJng411">
      <summary>
        <see cref="T:L.Topics.FileFormatsMNG">Multiple Network Graphics (MNG) - YUV 4-1-1</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.MngJng422">
      <summary>
        <see cref="T:L.Topics.FileFormatsMNG">Multiple Network Graphics (MNG) - YUV 4-2-2</see>.
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Tdb">
      <summary>
        <see cref="T:L.Topics.FileFormatsTDB">Windows XP Thumbnail Cache</see>.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.RasterImageFormat.TdbVista">
      <summary>
        <see cref="T:L.Topics.FileFormatsTDB">Windows Vista Thumbnail Cache</see>.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Snp">
      <summary>
        <see cref="T:L.Topics.FileFormatsSNP">MS Access Report Snapshots Format</see>.
            </summary>
      <isnew>2/28/2009</isnew>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xls">
      <summary>
        <see cref="T:L.Topics.FileFormatsXLS">Microsoft Excel 2003 file format (XLS)</see>
      </summary>
      <isnew>10/26/2009</isnew>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Doc">
      <summary>
        <see cref="T:L.Topics.FileFormatsDOC">Microsoft Word 2003 file format (DOC)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Anz">
      <summary>
        <see cref="T:L.Topics.FileFormatsANZ">Analyze file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ppt">
      <summary>
        <see cref="T:L.Topics.FileFormatsPPT">Microsoft Power Point 2003 file format (PPT)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PptJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsPPT">Microsoft Power Point 2003 file format</see> with JPEG compression
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.PptPng">
      <summary>
        <see cref="T:L.Topics.FileFormatsPPT">Microsoft Power Point 2003 file format</see> with PNG compression
            </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jpm">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG 2000 JPM file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Vff">
      <summary>
        <see cref="T:L.Topics.FileFormatsVff">Sun TAAC Bitmap file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Docx">
      <summary>
        <see cref="T:L.Topics.FileFormatsDOC">Microsoft Office 2007 Word file format (DOCX)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Xlsx">
      <summary>
        <see cref="T:L.Topics.FileFormatsXLS">Microsoft Office 2007 Excel file format (XLSX)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Pptx">
      <summary>
        <see cref="T:L.Topics.FileFormatsPPT">Microsoft Office 2007 PowerPoint file format (PPTX)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jxr">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JxrGray">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format - Grayscale</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JxrCmyk">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format - CMYK</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jls">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG LS file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jxr422">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format - YUV 4:2:2</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Jxr420">
      <summary>
        <see cref="T:L.Topics.FileFormatsHDP">JPEG XR / Microsoft HD Photo File Format - YUV 4:2:0</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JlsLine">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG LS Line interleaved file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.JlsSample">
      <summary>
        <see cref="T:L.Topics.FileFormatsJPEGAndLEADCompressed">JPEG LS Sample interleaved file format</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Htm">
      <summary>
        <see cref="T:L.Topics.FileFormatsHTM">HyperText Markup Language</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Mob">
      <summary>
        <see cref="T:L.Topics.FileFormatsMOBI">MOBI format for e-book readers such as the Kindle.</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Pub">
      <summary>
        <see cref="T:L.Topics.FileFormatsEPUB">ePub format for files to be displayed on different devices.</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.Ing">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">COT, Uncompressed (color or gray)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IngRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">RLE, RLE compression</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IngAdaptiveRle">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">T27, Uncompressed (color or gray)</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IngG4">
      <summary>
        <see cref="T:L.Topics.FileFormatsITG">CIT, CCITT G4 compression</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaJpeg">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA, compressed using JPEG, with MO:DCA wrapper (multipage).</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaJpeg411">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA, compressed using JPEG 4:1:1, with MO:DCA wrapper (multipage).</see>
      </summary>
    </member>
    <member name="F:Leadtools.RasterImageFormat.IcaJpeg422">
      <summary>
        <see cref="T:L.Topics.FileFormatsIOCAFormat">IOCA, compressed using JPEG 4:2:2, with MO:DCA wrapper (multipage). </see>
      </summary>
    </member>
    <member name="T:Leadtools.RasterRegion">
      <summary>Describes a region of interest in a <see cref="T:Leadtools.RasterImage" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterImage" /> object contains a region of interest value that can be used to limit the portion
            available for updating when using the image processing command. The region can be set using a geometric shape such as
            <see cref="M:Leadtools.RasterImage.AddRectangleToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)">RasterImage.AddRectangleToRegion</see> and
            <see cref="M:Leadtools.RasterImage.AddEllipseToRegion(Leadtools.RasterRegionXForm,Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)">RasterImage.AddEllipseToRegion</see> or with image data
            attributes such as <see cref="M:Leadtools.RasterImage.AddColorToRegion(Leadtools.RasterColor,Leadtools.RasterRegionCombineMode)">RasterImage.AddColorToRegion</see> and
            <see cref="M:Leadtools.RasterImage.AddMaskToRegion(Leadtools.RasterRegionXForm,Leadtools.RasterImage,Leadtools.RasterRegionCombineMode)">RasterImage.AddMaskToRegion</see>.</para>
        <para>At any point, you can get a copy of the region inside a <see cref="T:Leadtools.RasterImage" /> object using the
            <see cref="M:Leadtools.RasterImage.GetRegion(Leadtools.RasterRegionXForm)">RasterImage.GetRegion</see> method and update the region inside an image
            using the <see cref="M:Leadtools.RasterImage.SetRegion(Leadtools.RasterRegionXForm,Leadtools.RasterRegion,Leadtools.RasterRegionCombineMode)">RasterImage.SetRegion</see> method.</para>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class provides a platform independent representation of a region of interest in an image that can be used in any
            platform supported by LEADTOOLS such as GDI, GDI+, WPF and Silverlight.</para>
        <para>To convert a LEADTOOLS <see cref="T:Leadtools.RasterRegion" /> object to/from a device dependent region, you can use the following helper classes:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="T:Leadtools.Drawing.RasterRegionConverter">Leadtools.Drawing.RasterRegionConverter</see> to convert to/from a System.Drawing (GDI+) <see cref="T:System.Drawing.Region">System.Drawing.Region</see> or Windows HRGN objects.</description>
          </item>
          <item>
            <description>
              <see cref="T:Leadtools.Windows.Media.RasterRegionConverter">Leadtools.Windows.Media.RasterRegionConverter</see> to convert to/from a WPF and Silverlight <see cref="T:System.Windows.Media.Geometry">System.Windows.Media.Geometry</see> object.</description>
          </item>
        </list>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, so you must call <see cref="M:System.IDisposable.Dispose" /> on any
            region objects you create after using it.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterRegionExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion1.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion2.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Create a new rectangular RasterRegion
            Using region As New RasterRegion(New LeadRect(20, 30, 100, 200))
               ' Show this region properties
               Console.WriteLine("IsEmpty: {0}\nBounds: {1}", region.IsEmpty, region.GetBounds())

               ' Set it into the image
               image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)

               ' Fill the image with a color and save it to disk to show the region
               Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
               cmd.Run(image)

               codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24)

               ' Clear this region
               region.MakeEmpty()

               ' Show its properties
               Console.WriteLine("IsEmpty: {0}\nBounds: {1}", region.IsEmpty, region.GetBounds())

               ' Set it into the image and fill again with red, notice
               ' that this will fill the whole image since
               ' the region is now empty
               image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)

               cmd = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red))
               cmd.Run(image)

               codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24)
            End Using
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion1.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion2.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Create a new rectangular RasterRegion
            using(RasterRegion region = new RasterRegion(new LeadRect(20, 30, 100, 200)))
            {
               // Show this region properties
               Console.WriteLine("IsEmpty: {0}\nBounds: {1}", region.IsEmpty, region.GetBounds());

               // Set it into the image
               image.SetRegion(null, region, RasterRegionCombineMode.Set);

               // Fill the image with a color and save it to disk to show the region
               FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
               cmd.Run(image);

               codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24);

               // Clear this region
               region.MakeEmpty();

               // Show its properties
               Console.WriteLine("IsEmpty: {0}\nBounds: {1}", region.IsEmpty, region.GetBounds());

               // Set it into the image and fill again with red, notice
               // that this will fill the whole image since
               // the region is now empty
               image.SetRegion(null, region, RasterRegionCombineMode.Set);

               cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red));
               cmd.Run(image);

               codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24);
            }
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.#ctor">
      <summary>Initializes a new empty <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>This constructor initializes a new empty <see cref="T:Leadtools.RasterRegion" /> object. The <see cref="P:Leadtools.RasterRegion.IsEmpty" /> property will be <strong>true</strong> and <see cref="M:Leadtools.RasterRegion.GetBounds" /> will return an empty rectangle.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" /></example>
    </member>
    <member name="M:Leadtools.RasterRegion.#ctor(Leadtools.LeadRect)">
      <summary>Initializes a new <see cref="T:Leadtools.RasterRegion" /> from the specified <see cref="T:Leadtools.LeadRect" /> structure. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">A <see cref="T:Leadtools.LeadRect" /> structure that defines the interior of the new <see cref="T:Leadtools.RasterRegion" />.</param>
      <remarks>
        <para>This method creates a new <see cref="T:Leadtools.RasterRegion" /> with a rectangular interior. The interior is defined by the <paramref name="rect" /> parameter.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.CreatingaRegion">Creating a Region</see>.</para>
        <para>For more information, refer to <see cref="T:L.Topics.SavingARegion">Saving A Region</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.WorkingWithTheExistingRegion">Working with the Existing Region</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" /></example>
    </member>
    <member name="M:Leadtools.RasterRegion.Finalize">
      <summary>This member overrides <see cref="M:System.Object.Finalize" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterRegion" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.Dispose">
      <summary>Releases all resources used by this <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterRegion" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.Dispose(System.Boolean)">
      <summary>Releases all the resources used by this <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="disposing">
        <strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</param>
      <remarks>
        <para>The <see cref="T:Leadtools.RasterRegion" /> class implements the <see cref="T:System.IDisposable" /> interface, it is recommended that you
            follow the standard .NET dispose pattern when using the <see cref="T:Leadtools.RasterRegion" /> class. For more information, refer to
            the <see cref="T:System.IDisposable" /> interface documentation in MSDN.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.Clone">
      <summary>Creates an exact copy if this <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterRegion" /> that this method creates.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.RasterRegion.GetBounds">
      <summary>Gets a <see cref="T:Leadtools.LeadRect" /> structure that represents a rectangle that bounds this <see cref="T:Leadtools.RasterRegion" /> in pixels. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>A <see cref="T:Leadtools.LeadRect" /> structure that represents a rectangle that bounds this <see cref="T:Leadtools.RasterRegion" /> in pixels.</returns>
      <remarks>
        <para>The bounding rectangle is always the smallest possible bounding rectangle of this <see cref="T:Leadtools.RasterRegion" />. The returned rectangle
            is empty (all values equals to zero) if the region is empty.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.MakeEmpty">
      <summary>Initializes this <see cref="T:Leadtools.RasterRegion" /> to an empty interior. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.Combine(Leadtools.LeadRect,Leadtools.RasterRegionCombineMode)">
      <summary>Updates this <see cref="T:Leadtools.RasterRegion" /> to a combination of itself and the specified <see cref="T:Leadtools.LeadRect" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">The <see cref="T:Leadtools.LeadRect" /> structure to combine with this <see cref="T:Leadtools.RasterRegion" />.</param>
      <param name="combineMode">One of the <see cref="T:Leadtools.RasterRegionCombineMode" /> enumeration members that describes the combine method to use. This cannot be
            <see cref="T:Leadtools.RasterRegionCombineMode">RasterRegionCombineMode.AndNotImage</see> or <see cref="T:Leadtools.RasterRegionCombineMode">RasterRegionCombineMode.AndNotRegion</see>. Using
            any of these combine method will result in an exception.</param>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterRegionCombineRectExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CombineRect.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add a small elliptical region
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth \ 3, image.ImageHeight \ 3), RasterRegionCombineMode.Set)

            ' Get this region
            Dim region As RasterRegion = image.GetRegion(Nothing)
            image.MakeRegionEmpty()

            ' Create a rectangle that fits in this region area
            Dim rc As New LeadRect(0, 0, image.ImageWidth \ 4, image.ImageHeight \ 4)

            ' Combine the region to contain only the difference between the it and the rectangle
            region.Combine(rc, RasterRegionCombineMode.Xor)

            ' Set this region to the image and fill it with yellow
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)

            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionCombineRectExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CombineRect.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add a small elliptical region
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth / 3, image.ImageHeight / 3), RasterRegionCombineMode.Set);

            // Get this region
            RasterRegion region = image.GetRegion(null);
            image.MakeRegionEmpty();

            // Create a rectangle that fits in this region area
            LeadRect rc = new LeadRect(0, 0, image.ImageWidth / 4, image.ImageHeight / 4);

            // Combine the region to contain only the difference between the it and the rectangle
            region.Combine(rc, RasterRegionCombineMode.Xor);

            // Set this region to the image and fill it with yellow
            image.SetRegion(null, region, RasterRegionCombineMode.Set);

            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.Combine(Leadtools.RasterRegion,Leadtools.RasterRegionCombineMode)">
      <summary>Updates this <see cref="T:Leadtools.RasterRegion" /> to a combination of itself and the specified <see cref="T:Leadtools.RasterRegion" /><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="region">The <see cref="T:Leadtools.RasterRegion" /> to combine with this <see cref="T:Leadtools.RasterRegion" />.</param>
      <param name="combineMode">One of the <see cref="T:Leadtools.RasterRegionCombineMode" /> enumeration members that describes the combine method to use. This cannot be
            <see cref="T:Leadtools.RasterRegionCombineMode">RasterRegionCombineMode.AndNotImage</see> or <see cref="T:Leadtools.RasterRegionCombineMode">RasterRegionCombineMode.AndNotRegion</see>. Using
            any of these combine method will result in an exception.</param>
      <remarks>
        <para>For more information, refer to <see cref="T:Leadtools.RasterRegionCombineMode" />.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">      Public Sub RasterRegionCombineRegionExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CombineRegion.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add a small elliptical region
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth \ 3, image.ImageHeight \ 3), RasterRegionCombineMode.Set)

            ' Get this region
            Dim region1 As RasterRegion = image.GetRegion(Nothing)
            image.MakeRegionEmpty()

            ' Add a smaller elliptical region
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth \ 4, image.ImageHeight \ 4), RasterRegionCombineMode.Set)

            ' Get this region
            Dim region2 As RasterRegion = image.GetRegion(Nothing)
            image.MakeRegionEmpty()

            ' Combine both regions to contain only the difference between the two
            region1.Combine(region2, RasterRegionCombineMode.Xor)
            region2.Dispose()

            ' Set this region to the image and fill it with yellow
            image.SetRegion(Nothing, region1, RasterRegionCombineMode.Set)
            region1.Dispose()

            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionCombineRegionExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_CombineRegion.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add a small elliptical region
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth / 3, image.ImageHeight / 3), RasterRegionCombineMode.Set);

            // Get this region
            RasterRegion region1 = image.GetRegion(null);
            image.MakeRegionEmpty();

            // Add a smaller elliptical region
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth / 4, image.ImageHeight / 4), RasterRegionCombineMode.Set);

            // Get this region
            RasterRegion region2 = image.GetRegion(null);
            image.MakeRegionEmpty();

            // Combine both regions to contain only the difference between the two
            region1.Combine(region2, RasterRegionCombineMode.Xor);
            region2.Dispose();

            // Set this region to the image and fill it with yellow
            image.SetRegion(null, region1, RasterRegionCombineMode.Set);
            region1.Dispose();

            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.IsVisible(Leadtools.LeadPoint)">
      <summary>Tests whether the specified <see cref="T:Leadtools.LeadPoint" /> structure is contained within this <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="point">The <see cref="T:Leadtools.LeadPoint" /> structure to test.</param>
      <returns>
        <strong>true</strong> when point is contained within this <see cref="T:Leadtools.RasterRegion" />; otherwise, <strong>false</strong>.</returns>
      <noremarks />
      <example>
        <para>
          <para>This example will create a small elliptical region in an image, gets the <see cref="T:Leadtools.RasterRegion" /> object before resetting the image region. It will
            then switch the red and blue component of every pixel inside the region data.</para>
        </para>
        <code lang="VB">      Public Sub RasterRegionIsVisibleExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_IsVisibleRegion.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add a small elliptical region
            image.AddEllipseToRegion(Nothing, New LeadRect(image.ImageWidth \ 3, image.ImageHeight \ 3, image.ImageWidth \ 3, image.ImageHeight \ 3), RasterRegionCombineMode.Set)

            ' Get the region
            Using region As RasterRegion = image.GetRegion(Nothing)
               ' Remove the region from the image
               image.MakeRegionEmpty()

               ' Loop the image pixels, if it is inside the region, switch
               ' the red and blue component of the pixel color
               For y As Integer = 0 To image.Height - 1
                  For x As Integer = 0 To image.Width - 1
                     ' Check if this pixel is inside the region
                     If (region.IsVisible(New LeadPoint(x, y))) Then
                        ' Yes, flip its R and B component
                        Dim color As RasterColor = image.GetPixelColor(y, x)
                        color = New RasterColor(color.B, color.G, color.R)
                        image.SetPixelColor(y, x, color)
                     End If
                  Next
               Next
            End Using

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionIsVisibleExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_IsVisibleRegion.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add a small elliptical region
            image.AddEllipseToRegion(null, new LeadRect(image.ImageWidth / 3, image.ImageHeight / 3, image.ImageWidth / 3, image.ImageHeight / 3), RasterRegionCombineMode.Set);

            // Get the region
            using(RasterRegion region = image.GetRegion(null))
            {
               // Remove the region from the image
               image.MakeRegionEmpty();

               // Loop the image pixels, if it is inside the region, switch
               // the red and blue component of the pixel color
               for(int y = 0; y &lt; image.Height; y++)
               {
                  for(int x = 0; x &lt; image.Width; x++)
                  {
                     // Check if this pixel is inside the region
                     if(region.IsVisible(new LeadPoint(x, y)))
                     {
                        // Yes, flip its R and B component
                        RasterColor color = image.GetPixelColor(y, x);
                        color = new RasterColor(color.B, color.G, color.R);
                        image.SetPixelColor(y, x, color);
                     }
                  }
               }
            }

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.Clip(Leadtools.LeadRect)">
      <summary>Trims this <see cref="T:Leadtools.RasterRegion" /> to fit inside a specified <see cref="T:Leadtools.LeadRect" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="rect">A <see cref="T:Leadtools.LeadRect" /> that defines the clipping boundaries.</param>
      <noremarks />
      <example>
        <para>
          <para>This example will create a large elliptical region in an image and fill it with yellow. It will then clip this region by 10 pixels from
            each side and fill the new region with red.</para>
        </para>
        <code lang="VB">      Public Sub RasterRegionClipExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_ClipRegion.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add a large elliptical region 
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set)

            ' Fill the image with yellow
            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            ' Get the region
            Using region As RasterRegion = image.GetRegion(Nothing)
               ' Clip this region by 10 pixels from each end
               Dim bounds As LeadRect = region.GetBounds()
               bounds.Inflate(-10, -10)

               region.Clip(bounds)

               ' Re-set this region into the image
               image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
            End Using

            ' Now fill with red and save
            cmd = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red))
            cmd.Run(image)

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionClipExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_ClipRegion.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add a large elliptical region 
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set);

            // Fill the image with yellow
            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            // Get the region
            using(RasterRegion region = image.GetRegion(null))
            {
               // Clip this region by 10 pixels from each end
               LeadRect bounds = region.GetBounds();
               bounds.Inflate(-10, -10);

               region.Clip(bounds);

               // Re-set this region into the image
               image.SetRegion(null, region, RasterRegionCombineMode.Set);
            }

            // Now fill with red and save
            cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red));
            cmd.Run(image);

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.Transform(Leadtools.RasterRegionXForm)">
      <summary>Transforms this <see cref="T:Leadtools.RasterRegion" /> by the specified <see cref="T:Leadtools.RasterRegionXForm" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="xform">The <see cref="T:Leadtools.RasterRegionXForm" /> by which to transform this region</param>
      <remarks>
        <para>The <see cref="P:Leadtools.RasterRegionXForm.ViewPerspective">RasterRegionXForm.ViewPerspective</see> member of <paramref name="xform" /> is ignored
            by this method. For more information, refer to <see cref="T:Leadtools.RasterRegionXForm" />.</para>
      </remarks>
      <example>
        <para>
          <para>This example will create a large elliptical region in an image and fill it with yellow. It will then transform this region by making it twice
            as small and fill the new region with red.</para>
        </para>
        <code lang="VB">      Public Sub RasterRegionTransformExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_TransformRegion.bmp")

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add a large elliptical region 
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set)

            ' Fill the image with yellow
            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            ' Get the region
            Using region As RasterRegion = image.GetRegion(Nothing)
               ' Transform this region by making it twice as small
               Dim bounds As LeadRect = region.GetBounds()

               Dim xform As RasterRegionXForm = RasterRegionXForm.Default

               xform.XScalarNumerator = 1
               xform.XScalarDenominator = 2
               xform.YScalarNumerator = 1
               xform.YScalarDenominator = 2

               xform.XOffset = bounds.Width \ 2
               xform.YOffset = bounds.Height \ 2

               region.Transform(xform)

               ' Re-set this region into the image
               image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
            End Using

            ' Now fill with red and save
            cmd = New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red))
            cmd.Run(image)

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionTransformExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_TransformRegion.bmp");

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add a large elliptical region 
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set);

            // Fill the image with yellow
            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            // Get the region
            using(RasterRegion region = image.GetRegion(null))
            {
               // Transform this region by making it twice as small
               LeadRect bounds = region.GetBounds();

               RasterRegionXForm xform = RasterRegionXForm.Default;

               xform.XScalarNumerator = 1;
               xform.XScalarDenominator = 2;
               xform.YScalarNumerator = 1;
               xform.YScalarDenominator = 2;

               xform.XOffset = bounds.Width / 2;
               xform.YOffset = bounds.Height / 2;

               region.Transform(xform);

               // Re-set this region into the image
               image.SetRegion(null, region, RasterRegionCombineMode.Set);
            }

            // Now fill with red and save
            cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Red));
            cmd.Run(image);

            codecs.Save(image, destFileName, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.#ctor(System.Byte[])">
      <summary>Initializes a new <see cref="T:Leadtools.RasterRegion" /> from the specified data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="data">A an array of <see cref="T:System.Byte" /> that defines the interior of the new <see cref="T:Leadtools.RasterRegion" /></param>
      <remarks>
        <para>You can get the data that defines a region by creating a <see cref="T:Leadtools.RasterRegion" /> using any of the region methods and using
            the <see cref="M:Leadtools.RasterRegion.GetData" /> method to obtain the data.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.GetData" />.</example>
    </member>
    <member name="M:Leadtools.RasterRegion.GetData">
      <summary>Returns an array of <see cref="T:System.Byte" /> that represents the information that describes this <see cref="T:Leadtools.RasterRegion" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of <see cref="T:System.Byte" /> that represents the information that describes this <see cref="T:Leadtools.RasterRegion" />.</returns>
      <remarks>
        <para>You can use the <see cref="M:Leadtools.RasterRegion.GetData" /> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])" /> methods to save and load the content of a region to disk or memory.</para>
        <para>If this <see cref="T:Leadtools.RasterRegion" /> is empty, then this method will return an array of 0 items.</para>
      </remarks>
      <example>
        <para>
          <para>This example will loads an image, adds a region to it, gets the <see cref="T:Leadtools.RasterRegion" /> object from the image and set it to disk. It will
            then re-load this data from disk and set it back to another image.</para>
        </para>
        <code lang="VB">      Public Sub RasterRegionDataExample()
         Dim codecs As New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion1.bmp")
         Dim regionFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Region.bin")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion2.bmp")

         Dim region As RasterRegion = Nothing

         ' Load the source image
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Add an elliptical region to it
            image.AddEllipseToRegion(Nothing, New LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set)

            ' Fill the image with a color and save it to disk to show the region
            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24)

            ' Get the region
            region = image.GetRegion(Nothing)
         End Using

         ' Save this region to disk
         Dim data() As Byte = region.GetData()
         File.WriteAllBytes(regionFileName, data)

         ' Dispose the region
         region.Dispose()

         ' Now, reload the image and region from disk, set the region into the image directly
         ' from the data we save, re-fill and save again
         Using image As RasterImage = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            ' Create a region from the data we saved on disk
            data = File.ReadAllBytes(regionFileName)
            region = New RasterRegion(data)
            ' Set this region into the image
            image.SetRegion(Nothing, region, RasterRegionCombineMode.Set)
            region.Dispose()

            ' Fill the image with a color and save it to disk to show the region
            Dim cmd As New FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow))
            cmd.Run(image)

            codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24)
         End Using

         codecs.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterRegionDataExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion1.bmp");
         string regionFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_Region.bin");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_WithRegion2.bmp");

         RasterRegion region = null;

         // Load the source image
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Add an elliptical region to it
            image.AddEllipseToRegion(null, new LeadRect(0, 0, image.ImageWidth, image.ImageHeight), RasterRegionCombineMode.Set);

            // Fill the image with a color and save it to disk to show the region
            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            codecs.Save(image, destFileName1, RasterImageFormat.Bmp, 24);

            // Get the region
            region = image.GetRegion(null);
         }

         // Save this region to disk
         byte[] data = region.GetData();
         File.WriteAllBytes(regionFileName, data);

         // Dispose the region
         region.Dispose();

         // Now, reload the image and region from disk, set the region into the image directly
         // from the data we save, re-fill and save again
         using(RasterImage image = codecs.Load(srcFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1))
         {
            // Create a region from the data we saved on disk
            data = File.ReadAllBytes(regionFileName);
            using(region = new RasterRegion(data))
            {
               // Set this region into the image
               image.SetRegion(null, region, RasterRegionCombineMode.Set);
            }

            // Fill the image with a color and save it to disk to show the region
            FillCommand cmd = new FillCommand(RasterColor.FromKnownColor(RasterKnownColor.Yellow));
            cmd.Run(image);

            codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 24);
         }

         codecs.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.RasterRegion.SetData(System.Byte[])">
      <summary>Ovrrides the data of this <see cref="T:Leadtools.RasterRegion" /> from an array of <see cref="T:System.Byte" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="data">An array of <see cref="T:System.Byte" /> that represents the information that describes a <see cref="T:Leadtools.RasterRegion" />.</param>
      <remarks>
        <para>You can use the <see cref="M:Leadtools.RasterRegion.GetData" /> and <see cref="M:Leadtools.RasterRegion.SetData(System.Byte[])" /> methods to save and load the content of a region to disk or memory.</para>
        <para>If <paramref name="data" /> is an array of 0 items or is null (Nothing in Visual Basic), then this method will make the <see cref="T:Leadtools.RasterRegion" />
            object empty. This is the equivalant of calling <see cref="M:Leadtools.RasterRegion.MakeEmpty" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.RasterRegion.GetData" />.</example>
    </member>
    <member name="P:Leadtools.RasterRegion.IsEmpty">
      <summary>Tests whether this <see cref="T:Leadtools.RasterRegion" /> has an empty interior. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> if the interior of this <see cref="T:Leadtools.RasterRegion" /> is empty; otherwise, <strong>false</strong>.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterRegion" />.</example>
    </member>
    <member name="T:Leadtools.RasterMarkerMetadata">
      <summary>Extends the <see cref="T:Leadtools.RasterMetadata" /> class to provide functionality for dealing with marker metadata
            stored within various image file formats. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>JPEG files contain metadata information in user-defined markers.</para>
        <para>The user-defined markers are in the range 0xE0 to 0xFE. These markers can have a maximum size of 0xFFFD, or 65533 bytes.</para>
        <para>The markers below 0xE0 are reserved for the encoding of the image and inserting a reserved marker can make a file invalid.
            Therefore, you should not use reserved markers unless you are well acquainted with markers and image encoding in JPEG files.</para>
        <para>TIFF files do not contain markers, however, Leadtools provides a "workaround" for transferring Exif comments from 
            JPEG files to TIFF files, and vice versa. The Exif metadata information from a TIFF file will be loaded as an 
            APP1 marker. Therefore, you can load Exif metadata from an uncompressed file and store it in a compressed Exif 
            file.</para>
        <para>You can also take metadata information from a compressed Exif file and store it in an uncompressed Exif 
            file. Please note however, that some information cannot be stored inside uncompressed Exif files. For example, 
            audio data is stored in APP2 markers and there is no built-in support for saving APP2 markers in TIFF files. 
            However, you can still save the audio data yourself, using a custom tag.</para>
      </remarks>
      <example>
        <para>This example will write different markers to an existing tif file then read them as a test.</para>
        <code lang="VB">        Public Sub RasterMarkerMetadataExample()
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.ThrowExceptionsOnInvalidImages = True

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_markers.tif")

         ' Load the image
         Dim image As RasterImage = codecs.Load(srcFileName)
         codecs.Save(image, destFileName, RasterImageFormat.ExifJpeg, 24)

         image.Dispose()

         ' write a marker to the file
         Dim markerWrite As RasterMarkerMetadata = New RasterMarkerMetadata()
         Dim data As Byte() = New Byte(99) {}
         Dim i As Integer = 0
         Do While i &lt; data.Length
            data(i) = CByte(i + 1)
            i += 1
         Loop
         markerWrite.Id = &amp;HE0
         markerWrite.SetData(data)

         Console.WriteLine("Writing the marker")
         codecs.WriteMarker(destFileName, 1, markerWrite)

         ' read the markers from the file and check for ours
         Dim markers As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(destFileName)
         Dim markerRead As RasterMarkerMetadata = Nothing
         i = 0
         Do While i &lt; markers.Count AndAlso markerRead Is Nothing
            If markers(i).Id = markerWrite.Id Then
               markerRead = markers(i)
            End If
            i += 1
         Loop

         Debug.Assert(markerRead.Id = markerWrite.Id)
         Dim dataRead As Byte() = markerRead.GetData()
         Dim dataWrite As Byte() = markerWrite.GetData()
         Debug.Assert(dataRead.Length = dataWrite.Length)
         i = 0
         Do While i &lt; dataRead.Length
            Debug.Assert(dataRead(i) = dataWrite(i))
            i += 1
         Loop
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterMarkerMetadataExample()
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir,"Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_markers.tif");

         // Load the image
         RasterImage image = codecs.Load(srcFileName);
         codecs.Save(image, destFileName, RasterImageFormat.ExifJpeg, 24);

         image.Dispose();

         // write a marker to the file
         RasterMarkerMetadata markerWrite = new RasterMarkerMetadata();
         byte[] data = new byte[100];
         for(int i=0; i &lt; data.Length; i++ )
            data[i] = (byte)(i + 1);
         markerWrite.Id = 0xE0;
         markerWrite.SetData(data);

         Console.WriteLine("Writing the marker");
         codecs.WriteMarker(destFileName, 1, markerWrite);

         // read the markers from the file and check for ours
         RasterCollection&lt;RasterMarkerMetadata&gt; markers = codecs.ReadMarkers(destFileName);
         RasterMarkerMetadata markerRead = null;
         for(int i = 0; i &lt; markers.Count &amp;&amp; markerRead == null; i++)
         {
            if(markers[i].Id == markerWrite.Id)
               markerRead = markers[i];
         }

         Debug.Assert(markerRead.Id == markerWrite.Id);
         byte[] dataRead = markerRead.GetData();
         byte[] dataWrite = markerWrite.GetData();
         Debug.Assert(dataRead.Length == dataWrite.Length);
         for(int i = 0; i &lt; dataRead.Length; i++)
            Debug.Assert(dataRead[i] == dataWrite[i]);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterMarkerMetadataExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, destStream, RasterImageFormat.ExifJpeg, 24);
         image.Dispose();

         // write a marker to the file
         RasterMarkerMetadata markerWrite = new RasterMarkerMetadata();
         byte[] data = new byte[100];
         for(int i=0; i &lt; data.Length; i++ )
            data[i] = (byte)(i + 1);
         markerWrite.Id = 0xE0;
         markerWrite.SetData(data);

         Console.WriteLine("Writing the marker");
         codecs.WriteMarker(destStream, 1, markerWrite);

         // read the markers from the file and check for ours
         RasterCollection&lt;RasterMarkerMetadata&gt; markers = codecs.ReadMarkers(destStream);
         RasterMarkerMetadata markerRead = null;
         for(int i = 0; i &lt; markers.Count &amp;&amp; markerRead == null; i++)
         {
            if(markers[i].Id == markerWrite.Id)
               markerRead = markers[i];
         }

         Debug.Assert(markerRead.Id == markerWrite.Id);
         byte[] dataRead = markerRead.GetData();
         byte[] dataWrite = markerWrite.GetData();
         Debug.Assert(dataRead.Length == dataWrite.Length);
         for(int i = 0; i &lt; dataRead.Length; i++)
            Debug.Assert(dataRead[i] == dataWrite[i]);
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterMarkerMetadataExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, destStream, RasterImageFormat.ExifJpeg, 24)
         image.Dispose()

         ' write a marker to the file
         Dim markerWrite As RasterMarkerMetadata = New RasterMarkerMetadata()
         Dim data As Byte() = New Byte(99){}
         Dim i As Integer=0
         Do While i &lt; data.Length
            data(i) = CByte(i + 1)
            i += 1
         Loop
         markerWrite.Id = &amp;HE0
         markerWrite.SetData(data)

         Console.WriteLine("Writing the marker")
         codecs.WriteMarker(destStream, 1, markerWrite)

         ' read the markers from the file and check for ours
         Dim markers As RasterCollection(Of RasterMarkerMetadata) = codecs.ReadMarkers(destStream)
         Dim markerRead As RasterMarkerMetadata = Nothing
         i = 0
         Do While i &lt; markers.Count AndAlso markerRead Is Nothing
            If markers(i).Id = markerWrite.Id Then
               markerRead = markers(i)
            End If
            i += 1
         Loop

         Debug.Assert(markerRead.Id = markerWrite.Id)
         Dim dataRead As Byte() = markerRead.GetData()
         Dim dataWrite As Byte() = markerWrite.GetData()
         Debug.Assert(dataRead.Length = dataWrite.Length)
         i = 0
         Do While i &lt; dataRead.Length
            Debug.Assert(dataRead(i) = dataWrite(i))
            i += 1
         Loop
      End Sub</code>
      </example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Sos">
      <summary>Constant which represents the SOS marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.App0">
      <summary>Constant which represents the APP0 marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.App1">
      <summary>Constant which represents the APP1 marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.App2">
      <summary>Constant which represents the APP2 marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Com">
      <summary>Constant which represents the COM marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Rst0">
      <summary>Constant which represents the RST0 marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Rst7">
      <summary>Constant which represents the RST7 marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Soi">
      <summary>Constant which represents the SOI marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="F:Leadtools.RasterMarkerMetadata.Eoi">
      <summary>Constant which represents the EOI marker. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterMarkerMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMarkerMetadata" /> class with default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterMarkerMetadata.#ctor(System.Int32,System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.RasterMarkerMetadata" /> class with the specified values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="id">The marker id.</param>
      <param name="data">The data for the marker.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterMarkerMetadata.Clone">
      <summary>Makes an exact copy of this <see cref="T:Leadtools.RasterMarkerMetadata" /> object. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The <see cref="T:Leadtools.RasterMarkerMetadata" /> that this method creates.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterMarkerMetadata.GetData">
      <summary>Gets the marker data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>An array of bytes which contains the marker data.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="M:Leadtools.RasterMarkerMetadata.SetData(System.Byte[])">
      <summary>Sets the marker data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">An array of bytes which contains the marker data</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="P:Leadtools.RasterMarkerMetadata.Id">
      <summary>Gets or sets the marker id. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>ID of the JPEG marker to write. The JPEG markers are uniquely identified by a byte value.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.RasterMarkerMetadata" /></example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterUserMatchTable">
      <summary>Maintains a predefined table to speed conversion with a user palette when using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
        <para>Use the <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" /> class to create a predefined table to speed conversion with a user palette when using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />.</para>
        <para>You should use the following sequense
            <list type="number"><item><description>Create a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" /> class</description></item><item><description>Call the <see cref="M:Leadtools.ImageProcessing.RasterUserMatchTable.Create(Leadtools.RasterColor[])">RasterUserMatchTable.Create</see> method to create the table.</description></item><item><description>Call the <see cref="M:Leadtools.ImageProcessing.RasterUserMatchTable.Use">RasterUserMatchTable.Use</see> method to make this the current table. (Having this as a separate method allows you
            to save tables in files and get the one you need, without creating it again.)</description></item><item><description>Run <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> with <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.UsePalette</see> or <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.FastMatch</see> set
            in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags">ColorResolutionCommand.PaletteFlags</see> property.</description></item><item><description>Call the <see cref="M:Leadtools.ImageProcessing.RasterUserMatchTable.Unuse" /> method when the table is no longer needed.</description></item></list></para>
        <para>The completed table is a 32K array of integers. On a 32-bit system, it occupies 128K bytes of memory. Creation of the table is a slow,
            memory-intensive process that is useful only if you are using your own palette more than once. For example, you may want to create the table
            once, save it to a file, and ship that file with your application.</para>
      </remarks>
      <example>
        <para>This example changes the color resolution of a bitmap, using a user-defined palette and a match table for fast color matching.</para>
        <code lang="VB">        Public Sub RasterUserMatchTableExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "RasterUserMatchTable.bmp")

         ' Load the image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' 64-color rainbow palette
         Dim colors As RasterColor() = {New RasterColor(0, 0, 0), New RasterColor(0, 0, 85), New RasterColor(0, 0, 170), New RasterColor(0, 0, 255), New RasterColor(85, 0, 0), New RasterColor(85, 0, 85), New RasterColor(85, 0, 170), New RasterColor(85, 0, 255), New RasterColor(170, 0, 0), New RasterColor(170, 0, 85), New RasterColor(170, 0, 170), New RasterColor(170, 0, 255), New RasterColor(255, 0, 0), New RasterColor(255, 0, 85), New RasterColor(255, 0, 170), New RasterColor(255, 0, 255), New RasterColor(0, 85, 0), New RasterColor(0, 85, 85), New RasterColor(0, 85, 170), New RasterColor(0, 85, 255), New RasterColor(85, 85, 0), New RasterColor(85, 85, 85), New RasterColor(85, 85, 170), New RasterColor(85, 85, 255), New RasterColor(170, 85, 0), New RasterColor(170, 85, 85), New RasterColor(170, 85, 170), New RasterColor(170, 85, 255), New RasterColor(255, 85, 0), New RasterColor(255, 85, 85), New RasterColor(255, 85, 170), New RasterColor(255, 85, 255), New RasterColor(0, 170, 0), New RasterColor(0, 170, 85), New RasterColor(0, 170, 170), New RasterColor(0, 170, 255), New RasterColor(85, 170, 0), New RasterColor(85, 170, 85), New RasterColor(85, 170, 170), New RasterColor(85, 170, 255), New RasterColor(170, 170, 0), New RasterColor(170, 170, 85), New RasterColor(170, 170, 170), New RasterColor(170, 170, 255), New RasterColor(255, 170, 0), New RasterColor(255, 170, 85), New RasterColor(255, 170, 170), New RasterColor(255, 170, 255), New RasterColor(0, 255, 0), New RasterColor(0, 255, 85), New RasterColor(0, 255, 170), New RasterColor(0, 255, 255), New RasterColor(85, 255, 0), New RasterColor(85, 255, 85), New RasterColor(85, 255, 170), New RasterColor(85, 255, 255), New RasterColor(170, 255, 0), New RasterColor(170, 255, 85), New RasterColor(170, 255, 170), New RasterColor(170, 255, 255), New RasterColor(255, 255, 0), New RasterColor(255, 255, 85), New RasterColor(255, 255, 170), New RasterColor(255, 255, 255)}

         ' Create and set the user match table
         Dim userMatchTable As RasterUserMatchTable = New RasterUserMatchTable()
         userMatchTable.Create(colors)
         userMatchTable.Use()

         ' Change the color resolution using the new palette. Note that the user match table
         ' is makes your code faster only if you use it more than once. It is included here only 
         ' to show how it can be coded.

         Dim command As ColorResolutionCommand = New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 8, RasterByteOrder.Rgb, RasterDitheringMethod.FloydStein, ColorResolutionCommandPaletteFlags.UsePalette Or ColorResolutionCommandPaletteFlags.FastMatch, colors)
         command.Run(image)

         ' Free the user match table when it is no longer needed
         userMatchTable.Unuse()

         ' Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 8)

         ' Clean up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterUserMatchTableExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "RasterUserMatchTable.bmp");

         // Load the image from disk
         RasterImage image = codecs.Load(srcFileName);

         // 64-color rainbow palette
         RasterColor[] colors = 
         {
            new RasterColor(0, 0, 0), new RasterColor(0, 0, 85), new RasterColor(0, 0, 170), new RasterColor(0, 0, 255),
            new RasterColor(85, 0, 0), new RasterColor(85, 0, 85), new RasterColor(85, 0, 170), new RasterColor(85, 0, 255),
            new RasterColor(170, 0, 0), new RasterColor(170, 0, 85), new RasterColor(170, 0, 170), new RasterColor(170, 0, 255),
            new RasterColor(255, 0, 0), new RasterColor(255, 0, 85), new RasterColor(255, 0, 170), new RasterColor(255, 0, 255),
            new RasterColor(0, 85, 0), new RasterColor(0, 85, 85), new RasterColor(0, 85, 170), new RasterColor(0, 85, 255),
            new RasterColor(85, 85, 0), new RasterColor(85, 85, 85), new RasterColor(85, 85, 170), new RasterColor(85, 85, 255),
            new RasterColor(170, 85, 0), new RasterColor(170, 85, 85), new RasterColor(170, 85, 170), new RasterColor(170, 85, 255),
            new RasterColor(255, 85, 0), new RasterColor(255, 85, 85), new RasterColor(255, 85, 170), new RasterColor(255, 85, 255),
            new RasterColor(0, 170, 0), new RasterColor(0, 170, 85), new RasterColor(0, 170, 170), new RasterColor(0, 170, 255),
            new RasterColor(85, 170, 0), new RasterColor(85, 170, 85), new RasterColor(85, 170, 170), new RasterColor(85, 170, 255),
            new RasterColor(170, 170, 0), new RasterColor(170, 170, 85), new RasterColor(170, 170, 170), new RasterColor(170, 170, 255),
            new RasterColor(255, 170, 0), new RasterColor(255, 170, 85), new RasterColor(255, 170, 170), new RasterColor(255, 170, 255),
            new RasterColor(0, 255, 0), new RasterColor(0, 255, 85), new RasterColor(0, 255, 170), new RasterColor(0, 255, 255),
            new RasterColor(85, 255, 0), new RasterColor(85, 255, 85), new RasterColor(85, 255, 170), new RasterColor(85, 255, 255),
            new RasterColor(170, 255, 0), new RasterColor(170, 255, 85), new RasterColor(170, 255, 170), new RasterColor(170, 255, 255),
            new RasterColor(255, 255, 0), new RasterColor(255, 255, 85), new RasterColor(255, 255, 170), new RasterColor(255, 255, 255)
         };

         // Create and set the user match table
         RasterUserMatchTable userMatchTable = new RasterUserMatchTable();
         userMatchTable.Create(colors);
         userMatchTable.Use();

         // Change the color resolution using the new palette. Note that the user match table
         // is makes your code faster only if you use it more than once. It is included here only 
         // to show how it can be coded.

         ColorResolutionCommand command = new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.FloydStein,
            ColorResolutionCommandPaletteFlags.UsePalette | ColorResolutionCommandPaletteFlags.FastMatch,
            colors);
         command.Run(image);

         // Free the user match table when it is no longer needed
         userMatchTable.Unuse();

         // Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 8);

         // Clean up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterUserMatchTableExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // 64-color rainbow palette
         RasterColor[] colors = 
         {
            new RasterColor(0, 0, 0), new RasterColor(0, 0, 85), new RasterColor(0, 0, 170), new RasterColor(0, 0, 255),
            new RasterColor(85, 0, 0), new RasterColor(85, 0, 85), new RasterColor(85, 0, 170), new RasterColor(85, 0, 255),
            new RasterColor(170, 0, 0), new RasterColor(170, 0, 85), new RasterColor(170, 0, 170), new RasterColor(170, 0, 255),
            new RasterColor(255, 0, 0), new RasterColor(255, 0, 85), new RasterColor(255, 0, 170), new RasterColor(255, 0, 255),
            new RasterColor(0, 85, 0), new RasterColor(0, 85, 85), new RasterColor(0, 85, 170), new RasterColor(0, 85, 255),
            new RasterColor(85, 85, 0), new RasterColor(85, 85, 85), new RasterColor(85, 85, 170), new RasterColor(85, 85, 255),
            new RasterColor(170, 85, 0), new RasterColor(170, 85, 85), new RasterColor(170, 85, 170), new RasterColor(170, 85, 255),
            new RasterColor(255, 85, 0), new RasterColor(255, 85, 85), new RasterColor(255, 85, 170), new RasterColor(255, 85, 255),
            new RasterColor(0, 170, 0), new RasterColor(0, 170, 85), new RasterColor(0, 170, 170), new RasterColor(0, 170, 255),
            new RasterColor(85, 170, 0), new RasterColor(85, 170, 85), new RasterColor(85, 170, 170), new RasterColor(85, 170, 255),
            new RasterColor(170, 170, 0), new RasterColor(170, 170, 85), new RasterColor(170, 170, 170), new RasterColor(170, 170, 255),
            new RasterColor(255, 170, 0), new RasterColor(255, 170, 85), new RasterColor(255, 170, 170), new RasterColor(255, 170, 255),
            new RasterColor(0, 255, 0), new RasterColor(0, 255, 85), new RasterColor(0, 255, 170), new RasterColor(0, 255, 255),
            new RasterColor(85, 255, 0), new RasterColor(85, 255, 85), new RasterColor(85, 255, 170), new RasterColor(85, 255, 255),
            new RasterColor(170, 255, 0), new RasterColor(170, 255, 85), new RasterColor(170, 255, 170), new RasterColor(170, 255, 255),
            new RasterColor(255, 255, 0), new RasterColor(255, 255, 85), new RasterColor(255, 255, 170), new RasterColor(255, 255, 255)
         };

         // Create and set the user match table
         RasterUserMatchTable userMatchTable = new RasterUserMatchTable();
         userMatchTable.Create(colors);
         userMatchTable.Use();

         // Change the color resolution using the new palette. Note that the user match table
         // is makes your code faster only if you use it more than once. It is included here only 
         // to show how it can be coded.

         ColorResolutionCommand command = new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.FloydStein,
            ColorResolutionCommandPaletteFlags.UsePalette | ColorResolutionCommandPaletteFlags.FastMatch,
            colors);
         command.Run(image);

         // Free the user match table when it is no longer needed
         userMatchTable.Unuse();

         // Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 8);

         // Clean up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterUserMatchTableExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' 64-color rainbow palette
         Dim colors As RasterColor() = { New RasterColor(0, 0, 0), New RasterColor(0, 0, 85), New RasterColor(0, 0, 170), New RasterColor(0, 0, 255), New RasterColor(85, 0, 0), New RasterColor(85, 0, 85), New RasterColor(85, 0, 170), New RasterColor(85, 0, 255), New RasterColor(170, 0, 0), New RasterColor(170, 0, 85), New RasterColor(170, 0, 170), New RasterColor(170, 0, 255), New RasterColor(255, 0, 0), New RasterColor(255, 0, 85), New RasterColor(255, 0, 170), New RasterColor(255, 0, 255), New RasterColor(0, 85, 0), New RasterColor(0, 85, 85), New RasterColor(0, 85, 170), New RasterColor(0, 85, 255), New RasterColor(85, 85, 0), New RasterColor(85, 85, 85), New RasterColor(85, 85, 170), New RasterColor(85, 85, 255), New RasterColor(170, 85, 0), New RasterColor(170, 85, 85), New RasterColor(170, 85, 170), New RasterColor(170, 85, 255), New RasterColor(255, 85, 0), New RasterColor(255, 85, 85), New RasterColor(255, 85, 170), New RasterColor(255, 85, 255), New RasterColor(0, 170, 0), New RasterColor(0, 170, 85), New RasterColor(0, 170, 170), New RasterColor(0, 170, 255), New RasterColor(85, 170, 0), New RasterColor(85, 170, 85), New RasterColor(85, 170, 170), New RasterColor(85, 170, 255), New RasterColor(170, 170, 0), New RasterColor(170, 170, 85), New RasterColor(170, 170, 170), New RasterColor(170, 170, 255), New RasterColor(255, 170, 0), New RasterColor(255, 170, 85), New RasterColor(255, 170, 170), New RasterColor(255, 170, 255), New RasterColor(0, 255, 0), New RasterColor(0, 255, 85), New RasterColor(0, 255, 170), New RasterColor(0, 255, 255), New RasterColor(85, 255, 0), New RasterColor(85, 255, 85), New RasterColor(85, 255, 170), New RasterColor(85, 255, 255), New RasterColor(170, 255, 0), New RasterColor(170, 255, 85), New RasterColor(170, 255, 170), New RasterColor(170, 255, 255), New RasterColor(255, 255, 0), New RasterColor(255, 255, 85), New RasterColor(255, 255, 170), New RasterColor(255, 255, 255) }

         ' Create and set the user match table
         Dim userMatchTable As RasterUserMatchTable = New RasterUserMatchTable()
         userMatchTable.Create(colors)
         userMatchTable.Use()

         ' Change the color resolution using the new palette. Note that the user match table
         ' is makes your code faster only if you use it more than once. It is included here only 
         ' to show how it can be coded.

         Dim command As ColorResolutionCommand = New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 8, RasterByteOrder.Rgb, RasterDitheringMethod.FloydStein, ColorResolutionCommandPaletteFlags.UsePalette Or ColorResolutionCommandPaletteFlags.FastMatch, colors)
         command.Run(image)

         ' Free the user match table when it is no longer needed
         userMatchTable.Unuse()

         ' Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 8)

         ' Clean up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterUserMatchTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" /> class. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterUserMatchTable.Create(Leadtools.RasterColor[])">
      <summary>Creates a table that speeds color conversion when using a palette that you create. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="palette">An array of <see cref="T:Leadtools.RasterColor" /> that is your palette.</param>
      <remarks>
        <para>The table is referenced by <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />.</para>
        <para>For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterUserMatchTable.Use">
      <summary>Selects a table that speeds conversion when using a palette that you create <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterUserMatchTable.Unuse">
      <summary>Frees the table that is used to speed conversion when using a palette that you create. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterUserMatchTable.Buffer">
      <summary>Gets the user match table data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>A <see cref="T:Leadtools.RasterNativeBuffer" /> object that contains the internal user match table.</value>
      <remarks>
        <para>When you call the <see cref="M:Leadtools.ImageProcessing.RasterUserMatchTable.Create(Leadtools.RasterColor[])" /> method, this property will return a pointer to the internal created match table.</para>
        <para>The completed table is a 32K array of integers. On a 32-bit system, it occupies 128K bytes of memory. Creation of the table is
            a slow, memory-intensive process that is useful only if you are using your own palette more than once. For example, you may want to
            create the table once, save it to a file, and ship that file with your application.</para>
        <para>For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.RasterCommandProcessor">
      <summary>Batch processes a collection of <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> object on a collection of <see cref="T:Leadtools.RasterImage" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Use the <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" /> class to perform "batch" image processing, where one or more commands are
            executed on one or more images.
            </remarks>
      <example>
        <para>This example will load multiple images from disk and executes multiple image proecessing commands on them before 
            saving the result into a single multi-page tif file.</para>
        <code lang="VB">        Public Sub RasterCommandProcessorExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "RasterCommandProcessor.tif")

         ' create a raster command processor
         Dim processor As RasterCommandProcessor = New RasterCommandProcessor()

         ' add the commands (color-res to 8 then flip)
         processor.Commands.Add(New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 8, RasterByteOrder.Rgb, RasterDitheringMethod.None, ColorResolutionCommandPaletteFlags.Optimized, Nothing))
         processor.Commands.Add(New FlipCommand(False))

         ' load the images
         Const imageCount As Integer = 2
         For i As Integer = 0 To imageCount - 1
            Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, String.Format("Image{0}.cmp", i + 1))
            processor.Images.Add(codecs.Load(srcFileName))
         Next i

         ' run the commands
         AddHandler processor.Progress, AddressOf processor_Progress
         processor.Run()
         RemoveHandler processor.Progress, AddressOf processor_Progress

         ' save the result image as multi-page tif file
         If File.Exists(destFileName) Then
            File.Delete(destFileName)
         End If

         For i As Integer = 0 To imageCount - 1
            codecs.Save(processor.Images(i), destFileName, RasterImageFormat.Tif, 8, 1, 1, -1, CodecsSavePageMode.Append)
         Next i

         ' clean up
         For i As Integer = 0 To imageCount - 1
            processor.Images(i).Dispose()
         Next i

      End Sub

      Private Sub processor_Progress(ByVal sender As Object, ByVal e As RasterCommandProcessorProgressEventArgs)
         ' show information about the command
         Console.Write("Running command {0} ({1}) of {2}, ", e.CommandNumber, e.Command, e.TotalCommands)
         Console.Write("On image {0} ({1} by {2} pixels) of {3}, ", e.ImageNumber, e.Image.Width, e.Image.Height, e.TotalImages)
         Console.WriteLine("{0}% done", e.Percent)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterCommandProcessorExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "RasterCommandProcessor.tif");

         // create a raster command processor
         RasterCommandProcessor processor = new RasterCommandProcessor();

         // add the commands (color-res to 8 then flip)
         processor.Commands.Add(new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.Optimized,
            null));
         processor.Commands.Add(new FlipCommand(false));

         // load the images
         const int imageCount = 4;
         for(int i = 0; i &lt; imageCount; i++)
         {
            string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, string.Format("Image{0}.cmp", (i + 1)%2+1));
            processor.Images.Add(codecs.Load(srcFileName));
         }

         // run the commands
         processor.Progress += new EventHandler&lt;RasterCommandProcessorProgressEventArgs&gt;(processor_Progress);
         processor.Run();
         processor.Progress -= new EventHandler&lt;RasterCommandProcessorProgressEventArgs&gt;(processor_Progress);

         // save the result image as multi-page tif file
         if(File.Exists(destFileName))
            File.Delete(destFileName);

         for(int i = 0; i &lt; imageCount; i++)
            codecs.Save(
               processor.Images[i],
               destFileName,
               RasterImageFormat.Tif,
               8,
               1,
               1,
               -1,
               CodecsSavePageMode.Append);

         // clean up
         for(int i = 0; i &lt; imageCount; i++)
            processor.Images[i].Dispose();

      }

      void processor_Progress(object sender, RasterCommandProcessorProgressEventArgs e)
      {
         // show information about the command
         Console.Write("Running command {0} ({1}) of {2}, ", e.CommandNumber, e.Command, e.TotalCommands);
         Console.Write("On image {0} ({1} by {2} pixels) of {3}, ", e.ImageNumber, e.Image.Width, e.Image.Height, e.TotalImages);
         Console.WriteLine("{0}% done", e.Percent);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void RasterCommandProcessorExample(RasterImage image1, RasterImage image2, RasterImage image3, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // create a raster command processor
         RasterCommandProcessor processor = new RasterCommandProcessor();

         // add the commands (color-res to 8 then flip)
         processor.Commands.Add(new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            8,
            RasterByteOrder.Rgb,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.Optimized,
            null));
         processor.Commands.Add(new FlipCommand(false));

         // add the images
         processor.Images.Add(image1);
         processor.Images.Add(image2);
         processor.Images.Add(image3);

         // run the commands
         processor.Progress += new EventHandler&lt;RasterCommandProcessorProgressEventArgs&gt;(processor_Progress);
         processor.Run();
         processor.Progress -= new EventHandler&lt;RasterCommandProcessorProgressEventArgs&gt;(processor_Progress);

         // save the result image as multi-page tif file
         for(int i = 0; i &lt; 3; i++)
            codecs.Save(
               processor.Images[i],
               destStream,
               RasterImageFormat.Tif,
               8,
               1,
               1,
               -1,
               CodecsSavePageMode.Append);

         // clean up
         for(int i = 0; i &lt; 3; i++)
            processor.Images[i].Dispose();
      }

      void processor_Progress(object sender, RasterCommandProcessorProgressEventArgs e)
      {
         // show information about the command
         Console.Write("Running command {0} ({1}) of {2}, ", e.CommandNumber, e.Command, e.TotalCommands);
         Console.Write("On image {0} ({1} by {2} pixels) of {3}, ", e.ImageNumber, e.Image.Width, e.Image.Height, e.TotalImages);
         Debug.WriteLine("{0}% done", e.Percent);
      }</code>
        <code lang="SilverlightVB">      Public Sub RasterCommandProcessorExample(ByVal image1 As RasterImage, ByVal image2 As RasterImage, ByVal image3 As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' create a raster command processor
         Dim processor As RasterCommandProcessor = New RasterCommandProcessor()

         ' add the commands (color-res to 8 then flip)
         processor.Commands.Add(New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 8, RasterByteOrder.Rgb, RasterDitheringMethod.None, ColorResolutionCommandPaletteFlags.Optimized, Nothing))
         processor.Commands.Add(New FlipCommand(False))

         ' add the images
         processor.Images.Add(image1)
         processor.Images.Add(image2)
         processor.Images.Add(image3)

         ' run the commands
         AddHandler processor.Progress, AddressOf processor_Progress
         processor.Run()
         RemoveHandler processor.Progress, AddressOf processor_Progress

         ' save the result image as multi-page tif file
         For i As Integer = 0 To 2
            codecs.Save(processor.Images(i), destStream, RasterImageFormat.Tif, 8, 1, 1, -1, CodecsSavePageMode.Append)
         Next i

         ' clean up
         For i As Integer = 0 To 2
            processor.Images(i).Dispose()
         Next i
      End Sub

      Private Sub processor_Progress(ByVal sender As Object, ByVal e As RasterCommandProcessorProgressEventArgs)
         ' show information about the command
         Console.Write("Running command {0} ({1}) of {2}, ", e.CommandNumber, e.Command, e.TotalCommands)
         Console.Write("On image {0} ({1} by {2} pixels) of {3}, ", e.ImageNumber, e.Image.Width, e.Image.Height, e.TotalImages)
         Debug.WriteLine("{0}% done", e.Percent)
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommandProcessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" /> class with default values. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            The new object will have empty and initializes <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> and <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> collections.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.RasterCommandProcessor.Run">
      <summary>Runs the image processing commands on the images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <remarks>
            Each <see cref="T:Leadtools.RasterImage" /> object in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> collection will be processed using each <see cref="T:Leadtools.ImageProcessing.RasterCommand" />
            (image processing command) in the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> collection.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="E:Leadtools.ImageProcessing.RasterCommandProcessor.Progress">
      <summary>Occurs during the processing of the image processing commands. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessorProgressEventArgs" /> containing data
            related to this event.
            </event>
      <remarks>You can use this event to get progress status, or to cancel the process.</remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands">
      <summary>The collection of <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> objects to be run on the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> objects. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The collection of <see cref="T:Leadtools.ImageProcessing.RasterCommand" /> objects to be run on the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images" /> objects.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.RasterCommandProcessor.Images">
      <summary>The collection of <see cref="T:Leadtools.RasterImage" /> objects to run the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> on. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            The collection of <see cref="T:Leadtools.RasterImage" /> objects to run the <see cref="P:Leadtools.ImageProcessing.RasterCommandProcessor.Commands" /> on.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.ImageProcessing.RasterCommandProcessor" />.
            </example>
    </member>
    <member name="T:Leadtools.ImageProcessing.SetAlphaValuesCommand">
      <summary>Fills the image alpha values, while preserving the other image components. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Alpha|Transparency</keywords>
      <remarks>
            This command only works with images that are 32 or 64-bit bits per pixel.
            </remarks>
      <example>
        <para>This example will load an image, convert it to 32-bit/pixel and then set the alpha values to half the maximum allowed</para>
        <code lang="VB">        Public Sub SetAlphaValuesCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "SetAlphaValuesCommand.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' Convert the image to 32-bits/pixel
         Dim colorResolution As ColorResolutionCommand = New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 32, RasterByteOrder.Bgr, RasterDitheringMethod.None, ColorResolutionCommandPaletteFlags.None, Nothing)
         colorResolution.Run(image)
         Debug.Assert(image.BitsPerPixel = 32)

         ' Set the alpha values
         Dim setAlphaValues As SetAlphaValuesCommand = New SetAlphaValuesCommand()
         setAlphaValues.Alpha = 128
         setAlphaValues.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 32)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void SetAlphaValuesCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName = Path.Combine(LEAD_VARS.ImagesDir, "SetAlphaValuesCommand.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // Convert the image to 32-bits/pixel
         ColorResolutionCommand colorResolution = new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            32,
            RasterByteOrder.Bgr,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.None,
            null);
         colorResolution.Run(image);
         Debug.Assert(image.BitsPerPixel == 32);

         // Set the alpha values
         SetAlphaValuesCommand setAlphaValues = new SetAlphaValuesCommand();
         setAlphaValues.Alpha = 128;
         setAlphaValues.Run(image);

         // Save the image back to disk
         codecs.Save(image, destFileName, RasterImageFormat.Bmp, 32);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void SetAlphaValuesCommandExample(RasterImage image, Stream destStream)
      {
         RasterCodecs codecs = new RasterCodecs();
         // Convert the image to 32-bits/pixel
         ColorResolutionCommand colorResolution = new ColorResolutionCommand(
            ColorResolutionCommandMode.InPlace,
            32,
            RasterByteOrder.Bgr,
            RasterDitheringMethod.None,
            ColorResolutionCommandPaletteFlags.None,
            null);
         colorResolution.Run(image);
         Debug.Assert(image.BitsPerPixel == 32);

         // Set the alpha values
         SetAlphaValuesCommand setAlphaValues = new SetAlphaValuesCommand();
         setAlphaValues.Alpha = 128;
         setAlphaValues.Run(image);

         // Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 32);

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SetAlphaValuesCommandExample(ByVal image As RasterImage, ByVal destStream As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Convert the image to 32-bits/pixel
         Dim colorResolution As ColorResolutionCommand = New ColorResolutionCommand(ColorResolutionCommandMode.InPlace, 32, RasterByteOrder.Bgr, RasterDitheringMethod.None, ColorResolutionCommandPaletteFlags.None, Nothing)
         colorResolution.Run(image)
         Debug.Assert(image.BitsPerPixel = 32)

         ' Set the alpha values
         Dim setAlphaValues As SetAlphaValuesCommand = New SetAlphaValuesCommand()
         setAlphaValues.Alpha = 128
         setAlphaValues.Run(image)

         ' Save the image back to disk
         codecs.Save(image, destStream, RasterImageFormat.Bmp, 32)

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SetAlphaValuesCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.SetAlphaValuesCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SetAlphaValuesCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SetAlphaValuesCommand.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.SetAlphaValuesCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="alpha">Alpha value to set.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SetAlphaValuesCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.SetAlphaValuesCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.SetAlphaValuesCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.SetAlphaValuesCommand.Alpha">
      <summary>Gets or sets the alpha component value. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The alpha component value</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.SetAlphaValuesCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.ScrambleCommandFlags">
      <summary>Flags for the <see cref="P:Leadtools.ImageProcessing.ScrambleCommand.Flags">ScrambleCommand.Flags</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Encrypt">
      <summary>
            Encrypts the area (the reverse of a decrypt).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Decrypt">
      <summary>
            Decrypts the area (the reverse of an encrypt).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Intersect">
      <summary>
            Restricts the encrypt/decrypt to the intersection of the area and the 'image' dimensions.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved3">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved4">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved5">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved6">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved7">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved8">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ScrambleCommandFlags.Reserved9">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.ScrambleCommand">
      <summary>Scrambles all or a portion of an image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <keywords>Scrambling|Encrypting</keywords>
      <remarks>
        <para>This command is available in the <see cref="T:Leadtools.Topics.DocumentMedicalEditionSupportAndLicensingRequirements">Document/Medical Imaging</see> editions toolkits.</para>
        <para>Scrambling a rectangular area means that the pixels in that area are shuffled around into a pseudo-random 
            location within the area.</para>
        <para>
          <list>
            <item>
              <description>No colors are introduced</description>
            </item>
            <item>
              <description>Color counts remain unchanged</description>
            </item>
          </list>
        </para>
        <para>Given the same encrypt area (defined by <see cref="P:Leadtools.ImageProcessing.ScrambleCommand.Rectangle">ScrambleCommand.Rectangle</see>) 
            and the same <see cref="P:Leadtools.ImageProcessing.ScrambleCommand.Key">ScrambleCommand.Key</see>, setting (
            <see cref="P:Leadtools.ImageProcessing.ScrambleCommand.Flags">ScrambleCommand.Flags</see> = <see cref="T:Leadtools.ImageProcessing.ScrambleCommandFlags">ScrambleCommandFlags.Encrypt</see>) 
            is the inverse of (<see cref="P:Leadtools.ImageProcessing.ScrambleCommand.Flags">ScrambleCommand.Flags</see> = <see cref="T:Leadtools.ImageProcessing.ScrambleCommandFlags">ScrambleCommandFlags.Decrypt</see>).</para>
      </remarks>
      <example>
        <para>This example will scramble the upper-left quadrant of an image using the key 123 and then save the image to disk. 
            It will then unscrambles it and saves it disk for comparism.</para>
        <code lang="VB">        Public Sub ScrambleCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim scrambledFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_scrambled.bmp")
         Dim unscrambledFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_unscrambled.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         Dim rc As LeadRect = New LeadRect(0, 0, image.Width \ 2, image.Height \ 2)
         Dim key As Integer = 123

         ' Scramble it and save it to disk
         Dim command As ScrambleCommand = New ScrambleCommand()
         command.Flags = ScrambleCommandFlags.Encrypt
         command.Rectangle = rc
         command.Key = key
         command.Run(image)
         codecs.Save(image, scrambledFileName, RasterImageFormat.Bmp, 24)

         ' Unscramble the image and save it to disk
         command.Flags = ScrambleCommandFlags.Decrypt
         command.Run(image)
         codecs.Save(image, unscrambledFileName, RasterImageFormat.Bmp, 24)

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ScrambleCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string scrambledFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_scrambled.bmp");
         string unscrambledFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1_unscrambled.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         LeadRect rc = new LeadRect(0, 0, image.Width / 2, image.Height / 2);
         int key = 123;

         // Scramble it and save it to disk
         ScrambleCommand command = new ScrambleCommand();
         command.Flags = ScrambleCommandFlags.Encrypt;
         command.Rectangle = rc;
         command.Key = key;
         command.Run(image);
         codecs.Save(image, scrambledFileName, RasterImageFormat.Bmp, 24);

         // Unscramble the image and save it to disk
         command.Flags = ScrambleCommandFlags.Decrypt;
         command.Run(image);
         codecs.Save(image, unscrambledFileName, RasterImageFormat.Bmp, 24);

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ScrambleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ScrambleCommand.#ctor(Leadtools.LeadRect,System.Int32,Leadtools.ImageProcessing.ScrambleCommandFlags)">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <param name="rc">Rectangle which describes the area to scramble.</param>
      <param name="key">Key that determines the scramble.</param>
      <param name="flags">Flag that determines whether to encrypt or decrypt the area.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" />.</example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ScrambleCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ScrambleCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.ScrambleCommand.Rectangle">
      <summary>Gets or sets the rectangle which describes the area to scramble. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>The rectangle which describes the area to scramble.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ScrambleCommand.Key">
      <summary>Gets or sets the key that determines the scramble. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>Key that determines the scramble.</value>
      <remarks>
            This is an unsigned integer with a minimum value of 0 and a maximum value of 4294967295 (0xffffffff).
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" />.</example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ScrambleCommand.Flags">
      <summary>Gets or sets the flag that determines whether to encrypt or decrypt the area. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a></summary>
      <value>Flag that determines whether to encrypt or decrypt the area.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ScrambleCommand" />.</example>
    </member>
    <member name="T:Leadtools.ImageProcessing.ColorResolutionCommandMode">
      <summary>Options for the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.Mode">ColorResolutionCommand.Mode</see> property. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandMode.InPlace">
      <summary>
            Convert the source image in place (no copy is made).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandMode.CreateDestinationImage">
      <summary>
            Create a new image, leaving the source image unchanged.
            The <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DestinationImage">ColorResolutionCommand.DestinationImage</see> will hold the converted
            <see cref="T:Leadtools.RasterImage" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandMode.OnlyData">
      <summary>
        <para>Only provide the converted data in the <see cref="E:Leadtools.ImageProcessing.ColorResolutionCommand.Data">ColorResolutionCommand.Data</see> event.</para>
        <para>The source image is unchanged and no new, destination image will be created.</para>
      </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.ColorResolutionCommandMode.AllPages">
      <summary>
            Process all pages in the source image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.ColorResolutionCommand">
      <summary>Converts an image from any bits-per-pixel to any bits-per-pixel. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <keywords>Binarize | Color reduction | Down sampling | Color resolution | Intensity detection | Bitonal images | Dithering | Palettes | Bits per pixel | Color space | Color order|Resolution|Bit-depth|Grayscale</keywords>
      <remarks>
        <para>This class provides flexibility in specifying the output destination and in specifying the palette to use.</para>
        <para>For general information about dithering, refer to <see cref="T:Leadtools.Topics.IntroductionColorResolutionandDithering">Color Resolution and Dithering</see> 
            and <see cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</see>.</para>
        <para>You can convert the image in place or create a new converted image.</para>
        <para>In specifying a palette, you can use simple palette options, or you can specify a palette that is tailored to your needs. The tailored
            palette can be any size that you specify. It can include specific colors, reserved blank entries, and open entries that this method fills with
            optimized colors.</para>
        <para>If you use the same tailored palette more than once, you can improve performance by creating a table, using
            <see cref="T:Leadtools.ImageProcessing.RasterUserMatchTable" />.</para>
        <para>NOTE: Using this class to change the color order of a 24-bit or 32-bit image (i.e. RGB to BGR) will have no effect on the image when 
            painting or saving (to a file). If you want to change the visual appearance, you can simply swap the color order using the <see cref="P:Leadtools.RasterImage.Order">RasterImage.Order</see> property.</para>
        <para>When converting to 32 and 64-bit images, you can control whether to initialize the alpha channel values to all 0's or 1's through the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.InitAlpha" /> property.</para>
        <para>This class does not support signed data images. An exception will be thrown if a signed data image is passed to this class.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction - Palette Handling</see>.</para>
      </remarks>
      <example>
        <para>This example will run the ColorResolutionCommand on an image to convert it to 8 and 4 bits/pixel.</para>
        <code lang="VB">        Public Sub ColorResolutionCommandExample()
         Dim codecs As RasterCodecs = New RasterCodecs()

         Dim srcFileName As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim destFileName1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorres8.bmp")
         Dim destFileName2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorres4.bmp")

         ' Load the source image from disk
         Dim image As RasterImage = codecs.Load(srcFileName)

         ' First color-res it to 8 bits per pixel  using the Netscape palette into a seperate image
         Dim cmd As ColorResolutionCommand = New ColorResolutionCommand()
         cmd.Mode = ColorResolutionCommandMode.CreateDestinationImage
         cmd.BitsPerPixel = 8
         cmd.Order = RasterByteOrder.Rgb
         cmd.DitheringMethod = RasterDitheringMethod.None
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.UsePalette
         cmd.SetPalette(RasterPalette.Netscape())
         cmd.Run(image)

         Dim destImage As RasterImage = cmd.DestinationImage
         Debug.Assert(destImage.BitsPerPixel = 8)

         ' Save it to disk
         codecs.Save(destImage, destFileName1, RasterImageFormat.Bmp, 8)
         destImage.Dispose()

         ' Now color-res the image in-place to 4-bits per pixel using the Optimized palette
         cmd.Mode = ColorResolutionCommandMode.InPlace
         cmd.BitsPerPixel = 4
         cmd.Order = RasterByteOrder.Rgb
         cmd.DitheringMethod = RasterDitheringMethod.None
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.Optimized
         cmd.Run(image)
         Debug.Assert(image.BitsPerPixel = 4)

         ' Save it to disk
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 4)
         destImage.Dispose()

         ' Clean Up
         image.Dispose()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void ColorResolutionCommandExample()
      {
         RasterCodecs codecs = new RasterCodecs();

         string srcFileName = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string destFileName1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorres8.bmp");
         string destFileName2 = Path.Combine(LEAD_VARS.ImagesDir, "Image1_colorres4.bmp");

         // Load the source image from disk
         RasterImage image = codecs.Load(srcFileName);

         // First color-res it to 8 bits per pixel  using the Netscape palette into a seperate image
         ColorResolutionCommand cmd = new ColorResolutionCommand();
         cmd.Mode = ColorResolutionCommandMode.CreateDestinationImage;
         cmd.BitsPerPixel = 8;
         cmd.Order = RasterByteOrder.Rgb;
         cmd.DitheringMethod = RasterDitheringMethod.None;
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.UsePalette;
         cmd.SetPalette(RasterPalette.Netscape());
         cmd.Run(image);

         RasterImage destImage = cmd.DestinationImage;
         Debug.Assert(destImage.BitsPerPixel == 8);

         // Save it to disk
         codecs.Save(destImage, destFileName1, RasterImageFormat.Bmp, 8);
         destImage.Dispose();

         // Now color-res the image in-place to 4-bits per pixel using the Optimized palette
         cmd.Mode = ColorResolutionCommandMode.InPlace;
         cmd.BitsPerPixel = 4;
         cmd.Order = RasterByteOrder.Rgb;
         cmd.DitheringMethod = RasterDitheringMethod.None;
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.Optimized;
         cmd.Run(image);
         Debug.Assert(image.BitsPerPixel == 4);

         // Save it to disk
         codecs.Save(image, destFileName2, RasterImageFormat.Bmp, 4);
         destImage.Dispose();

         // Clean Up
         image.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <code lang="SilverlightCSharp">      public void ColorResolutionCommandExample(RasterImage image, Stream destStream8, Stream destStream4)
      {
         RasterCodecs codecs = new RasterCodecs();
         // First color-res it to 8 bits per pixel  using the Netscape palette into a seperate image
         ColorResolutionCommand cmd = new ColorResolutionCommand();
         cmd.Mode = ColorResolutionCommandMode.CreateDestinationImage;
         cmd.BitsPerPixel = 8;
         cmd.Order = RasterByteOrder.Rgb;
         cmd.DitheringMethod = RasterDitheringMethod.None;
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.UsePalette;
         cmd.SetPalette(RasterPalette.Netscape());
         cmd.Run(image);

         RasterImage destImage = cmd.DestinationImage;
         Debug.Assert(destImage.BitsPerPixel == 8);

         // Save it to disk
         codecs.Save(destImage, destStream8, RasterImageFormat.Bmp, 8);
         destImage.Dispose();

         // Now color-res the image in-place to 4-bits per pixel using the Optimized palette
         cmd.Mode = ColorResolutionCommandMode.InPlace;
         cmd.BitsPerPixel = 4;
         cmd.Order = RasterByteOrder.Rgb;
         cmd.DitheringMethod = RasterDitheringMethod.None;
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.Optimized;
         cmd.Run(image);
         Debug.Assert(image.BitsPerPixel == 4);

         // Save it to disk
         codecs.Save(image, destStream4, RasterImageFormat.Bmp, 4);
         destImage.Dispose();

         // Clean Up
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorResolutionCommandExample(ByVal image As RasterImage, ByVal destStream8 As Stream, ByVal destStream4 As Stream)
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' First color-res it to 8 bits per pixel  using the Netscape palette into a seperate image
         Dim cmd As ColorResolutionCommand = New ColorResolutionCommand()
         cmd.Mode = ColorResolutionCommandMode.CreateDestinationImage
         cmd.BitsPerPixel = 8
         cmd.Order = RasterByteOrder.Rgb
         cmd.DitheringMethod = RasterDitheringMethod.None
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.UsePalette
         cmd.SetPalette(RasterPalette.Netscape())
         cmd.Run(image)

         Dim destImage As RasterImage = cmd.DestinationImage
         Debug.Assert(destImage.BitsPerPixel = 8)

         ' Save it to disk
         codecs.Save(destImage, destStream8, RasterImageFormat.Bmp, 8)
         destImage.Dispose()

         ' Now color-res the image in-place to 4-bits per pixel using the Optimized palette
         cmd.Mode = ColorResolutionCommandMode.InPlace
         cmd.BitsPerPixel = 4
         cmd.Order = RasterByteOrder.Rgb
         cmd.DitheringMethod = RasterDitheringMethod.None
         cmd.PaletteFlags = ColorResolutionCommandPaletteFlags.Optimized
         cmd.Run(image)
         Debug.Assert(image.BitsPerPixel = 4)

         ' Save it to disk
         codecs.Save(image, destStream4, RasterImageFormat.Bmp, 4)
         destImage.Dispose()

         ' Clean Up
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">ImageProcessing.ColorResolutionCommand.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">RasterImage.DitherLine method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">Convert</seealso>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> class with default parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.#ctor(Leadtools.ImageProcessing.ColorResolutionCommandMode,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterDitheringMethod,Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags,Leadtools.RasterColor[])">
      <summary>Initializes a new instance of the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> class with explicit parameters. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="mode">Flags which control the behaviour of the command.</param>
      <param name="bitsPerPixel">The number of bits per pixel to for the conversion.
            Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48 and 64.</param>
      <param name="order">The desired color order for the conversion.</param>
      <param name="ditheringMethod">
            Dithering options, useful only when the resulting image requires a palette (when it is 8 bits per pixel or less).</param>
      <param name="paletteFlags">
            Palette options, useful only when the resulting image requires a palette (when it is 8 bits per pixel or less).</param>
      <param name="palette">The palette used when converting the image if <paramref name="paletteFlags" /> includes the 
            <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.UsePalette</see> flag.</param>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.GetPalette">
      <summary>Gets the custom palette to use when converting the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>The custom palette to use when converting the image.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])" /> method to set the palette to use.</para>
        <para>The custom palette to use. Specify this parameter as follows:
            <list><item><description>
            If you want to use the fixed palette or a fully optimized palette, pass a null reference (Nothing in Visual Basic) in this property.
            </description></item><item><description>
            If you want to supply the entire palette, specify <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.UsePalette</see>
            in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags" /> property and set this property. <see cref="T:Leadtools.Topics.ColorResolutionCommandPaletteUsePalette">Click here</see>
            to see how to fill in the palette.
            </description></item><item><description>
            If you want the command to fill part of your palette with optimized colors, specify <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.Optimized</see> in 
            the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags" /> property and set this property. <see cref="T:Leadtools.Topics.ColorResolutionCommandPaletteOptimized">Click here</see>
            to see how to fill in the palette.
            </description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])">
      <summary>Sets the custom palette to use when converting the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="value">The palette to use.</param>
      <remarks>
        <para>Use the <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.GetPalette" /> method to get the palette to use.</para>
        <para>The custom palette to use. Specify this parameter as follows:
            <list><item><description>
            If you want to use the fixed palette or a fully optimized palette, pass a null reference (Nothing in Visual Basic) in this property.
            </description></item><item><description>
            If you want to supply the entire palette, specify <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.UsePalette</see>
            in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags" /> property and set this property. <see cref="T:Leadtools.Topics.ColorResolutionCommandPaletteUsePalette">Click here</see>
            to see how to fill in the palette.
            </description></item><item><description>
            If you want the command to fill part of your palette with optimized colors, specify <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.Optimized</see> in 
            the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags" /> property and set this property. <see cref="T:Leadtools.Topics.ColorResolutionCommandPaletteOptimized">Click here</see>
            to see how to fill in the palette.
            </description></item></list></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.Run(Leadtools.RasterImage)">
      <summary>Overrides <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" />. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <param name="image">The image on which the image processing command should be performed.</param>
      <returns>
        <see cref="T:Leadtools.RasterImageChangedFlags" /> flags which indicate the changes made to the specified
            image.</returns>
      <remarks>
        <para>Call this method to start the color resolution image processing command. For more information, refer to <see cref="M:Leadtools.ImageProcessing.IRasterCommand.Run(Leadtools.RasterImage)">IRasterCommand.Run</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.ToString">
      <summary>Overridden. Returns a meaningful name for this command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <returns>string that is the name of this method.</returns>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.ImageProcessing.ColorResolutionCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="E:Leadtools.ImageProcessing.ColorResolutionCommand.Data">
      <summary>Occurs during the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />, to provide the converted data. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <event>
            The event handler receives an argument of type <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandDataEventArgs" /> containing data related to this event.
            </event>
      <remarks>
            You can use this event to handle the converted image data that the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> has written to a buffer.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.DestinationImage">
      <summary>Gets the resulting image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The resulting <see cref="T:Leadtools.RasterImage" />.</value>
      <remarks>If the value of the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.Mode" /> property is set to
            <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandMode">ColorResolutionCommandMode.CreateDestinationImage</see>, then this property
            will contain the resulting converted image.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.Mode">
      <summary>Gets or sets the the behaviour of the command. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandMode" /> enumeration value that control the behaviour of the command.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> can convert an image inplace, can create a new image for the conversion or can be used to
            get the converted data only.  The <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.Mode" /> property controls what happens when the <see cref="M:Leadtools.ImageProcessing.RasterCommand.Run(Leadtools.RasterImage)" /> method is executed.</para>
        <para>For more information, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandMode" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.BitsPerPixel">
      <summary>Gets or sets the number of bits per pixel for the conversion. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The number of bits per pixel for the conversion. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 24, 32, 48 and 64.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.Order">
      <summary>Gets or sets the desired color order for the conversion. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The desired color order for the conversion.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.DitheringMethod">
      <summary>Gets or sets the dithering options used when converted the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The dithering option used when converted the image.</value>
      <remarks>
            The dithering method is useful only when the resulting image requires a palette (when it is 8 bits per pixel or less).
            </remarks>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.DitheringMethods">Dithering Methods</seealso>
      <seealso cref="P:Leadtools.Codecs.CodecsThumbnailOptions.DitheringMethod">Codecs.CodecsThumbnailOptions.DitheringMethod property</seealso>
      <seealso cref="T:Leadtools.RasterDitheringMethod">RasterDitheringMethod enumeration</seealso>
      <seealso cref="P:Leadtools.RasterDefaults.DitheringMethod">RasterDefaults.DitheringMethod property</seealso>
      <seealso cref="P:Leadtools.RasterImage.DitheringMethod">RasterImage.DitheringMethod property</seealso>
      <seealso cref="M:Leadtools.RasterImage.DitherLine(System.Byte[],System.Int32,System.Byte[],System.Int32)">RasterImage.DitherLine method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StartDithering(Leadtools.RasterColor[],System.Int32)">RasterImage.StartDithering method</seealso>
      <seealso cref="M:Leadtools.RasterImage.StopDithering">RasterImage.StopDithering method</seealso>
      <seealso cref="M:Leadtools.RasterBufferConverter.Convert(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.RasterByteOrder,Leadtools.RasterByteOrder,Leadtools.RasterColor[],Leadtools.RasterColor[],System.Int32,System.Int32,System.Int32,Leadtools.RasterConvertBufferFlags)">RasterBufferConverter.Convert</seealso>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags">
      <summary>Gets or sets the Palette options used when converted the image. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>The palette options used when converted the image.</value>
      <remarks>
        <para>The palette options are useful only when the resulting image requires a palette (when it is 8 bits per pixel or less).</para>
        <para>For more information, refer to <see cref="T:Leadtools.Topics.IntroductionPaletteHandling">Introduction: Palette Handling</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.Colors">
      <summary>Gets or sets the number of colors to use in the palette <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
            An integer value that indicates the number of colors to use in the palette.
            </value>
      <remarks>
        <para>If you specify a palette in the <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])" /> method, pass the number of entries in your palette (including reserved entries). The value of the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.Colors" /> property is not used.</para>
        <para>If you pass nullptr to the <see cref="M:Leadtools.ImageProcessing.ColorResolutionCommand.SetPalette(Leadtools.RasterColor[])" /> method or leave it uninitialized and you specify <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommandPaletteFlags">ColorResolutionCommandPaletteFlags.Optimized</see>
            in the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.PaletteFlags" /> property, you can use the <see cref="P:Leadtools.ImageProcessing.ColorResolutionCommand.Colors" /> property to limit the number of colors that the command maps in the optimized palette.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
    <member name="P:Leadtools.ImageProcessing.ColorResolutionCommand.InitAlpha">
      <summary>Indicates whether to initialize the alpha channel values when converting to 32 or 64-bit images. <a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="dotnet.png" alt=".NET support" border="0" /></a><a href="ms-help://Leadtools.DotNet175/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.LEADTOOLSDocumentation.html"><img src="silverlight.png" alt="Silverlight support" border="0" /></a></summary>
      <value>
        <strong>true</strong> to initialize the alpha channel values to all 1's (0xFF for 32-bit and OxFFFF for 64-bit) when conversting to 32 or
            64-bit images, or <strong>false</strong> to leave the alpha channel values uninitialized to all 0's. Default value is <strong>true</strong>.
            </value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /></example>
    </member>
  </members>
</doc>